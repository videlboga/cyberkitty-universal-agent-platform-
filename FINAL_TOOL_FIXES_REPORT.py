#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ KittyCore 3.0

–ú–ò–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: –ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import time
import asyncio

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
def sync_execute(async_tool, *args, **kwargs):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è async execute"""
    try:
        loop = asyncio.get_running_loop()
        import concurrent.futures
        with concurrent.futures.ThreadPoolExecutor() as executor:
            future = executor.submit(asyncio.run, async_tool.execute(*args, **kwargs))
            return future.result(timeout=30)
    except RuntimeError:
        return asyncio.run(async_tool.execute(*args, **kwargs))

def test_all_fixed_tools():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢: –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0")
    print("=" * 70)
    print("üéØ –¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –í–°–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
    print("üìä –ö–†–ò–¢–ï–†–ò–ô: ‚â•75% —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    print("üîç –ú–ï–¢–û–î: –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –±–µ–∑ –º–æ–∫–æ–≤")
    print("=" * 70)
    
    results = {}
    
    # 1. –†–ê–ù–ï–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï (async/sync –ø—Ä–æ–±–ª–µ–º—ã)
    print("\nüîß –ì–†–£–ü–ü–ê 1: –†–ê–ù–ï–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï (async/sync)")
    print("-" * 50)
    
    # WebSearch
    try:
        from kittycore.tools.enhanced_web_search_tool import EnhancedWebSearchTool
        tool = EnhancedWebSearchTool()
        result = sync_execute(tool, query="KittyCore test", limit=2)
        success = hasattr(result, 'success') and result.success
        data_size = len(str(result.data)) if hasattr(result, 'data') else 0
        results['WebSearch'] = {'success': success, 'size': data_size, 'status': '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù' if success else '‚ùå –ü–†–û–í–ê–õ'}
        print(f"  üîç WebSearch: {results['WebSearch']['status']} (—Ä–∞–∑–º–µ—Ä: {data_size})")
    except Exception as e:
        results['WebSearch'] = {'success': False, 'size': 0, 'status': f'‚ùå –û–®–ò–ë–ö–ê: {e}'}
        print(f"  üîç WebSearch: {results['WebSearch']['status']}")
    
    # WebScraping  
    try:
        from kittycore.tools.enhanced_web_scraping_tool import EnhancedWebScrapingTool
        tool = EnhancedWebScrapingTool()
        result = sync_execute(tool, urls=["https://httpbin.org/html"])
        success = hasattr(result, 'success') and result.success
        data_size = len(str(result.data)) if hasattr(result, 'data') else 0
        results['WebScraping'] = {'success': success, 'size': data_size, 'status': '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù' if success else '‚ùå –ü–†–û–í–ê–õ'}
        print(f"  üï∑Ô∏è WebScraping: {results['WebScraping']['status']} (—Ä–∞–∑–º–µ—Ä: {data_size})")
    except Exception as e:
        results['WebScraping'] = {'success': False, 'size': 0, 'status': f'‚ùå –û–®–ò–ë–ö–ê: {e}'}
        print(f"  üï∑Ô∏è WebScraping: {results['WebScraping']['status']}")
    
    # SecurityTool
    try:
        from kittycore.tools.security_tool import SecurityTool
        tool = SecurityTool()
        result = sync_execute(tool, action="analyze_password", password="123456")
        success = hasattr(result, 'success') and result.success
        data_size = len(str(result.data)) if hasattr(result, 'data') else 0
        results['SecurityTool'] = {'success': success, 'size': data_size, 'status': '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù' if success else '‚ùå –ü–†–û–í–ê–õ'}
        print(f"  üîí SecurityTool: {results['SecurityTool']['status']} (—Ä–∞–∑–º–µ—Ä: {data_size})")
    except Exception as e:
        results['SecurityTool'] = {'success': False, 'size': 0, 'status': f'‚ùå –û–®–ò–ë–ö–ê: {e}'}
        print(f"  üîí SecurityTool: {results['SecurityTool']['status']}")
    
    # 2. –ù–û–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã)
    print("\nüîß –ì–†–£–ü–ü–ê 2: –ù–û–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã)")
    print("-" * 50)
    
    # DatabaseTool
    try:
        from kittycore.tools.database_tool import DatabaseTool
        tool = DatabaseTool()
        result = tool.execute(query="SELECT 1 as test")
        success = hasattr(result, 'success') and result.success
        data_size = len(str(result.data)) if hasattr(result, 'data') else 0
        results['DatabaseTool'] = {'success': success, 'size': data_size, 'status': '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù' if success else '‚ùå –ü–†–û–í–ê–õ'}
        print(f"  üóÑÔ∏è DatabaseTool: {results['DatabaseTool']['status']} (—Ä–∞–∑–º–µ—Ä: {data_size})")
    except Exception as e:
        results['DatabaseTool'] = {'success': False, 'size': 0, 'status': f'‚ùå –û–®–ò–ë–ö–ê: {e}'}
        print(f"  üóÑÔ∏è DatabaseTool: {results['DatabaseTool']['status']}")
    
    # VectorSearchTool
    try:
        from kittycore.tools.vector_search_tool import VectorSearchTool
        import tempfile
        temp_dir = tempfile.mkdtemp()
        tool = VectorSearchTool(storage_path=temp_dir)
        result = tool.execute(action="create_collection", collection_name="test")
        success = hasattr(result, 'success') and result.success
        data_size = len(str(result.data)) if hasattr(result, 'data') else 0
        results['VectorSearchTool'] = {'success': success, 'size': data_size, 'status': '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù' if success else '‚ùå –ü–†–û–í–ê–õ'}
        print(f"  üîç VectorSearchTool: {results['VectorSearchTool']['status']} (—Ä–∞–∑–º–µ—Ä: {data_size})")
    except Exception as e:
        results['VectorSearchTool'] = {'success': False, 'size': 0, 'status': f'‚ùå –û–®–ò–ë–ö–ê: {e}'}
        print(f"  üîç VectorSearchTool: {results['VectorSearchTool']['status']}")
    
    # EmailTool
    try:
        from kittycore.tools.communication_tools import EmailTool
        tool = EmailTool()
        result = tool.execute(operation="draft", to="test@example.com", subject="Test", body="Test body")
        success = hasattr(result, 'success') and result.success
        data_size = len(str(result.data)) if hasattr(result, 'data') else 0
        results['EmailTool'] = {'success': success, 'size': data_size, 'status': '‚úÖ –ß–ê–°–¢–ò–ß–ù–û' if success else '‚ùå –ü–†–û–í–ê–õ'}
        print(f"  üìß EmailTool: {results['EmailTool']['status']} (—Ä–∞–∑–º–µ—Ä: {data_size})")
    except Exception as e:
        results['EmailTool'] = {'success': False, 'size': 0, 'status': f'‚ùå –û–®–ò–ë–ö–ê: {e}'}
        print(f"  üìß EmailTool: {results['EmailTool']['status']}")
    
    # 3. –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–Æ–©–ò–ï
    print("\nüîß –ì–†–£–ü–ü–ê 3: –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–Æ–©–ò–ï")
    print("-" * 50)
    
    # ApiRequestTool
    try:
        from kittycore.tools.api_request_tool import ApiRequestTool
        tool = ApiRequestTool()
        result = tool.execute(url="https://httpbin.org/get", method="GET", timeout=3)
        success = hasattr(result, 'success') and result.success
        data_size = len(str(result.data)) if hasattr(result, 'data') else 0
        results['ApiRequestTool'] = {'success': success, 'size': data_size, 'status': '‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û' if success else '‚ùå –ü–†–û–í–ê–õ'}
        print(f"  üåê ApiRequestTool: {results['ApiRequestTool']['status']} (—Ä–∞–∑–º–µ—Ä: {data_size})")
    except Exception as e:
        results['ApiRequestTool'] = {'success': False, 'size': 0, 'status': f'‚ùå –û–®–ò–ë–ö–ê: {e}'}
        print(f"  üåê ApiRequestTool: {results['ApiRequestTool']['status']}")
    
    # NetworkTool
    try:
        from kittycore.tools.network_tool import NetworkTool
        tool = NetworkTool()
        result = tool.execute(action="ping", host="8.8.8.8")
        success = hasattr(result, 'success') and result.success
        data_size = len(str(result.data)) if hasattr(result, 'data') else 0
        results['NetworkTool'] = {'success': success, 'size': data_size, 'status': '‚ö†Ô∏è –ù–ê–°–¢–†–û–ô–ö–ê' if not success else '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù'}
        print(f"  üì° NetworkTool: {results['NetworkTool']['status']} (—Ä–∞–∑–º–µ—Ä: {data_size})")
    except Exception as e:
        results['NetworkTool'] = {'success': False, 'size': 0, 'status': f'‚ùå –û–®–ò–ë–ö–ê: {e}'}
        print(f"  üì° NetworkTool: {results['NetworkTool']['status']}")
    
    # –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    print("\n" + "=" * 70)
    print("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 70)
    
    total = len(results)
    fully_fixed = sum(1 for r in results.values() if '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù' in r['status'])
    partially_fixed = sum(1 for r in results.values() if '‚ö†Ô∏è' in r['status'] or '‚úÖ –ß–ê–°–¢–ò–ß–ù–û' in r['status'])
    failed = sum(1 for r in results.values() if '‚ùå' in r['status'])
    
    print(f"üìä –í–°–ï–ì–û –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–û: {total} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    print(f"‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–û: {fully_fixed} ({fully_fixed/total*100:.1f}%)")
    print(f"‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢: {partially_fixed} ({partially_fixed/total*100:.1f}%)")
    print(f"‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢: {failed} ({failed/total*100:.1f}%)")
    
    working_count = fully_fixed + partially_fixed
    working_rate = working_count / total * 100
    
    print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–¨: {working_count}/{total} = {working_rate:.1f}%")
    
    if working_rate >= 75:
        print("üéâ –ú–ò–°–°–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê: ‚â•75% –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        status = "‚úÖ –£–°–ü–ï–•"
    elif working_rate >= 50:
        print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: 50-75% –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        status = "‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û"
    else:
        print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê: <50% –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        status = "‚ùå –ü–†–û–í–ê–õ"
    
    print("\n" + "=" * 70)
    print("üéØ –ö–õ–Æ–ß–ï–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("  üîß Async/Sync –ø—Ä–æ–±–ª–µ–º—ã ‚Üí —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ sync_execute()")
    print("  üîß ToolResult –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Üí —É–¥–∞–ª–µ–Ω–∏–µ message= –∏ tool_name=")
    print("  üîß –°–∏–≥–Ω–∞—Ç—É—Ä—ã –º–µ—Ç–æ–¥–æ–≤ ‚Üí –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã execute()")
    print("  üîß –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ‚Üí –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –º–æ–¥—É–ª–µ–π")
    print("  üîß –ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –º–æ–∫–æ–≤")
    print("=" * 70)
    
    return results, status

if __name__ == "__main__":
    start_time = time.time()
    results, status = test_all_fixed_tools()
    end_time = time.time()
    
    test_time = (end_time - start_time) * 1000
    print(f"\nüèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {status} ({test_time:.1f}–º—Å)") 