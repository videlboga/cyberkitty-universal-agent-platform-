#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–¥–∞—á–∏ —Å —Ä—ã–Ω–∫–æ–º –ë–∏—Ç—Ä–∏–∫—Å24 - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –•–û–†–û–®–ï–ô hardcoded –ª–æ–≥–∏–∫–∏
"""

import asyncio
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'kittycore'))

from kittycore.core.orchestrator import OrchestratorAgent

async def test_bitrix_market_task():
    """–¢–µ—Å—Ç –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24"""
    
    print("üß™ –¢–ï–°–¢: –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ë–∏—Ç—Ä–∏–∫—Å24")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ —Ä—ã–Ω–æ–∫ –ë–∏—Ç—Ä–∏–∫—Å24
    task = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ë–∏—Ç—Ä–∏–∫—Å24 –∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –ø—Ä–æ–±–ª–µ–º–∞–º–∏ UX –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"
    
    print(f"üìã –ó–∞–¥–∞—á–∞: {task}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = OrchestratorAgent()
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
        result = await orchestrator.execute_task(task)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
        print(f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –ï—Å–ª–∏ result - —Å—Ç—Ä–æ–∫–∞, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –æ—à–∏–±–∫–∞
        if isinstance(result, str):
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result}")
            return False
            
        print(f"–°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
        print(f"–£—Å–ø–µ—Ö: {result.get('success', False)}")
        
        if result.get('files_created'):
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {result['files_created']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for filename in result['files_created']:
                if os.path.exists(filename):
                    print(f"\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {filename}:")
                    print("-" * 40)
                    with open(filename, 'r', encoding='utf-8') as f:
                        content = f.read()
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                        preview = content[:500] + "..." if len(content) > 500 else content
                        print(preview)
                    print("-" * 40)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ –ë–∏—Ç—Ä–∏–∫—Å24
                    if "–±–∏—Ç—Ä–∏–∫—Å24" in content.lower() or "bitrix24" in content.lower():
                        print("‚úÖ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ –ë–∏—Ç—Ä–∏–∫—Å24!")
                    
                    if "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏" in content.lower() and "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π" in content.lower():
                        print("‚úÖ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π!")
                        
                    if "2000+" in content or "–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å" in content.lower():
                        print("‚úÖ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä—ã–Ω–∫–∞!")
                        
                    if "UX" in content or "–ø—Ä–æ–±–ª–µ–º—ã" in content.lower():
                        print("‚úÖ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–Ω–∞–ª–∏–∑ UX –ø—Ä–æ–±–ª–µ–º!")
        
        if result.get('output'):
            print(f"\nüí¨ –í—ã–≤–æ–¥: {result['output']}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        if result.get('success') and result.get('files_created'):
            print("\nüéâ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("‚úÖ WebSearch –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ë–∏—Ç—Ä–∏–∫—Å24")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–ª–∞ —Ñ–∞–π–ª—ã —Å –ø–æ–ª–µ–∑–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")
            print("‚úÖ –•–û–†–û–®–ê–Ø hardcoded –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
            return True
        else:
            print("\n‚ùå –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            return False
            
    except Exception as e:
        print(f"\nüí• –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_bitrix_market_task())
    if success:
        print("\nüöÄ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –†—ã–Ω–æ–∫ –ë–∏—Ç—Ä–∏–∫—Å24 –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    else:
        print("\nüí• –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!")
        sys.exit(1) 