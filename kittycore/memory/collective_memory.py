"""
üß† CollectiveMemory - –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –∫–æ–º–∞–Ω–¥ –∞–≥–µ–Ω—Ç–æ–≤ KittyCore 3.0

–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –û–±—â–∞—è –ø–∞–º—è—Ç—å –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã  
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
- –ö—Ä–æ—Å—Å-–∞–≥–µ–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
- –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ

–ü—Ä–∏–Ω—Ü–∏–ø: "–ê–≥–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã –¥—É–º–∞—é—Ç –≤–º–µ—Å—Ç–µ" üöÄ
"""

import asyncio
from dataclasses import dataclass
from typing import Dict, List, Any, Optional
from datetime import datetime 

@dataclass
class TeamMemoryEntry:
    """–ó–∞–ø–∏—Å—å –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
    id: str
    content: str
    author_agent: str
    team_id: str
    timestamp: datetime
    tags: List[str]
    importance: float = 0.5 

class CollectiveMemory:
    """–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, team_id: str):
        self.team_id = team_id
        self.memories: Dict[str, TeamMemoryEntry] = {}
        self.agent_contributions: Dict[str, int] = {} 

    async def store(self, content: str, agent_id: str, tags: List[str] = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞"""
        entry_id = f"{agent_id}_{len(self.memories)}"
        entry = TeamMemoryEntry(
            id=entry_id,
            content=content,
            author_agent=agent_id, 
            team_id=self.team_id,
            timestamp=datetime.now(),
            tags=tags or []
        )
        self.memories[entry_id] = entry
        self.agent_contributions[agent_id] = self.agent_contributions.get(agent_id, 0) + 1
        return entry_id 

    async def search(self, query: str, limit: int = 5) -> List[TeamMemoryEntry]:
        """–ü–æ–∏—Å–∫ –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        results = []
        for memory in self.memories.values():
            if query.lower() in memory.content.lower():
                results.append(memory)
        
        results.sort(key=lambda x: x.importance, reverse=True)
        return results[:limit]

    async def add_memory(self, agent_id: str, memory_data: Dict[str, Any]) -> str:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–∞–º—è—Ç—å (–ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è store –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏)"""
        content = memory_data.get("task", "") + " " + memory_data.get("result", "")
        tags = ["–ø–∞–º—è—Ç—å", "—Ç–µ—Å—Ç"]
        return await self.store(content, agent_id, tags)

    async def search_memories(self, query: str, limit: int = 5) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π (–ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è search –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        memories = await self.search(query, limit)
        return [{"content": m.content, "agent": m.author_agent, "timestamp": m.timestamp} for m in memories] 

    def get_team_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
        return {
            "team_id": self.team_id,
            "total_memories": len(self.memories),
            "agents_count": len(self.agent_contributions),
            "agent_contributions": self.agent_contributions,
            "avg_importance": sum(m.importance for m in self.memories.values()) / max(1, len(self.memories))
        } 