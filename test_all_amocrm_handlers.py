#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö 49 AmoCRM handlers
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∫–∞–∂–¥—ã–π handler:
1. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
2. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
"""

import asyncio
import json
from app.core.simple_engine import create_engine

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö AmoCRM handlers –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
AMOCRM_HANDLERS = [
    # –ë–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å (6 handlers)
    "amocrm_find_contact",
    "amocrm_create_contact", 
    "amocrm_find_lead",
    "amocrm_create_lead",
    "amocrm_add_note",
    "amocrm_search",
    
    # Companies –º–æ–¥—É–ª—å (8 handlers)
    "amocrm_find_company",
    "amocrm_create_company",
    "amocrm_update_company",
    "amocrm_delete_company",
    "amocrm_list_companies",
    "amocrm_add_company_contact",
    "amocrm_remove_company_contact",
    "amocrm_get_company_contacts",
    
    # Tasks –º–æ–¥—É–ª—å (8 handlers)
    "amocrm_create_task",
    "amocrm_update_task",
    "amocrm_complete_task",
    "amocrm_delete_task",
    "amocrm_list_tasks",
    "amocrm_create_event",
    "amocrm_update_event",
    "amocrm_list_events",
    
    # Advanced –º–æ–¥—É–ª—å (12 handlers)
    "amocrm_list_webhooks",
    "amocrm_create_webhook",
    "amocrm_delete_webhook",
    "amocrm_list_widgets",
    "amocrm_install_widget",
    "amocrm_uninstall_widget",
    "amocrm_list_catalogs",
    "amocrm_create_catalog",
    "amocrm_list_calls",
    "amocrm_create_call",
    "amocrm_get_account_info",
    "amocrm_get_user_info",
    
    # Admin –º–æ–¥—É–ª—å (14 handlers)
    "amocrm_list_pipelines",
    "amocrm_create_pipeline",
    "amocrm_update_pipeline",
    "amocrm_delete_pipeline",
    "amocrm_list_users",
    "amocrm_create_user",
    "amocrm_update_user",
    "amocrm_list_custom_fields",
    "amocrm_create_custom_field",
    "amocrm_update_custom_field",
    "amocrm_delete_custom_field",
    "amocrm_list_tags",
    "amocrm_create_tag",
    "amocrm_delete_tag"
]

async def test_handler(engine, handler_name: str) -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω handler"""
    try:
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_params = {
            "query": "test@example.com",
            "name": "Test Contact",
            "phone": "+79991234567",
            "email": "test@example.com",
            "contact_id": "123456",
            "lead_id": "123456",
            "company_id": "123456",
            "task_id": "123456",
            "entity_type": "contacts",
            "entity_id": "123456",
            "note_text": "Test note",
            "output_var": "test_result"
        }
        
        context = {"test": True}
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º handler
        result = await engine.execute_step({
            "type": "action",
            "params": {
                "action": handler_name,
                **test_params
            }
        }, context)
        
        # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        handler_result = None
        for key, value in result.items():
            if isinstance(value, dict) and 'success' in value:
                handler_result = value
                break
        
        if handler_result:
            return {
                "handler": handler_name,
                "technical_success": True,
                "functional_success": handler_result.get('success', False),
                "error": handler_result.get('error'),
                "result": "OK" if handler_result.get('success') else "FAIL"
            }
        else:
            return {
                "handler": handler_name,
                "technical_success": True,
                "functional_success": False,
                "error": "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ",
                "result": "NO_RESULT"
            }
            
    except Exception as e:
        return {
            "handler": handler_name,
            "technical_success": False,
            "functional_success": False,
            "error": str(e),
            "result": "EXCEPTION"
        }

async def test_all_handlers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ AmoCRM handlers"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–• AMOCRM HANDLERS")
    print("="*70)
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞...")
    engine = await create_engine()
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ handlers
    all_handlers = engine.get_registered_handlers()
    amocrm_handlers_found = [h for h in all_handlers if h.startswith('amocrm_')]
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ AmoCRM handlers: {len(amocrm_handlers_found)}")
    print(f"üìã –û–∂–∏–¥–∞–ª–æ—Å—å handlers: {len(AMOCRM_HANDLERS)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ handlers –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    missing_handlers = set(AMOCRM_HANDLERS) - set(amocrm_handlers_found)
    if missing_handlers:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ handlers: {missing_handlers}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ handlers
    results = []
    
    print(f"\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {len(amocrm_handlers_found)} HANDLERS")
    print("-" * 70)
    
    for i, handler_name in enumerate(amocrm_handlers_found, 1):
        print(f"üß™ [{i:2d}/{len(amocrm_handlers_found)}] –¢–µ—Å—Ç–∏—Ä—É–µ–º {handler_name}...")
        
        result = await test_handler(engine, handler_name)
        results.append(result)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        status = "‚úÖ" if result["technical_success"] else "‚ùå"
        func_status = "‚úÖ" if result["functional_success"] else "‚ö†Ô∏è"
        
        print(f"   {status} –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏: {'OK' if result['technical_success'] else 'FAIL'}")
        print(f"   {func_status} –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: {result['result']}")
        
        if result["error"] and "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" not in result["error"]:
            print(f"   üîç –û—à–∏–±–∫–∞: {result['error'][:100]}...")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("-" * 70)
    
    technical_success = sum(1 for r in results if r["technical_success"])
    functional_success = sum(1 for r in results if r["functional_success"])
    
    print(f"üìã –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(results)}")
    print(f"‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö: {technical_success}/{len(results)} ({technical_success/len(results)*100:.1f}%)")
    print(f"üéØ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö: {functional_success}/{len(results)} ({functional_success/len(results)*100:.1f}%)")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    by_result = {}
    for result in results:
        key = result["result"]
        if key not in by_result:
            by_result[key] = []
        by_result[key].append(result["handler"])
    
    print(f"\nüìà –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú:")
    for result_type, handlers in by_result.items():
        print(f"   {result_type}: {len(handlers)} handlers")
        if len(handlers) <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
            for handler in handlers:
                print(f"     - {handler}")
    
    # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö:")
    error_types = {}
    for result in results:
        if result["error"]:
            error_key = result["error"][:50] + "..." if len(result["error"]) > 50 else result["error"]
            if error_key not in error_types:
                error_types[error_key] = []
            error_types[error_key].append(result["handler"])
    
    for error, handlers in error_types.items():
        print(f"   üìÑ {error}: {len(handlers)} handlers")
    
    print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
    print("-" * 70)
    
    if technical_success == len(results):
        print("‚úÖ –í—Å–µ handlers —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print(f"‚ö†Ô∏è {len(results) - technical_success} handlers –∏–º–µ—é—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
    
    if functional_success > 0:
        print(f"‚úÖ {functional_success} handlers —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç")
    else:
        print("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω handler –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–Ω—É–∂–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)")
    
    print("üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM –≤ –ë–î")
    
    return results

if __name__ == "__main__":
    asyncio.run(test_all_handlers()) 