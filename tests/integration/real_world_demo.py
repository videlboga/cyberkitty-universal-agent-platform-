#!/usr/bin/env python3
"""
üöÄ KittyCore 3.0 - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö

–ü–æ–∫–∞–∂–µ–º –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏!
"""

import asyncio
import kittycore

async def demo_real_world_tasks():
    print("üöÄ KittyCore 3.0 - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = kittycore.create_orchestrator()
    
    # –†–µ–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    real_tasks = [
        {
            "title": "–ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞",
            "description": "–°–æ–∑–¥–∞—Ç—å Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV —Ñ–∞–π–ª–æ–≤",
            "category": "programming"
        },
        {
            "title": "–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞", 
            "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π Swagger",
            "category": "backend"
        },
        {
            "title": "–°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞",
            "description": "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏ —Å –≤–∏—Ç—Ä–∏–Ω–æ–π —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ä–∑–∏–Ω–æ–π –ø–æ–∫—É–ø–æ–∫, —Å–∏—Å—Ç–µ–º–æ–π –æ–ø–ª–∞—Ç—ã, –ø–∞–Ω–µ–ª—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –ø—Ä–æ–¥–∞–∂",
            "category": "fullstack"
        }
    ]
    
    results = []
    
    for i, task in enumerate(real_tasks, 1):
        print(f"\nüìã –ó–∞–¥–∞—á–∞ {i}: {task['title']}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}")
        print(f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {task['category']}")
        print("-" * 50)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
        result = await orchestrator.solve_task(task['description'])
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result['status']}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result['duration']:.2f}—Å")
        print(f"üßÆ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result['complexity_analysis']['complexity']}")
        print(f"üë• –ö–æ–º–∞–Ω–¥–∞: {result['team']['team_size']} –∞–≥–µ–Ω—Ç–æ–≤")
        print(f"üìä –ü–æ–¥–∑–∞–¥–∞—á: {len(result['subtasks'])}")
        print(f"üß† –ü–∞–º—è—Ç—å: {result['collective_memory_stats']['total_memories']} –∑–∞–ø–∏—Å–µ–π")
        print(f"üß¨ –£–ª—É—á—à–µ–Ω–∏–π: {result['self_improvement_report']['improvements_made']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º workflow
        print(f"\nüìà Workflow –¥–∏–∞–≥—Ä–∞–º–º–∞:")
        print(result['workflow_graph']['mermaid'])
        
        results.append(result)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:")
    print("=" * 50)
    
    total_time = sum(r['duration'] for r in results)
    total_agents = orchestrator.self_improvement.get_system_report()['total_agents']
    total_tasks = orchestrator.self_improvement.get_system_report()['total_tasks']
    improvements = orchestrator.self_improvement.get_system_report()['improvements_made']
    
    print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –í—Å–µ–≥–æ –∑–∞–¥–∞—á —Ä–µ—à–µ–Ω–æ: {len(results)}")
    print(f"   - –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å")
    print(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {total_time/len(results):.2f}—Å")
    print(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {total_agents}")
    print(f"   - –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {total_tasks}")
    print(f"   - –≠–≤–æ–ª—é—Ü–∏–π –∞–≥–µ–Ω—Ç–æ–≤: {improvements}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –∞–≥–µ–Ω—Ç–æ–≤
    top_performers = orchestrator.self_improvement.get_system_report()['top_performers']
    if top_performers:
        print(f"\nüèÜ –¢–æ–ø –∞–≥–µ–Ω—Ç—ã:")
        for performer in top_performers[:3]:
            print(f"   - {performer['agent_id']}: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {performer['efficiency']:.3f}")
    
    print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! KittyCore 3.0 —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å–æ –≤—Å–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏!")

if __name__ == "__main__":
    asyncio.run(demo_real_world_tasks()) 