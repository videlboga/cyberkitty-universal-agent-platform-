#!/usr/bin/env python3
"""
üß™ E2E —Ç–µ—Å—Ç—ã KittyCore 3.0 - —á–µ—Å—Ç–Ω—ã–µ –±–æ–µ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –±–µ–∑ –º–æ–∫–æ–≤
–≠–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—é —Å–∏—Å—Ç–µ–º—É —Ü–µ–ª–∏–∫–æ–º
"""

import asyncio
import os
import sys
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from kittycore.core.orchestrator import OrchestratorAgent
from kittycore.core.self_improvement import SelfLearningEngine

class KittyCoreE2ETester:
    """–ß–µ—Å—Ç–Ω—ã–π E2E —Ç–µ—Å—Ç–µ—Ä –¥–ª—è KittyCore 3.0"""
    
    def __init__(self):
        self.orchestrator = OrchestratorAgent()
        self.self_learning = SelfLearningEngine()
        self.total_tests = 0
        self.passed_tests = 0
        self.failed_tests = 0
        
    def log_test_result(self, test_name: str, success: bool, details: str = ""):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.total_tests += 1
        if success:
            self.passed_tests += 1
            print(f"‚úÖ {test_name}: –ü–†–û–®–Å–õ {details}")
        else:
            self.failed_tests += 1
            print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù {details}")
    
    async def test_basic_task_execution(self):
        """–¢–µ—Å—Ç: –ë–∞–∑–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        print("\nüî• === –¢–ï–°–¢ 1: –ë–ê–ó–û–í–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–î–ê–ß–ò ===")
        
        task = "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è Python"
        
        try:
            start_time = time.time()
            result = await self.orchestrator.execute_task(task)
            execution_time = time.time() - start_time
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            has_result = result is not None
            has_meaningful_content = len(str(result)) > 50
            reasonable_time = execution_time < 30.0
            
            success = has_result and has_meaningful_content and reasonable_time
            
            details = f"({execution_time:.1f}s, {len(str(result))} —Å–∏–º–≤–æ–ª–æ–≤)"
            self.log_test_result("–ë–∞–∑–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", success, details)
            
            if success:
                print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {str(result)[:200]}...")
                
            return success, result, execution_time
            
        except Exception as e:
            self.log_test_result("–ë–∞–∑–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", False, f"Exception: {str(e)}")
            return False, None, 0
    
    async def test_complex_task_decomposition(self):
        """–¢–µ—Å—Ç: –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π"""
        print("\nüî• === –¢–ï–°–¢ 2: –°–õ–û–ñ–ù–ê–Ø –ó–ê–î–ê–ß–ê –° –î–ï–ö–û–ú–ü–û–ó–ò–¶–ò–ï–ô ===")
        
        task = "–°–æ–∑–¥–∞–π –ø–æ–ª–Ω—ã–π –≤–µ–±-—Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏: HTML, CSS –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç—Ä—ë—Ö –ø–æ—Ä–æ–¥ –∫–æ—à–µ–∫ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"
        
        try:
            start_time = time.time()
            result = await self.orchestrator.execute_task(task)
            execution_time = time.time() - start_time
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            has_result = result is not None
            complex_enough = len(str(result)) > 500
            has_html = 'html' in str(result).lower() or '<' in str(result)
            reasonable_time = execution_time < 60.0
            
            success = has_result and complex_enough and has_html and reasonable_time
            
            details = f"({execution_time:.1f}s, {len(str(result))} —Å–∏–º–≤–æ–ª–æ–≤, HTML: {has_html})"
            self.log_test_result("–°–ª–æ–∂–Ω–∞—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è", success, details)
            
            if success:
                print(f"üåê –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML: {has_html}")
                print(f"üìä –†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {len(str(result))} —Å–∏–º–≤–æ–ª–æ–≤")
                
            return success, result, execution_time
            
        except Exception as e:
            self.log_test_result("–°–ª–æ–∂–Ω–∞—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è", False, f"Exception: {str(e)}")
            return False, None, 0
    
    async def test_agent_collaboration(self):
        """–¢–µ—Å—Ç: –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
        print("\nüî• === –¢–ï–°–¢ 3: –°–û–í–ú–ï–°–¢–ù–ê–Ø –†–ê–ë–û–¢–ê –ê–ì–ï–ù–¢–û–í ===")
        
        task = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö [100, 150, 200, 120, 300] –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á—ë—Ç —Å –≤—ã–≤–æ–¥–∞–º–∏"
        
        try:
            start_time = time.time()
            result = await self.orchestrator.execute_task(task)
            execution_time = time.time() - start_time
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            has_result = result is not None
            has_analysis = any(word in str(result).lower() for word in ['–∞–Ω–∞–ª–∏–∑', '–≤—ã–≤–æ–¥', '—Ç—Ä–µ–Ω–¥', '—Ä–æ—Å—Ç'])
            has_numbers = any(num in str(result) for num in ['100', '150', '200', '120', '300'])
            reasonable_time = execution_time < 45.0
            
            success = has_result and has_analysis and has_numbers and reasonable_time
            
            details = f"({execution_time:.1f}s, –∞–Ω–∞–ª–∏–∑: {has_analysis}, –¥–∞–Ω–Ω—ã–µ: {has_numbers})"
            self.log_test_result("–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞", success, details)
            
            if success:
                print(f"üìä –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω: {has_analysis}")
                print(f"üî¢ –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã: {has_numbers}")
                
            return success, result, execution_time
            
        except Exception as e:
            self.log_test_result("–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞", False, f"Exception: {str(e)}")
            return False, None, 0
    
    async def test_self_improvement_integration(self):
        """–¢–µ—Å—Ç: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è"""
        print("\nüî• === –¢–ï–°–¢ 4: –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–Ø ===")
        
        try:
            # –≠–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            tasks = [
                "–ü–æ—Å—á–∏—Ç–∞–π 2+2",
                "–û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ Python",
                "–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é"
            ]
            
            agent_id = "test_agent"
            
            for i, task in enumerate(tasks):
                # –≠–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                quality_score = 0.8 + (i * 0.05)  # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
                
                await self.self_learning.record_agent_execution(
                    agent_id=agent_id,
                    task_id=f"test_task_{i}",
                    input_data={"task": task},
                    output=f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏ {i+1}",
                    execution_time=1.0 + i * 0.2,
                    success=True,
                    quality_score=quality_score
                )
            
            # –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏–π
            improvement_plan = await self.self_learning.get_agent_improvement_plan(agent_id)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            has_plan = improvement_plan['status'] == 'analyzed'
            has_stats = improvement_plan['learning_statistics']['total_feedback'] == 3
            has_examples = len(improvement_plan['few_shot_examples']) > 0
            
            success = has_plan and has_stats and has_examples
            
            details = f"(–ø–ª–∞–Ω: {has_plan}, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {has_stats}, –ø—Ä–∏–º–µ—Ä—ã: {has_examples})"
            self.log_test_result("–°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è", success, details)
            
            if success:
                stats = improvement_plan['learning_statistics']
                print(f"üìä Feedback: {stats['total_feedback']}, —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats['avg_score']:.2f}")
                print(f"üéØ Few-shot –ø—Ä–∏–º–µ—Ä–æ–≤: {len(improvement_plan['few_shot_examples'])}")
                
            return success
            
        except Exception as e:
            self.log_test_result("–°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è", False, f"Exception: {str(e)}")
            return False
    
    async def test_memory_persistence(self):
        """–¢–µ—Å—Ç: –ü–∞–º—è—Ç—å –∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å"""
        print("\nüî• === –¢–ï–°–¢ 5: –ü–ê–ú–Ø–¢–¨ –ò –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–¨ ===")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å
            collective_memory = self.orchestrator.collective_memory
            
            # –î–æ–±–∞–≤–∏—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            memory_data = {
                "task": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
                "result": "–£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                "agent": "test_agent",
                "context": {"test": True}
            }
            
            await collective_memory.add_memory("test_agent", memory_data)
            
            # –ü–æ–∏—Å–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
            memories = await collective_memory.search_memories("—Ç–µ—Å—Ç–æ–≤–∞—è")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            memory_added = len(memories) > 0
            memory_content = any("—Ç–µ—Å—Ç–æ–≤–∞—è" in str(mem).lower() for mem in memories)
            
            success = memory_added and memory_content
            
            details = f"(–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(memories)}, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö: {memory_content})"
            self.log_test_result("–ü–∞–º—è—Ç—å", success, details)
            
            if success:
                print(f"üß† –ù–∞–π–¥–µ–Ω–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(memories)}")
                
            return success
            
        except Exception as e:
            self.log_test_result("–ü–∞–º—è—Ç—å", False, f"Exception: {str(e)}")
            return False
    
    async def test_error_handling(self):
        """–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        print("\nüî• === –¢–ï–°–¢ 6: –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ===")
        
        try:
            # –ó–∞–¥–∞—á–∞ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–æ–π
            impossible_task = "–ü–æ–¥–µ–ª–∏ –Ω–∞ –Ω–æ–ª—å –∏ –æ–±—ä—è—Å–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            
            start_time = time.time()
            result = await self.orchestrator.execute_task(impossible_task)
            execution_time = time.time() - start_time
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ - —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –∏–∑—è—â–Ω–æ
            has_result = result is not None
            not_crashed = True  # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –Ω–µ —É–ø–∞–ª–∏
            reasonable_time = execution_time < 30.0
            error_handled = "–æ—à–∏–±–∫" in str(result).lower() or "–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ" in str(result).lower()
            
            success = has_result and not_crashed and reasonable_time
            
            details = f"({execution_time:.1f}s, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: {error_handled})"
            self.log_test_result("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", success, details)
            
            if success:
                print(f"üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ —É–ø–∞–ª–∞ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ")
                
            return success
            
        except Exception as e:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - —ç—Ç–æ –ø–ª–æ—Ö–æ
            self.log_test_result("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", False, f"Unexpected exception: {str(e)}")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ E2E —Ç–µ—Å—Ç—ã"""
        print("üöÄ === –ó–ê–ü–£–°–ö E2E –¢–ï–°–¢–û–í KITTYCORE 3.0 ===")
        print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%H:%M:%S')}")
        print("üéØ –¶–µ–ª—å: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É –≤ –±–æ–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –ë–ï–ó –ú–û–ö–û–í\n")
        
        overall_start = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        await self.test_basic_task_execution()
        await self.test_complex_task_decomposition()
        await self.test_agent_collaboration()
        await self.test_self_improvement_integration()
        await self.test_memory_persistence()
        await self.test_error_handling()
        
        overall_time = time.time() - overall_start
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
        print(f"\nüèÅ === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ E2E –¢–ï–°–¢–û–í ===")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {overall_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_tests}")
        print(f"‚úÖ –ü—Ä–æ—à–ª–∏: {self.passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ã: {self.failed_tests}")
        
        success_rate = (self.passed_tests / self.total_tests) * 100 if self.total_tests > 0 else 0
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        if success_rate >= 80:
            print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥—ë–∂–Ω–æ!")
        elif success_rate >= 60:
            print("üëç –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ï—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π")
        else:
            print("‚ö†Ô∏è –ù–£–ñ–ù–ê –†–ê–ë–û–¢–ê! –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ü–æ–ª—É—á–∏—Ç—å –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã
        system_overview = self.self_learning.get_system_overview()
        print(f"\nüåê –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´:")
        print(f"üè• –°—Ç–∞—Ç—É—Å: {system_overview['system_status']}")
        print(f"üìä –ó–¥–æ—Ä–æ–≤—å–µ: {system_overview['system_health_score']:.2f}")
        print(f"ü§ñ –ê–≥–µ–Ω—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: {system_overview['agents']['with_feedback']}")
        
        return success_rate >= 80

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ E2E —Ç–µ—Å—Ç–æ–≤"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv('OPENROUTER_API_KEY')
    if not api_key:
        print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üîß –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        print()
    
    tester = KittyCoreE2ETester()
    success = await tester.run_all_tests()
    
    return success

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        exit_code = 0 if result else 1
        print(f"\nüèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º: {exit_code}")
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 