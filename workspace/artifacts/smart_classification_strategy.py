#!/usr/bin/env python3
"""
üß† –£–ú–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –ê–ì–ï–ù–¢–û–í
–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
"""

from enum import Enum
from typing import Dict, List
import asyncio
from dataclasses import dataclass
import time

class ClassificationMode(Enum):
    """–†–µ–∂–∏–º—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    DEVELOPMENT = "development"  # Ollama –ª–æ–∫–∞–ª—å–Ω–æ
    PRODUCTION = "production"    # Groq –±—ã—Å—Ç—Ä–æ –∏ –¥–µ—à–µ–≤–æ  
    HIGH_ACCURACY = "accuracy"   # GPT-4o-mini –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    OFFLINE = "offline"          # –¢–æ–ª—å–∫–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞

@dataclass
class SystemLoad:
    """–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    requests_per_minute: int
    avg_response_time_ms: float
    error_rate_percent: float
    queue_length: int

class SmartClassificationStrategy:
    """
    üß† –£–º–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    –ü–†–ò–ù–¶–ò–ü–´:
    1. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ = Ollama (–±–µ—Å–ø–ª–∞—Ç–Ω–æ, –ø—Ä–∏–≤–∞—Ç–Ω–æ)
    2. –ü—Ä–æ–¥–∞–∫—à–µ–Ω = Groq (–±—ã—Å—Ç—Ä–æ, –¥–µ—à–µ–≤–æ)
    3. –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ = GPT-4o-mini (—Ç–æ—á–Ω–æ)
    4. –û—Ñ—Ñ–ª–∞–π–Ω/–ø—Ä–æ–±–ª–µ–º—ã = —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ (–Ω–∞–¥–µ–∂–Ω–æ)
    """
    
    def __init__(self):
        self.current_mode = ClassificationMode.PRODUCTION
        self.fallback_enabled = True
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.stats = {
            "total_requests": 0,
            "provider_usage": {},
            "accuracy_scores": {},
            "cost_tracking": 0.0
        }
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        self.thresholds = {
            "high_load_rpm": 100,     # –ü—Ä–∏ >100 req/min –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –±—ã—Å—Ç—Ä—ã–µ –º–æ–¥–µ–ª–∏
            "error_rate_limit": 5.0,  # –ü—Ä–∏ >5% –æ—à–∏–±–æ–∫ –≤–∫–ª—é—á–∞–µ–º fallback
            "response_time_limit": 1000  # –ü—Ä–∏ >1—Å–µ–∫ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–µ
        }
    
    async def classify_with_strategy(self, task: str, priority: str = "normal") -> Dict:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å —É–º–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            task: –ó–∞–¥–∞—á–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            priority: normal|high|critical
        """
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä—É–∑–∫—É
        system_load = await self._get_system_load()
        
        # –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        chosen_provider = self._choose_provider(priority, system_load)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
        result = await self._execute_classification(task, chosen_provider)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_stats(chosen_provider, result)
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –±—É–¥—É—â–µ–µ
        await self._adapt_strategy(result, system_load)
        
        return {
            **result,
            "strategy": {
                "chosen_provider": chosen_provider,
                "reason": self._get_choice_reason(priority, system_load),
                "system_load": system_load.__dict__,
                "total_cost_today": round(self.stats["cost_tracking"], 4)
            }
        }
    
    def _choose_provider(self, priority: str, load: SystemLoad) -> str:
        """–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        
        # –ö—Ä–∏—Ç–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞ = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        if priority == "critical":
            return "openai"
        
        # –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ = —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π
        if load.requests_per_minute > self.thresholds["high_load_rpm"]:
            return "groq"
        
        # –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫ = fallback
        if load.error_rate_percent > self.thresholds["error_rate_limit"]:
            return "heuristic"
        
        # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ = –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
        if self.current_mode == ClassificationMode.DEVELOPMENT:
            return "ollama"
        
        # –†–µ–∂–∏–º –æ—Ñ—Ñ–ª–∞–π–Ω = —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
        if self.current_mode == ClassificationMode.OFFLINE:
            return "heuristic"
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        return "groq"
    
    def _get_choice_reason(self, priority: str, load: SystemLoad) -> str:
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        
        if priority == "critical":
            return "–ö—Ä–∏—Ç–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏"
        
        if load.requests_per_minute > self.thresholds["high_load_rpm"]:
            return f"–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ ({load.requests_per_minute} req/min), –Ω—É–∂–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å"
        
        if load.error_rate_percent > self.thresholds["error_rate_limit"]:
            return f"–í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫ ({load.error_rate_percent}%), –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback"
        
        if self.current_mode == ClassificationMode.DEVELOPMENT:
            return "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏"
        
        return "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
    
    async def _get_system_load(self) -> SystemLoad:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã
        # –ó–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        
        return SystemLoad(
            requests_per_minute=50,  # –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞
            avg_response_time_ms=250.0,
            error_rate_percent=1.5,
            queue_length=0
        )
    
    async def _execute_classification(self, task: str, provider: str) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        
        start_time = time.time()
        
        try:
            if provider == "heuristic":
                return {
                    "agent": self._heuristic_classify(task),
                    "provider": "heuristic",
                    "response_time_ms": 1,
                    "cost": 0.0,
                    "confidence": 0.7
                }
            
            # –ó–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ FastAgentClassifier
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
            
            response_time = (time.time() - start_time) * 1000
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            provider_simulation = {
                "groq": {"time": 200, "cost": 0.000003, "accuracy": 0.92},
                "ollama": {"time": 300, "cost": 0.0, "accuracy": 0.88},
                "openai": {"time": 800, "cost": 0.00004, "accuracy": 0.96},
                "together": {"time": 250, "cost": 0.000005, "accuracy": 0.90}
            }
            
            sim = provider_simulation.get(provider, provider_simulation["groq"])
            
            return {
                "agent": self._smart_classify(task, provider),
                "provider": provider,
                "response_time_ms": sim["time"],
                "cost": sim["cost"],
                "confidence": sim["accuracy"]
            }
            
        except Exception as e:
            # Fallback –Ω–∞ —ç–≤—Ä–∏—Å—Ç–∏–∫—É
            return {
                "agent": self._heuristic_classify(task),
                "provider": "heuristic_fallback",
                "response_time_ms": 1,
                "cost": 0.0,
                "confidence": 0.7,
                "error": str(e)
            }
    
    def _smart_classify(self, task: str, provider: str) -> str:
        """–£–º–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        
        task_lower = task.lower()
        
        # LLM-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ–Ω–∏–º–∞—é—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ª—É—á—à–µ
        if provider in ["groq", "openai", "together"]:
            # –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if "–∞–Ω–∞–ª–∏–∑" in task_lower and ("–ø—Ä–æ–¥–∞–∂" in task_lower or "–¥–∞–Ω–Ω—ã—Ö" in task_lower):
                return "nova"
            elif "—Å–æ–∑–¥–∞–π" in task_lower and ("–ª–æ–≥–æ" in task_lower or "–¥–∏–∑–∞–π–Ω" in task_lower):
                return "artemis"
            elif "–Ω–∞–π–¥–∏" in task_lower and ("–±–∞–≥" in task_lower or "–æ—à–∏–±" in task_lower):
                return "cipher"
            elif "–∑–∞–ø—É—Å—Ç–∏" in task_lower and ("—Ä–µ–∫–ª–∞–º" in task_lower or "–∫–∞–º–ø–∞–Ω" in task_lower):
                return "viral"
            elif "–∏–∑—É—á–∏" in task_lower and ("–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç" in task_lower or "—Ä—ã–Ω–æ–∫" in task_lower):
                return "sherlock"
        
        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É
        return self._heuristic_classify(task)
    
    def _heuristic_classify(self, task: str) -> str:
        """–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–∫ fallback"""
        
        task_lower = task.lower()
        
        if any(word in task_lower for word in ["–∞–Ω–∞–ª–∏–∑", "–¥–∞–Ω–Ω—ã–µ", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]):
            return "nova"
        elif any(word in task_lower for word in ["—Å–æ–∑–¥–∞–π", "–¥–∏–∑–∞–π–Ω", "–∫–æ–Ω—Ç–µ–Ω—Ç"]):
            return "artemis"
        elif any(word in task_lower for word in ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º", "—Ä–∞–∑—Ä–∞–±–æ—Ç"]):
            return "ada"
        elif any(word in task_lower for word in ["–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "—Ç–µ—Å—Ç", "–±–∞–≥"]):
            return "cipher"
        elif any(word in task_lower for word in ["–¥–µ–Ω—å–≥–∏", "—Ñ–∏–Ω–∞–Ω—Å", "—Å—Ç–æ–∏–º–æ—Å—Ç—å"]):
            return "warren"
        elif any(word in task_lower for word in ["—Ä–µ–∫–ª–∞–º", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ø—Ä–æ–¥–≤–∏–∂"]):
            return "viral"
        else:
            return "sherlock"
    
    def _update_stats(self, provider: str, result: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        
        self.stats["total_requests"] += 1
        
        if provider not in self.stats["provider_usage"]:
            self.stats["provider_usage"][provider] = 0
        self.stats["provider_usage"][provider] += 1
        
        if "cost" in result:
            self.stats["cost_tracking"] += result["cost"]
    
    async def _adapt_strategy(self, result: Dict, load: SystemLoad):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ - –ø–æ–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–æ—á–Ω–æ—Å—Ç–∏
        if result.get("response_time_ms", 0) > self.thresholds["response_time_limit"]:
            if self.current_mode == ClassificationMode.HIGH_ACCURACY:
                self.current_mode = ClassificationMode.PRODUCTION
                print("‚ö° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –±—ã—Å—Ç—Ä—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑-–∑–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
        
        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ - –≤–∫–ª—é—á–∞–µ–º fallback
        if load.error_rate_percent > self.thresholds["error_rate_limit"]:
            self.fallback_enabled = True
            print("üõ°Ô∏è –í–∫–ª—é—á–µ–Ω fallback —Ä–µ–∂–∏–º –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫")
    
    def get_strategy_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        
        total_requests = self.stats["total_requests"]
        if total_requests == 0:
            return {"message": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞"}
        
        provider_percentages = {}
        for provider, count in self.stats["provider_usage"].items():
            provider_percentages[provider] = round((count / total_requests) * 100, 1)
        
        return {
            "total_requests": total_requests,
            "total_cost": round(self.stats["cost_tracking"], 6),
            "avg_cost_per_request": round(self.stats["cost_tracking"] / total_requests, 6),
            "provider_distribution": provider_percentages,
            "current_mode": self.current_mode.value,
            "fallback_enabled": self.fallback_enabled,
            "cost_projection_month": round(self.stats["cost_tracking"] / total_requests * 30 * 1000, 2)  # –ü—Ä–∏ 1000 req/–¥–µ–Ω—å
        }

# –î–µ–º–æ —É–º–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
async def demo_smart_strategy():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    strategy = SmartClassificationStrategy()
    
    print("üß† –î–ï–ú–û –£–ú–ù–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_scenarios = [
        ("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–¥–∞–∂–∏", "normal"),
        ("–ö–†–ò–¢–ò–ß–ù–û: –ù–∞–π–¥–∏ —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ", "critical"),
        ("–°–æ–∑–¥–∞–π –ª–æ–≥–æ—Ç–∏–ø", "normal"),
        ("–ó–∞–ø—É—Å—Ç–∏ —Ä–µ–∫–ª–∞–º—É", "high"),
        ("–ò–∑—É—á–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", "normal")
    ]
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–ù–´–• –°–¶–ï–ù–ê–†–ò–ï–í:")
    
    for task, priority in test_scenarios:
        result = await strategy.classify_with_strategy(task, priority)
        
        print(f"\nüìã '{task}' (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority})")
        print(f"   ü§ñ –ê–≥–µ–Ω—Ç: {result['agent']}")
        print(f"   üì° –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {result['provider']}")
        print(f"   ‚ö° –í—Ä–µ–º—è: {result['response_time_ms']}–º—Å")
        print(f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${result['cost']:.6f}")
        print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 0):.1%}")
        print(f"   üí° –ü—Ä–∏—á–∏–Ω–∞ –≤—ã–±–æ—Ä–∞: {result['strategy']['reason']}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–†–ê–¢–ï–ì–ò–ò:")
    stats = strategy.get_strategy_stats()
    for key, value in stats.items():
        print(f"   {key}: {value}")

if __name__ == "__main__":
    asyncio.run(demo_smart_strategy()) 