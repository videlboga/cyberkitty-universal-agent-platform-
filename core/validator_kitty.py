"""
üê± ValidatorKitty - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑—ã –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
"""

import asyncio
from typing import Dict, Any, List, Optional
from dataclasses import dataclass
from loguru import logger

# from core.memory_management import MemoryManager


@dataclass
class ResultExpectation:
    """–û–±—Ä–∞–∑ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    task_type: str  # —Ç–∏–ø –∑–∞–¥–∞—á–∏: creation, analysis, calculation, etc.
    expected_files: List[str]  # –æ–∂–∏–¥–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
    expected_content: List[str]  # –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    quality_criteria: List[str]  # –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    success_indicators: List[str]  # –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞
    user_approved: bool = False  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º


@dataclass  
class ValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    is_valid: bool
    issues: List[str]
    recommendations: List[str]
    retry_needed: bool = False


class ValidatorKitty:
    """üê± –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä-–∫–æ—Ç–µ–π–∫–∞"""
    
    def __init__(self, memory_manager=None):
        self.memory = memory_manager
        self.llm_provider = None  # –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    async def analyze_request(self, user_request: str) -> ResultExpectation:
        """
        –§–ê–ó–ê 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        """
        logger.info(f"üîç ValidatorKitty –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å: {user_request}")
        
        # –ü–æ–∫–∞ –±–µ–∑ LLM - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
        return self._create_expectation_from_request(user_request)
    
    def _create_expectation_from_request(self, request: str) -> ResultExpectation:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        request_lower = request.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
        if any(word in request_lower for word in ['—Å–∞–π—Ç', '—Å—Ç—Ä–∞–Ω–∏—Ü', 'html', '–≤–µ–±']):
            return ResultExpectation(
                task_type="website_creation",
                expected_files=["index.html", "styles.css"],
                expected_content=[
                    "HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞",
                    "CSS —Å—Ç–∏–ª–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", 
                    "–ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–º–µ (–∫–æ—Ç—è—Ç–∞/etc)",
                    "–†–∞–±–æ—Ç–∞—é—â–∏–µ HTML —Ç–µ–≥–∏",
                    "–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ç–µ–∫—Å—Ç—ã –ø–æ —Ç–µ–º–µ"
                ],
                quality_criteria=[
                    "–§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
                    "HTML –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º", 
                    "CSS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω",
                    "–ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—É"
                ],
                success_indicators=[
                    "–°–æ–∑–¥–∞–Ω—ã HTML/CSS —Ñ–∞–π–ª—ã",
                    "–í –∫–æ–Ω—Ç–µ–Ω—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞",
                    "–§–∞–π–ª—ã –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
                ]
            )
            
        elif any(word in request_lower for word in ['–ø–ª–∞–Ω', '–ø–ª–∞–Ω–∏—Ä', '–∑–∞–≤—Ç—Ä–∞', '–¥–µ–ª–∞']):
            return ResultExpectation(
                task_type="planning",
                expected_files=["–ø–ª–∞–Ω.txt", "–ø–ª–∞–Ω.md"],
                expected_content=[
                    "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ø–ª–∞–Ω–∞",
                    "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏", 
                    "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á",
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª"
                ],
                quality_criteria=[
                    "–ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã",
                    "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏",
                    "–ü—É–Ω–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏"
                ],
                success_indicators=[
                    "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å –ø–ª–∞–Ω–æ–º",
                    "–í –ø–ª–∞–Ω–µ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –¥–µ–ª",
                    "–£–∫–∞–∑–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏"
                ]
            )
            
        elif any(word in request_lower for word in ['–ø–æ—Å—á–∏—Ç–∞', '—Ä–∞—Å—á–µ—Ç', '–ø–ª–æ—Ç–Ω–æ—Å—Ç', '—Ñ–æ—Ä–º—É–ª']):
            return ResultExpectation(
                task_type="calculation", 
                expected_files=["—Ä–∞—Å—á–µ—Ç.txt", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç.txt"],
                expected_content=[
                    "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã",
                    "–ß–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ä–∞—Å—á–µ—Ç—ã",
                    "–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è",
                    "–ü–æ—à–∞–≥–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
                    "–ö–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ü–∏—Ñ—Ä–∞–º–∏"
                ],
                quality_criteria=[
                    "–î–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª—ã",
                    "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã", 
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —á–∏—Å–ª–∞—Ö",
                    "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è"
                ],
                success_indicators=[
                    "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º—É–ª—ã",
                    "–ï—Å—Ç—å —á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
                    "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è",
                    "–†–∞—Å—á–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω"
                ]
            )
            
        else:
            return ResultExpectation(
                task_type="general",
                expected_files=["—Ä–µ–∑—É–ª—å—Ç–∞—Ç.txt"],
                expected_content=[
                    "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ –∑–∞–ø—Ä–æ—Å—É",
                    "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ",
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"
                ],
                quality_criteria=[
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—É",
                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ–π",
                    "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º"
                ],
                success_indicators=[
                    "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
                    "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É"
                ]
            )
    
    def format_expectation_for_user(self, expectation: ResultExpectation) -> str:
        """
        –§–ê–ó–ê 2: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        return f"""
üéØ –û–ë–†–ê–ó –û–ñ–ò–î–ê–ï–ú–û–ì–û –†–ï–ó–£–õ–¨–¢–ê–¢–ê
========================================
üìù –¢–∏–ø –∑–∞–¥–∞—á–∏: {expectation.task_type}

üìÅ –û–∂–∏–¥–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã:
{chr(10).join([f"   üìÑ {file}" for file in expectation.expected_files])}

üìã –û–∂–∏–¥–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:
{chr(10).join([f"   ‚úÖ {content}" for content in expectation.expected_content])}

üéØ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞:
{chr(10).join([f"   üîç {criteria}" for criteria in expectation.quality_criteria])}

‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞:
{chr(10).join([f"   üöÄ {indicator}" for indicator in expectation.success_indicators])}

========================================
‚ùì –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–≤–æ–∏–º –æ–∂–∏–¥–∞–Ω–∏—è–º? (–¥–∞/–Ω–µ—Ç/—É—Ç–æ—á–Ω–∏)
"""
    
    async def validate_results(self, expectation: ResultExpectation, 
                             created_files: List[str], 
                             step_results: Dict[str, Any]) -> ValidationResult:
        """
        –§–ê–ó–ê 5: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ—Ç–∏–≤ –æ–±—Ä–∞–∑–∞
        """
        logger.info(f"üîç ValidatorKitty –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ç–∏–≤ –æ–±—Ä–∞–∑–∞")
        
        issues = []
        recommendations = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        if expectation.expected_files:
            for expected_file in expectation.expected_files:
                if not any(expected_file.split('.')[0] in created_file for created_file in created_files):
                    issues.append(f"‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–∞–π–ª —Ç–∏–ø–∞: {expected_file}")
                    recommendations.append(f"–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª {expected_file}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ñ–∞–π–ª–æ–≤
        content_issues = await self._validate_file_content(created_files, expectation)
        issues.extend(content_issues)
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_issues = self._validate_quality_criteria(step_results, expectation)
        issues.extend(quality_issues)
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —É—Å–ø–µ—Ö–∞
        success_issues = self._validate_success_indicators(created_files, step_results, expectation)
        issues.extend(success_issues)
        
        is_valid = len(issues) == 0
        retry_needed = len(issues) > 0
        
        if issues:
            recommendations.extend([
                "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏",
                "üéØ –°—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                "üìù –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É"
            ])
        
        return ValidationResult(
            is_valid=is_valid,
            issues=issues,
            recommendations=recommendations,
            retry_needed=retry_needed
        )
    
    async def _validate_file_content(self, created_files: List[str], expectation: ResultExpectation) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤"""
        issues = []
        
        for file_path in created_files:
            try:
                # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –î–ª—è —Å–∞–π—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç
                if expectation.task_type == "website_creation":
                    if "–∫–æ—Ç—è—Ç" not in content.lower() and "cat" not in content.lower():
                        issues.append(f"‚ùå –§–∞–π–ª {file_path}: –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ –∫–æ—Ç—è—Ç–∞—Ö")
                    if len(content) < 200:
                        issues.append(f"‚ùå –§–∞–π–ª {file_path}: —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                        
                # –î–ª—è –ø–ª–∞–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
                elif expectation.task_type == "planning":
                    if "–ø–ª–∞–Ω" not in content.lower():
                        issues.append(f"‚ùå –§–∞–π–ª {file_path}: –Ω–µ—Ç —Å–∞–º–æ–≥–æ –ø–ª–∞–Ω–∞")
                    if content.count('\n') < 3:  # –ú–∞–ª–æ —Å—Ç—Ä–æ–∫ = –º–∞–ª–æ –ø—É–Ω–∫—Ç–æ–≤
                        issues.append(f"‚ùå –§–∞–π–ª {file_path}: —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–ª–∞–Ω")
                        
                # –î–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É–ª—ã –∏ —á–∏—Å–ª–∞
                elif expectation.task_type == "calculation":
                    has_numbers = any(char.isdigit() for char in content)
                    has_formula_chars = any(char in content for char in ['=', '+', '-', '*', '/', '^'])
                    
                    if not has_numbers:
                        issues.append(f"‚ùå –§–∞–π–ª {file_path}: –Ω–µ—Ç —á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤")
                    if not has_formula_chars:
                        issues.append(f"‚ùå –§–∞–π–ª {file_path}: –Ω–µ—Ç —Ñ–æ—Ä–º—É–ª –∏–ª–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
                        
            except Exception as e:
                issues.append(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
                
        return issues
    
    def _validate_quality_criteria(self, step_results: Dict[str, Any], expectation: ResultExpectation) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∫–∞—á–µ—Å—Ç–≤–∞"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≥–µ–Ω—Ç—ã –Ω–µ –¥–µ–ª–∞–ª–∏ –ª–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        results_text = " ".join([str(result.get('result', '')) for result in step_results.values()])
        
        if "httpbin.org" in results_text:
            issues.append("‚ùå –ê–≥–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–ª–∏ httpbin.org –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
            
        return issues
    
    def _validate_success_indicators(self, created_files: List[str], step_results: Dict[str, Any], 
                                   expectation: ResultExpectation) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —É—Å–ø–µ—Ö–∞"""
        issues = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä - –±—ã–ª–∏ –ª–∏ —Å–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–∏—è
        if expectation.task_type in ["website_creation", "planning", "calculation"]:
            if not created_files:
                issues.append("‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–∏—è")
                
        return issues
    
    def format_validation_result(self, result: ValidationResult) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        if result.is_valid:
            return """
‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–ô–î–ï–ù–ê –£–°–ü–ï–®–ù–û!
üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º
"""
        else:
            issues_text = "\n".join([f"   {issue}" for issue in result.issues])
            recommendations_text = "\n".join([f"   {rec}" for rec in result.recommendations])
            
            return f"""
‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï –ü–†–û–ô–î–ï–ù–ê
üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:
{issues_text}

üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
{recommendations_text}

{'üîÑ –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê' if result.retry_needed else ''}
""" 