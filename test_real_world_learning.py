#!/usr/bin/env python3
"""
üåç –¢–µ—Å—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –Ω–∞ –†–ï–ê–õ–¨–ù–´–• –∑–∞–¥–∞—á–∞—Ö

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π OrchestratorAgent KittyCore –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–∞–µ—Ç—Å—è, –∫—Ä–∏—Ç–∏–∫—É–µ—Ç –∏ —É–ª—É—á—à–∞–µ—Ç—Å—è.
"""

import asyncio
import time
import json
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É KittyCore
try:
    from kittycore.core.orchestrator import OrchestratorAgent
    from kittycore.core.advanced_self_learning import get_advanced_learning_engine, process_task_with_advanced_learning
    from kittycore.core.adaptive_rate_control import get_rate_controller
    print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã KittyCore –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    exit(1)

class RealWorldTaskExecutor:
    """–í—ã–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ OrchestratorAgent"""
    
    def __init__(self):
        from kittycore.core.orchestrator import OrchestratorConfig
        config = OrchestratorConfig(orchestrator_id="real_world_orchestrator")
        self.orchestrator = OrchestratorAgent(config)
        
    async def execute_real_task(self, request_data: Dict[str, Any]) -> Any:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä"""
        
        task = request_data.get('task', '')
        input_data = request_data.get('input_data', {})
        agent_id = request_data.get('agent_id', 'unknown')
        
        print(f"üéØ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω—è–µ—Ç: {task}")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç–æ—è—â–∏–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            result = await self.orchestrator.execute_task(task)
            
            print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω: {len(str(result))} —Å–∏–º–≤–æ–ª–æ–≤")
            return result
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            raise e

async def test_real_file_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    print("\nüìù === –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –†–ï–ê–õ–¨–ù–´–• –§–ê–ô–õ–û–í ===")
    
    engine = get_advanced_learning_engine()
    executor = RealWorldTaskExecutor()
    session_id = await engine.start_learning_session()
    
    # –†–µ–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    file_tasks = [
        {
            "agent_id": "file_creator",
            "task": "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello_world.py —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π 'Hello World' –Ω–∞ Python",
            "input_data": {"file_type": "python", "complexity": "simple"}
        },
        {
            "agent_id": "file_creator", 
            "task": "–°–æ–∑–¥–∞–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "input_data": {"file_type": "html", "complexity": "medium"}
        },
        {
            "agent_id": "file_creator",
            "task": "–°–æ–∑–¥–∞–π JSON —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞",
            "input_data": {"file_type": "json", "complexity": "simple"}
        }
    ]
    
    results = []
    
    for task_data in file_tasks:
        print(f"\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º: {task_data['task']}")
        
        result = await process_task_with_advanced_learning(
            agent_id=task_data["agent_id"],
            task=task_data["task"],
            input_data=task_data["input_data"],
            execution_func=executor.execute_real_task
        )
        
        results.append(result)
        
        if result['success']:
            print(f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {result['execution_time']:.2f}—Å")
            print(f"   üìä –ö—Ä–∏—Ç–∏–∫–∏ –¥–∞–ª–∏ {len(result['critiques'])} –æ—Ü–µ–Ω–æ–∫")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫—Ä–∏—Ç–∏–∫–∏
            for i, critique_data in enumerate(result['critiques']):
                critique = critique_data
                score = critique.get('overall_score', 0)
                priority = critique.get('improvement_priority', 'unknown')
                print(f"      üé≠ –ö—Ä–∏—Ç–∏–∫ {i+1}: –±–∞–ª–ª {score:.2f}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority}")
                
            print(f"   ‚ú® –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π: {result['improvements_applied']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    completed_session = await engine.end_learning_session()
    print(f"\n‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {completed_session.tasks_processed} –∑–∞–¥–∞—á")
    
    return results

async def test_real_calculation_tasks():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á"""
    
    print("\nüßÆ === –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–´–• –í–´–ß–ò–°–õ–ï–ù–ò–ô ===")
    
    engine = get_advanced_learning_engine()
    executor = RealWorldTaskExecutor()
    session_id = await engine.start_learning_session()
    
    # –†–µ–∞–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    calc_tasks = [
        {
            "agent_id": "calculator",
            "task": "–í—ã—á–∏—Å–ª–∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Å —Ä–∞–¥–∏—É—Å–æ–º 5 –º–µ—Ç—Ä–æ–≤",
            "input_data": {"type": "geometry", "difficulty": "easy"}
        },
        {
            "agent_id": "calculator",
            "task": "–ù–∞–π–¥–∏ –∫–æ—Ä–Ω–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è x¬≤ - 5x + 6 = 0",
            "input_data": {"type": "algebra", "difficulty": "medium"}
        },
        {
            "agent_id": "calculator", 
            "task": "–ü–æ—Å—á–∏—Ç–∞–π —Å—É–º–º—É —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100",
            "input_data": {"type": "arithmetic", "difficulty": "easy"}
        }
    ]
    
    results = []
    
    for task_data in calc_tasks:
        print(f"\nüîÑ –í—ã—á–∏—Å–ª—è–µ–º: {task_data['task']}")
        
        result = await process_task_with_advanced_learning(
            agent_id=task_data["agent_id"],
            task=task_data["task"], 
            input_data=task_data["input_data"],
            execution_func=executor.execute_real_task
        )
        
        results.append(result)
        
        if result['success']:
            print(f"   ‚úÖ –í—ã—á–∏—Å–ª–µ–Ω–æ –∑–∞ {result['execution_time']:.2f}—Å")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ {len(result['critiques'])} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫")
            print(f"   ‚ú® –ê–≤—Ç–æ—É–ª—É—á—à–µ–Ω–∏–π: {result['improvements_applied']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {result['error']}")
    
    completed_session = await engine.end_learning_session()
    print(f"\n‚úÖ –°–µ—Å—Å–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {completed_session.tasks_processed} –∑–∞–¥–∞—á")
    
    return results

async def test_real_web_tasks():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–µ–±-–∑–∞–¥–∞—á"""
    
    print("\nüåê === –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–´–• –í–ï–ë-–ó–ê–î–ê–ß ===")
    
    engine = get_advanced_learning_engine()
    executor = RealWorldTaskExecutor()
    session_id = await engine.start_learning_session()
    
    # –†–µ–∞–ª—å–Ω—ã–µ –≤–µ–±-–∑–∞–¥–∞—á–∏
    web_tasks = [
        {
            "agent_id": "web_developer",
            "task": "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ—Ç—è—Ç–∞–º–∏",
            "input_data": {"type": "html", "theme": "cats", "complexity": "simple"}
        },
        {
            "agent_id": "web_developer",
            "task": "–°–æ–∑–¥–∞–π CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞",
            "input_data": {"type": "css", "component": "login", "complexity": "medium"}
        }
    ]
    
    results = []
    
    for task_data in web_tasks:
        print(f"\nüîÑ –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {task_data['task']}")
        
        result = await process_task_with_advanced_learning(
            agent_id=task_data["agent_id"],
            task=task_data["task"],
            input_data=task_data["input_data"], 
            execution_func=executor.execute_real_task
        )
        
        results.append(result)
        
        if result['success']:
            print(f"   ‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {result['execution_time']:.2f}—Å")
            print(f"   üìä –ö—Ä–∏—Ç–∏–∫–∏: {len(result['critiques'])} –∞–Ω–∞–ª–∏–∑–æ–≤")
            print(f"   ‚ú® –£–ª—É—á—à–µ–Ω–∏–π: {result['improvements_applied']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {result['error']}")
    
    completed_session = await engine.end_learning_session()
    print(f"\n‚úÖ –°–µ—Å—Å–∏—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {completed_session.tasks_processed} –∑–∞–¥–∞—á")
    
    return results

async def analyze_learning_results(all_results):
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
    
    print("\nüß† === –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –û–ë–£–ß–ï–ù–ò–Ø ===")
    
    engine = get_advanced_learning_engine()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_tasks = len(all_results)
    successful_tasks = sum(1 for r in all_results if r['success'])
    total_time = sum(r['execution_time'] for r in all_results if r['success'])
    total_critiques = sum(len(r['critiques']) for r in all_results if r['success'])
    total_improvements = sum(r['improvements_applied'] for r in all_results if r['success'])
    
    print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üéØ –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {successful_tasks}/{total_tasks} ({successful_tasks/total_tasks*100:.1f}%)")
    print(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å (—Å—Ä–µ–¥–Ω–µ–µ: {total_time/max(1,successful_tasks):.2f}—Å)")
    print(f"   üé≠ –í—Å–µ–≥–æ –∫—Ä–∏—Ç–∏–∫–∏: {total_critiques} (—Å—Ä–µ–¥–Ω–µ–µ: {total_critiques/max(1,successful_tasks):.1f} –Ω–∞ –∑–∞–¥–∞—á—É)")
    print(f"   ‚ú® –í—Å–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏–π: {total_improvements}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∞–≥–µ–Ω—Ç–∞–º
    print(f"\nüìà –ê–ù–ê–õ–ò–ó –ü–û –ê–ì–ï–ù–¢–ê–ú:")
    
    agent_stats = {}
    for result in all_results:
        if not result['success']:
            continue
            
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å agent_id –∏–∑ task_id –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
        agent_id = "unknown_agent"  # fallback
        
        if agent_id not in agent_stats:
            agent_stats[agent_id] = {
                'tasks': 0,
                'total_time': 0,
                'critiques': 0,
                'improvements': 0
            }
        
        stats = agent_stats[agent_id]
        stats['tasks'] += 1
        stats['total_time'] += result['execution_time']
        stats['critiques'] += len(result['critiques'])
        stats['improvements'] += result['improvements_applied']
    
    for agent_id, stats in agent_stats.items():
        avg_time = stats['total_time'] / stats['tasks']
        avg_critiques = stats['critiques'] / stats['tasks']
        print(f"   ü§ñ {agent_id}: {stats['tasks']} –∑–∞–¥–∞—á, —Å—Ä.–≤—Ä–µ–º—è {avg_time:.2f}—Å, —Å—Ä.–∫—Ä–∏—Ç–∏–∫ {avg_critiques:.1f}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á—ë—Ç —Å–∏—Å—Ç–µ–º—ã
    report = engine.get_comprehensive_report()
    
    print(f"\nüîç –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–Ø:")
    print(f"   üí™ –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {engine._calculate_system_health_score():.2f}")
    print(f"   üìà Rate —É–ª—É—á—à–µ–Ω–∏–π: {report['improvement_rate']:.3f}")
    print(f"   üéØ Rate controller: {report['rate_control']['success_rate']} —É—Å–ø–µ—Ö–∞")
    print(f"   üíæ –ö–µ—à: {report['rate_control']['cache_hit_rate']} –ø–æ–ø–∞–¥–∞–Ω–∏–π")
    
    # –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
    print(f"\nüìú –ò–ó–í–õ–ï–ß–Å–ù–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:")
    if engine.system_principles:
        for principle_id, principle in engine.system_principles.items():
            print(f"   ‚Ä¢ {principle.title}")
            print(f"     –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {principle.confidence:.2f} ({principle.evidence_count} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π)")
            print(f"     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {principle.category}")
    else:
        print("   –ü—Ä–∏–Ω—Ü–∏–ø—ã –µ—â—ë –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã - –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    insights = engine.get_learning_insights()
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    for rec in insights['recommendations']:
        print(f"   ‚Ä¢ {rec}")
    
    return {
        'total_tasks': total_tasks,
        'success_rate': successful_tasks/total_tasks,
        'avg_time': total_time/max(1,successful_tasks),
        'system_health': engine._calculate_system_health_score(),
        'principles_count': len(engine.system_principles)
    }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö"""
    
    print("üåç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–Ø –ù–ê –†–ï–ê–õ–¨–ù–´–• –ó–ê–î–ê–ß–ê–• KITTYCORE")
    print("=" * 75)
    
    all_results = []
    
    try:
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        file_results = await test_real_file_creation()
        all_results.extend(file_results)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(2)
        
        # –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        calc_results = await test_real_calculation_tasks()
        all_results.extend(calc_results)
        
        await asyncio.sleep(2)
        
        # –¢–µ—Å—Ç –≤–µ–±-–∑–∞–¥–∞—á
        web_results = await test_real_web_tasks()
        all_results.extend(web_results)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        analysis = await analyze_learning_results(all_results)
        
        print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {analysis['success_rate']*100:.1f}%")
        print(f"üí™ –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {analysis['system_health']:.2f}")
        print(f"üìú –ü—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {analysis['principles_count']}")
        
        if analysis['success_rate'] > 0.8:
            print("‚úÖ –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!")
        elif analysis['success_rate'] > 0.6:
            print("üü° –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –•–û–†–û–®–û, –ï–°–¢–¨ –¢–û–ß–ö–ò –†–û–°–¢–ê")
        else:
            print("üî¥ –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
            
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 