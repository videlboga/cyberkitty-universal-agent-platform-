#!/usr/bin/env python3
"""
üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ KittyCore 3.0

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –∞–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç –†–ï–ê–õ–¨–ù–´–ï —Ñ–∞–π–ª—ã –∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ä–∞–±–æ—Ç—É
"""

import asyncio
import os
import kittycore

async def demo_real_work():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤"""
    print("üê± KittyCore 3.0 - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = kittycore.create_orchestrator()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á
    test_tasks = [
        "—Å–æ–∑–¥–∞—Ç—å python —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞",
        "—Å–æ–∑–¥–∞—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º",
        "—Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –æ—Ç—á—ë—Ç–æ–º –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ",
        "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞"
    ]
    
    total_files_created = []
    
    for i, task in enumerate(test_tasks, 1):
        print(f"\nüéØ –ó–ê–î–ê–ß–ê {i}: {task}")
        print("-" * 50)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
        result = await orchestrator.solve_task(task)
        
        if result['status'] == 'completed':
            print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {result['duration']:.2f}—Å")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            execution = result.get('execution', {})
            files = execution.get('files_created', [])
            
            if files:
                print(f"üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                for file in files:
                    print(f"   üìÑ {file}")
                    total_files_created.append(file)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
                    if os.path.exists(file):
                        size = os.path.getsize(file)
                        print(f"      ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({size} –±–∞–π—Ç)")
                    else:
                        print(f"      ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            step_results = execution.get('step_results', {})
            if step_results:
                print(f"üîß –î–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–æ–≤:")
                for step_id, step_result in step_results.items():
                    status = "‚úÖ" if step_result.get('status') == 'completed' else "‚ùå"
                    agent = step_result.get('agent', 'unknown')
                    output = step_result.get('result', 'No output')
                    print(f"   {status} {agent}: {output}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    
    print(f"üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {len(test_tasks)}")
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(total_files_created)}")
    
    if total_files_created:
        print(f"\nüìã –°–ü–ò–°–û–ö –í–°–ï–• –°–û–ó–î–ê–ù–ù–´–• –§–ê–ô–õ–û–í:")
        for file in total_files_created:
            if os.path.exists(file):
                size = os.path.getsize(file)
                print(f"   üìÑ {file} ({size} –±–∞–π—Ç)")
            else:
                print(f"   üìÑ {file} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–æ–≤
    if total_files_created:
        first_file = total_files_created[0]
        if os.path.exists(first_file):
            print(f"\nüìñ –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê {first_file}:")
            print("-" * 40)
            try:
                with open(first_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    print(content[:500])  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                    if len(content) > 500:
                        print("... (–æ–±—Ä–µ–∑–∞–Ω–æ)")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")
            print("-" * 40)
    
    print(f"\nüöÄ –í–´–í–û–î: –ê–≥–µ–Ω—Ç—ã KittyCore 3.0 –≤—ã–ø–æ–ª–Ω—è—é—Ç –†–ï–ê–õ–¨–ù–£–Æ –†–ê–ë–û–¢–£!")
    print(f"   ‚úÖ –°–æ–∑–¥–∞—é—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã")
    print(f"   ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é—Ç –∫–æ–¥")
    print(f"   ‚úÖ –†–∞–±–æ—Ç–∞—é—Ç —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
    print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä—è—é—Ç –≤–µ–±-—Å–∞–π—Ç—ã")

if __name__ == "__main__":
    asyncio.run(demo_real_work()) 