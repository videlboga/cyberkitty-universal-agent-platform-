#!/usr/bin/env python3
"""–†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24 —Å –†–ê–ë–û–¢–ê–Æ–©–ï–ô —Å–∏—Å—Ç–µ–º–æ–π"""

import asyncio
import os
import sys
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º KittyCore
sys.path.append('/home/cyberkitty/Project/kittycore')

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig


def setup_working_llm():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –∫–æ—Ç–æ—Ä—ã–µ –¢–û–ß–ù–û —Ä–∞–±–æ—Ç–∞—é—Ç (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ç–µ—Å—Ç–µ)"""
    
    os.environ["OPENROUTER_API_KEY"] = os.getenv("OPENROUTER_API_KEY", "")
    os.environ["LLM_MODEL"] = "google/gemini-2.5-flash-lite-preview-06-17"  # –¢–∞ –∂–µ –º–æ–¥–µ–ª—å —á—Ç–æ —Ä–∞–±–æ—Ç–∞–ª–∞
    os.environ["TIMEOUT"] = "15"
    os.environ["MAX_TOKENS"] = "1000"
    os.environ["TEMPERATURE"] = "0"
    
    print("üöÄ –†–ê–ë–û–ß–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò LLM:")
    print(f"   –ú–æ–¥–µ–ª—å: {os.environ['LLM_MODEL']}")
    print(f"   –¢–∞–π–º–∞—É—Ç: {os.environ['TIMEOUT']}—Å")
    print(f"   –¢–æ–∫–µ–Ω—ã: {os.environ['MAX_TOKENS']}")
    print(f"   API –∫–ª—é—á: {'‚úÖ –µ—Å—Ç—å' if os.environ['OPENROUTER_API_KEY'] else '‚ùå –Ω–µ—Ç'}")


async def test_bitrix_market_analysis():
    """–¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24"""
    
    print("\n" + "="*80)
    print("üéØ –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢: –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24")
    print("="*80)
    
    setup_working_llm()
    
    # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
    task = """
    –ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24:
    1. –ù–∞–π–¥–∏ –¢–û–ü-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –ë–∏—Ç—Ä–∏–∫—Å24 –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
    2. –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ
    3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    4. –í—ã—è–≤–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ—à–µ–Ω–∏–π
    5. –°–æ–∑–¥–∞–π 3 –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö UX –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏
    """
    
    vault_path = "vault_bitrix_real"
    
    print(f"\nüìã –ó–ê–î–ê–ß–ê: {task}")
    print(f"üìÇ VAULT: {vault_path}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏
    config = UnifiedConfig(
        vault_path=vault_path,
        max_agents=5,  # –ë–æ–ª—å—à–µ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏
        timeout=300,   # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
        enable_human_intervention=False,  # –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        enable_smart_validation=True,     # –í–ö–õ–Æ–ß–ê–ï–ú –≤–∞–ª–∏–¥–∞—Ü–∏—é
        enable_metrics=True,              # –í–∫–ª—é—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        enable_vector_memory=False,       # –ü–æ–∫–∞ –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏ (–¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
        enable_amem_memory=False,         # –ü–æ–∫–∞ –±–µ–∑ A-MEM (–¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
        enable_shared_chat=True,          # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        enable_tool_adaptation=False      # –ë–µ–∑ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ–∫–∞
    )
    
    orchestrator = UnifiedOrchestrator(config=config)
    
    start_time = time.time()
    
    try:
        print("\nüöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –†–´–ù–ö–ê –ë–ò–¢–†–ò–ö–°24...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–∂–Ω—É—é –∑–∞–¥–∞—á—É
        result = await orchestrator.solve_task(task)
        
        execution_time = time.time() - start_time
        print(f"\n‚è±Ô∏è –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø: {execution_time:.2f}—Å")
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –°–ò–°–¢–ï–ú–´: {result}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        import glob
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ outputs (—Å—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞) –∏ vault (–Ω–æ–≤–∞—è —Å—Ö–µ–º–∞)
        outputs_files = glob.glob("outputs/**/*", recursive=True)
        outputs_files = [f for f in outputs_files if os.path.isfile(f)]
        
        vault_files = glob.glob(f"{vault_path}/**/*", recursive=True)
        vault_files = [f for f in vault_files if os.path.isfile(f)]
        
        all_files = outputs_files + vault_files
        
        print(f"\nüìÅ –û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –§–ê–ô–õ–û–í: {len(all_files)}")
        print(f"   üìÇ –í outputs/: {len(outputs_files)}")
        print(f"   üìÇ –í vault/: {len(vault_files)}")
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ë–∏—Ç—Ä–∏–∫—Å24
        bitrix_files = [f for f in outputs_files if 'bitrix' in f.lower()]
        analysis_files = [f for f in outputs_files if any(word in f.lower() for word in ['analysis', '–∞–Ω–∞–ª–∏–∑', 'report', '–æ—Ç—á–µ—Ç'])]
        prototype_files = [f for f in outputs_files if any(word in f.lower() for word in ['prototype', '–ø—Ä–æ—Ç–æ—Ç–∏–ø'])]
        
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        print(f"   üìä –§–∞–π–ª—ã –ø—Ä–æ –ë–∏—Ç—Ä–∏–∫—Å24: {len(bitrix_files)}")
        print(f"   üìà –§–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–∞: {len(analysis_files)}")
        print(f"   üé® –§–∞–π–ª—ã –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤: {len(prototype_files)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if bitrix_files:
            print(f"\nüìã –§–ê–ô–õ–´ –ü–†–û –ë–ò–¢–†–ò–ö–°24:")
            for f in bitrix_files[:5]:
                print(f"   üìÑ {f}")
                
        if prototype_files:
            print(f"\nüé® –§–ê–ô–õ–´ –ü–†–û–¢–û–¢–ò–ü–û–í:")
            for f in prototype_files[:3]:
                print(f"   üìÑ {f}")
        
        # –ß–∏—Ç–∞–µ–º –æ–¥–∏–Ω –∏–∑ –≥–ª–∞–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if bitrix_files:
            main_file = bitrix_files[0]
            print(f"\nüìñ –°–û–î–ï–†–ñ–ò–ú–û–ï {main_file}:")
            print("="*60)
            try:
                with open(main_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    print(content[:500] + "..." if len(content) > 500 else content)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
            print("="*60)
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        success = len(bitrix_files) > 0 and len(prototype_files) > 0
        
        return {
            'success': success,
            'execution_time': execution_time,
            'total_files': len(all_files),
            'bitrix_files': len(bitrix_files),
            'prototype_files': len(prototype_files),
            'analysis_files': len(analysis_files)
        }
        
    except Exception as e:
        execution_time = time.time() - start_time
        print(f"\nüí• –û–®–ò–ë–ö–ê: {e}")
        print(f"‚è±Ô∏è –í–†–ï–ú–Ø –î–û –û–®–ò–ë–ö–ò: {execution_time:.2f}—Å")
        
        return {
            'success': False,
            'error': str(e),
            'execution_time': execution_time
        }


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üê± KittyCore 3.0 - –†–ï–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê –ë–ò–¢–†–ò–ö–°24")
    print("=" * 80)
    
    if not os.getenv("OPENROUTER_API_KEY"):
        print("‚ùå –ù–£–ñ–ï–ù OPENROUTER_API_KEY")
        return
    
    result = await test_bitrix_market_analysis()
    
    print("\n" + "="*80)
    print("üèÜ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("="*80)
    
    if result.get('success'):
        print("üéâ –£–°–ü–ï–•! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ–ª–∞ –†–ï–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞!")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {result['execution_time']:.2f}—Å")
        print(f"   üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {result['total_files']}")
        print(f"   üìä –ê–Ω–∞–ª–∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24: {result['bitrix_files']} —Ñ–∞–π–ª–æ–≤")
        print(f"   üé® –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã: {result['prototype_files']} —Ñ–∞–π–ª–æ–≤")
        print(f"   üìà –ê–Ω–∞–ª–∏–∑—ã: {result['analysis_files']} —Ñ–∞–π–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞—á–µ—Å—Ç–≤–æ —Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º
        print("\nüéØ –¢–µ–ø–µ—Ä—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
    else:
        if 'error' in result:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {result['error']}")
        else:
            print("‚ùå –ù–ï–£–î–ê–ß–ê: —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã")
        
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {result['execution_time']:.2f}—Å")


if __name__ == "__main__":
    asyncio.run(main()) 