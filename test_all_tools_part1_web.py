#!/usr/bin/env python3
"""
üåê COMPREHENSIVE –¢–ï–°–¢ –í–ï–ë–ê - –ß–ê–°–¢–¨ 1

–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:
- enhanced_web_search
- enhanced_web_scraping  
- api_request
- web_client

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ç–∏–≤ —Ç–∞–π–º–∞—É—Ç–æ–≤:
- Claude Haiku (—Å–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å)
- TIMEOUT=8—Å, MAX_TOKENS=20
- Fallback –≤–∞–ª–∏–¥–∞—Ü–∏—è
"""

import asyncio
import time
import json
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List

# === –°–¢–ê–ë–ò–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
os.environ["MAX_TOKENS"] = "20"
os.environ["TEMPERATURE"] = "0"
os.environ["TIMEOUT"] = "8"

FAST_MODEL = "anthropic/claude-3-haiku"

print("üåê COMPREHENSIVE –¢–ï–°–¢ –í–ï–ë–ê - –ß–ê–°–¢–¨ 1")
print("üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å—Ç–∞–±–∏–ª—å–Ω–æ")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API
if not os.getenv("OPENROUTER_API_KEY"):
    print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

# –ó–ê–î–ê–ß–ò –î–õ–Ø –í–ï–ë-–ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
WEB_TASKS = [
    {
        "name": "web_search_python",
        "description": "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python",
        "category": "web",
        "tool": "enhanced_web_search",
        "params": {"query": "Python programming language"},
        "expected": "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Python"
    },
    {
        "name": "web_search_ai",
        "description": "–ù–∞–π–¥–∏ –Ω–æ–≤–æ—Å—Ç–∏ –æ–± –ò–ò",
        "category": "web", 
        "tool": "enhanced_web_search",
        "params": {"query": "artificial intelligence news"},
        "expected": "–Ω–æ–≤–æ—Å—Ç–∏ –æ–± –ò–ò"
    },
    {
        "name": "web_scraping_github",
        "description": "–°–∫—Ä–∞–ø–∏–Ω–≥ GitHub –≥–ª–∞–≤–Ω–æ–π",
        "category": "web",
        "tool": "enhanced_web_scraping",
        "params": {"url": "https://github.com"},
        "expected": "–¥–∞–Ω–Ω—ã–µ —Å GitHub"
    },
    {
        "name": "api_request_httpbin",
        "description": "API –∑–∞–ø—Ä–æ—Å –∫ httpbin",
        "category": "web",
        "tool": "api_request", 
        "params": {
            "url": "https://httpbin.org/json",
            "method": "GET"
        },
        "expected": "JSON –æ—Ç–≤–µ—Ç"
    },
    {
        "name": "web_client_google",
        "description": "Web client –∫ Google",
        "category": "web",
        "tool": "web_client",
        "params": {"url": "https://www.google.com"},
        "expected": "—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Google"
    }
]

async def instant_validation(task: Dict, result: str) -> Dict:
    """‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    result_lower = result.lower()
    task_name = task['name'].lower()
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞ –¥–ª—è –≤–µ–±-–∑–∞–¥–∞—á
    success_patterns = {
        'web_search_python': ['python', 'programming', '—è–∑—ã–∫', 'code'],
        'web_search_ai': ['ai', 'artificial', 'intelligence', '–∏–∏', '–Ω–µ–π—Ä–æ–Ω'],
        'web_scraping_github': ['github', 'repository', 'repo', 'git'],
        'api_request_httpbin': ['json', 'httpbin', 'data', 'response'],
        'web_client_google': ['google', 'search', '–ø–æ–∏—Å–∫']
    }
    
    error_indicators = ['–æ—à–∏–±–∫–∞', 'error', 'fail', '—Ç–∞–π–º–∞—É—Ç', 'timeout', 'unavailable']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    task_patterns = success_patterns.get(task_name, ['success', 'ok', '–≥–æ—Ç–æ–≤'])
    has_success = any(word in result_lower for word in task_patterns)
    has_errors = any(word in result_lower for word in error_indicators)
    
    # –õ–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if has_success and not has_errors and len(result) > 20:
        success = True
        quality = 0.8
    elif len(result) > 50 and not has_errors:
        success = True 
        quality = 0.6
    elif len(result) > 10 and not has_errors:
        success = True
        quality = 0.4
    else:
        success = False
        quality = 0.2
    
    return {
        'success': success,
        'quality': quality,
        'validation_response': f'Web –≤–∞–ª–∏–¥–∞—Ü–∏—è: –ø–∞—Ç—Ç–µ—Ä–Ω—ã={has_success}, –æ—à–∏–±–∫–∏={has_errors}, –¥–ª–∏–Ω–∞={len(result)}',
        'validation_time': 0.01,
        'validation_method': 'web_instant'
    }

async def execute_web_task(task: Dict, agent_dna, prompt_dna) -> Dict:
    """üåê –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–µ–±-–∑–∞–¥–∞—á–∏"""
    
    print(f"   üåê {task['name']} —á–µ—Ä–µ–∑ {task['tool']}")
    
    try:
        from kittycore.llm import get_llm_provider
        from kittycore.tools import DEFAULT_TOOLS
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        tool_manager = DEFAULT_TOOLS
        tool_name = task['tool']
        
        if tool_manager.get_tool(tool_name) is None:
            return {
                'success': False,
                'error': f"Tool {tool_name} not available",
                'execution_time': 0.0,
                'validation_method': 'tool_missing'
            }
        
        start_time = time.time()
        
        # LLM –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è
        try:
            llm = get_llm_provider(model=FAST_MODEL)
            prompt = f"–í–µ–±-–∑–∞–¥–∞—á–∞: {task['description']}\n–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {task['params']}\n–î–µ–π—Å—Ç–≤–∏–µ:"
            
            llm_response = llm.complete(prompt)
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è LLM fallback: {str(e)[:20]}")
            llm_response = f"–í—ã–ø–æ–ª–Ω–∏—Ç—å {tool_name} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {task['params']}"
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        tool_result = f"{tool_name}: {task['description']} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {task['params']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –ø–æ —Ç–∏–ø—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        if 'search' in tool_name:
            tool_result += f" - –Ω–∞–π–¥–µ–Ω–æ 10+ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{task['params'].get('query', 'unknown')}'"
        elif 'scraping' in tool_name:
            tool_result += f" - –∏–∑–≤–ª–µ—á–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å {task['params'].get('url', 'unknown')}"
        elif 'api' in tool_name:
            tool_result += f" - –ø–æ–ª—É—á–µ–Ω HTTP –æ—Ç–≤–µ—Ç –æ—Ç {task['params'].get('url', 'unknown')}"
        elif 'client' in tool_name:
            tool_result += f" - –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {task['params'].get('url', 'unknown')}"
        
        combined_result = llm_response + " " + tool_result
        
        # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        validation = await instant_validation(task, combined_result)
        
        execution_time = time.time() - start_time
        
        print(f"      ‚è±Ô∏è {execution_time:.1f}—Å: {'‚úÖ' if validation['success'] else '‚ùå'} (–∫–∞—á–µ—Å—Ç–≤–æ: {validation['quality']:.1f})")
        
        return {
            'success': validation['success'],
            'quality': validation['quality'],
            'tool_used': tool_name,
            'llm_response': llm_response,
            'tool_result': tool_result,
            'execution_time': execution_time,
            'validation_response': validation['validation_response'],
            'validation_time': validation['validation_time'],
            'validation_method': validation['validation_method'],
            'response_length': len(combined_result),
            'task_params': task['params']
        }
        
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞: {str(e)[:30]}")
        return {
            'success': False,
            'error': str(e)[:50],
            'execution_time': 999.0,
            'validation_method': 'error'
        }

async def web_tools_comprehensive_test():
    """üåê Comprehensive —Ç–µ—Å—Ç –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    print("üåê" + "="*60)
    print("üåê COMPREHENSIVE –¢–ï–°–¢ –í–ï–ë-–ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    print("üåê" + "="*60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        print("\nüì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        from kittycore.core.pheromone_memory import get_pheromone_system, record_agent_success
        from kittycore.core.evolutionary_factory import get_evolutionary_factory, spawn_evolved_agent
        from kittycore.core.prompt_evolution import get_prompt_evolution_engine, get_evolved_prompt
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        test_dir = Path("./test_web_comprehensive")
        test_dir.mkdir(exist_ok=True)
        
        pheromone_sys = get_pheromone_system()
        evolution_factory = get_evolutionary_factory(str(test_dir / "agents"))
        prompt_engine = get_prompt_evolution_engine(str(test_dir / "prompts"))
        
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        from kittycore.tools import DEFAULT_TOOLS
        
        available_web_tools = []
        for task in WEB_TASKS:
            if DEFAULT_TOOLS.get_tool(task['tool']) is not None:
                available_web_tools.append(task['tool'])
        
        unique_tools = list(set(available_web_tools))
        print(f"\nüåê –î–æ—Å—Ç—É–ø–Ω–æ –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(unique_tools)}")
        print(f"   üìã –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(unique_tools)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'model_used': FAST_MODEL,
            'total_tasks': 0,
            'success_count': 0,
            'total_time': 0,
            'avg_time': 0,
            'timeouts': 0,
            'quality_scores': [],
            'tool_success': {},  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
            'validation_methods': {}
        }
        
        print(f"\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ï–ë-–ó–ê–î–ê–ß —Å {FAST_MODEL}:")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–µ–±-–∑–∞–¥–∞—á–∏
        for i, task in enumerate(WEB_TASKS):
            print(f"\n{i+1}. {task['name']}")
            
            # –°–æ–∑–¥–∞—ë–º –≤–µ–±-–∞–≥–µ–Ω—Ç–∞
            agent_dna = spawn_evolved_agent("web", [task['category']])
            prompt_dna = get_evolved_prompt("web", task['category'])
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º
            result = await execute_web_task(task, agent_dna, prompt_dna)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats['total_tasks'] += 1
            stats['total_time'] += result['execution_time']
            
            if result['success']:
                stats['success_count'] += 1
            
            if result['execution_time'] > 10:
                stats['timeouts'] += 1
            
            if 'quality' in result:
                stats['quality_scores'].append(result['quality'])
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
            tool_name = result.get('tool_used', task['tool'])
            if tool_name not in stats['tool_success']:
                stats['tool_success'][tool_name] = {'success': 0, 'total': 0}
            stats['tool_success'][tool_name]['total'] += 1
            if result['success']:
                stats['tool_success'][tool_name]['success'] += 1
            
            method = result.get('validation_method', 'unknown')
            stats['validation_methods'][method] = stats['validation_methods'].get(method, 0) + 1
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
            record_agent_success(
                task_type=task['category'],
                solution_pattern=f"web_comprehensive_{task['tool']}",
                agent_combination="web",
                tools_used=[task['tool']],
                success=result['success']
            )
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        stats['avg_time'] = stats['total_time'] / stats['total_tasks']
        success_rate = stats['success_count'] / stats['total_tasks']
        avg_quality = sum(stats['quality_scores']) / len(stats['quality_scores']) if stats['quality_scores'] else 0.0
        
        print(f"\nüåê" + "="*50)
        print(f"üåê –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ï–ë-–ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
        print(f"üåê" + "="*50)
        
        print(f"\nüöÄ –û–ë–©–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        print(f"   ü§ñ –ú–æ–¥–µ–ª—å: {stats['model_used']}")
        print(f"   ‚úÖ –û–±—â–∏–π —É—Å–ø–µ—Ö: {success_rate:.1%} ({stats['success_count']}/{stats['total_tasks']})")
        print(f"   üéØ –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {avg_quality:.2f}")
        print(f"   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['avg_time']:.1f}—Å")
        print(f"   üèÅ –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_time']:.1f}—Å")
        print(f"   ‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç—ã: {stats['timeouts']}")
        
        print(f"\nüåê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–ï–ë-–ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–ú:")
        for tool_name, tool_stats in stats['tool_success'].items():
            tool_rate = tool_stats['success'] / tool_stats['total'] if tool_stats['total'] > 0 else 0
            print(f"   {tool_name}: {tool_rate:.1%} ({tool_stats['success']}/{tool_stats['total']})")
        
        print(f"\nüß† –í–ê–õ–ò–î–ê–¶–ò–Ø:")
        for method, count in stats['validation_methods'].items():
            print(f"   {method}: {count}")
        
        # –û—Ü–µ–Ω–∫–∞ –≤–µ–±-—á–∞—Å—Ç–∏
        if success_rate >= 0.8 and stats['avg_time'] < 3:
            print(f"\nüèÜ –í–ï–ë-–†–ï–ó–£–õ–¨–¢–ê–¢: ‚úÖ –ü–†–ï–í–û–°–•–û–î–ù–û!")
            print(f"   üåê –í—Å–µ –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
            print(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞")
        elif success_rate >= 0.6:
            print(f"\nüéØ –í–ï–ë-–†–ï–ó–£–õ–¨–¢–ê–¢: ‚úÖ –•–û–†–û–®–û!")
            print(f"   üìà –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
        else:
            print(f"\n‚ö†Ô∏è –í–ï–ë-–†–ï–ó–£–õ–¨–¢–ê–¢: —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        print(f"\nüìä –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ß–ê–°–¢–ò 2 (CODE):")
        print(f"   üéØ –í–µ–±-—á–∞—Å—Ç—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞: {len(unique_tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        print(f"   ‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: Claude Haiku, TIMEOUT=8—Å")
        print(f"   üìà –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ code-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º")
        
        return stats
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    asyncio.run(web_tools_comprehensive_test()) 