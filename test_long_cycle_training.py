#!/usr/bin/env python3
"""
üîÑ –¢–µ—Å—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–µ–π—Å—è —Å–∏—Å—Ç–µ–º—ã

–¶–µ–ª—å: –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
–ü—Ä–∏–Ω—Ü–∏–ø: "–°–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ —Ü–∏–∫–ª—ã —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"
"""

import asyncio
import time
import random
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

# –†–µ–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
TRAINING_TASKS = [
    {
        "type": "code_analysis",
        "description": "–ê–Ω–∞–ª–∏–∑ Python –∫–æ–¥–∞ –Ω–∞ –æ—à–∏–±–∫–∏",
        "tools": ["code_execution", "document_tool"],
        "complexity": "medium"
    },
    {
        "type": "web_research", 
        "description": "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
        "tools": ["enhanced_web_search", "document_tool"],
        "complexity": "simple"
    },
    {
        "type": "data_processing",
        "description": "–û–±—Ä–∞–±–æ—Ç–∫–∞ CSV –¥–∞–Ω–Ω—ã—Ö",
        "tools": ["data_analysis_tool", "document_tool"],
        "complexity": "medium"
    },
    {
        "type": "system_check",
        "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤",
        "tools": ["super_system_tool", "document_tool"], 
        "complexity": "simple"
    },
    {
        "type": "security_audit",
        "description": "–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "tools": ["security_tool", "document_tool"],
        "complexity": "complex"
    }
]

async def simulate_task_execution(task, agent_dna, prompt_dna):
    """üéØ –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
    
    print(f"   ü§ñ –ê–≥–µ–Ω—Ç {agent_dna.agent_id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç: {task['description']}")
    print(f"   üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(task['tools'])}")
    
    start_time = time.time()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    tool_success = {}
    overall_success = True
    
    for tool_name in task['tools']:
        # –ë–∞–∑–∏—Ä—É–µ–º —É—Å–ø–µ—Ö –Ω–∞ –≥–µ–Ω–µ—Ç–∏–∫–µ –∞–≥–µ–Ω—Ç–∞ + —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
        tool_efficiency = agent_dna.genes.tool_efficiency.get(tool_name, 0.5)
        success_chance = (tool_efficiency + agent_dna.genes.success_rate) / 2
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
        actual_success = random.random() < success_chance
        tool_success[tool_name] = actual_success
        
        if not actual_success:
            overall_success = False
        
        print(f"      üîß {tool_name}: {'‚úÖ' if actual_success else '‚ùå'}")
    
    # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞
    complexity_multiplier = {"simple": 1.0, "medium": 1.5, "complex": 2.0}
    base_time = complexity_multiplier.get(task['complexity'], 1.0) * 10
    execution_time = base_time / agent_dna.genes.speed_factor
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Å–ø–µ—Ö–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
    tool_success_rate = sum(tool_success.values()) / len(tool_success)
    quality_score = tool_success_rate * agent_dna.genes.quality_factor
    
    end_time = time.time()
    
    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—Ö' if overall_success else '‚ùå –ù–µ—É–¥–∞—á–∞'}")
    print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f}, –í—Ä–µ–º—è: {execution_time:.1f}—Å")
    print(f"   üìä –£—Å–ø–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {tool_success_rate:.1%}")
    
    return {
        'success': overall_success,
        'quality': quality_score,
        'execution_time': execution_time,
        'tool_success': tool_success,
        'tool_success_rate': tool_success_rate
    }

async def long_cycle_training(cycles=10, tasks_per_cycle=5):
    """üîÑ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üß¨" + "="*80)
    print("üß¨ –î–û–õ–ì–û–°–†–û–ß–ù–´–ô –¶–ò–ö–õ –û–ë–£–ß–ï–ù–ò–Ø –°–ê–ú–û–†–ï–î–£–ü–õ–ò–¶–ò–†–£–Æ–©–ï–ô–°–Ø –°–ò–°–¢–ï–ú–´")
    print("üß¨" + "="*80)
    
    try:
        # –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
        print("\nüì¶ –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º...")
        from kittycore.core.pheromone_memory import get_pheromone_system, record_agent_success
        from kittycore.core.evolutionary_factory import get_evolutionary_factory, spawn_evolved_agent, update_agent_evolution
        from kittycore.core.prompt_evolution import get_prompt_evolution_engine, get_evolved_prompt, record_prompt_usage
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        pheromone_sys = get_pheromone_system()
        evolution_factory = get_evolutionary_factory("./long_training/agents")
        prompt_engine = get_prompt_evolution_engine("./long_training/prompts")
        
        print(f"‚úÖ –°–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        training_stats = {
            'cycles_completed': 0,
            'total_tasks': 0,
            'total_successes': 0,
            'tool_stats': {},
            'generation_progress': [],
            'quality_progression': []
        }
        
        # === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –û–ë–£–ß–ï–ù–ò–Ø ===
        for cycle in range(cycles):
            print(f"\n" + "üîÑ" + "-"*60)
            print(f"üîÑ –¶–ò–ö–õ –û–ë–£–ß–ï–ù–ò–Ø {cycle + 1}/{cycles}")
            print(f"üîÑ" + "-"*60)
            
            cycle_results = []
            cycle_successes = 0
            cycle_quality_sum = 0
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ü–∏–∫–ª–µ
            for task_num in range(tasks_per_cycle):
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É
                task = random.choice(TRAINING_TASKS)
                
                print(f"\nüéØ –ó–∞–¥–∞—á–∞ {task_num + 1}/{tasks_per_cycle}: {task['type']}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
                agent_type_mapping = {
                    "code_analysis": "code",
                    "web_research": "web", 
                    "data_processing": "analysis",
                    "system_check": "general",
                    "security_audit": "analysis"
                }
                
                agent_type = agent_type_mapping.get(task['type'], 'general')
                
                # –°–æ–∑–¥–∞—ë–º/–ø–æ–ª—É—á–∞–µ–º —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                agent_dna = spawn_evolved_agent(agent_type, [task['type']])
                prompt_dna = get_evolved_prompt(agent_type, task['type'])
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
                result = await simulate_task_execution(task, agent_dna, prompt_dna)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
                record_agent_success(
                    task_type=task['type'],
                    solution_pattern=f"{agent_type}_{task['type']}_pattern",
                    agent_combination=agent_type,
                    tools_used=task['tools'],
                    success=result['success']
                )
                
                update_agent_evolution(agent_dna.agent_id, result['success'], result['execution_time'])
                record_prompt_usage(prompt_dna.prompt_id, task['type'], result['success'], result['quality'], result['execution_time'])
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                cycle_results.append(result)
                if result['success']:
                    cycle_successes += 1
                cycle_quality_sum += result['quality']
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                for tool, success in result['tool_success'].items():
                    if tool not in training_stats['tool_stats']:
                        training_stats['tool_stats'][tool] = {'used': 0, 'successful': 0}
                    training_stats['tool_stats'][tool]['used'] += 1
                    if success:
                        training_stats['tool_stats'][tool]['successful'] += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                await asyncio.sleep(0.1)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞
            cycle_success_rate = cycle_successes / tasks_per_cycle
            cycle_avg_quality = cycle_quality_sum / tasks_per_cycle
            
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¶–ò–ö–õ–ê {cycle + 1}:")
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {cycle_success_rate:.1%} ({cycle_successes}/{tasks_per_cycle})")
            print(f"   ‚≠ê –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {cycle_avg_quality:.2f}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            training_stats['cycles_completed'] = cycle + 1
            training_stats['total_tasks'] += tasks_per_cycle
            training_stats['total_successes'] += cycle_successes
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–≤–æ–ª—é—Ü–∏—é –∫–∞–∂–¥—ã–µ 3 —Ü–∏–∫–ª–∞
            if (cycle + 1) % 3 == 0:
                print(f"   üß¨ –ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–∏ –ø–æ—Å–ª–µ {cycle + 1} —Ü–∏–∫–ª–æ–≤...")
                
                evolution_factory.evolve_population(force_evolution=True)
                prompt_engine.evolve_prompts()
                pheromone_sys.evaporate_pheromones()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —ç–≤–æ–ª—é—Ü–∏–∏
                evolution_stats = evolution_factory.get_population_stats()
                training_stats['generation_progress'].append({
                    'cycle': cycle + 1,
                    'max_generation': evolution_stats.max_generation,
                    'population_health': evolution_stats.population_health,
                    'success_rate': cycle_success_rate,
                    'avg_quality': cycle_avg_quality
                })
                
                print(f"   üìà –ü–æ–∫–æ–ª–µ–Ω–∏–µ: {evolution_stats.max_generation}, –ó–¥–æ—Ä–æ–≤—å–µ: {evolution_stats.population_health:.2f}")
            
            training_stats['quality_progression'].append(cycle_avg_quality)
        
        return training_stats
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –û–ë–£–ß–ï–ù–ò–ò: {e}")
        import traceback
        traceback.print_exc()
        return None

def analyze_training_results(stats):
    """üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    
    print("\n" + "üìä" + "="*80)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –î–û–õ–ì–û–°–†–û–ß–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
    print("üìä" + "="*80)
    
    if not stats:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    overall_success_rate = stats['total_successes'] / stats['total_tasks']
    print(f"\nüéØ –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   üîÑ –¶–∏–∫–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['cycles_completed']}")
    print(f"   üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total_tasks']}")
    print(f"   ‚úÖ –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {overall_success_rate:.1%} ({stats['total_successes']}/{stats['total_tasks']})")
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞
    if stats['quality_progression']:
        initial_quality = stats['quality_progression'][0]
        final_quality = stats['quality_progression'][-1]
        quality_improvement = final_quality - initial_quality
        
        print(f"\nüìà –ü–†–û–ì–†–ï–°–° –ö–ê–ß–ï–°–¢–í–ê:")
        print(f"   üå± –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {initial_quality:.2f}")
        print(f"   üéØ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {final_quality:.2f}")
        print(f"   üìä –£–ª—É—á—à–µ–Ω–∏–µ: {quality_improvement:+.2f} ({(quality_improvement/initial_quality)*100:+.1f}%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    print(f"\nüõ†Ô∏è –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í:")
    tool_success_rates = {}
    for tool, data in stats['tool_stats'].items():
        success_rate = data['successful'] / data['used'] if data['used'] > 0 else 0
        tool_success_rates[tool] = success_rate
        print(f"   üîß {tool}: {success_rate:.1%} ({data['successful']}/{data['used']})")
    
    # –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    if tool_success_rates:
        best_tool = max(tool_success_rates.items(), key=lambda x: x[1])
        worst_tool = min(tool_success_rates.items(), key=lambda x: x[1])
        
        print(f"\nüèÜ –õ–£–ß–®–ò–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢: {best_tool[0]} ({best_tool[1]:.1%} —É—Å–ø–µ—Ö)")
        print(f"‚ö†Ô∏è –•–£–î–®–ò–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢: {worst_tool[0]} ({worst_tool[1]:.1%} —É—Å–ø–µ—Ö)")
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å —ç–≤–æ–ª—é—Ü–∏–∏
    if stats['generation_progress']:
        print(f"\nüß¨ –≠–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –ü–†–û–ì–†–ï–°–°:")
        for i, progress in enumerate(stats['generation_progress']):
            print(f"   üìä –¶–∏–∫–ª {progress['cycle']}: –ø–æ–∫–æ–ª–µ–Ω–∏–µ {progress['max_generation']}, "
                  f"–∑–¥–æ—Ä–æ–≤—å–µ {progress['population_health']:.2f}, "
                  f"—É—Å–ø–µ—Ö {progress['success_rate']:.1%}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    if overall_success_rate >= 0.8:
        grade = "üèÜ –û–¢–õ–ò–ß–ù–û"
        status = "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ –æ–±—É—á–µ–Ω–∞!"
    elif overall_success_rate >= 0.6:
        grade = "‚úÖ –•–û–†–û–®–û" 
        status = "–°–∏—Å—Ç–µ–º–∞ —Ö–æ—Ä–æ—à–æ –æ–±—É—á–µ–Ω–∞"
    elif overall_success_rate >= 0.4:
        grade = "‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
        status = "–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"
    else:
        grade = "‚ùå –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
        status = "–°–∏—Å—Ç–µ–º–∞ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Å–µ—Ä—å—ë–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–µ"
    
    print(f"\nüéñÔ∏è –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {grade}")
    print(f"üìù –°–¢–ê–¢–£–°: {status}")
    print(f"üéØ –û–±—â–∏–π –±–∞–ª–ª: {overall_success_rate:.1%}")
    
    return {
        'grade': grade,
        'overall_success_rate': overall_success_rate,
        'quality_improvement': quality_improvement if stats['quality_progression'] else 0,
        'best_tool': best_tool[0] if tool_success_rates else None,
        'worst_tool': worst_tool[0] if tool_success_rates else None
    }

async def main():
    """üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    
    print("üîÑ –ó–∞–ø—É—Å–∫ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–µ–π—Å—è —Å–∏—Å—Ç–µ–º—ã...")
    
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    training_dir = Path("./long_training")
    training_dir.mkdir(exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ (–Ω–∞—á–Ω—ë–º —Å –º–∞–ª–æ–≥–æ - 6 —Ü–∏–∫–ª–æ–≤ –ø–æ 3 –∑–∞–¥–∞—á–∏)
    print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: 6 —Ü–∏–∫–ª–æ–≤ –ø–æ 3 –∑–∞–¥–∞—á–∏ = 18 –∑–∞–¥–∞—á")
    print("üß¨ –≠–≤–æ–ª—é—Ü–∏—è –∫–∞–∂–¥—ã–µ 3 —Ü–∏–∫–ª–∞")
    
    stats = await long_cycle_training(cycles=6, tasks_per_cycle=3)
    
    if stats:
        analysis = analyze_training_results(stats)
        print(f"\n‚úÖ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û: {analysis['grade']}")
    else:
        print("\n‚ùå –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")

if __name__ == "__main__":
    print("üîÑ –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
    print(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(TRAINING_TASKS)} —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    asyncio.run(main()) 