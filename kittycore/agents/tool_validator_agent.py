"""
üîß ToolValidatorAgent - –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

from typing import Dict, Any, List
from dataclasses import dataclass


@dataclass 
class ToolValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    is_valid: bool
    corrected_steps: List[Dict[str, Any]]
    corrections_made: List[str]
    validation_errors: List[str]


class ToolValidatorAgent:
    """üîß –ê–≥–µ–Ω—Ç-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    # –°—Ç—Ä–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    VALID_TOOLS = {
        "file_manager": "–°–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤",
        "code_generator": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python/HTML/CSS/JS –∫–æ–¥–∞", 
        "web_client": "HTTP –∑–∞–ø—Ä–æ—Å—ã, –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
        "system_tools": "–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏"
    }
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
        self.tool_mappings = self._build_tool_mappings()
    
    def _build_tool_mappings(self) -> Dict[str, str]:
        """–°—Ç—Ä–æ–∏–º –º–∞–ø–ø–∏–Ω–≥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ"""
        return {
            # LLM —á–∞—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç—Ç–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            "python interpreter": "code_generator",
            "python_interpreter": "code_generator", 
            "live server": "system_tools",
            "live_server": "system_tools",
            "python editor": "code_generator",
            "python_editor": "code_generator",
            "nothing": "file_manager",
            "none": "file_manager",
            
            # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            "—Ñ–∞–π–ª_–º–µ–Ω–µ–¥–∂–µ—Ä": "file_manager",
            "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä_–∫–æ–¥–∞": "code_generator", 
            "–≤–µ–±_–∫–ª–∏–µ–Ω—Ç": "web_client",
            "—Å–∏—Å—Ç–µ–º–Ω—ã–µ_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": "system_tools",
            
            # –°–æ–∫—Ä–∞—â–µ–Ω–∏—è
            "file": "file_manager",
            "code": "code_generator",
            "web": "web_client",
            "system": "system_tools"
        }
    
    def validate_plan(self, plan: Dict[str, Any]) -> ToolValidationResult:
        """
        üéØ –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Args:
            plan: –ü–ª–∞–Ω —Å —à–∞–≥–∞–º–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            ToolValidationResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        """
        steps = plan.get("steps", [])
        if not steps:
            return ToolValidationResult(
                is_valid=False,
                corrected_steps=[],
                corrections_made=[],
                validation_errors=["‚ùå –ü–ª–∞–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —à–∞–≥–æ–≤"]
            )
        
        corrected_steps = []
        corrections_made = []
        validation_errors = []
        
        print(f"üîß –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–ª–∞–Ω –∏–∑ {len(steps)} —à–∞–≥–æ–≤...")
        
        for i, step in enumerate(steps):
            try:
                corrected_step, correction_msg = self._validate_step(step, i + 1)
                corrected_steps.append(corrected_step)
                
                if correction_msg:
                    corrections_made.append(correction_msg)
                    print(f"   {correction_msg}")
                    
            except Exception as e:
                error_msg = f"–®–∞–≥ {i+1}: {str(e)}"
                validation_errors.append(error_msg)
                print(f"   ‚ùå {error_msg}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback —à–∞–≥
                corrected_steps.append({
                    "step": i + 1,
                    "action": step.get("action", "–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"),
                    "tool": "file_manager",  # –°–∞–º—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                    "params": step.get("params", {})
                })
                corrections_made.append(f"–®–∞–≥ {i+1}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω file_manager")
        
        is_valid = len(validation_errors) == 0
        
        if is_valid and not corrections_made:
            print(f"‚úÖ –í—Å–µ {len(steps)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤–∞–ª–∏–¥–Ω—ã")
        elif corrections_made:
            print(f"üîß –í–Ω–µ—Å–µ–Ω–æ {len(corrections_made)} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        else:
            print(f"‚ùå –ü–ª–∞–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç {len(validation_errors)} –æ—à–∏–±–æ–∫")
        
        return ToolValidationResult(
            is_valid=is_valid,
            corrected_steps=corrected_steps,
            corrections_made=corrections_made,
            validation_errors=validation_errors
        )
    
    def _validate_step(self, step: Dict[str, Any], step_num: int) -> tuple[Dict[str, Any], str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞
        
        Returns:
            (corrected_step, correction_message)
        """
        original_tool = step.get("tool", "")
        
        # –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        cleaned_tool = self._clean_tool_name(original_tool)
        
        # –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        correct_tool = self._find_correct_tool(cleaned_tool, step)
        
        # –°–æ–∑–¥–∞—ë–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —à–∞–≥
        corrected_step = step.copy()
        corrected_step["tool"] = correct_tool
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        correction_msg = ""
        if original_tool != correct_tool:
            correction_msg = f"üîß –®–∞–≥ {step_num}: '{original_tool}' ‚Üí '{correct_tool}'"
        
        return corrected_step, correction_msg
    
    def _clean_tool_name(self, tool_name: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if not tool_name:
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç LLM
        cleaned = tool_name.strip()
        cleaned = cleaned.replace("`", "").replace(".", "").replace('"', '').replace("'", "")
        cleaned = cleaned.replace("(", "").replace(")", "").replace("[", "").replace("]", "")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        return cleaned.lower().strip()
    
    def _find_correct_tool(self, cleaned_tool: str, step: Dict[str, Any]) -> str:
        """–ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        # 1. –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        if cleaned_tool in self.VALID_TOOLS:
            return cleaned_tool
        
        # 2. –ü–æ–∏—Å–∫ –≤ –º–∞–ø–ø–∏–Ω–≥–∞—Ö
        if cleaned_tool in self.tool_mappings:
            return self.tool_mappings[cleaned_tool]
        
        # 3. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ –¥–µ–π—Å—Ç–≤–∏—é –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        return self._semantic_tool_detection(cleaned_tool, step)
    
    def _semantic_tool_detection(self, tool_name: str, step: Dict[str, Any]) -> str:
        """–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —à–∞–≥–∞"""
        action = step.get("action", "").lower()
        params = step.get("params", {})
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if any(keyword in action for keyword in ["—Å–æ–∑–¥–∞—Ç—å", "—Ñ–∞–π–ª", "–∑–∞–ø–∏—Å–∞—Ç—å", "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "—Ç–µ–∫—Å—Ç"]):
            # –°–º–æ—Ç—Ä–∏–º –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
            filename = params.get("filename", "")
            if filename.endswith((".py", ".html", ".js", ".css", ".json")):
                return "code_generator"
            else:
                return "file_manager"
                
        elif any(keyword in action for keyword in ["–∫–æ–¥", "—Å–∫—Ä–∏–ø—Ç", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "html", "css", "js"]):
            return "code_generator"
            
        elif any(keyword in action for keyword in ["–ø–æ–∏—Å–∫", "–Ω–∞–π—Ç–∏", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Å–∞–π—Ç", "–∞–Ω–∞–ª–∏–∑", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"]):
            return "web_client"
            
        elif any(keyword in action for keyword in ["–≤—ã–ø–æ–ª–Ω–∏—Ç—å", "–∫–æ–º–∞–Ω–¥–∞", "—Å–∏—Å—Ç–µ–º–∞", "–∑–∞–ø—É—Å—Ç–∏—Ç—å"]):
            return "system_tools"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if "filename" in params:
            filename = params["filename"]
            if filename.endswith((".py", ".html", ".js", ".css", ".json")):
                return "code_generator"
            else:
                return "file_manager"
        
        if "query" in params or "url" in params:
            return "web_client"
        
        if "command" in params:
            return "system_tools"
        
        # Fallback: —Å–∞–º—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        return "file_manager"


def create_tool_validator() -> ToolValidatorAgent:
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    return ToolValidatorAgent()
