#!/usr/bin/env python3
"""
üöÄ –û–¢–õ–ê–î–ö–ê: super_system_tool
"""

import time
import json
import tempfile
import os

try:
    from kittycore.tools.super_system_tool import SuperSystemTool
    IMPORT_OK = True
    print("‚úÖ –ò–º–ø–æ—Ä—Ç super_system_tool —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ –û–®–ò–ë–ö–ê: {e}")
    IMPORT_OK = False

def test_system_info():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüñ•Ô∏è –¢–µ—Å—Ç–∏—Ä—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    tool = SuperSystemTool()
    
    result = tool.execute(action="get_system_info")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            print(f"üì¶ –†–∞–∑–º–µ—Ä: {len(str(data))} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if isinstance(data, dict):
                expected_fields = ['platform', 'hostname', 'cpu_count', 'memory_total_gb', 'architecture']
                found_fields = [field for field in expected_fields if field in data]
                print(f"üîë –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: {len(found_fields)}/{len(expected_fields)}")
                print(f"   –ü–æ–ª—è: {found_fields}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if 'platform' in data:
                    print(f"   Platform: {data['platform']}")
                if 'cpu_count' in data:
                    print(f"   CPU count: {data['cpu_count']}")
    
    return result

def test_resource_usage():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüìä –¢–µ—Å—Ç–∏—Ä—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...")
    tool = SuperSystemTool()
    
    result = tool.execute(action="get_resource_usage")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success') and result.success:
        data = result.data
        if isinstance(data, dict):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            metrics = ['cpu_percent', 'memory_percent', 'disk_usage_percent']
            for metric in metrics:
                if metric in data:
                    value = data[metric]
                    print(f"   {metric}: {value}%")
    
    return result

def test_file_operations():
    """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüìÅ –¢–µ—Å—Ç–∏—Ä—É—é —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...")
    tool = SuperSystemTool()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_content = "Test content from SuperSystemTool"
    
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as f:
        temp_path = f.name
        f.write(temp_content)
    
    try:
        # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        read_result = tool.execute(
            action="safe_file_read",
            path=temp_path
        )
        
        print(f"üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {read_result.success if hasattr(read_result, 'success') else 'ERROR'}")
        if hasattr(read_result, 'success') and read_result.success:
            data = read_result.data
            if isinstance(data, dict) and 'content' in data:
                content = data['content']
                print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {repr(content[:50])}")
                if temp_content in content:
                    print("‚úÖ –†–µ–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞–π–¥–µ–Ω–æ!")
        
        # –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
        info_result = tool.execute(
            action="file_info",
            path=temp_path
        )
        
        print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: {info_result.success if hasattr(info_result, 'success') else 'ERROR'}")
        if hasattr(info_result, 'success') and info_result.success:
            data = info_result.data
            if isinstance(data, dict):
                size = data.get('size', 0)
                print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size} –±–∞–π—Ç")
        
        return read_result
        
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(temp_path)
        except:
            pass

def test_processes():
    """–¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö...")
    tool = SuperSystemTool()
    
    result = tool.execute(
        action="get_processes",
        limit=5
    )
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success') and result.success:
        data = result.data
        if isinstance(data, dict) and 'processes' in data:
            processes = data['processes']
            print(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(processes)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            if processes and len(processes) > 0:
                first_proc = processes[0]
                if isinstance(first_proc, dict):
                    print(f"   –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å: PID={first_proc.get('pid', '–ù–ï–¢')}, name={first_proc.get('name', '–ù–ï–¢')}")
    
    return result

def is_result_honest(result, test_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if not result:
        print(f"‚ùå {test_name}: –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return False
    
    if not hasattr(result, 'success'):
        print(f"‚ùå {test_name}: –ù–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ success")
        return False
    
    if not result.success:
        print(f"‚ùå {test_name}: success=False")
        if hasattr(result, 'error'):
            print(f"   –û—à–∏–±–∫–∞: {result.error}")
        return False
    
    if not hasattr(result, 'data') or not result.data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    data = result.data
    data_str = str(data)
    data_size = len(data_str)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–µ–π–∫–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    fake_patterns = [
        "super_system: —É—Å–ø–µ—à–Ω–æ",
        "–¥–µ–º–æ —Å–∏—Å—Ç–µ–º–∞",
        "–∑–∞–≥–ª—É—à–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    ]
    
    for pattern in fake_patterns:
        if pattern.lower() in data_str.lower():
            print(f"‚ùå {test_name}: –ù–∞–π–¥–µ–Ω —Ñ–µ–π–∫–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    system_indicators = [
        "linux", "windows", "cpu_count", "memory", "disk", "platform", 
        "hostname", "architecture", "process", "pid", "size", "content"
    ]
    
    has_system_data = any(indicator.lower() in data_str.lower() for indicator in system_indicators)
    
    if not has_system_data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    if data_size < 50:
        print(f"‚ùå {test_name}: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
        return False
    
    print(f"‚úÖ {test_name}: –ß–ï–°–¢–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
    return True

def main():
    print("üöÄ –û–¢–õ–ê–î–ö–ê: super_system_tool")
    
    if not IMPORT_OK:
        return
    
    results = {}
    
    # –¢–µ—Å—Ç—ã
    tests = [
        ("system_info", test_system_info),
        ("resource_usage", test_resource_usage),
        ("file_operations", test_file_operations),
        ("processes", test_processes)
    ]
    
    for test_name, test_func in tests:
        print(f"\n{'='*30}")
        print(f"–¢–ï–°–¢: {test_name}")
        try:
            result = test_func()
            results[test_name] = is_result_honest(result, test_name)
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ –û–®–ò–ë–ö–ê: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*50}")
    print("üìä –ò–¢–û–ì–ò:")
    
    total_tests = len(results)
    passed_tests = sum(1 for success in results.values() if success)
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
    
    print(f"\nüìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if success_rate >= 75 else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")

if __name__ == "__main__":
    main() 