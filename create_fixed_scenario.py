#!/usr/bin/env python3
import requests
import json
import sys

def create_fixed_scenario():
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    scenario = {
        "name": "LLM-–∞–≥–µ–Ω—Ç –±–∞–∑–æ–≤—ã–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)",
        "steps": [
            {
                "id": "welcome",
                "type": "telegram_message",
                "message": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–≥–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å.",
                "next_step": "wait_for_query"
            },
            {
                "id": "wait_for_query",
                "type": "input",
                "prompt": "–í–∞—à –∑–∞–ø—Ä–æ—Å:",
                "output_var": "user_query",
                "next_step": "process_query"
            },
            {
                "id": "process_query",
                "type": "llm_query",
                "prompt": "{user_query}",
                "system_prompt": "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ, —Ç–æ—á–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤—Å–µ–≥–¥–∞ —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, —á–µ—Å—Ç–Ω–æ –ø—Ä–∏–∑–Ω–∞–π —ç—Ç–æ.",
                "model": "deepseek/deepseek-chat-v3-0324:free",
                "temperature": 0.7,
                "max_tokens": 500,
                "output_var": "llm_response",
                "save_text_only": True,
                "next_step": "send_response"
            },
            {
                "id": "send_response",
                "type": "telegram_message",
                "message": "{llm_response}",
                "next_step": "ask_followup"
            },
            {
                "id": "ask_followup",
                "type": "telegram_message",
                "message": "\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å?",
                "next_step": "wait_for_followup"
            },
            {
                "id": "wait_for_followup",
                "type": "input",
                "prompt": "–í–∞—à –æ—Ç–≤–µ—Ç (–¥–∞/–Ω–µ—Ç):",
                "output_var": "user_query_followup",
                "next_step": "followup_branch"
            },
            {
                "id": "followup_branch",
                "type": "branch",
                "branches": [
                    {
                        "condition": "{user_query_followup == '–¥–∞' or user_query_followup == '–î–∞' or user_query_followup == '–î–ê'}",
                        "next_step": "wait_for_query"
                    },
                    {
                        "condition": "default",
                        "next_step": "end_conversation"
                    }
                ]
            },
            {
                "id": "end_conversation",
                "type": "telegram_message",
                "message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å."
            }
        ],
        "description": "–ë–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ LLM. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏."
    }
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    response = requests.post(
        "http://localhost:8000/scenarios/",
        json=scenario
    )
    
    if response.status_code != 201:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {response.status_code}")
        return None
    
    new_scenario = response.json()
    print(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å ID: {new_scenario['_id']}")
    return new_scenario['_id']

if __name__ == "__main__":
    scenario_id = create_fixed_scenario()
    if scenario_id:
        print("–¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π:")
        print(f"./update_agent_scenario.py <agent_id> {scenario_id}") 