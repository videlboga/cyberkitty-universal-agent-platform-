#!/usr/bin/env python3
"""
üß™ TELEGRAM API –¢–ï–°–¢–´
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Telegram —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Universal Agent Platform —á–µ—Ä–µ–∑ API.
–ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!
"""

import pytest
import requests
import json
import time
from typing import Dict, Any
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logger.add(
    "logs/telegram_api_tests.log",
    rotation="10 MB",
    retention="3 days", 
    compression="gz",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {name}:{function}:{line} | {message}",
    level="INFO"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_BASE_URL = "http://localhost:8080"
API_V1_URL = f"{API_BASE_URL}/api/v1/simple"

class TestTelegramIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram."""
    
    def test_telegram_send_message_step(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —à–∞–≥."""
        logger.info("üß™ –¢–µ—Å—Ç: –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        payload = {
            "step": {
                "id": "telegram_message",
                "type": "telegram_send_message",
                "params": {
                    "chat_id": "123456789",
                    "text": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ API —Ç–µ—Å—Ç–∞",
                    "parse_mode": "HTML"
                }
            },
            "context": {
                "test_mode": True,
                "telegram_test": True
            }
        }
        
        response = requests.post(
            f"{API_V1_URL}/execute",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        assert response.status_code == 200
        data = response.json()
        
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–æ
        assert data["success"] is True
        assert "context" in data
        
        logger.info("‚úÖ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    
    def test_telegram_send_buttons_step(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ —à–∞–≥."""
        logger.info("üß™ –¢–µ—Å—Ç: –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram –∫–Ω–æ–ø–æ–∫")
        
        payload = {
            "step": {
                "id": "telegram_buttons",
                "type": "telegram_send_buttons",
                "params": {
                    "chat_id": "123456789",
                    "text": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
                    "buttons": [
                        [{"text": "–û–ø—Ü–∏—è 1", "callback_data": "option_1"}],
                        [{"text": "–û–ø—Ü–∏—è 2", "callback_data": "option_2"}]
                    ]
                }
            },
            "context": {
                "test_mode": True,
                "telegram_test": True
            }
        }
        
        response = requests.post(
            f"{API_V1_URL}/execute",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        assert response.status_code == 200
        data = response.json()
        
        assert data["success"] is True
        assert "context" in data
        
        logger.info("‚úÖ Telegram –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
    
    def test_telegram_polling_start(self):
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ Telegram polling."""
        logger.info("üß™ –¢–µ—Å—Ç: –ó–∞–ø—É—Å–∫ Telegram polling")
        
        response = requests.post(
            f"{API_V1_URL}/telegram/start-polling",
            headers={"Content-Type": "application/json"}
        )
        
        # –ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if response.status_code == 200:
            data = response.json()
            assert "success" in data
            logger.info("‚úÖ Telegram polling –∑–∞–ø—É—â–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
    
    def test_telegram_polling_stop(self):
        """–¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram polling."""
        logger.info("üß™ –¢–µ—Å—Ç: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram polling")
        
        response = requests.post(
            f"{API_V1_URL}/telegram/stop-polling",
            headers={"Content-Type": "application/json"}
        )
        
        # –ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –µ—Å–ª–∏ polling –Ω–µ –∑–∞–ø—É—â–µ–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if response.status_code == 200:
            data = response.json()
            assert "success" in data
            logger.info("‚úÖ Telegram polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è Telegram polling –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω")


class TestTelegramScenarios:
    """–¢–µ—Å—Ç—ã Telegram —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
    
    def test_telegram_registration_scenario(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Telegram."""
        logger.info("üß™ –¢–µ—Å—Ç: –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Telegram")
        
        payload = {
            "user_id": "telegram_user_test",
            "chat_id": "telegram_chat_test",
            "context": {
                "test_mode": True,
                "user_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "registration_started": True
            },
            "scenario_id": "telegram_registration"
        }
        
        response = requests.post(
            f"{API_V1_URL}/channels/telegram_registration_test/execute",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        assert response.status_code == 200
        data = response.json()
        
        assert data["success"] is True
        assert "final_context" in data
        assert data["final_context"]["registration_started"] is True
        
        logger.info(f"‚úÖ Telegram —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {data['scenario_id']}")
    
    def test_telegram_callback_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram callback."""
        logger.info("üß™ –¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram callback")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º callback –æ—Ç –∫–Ω–æ–ø–∫–∏
        payload = {
            "user_id": "telegram_user_callback",
            "chat_id": "telegram_chat_callback",
            "context": {
                "test_mode": True,
                "callback_data": "reg_user",
                "message_id": "123",
                "from_callback": True
            }
        }
        
        response = requests.post(
            f"{API_V1_URL}/channels/telegram_callback_test/execute",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        assert response.status_code == 200
        data = response.json()
        
        assert data["success"] is True
        assert "final_context" in data
        
        logger.info("‚úÖ Telegram callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    
    def test_telegram_message_with_variables(self):
        """–¢–µ—Å—Ç Telegram —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏."""
        logger.info("üß™ –¢–µ—Å—Ç: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
        
        payload = {
            "step": {
                "id": "telegram_message_vars",
                "type": "telegram_send_message",
                "params": {
                    "chat_id": "{chat_id}",
                    "text": "–ü—Ä–∏–≤–µ—Ç, {user_name}! –í–∞—à ID: {user_id}",
                    "parse_mode": "HTML"
                }
            },
            "context": {
                "test_mode": True,
                "chat_id": "987654321",
                "user_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "user_id": "user_123"
            }
        }
        
        response = requests.post(
            f"{API_V1_URL}/execute",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        assert response.status_code == 200
        data = response.json()
        
        assert data["success"] is True
        
        logger.info("‚úÖ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")


class TestTelegramErrorHandling:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Telegram."""
    
    def test_telegram_invalid_chat_id(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ chat_id."""
        logger.info("üß™ –¢–µ—Å—Ç: –ù–µ–≤–µ—Ä–Ω—ã–π chat_id")
        
        payload = {
            "step": {
                "id": "telegram_invalid_chat",
                "type": "telegram_send_message",
                "params": {
                    "chat_id": "invalid_chat_id",
                    "text": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                }
            },
            "context": {
                "test_mode": True
            }
        }
        
        response = requests.post(
            f"{API_V1_URL}/execute",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        assert response.status_code == 200
        data = response.json()
        assert data["success"] is True
        
        logger.info("‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–π chat_id –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_telegram_missing_parameters(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        logger.info("üß™ –¢–µ—Å—Ç: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram")
        
        payload = {
            "step": {
                "id": "telegram_missing_params",
                "type": "telegram_send_message",
                "params": {
                    # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_id –∏ text
                }
            },
            "context": {
                "test_mode": True
            }
        }
        
        response = requests.post(
            f"{API_V1_URL}/execute",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        # –î–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å gracefully
        assert response.status_code in [200, 500]
        
        if response.status_code == 500:
            data = response.json()
            assert data["success"] is False
            logger.info("‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å –æ—à–∏–±–∫–æ–π")
        else:
            logger.info("‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã gracefully")


class TestTelegramPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Telegram."""
    
    def test_multiple_telegram_messages(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö Telegram —Å–æ–æ–±—â–µ–Ω–∏–π."""
        logger.info("üß™ –¢–µ—Å—Ç: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        import concurrent.futures
        
        def send_telegram_message(message_id: int) -> Dict[str, Any]:
            payload = {
                "step": {
                    "id": f"telegram_message_{message_id}",
                    "type": "telegram_send_message",
                    "params": {
                        "chat_id": f"test_chat_{message_id}",
                        "text": f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{message_id}"
                    }
                },
                "context": {
                    "test_mode": True,
                    "message_id": message_id
                }
            }
            
            start_time = time.time()
            response = requests.post(
                f"{API_V1_URL}/execute",
                json=payload,
                headers={"Content-Type": "application/json"}
            )
            end_time = time.time()
            
            return {
                "message_id": message_id,
                "status_code": response.status_code,
                "response_time": end_time - start_time,
                "success": response.status_code == 200
            }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            futures = [executor.submit(send_telegram_message, i) for i in range(10)]
            results = [future.result() for future in concurrent.futures.as_completed(futures)]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_messages = [r for r in results if r["success"]]
        avg_response_time = sum(r["response_time"] for r in successful_messages) / len(successful_messages)
        
        assert len(successful_messages) >= 8  # –ú–∏–Ω–∏–º—É–º 8 –∏–∑ 10 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
        assert avg_response_time < 2.0  # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥
        
        logger.info(f"‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {len(successful_messages)}/10 —É—Å–ø–µ—à–Ω—ã—Ö, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_response_time:.2f}—Å")


class TestTelegramIntegrationScenarios:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ Telegram."""
    
    def test_telegram_full_conversation_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ Telegram."""
        logger.info("üß™ –¢–µ—Å—Ç: –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ Telegram")
        
        # –®–∞–≥ 1: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        step1_payload = {
            "user_id": "conversation_user",
            "chat_id": "conversation_chat",
            "context": {
                "test_mode": True,
                "user_name": "–¢–µ—Å—Ç–æ–≤—ã–π –°–æ–±–µ—Å–µ–¥–Ω–∏–∫",
                "conversation_started": True
            },
            "scenario_id": "demo"
        }
        
        response1 = requests.post(
            f"{API_V1_URL}/channels/conversation_test/execute",
            json=step1_payload,
            headers={"Content-Type": "application/json"}
        )
        
        assert response1.status_code == 200
        data1 = response1.json()
        assert data1["success"] is True
        
        # –®–∞–≥ 2: –°–∏–º—É–ª–∏—Ä—É–µ–º callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        step2_payload = {
            "user_id": "conversation_user",
            "chat_id": "conversation_chat",
            "context": {
                **data1["final_context"],
                "callback_data": "test_switch",
                "from_callback": True
            }
        }
        
        response2 = requests.post(
            f"{API_V1_URL}/channels/conversation_test/execute",
            json=step2_payload,
            headers={"Content-Type": "application/json"}
        )
        
        assert response2.status_code == 200
        data2 = response2.json()
        assert data2["success"] is True
        
        logger.info("‚úÖ –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ Telegram –≤—ã–ø–æ–ª–Ω–µ–Ω")
    
    def test_telegram_scenario_switching(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ Telegram."""
        logger.info("üß™ –¢–µ—Å—Ç: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ Telegram")
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –æ–¥–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        payload = {
            "user_id": "switch_user",
            "chat_id": "switch_chat",
            "context": {
                "test_mode": True,
                "switch_to_scenario": "telegram_registration"
            },
            "scenario_id": "demo"
        }
        
        response = requests.post(
            f"{API_V1_URL}/channels/switch_test/execute",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        assert response.status_code == 200
        data = response.json()
        assert data["success"] is True
        
        logger.info("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    pytest.main([__file__, "-v", "--tb=short"]) 