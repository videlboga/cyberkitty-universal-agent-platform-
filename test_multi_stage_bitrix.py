#!/usr/bin/env python3
"""
üöÄ –¢–ï–°–¢ –ú–ù–û–ì–û–≠–¢–ê–ü–ù–û–ì–û –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø KITTYCORE 3.0

–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É Agile –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24
"""

import asyncio
import json
from datetime import datetime
from kittycore.agents.intellectual_agent import IntellectualAgent

async def test_multi_stage_bitrix_analysis():
    """–¢–µ—Å—Ç –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24"""
    
    print("üöÄ === –¢–ï–°–¢ –ú–ù–û–ì–û–≠–¢–ê–ü–ù–û–ì–û –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø KITTYCORE 3.0 ===")
    print("üéØ –ó–∞–¥–∞—á–∞: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ë–∏—Ç—Ä–∏–∫—Å24 —Å Agile –ø–æ–¥—Ö–æ–¥–æ–º")
    print()
    
    # –ó–∞–¥–∞—á–∞ —Å –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    task_description = """–ü—Ä–æ–≤–µ–¥–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ë–∏—Ç—Ä–∏–∫—Å24. 
    
–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ò—Å—Å–ª–µ–¥—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ (–Ω–µ —Å–∞–º –ë–∏—Ç—Ä–∏–∫—Å24)
2. –ù–∞–π–¥–∏ —Ç–æ–ø-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, —Ü–µ–Ω—ã, –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
4. –û—Ü–µ–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π  
5. –í—ã—è–≤–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ç–∑—ã–≤–∞—Ö
6. –°–æ–∑–¥–∞–π 3 –ö–û–ù–ö–†–ï–¢–ù–´–• –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –Ω–æ–≤—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX
7. –ö–∞–∂–¥—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
8. –î–æ–±–∞–≤—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤"""
    
    # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞
    subtask = {
        "description": task_description,
        "complexity": "complex",  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        "expected_output": "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ + 3 —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞"
    }
    
    agent = IntellectualAgent(role="market_analyst", subtask=subtask)
    
    print("üß† === –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß–ò ===")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
    analysis = await agent._analyze_task_with_llm(task_description)
    
    # üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞
    analysis['complexity'] = 'complex'  # –§–æ—Ä—Å–∏—Ä—É–µ–º –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    print(f"üìä –¢–∏–ø –∑–∞–¥–∞—á–∏: {analysis.get('task_type', 'unknown')}")
    print(f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis.get('complexity', 'unknown')} (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)")
    print(f"üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {analysis.get('chosen_tools', [])}")
    print()
    
    print("üöÄ === –°–û–ó–î–ê–ù–ò–ï –ú–ù–û–ì–û–≠–¢–ê–ü–ù–û–ì–û –ü–õ–ê–ù–ê ===")
    
    # –°–æ–∑–¥–∞—ë–º –ø–ª–∞–Ω
    plan = await agent._create_execution_plan(task_description, analysis)
    plan_type = plan.get("type", "unknown")
    
    if plan_type == "multi_stage":
        stages = plan.get("stages", [])
        print(f"üéâ –ú–ù–û–ì–û–≠–¢–ê–ü–ù–´–ô –ü–õ–ê–ù —Å–æ–∑–¥–∞–Ω: {len(stages)} —ç—Ç–∞–ø–æ–≤")
        
        for i, stage in enumerate(stages, 1):
            stage_type = stage.get("stage_type", "unknown")
            action = stage.get("action", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            tool = stage.get("tool", "unknown")
            print(f"   –≠–¢–ê–ü {i}: {stage_type.upper()} | {action[:50]}... | {tool}")
    else:
        print(f"‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω —Ç–∏–ø–∞: {plan_type}")
    
    print()
    print("‚ö° === –í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–õ–ê–ù–ê ===")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω
    start_time = datetime.now()
    result = await agent._execute_plan(plan, task_description)
    end_time = datetime.now()
    
    execution_time = (end_time - start_time).total_seconds()
    
    print()
    print("üìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result.get('success', False)}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å")
    print(f"üìã –¢–∏–ø –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.get('execution_type', 'unknown')}")
    
    if result.get('execution_type') == 'multi_stage':
        stage_results = result.get('stage_results', {})
        print(f"üöÄ –≠—Ç–∞–ø–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(stage_results)}")
        
        for stage_type, stage_result in stage_results.items():
            success = stage_result.get('success', False)
            files = stage_result.get('created_files', [])
            print(f"   {stage_type.upper()}: {'‚úÖ' if success else '‚ùå'} ({len(files)} —Ñ–∞–π–ª–æ–≤)")
    
    # –§–∞–π–ª—ã
    created_files = result.get('created_files', [])
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(created_files)}")
    
    if created_files:
        print("\nüìÑ === –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´ ===")
        for i, file_path in enumerate(created_files[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"   {i}. {file_path}")
        
        if len(created_files) > 10:
            print(f"   ... –∏ –µ—â—ë {len(created_files) - 10} —Ñ–∞–π–ª–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    print()
    print("üîç === –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===")
    
    avg_quality = 0
    if created_files:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        import os
        quality_score = 0
        total_checks = 0
        
        for file_path in created_files[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
            if os.path.exists(file_path):
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    total_checks += 1
                    file_score = 0
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    if len(content) > 100:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä—ë–º
                        file_score += 1
                    
                    if any(keyword in content.lower() for keyword in ['–±–∏—Ç—Ä–∏–∫—Å', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–º–∞—Ä–∫–µ—Ç']):
                        file_score += 1  # –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ç–µ–º–µ
                    
                    if any(keyword in content.lower() for keyword in ['—Ü–µ–Ω–∞', '—Ä–µ–π—Ç–∏–Ω–≥', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏']):
                        file_score += 1  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    
                    quality_score += file_score / 3  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-1
                    
                    print(f"   üìÑ {os.path.basename(file_path)}: {file_score}/3 –±–∞–ª–ª–æ–≤ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        
        if total_checks > 0:
            avg_quality = quality_score / total_checks
            print(f"\nüéØ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {avg_quality:.2f}/1.0")
            
            if avg_quality >= 0.8:
                print("üèÜ –û–¢–õ–ò–ß–ù–û–ï –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
            elif avg_quality >= 0.6:
                print("‚úÖ –•–û–†–û–®–ï–ï –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            elif avg_quality >= 0.4:
                print("‚ö†Ô∏è  –°–†–ï–î–ù–ï–ï –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            else:
                print("‚ùå –ù–ò–ó–ö–û–ï –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    print()
    print("üéä === –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ú–ù–û–ì–û–≠–¢–ê–ü–ù–û–ì–û –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø ===")
    
    if plan_type == "multi_stage" and result.get('success'):
        print("üöÄ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –£–°–ü–ï–•!")
        print("‚úÖ –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ Agile –ø–æ–¥—Ö–æ–¥ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã")
    elif plan_type == "multi_stage":
        print("üîß –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•")
        print("‚úÖ –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
        print("‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("‚ö†Ô∏è  –û–ë–´–ß–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï")
        print("‚ùå –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π –ø–ª–∞–Ω –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
    report = {
        "timestamp": datetime.now().isoformat(),
        "task": task_description,
        "analysis": analysis,
        "plan_type": plan_type,
        "execution_result": result,
        "execution_time": execution_time,
        "created_files": created_files,
        "quality_assessment": {
            "avg_quality": avg_quality,
            "total_files": len(created_files),
            "plan_type_success": plan_type == "multi_stage"
        }
    }
    
    with open("multi_stage_test_results.json", "w", encoding="utf-8") as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: multi_stage_test_results.json")
    
    return result

if __name__ == "__main__":
    asyncio.run(test_multi_stage_bitrix_analysis()) 