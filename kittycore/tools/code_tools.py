"""
üíª CodeTools - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º –≤ KittyCore 3.0

–†–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ —à–∞–±–ª–æ–Ω–∞–º
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
- –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã
"""

import subprocess
import sys
import io
import os
import tempfile
from pathlib import Path
from typing import Dict, Any, List, Optional
from .base_tool import Tool, ToolResult


class PythonExecutionTool(Tool):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞"""
    
    def __init__(self):
        super().__init__(
            name="python_execution",
            description="–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"
        )
        self.safe_builtins = {
            'print': print,
            'len': len,
            'range': range,
            'str': str,
            'int': int,
            'float': float,
            'bool': bool,
            'list': list,
            'dict': dict,
            'tuple': tuple,
            'set': set,
            'abs': abs,
            'max': max,
            'min': min,
            'sum': sum,
            'sorted': sorted,
            'enumerate': enumerate,
            'zip': zip,
            'round': round,
            'type': type,
        }
    
    def execute(self, code: str, timeout: int = 10, capture_output: bool = True) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å Python –∫–æ–¥"""
        try:
            if capture_output:
                return self._execute_with_capture(code, timeout)
            else:
                return self._execute_direct(code, timeout)
                
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
            )
    
    def _execute_with_capture(self, code: str, timeout: int) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å –∑–∞—Ö–≤–∞—Ç–æ–º –≤—ã–≤–æ–¥–∞"""
        # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º stdout –∏ stderr
        old_stdout = sys.stdout
        old_stderr = sys.stderr
        stdout_capture = io.StringIO()
        stderr_capture = io.StringIO()
        
        try:
            sys.stdout = stdout_capture
            sys.stderr = stderr_capture
            
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            safe_globals = {
                '__builtins__': self.safe_builtins,
                '__name__': '__main__'
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
            exec(code, safe_globals)
            
            stdout_output = stdout_capture.getvalue()
            stderr_output = stderr_capture.getvalue()
            
            if stderr_output:
                return ToolResult(
                    success=False,
                    error=stderr_output,
                    data={"stdout": stdout_output}
                )
            
            return ToolResult(
                success=True,
                data={
                    "output": stdout_output,
                    "execution_method": "captured"
                }
            )
            
        except Exception as e:
            stderr_output = stderr_capture.getvalue()
            return ToolResult(
                success=False,
                error=str(e),
                data={"stderr": stderr_output}
            )
        finally:
            sys.stdout = old_stdout
            sys.stderr = old_stderr
    
    def _execute_direct(self, code: str, timeout: int) -> ToolResult:
        """–ü—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –∑–∞—Ö–≤–∞—Ç–∞"""
        try:
            safe_globals = {
                '__builtins__': self.safe_builtins,
                '__name__': '__main__'
            }
            
            exec(code, safe_globals)
            
            return ToolResult(
                success=True,
                data={
                    "message": "–ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
                    "execution_method": "direct"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=str(e)
            )
    
    def get_schema(self) -> Dict[str, Any]:
        return {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Python –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                },
                "timeout": {
                    "type": "integer",
                    "description": "–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
                    "default": 10,
                    "minimum": 1,
                    "maximum": 60
                },
                "capture_output": {
                    "type": "boolean",
                    "description": "–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –ª–∏ –≤—ã–≤–æ–¥",
                    "default": True
                }
            },
            "required": ["code"]
        }


class CodeGenerator(Tool):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ —à–∞–±–ª–æ–Ω–∞–º"""
    
    def __init__(self):
        super().__init__(
            name="code_generator",
            description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ –≥–æ—Ç–æ–≤—ã–º —à–∞–±–ª–æ–Ω–∞–º"
        )
        self.templates = {
            "python_script": self._python_script_template,
            "html_page": self._html_page_template,
            "json_config": self._json_config_template,
            "bash_script": self._bash_script_template,
            "python_function": self._python_function_template
        }
    
    def execute(self, template_type: str, filename: str = None, **kwargs) -> ToolResult:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø–æ —à–∞–±–ª–æ–Ω—É"""
        try:
            if template_type not in self.templates:
                return ToolResult(
                    success=False,
                    error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω: {template_type}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {list(self.templates.keys())}"
                )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            generator = self.templates[template_type]
            code = generator(**kwargs)
            
            result_data = {
                "template_type": template_type,
                "code": code,
                "length": len(code)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
            if filename:
                try:
                    Path(filename).parent.mkdir(parents=True, exist_ok=True)
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(code)
                    
                    # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –µ—Å–ª–∏ —ç—Ç–æ —Å–∫—Ä–∏–ø—Ç
                    if template_type in ["python_script", "bash_script"]:
                        os.chmod(filename, 0o755)
                    
                    result_data["saved_to"] = filename
                    result_data["executable"] = template_type in ["python_script", "bash_script"]
                    
                except Exception as e:
                    return ToolResult(
                        success=False,
                        error=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}",
                        data=result_data
                    )
            
            return ToolResult(
                success=True,
                data=result_data
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
            )
    
    def _python_script_template(self, name: str = "script", description: str = "Python script", **kwargs) -> str:
        return f'''#!/usr/bin/env python3
"""
{name} - {description}

–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ KittyCore 3.0
"""

import sys
import os


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—â–µ–Ω: {name}")
    print("üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–¥–µ—Å—å
    
    print("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main()
'''
    
    def _html_page_template(self, title: str = "–°—Ç—Ä–∞–Ω–∏—Ü–∞", content: str = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ", **kwargs) -> str:
        return f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
            color: #333;
        }}
        .header {{
            text-align: center;
            padding: 20px 0;
            border-bottom: 1px solid #eee;
            margin-bottom: 30px;
        }}
        .content {{
            margin: 20px 0;
        }}
        .footer {{
            text-align: center;
            margin-top: 40px;
            padding: 20px 0;
            border-top: 1px solid #eee;
            color: #666;
            font-size: 14px;
        }}
    </style>
</head>
<body>
    <div class="header">
        <h1>{title}</h1>
    </div>
    
    <div class="content">
        {content}
    </div>
    
    <div class="footer">
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ KittyCore 3.0 üê±
    </div>
</body>
</html>'''

    def _json_config_template(self, name: str = "config", **kwargs) -> str:
        import json
        config = {
            "name": name,
            "version": "1.0.0",
            "description": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ KittyCore 3.0",
            "created_by": "KittyCore",
            "settings": kwargs
        }
        return json.dumps(config, indent=2, ensure_ascii=False)
    
    def _bash_script_template(self, name: str = "script", description: str = "Bash script", **kwargs) -> str:
        return f'''#!/bin/bash

# {name} - {description}
# –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ KittyCore 3.0

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "üöÄ –ó–∞–ø—É—â–µ–Ω: {name}"
echo "üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"

# TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –∑–¥–µ—Å—å

echo "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
'''

    def _python_function_template(self, name: str = "my_function", description: str = "–§—É–Ω–∫—Ü–∏—è", **kwargs) -> str:
        return f'''def {name}():
    """
    {description}
    
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É
    return "–§—É–Ω–∫—Ü–∏—è {name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    result = {name}()
    print(result)
'''
    
    def get_schema(self) -> Dict[str, Any]:
        return {
            "type": "object",
            "properties": {
                "template_type": {
                    "type": "string",
                    "enum": list(self.templates.keys()),
                    "description": "–¢–∏–ø —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
                },
                "filename": {
                    "type": "string", 
                    "description": "–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                },
                "name": {
                    "type": "string",
                    "description": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞",
                    "default": "generated"
                },
                "description": {
                    "type": "string",
                    "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞",
                    "default": "–°–æ–∑–¥–∞–Ω–æ KittyCore 3.0"
                },
                "title": {
                    "type": "string",
                    "description": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–ª—è HTML)",
                    "default": "–°—Ç—Ä–∞–Ω–∏—Ü–∞"
                },
                "content": {
                    "type": "string",
                    "description": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–¥–ª—è HTML)",
                    "default": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                }
            },
            "required": ["template_type"]
        }


class CodeValidator(Tool):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∫–æ–¥–∞"""
    
    def __init__(self):
        super().__init__(
            name="code_validator",
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python –∫–æ–¥–∞"
        )
    
    def execute(self, code: str, language: str = "python") -> ToolResult:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–¥–∞"""
        try:
            if language.lower() == "python":
                return self._validate_python(code)
            else:
                return ToolResult(
                    success=False,
                    error=f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Python, –ø–æ–ª—É—á–µ–Ω: {language}"
                )
                
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
            )
    
    def _validate_python(self, code: str) -> ToolResult:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Python —Å–∏–Ω—Ç–∞–∫—Å–∏—Å"""
        try:
            # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            compile(code, '<string>', 'exec')
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            lines = code.split('\n')
            issues = []
            
            for i, line in enumerate(lines, 1):
                line_stripped = line.strip()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                if 'eval(' in line_stripped:
                    issues.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ eval() –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ")
                
                if 'exec(' in line_stripped:
                    issues.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ exec() –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ")
                
                if 'import os' in line_stripped and 'system' in code:
                    issues.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ —Å–∏—Å—Ç–µ–º—ã")
            
            return ToolResult(
                success=True,
                data={
                    "valid": True,
                    "language": "python",
                    "lines_count": len(lines),
                    "issues": issues,
                    "safe": len(issues) == 0
                }
            )
            
        except SyntaxError as e:
            return ToolResult(
                success=True,  # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –∫–æ–¥ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
                data={
                    "valid": False,
                    "error_type": "SyntaxError",
                    "error_message": str(e),
                    "line_number": e.lineno,
                    "column": e.offset
                }
            )
    
    def get_schema(self) -> Dict[str, Any]:
        return {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "–ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
                },
                "language": {
                    "type": "string",
                    "enum": ["python"],
                    "description": "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "default": "python"
                }
            },
            "required": ["code"]
        } 