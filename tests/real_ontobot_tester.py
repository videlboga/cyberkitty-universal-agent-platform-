#!/usr/bin/env python3
"""
üß™ –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢–ï–† ONTOBOT –°–¶–ï–ù–ê–†–ò–ï–í
–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –ø–ª–∞–≥–∏–Ω–∞–º–∏, –ø–æ–∫–∞–∑—ã–≤–∞—è –∫–∞–∂–¥—ã–π —à–∞–≥
"""

import asyncio
import json
import time
from datetime import datetime
from typing import Dict, Any
import aiohttp
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("logs/real_ontobot_tester.log", 
          format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | REAL_TEST | {message}",
          level="INFO", rotation="10 MB", compression="zip")

class RealOntoBotTester:
    """–¢–µ—Å—Ç–µ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ OntoBot —Å –ø–æ—à–∞–≥–æ–≤—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º."""
    
    def __init__(self, kittycore_url: str = "http://localhost:8085"):
        self.kittycore_url = kittycore_url
        self.test_results = []
        self.step_counter = 0
        
        logger.info("üß™ Real OntoBot Tester –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    async def test_mongo_operations(self, user_id: int = 99997) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å MongoDB —á–µ—Ä–µ–∑ –ø–ª–∞–≥–∏–Ω—ã."""
        
        logger.info(f"üóÑÔ∏è –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢: MongoDB –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        test_start = time.time()
        operations_results = []
        
        try:
            # 1. –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            logger.info("üìù –®–ê–ì 1: –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB")
            
            insert_result = await self._call_kittycore_api("/api/v1/simple/mongo/insert", {
                "collection": "test_users",
                "document": {
                    "user_id": user_id,
                    "name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    "stage": "testing",
                    "created_at": datetime.now().isoformat(),
                    "test_data": {
                        "ya_ya_response": "–Ø –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à",
                        "ya_delo_response": "–Ø –±–æ—é—Å—å –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç",
                        "ya_relations_response": "–ú–µ–Ω—è –≤—Å–µ —Ä–∞–≤–Ω–æ –±—Ä–æ—Å—è—Ç"
                    }
                }
            })
            
            operations_results.append({
                "operation": "insert",
                "success": insert_result.get("success", False),
                "data": insert_result.get("data", {})
            })
            
            logger.info(f"‚úÖ –í—Å—Ç–∞–≤–∫–∞: {insert_result.get('success', False)}")
            
            # 2. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            logger.info("üîç –®–ê–ì 2: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB")
            
            find_result = await self._call_kittycore_api("/api/v1/simple/mongo/find", {
                "collection": "test_users",
                "filter": {"user_id": user_id}
            })
            
            operations_results.append({
                "operation": "find",
                "success": find_result.get("success", False),
                "data": find_result.get("data", [])
            })
            
            logger.info(f"‚úÖ –ü–æ–∏—Å–∫: {find_result.get('success', False)}, –Ω–∞–π–¥–µ–Ω–æ: {len(find_result.get('data', []))}")
            
            # 3. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            logger.info("üìù –®–ê–ì 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB")
            
            update_result = await self._call_kittycore_api("/api/v1/simple/mongo/update", {
                "collection": "test_users",
                "filter": {"user_id": user_id},
                "document": {
                    "$set": {
                        "stage": "diagnostic_completed",
                        "updated_at": datetime.now().isoformat(),
                        "test_data.diagnostic_score": 85
                    }
                }
            })
            
            operations_results.append({
                "operation": "update",
                "success": update_result.get("success", False),
                "data": update_result.get("data", {})
            })
            
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_result.get('success', False)}")
            
            # 4. –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            logger.info("üóëÔ∏è –®–ê–ì 4: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            delete_result = await self._call_kittycore_api("/api/v1/simple/mongo/delete", {
                "collection": "test_users",
                "filter": {"user_id": user_id}
            })
            
            operations_results.append({
                "operation": "delete",
                "success": delete_result.get("success", False),
                "data": delete_result.get("data", {})
            })
            
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ: {delete_result.get('success', False)}")
            
            duration = time.time() - test_start
            all_success = all(op["success"] for op in operations_results)
            
            test_result = {
                "test_name": "mongo_operations",
                "success": all_success,
                "duration": duration,
                "operations": operations_results,
                "timestamp": datetime.now().isoformat()
            }
            
            logger.info(f"‚úÖ MONGO –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù: {all_success}, –æ–ø–µ—Ä–∞—Ü–∏–π: {len(operations_results)}")
            
            return test_result
            
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –í MONGO –¢–ï–°–¢–ï: {str(e)}")
            return {
                "test_name": "mongo_operations",
                "success": False,
                "error": str(e),
                "duration": time.time() - test_start,
                "timestamp": datetime.now().isoformat()
            }
    
    async def test_llm_integration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LLM –ø–ª–∞–≥–∏–Ω–æ–º."""
        
        logger.info("ü§ñ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢: LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        
        test_start = time.time()
        
        try:
            # –¢–µ—Å—Ç LLM –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—å–µ
            logger.info("üí≠ –®–ê–ì 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—å–µ —á–µ—Ä–µ–∑ LLM")
            
            llm_context = {
                "ya_ya_response": "–Ø –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à, –≤—Å–µ–≥–¥–∞ –≤—Å–µ –ø–æ—Ä—á—É, –º–µ–Ω—è —Å–ª–æ–∂–Ω–æ –ª—é–±–∏—Ç—å",
                "ya_delo_response": "–Ø –±–æ—é—Å—å –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç, —É –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞",
                "ya_relations_response": "–ú–µ–Ω—è –≤—Å–µ —Ä–∞–≤–Ω–æ –±—Ä–æ—Å—è—Ç, –Ω–∏–∫—Ç–æ –º–µ–Ω—è –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç"
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥ LLM —á–µ—Ä–µ–∑ –¥–≤–∏–∂–æ–∫
            llm_step = {
                "id": "test_llm_dossier",
                "type": "llm_chat",
                "params": {
                    "messages": [
                        {
                            "role": "system",
                            "content": "–¢—ã –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–∞ Onto Nothing, —Å–æ–∑–¥–∞—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—å–µ –º—ã—Å–ª–µ–≤–∏—Ä—É—Å–æ–≤."
                        },
                        {
                            "role": "user", 
                            "content": f"""–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –¥–æ—Å—å–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤:

–°—Ñ–µ—Ä–∞ "–Ø-–Ø": {llm_context['ya_ya_response']}
–°—Ñ–µ—Ä–∞ "–Ø-–î–µ–ª–æ": {llm_context['ya_delo_response']}
–°—Ñ–µ—Ä–∞ "–Ø-–û—Ç–Ω–æ—à–µ–Ω–∏—è": {llm_context['ya_relations_response']}

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Å—å–µ:
1. –ì–õ–ê–í–ù–´–ï –ú–´–°–õ–ï–í–ò–†–£–°–´ (2-3 –∫–ª—é—á–µ–≤—ã—Ö)
2. –ö–†–ê–¢–ö–ò–ô –ü–†–û–ì–ù–û–ó (—á—Ç–æ –±—É–¥–µ—Ç –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è)
3. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (–ø–µ—Ä–≤—ã–µ —à–∞–≥–∏)

–û–±—ä–µ–º: –¥–æ 300 —Å–ª–æ–≤."""
                        }
                    ],
                    "model": "gpt-4",
                    "temperature": 0.7,
                    "output_var": "generated_dossier"
                }
            }
            
            llm_result = await self._call_kittycore_api("/api/v1/simple/execute", {
                "step": llm_step,
                "context": llm_context
            })
            
            duration = time.time() - test_start
            
            test_result = {
                "test_name": "llm_integration",
                "success": llm_result.get("success", False),
                "duration": duration,
                "generated_dossier": llm_result.get("context", {}).get("generated_dossier", ""),
                "timestamp": datetime.now().isoformat()
            }
            
            logger.info(f"‚úÖ LLM –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù: {test_result['success']}")
            if test_result["generated_dossier"]:
                logger.info(f"üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–æ—Å—å–µ: {test_result['generated_dossier'][:200]}...")
            
            return test_result
            
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –í LLM –¢–ï–°–¢–ï: {str(e)}")
            return {
                "test_name": "llm_integration",
                "success": False,
                "error": str(e),
                "duration": time.time() - test_start,
                "timestamp": datetime.now().isoformat()
            }
    
    async def test_scenario_execution(self, user_id: int = 99999) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è mr_ontobot_main_router."""
        
        logger.info(f"üé¨ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è mr_ontobot_main_router –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        test_start = time.time()
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            initial_context = {
                "user_id": str(user_id),
                "chat_id": str(user_id),
                "telegram_first_name": "–¢–µ—Å—Ç–æ–≤—ã–π",
                "telegram_last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 
                "telegram_username": "test_user",
                "phone_number": "+79991234567",
                "current_timestamp": datetime.now().isoformat(),
                "test_mode": True
            }
            
            logger.info(f"üìã –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {json.dumps(initial_context, ensure_ascii=False, indent=2)}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ KittyCore API
            result = await self._call_kittycore_api(f"/api/v1/simple/channels/test/execute", {
                "scenario_id": "mr_ontobot_main_router",
                "context": initial_context
            })
            
            duration = time.time() - test_start
            
            test_result = {
                "test_name": "scenario_execution",
                "success": result.get("success", False),
                "duration": duration,
                "final_context": result.get("final_context", {}),
                "scenario_id": result.get("scenario_id"),
                "timestamp": datetime.now().isoformat()
            }
            
            logger.info(f"‚úÖ –°–¶–ï–ù–ê–†–ò–ô –ó–ê–í–ï–†–®–ï–ù: {test_result['success']}, –≤—Ä–µ–º—è: {duration:.2f}—Å")
            
            return test_result
            
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –í –°–¶–ï–ù–ê–†–ò–ò: {str(e)}")
            return {
                "test_name": "scenario_execution",
                "success": False,
                "error": str(e),
                "duration": time.time() - test_start,
                "timestamp": datetime.now().isoformat()
            }
    
    async def _call_kittycore_api(self, endpoint: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–∑—ã–≤–∞–µ—Ç API KittyCore."""
        
        url = f"{self.kittycore_url}{endpoint}"
        
        logger.info(f"üåê API –í–´–ó–û–í: {endpoint}")
        logger.info(f"üì§ –î–ê–ù–ù–´–ï: {json.dumps(data, ensure_ascii=False, indent=2)}")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=data) as response:
                result = await response.json()
                
                logger.info(f"üì• –û–¢–í–ï–¢: {json.dumps(result, ensure_ascii=False, indent=2)}")
                
                return result

    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ."""
        
        logger.info("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í ONTOBOT")
        
        all_start = time.time()
        all_results = []
        
        # 1. –¢–µ—Å—Ç MongoDB –æ–ø–µ—Ä–∞—Ü–∏–π
        logger.info("\n" + "="*60)
        logger.info("üóÑÔ∏è –¢–ï–°–¢ 1: MongoDB –æ–ø–µ—Ä–∞—Ü–∏–∏")
        logger.info("="*60)
        
        mongo_result = await self.test_mongo_operations()
        all_results.append(mongo_result)
        
        # 2. –¢–µ—Å—Ç LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        logger.info("\n" + "="*60)
        logger.info("ü§ñ –¢–ï–°–¢ 2: LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        logger.info("="*60)
        
        llm_result = await self.test_llm_integration()
        all_results.append(llm_result)
        
        # 3. –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
        logger.info("\n" + "="*60)
        logger.info("üé¨ –¢–ï–°–¢ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è")
        logger.info("="*60)
        
        scenario_result = await self.test_scenario_execution()
        all_results.append(scenario_result)
        
        total_duration = time.time() - all_start
        successful_tests = sum(1 for r in all_results if r.get("success", False))
        
        summary = {
            "total_tests": len(all_results),
            "successful_tests": successful_tests,
            "failed_tests": len(all_results) - successful_tests,
            "total_duration": total_duration,
            "success_rate": (successful_tests / len(all_results)) * 100,
            "results": all_results,
            "timestamp": datetime.now().isoformat()
        }
        
        logger.info("\n" + "="*60)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        logger.info("="*60)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{len(all_results)}")
        logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {summary['success_rate']:.1f}%")
        logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        return summary

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    
    print("üß™ –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢–ï–† ONTOBOT –°–¶–ï–ù–ê–†–ò–ï–í")
    print("="*50)
    
    tester = RealOntoBotTester()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å KittyCore
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{tester.kittycore_url}/health") as response:
                if response.status == 200:
                    print("‚úÖ KittyCore API –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    print("‚ùå KittyCore API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KittyCore: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    results = await tester.run_all_tests()
    
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {results['successful_tests']}/{results['total_tests']}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {results['success_rate']:.1f}%")
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {results['total_duration']:.2f} —Å–µ–∫—É–Ω–¥")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("logs/real_ontobot_test_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ logs/real_ontobot_test_results.json")
    print(f"üìã –õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ logs/real_ontobot_tester.log")

if __name__ == "__main__":
    asyncio.run(main())
