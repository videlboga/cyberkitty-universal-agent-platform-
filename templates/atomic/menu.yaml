# üß© –ê–¢–û–ú–ê–†–ù–´–ô –®–ê–ë–õ–û–ù: –ü–†–û–°–¢–û–ï –ú–ï–ù–Æ
# –ù–∞–¥–µ–∂–Ω—ã–π, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞

atomic_template:
  type: "menu"
  name: "–ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é"
  version: "1.0.0"
  description: "–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∂–¥–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
  
  # –°—Ö–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  config_schema:
    text:                   # string, required - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      type: "string"
      required: true
      description: "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏"
      
    choices:                # object, required - –í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞
      type: "object" 
      required: true
      description: "–û–±—ä–µ–∫—Ç —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏: choice_id -> {text, next_step}"
      
    allow_any_input:        # boolean, optional - –ü—Ä–∏–Ω–∏–º–∞—Ç—å –ª—é–±–æ–π –≤–≤–æ–¥
      type: "boolean"
      default: false
      description: "–ï—Å–ª–∏ true, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–π callback, –Ω–µ —Ç–æ–ª—å–∫–æ –∏–∑ choices"

  # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  example:
    type: "menu"
    config:
      text: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
      choices:
        "test_llm":
          text: "ü§ñ –¢–µ—Å—Ç LLM"
          next_step: "llm_step"
        "test_rag":
          text: "üìö –¢–µ—Å—Ç RAG"
          next_step: "rag_step"
        "exit":
          text: "üö™ –í—ã—Ö–æ–¥"
          next_step: "end_step"
      allow_any_input: false

  # –ü–æ–≤–µ–¥–µ–Ω–∏–µ
  behavior:
    generates_buttons: true           # –°–æ–∑–¥–∞–µ—Ç Telegram –∫–Ω–æ–ø–∫–∏
    expected_event_type: "callback"   # –û–∂–∏–¥–∞–µ—Ç callback_query
    response_type: "immediate"        # –û—Ç–≤–µ—á–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
    state_change: "conditional"       # –ú–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∞–ª–∏–¥–Ω–æ–º –≤—ã–±–æ—Ä–µ
    
  # –ö–æ–Ω—Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç—Å—è
  context_updates:
    last_choice: "ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"
    last_choice_text: "–¢–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"
    
  # –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
  error_cases:
    - invalid_choice: "–í—ã–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ choices"
    - missing_config: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç text –∏–ª–∏ choices"
    - wrong_event_type: "–ü–æ–ª—É—á–µ–Ω –Ω–µ callback"

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π state machine
simple_implementation: |
  class MenuStep(BaseStep):
      async def execute(self, event: Event, state: UserState) -> StepResult:
          if event.type != "callback":
              # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
              text = self.resolve_template(self.config["text"], state.context)
              buttons = []
              for choice_id, choice_config in self.config["choices"].items():
                  buttons.append({
                      "text": choice_config["text"],
                      "callback_data": choice_id
                  })
              return StepResult(response=text, buttons=buttons, next_step=state.current_step)
          
          # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
          choice = event.data
          if choice not in self.config["choices"]:
              if not self.config.get("allow_any_input", False):
                  return StepResult(response="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä", next_step=state.current_step)
          
          choice_config = self.config["choices"].get(choice, {"text": choice})
          return StepResult(
              next_step=choice_config.get("next_step"),
              update_context={"last_choice": choice, "last_choice_text": choice_config.get("text", choice)}
          ) 