#!/usr/bin/env python3
"""
üåç –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –û–ë–£–ß–ï–ù–ò–Ø –ù–ê –†–ï–ê–õ–¨–ù–´–• –ó–ê–î–ê–ß–ê–•
–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –∞–≥–µ–Ω—Ç—ã —É—á–∞—Ç—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö
"""

import asyncio
import os
from pathlib import Path

from kittycore.core.agent_learning_system import learning_system
from kittycore.core.iterative_improvement import IterativeImprovement
from agents.smart_validator import SmartValidator
from kittycore.agents.working_agent import WorkingAgent

async def test_calculator_task():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    print("üßÆ –¢–ï–°–¢: –°–û–ó–î–ê–ù–ò–ï –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê")
    print("=" * 40)
    
    agent = WorkingAgent(
        role="calculator_developer",
        subtask={
            "description": "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ Python",
            "expected_output": "–†–∞–±–æ—á–∏–π Python —Ñ–∞–π–ª"
        }
    )
    
    validator = SmartValidator()
    improvement = IterativeImprovement()
    
    print("üéØ –ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ Python")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    result = await agent.execute_task()
    print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('output', '–ù–µ—Ç –≤—ã–≤–æ–¥–∞')[:100]}...")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    validation = await validator.validate_result(
        original_task="–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ Python",
        result=result,
        created_files=result.get("files_created", [])
    )
    
    print(f"üìä –û—Ü–µ–Ω–∫–∞: {validation.score:.1f}/1.0")
    print(f"üîç –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(validation.issues)}")
    
    # –£–ª—É—á—à–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if validation.score < 0.7:
        print("\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ...")
        
        final_result, attempts = await improvement.improve_agent_iteratively(
            agent=agent,
            task="–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ Python",
            initial_result=result,
            initial_validation=validation,
            smart_validator=validator
        )
        
        print(f"üìà –ü–æ–ø—ã—Ç–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è: {len(attempts)}")
        if attempts and attempts[-1].improved_validation:
            print(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {attempts[-1].improved_validation.score:.1f}")
    
    return validation.score

async def test_real_task_2_website():
    """–¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞ - –æ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∫ HTML"""
    
    print("\nüåê –¢–ï–°–¢ 2: –°–û–ó–î–ê–ù–ò–ï –í–ï–ë-–°–ê–ô–¢–ê")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    agent = WorkingAgent(
        role="web_developer", 
        subtask={
            "description": "–°–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤—ã–π —Å–∞–π—Ç-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞",
            "expected_output": "HTML —Ñ–∞–π–ª —Å CSS —Å—Ç–∏–ª—è–º–∏"
        }
    )
    
    validator = SmartValidator()
    improvement = IterativeImprovement()
    
    print("üéØ –ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤—ã–π —Å–∞–π—Ç-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    print("\n1Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
    result = await agent.execute_task()
    print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('output', '–ù–µ—Ç –≤—ã–≤–æ–¥–∞')[:100]}...")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    validation = await validator.validate_result(
        original_task="–°–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤—ã–π —Å–∞–π—Ç-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞",
        result=result,
        created_files=result.get("files_created", [])
    )
    
    print(f"üìä –û—Ü–µ–Ω–∫–∞: {validation.score:.1f}/1.0")
    print(f"üîç –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(validation.issues)}")
    
    # –£–ª—É—á—à–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if validation.score < 0.7:
        print("\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ...")
        
        final_result, attempts = await improvement.improve_agent_iteratively(
            agent=agent,
            task="–°–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤—ã–π —Å–∞–π—Ç-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞", 
            initial_result=result,
            initial_validation=validation,
            smart_validator=validator
        )
        
        print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   - –ü–æ–ø—ã—Ç–æ–∫: {len(attempts)}")
        if attempts and attempts[-1].improved_validation:
            print(f"   - –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {attempts[-1].improved_validation.score:.1f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        files_created = final_result.get("files_created", [])
        if files_created:
            print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {files_created}")
            for file_path in files_created:
                if os.path.exists(file_path) and file_path.endswith('.html'):
                    print(f"üåê {file_path} - HTML —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π HTML
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                            if '<html>' in content.lower() and '<body>' in content.lower():
                                print("‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—É—é HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                            else:
                                print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π HTML")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ HTML: {e}")
    
    return validation.score

async def test_real_task_3_data_analysis():
    """–¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö - –æ—Ç CSV –∫ –æ—Ç—á—ë—Ç—É"""
    
    print("\nüìä –¢–ï–°–¢ 3: –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π CSV —Ñ–∞–π–ª
    test_csv_content = """name,age,salary,department
–ê–ª–µ–∫—Å–µ–π,25,50000,IT
–ú–∞—Ä–∏—è,30,60000,Marketing
–ò–≤–∞–Ω,35,70000,IT
–ê–Ω–Ω–∞,28,55000,HR
–ü–µ—Ç—Ä,32,65000,IT
–ï–ª–µ–Ω–∞,29,58000,Marketing"""
    
    with open("test_data.csv", "w", encoding="utf-8") as f:
        f.write(test_csv_content)
    
    print("üìÅ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª test_data.csv")
    
    # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    agent = WorkingAgent(
        role="data_analyst",
        subtask={
            "description": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ test_data.csv –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á—ë—Ç —Å –≤—ã–≤–æ–¥–∞–º–∏",
            "expected_output": "Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ + —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"
        }
    )
    
    validator = SmartValidator()
    improvement = IterativeImprovement()
    
    print("üéØ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –≤ test_data.csv –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á—ë—Ç")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    print("\n1Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞...")
    result = await agent.execute_task()
    print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('output', '–ù–µ—Ç –≤—ã–≤–æ–¥–∞')[:100]}...")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    validation = await validator.validate_result(
        original_task="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –≤ test_data.csv –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á—ë—Ç",
        result=result,
        created_files=result.get("files_created", [])
    )
    
    print(f"üìä –û—Ü–µ–Ω–∫–∞: {validation.score:.1f}/1.0")
    print(f"üîç –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(validation.issues)}")
    
    # –£–ª—É—á—à–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if validation.score < 0.7:
        print("\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ...")
        
        final_result, attempts = await improvement.improve_agent_iteratively(
            agent=agent,
            task="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –≤ test_data.csv –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á—ë—Ç",
            initial_result=result,
            initial_validation=validation,
            smart_validator=validator
        )
        
        print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   - –ü–æ–ø—ã—Ç–æ–∫: {len(attempts)}")
        if attempts and attempts[-1].improved_validation:
            print(f"   - –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {attempts[-1].improved_validation.score:.1f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        files_created = final_result.get("files_created", [])
        if files_created:
            print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {files_created}")
            for file_path in files_created:
                if os.path.exists(file_path):
                    print(f"‚úÖ {file_path} - —Å–æ–∑–¥–∞–Ω")
                    if file_path.endswith('.py'):
                        print("üêç Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    elif file_path.endswith(('.txt', '.md')):
                        print("üìÑ –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    return validation.score

async def test_learning_progression():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≥–µ–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—á–∞—Ç—Å—è"""
    
    print("\nüß† –¢–ï–°–¢ –ü–†–û–ì–†–ï–°–°–ò–ò –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    agents_to_check = ["calculator_developer", "web_developer", "data_analyst"]
    
    for agent_id in agents_to_check:
        print(f"\nü§ñ –ê–≥–µ–Ω—Ç: {agent_id}")
        
        knowledge = await learning_system.get_agent_knowledge(agent_id)
        
        print(f"   üìä –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {knowledge.total_attempts}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {len(knowledge.successful_patterns)}")
        print(f"   ‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫: {len(knowledge.error_patterns)}")
        print(f"   üîß –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(knowledge.tool_preferences)}")
        print(f"   üìö –£—Ä–æ–∫–∏: {len(knowledge.lessons_learned)}")
        
        if knowledge.lessons_learned:
            print(f"   üí° –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫: {knowledge.lessons_learned[-1]}")
        
        if knowledge.tool_preferences:
            best_tool = max(knowledge.tool_preferences.items(), key=lambda x: x[1])
            print(f"   üèÜ –õ—É—á—à–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {best_tool[0]} ({best_tool[1]} —É—Å–ø–µ—Ö–æ–≤)")

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    print("üåç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –û–ë–£–ß–ï–ù–ò–Ø –ù–ê –†–ï–ê–õ–¨–ù–´–• –ó–ê–î–ê–ß–ê–•")
    print("=" * 70)
    
    scores = []
    
    try:
        # –¢–µ—Å—Ç 1: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        score1 = await test_calculator_task()
        scores.append(("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", score1))
        
        # –¢–µ—Å—Ç 2: –í–µ–±-—Å–∞–π—Ç
        score2 = await test_real_task_2_website()
        scores.append(("–í–µ–±-—Å–∞–π—Ç", score2))
        
        # –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        score3 = await test_real_task_3_data_analysis()
        scores.append(("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", score3))
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è
        await test_learning_progression()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüèÜ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("=" * 50)
        
        total_score = 0
        for task_name, score in scores:
            print(f"   {task_name}: {score:.1f}/1.0")
            total_score += score
        
        avg_score = total_score / len(scores)
        print(f"\nüìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_score:.1f}/1.0")
        
        if avg_score >= 0.7:
            print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!")
        elif avg_score >= 0.5:
            print("üëç –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å!")
        else:
            print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê! –°–∏—Å—Ç–µ–º–∞ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏–∏!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ vault
        vault_path = Path("obsidian_vault/knowledge")
        if vault_path.exists():
            learning_files = list(vault_path.glob("learning_*.md"))
            knowledge_files = list(vault_path.glob("knowledge_*.json"))
            
            print(f"\nüìÅ –§–∞–π–ª—ã –æ–±—É—á–µ–Ω–∏—è –≤ vault: {len(learning_files)}")
            print(f"üìÅ –§–∞–π–ª—ã –∑–Ω–∞–Ω–∏–π –≤ vault: {len(knowledge_files)}")
        
        print("\n‚úÖ –í–°–ï –†–ï–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –†–ï–ê–õ–¨–ù–´–• –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 