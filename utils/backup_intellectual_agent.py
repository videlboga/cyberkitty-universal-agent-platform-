import asyncio
import json
import logging
import os
from datetime import datetime
from typing import Dict, Any, List, Optional

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
from kittycore.llm import get_llm_provider, LLMProvider

logger = logging.getLogger(__name__)


class IntellectualAgent:
    """
    –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π LLM –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
    –ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ if/else —É—Å–ª–æ–≤–∏—è –Ω–∞ —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á
    """
    
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –º–æ–¥–µ–ª—å –≤–º–µ—Å—Ç–æ "auto"
        self.llm_provider = get_llm_provider("deepseek/deepseek-chat")
        logger.info("üß† IntellectualAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å LLM")
    
    async def execute_task(self, task: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª—å–∑—É—è LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        """
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ LLM
            analysis = await self._analyze_task_with_llm(task, context)
            
            # 2. –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ LLM
            tools = await self._select_tools_with_llm(task, analysis)
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ LLM
            execution_plan = await self._create_execution_plan_with_llm(task, tools)
            
            # 4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            result = await self._execute_plan(execution_plan, task)
            
            # 5. –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result["analysis"] = analysis
            result["plan"] = {
                "task_type": analysis.get("task_type", "unknown"),
                "expected_output": analysis.get("expected_output", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "complexity": analysis.get("complexity", "unknown"),
                "domain": analysis.get("domain", "unknown"),
                "requires_files": analysis.get("requires_files", False)
            }
            
            logger.info(f"‚úÖ IntellectualAgent –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É: {task}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ IntellectualAgent: {e}")
            return {
                "success": False,
                "error": str(e),
                "task": task
            }
    
    async def _analyze_task_with_llm(self, task: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ LLM"""
        prompt = f"""–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ –∑–∞–¥–∞—á. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.

–ó–ê–î–ê–ß–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {task}

–ö–û–ù–¢–ï–ö–°–¢: {json.dumps(context, ensure_ascii=False) if context else "–Ω–µ—Ç"}

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –¢–∏–ø –∑–∞–¥–∞—á–∏ (website_creation, planning, calculation, market_analysis, file_management, other)
2. –ù—É–∂–Ω—ã –ª–∏ —Ñ–∞–π–ª—ã (true/false) 
3. –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
4. –°–ª–æ–∂–Ω–æ—Å—Ç—å (simple, medium, complex)
5. –û–±–ª–∞—Å—Ç—å (web, planning, math, business, text, other)

–û–¢–í–ï–ß–ê–ô –°–¢–†–û–ì–û –í JSON –§–û–†–ú–ê–¢–ï:
{{
    "task_type": "–æ–¥–∏–Ω_–∏–∑_—Ç–∏–ø–æ–≤_–≤—ã—à–µ",
    "requires_files": true,
    "expected_output": "–¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
    "complexity": "simple_medium_–∏–ª–∏_complex",
    "domain": "–æ–±–ª–∞—Å—Ç—å_–∑–∞–¥–∞—á–∏"
}}

–¢–û–õ–¨–ö–û JSON, –ù–ò–ö–ê–ö–ò–• –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í:"""
        
        try:
            response = self.llm_provider.complete(prompt)
            logger.info(f"üîç LLM –æ—Ç–≤–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {response[:200]}...")
            
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_start = response.find('{')
            json_end = response.rfind('}') + 1
            
            if json_start != -1 and json_end > json_start:
                json_str = response[json_start:json_end]
                analysis = json.loads(json_str)
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {analysis}")
                return analysis
            else:
                logger.warning("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ LLM")
                raise ValueError("No JSON found")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ LLM: {e}")
            
            # –£–º–Ω—ã–π fallback –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            task_lower = task.lower()
            
            if any(word in task_lower for word in ['—Ä—ã–Ω–æ–∫', '–∞–Ω–∞–ª–∏–∑', 'market', '–ø—Ä–æ—Ç–æ—Ç–∏–ø', '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑']):
                return {
                    "task_type": "market_analysis",
                    "requires_files": True, 
                    "expected_output": f"–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞–º–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {task}",
                    "complexity": "complex",
                    "domain": "business"
                }
            elif any(word in task_lower for word in ['—Å–∞–π—Ç', 'website', 'html', '–≤–µ–±']):
                return {
                    "task_type": "website_creation",
                    "requires_files": True,
                    "expected_output": f"–ì–æ—Ç–æ–≤—ã–π HTML —Å–∞–π—Ç –ø–æ —Ç–µ–º–µ: {task}",
                    "complexity": "medium",
                    "domain": "web"
                }
            elif any(word in task_lower for word in ['–ø–ª–∞–Ω', '–ø–ª–∞–Ω–∏—Ä', '–ø–ª–∞–Ω', 'schedule']):
                return {
                    "task_type": "planning", 
                    "requires_files": True,
                    "expected_output": f"–î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è: {task}",
                    "complexity": "simple",
                    "domain": "planning"
                }
            elif any(word in task_lower for word in ['–ø–ª–æ—Ç–Ω–æ—Å—Ç—å', '—Ä–∞—Å—á–µ—Ç', '–≤—ã—á–∏—Å–ª–∏', '–ø–æ—Å—á–∏—Ç–∞–π']):
                return {
                    "task_type": "calculation",
                    "requires_files": True,
                    "expected_output": f"–ì–æ—Ç–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è: {task}",
                    "complexity": "medium", 
                    "domain": "math"
                }
            else:
                return {
                    "task_type": "other",
                    "requires_files": True,
                    "expected_output": f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task}",
                    "complexity": "simple",
                    "domain": "other"
                }
    
    async def _select_tools_with_llm(self, task: str, analysis: Dict[str, Any]) -> List[str]:
        """–í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ LLM"""
        available_tools = [
            "file_manager - —Å–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤",
            "web_creator - —Å–æ–∑–¥–∞–Ω–∏–µ HTML/CSS —Å–∞–π—Ç–æ–≤",
            "calculator - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
            "text_processor - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞",
            "planner - –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"
        ]
        
        prompt = f"""
–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏:

–ó–∞–¥–∞—á–∞: {task}
–ê–Ω–∞–ª–∏–∑: {json.dumps(analysis, ensure_ascii=False)}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
{chr(10).join(available_tools)}

–û—Ç–≤–µ—á–∞–π —Å–ø–∏—Å–∫–æ–º –Ω–∞–∑–≤–∞–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:
–ù–∞–ø—Ä–∏–º–µ—Ä: file_manager, web_creator

–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:"""
        
        response = self.llm_provider.complete(prompt)
        tools = [tool.strip() for tool in response.strip().split(',')]
        return tools
    
    async def _create_execution_plan_with_llm(self, task: str, tools: List[str]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ LLM"""
        prompt = f"""
–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:

–ó–∞–¥–∞—á–∞: {task}
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(tools)}

–û—Ç–≤–µ—á–∞–π –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "steps": [
        {{
            "action": "–æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è",
            "tool": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
            "parameters": {{"key": "value"}}
        }}
    ],
    "files_to_create": ["file1.html", "file2.css"],
    "expected_result": "–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
}}

JSON:"""
        
        response = self.llm_provider.complete(prompt)
        try:
            return json.loads(response.strip())
        except:
            # Fallback –ø–ª–∞–Ω
            return {
                "steps": [{"action": "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", "tool": "file_manager", "parameters": {}}],
                "files_to_create": [],
                "expected_result": "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
            }
    
    async def _execute_plan(self, plan: Dict[str, Any], task: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞"""
        results = []
        files_created = []
        
        # –ï—Å–ª–∏ –ø–ª–∞–Ω —ç—Ç–æ –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if "task_type" in plan and "steps" not in plan:
            task_type = plan.get("task_type", "other")
            
            if task_type == "website_creation":
                # –°–æ–∑–¥–∞–µ–º —Å–∞–π—Ç
                result = await self._execute_web_creator("–°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏", {}, task)
                results.append(result)
                if result.get("files_created"):
                    files_created.extend(result["files_created"])
                    
            elif task_type == "planning":
                # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω
                result = await self._execute_file_manager("–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –¥–Ω—è", {"type": "planning"}, task)
                results.append(result)
                if result.get("files_created"):
                    files_created.extend(result["files_created"])
                    
            elif task_type == "calculation":
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
                result = await self._execute_calculator("–†–∞—Å—á–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏", {"type": "density"}, task)
                results.append(result)
                if result.get("files_created"):
                    files_created.extend(result["files_created"])
            else:
                # –û–±—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                result = await self._execute_file_manager("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", {}, task)
                results.append(result)
                if result.get("files_created"):
                    files_created.extend(result["files_created"])
        else:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            for step in plan.get("steps", []):
                action = step.get("action", "")
                tool = step.get("tool", "")
                parameters = step.get("parameters", {})
                
                # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                if tool == "file_manager":
                    result = await self._execute_file_manager(action, parameters, task)
                elif tool == "web_creator":
                    result = await self._execute_web_creator(action, parameters, task)
                elif tool == "calculator":
                    result = await self._execute_calculator(action, parameters, task)
                else:
                    result = await self._execute_generic_tool(action, tool, parameters, task)
                
                results.append(result)
                if result.get("files_created"):
                    files_created.extend(result["files_created"])
        
        return {
            "success": True,
            "action": f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —á–µ—Ä–µ–∑ LLM: {task}",
            "results": results,
            "files_created": files_created,
            "plan": plan
        }
    
    async def _execute_file_manager(self, action: str, params: Dict[str, Any], task: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å LLM-–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ LLM
        content_prompt = f"""
–°–æ–∑–¥–∞–π –†–ï–ê–õ–¨–ù–´–ô –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ –∑–∞–¥–∞—á–µ: {task}

–î–µ–π—Å—Ç–≤–∏–µ: {action}
–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(params, ensure_ascii=False)}

–ï—Å–ª–∏ —ç—Ç–æ –ø–ª–∞–Ω - —Å–æ–∑–¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏.
–ï—Å–ª–∏ —ç—Ç–æ —Ä–∞—Å—á–µ—Ç - –≤–∫–ª—é—á–∏ —Ñ–æ—Ä–º—É–ª—ã –∏ —á–∏—Å–ª–∞.
–ï—Å–ª–∏ —ç—Ç–æ —Å–∞–π—Ç - —Å–æ–∑–¥–∞–π HTML —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.

–ö–æ–Ω—Ç–µ–Ω—Ç:"""
        
        content = self.llm_provider.complete(content_prompt)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ LLM
        filename_prompt = f"""
–ü—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–¥–∞—á–∏: {task}

–î–µ–π—Å—Ç–≤–∏–µ: {action}

–¢–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º:"""
        
        filename = self.llm_provider.complete(filename_prompt).strip()
        if not filename or '/' in filename:
            filename = "output.txt"
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å LLM-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {filename}")
            return {
                "success": True,
                "action": f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {filename}",
                "files_created": [filename],
                "content_preview": content[:100] + "..." if len(content) > 100 else content
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "action": action
            }
    
    async def _execute_web_creator(self, action: str, params: Dict[str, Any], task: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞ —Å LLM-–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        html_prompt = f"""–°–æ–∑–¥–∞–π –ü–û–õ–ù–´–ô HTML –∫–æ–¥ –¥–ª—è –∑–∞–¥–∞—á–∏: {task}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü–æ–ª–Ω—ã–π HTML –¥–æ–∫—É–º–µ–Ω—Ç —Å DOCTYPE, head, body  
- –ö—Ä–∞—Å–∏–≤—ã–µ —Å—Ç–∏–ª–∏ CSS
- –†–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç–µ–º–µ
- –ï—Å–ª–∏ –ø—Ä–æ –∫–æ—Ç—è—Ç - –¥–æ–±–∞–≤—å –∫–æ—Ç—è—Ç!

HTML –∫–æ–¥:"""
        
        html_content = self.llm_provider.complete(html_prompt)
        
        # –ù–ï–¢ FALLBACK - –µ—Å–ª–∏ LLM –Ω–µ –¥–∞–ª HTML, —Ç–æ –æ—à–∏–±–∫–∞
        if not html_content.strip().startswith("<!DOCTYPE") and not html_content.strip().startswith("<html"):
            raise Exception(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: LLM –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã–π HTML! –û—Ç–≤–µ—Ç: {html_content[:100]}")
        
        files_created = []
        
        try:
            # –°–æ–∑–¥–∞–µ–º index.html
            with open("index.html", 'w', encoding='utf-8') as f:
                f.write(html_content)
            files_created.append("index.html")
            
            # –°–æ–∑–¥–∞–µ–º CSS –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if "css" in task.lower() or "—Å—Ç–∏–ª" in task.lower():
                css_prompt = f"""–°–æ–∑–¥–∞–π CSS —Å—Ç–∏–ª–∏ –¥–ª—è —Å–∞–π—Ç–∞ –ø–æ –∑–∞–¥–∞—á–µ: {task}

–ö—Ä–∞—Å–∏–≤—ã–µ, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏:"""
                
                css_content = self.llm_provider.complete(css_prompt)
                with open("styles.css", 'w', encoding='utf-8') as f:
                    f.write(css_content)
                files_created.append("styles.css")
            
            logger.info(f"üåê –°–æ–∑–¥–∞–Ω —Å–∞–π—Ç: {', '.join(files_created)}")
            return {
                "success": True,
                "action": f"–°–æ–∑–¥–∞–Ω —Å–∞–π—Ç: {', '.join(files_created)}",
                "files_created": files_created
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "action": action
            }
    
    async def _execute_calculator(self, action: str, params: Dict[str, Any], task: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π —Å LLM"""
        calc_prompt = f"""
–í—ã–ø–æ–ª–Ω–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏: {task}

–î–µ–π—Å—Ç–≤–∏–µ: {action}

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
1. –§–æ—Ä–º—É–ª—ã
2. –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
3. –†–∞—Å—á–µ—Ç—ã
4. –†–µ–∑—É–ª—å—Ç–∞—Ç

–ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —á—ë—Ä–Ω–æ–π –¥—ã—Ä—ã) - –∏—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.

–†–∞—Å—á–µ—Ç:"""
        
        calculation = self.llm_provider.complete(calc_prompt)
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –≤ —Ñ–∞–π–ª
            filename = "calculation.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(f"–†–∞—Å—á–µ—Ç –¥–ª—è: {task}\n\n{calculation}")
            
            logger.info(f"üî¢ –í—ã–ø–æ–ª–Ω–µ–Ω —Ä–∞—Å—á–µ—Ç: {filename}")
            return {
                "success": True,
                "action": f"–í—ã–ø–æ–ª–Ω–µ–Ω —Ä–∞—Å—á–µ—Ç: {calculation[:100]}...",
                "files_created": [filename],
                "result": calculation
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "action": action
            }
    
    async def _execute_generic_tool(self, action: str, tool: str, params: Dict[str, Any], task: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ LLM
        result_prompt = f"""
–í—ã–ø–æ–ª–Ω–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º:

–ó–∞–¥–∞—á–∞: {task}
–î–µ–π—Å—Ç–≤–∏–µ: {action}
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool}
–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(params, ensure_ascii=False)}

–û–ø–∏—à–∏ —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:"""
        
        result_text = self.llm_provider.complete(result_prompt)
        
        logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–æ {tool}: {action}")
        return {
            "success": True,
            "action": f"{tool}: {action}",
            "result": result_text,
            "files_created": []
        } 