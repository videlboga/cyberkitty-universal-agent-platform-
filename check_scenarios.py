#!/usr/bin/env python3
import requests
import json

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
url = "http://localhost:8085/api/v1/simple/mongo/find"
payload = {"collection": "scenarios"}
response = requests.post(url, json=payload)
data = response.json()

print(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(data['data'])}")
print("\n=== –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–†–û–ë–õ–ï–ú–´ –° callback_query_data ===")

problems_found = []

for scenario in data['data']:
    scenario_id = scenario['scenario_id']
    steps = scenario.get('steps', [])
    
    for step in steps:
        if step.get('type') == 'branch':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å conditions
            conditions = step.get('params', {}).get('conditions', [])
            for condition in conditions:
                cond_text = condition.get('condition', '')
                if 'callback_query_data' in cond_text:
                    problem = {
                        'scenario_id': scenario_id,
                        'step_id': step.get('id'),
                        'condition': cond_text,
                        'type': 'conditions'
                    }
                    problems_found.append(problem)
                    print(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê –≤ {scenario_id}, —à–∞–≥ {step.get('id')}: {cond_text}")

if not problems_found:
    print("‚úÖ –í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
else:
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(problems_found)}")
    for problem in problems_found:
        print(f"- {problem['scenario_id']}.{problem['step_id']}") 