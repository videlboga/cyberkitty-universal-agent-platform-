#!/usr/bin/env python3
"""
üñ•Ô∏è –û–¢–õ–ê–î–ö–ê: computer_use_tool
"""

import asyncio
import time
import json

try:
    from kittycore.tools.computer_use_tool import ComputerUseTool
    IMPORT_OK = True
    print("‚úÖ –ò–º–ø–æ—Ä—Ç computer_use_tool —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ –û–®–ò–ë–ö–ê: {e}")
    IMPORT_OK = False

async def test_environment_info():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ä–µ–¥–µ"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüñ•Ô∏è –¢–µ—Å—Ç–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–µ–¥–µ...")
    tool = ComputerUseTool()
    
    # –í–ê–ñ–ù–û: ComputerUseTool –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
    result = await tool.execute({
        'action': 'test_environment'
    })
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if isinstance(result, dict):
        success = result.get('success', False)
        print(f"‚úÖ Success: {success}")
        
        if success:
            data = result.get('details', {})
            if isinstance(data, dict):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–µ–¥–µ
                env_fields = ['platform', 'backend', 'has_display', 'window_manager']
                found_fields = [field for field in env_fields if field in data]
                print(f"üîë –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π —Å—Ä–µ–¥—ã: {len(found_fields)}/{len(env_fields)}")
                
                if 'platform' in data:
                    print(f"   Platform: {data['platform']}")
                if 'backend' in data:
                    print(f"   Backend: {data['backend']}")
        else:
            error = result.get('error_message', '–ù–ï–ò–ó–í–ï–°–¢–ù–û')
            print(f"‚ùå –û—à–∏–±–∫–∞: {error}")
    
    return result

async def test_capabilities():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞...")
    tool = ComputerUseTool()
    
    result = await tool.execute({
        'action': 'check_capabilities'
    })
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if isinstance(result, dict):
        success = result.get('success', False)
        print(f"‚úÖ Success: {success}")
        
        if success:
            details = result.get('details', {})
            if isinstance(details, dict):
                capabilities = details.get('capabilities', {})
                print(f"üõ†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {list(capabilities.keys()) if isinstance(capabilities, dict) else '–Ω–µ dict'}")
    
    return result

async def test_screen_info():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Ä–∞–Ω–µ"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüì∫ –¢–µ—Å—Ç–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Ä–∞–Ω–µ...")
    tool = ComputerUseTool()
    
    result = await tool.execute({
        'action': 'get_screen_info'
    })
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if isinstance(result, dict):
        success = result.get('success', False)
        print(f"‚úÖ Success: {success}")
        
        if success:
            details = result.get('details', {})
            if isinstance(details, dict):
                screen_info = details.get('screen_info', {})
                if isinstance(screen_info, dict):
                    width = screen_info.get('width', '–ù–ï–¢')
                    height = screen_info.get('height', '–ù–ï–¢')
                    print(f"üì∫ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {width}x{height}")
    
    return result

async def test_mouse_position():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüñ±Ô∏è –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏...")
    tool = ComputerUseTool()
    
    result = await tool.execute({
        'action': 'get_mouse_position'
    })
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if isinstance(result, dict):
        success = result.get('success', False)
        print(f"‚úÖ Success: {success}")
        
        if success:
            details = result.get('details', {})
            if isinstance(details, dict):
                position = details.get('position', {})
                if isinstance(position, dict):
                    x = position.get('x', '–ù–ï–¢')
                    y = position.get('y', '–ù–ï–¢')
                    print(f"üñ±Ô∏è –ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏: ({x}, {y})")
    
    return result

def is_result_honest(result, test_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if not result:
        print(f"‚ùå {test_name}: –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return False
    
    if not isinstance(result, dict):
        print(f"‚ùå {test_name}: –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–ª–æ–≤–∞—Ä—å")
        return False
    
    success = result.get('success', False)
    if not success:
        print(f"‚ùå {test_name}: success=False")
        error = result.get('error_message', '–ù–ï–ò–ó–í–ï–°–¢–ù–û')
        print(f"   –û—à–∏–±–∫–∞: {error}")
        return False
    
    data_str = str(result)
    data_size = len(data_str)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–µ–π–∫–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    fake_patterns = [
        "computer_use: —É—Å–ø–µ—à–Ω–æ",
        "–¥–µ–º–æ gui",
        "–∑–∞–≥–ª—É—à–∫–∞ —ç–∫—Ä–∞–Ω–∞"
    ]
    
    for pattern in fake_patterns:
        if pattern.lower() in data_str.lower():
            print(f"‚ùå {test_name}: –ù–∞–π–¥–µ–Ω —Ñ–µ–π–∫–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ GUI –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    gui_indicators = [
        "screen", "mouse", "keyboard", "window", "display", "backend", 
        "platform", "width", "height", "position", "x11", "capabilities"
    ]
    
    has_gui_data = any(indicator.lower() in data_str.lower() for indicator in gui_indicators)
    
    if not has_gui_data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–π GUI –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
        return False
    
    if data_size < 50:
        print(f"‚ùå {test_name}: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
        return False
    
    print(f"‚úÖ {test_name}: –ß–ï–°–¢–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
    return True

async def main():
    print("üñ•Ô∏è –û–¢–õ–ê–î–ö–ê: computer_use_tool")
    
    if not IMPORT_OK:
        return
    
    results = {}
    
    # –¢–µ—Å—Ç—ã (–≤—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ, –±–µ–∑ GUI –æ–ø–µ—Ä–∞—Ü–∏–π)
    tests = [
        ("environment_info", test_environment_info),
        ("capabilities", test_capabilities),
        ("screen_info", test_screen_info),
        ("mouse_position", test_mouse_position)
    ]
    
    for test_name, test_func in tests:
        print(f"\n{'='*30}")
        print(f"–¢–ï–°–¢: {test_name}")
        try:
            result = await test_func()
            results[test_name] = is_result_honest(result, test_name)
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ –û–®–ò–ë–ö–ê: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*50}")
    print("üìä –ò–¢–û–ì–ò:")
    
    total_tests = len(results)
    passed_tests = sum(1 for success in results.values() if success)
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
    
    print(f"\nüìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if success_rate >= 75 else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")

if __name__ == "__main__":
    asyncio.run(main()) 