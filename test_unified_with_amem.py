#!/usr/bin/env python3
"""
üß† –¢–ï–°–¢ –ü–û–õ–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò A-MEM –í UNIFIEDORCHESTRATOR

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é A-MEM –≤ UnifiedOrchestrator
2. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤  
3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤ –≤ A-MEM
4. –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –∑–∞–¥–∞—á –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
5. –≠–≤–æ–ª—é—Ü–∏—é –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
"""

import asyncio
import sys
import time
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig
from loguru import logger

async def test_amem_integration():
    """üß† –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ A-MEM –≤ UnifiedOrchestrator"""
    print("üöÄ === –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò A-MEM –í UNIFIEDORCHESTRATOR ===")
    start_time = time.time()
    
    # –≠–¢–ê–ü 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å A-MEM
    print("\n1Ô∏è‚É£ === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø UNIFIEDORCHESTRATOR –° A-MEM ===")
    
    config = UnifiedConfig(
        orchestrator_id="amem_test_orchestrator",
        enable_amem_memory=True,
        amem_memory_path="./vault/system/amem_test",
        vault_path="./vault_test",
        enable_shared_chat=True,
        enable_vector_memory=True,
        enable_smart_validation=True,
        timeout=60
    )
    
    orchestrator = UnifiedOrchestrator(config)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é A-MEM
    assert orchestrator.amem_system is not None, "‚ùå A-MEM —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
    print("‚úÖ A-MEM —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    assert orchestrator.collective_memory.amem_system is not None, "‚ùå A-MEM –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç—å—é"
    print("‚úÖ A-MEM –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç—å—é")
    
    if orchestrator.shared_chat:
        assert orchestrator.shared_chat.amem_system is not None, "‚ùå A-MEM –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å SharedChat"
        print("‚úÖ A-MEM –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å SharedChat")
    
    # –≠–¢–ê–ü 2: –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
    print("\n2Ô∏è‚É£ === –ü–ï–†–í–ê–Ø –ó–ê–î–ê–ß–ê: –°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–û–í–´–• –í–û–°–ü–û–ú–ò–ù–ê–ù–ò–ô ===")
    
    task1 = "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞"
    print(f"üìã –ó–∞–¥–∞—á–∞ 1: {task1}")
    
    try:
        result1 = await orchestrator.solve_task(task1)
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result1.get('status', 'unknown')}")
        print(f"üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(result1.get('created_files', []))}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø—ã—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ A-MEM
        memories_count_1 = await check_amem_memories(orchestrator.amem_system, "–ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ 1: {e}")
        result1 = {"status": "failed", "error": str(e)}
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await asyncio.sleep(2)
    
    # –≠–¢–ê–ü 3: –í—Ç–æ—Ä–∞—è –∑–∞–¥–∞—á–∞ - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
    print("\n3Ô∏è‚É£ === –í–¢–û–†–ê–Ø –ó–ê–î–ê–ß–ê: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê ===")
    
    task2 = "–°–æ–∑–¥–∞—Ç—å Python –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏"
    print(f"üìã –ó–∞–¥–∞—á–∞ 2: {task2}")
    
    try:
        result2 = await orchestrator.solve_task(task2)
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ 2 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result2.get('status', 'unknown')}")
        print(f"üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(result2.get('created_files', []))}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—à–ª–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–ø—ã—Ç
        memories_count_2 = await check_amem_memories(orchestrator.amem_system, "–≤—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ 2: {e}")
        result2 = {"status": "failed", "error": str(e)}
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await asyncio.sleep(2)
    
    # –≠–¢–ê–ü 4: –¢—Ä–µ—Ç—å—è –∑–∞–¥–∞—á–∞ - –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (–¥—Ä—É–≥–æ–π —Ç–∏–ø)
    print("\n4Ô∏è‚É£ === –¢–†–ï–¢–¨–Ø –ó–ê–î–ê–ß–ê: –í–ï–ë–ï–†–ê–ó–†–ê–ë–û–¢–ö–ê ===")
    
    task3 = "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
    print(f"üìã –ó–∞–¥–∞—á–∞ 3: {task3}")
    
    try:
        result3 = await orchestrator.solve_task(task3)
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ 3 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result3.get('status', 'unknown')}")
        print(f"üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(result3.get('created_files', []))}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        memories_count_3 = await check_amem_memories(orchestrator.amem_system, "—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ 3: {e}")
        result3 = {"status": "failed", "error": str(e)}
    
    # –≠–¢–ê–ü 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
    print("\n5Ô∏è‚É£ === –ü–†–û–í–ï–†–ö–ê –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê A-MEM ===")
    
    await test_semantic_search(orchestrator.amem_system)
    
    # –≠–¢–ê–ü 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏ –ø–∞–º—è—Ç–∏
    print("\n6Ô∏è‚É£ === –ü–†–û–í–ï–†–ö–ê –≠–í–û–õ–Æ–¶–ò–ò –ö–û–õ–õ–ï–ö–¢–ò–í–ù–û–ô –ü–ê–ú–Ø–¢–ò ===")
    
    await test_memory_evolution(orchestrator.amem_system)
    
    # –≠–¢–ê–ü 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n7Ô∏è‚É£ === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
    
    total_time = time.time() - start_time
    
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.2f}—Å")
    print(f"üß† A-MEM —Å–∏—Å—Ç–µ–º–∞: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if orchestrator.amem_system else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}")
    print(f"üìä –ó–∞–¥–∞—á –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: 3")
    print(f"üîÑ –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if memories_count_3 > 0 else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    return {
        "total_time": total_time,
        "amem_enabled": orchestrator.amem_system is not None,
        "tasks_completed": 3,
        "memories_final": memories_count_3,
        "success": True
    }

async def check_amem_memories(amem_system, phase: str) -> int:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ A-MEM"""
    try:
        # –ò—â–µ–º –≤—Å–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        all_memories = await amem_system.search_memories(
            query="",  # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö
            limit=100
        )
        
        count = len(all_memories)
        print(f"üß† A-MEM –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π ({phase}): {count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if all_memories:
            print(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
            for i, memory in enumerate(all_memories[-3:], 1):
                content_preview = memory.get('content', '')[:100].replace('\n', ' ')
                tags = memory.get('tags', [])
                print(f"   {i}. {content_preview}... (—Ç–µ–≥–∏: {', '.join(tags[:3])})")
        
        return count
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ A-MEM: {e}")
        return 0

async def test_semantic_search(amem_system):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ A-MEM"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    
    search_queries = [
        "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ Python",
        "–≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ HTML",
        "—É—Å–ø–µ—à–Ω—ã–π –æ–ø—ã—Ç –∞–≥–µ–Ω—Ç–∞",
        "—Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤",
        "–æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
    ]
    
    for query in search_queries:
        try:
            results = await amem_system.search_memories(query, limit=3)
            print(f"   üîç '{query}': –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            if results:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                best_result = results[0]
                content_preview = best_result.get('content', '')[:80].replace('\n', ' ')
                print(f"      ‚ú® –õ—É—á—à–∏–π: {content_preview}...")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ '{query}': {e}")

async def test_memory_evolution(amem_system):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–≤–æ–ª—é—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
    print("üß¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–≤–æ–ª—é—Ü–∏–∏ –ø–∞–º—è—Ç–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —ç–≤–æ–ª—é—Ü–∏–∏ –ø–∞–º—è—Ç–∏
        if hasattr(amem_system, 'memory_evolution'):
            evolution_system = amem_system.memory_evolution
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            patterns = await evolution_system.get_patterns()
            links = await evolution_system.get_memory_links()
            
            print(f"   üß¨ –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–æ–º–∞–Ω–¥: {len(patterns)}")
            print(f"   üîó –°–≤—è–∑–µ–π –º–µ–∂–¥—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: {len(links)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            if patterns:
                for i, pattern in enumerate(patterns[:3], 1):
                    print(f"   {i}. –ü–∞—Ç—Ç–µ—Ä–Ω: {pattern.pattern_type} (–≤—Å—Ç—Ä–µ—á–∞–ª—Å—è {pattern.frequency} —Ä–∞–∑)")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤—è–∑–µ–π
            if links:
                for i, link in enumerate(links[:3], 1):
                    print(f"   {i}. –°–≤—è–∑—å: {link.source_id} ‚Üí {link.target_id} (—Å–∏–ª–∞: {link.strength:.2f})")
                    
        else:
            print("   ‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —ç–≤–æ–ª—é—Ü–∏–∏ –ø–∞–º—è—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–≤–æ–ª—é—Ü–∏–∏: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        result = await test_amem_integration()
        
        print("\nüéâ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û ===")
        print("üß† A-MEM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ UnifiedOrchestrator!")
        print("‚ú® –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫, –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∏ —ç–≤–æ–ª—é—Ü–∏—è –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!")
        
        return result
        
    except Exception as e:
        print(f"\nüí• === –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
        print(f"‚ùå {e}")
        import traceback
        traceback.print_exc()
        return {"success": False, "error": str(e)}

if __name__ == "__main__":
    asyncio.run(main()) 