#!/usr/bin/env python3
"""
üîÑ –¢–µ—Å—Ç –ë–∏—Ç—Ä–∏–∫—Å24 –∞–Ω–∞–ª–∏–∑–∞ —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–ª–æ—Ö–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
"""

import asyncio
import sys
import os
from datetime import datetime
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig

async def test_bitrix_with_retry():
    """–¢–µ—Å—Ç —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    
    print("üîÑ === –¢–ï–°–¢ –ë–ò–¢–†–ò–ö–°24 –° RETRY –õ–û–ì–ò–ö–û–ô ===")
    print("üéØ –ó–∞–¥–∞—á–∞: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ + 3 –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞")
    print("üîÑ –ú–µ—Ö–∞–Ω–∏–∑–º: –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n")
    
    # –ó–∞–¥–∞—á–∞
    task = "–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∞ –±–∏—Ç—Ä–∏–∫—Å 24, –Ω–∞–π–¥–∏ —Ç–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö, —Å–æ—Å—Ç–∞–≤—å –æ—Ç—á—ë—Ç –æ —Ç–æ–º, –∫–∞–∫–∏–µ —Ç–∞–º –µ—Å—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ —Å–ª–æ–∂–Ω—ã –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–º–µ—é—Ç. –ü–æ—Å–ª–µ —Å–¥–µ–ª–∞–π 3 –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±—ã—Å—Ç—Ä–æ —Å —É–ª—É—á—à–µ–Ω–∏–µ–º UX"
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
    config = UnifiedConfig(
        vault_path="./vault_bitrix_retry",
        enable_amem_memory=True,
        enable_smart_validation=True,  # –í–∫–ª—é—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–æ–≤
        max_agents=3
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = UnifiedOrchestrator(config)
    print(f"üß† A-MEM: {type(orchestrator.amem_system).__name__}")
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
    success_criteria = {
        "min_files": 4,  # –ú–∏–Ω–∏–º—É–º 4 —Ñ–∞–π–ª–∞ (–æ—Ç—á—ë—Ç + 3 –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞)
        "min_quality": 0.7,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        "required_content": ["–∞–Ω–∞–ª–∏–∑", "–ø—Ä–æ—Ç–æ—Ç–∏–ø", "–±–∏—Ç—Ä–∏–∫—Å", "UX"],
        "min_total_size": 2000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    }
    
    max_attempts = 3
    attempt = 1
    
    while attempt <= max_attempts:
        print(f"\nüîÑ === –ü–û–ü–´–¢–ö–ê {attempt}/{max_attempts} ===")
        start_time = datetime.now()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º A-MEM –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
            if orchestrator.amem_system:
                try:
                    memories = await orchestrator.amem_system.search_memories("–±–∏—Ç—Ä–∏–∫—Å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ç–æ—Ç–∏–ø", limit=5)
                    print(f"üß† A-MEM –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º: {len(memories)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                    
                    if memories and attempt > 1:
                        print("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –æ–ø—ã—Ç:")
                        for i, memory in enumerate(memories[:2], 1):
                            preview = memory.get('content', '')[:100] + "..."
                            print(f"   {i}. {preview}")
                        print()
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è A-MEM: {e}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            print(f"üöÄ –ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")
            result = await orchestrator.solve_task(task)
            
            execution_time = (datetime.now() - start_time).total_seconds()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            quality_score = result.get('quality_score', 0.0)
            files_created = result.get('files_created', [])
            status = result.get('status', 'unknown')
            
            print(f"\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ü–´–¢–ö–ò {attempt} ===")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {execution_time:.1f}—Å")
            print(f"   üìÅ –§–∞–π–ª–æ–≤: {len(files_created)}")
            print(f"   üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f}")
            print(f"   üìù –°—Ç–∞—Ç—É—Å: {status}")
            
            if files_created:
                print(f"   üìÇ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                for file_path in files_created[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"      - {file_path}")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_check = await evaluate_result_quality(files_created, success_criteria)
            
            print(f"\nüîç === –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê ===")
            print(f"   üìÅ –§–∞–π–ª–æ–≤: {quality_check['files_count']}/{success_criteria['min_files']} ‚úÖ" if quality_check['files_count'] >= success_criteria['min_files'] else f"   üìÅ –§–∞–π–ª–æ–≤: {quality_check['files_count']}/{success_criteria['min_files']} ‚ùå")
            print(f"   üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f}/{success_criteria['min_quality']} ‚úÖ" if quality_score >= success_criteria['min_quality'] else f"   üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f}/{success_criteria['min_quality']} ‚ùå")
            print(f"   üìù –ö–æ–Ω—Ç–µ–Ω—Ç: {quality_check['content_size']} —Å–∏–º–≤–æ–ª–æ–≤ ‚úÖ" if quality_check['content_size'] >= success_criteria['min_total_size'] else f"   üìù –ö–æ–Ω—Ç–µ–Ω—Ç: {quality_check['content_size']} —Å–∏–º–≤–æ–ª–æ–≤ ‚ùå")
            print(f"   üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {quality_check['keywords_found']}/{len(success_criteria['required_content'])} ‚úÖ" if quality_check['keywords_found'] >= len(success_criteria['required_content'])/2 else f"   üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {quality_check['keywords_found']}/{len(success_criteria['required_content'])} ‚ùå")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö
            is_success = (
                quality_check['files_count'] >= success_criteria['min_files'] and
                quality_score >= success_criteria['min_quality'] and
                quality_check['content_size'] >= success_criteria['min_total_size'] and
                quality_check['keywords_found'] >= len(success_criteria['required_content'])/2
            )
            
            if is_success:
                print(f"\nüéâ === –£–°–ü–ï–• –ù–ê –ü–û–ü–´–¢–ö–ï {attempt}! ===")
                print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º A-MEM –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                if orchestrator.amem_system:
                    try:
                        memories_after = await orchestrator.amem_system.search_memories("–±–∏—Ç—Ä–∏–∫—Å –∞–Ω–∞–ª–∏–∑", limit=10)
                        print(f"üß† A-MEM –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {len(memories_after)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                        print("üí° –°–∏—Å—Ç–µ–º–∞ –Ω–∞–∫–æ–ø–∏–ª–∞ –Ω–æ–≤—ã–π –æ–ø—ã—Ç –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–¥–∞—á!")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ A-MEM: {e}")
                
                return result
            
            else:
                print(f"\n‚ö†Ô∏è === –ü–û–ü–´–¢–ö–ê {attempt} –ù–ï –£–î–ê–õ–ê–°–¨ ===")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
                issues = []
                if quality_check['files_count'] < success_criteria['min_files']:
                    issues.append(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–π–ª–æ–≤ ({quality_check['files_count']} < {success_criteria['min_files']})")
                if quality_score < success_criteria['min_quality']:
                    issues.append(f"–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ ({quality_score:.2f} < {success_criteria['min_quality']})")
                if quality_check['content_size'] < success_criteria['min_total_size']:
                    issues.append(f"–ú–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ({quality_check['content_size']} < {success_criteria['min_total_size']})")
                if quality_check['keywords_found'] < len(success_criteria['required_content'])/2:
                    issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
                
                print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã:")
                for issue in issues:
                    print(f"   - {issue}")
                
                if attempt < max_attempts:
                    print(f"\nüîÑ –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}...")
                    print("üí° A-MEM —Å–æ—Ö—Ä–∞–Ω–∏—Ç –æ–ø—ã—Ç —ç—Ç–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    await asyncio.sleep(2)
                else:
                    print(f"\n‚ùå === –í–°–ï {max_attempts} –ü–û–ü–´–¢–ö–ò –ò–°–ß–ï–†–ü–ê–ù–´ ===")
                    print("üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    return result
        
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {e}")
            if attempt < max_attempts:
                print(f"üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑...")
                await asyncio.sleep(2)
            else:
                print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º")
                return {"success": False, "error": str(e)}
        
        attempt += 1
    
    print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
    return {"success": False, "attempts": max_attempts}

async def evaluate_result_quality(files_created, criteria):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    quality_data = {
        'files_count': len(files_created),
        'content_size': 0,
        'keywords_found': 0,
        'file_types': set()
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
    for file_path in files_created:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
            if not file_path.startswith('/'):
                full_path = os.path.join(os.getcwd(), file_path)
            else:
                full_path = file_path
            
            if os.path.exists(full_path):
                with open(full_path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    quality_data['content_size'] += len(content)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    content_lower = content.lower()
                    for keyword in criteria['required_content']:
                        if keyword.lower() in content_lower:
                            quality_data['keywords_found'] += 1
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                ext = os.path.splitext(file_path)[1]
                quality_data['file_types'].add(ext)
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    return quality_data

if __name__ == "__main__":
    asyncio.run(test_bitrix_with_retry()) 