#!/usr/bin/env python3
"""
üéØ –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ KITTYCORE 3.0 - –ê–ù–ê–õ–ò–ó –ë–ò–¢–†–ò–ö–°24

–°–ª–æ–∂–Ω–∞—è –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–∞—è –∑–∞–¥–∞—á–∞:
1. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ë–∏—Ç—Ä–∏–∫—Å24
2. –¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π  
3. –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã
4. 3 –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""

import asyncio
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
os.environ["TIMEOUT"] = "30"  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏
os.environ["MAX_TOKENS"] = "4000"  # –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

async def test_bitrix_analysis():
    print("üéØ –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢: –ê–ù–ê–õ–ò–ó –ë–ò–¢–†–ò–ö–°24")
    print("="*50)
    
    task = """–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∞ –±–∏—Ç—Ä–∏–∫—Å 24, –Ω–∞–π–¥–∏ —Ç–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö, —Å–æ—Å—Ç–∞–≤—å –æ—Ç—á—ë—Ç –æ —Ç–æ–º, –∫–∞–∫–∏–µ —Ç–∞–º –µ—Å—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ —Å–ª–æ–∂–Ω—ã –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–º–µ—é—Ç. –ü–æ—Å–ª–µ —Å–¥–µ–ª–∞–π 3 –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±—ã—Å—Ç—Ä–æ —Å —É–ª—É—á—à–µ–Ω–∏–µ–º UX"""
    
    try:
        from kittycore.core.unified_orchestrator import UnifiedOrchestrator
        
        print("üöÄ –ó–∞–ø—É—Å–∫ UnifiedOrchestrator...")
        orchestrator = UnifiedOrchestrator()
        
        print(f"üìã –ó–∞–¥–∞—á–∞: {task[:100]}...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
        result = await orchestrator.solve_task(task)
        
        print("\n" + "="*50)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("="*50)
        
        if result:
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
            print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {result.get('quality', 0):.2f}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result.get('execution_time', 0):.1f}—Å")
            
            if 'files_created' in result:
                print(f"üìÅ –§–∞–π–ª—ã: {result['files_created']}")
                
            if 'summary' in result:
                print(f"üìù –†–µ–∑—é–º–µ: {result['summary'][:200]}...")
                
        else:
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        print(f"\nüìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ outputs/:")
        outputs_dir = Path("outputs")
        if outputs_dir.exists():
            files = list(outputs_dir.glob("*"))
            for file in files[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ñ–∞–π–ª–æ–≤
                print(f"   üìÑ {file.name} ({file.stat().st_size} –±–∞–π—Ç)")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    asyncio.run(test_bitrix_analysis()) 