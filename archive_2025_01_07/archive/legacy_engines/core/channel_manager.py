"""
Channel Manager –¥–ª—è Universal Agent Platform.
–ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!

–ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
1. ChannelManager - –û–¢–î–ï–õ–¨–ù–´–ô —Å–µ—Ä–≤–∏—Å
2. –û–î–ò–ù –ì–õ–û–ë–ê–õ–¨–ù–´–ô –¥–≤–∏–∂–æ–∫ –¥–ª—è –í–°–ï–• –∫–∞–Ω–∞–ª–æ–≤
3. –ö–∞–Ω–∞–ª—ã –¥–µ–ª—è—Ç –æ–¥–∏–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
4. ChannelManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∫–∞–Ω–∞–ª–æ–≤

–°–ê–ú–û–î–û–°–¢–ê–¢–û–ß–ù–´–ô - —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —Å API –∫–∞–Ω–∞–ª–æ–≤!
"""

import asyncio
import aiohttp
import json
import os
from typing import Dict, List, Optional, Any
from loguru import logger
import traceback
import uuid


class ChannelManager:
    """
    –°–ê–ú–û–î–û–°–¢–ê–¢–û–ß–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–Ω–∞–ª–æ–≤.
    
    –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
    1. –û–î–ò–ù –ì–õ–û–ë–ê–õ–¨–ù–´–ô –¥–≤–∏–∂–æ–∫ –¥–ª—è –í–°–ï–• –∫–∞–Ω–∞–ª–æ–≤
    2. –ö–∞–Ω–∞–ª—ã SHARED —Ä–µ—Å—É—Ä—Å—ã
    3. –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –¥–æ —Ç—ã—Å—è—á –∫–∞–Ω–∞–ª–æ–≤
    4. ChannelManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∫–∞–Ω–∞–ª–æ–≤
    """
    
    def __init__(self, global_engine=None):
        # –ü–†–ò–ù–ò–ú–ê–ï–ú –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫!
        self.global_engine = global_engine
        self.channels: Dict[str, Dict] = {}  # channel_id -> channel_data
        self.telegram_sessions: Dict[str, aiohttp.ClientSession] = {}  # channel_id -> session
        self.polling_tasks: Dict[str, asyncio.Task] = {}  # channel_id -> task
        self.last_update_ids: Dict[str, int] = {}  # channel_id -> last_update_id
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤."""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–ì–û Channel Manager...")
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫
        if not self.global_engine:
            logger.error("‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ ChannelManager!")
            raise RuntimeError("Global engine required for ChannelManager")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î
        await self._load_channels_from_db()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ (–ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–≤–∏–∂–∫–æ–≤!)
        await self._start_all_polling()
        
        logger.info(f"‚úÖ –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–´–ô Channel Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(self.channels)}")
        
    async def _load_channels_from_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î –∏—Å–ø–æ–ª—å–∑—É—è –ì–õ–û–ë–ê–õ–¨–ù–´–ô –¥–≤–∏–∂–æ–∫."""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ì–õ–û–ë–ê–õ–¨–ù–´–ô –¥–≤–∏–∂–æ–∫
            if not self.global_engine:
                logger.error("‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞–ø–ø–∏–Ω–≥–∏ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ MongoDB –ø–ª–∞–≥–∏–Ω
            step = {
                "id": "find_channels",
                "type": "mongo_find_documents",
                "params": {
                    "collection": "channel_mappings",
                    "filter": {},
                    "output_var": "find_result"
                }
            }
            context = {}
            result_context = await self.global_engine.execute_step(step, context)
            result = result_context.get("find_result", {})
            
            if result.get("success") and result.get("documents"):
                for channel_doc in result["documents"]:
                    channel_id = channel_doc.get("channel_id")
                    if channel_id:
                        self.channels[channel_id] = channel_doc
                        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω –∫–∞–Ω–∞–ª: {channel_id} (—Ç–∏–ø: {channel_doc.get('channel_type', 'unknown')})")
                        
                logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ë–î: {len(self.channels)}")
            else:
                logger.warning("‚ö†Ô∏è –ö–∞–Ω–∞–ª—ã –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ë–î: {e}")
            
    async def _start_all_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤."""
        for channel_id, channel_data in self.channels.items():
            await self._start_channel_polling(channel_id, channel_data)
            
    async def _start_channel_polling(self, channel_id: str, channel_data: Dict):
        """
        –°–ê–ú–û–î–û–°–¢–ê–¢–û–ß–ù–´–ô –∑–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
        
        –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–∞–Ω–∞–ª–∞!
        """
        try:
            channel_type = channel_data.get("channel_type", "unknown")
            
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} (—Ç–∏–ø: {channel_type})")
            
            if channel_type == "telegram":
                # –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ø–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –∫–∞–Ω–∞–ª, –∞ –Ω–µ –ø—É—Å—Ç—ã–µ config/settings
                await self._start_telegram_polling_direct(channel_id, channel_data)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–∞–Ω–∞–ª–∞: {channel_type}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
    
    async def _start_telegram_polling_direct(self, channel_id: str, channel_data: Dict):
        """
        –ü–†–Ø–ú–û–ô –∑–∞–ø—É—Å–∫ Telegram –ø–æ–ª–ª–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Bot API.
        
        –ë–ï–ó –ü–õ–ê–ì–ò–ù–û–í! –ë–ï–ó –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–• –•–ï–ù–î–õ–ï–†–û–í!
        """
        try:
            # –û–¢–õ–ê–î–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ {channel_id}: {channel_data}")
            
            # –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Ç–æ–∫–µ–Ω –±–µ—Ä–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–∞–Ω–∞–ª–∞
            bot_token = channel_data.get("telegram_bot_token")
            
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è {channel_id}: {bot_token}")
            
            if not bot_token:
                logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω telegram_bot_token –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                return
            
            # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–Ω–∞–ª–∞
            session = aiohttp.ClientSession()
            self.telegram_sessions[channel_id] = session
            self.last_update_ids[channel_id] = 0
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
            polling_task = asyncio.create_task(
                self._telegram_polling_loop(channel_id, bot_token, session)
            )
            self.polling_tasks[channel_id] = polling_task
            
            logger.info(f"‚úÖ –ü—Ä—è–º–æ–π Telegram –ø–æ–ª–ª–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} —Å —Ç–æ–∫–µ–Ω–æ–º {bot_token[:20]}...")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _start_telegram_polling_direct –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
    
    async def _telegram_polling_loop(self, channel_id: str, bot_token: str, session: aiohttp.ClientSession):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª–ª–∏–Ω–≥–∞ Telegram Bot API.
        
        –ü–†–Ø–ú–ê–Ø —Ä–∞–±–æ—Ç–∞ —Å API –±–µ–∑ –ø–ª–∞–≥–∏–Ω–æ–≤!
        """
        base_url = f"https://api.telegram.org/bot{bot_token}"
        
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ channel_id –≤ last_update_ids
        if channel_id not in self.last_update_ids:
            self.last_update_ids[channel_id] = 0
            logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω last_update_id –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                params = {
                    "offset": self.last_update_ids[channel_id] + 1,
                    "timeout": 30,
                    "allowed_updates": ["message", "callback_query"]
                }
                
                async with session.get(f"{base_url}/getUpdates", params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get("ok") and data.get("result"):
                            for update in data["result"]:
                                # –û–±–Ω–æ–≤–ª—è–µ–º last_update_id
                                self.last_update_ids[channel_id] = update["update_id"]
                                
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                                await self._handle_telegram_update(update, channel_id)
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                        await asyncio.sleep(5)
                        
            except asyncio.CancelledError:
                logger.info(f"‚èπÔ∏è –ü–æ–ª–ª–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–æ–ª–ª–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
                logger.error(f"üîç –¢–†–ê–°–°–ò–†–û–í–ö–ê: {traceback.format_exc()}")
                await asyncio.sleep(5)
    
    async def _handle_telegram_update(self, update: Dict[str, Any], channel_id: str) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram"""
        try:
            logger.info(f"üîç DEBUG LINE 196: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            update_id = update.get("update_id", "unknown")
            logger.info(f"üîç DEBUG LINE 198: update_id = {update_id}")
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {update_id}")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            logger.info(f"üîç –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê UPDATE: {update}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            event_type = "unknown"
            event_data = {}
            logger.info(f"üîç DEBUG LINE 207: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è")
            
            if "message" in update:
                logger.info(f"üîç DEBUG LINE 210: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º message")
                event_type = "message"
                message = update["message"]
                
                # –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
                logger.info(f"üîç –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê MESSAGE: {message}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                contact_data = None
                logger.info(f"üîç DEBUG LINE 219: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
                if "contact" in message:
                    logger.info(f"üîç DEBUG LINE 221: –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç")
                    contact = message["contact"]
                    contact_data = {
                        "phone_number": contact.get("phone_number"),
                        "first_name": contact.get("first_name"),
                        "last_name": contact.get("last_name"),
                        "user_id": contact.get("user_id")
                    }
                    logger.info(f"üìû –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {contact_data}")
                else:
                    logger.info(f"üîç –ü–æ–ª–µ 'contact' –ù–ï –ù–ê–ô–î–ï–ù–û –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(message.keys())}")
                
                logger.info(f"üîç DEBUG LINE 233: –°–æ–∑–¥–∞—ë–º event_data")
                event_data = {
                    "user_id": str(message.get("from", {}).get("id", "")),
                    "chat_id": str(message.get("chat", {}).get("id", "")),
                    "message_text": message.get("text", ""),
                    "telegram_user_id": message.get("from", {}).get("id"),
                    "telegram_username": message.get("from", {}).get("username"),
                    "telegram_first_name": message.get("from", {}).get("first_name"),
                    "telegram_last_name": message.get("from", {}).get("last_name"),
                    "telegram_chat_id": message.get("chat", {}).get("id"),
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                logger.info(f"üîç DEBUG LINE 245: –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –µ—Å–ª–∏ –µ—Å—Ç—å")
                if contact_data:
                    event_data["contact"] = contact_data
            
            elif "callback_query" in update:
                logger.info(f"üîç DEBUG LINE 250: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback_query")
                event_type = "callback_query"
                callback = update["callback_query"]
                event_data = {
                    "user_id": str(callback.get("from", {}).get("id", "")),
                    "chat_id": str(callback.get("message", {}).get("chat", {}).get("id", "")),
                    "callback_data": callback.get("data", ""),
                    "message_id": callback.get("message", {}).get("message_id"),
                    "telegram_user_id": callback.get("from", {}).get("id"),
                    "telegram_username": callback.get("from", {}).get("username"),
                    "telegram_first_name": callback.get("from", {}).get("first_name"),
                    "telegram_last_name": callback.get("from", {}).get("last_name"),
                    "telegram_chat_id": callback.get("message", {}).get("chat", {}).get("id"),
                }
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–∞–Ω–∞–ª–∞
            logger.info(f"üîç DEBUG LINE 264: –í—ã–∑—ã–≤–∞–µ–º _execute_channel_scenario")
            await self._execute_channel_scenario(channel_id, event_type, event_data)
            logger.info(f"üîç DEBUG LINE 266: _execute_channel_scenario –∑–∞–≤–µ—Ä—à—ë–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
            logger.error(f"üîç DEBUG: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            logger.error(f"üîç DEBUG: –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
    
    async def _execute_channel_scenario(self, channel_id: str, event_type: str, event_data: Dict):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ —Å–æ–±—ã—Ç–∏–∏.
        
        –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
            channel_data = self.channels.get(channel_id)
            if not channel_data:
                logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
                
            user_id = event_data.get("user_id")
            chat_id = event_data.get("chat_id")
            
            if not user_id or not chat_id:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –∏–ª–∏ chat_id –∏–∑ —Å–æ–±—ã—Ç–∏—è")
                return
            
            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            message_text = event_data.get("message_text", "")
            if event_type == "message" and message_text.strip() == "/start":
                logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - —Å–±—Ä–∞—Å—ã–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                await self._reset_user_state(channel_id, user_id)
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–∞–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                start_scenario_id = channel_data.get("start_scenario_id")
                if not start_scenario_id:
                    logger.error(f"‚ùå –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π start_scenario_id –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                    return
                    
                logger.info(f"üé≠ –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è {start_scenario_id} –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self._start_new_user_scenario(channel_id, event_type, event_data, start_scenario_id)
                return
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            saved_state = await self._load_user_state(channel_id, user_id)
            
            if saved_state:
                # –ï–°–¢–¨ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
                logger.info(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å —à–∞–≥–∞ {saved_state.get('current_step')}")
                await self._continue_user_scenario(channel_id, event_type, event_data, saved_state)
            else:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
                start_scenario_id = channel_data.get("start_scenario_id")
                if not start_scenario_id:
                    logger.error(f"‚ùå –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π start_scenario_id –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                    return
                    
                logger.info(f"üé≠ –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è {start_scenario_id} –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self._start_new_user_scenario(channel_id, event_type, event_data, start_scenario_id)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
    
    async def _load_user_state(self, channel_id: str, user_id: str) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–≤–∏–∂–æ–∫ –∫–∞–Ω–∞–ª–∞!
            if not self.global_engine:
                logger.error("‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return None
            
            # –ò—â–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            step = {
                "id": "load_user_state",
                "type": "mongo_find_documents",
                "params": {
                    "collection": "user_states",
                    "filter": {
                        "channel_id": channel_id,
                        "user_id": user_id
                    },
                    "output_var": "find_result"
                }
            }
            
            context = {}
            result_context = await self.global_engine.execute_step(step, context)
            result = result_context.get("find_result", {})
            
            if result.get("success") and result.get("documents"):
                user_state = result["documents"][0]
                logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: —Å—Ü–µ–Ω–∞—Ä–∏–π {user_state.get('scenario_id')}, —à–∞–≥ {user_state.get('current_step')}")
                return user_state
            else:
                logger.info(f"üìã –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    async def _save_user_state(self, channel_id: str, user_id: str, context: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–≤–∏–∂–æ–∫ –∫–∞–Ω–∞–ª–∞!
            if not self.global_engine:
                logger.error("‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            state_data = {
                "channel_id": channel_id,
                "user_id": user_id,
                "scenario_id": context.get("scenario_id"),
                "current_step": context.get("current_step"),
                "waiting_for_input": context.get("waiting_for_input", False),
                "input_step_id": context.get("input_step_id"),
                "context": context,
                "updated_at": "2024-12-29T16:00:00Z"
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (upsert)
            step = {
                "id": "save_user_state",
                "type": "mongo_upsert_document",
                "params": {
                    "collection": "user_states",
                    "filter": {
                        "channel_id": channel_id,
                        "user_id": user_id
                    },
                    "document": state_data,
                    "output_var": "save_result"
                }
            }
            
            save_context = {}
            await self.global_engine.execute_step(step, save_context)
            
            logger.info(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: —Å—Ü–µ–Ω–∞—Ä–∏–π {state_data['scenario_id']}, —à–∞–≥ {state_data['current_step']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def _continue_user_scenario(self, channel_id: str, event_type: str, event_data: Dict, saved_state: Dict):
        """
        –£–ü–†–û–©–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è.
        
        –ü–†–ò–ù–¶–ò–ü: –ú–∏–Ω–∏–º—É–º –ª–æ–≥–∏–∫–∏ –≤ ChannelManager, –º–∞–∫—Å–∏–º—É–º –≤ SimpleScenarioEngine!
        """
        try:
            user_id = event_data.get("user_id")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            context = saved_state.get("context", {})
            
            # üîç –û–¢–õ–ê–î–û–ß–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            logger.info(f"üîç EVENT_TYPE: {event_type}")
            logger.info(f"üîç EVENT_DATA: {event_data}")
            logger.info(f"üîç SAVED_STATE waiting_for_input: {saved_state.get('waiting_for_input')}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            context.update({
                "channel_id": channel_id,
                "event_type": event_type,
                "telegram_update": {
                    "message" if event_type == "message" else "callback_query": event_data
                },
                **event_data
            })
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º callback_data –ø—Ä–∏ callback_query
            if event_type == "callback_query":
                context["callback_data"] = event_data.get("callback_data", "")
                logger.info(f"üîç –í–°–ï–ì–î–ê –û–ë–ù–û–í–õ–Ø–Æ callback_data: {context['callback_data']}")
            
            scenario_id = saved_state.get("scenario_id")
            current_step_id = saved_state.get("current_step")
            
            logger.info(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} —Å —à–∞–≥–∞ {current_step_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –£–ü–†–û–©–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if saved_state.get("waiting_for_input"):
                if event_type == "message":
                    context["user_input"] = event_data.get("message_text", "")
                    context["message_text"] = event_data.get("message_text", "")
                    # –ö–†–ò–¢–ò–ß–ù–û: –í–°–ï–ì–î–ê –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è template_resolver
                    telegram_message = context.get("telegram_update", {}).get("message", {})
                    if "contact" in telegram_message:
                        context["contact"] = telegram_message["contact"]
                        logger.info(f"üìû –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–≤–ª—ë–∫ –∫–æ–Ω—Ç–∞–∫—Ç –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ telegram_update: {telegram_message['contact']}")
                elif event_type == "callback_query":
                    # callback_data —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –≤—ã—à–µ
                    logger.info(f"üîç callback_data —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è waiting_for_input")
                
                context["waiting_for_input"] = False
                context.pop("input_step_id", None)
            
            # –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ SimpleScenarioEngine
            # –û–Ω —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å input/branch/switch_scenario —à–∞–≥–∞–º–∏
            context["current_step"] = current_step_id
            context["execution_started"] = True
            
            logger.info(f"üìç –ü–µ—Ä–µ–¥–∞—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SimpleScenarioEngine —Å —à–∞–≥–æ–º: {current_step_id}")
            
            # SimpleScenarioEngine —Å–∞–º —Ä–µ—à–∏—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
            final_context = await self.global_engine.execute_scenario(scenario_id, context)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await self._save_user_state(channel_id, user_id, final_context)
            
            logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –ø—Ä–æ–¥–æ–ª–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event_data.get('user_id')}: {e}")
    
    async def _start_new_user_scenario(self, channel_id: str, event_type: str, event_data: Dict, start_scenario_id: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            user_id = event_data.get("user_id")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ Telegram
            context = {
                "channel_id": channel_id,
                "scenario_id": start_scenario_id,
                "event_type": event_type,
                "telegram_update": {
                    "message" if event_type == "message" else "callback_query": event_data
                },
                **event_data
            }
            
            # –ö–†–ò–¢–ò–ß–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            telegram_message = context.get("telegram_update", {}).get("message", {})
            if "contact" in telegram_message:
                context["contact"] = telegram_message["contact"]
                logger.info(f"üìû –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ telegram_update: {telegram_message['contact']}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            final_context = await self.global_engine.execute_scenario(start_scenario_id, context)
            
            # –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if final_context.get("waiting_for_input"):
                logger.info(f"üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∂–¥–µ—Ç –≤–≤–æ–¥–∞ - —Å–æ—Ö—Ä–∞–Ω—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            else:
                logger.info(f"üíæ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - —Å–æ—Ö—Ä–∞–Ω—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            
            await self._save_user_state(channel_id, user_id, final_context)
            
            logger.info(f"‚úÖ –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π {start_scenario_id} –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event_data.get('user_id')}: {e}")
    
    async def stop_all_polling(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤."""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª–ª–∏–Ω–≥–∞
        for channel_id, task in self.polling_tasks.items():
            try:
                task.cancel()
                await task
            except asyncio.CancelledError:
                pass
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª–ª–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏–∏
        for channel_id, session in self.telegram_sessions.items():
            try:
                await session.close()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
                
        logger.info("üõë –í—Å–µ –∫–∞–Ω–∞–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    async def reload_channels(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î."""
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã
        await self.stop_all_polling()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.channels.clear()
        self.telegram_sessions.clear()
        self.polling_tasks.clear()
        self.last_update_ids.clear()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
        await self._load_channels_from_db()
        await self._start_all_polling()
        
        logger.info(f"üîÑ –ö–∞–Ω–∞–ª—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(self.channels)}")
        
    # ===== –ü–†–Ø–ú–´–ï –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° TELEGRAM API =====
    
    async def send_message(self, channel_id: str, chat_id: str, text: str, **kwargs) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª.
        –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—É–∑—ã.
        –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø—Ä–∏–º–µ–Ω—è–µ—Ç HTML —Ä–∞–∑–º–µ—Ç–∫—É!
        
        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        try:
            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø HTML –†–ê–ó–ú–ï–¢–ö–ê - –ù–ï –ó–ê–í–ò–°–ò–¢ –û–¢ –ü–ê–†–ê–ú–ï–¢–†–û–í!
            kwargs["parse_mode"] = "HTML"
            text = self.format_telegram_text(text, "HTML")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
            delay_seconds = kwargs.pop("delay_seconds", 1.0)
            if delay_seconds > 0:
                await asyncio.sleep(delay_seconds)
                logger.info(f"‚è∞ –ü–∞—É–∑–∞ {delay_seconds}—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è")
            
            channel_data = self.channels.get(channel_id)
            if not channel_data:
                logger.error(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {"success": False, "error": f"–ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                
            bot_token = channel_data.get("telegram_bot_token")
            if not bot_token:
                logger.error(f"‚ùå –¢–æ–∫–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {"success": False, "error": f"–¢–æ–∫–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            session = self.telegram_sessions.get(channel_id)
            if not session:
                logger.error(f"‚ùå –°–µ—Å—Å–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return {"success": False, "error": f"–°–µ—Å—Å–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML"  # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û!
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            data.update(kwargs)
            # –ï—â–µ —Ä–∞–∑ —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ parse_mode HTML
            data["parse_mode"] = "HTML"
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π –≤ –∫–∞–Ω–∞–ª {channel_id}: {text[:100]}...")
            
            async with session.post(url, json=data) as response:
                result = await response.json()
                
                if result.get("ok"):
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {channel_id} —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π")
                    return {"success": True, "result": result["result"]}
                else:
                    error_msg = result.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {error_msg}")
                    logger.error(f"üîç –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}")
                    return {"success": False, "error": error_msg}
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ send_message: {e}")
            logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return {"success": False, "error": str(e)}

    async def send_buttons(self, channel_id: str, chat_id: str, text: str, buttons: List[List[Dict[str, str]]], **kwargs) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—É–∑—ã.
        """
        try:
            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É
            kwargs["parse_mode"] = "HTML"
            text = self.format_telegram_text(text, "HTML")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
            delay_seconds = kwargs.pop("delay_seconds", 1.2)
            if delay_seconds > 0:
                await asyncio.sleep(delay_seconds)
                logger.info(f"‚è∞ –ü–∞—É–∑–∞ {delay_seconds}—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–Ω–æ–ø–æ–∫")
            
            channel_data = self.channels.get(channel_id)
            if not channel_data:
                return {"success": False, "error": f"Channel {channel_id} not found"}

            bot_token = channel_data.get("telegram_bot_token")
            if not bot_token:
                return {"success": False, "error": f"Bot token not found for channel {channel_id}"}

            session = self.telegram_sessions.get(channel_id)
            if not session:
                return {"success": False, "error": f"Session not found for channel {channel_id}"}

            # –§–æ—Ä–º–∏—Ä—É–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            inline_keyboard = {
                "inline_keyboard": buttons
            }

            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                "reply_markup": inline_keyboard
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            data.update(kwargs)
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–Ω–æ–ø–∫–∏ —Å parse_mode={data.get('parse_mode')}")

            async with session.post(url, json=data) as response:
                result = await response.json()

                if result.get("ok"):
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {channel_id} —Å –ø–∞—É–∑–æ–π {delay_seconds}—Å (HTML —Ä–∞–∑–º–µ—Ç–∫–∞)")
                    return {"success": True, "result": result["result"]}
                else:
                    error_msg = result.get("description", "Unknown error")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏: {error_msg}")
                    return {"success": False, "error": error_msg}

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            return {"success": False, "error": str(e)}
    
    async def edit_message(self, channel_id: str, chat_id: str, message_id: int, text: str, **kwargs) -> Dict[str, Any]:
        """
        –ü—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API.
        
        –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Ç–æ–∫–µ–Ω –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–∞–Ω–∞–ª–∞!
        """
        try:
            channel_data = self.channels.get(channel_id)
            if not channel_data:
                return {"success": False, "error": f"Channel {channel_id} not found"}
            
            # –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–∞–Ω–∞–ª–∞
            bot_token = channel_data.get("telegram_bot_token")
            
            if not bot_token:
                return {"success": False, "error": f"Bot token not found for channel {channel_id}"}
            
            session = self.telegram_sessions.get(channel_id)
            if not session:
                return {"success": False, "error": f"Session not found for channel {channel_id}"}
            
            # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Telegram Bot API
            url = f"https://api.telegram.org/bot{bot_token}/editMessageText"
            data = {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": text,
                **kwargs
            }
            
            async with session.post(url, json=data) as response:
                result = await response.json()
                
                if result.get("ok"):
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {channel_id}")
                    return {"success": True, "result": result["result"]}
                else:
                    error_msg = result.get("description", "Unknown error")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {error_msg}")
                    return {"success": False, "error": error_msg}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            return {"success": False, "error": str(e)}

    async def send_document(self, channel_id: str, chat_id: str, document_path: str, caption: str = None, **kwargs) -> Dict[str, Any]:
        """
        –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Telegram Bot API.
        
        –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Ç–æ–∫–µ–Ω –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–∞–Ω–∞–ª–∞!
        """
        try:
            channel_data = self.channels.get(channel_id)
            if not channel_data:
                return {"success": False, "error": f"Channel {channel_id} not found"}
            
            # –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–∞–Ω–∞–ª–∞
            bot_token = channel_data.get("telegram_bot_token")
            
            if not bot_token:
                return {"success": False, "error": f"Bot token not found for channel {channel_id}"}
            
            session = self.telegram_sessions.get(channel_id)
            if not session:
                return {"success": False, "error": f"Session not found for channel {channel_id}"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(document_path):
                return {"success": False, "error": f"File not found: {document_path}"}
            
            # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Telegram Bot API
            url = f"https://api.telegram.org/bot{bot_token}/sendDocument"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è multipart/form-data
            data = aiohttp.FormData()
            data.add_field('chat_id', chat_id)
            
            if caption:
                data.add_field('caption', caption)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            for key, value in kwargs.items():
                if key not in ['chat_id', 'caption']:
                    data.add_field(key, str(value))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            filename = os.path.basename(document_path)
            with open(document_path, 'rb') as file:
                data.add_field('document', file, filename=filename)
                
                async with session.post(url, data=data) as response:
                    result = await response.json()
                    
                    if result.get("ok"):
                        logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {channel_id}: {filename}")
                        return {"success": True, "result": result["result"]}
                    else:
                        error_msg = result.get("description", "Unknown error")
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {error_msg}")
                        return {"success": False, "error": error_msg}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            return {"success": False, "error": str(e)}

    async def forward_message(self, channel_id: str, chat_id: str, from_chat_id: str, message_id: int, **kwargs) -> Dict[str, Any]:
        """
        –ü—Ä—è–º–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API.
        
        –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Ç–æ–∫–µ–Ω –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–∞–Ω–∞–ª–∞!
        """
        try:
            channel_data = self.channels.get(channel_id)
            if not channel_data:
                return {"success": False, "error": f"Channel {channel_id} not found"}
            
            # –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–∞–Ω–∞–ª–∞
            bot_token = channel_data.get("telegram_bot_token")
            
            if not bot_token:
                return {"success": False, "error": f"Bot token not found for channel {channel_id}"}
            
            session = self.telegram_sessions.get(channel_id)
            if not session:
                return {"success": False, "error": f"Session not found for channel {channel_id}"}
            
            # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Telegram Bot API
            url = f"https://api.telegram.org/bot{bot_token}/forwardMessage"
            data = {
                "chat_id": chat_id,
                "from_chat_id": from_chat_id,
                "message_id": message_id,
                **kwargs
            }
            
            async with session.post(url, json=data) as response:
                result = await response.json()
                
                if result.get("ok"):
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {channel_id}")
                    return {"success": True, "result": result["result"]}
                else:
                    error_msg = result.get("description", "Unknown error")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {error_msg}")
                    return {"success": False, "error": error_msg}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            return {"success": False, "error": str(e)}

    async def copy_message(self, channel_id: str, chat_id: str, from_chat_id: str, message_id: int, hide_sender: bool = True, remove_caption: bool = True, **kwargs) -> Dict[str, Any]:
        """
        –ö–æ–ø–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫—Ä—ã—Ç–æ–π –ø–æ–¥–ø–∏—Å—å—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—É–∑—ã –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∏—Ç–º–∞.
        
        –≠—Ç–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ forward_message, –∫–æ—Ç–æ—Ä–∞—è —Å–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ.
        –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤–∏–¥–µ–æ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –ë–ï–ó –ø–æ–¥–ø–∏—Å–∏ –ø–æ–¥ –≤–∏–¥–µ–æ.
        
        Args:
            remove_caption: –ï—Å–ª–∏ True, —É–±–∏—Ä–∞–µ—Ç caption (–ø–æ–¥–ø–∏—Å—å –ø–æ–¥ –≤–∏–¥–µ–æ)
        """
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
            delay_seconds = kwargs.pop("delay_seconds", 1.0)
            if delay_seconds > 0:
                await asyncio.sleep(delay_seconds)
                logger.info(f"‚è∞ –ü–∞—É–∑–∞ {delay_seconds}—Å –ø–µ—Ä–µ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è")
            
            channel_data = self.channels.get(channel_id)
            if not channel_data:
                logger.error(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {"success": False, "error": f"–ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                
            bot_token = channel_data.get("telegram_bot_token")
            if not bot_token:
                logger.error(f"‚ùå –¢–æ–∫–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {"success": False, "error": f"–¢–æ–∫–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –£–±–∏—Ä–∞–µ–º caption –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if remove_caption:
                kwargs.pop("caption", None)  # –£–±–∏—Ä–∞–µ–º –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
                # –î–ª—è API –Ω—É–∂–Ω–æ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å —á—Ç–æ caption –Ω–µ –Ω—É–∂–µ–Ω
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            payload = {
                "chat_id": chat_id,
                "from_chat_id": from_chat_id,
                "message_id": message_id,
                **kwargs
            }
            
            # –£–ë–ò–†–ê–ï–ú CAPTION –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if remove_caption:
                payload.pop("caption", None)
                # –í copyMessage API –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —è–≤–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è caption
                # –ù–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                
            url = f"https://api.telegram.org/bot{bot_token}/copyMessage"
            
            logger.info(f"üìã –ö–æ–ø–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ {from_chat_id} –≤ {chat_id} {'–ë–ï–ó –ø–æ–¥–ø–∏—Å–∏' if remove_caption else '—Å –ø–æ–¥–ø–∏—Å—å—é'}")
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get("ok"):
                            message_result = result.get("result", {})
                            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ {'–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏' if remove_caption else ''}")
                            return {"success": True, "result": message_result}
                        else:
                            error_msg = result.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {error_msg}")
                            return {"success": False, "error": error_msg}
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status}: {error_text}")
                        return {"success": False, "error": f"HTTP {response.status}: {error_text}"}
                        
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ copy_message: {e}")
            return {"success": False, "error": str(e)}

    async def send_message_with_delay(self, channel_id: str, chat_id: str, text: str, delay_seconds: float = 1.5, **kwargs) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∏—Ç–º–∞ –æ–±—â–µ–Ω–∏—è.
        
        Args:
            delay_seconds: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if delay_seconds > 0:
            await asyncio.sleep(delay_seconds)
            
        return await self.send_message(channel_id, chat_id, text, **kwargs)

    async def send_buttons_with_delay(self, channel_id: str, chat_id: str, text: str, buttons: List[List[Dict[str, str]]], delay_seconds: float = 1.5, **kwargs) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.
        """
        if delay_seconds > 0:
            await asyncio.sleep(delay_seconds)
            
        return await self.send_buttons(channel_id, chat_id, text, buttons, **kwargs)

    async def copy_message_with_delay(self, channel_id: str, chat_id: str, from_chat_id: str, message_id: int, delay_seconds: float = 1.5, **kwargs) -> Dict[str, Any]:
        """
        –ö–æ–ø–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ —Å–∫—Ä—ã—Ç–æ–π –ø–æ–¥–ø–∏—Å—å—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
        –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤–∏–¥–µ–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –∞–≤—Ç–æ—Ä–∞.
        """
        if delay_seconds > 0:
            await asyncio.sleep(delay_seconds)
            
        return await self.copy_message(channel_id, chat_id, from_chat_id, message_id, **kwargs)

    def format_telegram_text(self, text: str, format_type: str = "HTML") -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è Telegram —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π.
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø—Å–µ–≤–¥–æ-Markdown
            format_type: –¢–∏–ø —Ä–∞–∑–º–µ—Ç–∫–∏ (HTML, MarkdownV2, Markdown)
        """
        if format_type == "HTML":
            # –ü—Ä–æ—Å—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML
            # Telegram API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é HTML —Ä–∞–∑–º–µ—Ç–∫—É
            text = self._convert_markdown_to_html(text)
            return text
        elif format_type == "MarkdownV2":
            # –î–ª—è MarkdownV2 —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ç–µ—Ö —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º
            text = self._escape_markdownv2(text)
            return text
        else:
            return text
    
    def _convert_markdown_to_html(self, text: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π Markdown –≤ HTML –¥–ª—è Telegram"""
        import re
        # [text](url) -> <a href="url">text</a>
        text = re.sub(r'\[([^\]]+?)\]\(([^\)]+?)\)', r'<a href="\2">\1</a>', text)
        # **–∂–∏—Ä–Ω—ã–π** -> <b>–∂–∏—Ä–Ω—ã–π</b>
        text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
        # *–∫—É—Ä—Å–∏–≤* -> <i>–∫—É—Ä—Å–∏–≤</i> (–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –¥–≤–æ–π–Ω–∞—è –∑–≤–µ–∑–¥–æ—á–∫–∞)
        text = re.sub(r'(?<!\*)\*([^*]+?)\*(?!\*)', r'<i>\1</i>', text)
        # `–∫–æ–¥` -> <code>–∫–æ–¥</code>
        text = re.sub(r'`(.*?)`', r'<code>\1</code>', text)
        return text
    
    def _escape_markdownv2(self, text: str) -> str:
        """–ü—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2"""
        # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ MarkdownV2
        escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        for char in escape_chars:
            text = text.replace(char, f'\\{char}')
        return text

    async def send_video_with_caption(self, channel_id: str, chat_id: str, video_file_id: str, caption: str = None, delay_seconds: float = 1.5, **kwargs) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∑–∞–¥–µ—Ä–∂–∫–æ–π.
        
        Args:
            video_file_id: File ID –≤–∏–¥–µ–æ –≤ Telegram
            caption: –ü–æ–¥–ø–∏—Å—å –∫ –≤–∏–¥–µ–æ
            delay_seconds: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        """
        try:
            if delay_seconds > 0:
                await asyncio.sleep(delay_seconds)

            channel_data = self.channels.get(channel_id)
            if not channel_data:
                return {"success": False, "error": f"Channel {channel_id} not found"}

            bot_token = channel_data.get("telegram_bot_token")
            if not bot_token:
                return {"success": False, "error": f"Bot token not found for channel {channel_id}"}

            session = self.telegram_sessions.get(channel_id)
            if not session:
                return {"success": False, "error": f"Session not found for channel {channel_id}"}

            url = f"https://api.telegram.org/bot{bot_token}/sendVideo"
            data = {
                "chat_id": chat_id,
                "video": video_file_id,
            }
            
            if caption:
                data["caption"] = caption
                
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            data.update(kwargs)

            async with session.post(url, json=data) as response:
                result = await response.json()

                if result.get("ok"):
                    logger.info(f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {channel_id}")
                    return {"success": True, "result": result["result"]}
                else:
                    error_msg = result.get("description", "Unknown error")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {error_msg}")
                    return {"success": False, "error": error_msg}

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            return {"success": False, "error": str(e)}

    def get_active_channels(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        return list(self.channels.keys())
    
    def get_channel_info(self, channel_id: str) -> Optional[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        return self.channels.get(channel_id)
    
    async def _load_specific_channel(self, channel_id: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –∏–∑ –ë–î."""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ –ë–î
            if not self.global_engine:
                logger.error("‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–∞")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ MongoDB –ø–ª–∞–≥–∏–Ω
            step = {
                "id": "find_channel",
                "type": "mongo_find_documents",
                "params": {
                    "collection": "channels",
                    "filter": {"channel_id": channel_id},
                    "output_var": "find_result"
                }
            }
            context = {}
            result_context = await self.global_engine.execute_step(step, context)
            result = result_context.get("find_result", {})
            
            if result.get("success") and result.get("documents"):
                channel_doc = result["documents"][0]
                self.channels[channel_id] = channel_doc
                
                # –ù–û–í–ò–ù–ö–ê: –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é –¥–ª—è Telegram –∫–∞–Ω–∞–ª–æ–≤ (–¥–ª—è channel_action)
                if channel_doc.get("channel_type") == "telegram" and channel_doc.get("telegram_bot_token"):
                    if channel_id not in self.telegram_sessions:
                        session = aiohttp.ClientSession()
                        self.telegram_sessions[channel_id] = session
                        logger.info(f"üîå HTTP —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                
                logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω –∫–∞–Ω–∞–ª: {channel_id} (—Ç–∏–ø: {channel_doc.get('channel_type', 'unknown')})")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id} –∏–∑ –ë–î: {e}")
            return False
            
    async def _create_channel_engine(self, channel_id: str):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–≤–∏–∂–∫–æ–º."""
        try:
            if channel_id in self.channels:
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É–∂–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–≤–∏–∂–∫–æ–º")
                return True
                
            logger.info(f"üîß –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∫–∞–Ω–∞–ª {channel_id} –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–≤–∏–∂–∫–æ–º")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–≤–∏–∂–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π!
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            success = await self._load_specific_channel(channel_id)
            
            if success:
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–≤–∏–∂–∫–æ–º")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª {channel_id}")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            return False
            
    async def _stop_channel_polling(self, channel_id: str):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ–ª–ª–∏–Ω–≥–∞
            if channel_id in self.polling_tasks:
                task = self.polling_tasks[channel_id]
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
                del self.polling_tasks[channel_id]
                logger.info(f"‚èπÔ∏è –ü–æ–ª–ª–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏—é
            if channel_id in self.telegram_sessions:
                session = self.telegram_sessions[channel_id]
                await session.close()
                del self.telegram_sessions[channel_id]
                logger.info(f"üîå –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
            # –û—á–∏—â–∞–µ–º last_update_id –¥–ª—è –∫–∞–Ω–∞–ª–∞
            if channel_id in self.last_update_ids:
                del self.last_update_ids[channel_id]
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —É–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ channels - –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–µ–Ω
            # –ö–∞–Ω–∞–ª –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}") 

    async def stop_channel(self, channel_id: str) -> bool:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞.
        
        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        """
        try:
            if channel_id not in self.channels:
                logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            if channel_id in self.active_channels:
                del self.active_channels[channel_id]
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
            await self._stop_channel_polling(channel_id)
            
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            return False

    async def _reset_user_state(self, channel_id: str, user_id: str):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–¥–∞–ª—è–µ—Ç –∏–∑ –ë–î)."""
        try:
            if not self.global_engine:
                logger.error("‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            step = {
                "id": "reset_user_state",
                "type": "mongo_delete_document",
                "params": {
                    "collection": "user_states",
                    "filter": {
                        "channel_id": channel_id,
                        "user_id": user_id
                    },
                    "output_var": "delete_result"
                }
            }
            
            context = {}
            result_context = await self.global_engine.execute_step(step, context)
            result = result_context.get("delete_result", {})
            
            if result.get("success"):
                logger.info(f"üóëÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω–æ")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result.get('error', 'Unknown error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}") 