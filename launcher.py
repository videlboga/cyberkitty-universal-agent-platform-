#!/usr/bin/env python3
"""
üöÄ KittyCore 3.0 Unified Launcher

–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç—ã:
- –í–≤–æ–¥ –∑–∞–¥–∞—á–∏
- –í—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–±–æ—Ç—ã  
- –í—ã–≤–æ–¥ –ø—É—Ç–µ–π –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
- Human-in-the-loop –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

–ü–†–ò–ù–¶–ò–ü: "–ü—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ"
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ kittycore
sys.path.insert(0, str(Path(__file__).parent))

from loguru import logger
from kittycore.core.orchestrator import OrchestratorAgent, OrchestratorConfig


class SimpleLauncher:
    """
    üöÄ –ü—Ä–æ—Å—Ç–æ–π launcher –¥–ª—è KittyCore 3.0
    
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –µ–¥–∏–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã:
    - Obsidian-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    - –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
    - –ü—É—Ç–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    - Human-in-the-loop
    """
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–¥–∏–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self.vault_path = Path("./vault")
        self.vault_path.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        folders = ["tasks", "agents", "results", "system", "coordination", "human"]
        for folder in folders:
            (self.vault_path / folder).mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å Obsidian-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
        config = OrchestratorConfig(
            orchestrator_id="unified_launcher",
            enable_obsidian=True,
            obsidian_vault_path=str(self.vault_path),
            enable_human_intervention=True,
            enable_metrics=True,
            enable_vector_memory=True,
            enable_quality_control=True
        )
        
        self.orchestrator = OrchestratorAgent(config)
        
        logger.info(f"üöÄ SimpleLauncher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üìÅ –ï–¥–∏–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {self.vault_path}")
    
    async def run_task(self, task: str) -> Dict[str, Any]:
        """
        üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–∞
        
        Args:
            task: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—É—Ç—è–º–∏ –∫ —Ñ–∞–π–ª–∞–º
        """
        print(f"\nüéØ –ó–ê–î–ê–ß–ê: {task}")
        print("=" * 60)
        
        start_time = datetime.now()
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            result = await self.orchestrator.solve_task(task, {"user_id": "launcher_user"})
            
            # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã
            self._display_process(result)
            
            # –í—ã–≤–æ–¥–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            created_files = self._collect_created_files()
            self._display_results(created_files)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result["created_files"] = created_files
            result["vault_path"] = str(self.vault_path)
            
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            print(f"\n‚úÖ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê –∑–∞ {duration:.2f}—Å")
            print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {self.vault_path}")
            
            return result
            
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            raise e
    
    def _display_process(self, result: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–±–æ—Ç—ã"""
        print("\nüìä –ü–†–û–¶–ï–°–° –†–ê–ë–û–¢–´:")
        print("-" * 40)
        
        # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity = result.get("complexity_analysis", {})
        print(f"üîç –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity.get('complexity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"ü§ñ –ê–≥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {result.get('agents_created', 0)}")
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∏
        subtasks = result.get("subtasks", [])
        if subtasks:
            print(f"üîÑ –ü–æ–¥–∑–∞–¥–∞—á: {len(subtasks)}")
            for i, subtask in enumerate(subtasks[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   {i}. {subtask.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞')[:50]}...")
        
        # –ö–æ–º–∞–Ω–¥–∞
        team = result.get("team", {})
        if team:
            print(f"üë• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: {team.get('team_size', 0)}")
        
        # Workflow
        workflow = result.get("workflow", {})
        if workflow:
            print(f"üìã –®–∞–≥–æ–≤ workflow: {len(workflow.get('steps', []))}")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        execution = result.get("execution", {})
        if execution:
            print(f"‚ö° –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    def _collect_created_files(self) -> list:
        """–°–±–æ—Ä –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        created_files = []
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        results_folder = self.vault_path / "results"
        if results_folder.exists():
            for file_path in results_folder.rglob("*"):
                if file_path.is_file():
                    created_files.append({
                        "path": str(file_path),
                        "name": file_path.name,
                        "size": file_path.stat().st_size,
                        "type": "result"
                    })
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –∞–≥–µ–Ω—Ç–æ–≤
        agents_folder = self.vault_path / "agents"
        if agents_folder.exists():
            for file_path in agents_folder.rglob("*"):
                if file_path.is_file() and file_path.suffix in ['.md', '.txt', '.py', '.html', '.json']:
                    created_files.append({
                        "path": str(file_path),
                        "name": file_path.name,
                        "size": file_path.stat().st_size,
                        "type": "agent_output"
                    })
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ outputs (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        outputs_folder = Path("./outputs")
        if outputs_folder.exists():
            for file_path in outputs_folder.rglob("*"):
                if file_path.is_file():
                    created_files.append({
                        "path": str(file_path),
                        "name": file_path.name,
                        "size": file_path.stat().st_size,
                        "type": "legacy_output"
                    })
        
        return created_files
    
    def _display_results(self, created_files: list):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
        print("-" * 40)
        
        if not created_files:
            print("‚ùå –§–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        by_type = {}
        for file_info in created_files:
            file_type = file_info["type"]
            if file_type not in by_type:
                by_type[file_type] = []
            by_type[file_type].append(file_info)
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ –≥—Ä—É–ø–ø–∞–º
        for file_type, files in by_type.items():
            type_names = {
                "result": "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                "agent_output": "ü§ñ –í—ã—Ö–æ–¥—ã –∞–≥–µ–Ω—Ç–æ–≤", 
                "legacy_output": "üì¶ Legacy –≤—ã—Ö–æ–¥—ã"
            }
            print(f"\n{type_names.get(file_type, file_type)}:")
            
            for file_info in files:
                size_kb = file_info["size"] / 1024
                print(f"   üìÑ {file_info['name']} ({size_kb:.1f} KB)")
                print(f"      {file_info['path']}")
        
        print(f"\nüìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(created_files)}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è launcher'–∞"""
    print("üöÄ KittyCore 3.0 Unified Launcher")
    print("=" * 50)
    print("–ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç—ã")
    print("Obsidian-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ + Human-in-the-loop")
    print()
    
    launcher = SimpleLauncher()
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    while True:
        try:
            print("\n" + "="*50)
            task = input("üéØ –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
            
            if task.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not task:
                print("‚ùå –ü—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞")
                continue
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            result = await launcher.run_task(task)
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            print("\n" + "-"*30)
            continue_work = input("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É? (y/n): ").strip().lower()
            if continue_work in ['n', 'no', '–Ω–µ—Ç']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.remove()
    logger.add(
        sys.stderr,
        level="INFO",
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan> | <level>{message}</level>",
        colorize=True
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    asyncio.run(main()) 