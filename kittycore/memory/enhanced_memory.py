"""
üß† Enhanced Memory - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è A-MEM –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏ KittyCore.
–ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π VectorMemoryStore –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∞–≥–µ–Ω—Ç–Ω—É—é –ø–∞–º—è—Ç—å.

–ü—Ä–∏–Ω—Ü–∏–ø: "–û–¥–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å" üöÄ
"""

import asyncio
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime

from .amem_integration import KittyCoreMemorySystem, get_enhanced_memory_system
from .memory_evolution import TeamMemoryEvolution
from .collective_memory import CollectiveMemory

logger = logging.getLogger(__name__)

class EnhancedCollectiveMemory(CollectiveMemory):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å —Å A-MEM –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    
    def __init__(self, team_id: str, vault_path: str = "obsidian_vault"):
        super().__init__(team_id)
        
        # A-MEM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        self.enhanced_memory = get_enhanced_memory_system(vault_path)
        self.memory_evolution = TeamMemoryEvolution(self.enhanced_memory)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è A-MEM vs fallback
        self.amem_enabled = True
        
        logger.info(f"üß† EnhancedCollectiveMemory –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: {team_id}")
    
    async def store(self, content: str, agent_id: str, tags: List[str] = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å A-MEM —ç–≤–æ–ª—é—Ü–∏–µ–π"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º A-MEM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            memory_id = await self.enhanced_memory.agent_remember(
                agent_id=agent_id,
                memory=content,
                context={
                    "team_id": self.team_id,
                    "category": "collective_memory",
                    "tags": tags or [],
                    "timestamp": datetime.now().isoformat()
                }
            )
            
            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            await super().store(content, agent_id, tags)
            
            logger.info(f"üìù A-MEM —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {memory_id} (–∞–≥–µ–Ω—Ç: {agent_id})")
            return memory_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ A-MEM —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
            return await super().store(content, agent_id, tags)
    
    async def search(self, query: str, limit: int = 5) -> List[Any]:
        """–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ A-MEM"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ A-MEM
            amem_results = await self.enhanced_memory.collective_search(
                query=query,
                team_id=self.team_id
            )
            
            if amem_results:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º A-MEM —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                converted_results = []
                for result in amem_results[:limit]:
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º TeamMemoryEntry –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    class FakeEntry:
                        def __init__(self, data):
                            self.content = data.get('content', '')
                            self.author_agent = data.get('agent_id', 'unknown')
                            self.importance = 0.8  # –≤—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è A-MEM —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                            
                    converted_results.append(FakeEntry(result))
                
                logger.info(f"üîç A-MEM –ø–æ–∏—Å–∫: {len(converted_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return converted_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ A-MEM –ø–æ–∏—Å–∫–∞: {e}")
        
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
        logger.info("üîÑ Fallback –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫")
        return await super().search(query, limit)
    
    async def evolve_memory(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–∏ –ø–∞–º—è—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            evolution_result = await self.memory_evolution.evolve_team_memory(self.team_id)
            logger.info(f"üß¨ –≠–≤–æ–ª—é—Ü–∏—è –ø–∞–º—è—Ç–∏ –∫–æ–º–∞–Ω–¥—ã {self.team_id}: {evolution_result}")
            return evolution_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
            return {"status": "error", "error": str(e)}

class SmartMemoryContext:
    """–£–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ A-MEM"""
    
    def __init__(self, enhanced_memory: KittyCoreMemorySystem):
        self.enhanced_memory = enhanced_memory
    
    async def build_context_for_agent(self, agent_id: str, current_task: str, 
                                    team_id: str = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        try:
            # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –ª–∏—á–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ –∞–≥–µ–Ω—Ç–∞
            personal_memories = await self.enhanced_memory.collective_search(
                query=current_task,
                team_id=agent_id  # –ª–∏—á–Ω–∞—è –ø–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–∞
            )
            
            # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
            team_memories = []
            if team_id:
                team_memories = await self.enhanced_memory.collective_search(
                    query=current_task,
                    team_id=team_id
                )
            
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context_parts = ["üß† –ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ü–ê–ú–Ø–¢–ò:"]
            
            if personal_memories:
                context_parts.append("\nüìù –í–∞—à –æ–ø—ã—Ç:")
                for memory in personal_memories[:2]:  # —Ç–æ–ø-2 –ª–∏—á–Ω—ã—Ö
                    context_parts.append(f"‚Ä¢ {memory.get('content', '')[:150]}...")
            
            if team_memories:
                context_parts.append("\nüë• –û–ø—ã—Ç –∫–æ–º–∞–Ω–¥—ã:")
                for memory in team_memories[:2]:  # —Ç–æ–ø-2 –∫–æ–º–∞–Ω–¥–Ω—ã—Ö
                    if memory.get('agent_id') != agent_id:  # –∏—Å–∫–ª—é—á–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ
                        context_parts.append(f"‚Ä¢ {memory.get('content', '')[:150]}...")
            
            if not personal_memories and not team_memories:
                context_parts.append("\nüÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –±–µ–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–ø—ã—Ç–∞.")
            
            return "\n".join(context_parts)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return "üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º)"


# === –§–ê–ë–†–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def create_enhanced_collective_memory(team_id: str, 
                                    vault_path: str = "obsidian_vault") -> EnhancedCollectiveMemory:
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    return EnhancedCollectiveMemory(team_id, vault_path)

def create_smart_memory_context(vault_path: str = "obsidian_vault") -> SmartMemoryContext:
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–∞–º—è—Ç–∏"""
    enhanced_memory = get_enhanced_memory_system(vault_path)
    return SmartMemoryContext(enhanced_memory) 