"""
üß™ –¢–µ—Å—Ç—ã DatabaseTool

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.
–ß–∞—Å—Ç—å 1: SQLite —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
"""

import pytest
import asyncio
import tempfile
import os
from pathlib import Path

from kittycore.tools.database_tool import (
    DatabaseTool,
    DatabaseConnection,
    create_database_tool,
    create_sqlite_tool
)

class TestDatabaseConnection:
    """–¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    
    def test_sqlite_config(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SQLite"""
        config = DatabaseConnection(db_type='sqlite', database='test.db')
        assert config.db_type == 'sqlite'
        assert config.database == 'test.db'
    
    def test_postgresql_config(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ PostgreSQL"""
        config = DatabaseConnection(
            db_type='postgresql',
            host='localhost',
            database='testdb',
            username='user',
            password='pass'
        )
        assert config.db_type == 'postgresql'
        assert config.host == 'localhost'
        assert config.database == 'testdb'
    
    def test_invalid_config(self):
        """–¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with pytest.raises(ValueError):
            DatabaseConnection(db_type='postgresql')  # –ë–µ–∑ host –∏ database

@pytest.mark.asyncio
class TestDatabaseTool:
    """–¢–µ—Å—Ç—ã DatabaseTool"""
    
    @pytest.fixture
    async def temp_db_file(self):
        """–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
            temp_path = f.name
        
        yield temp_path
        
        # Cleanup
        if os.path.exists(temp_path):
            os.unlink(temp_path)
    
    @pytest.fixture
    async def sqlite_tool(self, temp_db_file):
        """DatabaseTool —Å SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
        try:
            return create_sqlite_tool(database=temp_db_file)
        except ImportError:
            pytest.skip("SQLAlchemy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def test_create_tool_without_dependencies(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        # –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –¥–∞–∂–µ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        tool = DatabaseTool()
        assert isinstance(tool, DatabaseTool)
        assert len(tool.connections) == 0
    
    async def test_sqlite_connection(self, sqlite_tool):
        """–¢–µ—Å—Ç SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        assert len(sqlite_tool.connections) == 1
        assert 'default' in sqlite_tool.connections
        
        conn_info = sqlite_tool.connections['default']
        assert conn_info['type'] == 'sql'
        assert 'engine' in conn_info
        assert 'session_maker' in conn_info
    
    async def test_create_table_and_insert(self, sqlite_tool):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
        create_result = await sqlite_tool.execute_sql(
            "CREATE TABLE test_users (id INTEGER PRIMARY KEY, name TEXT, email TEXT)"
        )
        
        assert create_result.success == True
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {create_result.message}")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        insert_result = await sqlite_tool.execute_sql(
            "INSERT INTO test_users (name, email) VALUES ('–ê–Ω–¥—Ä–µ–π', 'andrey@cyberkitty.ru')"
        )
        
        assert insert_result.success == True
        assert insert_result.data['affected_rows'] == 1
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã: {insert_result.message}")
    
    async def test_select_data(self, sqlite_tool):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        await sqlite_tool.execute_sql(
            "CREATE TABLE test_products (id INTEGER PRIMARY KEY, name TEXT, price REAL)"
        )
        
        await sqlite_tool.execute_sql(
            "INSERT INTO test_products (name, price) VALUES ('KittyCore License', 99.99)"
        )
        
        # –í—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        select_result = await sqlite_tool.execute_sql(
            "SELECT * FROM test_products"
        )
        
        assert select_result.success == True
        assert select_result.data['data'] is not None
        assert len(select_result.data['data']) == 1
        
        product = select_result.data['data'][0]
        assert product['name'] == 'KittyCore License'
        assert product['price'] == 99.99
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω—ã: {product}")
    
    async def test_list_tables(self, sqlite_tool):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü"""
        # –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü
        await sqlite_tool.execute_sql("CREATE TABLE users (id INTEGER, name TEXT)")
        await sqlite_tool.execute_sql("CREATE TABLE products (id INTEGER, title TEXT)")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        tables_result = await sqlite_tool.list_tables()
        
        assert tables_result.success == True
        assert tables_result.data['total_tables'] == 2
        
        table_names = [t['name'] for t in tables_result.data['tables']]
        assert 'users' in table_names
        assert 'products' in table_names
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {table_names}")
    
    async def test_sql_validation(self, sqlite_tool):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –û–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        dangerous_result = await sqlite_tool.execute_sql("DROP TABLE users")
        
        assert dangerous_result.success == False
        assert "–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å" in dangerous_result.error
        
        print(f"‚úÖ –û–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {dangerous_result.error}")
    
    async def test_connect_database_action(self, temp_db_file):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è connect_database"""
        tool = DatabaseTool()
        
        try:
            result = await tool.connect_database(
                db_type='sqlite',
                connection_name='test_conn',
                database=temp_db_file
            )
            
            assert result.success == True
            assert result.data['connection_name'] == 'test_conn'
            assert result.data['db_type'] == 'sqlite'
            
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {result.message}")
            
        except Exception as e:
            if "SQLAlchemy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" in str(e):
                pytest.skip("SQLAlchemy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                raise
    
    async def test_get_connection_info(self, sqlite_tool):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"""
        info_result = await sqlite_tool.get_connection_info()
        
        assert info_result.success == True
        assert info_result.data['connection_name'] == 'default'
        assert info_result.data['db_type'] == 'sqlite'
        assert info_result.data['connection_type'] == 'sql'
        
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {info_result.data}")
    
    async def test_nonexistent_connection(self, sqlite_tool):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
        result = await sqlite_tool.execute_sql("SELECT 1", connection_name='nonexistent')
        
        assert result.success == False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in result.error
    
    async def test_execute_action_method(self, sqlite_tool):
        """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ execute_action"""
        # –¢–µ—Å—Ç execute_sql —á–µ—Ä–µ–∑ execute_action
        result = await sqlite_tool.execute_action(
            "execute_sql",
            query="SELECT 1 as test_column"
        )
        
        assert result.success == True
        assert result.data['data'][0]['test_column'] == 1
        
        print(f"‚úÖ execute_action —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.data}")
    
    async def test_unknown_action(self, sqlite_tool):
        """–¢–µ—Å—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        result = await sqlite_tool.execute_action("unknown_action")
        
        assert result.success == False
        assert "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ" in result.error

class TestFactoryFunctions:
    """–¢–µ—Å—Ç—ã —Ñ–∞–±—Ä–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def test_create_database_tool(self):
        """–¢–µ—Å—Ç create_database_tool"""
        try:
            tool = create_database_tool('sqlite', database='test.db')
            assert isinstance(tool, DatabaseTool)
            print("‚úÖ create_database_tool —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except ImportError:
            pytest.skip("SQLAlchemy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def test_create_sqlite_tool(self):
        """–¢–µ—Å—Ç create_sqlite_tool"""
        try:
            tool = create_sqlite_tool('test.db')
            assert isinstance(tool, DatabaseTool)
            print("‚úÖ create_sqlite_tool —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except ImportError:
            pytest.skip("SQLAlchemy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    async def run_tests():
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ DatabaseTool...")
        
        try:
            # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            tool = DatabaseTool()
            print("‚úÖ DatabaseTool —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
            actions = tool.get_available_actions()
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {len(actions)}")
            
            # –¢–µ—Å—Ç 3: –¢–µ—Å—Ç –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            try:
                sqlite_tool = create_sqlite_tool(':memory:')
                print("‚úÖ SQLite –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
                
                # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                result = await sqlite_tool.execute_sql(
                    "CREATE TABLE test (id INTEGER, name TEXT)"
                )
                print(f"‚úÖ CREATE TABLE: {result.success}")
                
                # –¢–µ—Å—Ç 5: –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                result = await sqlite_tool.execute_sql(
                    "INSERT INTO test (name) VALUES ('KittyCore')"
                )
                print(f"‚úÖ INSERT: {result.success}, —Å—Ç—Ä–æ–∫: {result.data.get('affected_rows', 0)}")
                
                # –¢–µ—Å—Ç 6: –í—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                result = await sqlite_tool.execute_sql("SELECT * FROM test")
                print(f"‚úÖ SELECT: {result.success}, –∑–∞–ø–∏—Å–µ–π: {len(result.data.get('data', []))}")
                
            except ImportError as e:
                print(f"‚ö†Ô∏è SQLAlchemy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
        
        print("üéâ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(run_tests())