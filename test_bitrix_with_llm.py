#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢ –ë–ò–¢–†–ò–ö–°24 –° LLM - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–ê–õ–ò–î–ê–¢–û–†

–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ LLM
"""

import asyncio
import os
from pathlib import Path

# –ü–†–ê–í–ò–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø LLM
os.environ["TIMEOUT"] = "60"  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥
os.environ["MAX_TOKENS"] = "8000"  # –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
os.environ["TEMPERATURE"] = "0.1"  # –ù–µ–±–æ–ª—å—à–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

# –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
FAST_MODEL = "anthropic/claude-3-haiku"

async def test_bitrix_with_fixed_validator():
    print("üéØ –¢–ï–°–¢ –ë–ò–¢–†–ò–ö–°24 –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú –í–ê–õ–ò–î–ê–¢–û–†–û–ú")
    print("="*60)
    print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   üïê TIMEOUT: {os.environ.get('TIMEOUT')}—Å")
    print(f"   üî§ MAX_TOKENS: {os.environ.get('MAX_TOKENS')}")
    print(f"   üå°Ô∏è TEMPERATURE: {os.environ.get('TEMPERATURE')}")
    print(f"   üß† MODEL: {FAST_MODEL}")
    print(f"   üîë API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('OPENROUTER_API_KEY') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    
    task = """–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∞ –±–∏—Ç—Ä–∏–∫—Å 24, –Ω–∞–π–¥–∏ —Ç–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö, —Å–æ—Å—Ç–∞–≤—å –æ—Ç—á—ë—Ç –æ —Ç–æ–º, –∫–∞–∫–∏–µ —Ç–∞–º –µ—Å—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ —Å–ª–æ–∂–Ω—ã –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–º–µ—é—Ç. –ü–æ—Å–ª–µ —Å–¥–µ–ª–∞–π 3 –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±—ã—Å—Ç—Ä–æ —Å —É–ª—É—á—à–µ–Ω–∏–µ–º UX"""
    
    print(f"\nüìã –ó–ê–î–ê–ß–ê:")
    print(f"   {task}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UnifiedOrchestrator
        import sys
        sys.path.append("kittycore")
        from kittycore.core.unified_orchestrator import create_unified_orchestrator
        
        print(f"\nüöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´...")
        
        # –°–æ–∑–¥–∞—ë–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        from kittycore.core.unified_orchestrator import UnifiedConfig
        config = UnifiedConfig()
        config.timeout = 120  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≤—Å—é –∑–∞–¥–∞—á—É
        
        orchestrator = create_unified_orchestrator(config)
        
        print(f"   ‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        print(f"   üîÑ –ó–∞–ø—É—Å–∫ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        start_time = asyncio.get_event_loop().time()
        result = await orchestrator.solve_task(task)
        end_time = asyncio.get_event_loop().time()
        
        duration = end_time - start_time
        
        print(f"\nüèÅ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f}—Å")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        validation_result = result.get('validation_result', {})
        quality_score = validation_result.get('quality_score', 0)
        
        print(f"   üìà –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.3f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        created_files = result.get('created_files', [])
        print(f"   üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(created_files)}")
        
        for file_path in created_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            if os.path.exists(file_path):
                size = os.path.getsize(file_path)
                print(f"      üìÑ {file_path} ({size} –±–∞–π—Ç)")
            else:
                print(f"      ‚ùå {file_path} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
        
        if len(created_files) > 5:
            print(f"      ... –∏ –µ—â—ë {len(created_files) - 5} —Ñ–∞–π–ª–æ–≤")
        
        # –ì–õ–ê–í–ù–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        print(f"\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–ê–õ–ò–î–ê–¢–û–†):")
        
        if 'fake_files_count' in validation_result:
            fake_count = validation_result.get('fake_files_count', 0)
            total_count = validation_result.get('total_files_count', 0)
            fake_ratio = validation_result.get('fake_ratio', 0)
            
            print(f"   üö® –ü–æ–¥–¥–µ–ª–æ–∫: {fake_count}/{total_count} ({fake_ratio*100:.1f}%)")
            
            if fake_ratio >= 0.5:
                print(f"   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–í–ê–õ: –ë–æ–ª–µ–µ 50% –ø–æ–¥–¥–µ–ª–æ–∫!")
            elif fake_ratio >= 0.3:
                print(f"   ‚ö†Ô∏è –°–ï–†–¨–Å–ó–ù–´–ï –ü–†–û–ë–õ–ï–ú–´: –ë–æ–ª–µ–µ 30% –ø–æ–¥–¥–µ–ª–æ–∫!")
            elif fake_ratio > 0:
                print(f"   ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–û–î–î–ï–õ–ö–ò: {fake_ratio*100:.1f}%")
            else:
                print(f"   ‚úÖ –ü–û–î–î–ï–õ–û–ö –ù–ï –ù–ê–ô–î–ï–ù–û")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞
        needs_rework = validation_result.get('needs_rework', False)
        if needs_rework:
            print(f"   üîÑ –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê: –ö–∞—á–µ—Å—Ç–≤–æ < 0.7")
            rework_reasons = validation_result.get('rework_reasons', [])
            for reason in rework_reasons[:3]:
                print(f"      - {reason}")
        else:
            print(f"   ‚úÖ –ó–ê–î–ê–ß–ê –ü–†–ò–ù–Ø–¢–ê: –ö–∞—á–µ—Å—Ç–≤–æ >= 0.7")
        
        # –ò—Ç–æ–≥–∏
        print(f"\nüéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ê:")
        if quality_score >= 0.7 and not needs_rework:
            print(f"   ‚úÖ –£–°–ü–ï–•: –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–ª–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({quality_score:.3f})")
        else:
            print(f"   ‚ùå –ü–†–û–í–ê–õ: –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é ({quality_score:.3f})")
            print(f"   üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–ê–õ–ò–î–ê–¢–û–† –†–ê–ë–û–¢–ê–ï–¢! –°–∏—Å—Ç–µ–º–∞ —á–µ—Å—Ç–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ")
        
        return result
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
        print(f"   {str(e)}")
        import traceback
        print("\nüîç –¢–†–ï–ô–°:")
        traceback.print_exc()
        return None

if __name__ == "__main__":
    asyncio.run(test_bitrix_with_fixed_validator()) 