#!/usr/bin/env python3
"""
üêõ –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–∞—á–µ—Å—Ç–≤–∞ –≤ CLI
"""

import asyncio
import kittycore

def cli_quality_check(result, user_input):
    """–ö–æ–ø–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ quality_check –∏–∑ CLI –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    print(f"\nüîç –û–¢–õ–ê–î–ö–ê CLI QUALITY_CHECK:")
    print(f"   –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   - user_input: '{user_input}'")
    print(f"   - duration: {result.get('duration', 0)}")
    print(f"   - files_created: {result.get('execution', {}).get('files_created', [])}")
    print(f"   - step_results: {result.get('execution', {}).get('step_results', {})}")
    
    issues = []
    warnings = []
    
    duration = result.get('duration', 0)
    execution = result.get('execution', {})
    files_created = execution.get('files_created', [])
    step_results = execution.get('step_results', {})
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if duration < 0.5:
        issues.append(f"‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û –ë–´–°–¢–†–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï: {duration:.2f}—Å")
        print(f"   ‚úì –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: –±—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {duration:.2f}—Å")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–∏—è
    creation_keywords = ['—Å–æ–∑–¥–∞–π', '—Å–æ–∑–¥–∞—Ç—å', '—Å–¥–µ–ª–∞–π', '—Å–¥–µ–ª–∞—Ç—å', '–Ω–∞–ø–∏—à–∏', '–Ω–∞–ø–∏—Å–∞—Ç—å', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '—Ñ–∞–π–ª', '—Å–∞–π—Ç', 'html', '–≤–µ–±']
    creation_detected = any(keyword in user_input.lower() for keyword in creation_keywords)
    print(f"   - –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {creation_detected}")
    print(f"   - –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã: {len(files_created)} —à—Ç—É–∫")
    
    if creation_detected:
        if not files_created:
            issues.append("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ó–ê–î–ê–ß–ê –°–û–ó–î–ê–ù–ò–Ø –ë–ï–ó –§–ê–ô–õ–û–í")
            print(f"   ‚úì –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
    if step_results:
        all_results = " ".join([str(step_result.get('result', '')) for step_result in step_results.values()])
        print(f"   - –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: '{all_results}'")
        print(f"   - httpbin.org –Ω–∞–π–¥–µ–Ω: {'httpbin.org' in all_results}")
        
        if "httpbin.org" in all_results:
            if any(word in user_input.lower() for word in ['—Å–∞–π—Ç', '–≤–µ–±', 'html']):
                issues.append("üö® –ù–ï–ê–î–ï–ö–í–ê–¢–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –õ–ï–í–´–ï –î–ï–ô–°–¢–í–ò–Ø")
                print(f"   ‚úì –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: –ª–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (httpbin.org –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞)")
    
    print(f"   –ò—Ç–æ–≥–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(warnings)}")
    return issues, warnings

async def debug_cli_quality():
    """–û—Ç–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ CLI"""
    print("üêõ –û–¢–õ–ê–î–ö–ê –°–ò–°–¢–ï–ú–´ –ö–ê–ß–ï–°–¢–í–ê CLI")
    print("=" * 40)
    
    orchestrator = kittycore.create_orchestrator()
    
    # –¢–µ—Å—Ç —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    user_input = "–°–¥–µ–ª–∞–π —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏"
    print(f"\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º: '{user_input}'")
    
    result = await orchestrator.solve_task(user_input)
    
    print(f"\nüìä –ü–û–õ–£–ß–ï–ù–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   - –°—Ç–∞—Ç—É—Å: {result['status']}")
    print(f"   - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result.get('duration', 0):.2f}—Å")
    print(f"   - –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result['complexity_analysis']['complexity']}")
    print(f"   - –ö–æ–º–∞–Ω–¥–∞: {result['team']['team_size']} –∞–≥–µ–Ω—Ç–æ–≤")
    
    execution = result.get('execution', {})
    files = execution.get('files_created', [])
    steps = execution.get('step_results', {})
    
    print(f"   - –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(files)}")
    print(f"   - –®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(steps)}")
    
    if steps:
        print(f"   - –î–µ—Ç–∞–ª–∏ —à–∞–≥–æ–≤:")
        for step_id, step_result in steps.items():
            result_text = step_result.get('result', '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
            print(f"     ‚Ä¢ {step_id}: {result_text}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º CLI –≤–µ—Ä—Å–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    issues, warnings = cli_quality_check(result, user_input)
    
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò:")
    if issues:
        print(f"üö® –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´ ({len(issues)}):")
        for issue in issues:
            print(f"   {issue}")
    elif warnings:
        print(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(warnings)}):")
        for warning in warnings:
            print(f"   {warning}")
    else:
        print(f"‚úÖ –ü–†–û–ë–õ–ï–ú –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û")
    
    # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É CLI –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å
    print(f"\nüîß –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ CLI:")
    if result['complexity_analysis']['complexity'] == 'simple':
        print(f"   ‚ö†Ô∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å 'simple' - —Å–æ–∑–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 –∑–∞–¥–∞—á–∞")
        print(f"   ‚ö†Ô∏è –ü—Ä–∏ simple –∑–∞–¥–∞—á–∞—Ö –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π")
    
    if len(result['subtasks']) == 1:
        print(f"   ‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∞ —Ç–æ–ª—å–∫–æ 1 –ø–æ–¥–∑–∞–¥–∞—á–∞ –≤–º–µ—Å—Ç–æ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏")
        print(f"   ‚ö†Ô∏è –ê–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å")

if __name__ == "__main__":
    asyncio.run(debug_cli_quality()) 