"""
Simple LLM Plugin - –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏

–ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!
- –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
- –ú–∏–Ω–∏–º—É–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
- –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import os
import json
import httpx
from datetime import datetime
from typing import Dict, Any, Optional
from loguru import logger

from app.core.base_plugin import BasePlugin


class SimpleLLMPlugin(BasePlugin):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–≥–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM —á–µ—Ä–µ–∑ OpenRouter API"""
    
    def __init__(self):
        super().__init__("simple_llm")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM (–±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î)
        self.api_key = None
        self.openai_api_key = None
        self.anthropic_api_key = None
        self.base_url = "https://openrouter.ai/api/v1/chat/completions"
        self.default_model = "meta-llama/llama-3.2-3b-instruct:free"
        
        logger.info("SimpleLLMPlugin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _do_initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
        await self._load_settings_from_db()
            
        if self.api_key or self.openai_api_key or self.anthropic_api_key:
            logger.info(f"‚úÖ SimpleLLMPlugin –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –º–æ–¥–µ–ª—å—é: {self.default_model}")
        else:
            logger.warning("‚ö†Ô∏è SimpleLLMPlugin —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ - API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")
            logger.info("üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: POST /admin/plugins/llm/settings")
    
    async def _load_settings_from_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –∏–∑ MongoDB"""
        try:
            if not self.engine or not hasattr(self.engine, 'plugins') or 'mongo' not in self.engine.plugins:
                logger.warning("MongoDB –ø–ª–∞–≥–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ LLM")
                return
                
            mongo_plugin = self.engine.plugins['mongo']
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ settings
            settings_result = await mongo_plugin._find_one("settings", {"plugin_name": "llm"})
            
            if settings_result and settings_result.get("success") and settings_result.get("document"):
                settings = settings_result["document"]
                self.api_key = settings.get("openrouter_api_key")  # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                self.openai_api_key = settings.get("openai_api_key")
                self.anthropic_api_key = settings.get("anthropic_api_key")
                self.default_model = settings.get("default_model", self.default_model)
                
                logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î")
            else:
                logger.info("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ LLM –∏–∑ –ë–î: {e}")
    
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –ù–ê–°–¢–†–û–ô–ö–ò –ß–ï–†–ï–ó API ===
    
    async def save_settings_to_db(self, openrouter_api_key: str = None, openai_api_key: str = None, 
                                 anthropic_api_key: str = None, default_model: str = None) -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –≤ MongoDB (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API)"""
        try:
            if not self.engine or not hasattr(self.engine, 'plugins') or 'mongo' not in self.engine.plugins:
                return {"success": False, "error": "MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                
            mongo_plugin = self.engine.plugins['mongo']
            
            settings_doc = {
                "plugin_name": "llm",
                "openrouter_api_key": openrouter_api_key,
                "openai_api_key": openai_api_key,
                "anthropic_api_key": anthropic_api_key,
                "default_model": default_model or self.default_model,
                "updated_at": datetime.now().isoformat()
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ settings
            result = await mongo_plugin._update_one(
                "settings", 
                {"plugin_name": "llm"}, 
                {"$set": settings_doc},
                upsert=True
            )
            
            if result.get("success"):
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–ª–∞–≥–∏–Ω–µ
                if openrouter_api_key:
                    self.api_key = openrouter_api_key
                if openai_api_key:
                    self.openai_api_key = openai_api_key
                if anthropic_api_key:
                    self.anthropic_api_key = anthropic_api_key
                if default_model:
                    self.default_model = default_model
                
                logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
                return {"success": True, "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"}
            else:
                error_msg = result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –≤ –ë–î: {error_msg}")
                return {"success": False, "error": error_msg}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ LLM –≤ –ë–î: {e}")
            return {"success": False, "error": str(e)}
    
    def get_current_settings(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞"""
        return {
            "openrouter_api_key": "***" if self.api_key else None,
            "openai_api_key": "***" if self.openai_api_key else None,
            "anthropic_api_key": "***" if self.anthropic_api_key else None,
            "default_model": self.default_model,
            "any_key_set": bool(self.api_key or self.openai_api_key or self.anthropic_api_key),
            "configured": bool(self.api_key or self.openai_api_key or self.anthropic_api_key)
        }

    def register_handlers(self) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —à–∞–≥–æ–≤"""
        return {
            "llm_query": self._handle_llm_query,
            "llm_chat": self._handle_llm_chat
        }
    
    async def _handle_llm_query(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ llm_query - –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ LLM
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - prompt: —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        - model: –º–æ–¥–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ env)
        - system_prompt: —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - temperature: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.7)
        - max_tokens: –º–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 500)
        - output_var: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "llm_response")
        """
        params = step_data.get("params", {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        prompt = self._resolve_value(params.get("prompt", ""), context)
        model = params.get("model", self.default_model)
        system_prompt = self._resolve_value(params.get("system_prompt", ""), context)
        temperature = params.get("temperature", 0.7)
        max_tokens = params.get("max_tokens", 500)
        output_var = params.get("output_var", "llm_response")
        
        if not prompt:
            logger.error("SimpleLLMPlugin: prompt –Ω–µ —É–∫–∞–∑–∞–Ω")
            context[output_var] = {"error": "Prompt –Ω–µ —É–∫–∞–∑–∞–Ω"}
            return context
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await self._make_llm_request(
            prompt=prompt,
            model=model,
            system_prompt=system_prompt,
            temperature=temperature,
            max_tokens=max_tokens
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if response.get("success"):
            context[output_var] = response["content"]
            logger.info(f"LLM –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_var}: {response['content'][:100]}...")
        else:
            context[output_var] = {"error": response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}
            logger.error(f"–û—à–∏–±–∫–∞ LLM: {response.get('error')}")
        
        return context
    
    async def _handle_llm_chat(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ llm_chat - —á–∞—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - messages: —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π [{"role": "user/assistant", "content": "..."}]
        - model: –º–æ–¥–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - temperature: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - max_tokens: –º–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - output_var: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "llm_response")
        """
        params = step_data.get("params", {})
        
        messages = params.get("messages", [])
        model = params.get("model", self.default_model)
        temperature = params.get("temperature", 0.7)
        max_tokens = params.get("max_tokens", 500)
        output_var = params.get("output_var", "llm_response")
        
        if not messages:
            logger.error("SimpleLLMPlugin: messages –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
            context[output_var] = {"error": "Messages –Ω–µ —É–∫–∞–∑–∞–Ω—ã"}
            return context
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        resolved_messages = []
        for msg in messages:
            resolved_msg = {
                "role": msg.get("role", "user"),
                "content": self._resolve_value(msg.get("content", ""), context)
            }
            resolved_messages.append(resolved_msg)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await self._make_llm_request(
            messages=resolved_messages,
            model=model,
            temperature=temperature,
            max_tokens=max_tokens
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        if response.get("success"):
            context[output_var] = response["content"]
            logger.info(f"LLM —á–∞—Ç –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_var}")
        else:
            context[output_var] = {"error": response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}
            logger.error(f"–û—à–∏–±–∫–∞ LLM —á–∞—Ç–∞: {response.get('error')}")
        
        return context
    
    async def _make_llm_request(self, prompt: str = None, messages: list = None, 
                               model: str = None, system_prompt: str = None,
                               temperature: float = 0.7, max_tokens: int = 500) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM API"""
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π API –∫–ª—é—á
        api_key = self.api_key or self.openai_api_key or self.anthropic_api_key
        
        if not api_key:
            return {"success": False, "error": "API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        if messages:
            request_messages = messages
        elif prompt:
            request_messages = []
            if system_prompt:
                request_messages.append({"role": "system", "content": system_prompt})
            request_messages.append({"role": "user", "content": prompt})
        else:
            return {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω prompt –∏–ª–∏ messages"}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º payload
        payload = {
            "model": model or self.default_model,
            "messages": request_messages,
            "temperature": temperature,
            "max_tokens": max_tokens
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    self.base_url,
                    json=payload,
                    headers={
                        "Authorization": f"Bearer {api_key}",
                        "Content-Type": "application/json",
                        "HTTP-Referer": "https://universal-agent-platform.local",
                        "X-Title": "Universal Agent Platform"
                    },
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    data = response.json()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                    if data.get("choices") and len(data["choices"]) > 0:
                        content = data["choices"][0]["message"]["content"]
                        return {"success": True, "content": content}
                    else:
                        return {"success": False, "error": "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API"}
                else:
                    error_text = response.text
                    logger.error(f"LLM API –æ—à–∏–±–∫–∞ {response.status_code}: {error_text}")
                    return {"success": False, "error": f"API –æ—à–∏–±–∫–∞ {response.status_code}"}
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM: {e}")
            return {"success": False, "error": str(e)}
    
    def _resolve_value(self, value: Any, context: Dict[str, Any]) -> Any:
        """–ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if isinstance(value, str) and "{" in value and "}" in value:
            try:
                return value.format(**context)
            except (KeyError, ValueError) as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å '{value}': {e}")
                return value
        return value
    
    async def healthcheck(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–ª–∞–≥–∏–Ω–∞"""
        if not self.api_key:
            return False
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            response = await self._make_llm_request(
                prompt="test",
                max_tokens=1
            )
            return response.get("success", False)
        except Exception:
            return False 