#!/usr/bin/env python3
"""
Main FastAPI application –¥–ª—è Universal Agent Platform.
–ü—Ä–∏–Ω—Ü–∏–ø: –ü—Ä–æ—Å—Ç–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª—ã.

–ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- –ö–∞–Ω–∞–ª—ã —Å–≤—è–∑—ã–≤–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
- –°—Ü–µ–Ω–∞—Ä–∏–∏ –≤ MongoDB, –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è –Ω–∞ –ª–µ—Ç—É
- –û–¥–∏–Ω –¥–≤–∏–∂–æ–∫ SimpleScenarioEngine –¥–ª—è –≤—Å–µ—Ö
- REST API –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
"""

import sys
import os
import asyncio
from contextlib import asynccontextmanager

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ PYTHONPATH –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append('/app')

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from loguru import logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API —Ä–æ—É—Ç–µ—Ä—ã
from app.api.simple import router as simple_router

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π ChannelManager
_channel_manager = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
    1. ChannelManager –ù–ï –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    2. –ö–∞–Ω–∞–ª—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ API
    3. –ö–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª = –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞
    """
    global _channel_manager
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Universal Agent Platform...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º ChannelManager –ë–ï–ó –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ ChannelManager (–±–µ–∑ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞)...")
        from app.core.channel_manager import ChannelManager
        _channel_manager = ChannelManager()
        logger.info("‚úÖ ChannelManager —Å–æ–∑–¥–∞–Ω (–∫–∞–Ω–∞–ª—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)")
        
        logger.info("üéâ Universal Agent Platform –∑–∞–ø—É—â–µ–Ω–∞!")
        
        yield
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        raise
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Universal Agent Platform...")
        
        if _channel_manager:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            await _channel_manager.stop_all_polling()
                
        logger.info("‚úÖ Universal Agent Platform –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def get_channel_manager():
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π ChannelManager."""
    return _channel_manager

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.remove()  # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
logger.add(
    "logs/api.log",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {name}:{function}:{line} | {message}",
    level="INFO",
    rotation="10 MB",
    compression="gz",
    serialize=True
)
logger.add(
    sys.stdout,
    format="<green>{time:HH:mm:ss}</green> | <level>{level}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> | <level>{message}</level>",
    level="INFO"
)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Universal Agent Platform",
    description="–ü—Ä–æ—Å—Ç–∞—è –∏ –º–æ—â–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ò–ò –∞–≥–µ–Ω—Ç–æ–≤",
    version="1.0.0",
    lifespan=lifespan  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(simple_router, prefix="/api/v1")  # –ü—Ä–æ—Å—Ç–æ–π API

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ."""
    return {
        "platform": "Universal Agent Platform - Simple",
        "version": "3.0.0-simple",
        "description": "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª—ã",
        "architecture": "Simple + Flexible",
        "features": [
            "ü§ñ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª—ã",
            "üìú JSON —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º",
            "üîÑ –ü—Ä–æ—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏",
            "üì° –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram",
            "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
            "‚öôÔ∏è SimpleScenarioEngine - –æ–¥–∏–Ω –¥–≤–∏–∂–æ–∫ –¥–ª—è –≤—Å–µ—Ö"
        ],
        "endpoints": {
            "docs": "/docs",
            "simple_api": "/api/v1/simple",
            "health": "/api/v1/simple/health",
            "mongo_api": "/api/v1/simple/mongo",
            "execute_step": "/api/v1/simple/execute"
        },
        "principles": [
            "–ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!",
            "–û–¥–∏–Ω –¥–≤–∏–∂–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤",
            "–ú–∏–Ω–∏–º—É–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
            "–Ø–≤–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        ]
    }

@app.get("/health")
async def health_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
    return {"status": "healthy", "platform": "Universal Agent Platform"}

if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Universal Agent Platform - Simple")
    logger.info("üìã –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ö–∞–Ω–∞–ª—ã + –°—Ü–µ–Ω–∞—Ä–∏–∏ + SimpleScenarioEngine")
    logger.info("üîó API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    
    uvicorn.run(
        "app.simple_main:app",
        host="0.0.0.0",
        port=8000,
        reload=False,  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ—Ç–∫–ª—é—á–∞–µ–º reload
        log_level="info"
    ) 