#!/usr/bin/env python3
"""
Comprehensive —Ç–µ—Å—Ç GUI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è KittyCore 3.0
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ComputerUseTool
"""

import sys
import asyncio
import time
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.append('.')

from kittycore.tools.computer_use_tool import ComputerUseTool

async def test_gui_comprehensive():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç GUI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    print("üñ•Ô∏è COMPREHENSIVE –¢–ï–°–¢ GUI –£–ü–†–ê–í–õ–ï–ù–ò–Ø KITTYCORE 3.0")
    print("=" * 60)
    
    tool = ComputerUseTool()
    start_time = time.time()
    
    tests = [
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        ("test_environment", {}, "üîç –¢–µ—Å—Ç —Å—Ä–µ–¥—ã"),
        ("get_screen_info", {}, "üì∫ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —ç–∫—Ä–∞–Ω–µ"),
        ("get_mouse_position", {}, "üñ±Ô∏è –ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏"),
        ("check_capabilities", {}, "‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"),
        
        # –°–∫—Ä–∏–Ω—à–æ—Ç
        ("screenshot", {"save_path": "/tmp/gui_test_screenshot.png"}, "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç"),
        
        # –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        ("mouse_move", {"x": 100, "y": 100}, "üñ±Ô∏è –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏"),
        ("get_mouse_position", {}, "üñ±Ô∏è –ü–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è"),
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        ("key_press", {"key": "space"}, "‚å®Ô∏è –ù–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–±–µ–ª–∞"),
        ("key_combination", {"keys": ["ctrl", "alt", "t"]}, "‚å®Ô∏è –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–ª–∞–≤–∏—à"),
        
        # –†–∞–±–æ—Ç–∞ —Å –æ–∫–Ω–∞–º–∏
        ("list_windows", {}, "ü™ü –°–ø–∏—Å–æ–∫ –æ–∫–æ–Ω"),
        ("get_active_window", {}, "ü™ü –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ"),
    ]
    
    results = []
    
    for i, (action, params, description) in enumerate(tests, 1):
        print(f"\n[{i:2d}/12] {description}")
        print("-" * 40)
        
        try:
            test_start = time.time()
            result = await tool.execute({"action": action, **params})
            test_time = time.time() - test_start
            
            success = result.get("success", False)
            status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
            
            print(f"–°—Ç–∞—Ç—É—Å: {status} ({test_time:.3f}—Å)")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if success:
                if action == "test_environment" and result.get("details"):
                    details = result["details"]
                    print(f"  Backend: {details.get('backend', 'unknown')}")
                    print(f"  Platform: {details.get('platform', 'unknown')}")
                    print(f"  X11: {details.get('has_x11', False)}")
                    print(f"  WM: {details.get('wm_name', 'unknown')}")
                    
                elif action == "get_screen_info" and result.get("screen_info"):
                    info = result["screen_info"]
                    print(f"  –†–∞–∑–º–µ—Ä: {info.get('width', 0)}x{info.get('height', 0)}")
                    print(f"  –ú–∞—Å—à—Ç–∞–±: {info.get('scale_factor', 1.0)}")
                    
                elif action == "get_mouse_position" and result.get("position"):
                    pos = result["position"]
                    print(f"  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({pos.get('x', 0)}, {pos.get('y', 0)})")
                    
                elif action == "screenshot" and result.get("screenshot_path"):
                    path = result["screenshot_path"]
                    if os.path.exists(path):
                        size = os.path.getsize(path)
                        print(f"  –§–∞–π–ª: {path}")
                        print(f"  –†–∞–∑–º–µ—Ä: {size:,} –±–∞–π—Ç")
                    
                elif action == "check_capabilities" and result.get("capabilities"):
                    caps = result["capabilities"]
                    available = [k for k, v in caps.items() if v]
                    print(f"  –î–æ—Å—Ç—É–ø–Ω–æ: {', '.join(available)}")
                    
                elif action == "list_windows" and result.get("windows"):
                    windows = result["windows"]
                    print(f"  –ù–∞–π–¥–µ–Ω–æ –æ–∫–æ–Ω: {len(windows)}")
                    if windows:
                        for w in windows[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                            print(f"    - {w.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:30]}")
                        if len(windows) > 3:
                            print(f"    ... –∏ –µ—â—ë {len(windows) - 3}")
                            
                elif action == "get_active_window" and result.get("window"):
                    window = result["window"]
                    print(f"  –ê–∫—Ç–∏–≤–Ω–æ–µ: {window.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:40]}")
                    print(f"  PID: {window.get('pid', 'unknown')}")
                    
                else:
                    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    data_size = len(str(result))
                    print(f"  –î–∞–Ω–Ω—ã–µ: {data_size} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                error = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                print(f"  –û—à–∏–±–∫–∞: {error}")
            
            results.append({
                "test": description,
                "action": action,
                "success": success,
                "time": test_time,
                "data_size": len(str(result))
            })
            
        except Exception as e:
            print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
            results.append({
                "test": description,
                "action": action, 
                "success": False,
                "time": 0,
                "error": str(e)
            })
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(0.1)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_time = time.time() - start_time
    successful = len([r for r in results if r["success"]])
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful}/{len(results)} ({successful/len(results)*100:.1f}%)")
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.3f}—Å")
    print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç–µ—Å—Ç: {total_time/len(results):.3f}—Å")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for i, result in enumerate(results, 1):
        status = "‚úÖ" if result["success"] else "‚ùå"
        time_str = f"{result['time']:.3f}—Å"
        print(f"{i:2d}. {status} {result['test']:<25} {time_str:>8}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if successful == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! GUI —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
    elif successful >= len(results) * 0.8:
        print("‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏.")
    else:
        print("‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
        
    failed_tests = [r for r in results if not r["success"]]
    if failed_tests:
        print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –¢–ï–°–¢–´:")
        for test in failed_tests:
            print(f"  - {test['test']}: {test.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    return successful, len(results)

if __name__ == "__main__":
    asyncio.run(test_gui_comprehensive())
