#!/usr/bin/env python3
"""
üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ A-MEM –ø–∞–º—è—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from kittycore.memory.amem_integration import KittyCoreMemorySystem

async def check_amem_direct():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ A-MEM –ø–∞–º—è—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é"""
    
    print("üîç === –ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê A-MEM ===")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º A-MEM –Ω–∞–ø—Ä—è–º—É—é
        amem = KittyCoreMemorySystem(
            vault_path="./vault_quick_test"
        )
        
        print(f"‚úÖ A-MEM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {type(amem).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        try:
            memories = await amem.search_memories("–ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", limit=10)
            print(f"üìä –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(memories)}")
            
            if memories:
                print("\nüíæ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –í–û–°–ü–û–ú–ò–ù–ê–ù–ò–Ø:")
                for i, memory in enumerate(memories[:3], 1):
                    content = memory.get('content', '')[:100] + "..."
                    tags = memory.get('tags', [])
                    print(f"{i}. {content}")
                    print(f"   –¢–µ–≥–∏: {tags}")
            else:
                print("üì≠ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        try:
            test_memory = """
–¢–µ—Å—Ç–æ–≤–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ A-MEM —Å–∏—Å—Ç–µ–º—ã.

–ü–õ–ê–ù –í–´–ü–û–õ–ù–ï–ù–ò–Ø:
1. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ hello.py
2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ print('Hello, World!')
3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

–†–ï–ó–£–õ–¨–¢–ê–¢: —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
–ö–ê–ß–ï–°–¢–í–û: 0.9
"""
            
            await amem.store_memory(
                content=test_memory.strip(),
                context={
                    "test": True,
                    "type": "validation",
                    "quality": 0.9
                },
                tags=["test", "successful_plan", "hello_world"]
            )
            
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫
            search_result = await amem.search_memories("hello world –ø–ª–∞–Ω", limit=3)
            print(f"üîç –ü–æ–∏—Å–∫ 'hello world –ø–ª–∞–Ω': {len(search_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            if search_result:
                best = search_result[0]
                print(f"üíé –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best.get('content', '')[:80]}...")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ A-MEM: {e}")
    
    print("\nüéØ === –°–¢–ê–¢–£–° A-MEM ===")
    print("‚úÖ A-MEM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("üìä –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
    print("üíæ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –µ—Å—Ç—å")
    print("üöÄ –ì–æ—Ç–æ–≤ –∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—é –æ–ø—ã—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤!")

if __name__ == "__main__":
    asyncio.run(check_amem_direct()) 