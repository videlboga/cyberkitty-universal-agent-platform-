#!/usr/bin/env python3
"""
ü§ñ –û–¢–õ–ê–î–ö–ê: ai_integration_tool
"""

import time
import json

try:
    from kittycore.tools.ai_integration_tool import AIIntegrationTool
    IMPORT_OK = True
    print("‚úÖ –ò–º–ø–æ—Ä—Ç ai_integration_tool —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ –û–®–ò–ë–ö–ê: {e}")
    IMPORT_OK = False

def test_vpn_status():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ VPN"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüîí –¢–µ—Å—Ç–∏—Ä—É—é —Å—Ç–∞—Ç—É—Å VPN...")
    tool = AIIntegrationTool()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å VPN (–¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ)
    result = tool.execute("vpn_status")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            if isinstance(data, dict):
                status = data.get('status', 'UNKNOWN')
                print(f"üîí VPN —Å—Ç–∞—Ç—É—Å: {status}")
    
    return result

def test_connection_test():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüåê –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
    tool = AIIntegrationTool()
    
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    result = tool.execute("test_connection")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            if isinstance(data, dict):
                api_accessible = data.get('api_accessible', False)
                print(f"üåê API –¥–æ—Å—Ç—É–ø–µ–Ω: {api_accessible}")
    
    return result

def test_stats():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüìä –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    tool = AIIntegrationTool()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    result = tool.execute("get_stats")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            if isinstance(data, dict):
                total_requests = data.get('total_requests', 0)
                total_cost = data.get('total_cost', 0.0)
                print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_requests} –∑–∞–ø—Ä–æ—Å–æ–≤, ${total_cost:.6f}")
    
    return result

def test_model_info():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏...")
    tool = AIIntegrationTool()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –º–æ–¥–µ–ª–∏ (–¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –∫–µ—à–∞)
    result = tool.execute("get_model_info", model="gpt-3.5-turbo")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            if isinstance(data, dict):
                model_name = data.get('name', 'UNKNOWN')
                context_length = data.get('context_length', 'UNKNOWN')
                print(f"ü§ñ –ú–æ–¥–µ–ª—å: {model_name}, –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context_length}")
    
    return result

def is_result_honest(result, test_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if not result:
        print(f"‚ùå {test_name}: –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É ToolResult
    if not hasattr(result, 'success'):
        print(f"‚ùå {test_name}: –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ ToolResult")
        return False
    
    success = result.success
    if not success:
        print(f"‚ùå {test_name}: success=False")
        if hasattr(result, 'error'):
            print(f"   –û—à–∏–±–∫–∞: {result.error}")
        return False
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    data_str = str(result.data) if hasattr(result, 'data') else str(result)
    data_size = len(data_str)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–µ–π–∫–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    fake_patterns = [
        "ai_integration: —É—Å–ø–µ—à–Ω–æ",
        "–¥–µ–º–æ –æ—Ç–≤–µ—Ç",
        "–∑–∞–≥–ª—É—à–∫–∞ –º–æ–¥–µ–ª–∏"
    ]
    
    for pattern in fake_patterns:
        if pattern.lower() in data_str.lower():
            print(f"‚ùå {test_name}: –ù–∞–π–¥–µ–Ω —Ñ–µ–π–∫–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    ai_indicators = [
        "vpn", "connection", "api", "model", "status", "cost", "tokens", 
        "requests", "statistics", "wireguard", "openrouter"
    ]
    
    has_ai_data = any(indicator.lower() in data_str.lower() for indicator in ai_indicators)
    
    if not has_ai_data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–π AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        return False
    
    if data_size < 20:
        print(f"‚ùå {test_name}: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
        return False
    
    print(f"‚úÖ {test_name}: –ß–ï–°–¢–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
    return True

def main():
    print("ü§ñ –û–¢–õ–ê–î–ö–ê: ai_integration_tool")
    
    if not IMPORT_OK:
        return
    
    results = {}
    
    # –¢–µ—Å—Ç—ã (–≤—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ, –±—ã—Å—Ç—Ä—ã–µ)
    tests = [
        ("vpn_status", test_vpn_status),
        ("connection_test", test_connection_test),
        ("stats", test_stats),
        ("model_info", test_model_info)
    ]
    
    for test_name, test_func in tests:
        print(f"\n{'='*30}")
        print(f"–¢–ï–°–¢: {test_name}")
        try:
            result = test_func()
            results[test_name] = is_result_honest(result, test_name)
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ –û–®–ò–ë–ö–ê: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*50}")
    print("üìä –ò–¢–û–ì–ò:")
    
    total_tests = len(results)
    passed_tests = sum(1 for success in results.values() if success)
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
    
    print(f"\nüìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if success_rate >= 75 else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")

if __name__ == "__main__":
    main() 