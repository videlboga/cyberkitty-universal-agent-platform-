"""
üß† A-MEM Integration - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è AgenticMemorySystem –≤ KittyCore 3.0

–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–≥–æ VectorMemoryStore –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é 
–∞–≥–µ–Ω—Ç–Ω—É—é –ø–∞–º—è—Ç—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —ç–≤–æ–ª—é—Ü–∏–µ–π –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º.

–ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚úÖ ChromaDB –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –≤–º–µ—Å—Ç–æ TF-IDF 
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —ç–≤–æ–ª—é—Ü–∏—è –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ LLM
‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –≤–µ–∫—Ç–æ—Ä–∞–º
‚úÖ Zettelkasten –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–Ω–∞–Ω–∏–π
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Obsidian vault

–ü—Ä–∏–Ω—Ü–∏–ø: "–ü–∞–º—è—Ç—å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç, –∞–≥–µ–Ω—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —É–º–Ω–µ–µ" üöÄ
"""

import asyncio
import json
import logging
from dataclasses import dataclass, asdict
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path
import time

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è A-MEM (–±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
try:
    import chromadb
    from sentence_transformers import SentenceTransformer
    AMEM_AVAILABLE = True
except ImportError:
    AMEM_AVAILABLE = False
    logging.warning("‚ö†Ô∏è A-MEM –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –†–∞–±–æ—Ç–∞–µ–º –≤ fallback —Ä–µ–∂–∏–º–µ.")

# from .base_memory import BaseMemory  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

logger = logging.getLogger(__name__)

@dataclass
class AgenticMemoryEntry:
    """–ó–∞–ø–∏—Å—å –≤ –∞–≥–µ–Ω—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏ A-MEM"""
    memory_id: str
    agent_id: str
    content: str
    context: Dict[str, Any]
    tags: List[str]
    category: str
    timestamp: datetime
    embeddings: Optional[List[float]] = None
    links: List[str] = None  # –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        data = asdict(self)
        data['timestamp'] = self.timestamp.isoformat()
        return data

class SimpleAgenticMemory:
    """–£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è A-MEM –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –¥–ª—è fallback —Ä–µ–∂–∏–º–∞"""
    
    def __init__(self, storage_path: str = "simple_amem_storage"):
        self.storage_path = Path(storage_path)
        self.storage_path.mkdir(exist_ok=True)
        self.memories: Dict[str, AgenticMemoryEntry] = {}
        self.memory_links: Dict[str, List[str]] = {}  # –°–≤—è–∑–∏ –º–µ–∂–¥—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        
    async def add_note(self, content: str, tags: List[str] = None, 
                      category: str = "general", **kwargs) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å –ø—Ä–æ—Å—Ç–æ–π —ç–≤–æ–ª—é—Ü–∏–µ–π"""
        memory_id = f"simple_{len(self.memories)}"
        
        # –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ keyword matching
        related_memories = await self._find_related_simple(content)
        
        entry = AgenticMemoryEntry(
            memory_id=memory_id,
            agent_id=kwargs.get('agent_id', 'unknown'),
            content=content,
            context=kwargs.get('context', {}),
            tags=tags or [],
            category=category,
            timestamp=datetime.now(),
            links=[m.memory_id for m in related_memories[:3]]  # —Ç–æ–ø-3 —Å–≤—è–∑–∏
        )
        
        self.memories[memory_id] = entry
        self.memory_links[memory_id] = entry.links
        
        logger.info(f"üí≠ –ü—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å —Å–æ–∑–¥–∞–Ω–∞: {memory_id} (—Å–≤—è–∑–µ–π: {len(entry.links)})")
        return memory_id
    
    async def search_agentic(self, query: str, k: int = 5) -> List[Dict[str, Any]]:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        results = []
        query_lower = query.lower()
        
        for memory in self.memories.values():
            # –ü—Ä–æ—Å—Ç–æ–π keyword matching
            if query_lower in memory.content.lower():
                results.append({
                    'id': memory.memory_id,
                    'content': memory.content,
                    'tags': memory.tags,
                    'category': memory.category,
                    'agent_id': memory.agent_id,
                    'links': memory.links
                })
        
        return results[:k]
    
    async def _find_related_simple(self, content: str) -> List[AgenticMemoryEntry]:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        words = set(content.lower().split())
        related = []
        
        for memory in self.memories.values():
            memory_words = set(memory.content.lower().split())
            overlap = len(words.intersection(memory_words))
            
            if overlap > 2:  # –ü—Ä–æ—Å—Ç–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
                related.append(memory)
        
        return related

class AgenticMemorySystem:
    """
    –ê–≥–µ–Ω—Ç–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è LLM –∞–≥–µ–Ω—Ç–æ–≤ —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º –∏ —ç–≤–æ–ª—é—Ü–∏–µ–π
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ChromaDB –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ Zettelkasten –ø—Ä–∏–Ω—Ü–∏–ø—ã
    """
    
    def __init__(self, model_name: str = 'all-MiniLM-L6-v2', 
                 llm_backend: str = "openai", llm_model: str = "gpt-4o-mini"):
        self.model_name = model_name
        self.llm_backend = llm_backend
        self.llm_model = llm_model
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ offline —Ä–µ–∂–∏–º–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        import os
        os.environ["TRANSFORMERS_OFFLINE"] = "1"
        os.environ["HF_DATASETS_OFFLINE"] = "1"
        os.environ["TOKENIZERS_PARALLELISM"] = "false"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π fallback —Ä–µ–∂–∏–º
        if os.environ.get("FORCE_AMEM_FALLBACK", "false").lower() == "true":
            logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π fallback —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è AgenticMemorySystem")
            global AMEM_AVAILABLE
            AMEM_AVAILABLE = False
        
        if AMEM_AVAILABLE:
            self._init_professional_amem()
        else:
            logger.warning("üîÑ Fallback: –ò—Å–ø–æ–ª—å–∑—É–µ–º SimpleAgenticMemory")
            self.simple_memory = SimpleAgenticMemory()
            
    def _init_professional_amem(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π A-MEM —Å–∏—Å—Ç–µ–º—ã —Å offline –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB
            self.chroma_client = chromadb.Client()
            
            # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            collection_name = f"kittycore_amem_{int(time.time())}"
            self.collection = self.chroma_client.create_collection(
                name=collection_name,
                get_or_create=True
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è embedding –º–æ–¥–µ–ª–∏ –≤ offline —Ä–µ–∂–∏–º–µ
            logger.info(f"üß† –ó–∞–≥—Ä—É–∂–∞–µ–º offline –º–æ–¥–µ–ª—å: {self.model_name}")
            self.embedding_model = SentenceTransformer(self.model_name)
            
            logger.info(f"üöÄ A-MEM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω OFFLINE: {self.model_name}")
            logger.info(f"üìä –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {self.embedding_model.get_sentence_embedding_dimension()}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ A-MEM: {e}")
            logger.warning("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ SimpleAgenticMemory")
            global AMEM_AVAILABLE
            AMEM_AVAILABLE = False
            self.simple_memory = SimpleAgenticMemory()
    
    async def add_note(self, content: str, tags: List[str] = None, 
                      category: str = "general", **kwargs) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —ç–≤–æ–ª—é—Ü–∏–µ–π"""
        if not AMEM_AVAILABLE:
            return await self.simple_memory.add_note(content, tags, category, **kwargs)
            
        try:
            # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è A-MEM –ª–æ–≥–∏–∫–∞
            memory_id = f"amem_{datetime.now().timestamp()}"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
            embedding = self.embedding_model.encode(content).tolist()
            
            # –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
            related_memories = await self._find_related_professional(content, embedding)
            
            # LLM –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ç–µ–≥–æ–≤ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            enhanced_tags = await self._enhance_tags_with_llm(content, tags or [])
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ ChromaDB
            self.collection.add(
                documents=[content],
                metadatas=[{
                    "agent_id": kwargs.get('agent_id', 'unknown'),
                    "category": category,
                    "tags": json.dumps(enhanced_tags),
                    "timestamp": datetime.now().isoformat(),
                    "links": json.dumps([m['id'] for m in related_memories[:3]])
                }],
                ids=[memory_id]
            )
            
            logger.info(f"üß† A-MEM –ø–∞–º—è—Ç—å —Å–æ–∑–¥–∞–Ω–∞: {memory_id} (—Å–≤—è–∑–µ–π: {len(related_memories)})")
            return memory_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ A-MEM add_note: {e}")
            # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –ø–∞–º—è—Ç—å
            return await self.simple_memory.add_note(content, tags, category, **kwargs)
    
    async def search_agentic(self, query: str, k: int = 5) -> List[Dict[str, Any]]:
        """–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ A-MEM"""
        if not AMEM_AVAILABLE:
            return await self.simple_memory.search_agentic(query, k)
            
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞
            query_embedding = self.embedding_model.encode(query).tolist()
            
            # –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≤ ChromaDB
            results = self.collection.query(
                query_embeddings=[query_embedding],
                n_results=k
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            formatted_results = []
            for i, doc_id in enumerate(results['ids'][0]):
                metadata = results['metadatas'][0][i]
                formatted_results.append({
                    'id': doc_id,
                    'content': results['documents'][0][i],
                    'tags': json.loads(metadata.get('tags', '[]')),
                    'category': metadata.get('category', 'unknown'),
                    'agent_id': metadata.get('agent_id', 'unknown'),
                    'distance': results['distances'][0][i] if 'distances' in results else 0.0
                })
            
            logger.info(f"üîç A-MEM –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(formatted_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return formatted_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ A-MEM search: {e}")
            # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –ø–∞–º—è—Ç—å
            return await self.simple_memory.search_agentic(query, k)
    
    async def _find_related_professional(self, content: str, 
                                       embedding: List[float]) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ –≤–µ–∫—Ç–æ—Ä—ã"""
        try:
            results = self.collection.query(
                query_embeddings=[embedding],
                n_results=10  # –∏—â–µ–º –±–æ–ª—å—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–∏—Ö —Å–≤—è–∑–µ–π
            )
            
            return [{'id': doc_id, 'content': doc} 
                   for doc_id, doc in zip(results['ids'][0], results['documents'][0])]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–µ–π: {e}")
            return []
    
    async def _enhance_tags_with_llm(self, content: str, 
                                   existing_tags: List[str]) -> List[str]:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ LLM (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å LLM –≤—ã–∑–æ–≤–æ–º
        words = content.lower().split()
        auto_tags = []
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∞–≤—Ç–æ—Ç–µ–≥–æ–≤
        if any(word in words for word in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', 'python', '–∫–æ–¥']):
            auto_tags.append('programming')
        if any(word in words for word in ['–∑–∞–¥–∞—á–∞', '–ø—Ä–æ–±–ª–µ–º–∞', 'issue']):
            auto_tags.append('task')
        if any(word in words for word in ['—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '—Ä–µ—à–µ–Ω–∏–µ', 'success']):
            auto_tags.append('result')
            
        return list(set(existing_tags + auto_tags))
    
    # –ú–µ—Ç–æ–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UnifiedOrchestrator
    async def store_memory(self, content: str, context: Dict[str, Any] = None, 
                          tags: List[str] = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å UnifiedOrchestrator)"""
        return await self.add_note(
            content=content,
            tags=tags or [],
            category=context.get('category', 'general') if context else 'general',
            **(context or {})
        )
    
    async def search_memories(self, query: str, filters: Dict = None, 
                            limit: int = 5) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å UnifiedOrchestrator)"""
        return await self.search_agentic(query, k=limit)

class KittyCoreMemorySystem:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è A-MEM –≤ KittyCore 3.0"""
    
    def __init__(self, vault_path: str = "obsidian_vault"):
        self.vault_path = Path(vault_path)
        self.vault_path.mkdir(exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è A-MEM —Å–∏—Å—Ç–µ–º—ã
        self.amem = AgenticMemorySystem()
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–∞–Ω–¥
        self.team_memories: Dict[str, List[str]] = {}
        self.obsidian_sync = True
        
        logger.info(f"üéØ KittyCoreMemorySystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {vault_path}")
    
    async def agent_remember(self, agent_id: str, memory: str, 
                           context: Dict[str, Any]) -> str:
        """–ê–≥–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —ç–≤–æ–ª—é—Ü–∏–µ–π"""
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ A-MEM —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            memory_id = await self.amem.add_note(
                content=memory,
                tags=[agent_id, context.get("task_type", "general")],
                category=context.get("category", "agent_memory"),
                agent_id=agent_id,
                context=context
            )
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
            team_id = context.get("team_id", "default_team")
            if team_id not in self.team_memories:
                self.team_memories[team_id] = []
            self.team_memories[team_id].append(memory_id)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Obsidian (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
            if self.obsidian_sync:
                await self._sync_to_obsidian(memory_id, memory, context)
            
            logger.info(f"üìù –ê–≥–µ–Ω—Ç {agent_id} –∑–∞–ø–æ–º–Ω–∏–ª: {memory_id}")
            return memory_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞ {agent_id}: {e}")
            return f"error_{datetime.now().timestamp()}"
    
    async def collective_search(self, query: str, 
                              team_id: str = None) -> List[Dict[str, Any]]:
        """–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ A-MEM
            all_results = await self.amem.search_agentic(query, k=20)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if team_id:
                team_results = []
                team_memory_ids = self.team_memories.get(team_id, [])
                
                for result in all_results:
                    if result['id'] in team_memory_ids or team_id in result.get('tags', []):
                        team_results.append(result)
                
                logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã {team_id}: {len(team_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return team_results[:10]  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            
            logger.info(f"üîç –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: {len(all_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return all_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    async def _sync_to_obsidian(self, memory_id: str, memory: str, 
                              context: Dict[str, Any]):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Obsidian vault"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ markdown —Ñ–∞–π–ª–∞ –≤ vault
            agent_id = context.get("agent_id", "unknown")
            filename = f"memory_{agent_id}_{memory_id}.md"
            file_path = self.vault_path / filename
            
            # Markdown –∫–æ–Ω—Ç–µ–Ω—Ç
            markdown_content = f"""# üß† Memory: {memory_id}

**Agent:** {agent_id}  
**Category:** {context.get("category", "general")}  
**Timestamp:** {datetime.now().isoformat()}

## Content
{memory}

## Context
```json
{json.dumps(context, indent=2, ensure_ascii=False)}
```

## Tags
{', '.join([f'#{tag}' for tag in context.get('tags', [])])}
"""
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
                
            logger.debug(f"üìÑ Obsidian sync: {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Obsidian sync: {e}")
    
    # –ú–µ—Ç–æ–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UnifiedOrchestrator
    async def store_memory(self, content: str, context: Dict[str, Any] = None, 
                          tags: List[str] = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ KittyCoreMemorySystem"""
        return await self.amem.store_memory(content, context, tags)
    
    async def search_memories(self, query: str, filters: Dict = None, 
                            limit: int = 5) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ KittyCoreMemorySystem"""
        return await self.amem.search_memories(query, filters, limit)


# === –≠–ö–°–ü–û–†–¢ ===

def get_enhanced_memory_system(vault_path: str = "obsidian_vault") -> KittyCoreMemorySystem:
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π fallback —Ä–µ–∂–∏–º
    import os
    if os.environ.get("FORCE_AMEM_FALLBACK", "false").lower() == "true":
        logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π fallback —Ä–µ–∂–∏–º A-MEM –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        global AMEM_AVAILABLE
        AMEM_AVAILABLE = False
    
    return KittyCoreMemorySystem(vault_path)

# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
def get_amem_integration() -> AgenticMemorySystem:
    """–ü–æ–ª—É—á–∏—Ç—å A-MEM —Å–∏—Å—Ç–µ–º—É"""
    return AgenticMemorySystem() 