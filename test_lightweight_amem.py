#!/usr/bin/env python3
"""
üê± –°–£–ü–ï–† –õ–Å–ì–ö–ò–ô –¢–ï–°–¢ A-MEM 
–ò—Å–ø–æ–ª—å–∑—É–µ–º paraphrase-MiniLM-L3-v2 (17.4M –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, ~25MB)
"""

import asyncio
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from kittycore.memory.amem_integration import AgenticMemorySystem

async def test_lightweight_amem():
    """–¢–µ—Å—Ç —Å –ª—ë–≥–∫–æ–π –º–æ–¥–µ–ª—å—é"""
    print("üöÄ –¢–ï–°–¢ –õ–Å–ì–ö–û–ì–û A-MEM")
    print(f"üì¶ –ú–æ–¥–µ–ª—å: paraphrase-MiniLM-L3-v2 (17.4M –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)")
    
    start_time = time.time()
    
    # –°–æ–∑–¥–∞—ë–º A-MEM —Å –ª—ë–≥–∫–æ–π –º–æ–¥–µ–ª—å—é
    amem = AgenticMemorySystem(model_name='paraphrase-MiniLM-L3-v2')
    
    init_time = time.time() - start_time
    print(f"‚è±Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {init_time:.2f}—Å")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ê–°–¢–û–Ø–©–ò–ô A-MEM
    if hasattr(amem, 'chroma_client'):
        print("‚úÖ ChromaDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        print(f"üìä –ö–æ–ª–ª–µ–∫—Ü–∏—è: {amem.collection.name}")
        print(f"ü§ñ –ú–æ–¥–µ–ª—å: {amem.model_name}")
    else:
        print("‚ùå Fallback —Ä–µ–∂–∏–º")
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
    print("\nüìù –î–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
    memories = [
        "–°–æ–∑–¥–∞–ª Python —Å–∫—Ä–∏–ø—Ç",
        "–ù–∞–ø–∏—Å–∞–ª HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É", 
        "–ù–∞—Å—Ç—Ä–æ–∏–ª –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    ]
    
    for memory in memories:
        await amem.add_note(
            content=memory,
            tags=["test"],
            category="development"
        )
        print(f"  üíæ {memory}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
    print("\nüîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫:")
    
    queries = ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–¥–∞–Ω–Ω—ã–µ"]
    total_found = 0
    
    for query in queries:
        results = await amem.search_agentic(query, k=2)
        print(f"  üìã '{query}': {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        total_found += len(results)
        
        for result in results:
            print(f"    üéØ {result['content']}")
    
    total_time = time.time() - start_time
    print(f"\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å")
    
    if total_found > 0:
        print("üéâ A-MEM –†–ê–ë–û–¢–ê–ï–¢ –° –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ú –ü–û–ò–°–ö–û–ú!")
        return True
    else:
        print("üòû –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False

if __name__ == "__main__":
    asyncio.run(test_lightweight_amem()) 