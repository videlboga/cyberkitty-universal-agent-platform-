#!/usr/bin/env python3
"""
üîí –û–¢–õ–ê–î–ö–ê: security_tool
"""

import asyncio
import time
import json

try:
    from kittycore.tools.security_tool import SecurityTool
    IMPORT_OK = True
    print("‚úÖ –ò–º–ø–æ—Ä—Ç security_tool —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ –û–®–ò–ë–ö–ê: {e}")
    IMPORT_OK = False

async def test_password_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä–æ–ª—è"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüîê –¢–µ—Å—Ç–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–æ–ª—è...")
    tool = SecurityTool()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å–ª–∞–±–æ–≥–æ –ø–∞—Ä–æ–ª—è
    result = await tool.execute("analyze_password", password="123456")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            if isinstance(data, dict):
                strength = data.get('strength', 'UNKNOWN')
                score = data.get('score', 0)
                print(f"üîê –ü–∞—Ä–æ–ª—å '123456': —Å–∏–ª–∞={strength}, –æ—Ü–µ–Ω–∫–∞={score}")
    
    return result

async def test_secure_password_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüîë –¢–µ—Å—Ç–∏—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è...")
    tool = SecurityTool()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å
    result = await tool.execute("generate_secure_password", length=12)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            if isinstance(data, dict):
                password = data.get('password', 'UNKNOWN')
                strength = data.get('strength', 'UNKNOWN')
                print(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: –¥–ª–∏–Ω–∞={len(password)}, —Å–∏–ª–∞={strength}")
    
    return result

async def test_code_vulnerability_scan():
    """–¢–µ—Å—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∫–æ–¥–µ"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∫–æ–¥–∞...")
    tool = SecurityTool()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏
    vulnerable_code = '''
def login(username, password):
    query = "SELECT * FROM users WHERE username = '" + username + "' AND password = '" + password + "'"
    cursor.execute(query)
    return cursor.fetchone()

def display_content(user_input):
    document.innerHTML = "<div>" + user_input + "</div>"
'''
    
    result = await tool.execute("scan_code_vulnerabilities", code=vulnerable_code)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            if isinstance(data, dict):
                vulnerabilities = data.get('vulnerabilities', [])
                security_score = data.get('security_score', 0)
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(vulnerabilities)}, –æ—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security_score}")
    
    return result

async def test_hash_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ö–µ—à–∞"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüîê –¢–µ—Å—Ç–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ —Ö–µ—à–∞...")
    tool = SecurityTool()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º MD5 —Ö–µ—à
    md5_hash = "5d41402abc4b2a76b9719d911017c592"  # —Ö–µ—à –æ—Ç "hello"
    result = await tool.execute("analyze_hash", hash_value=md5_hash)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            if isinstance(data, dict):
                algorithms = data.get('possible_algorithms', [])
                confidence = data.get('confidence', 0)
                print(f"üîê –•–µ—à –∞–Ω–∞–ª–∏–∑: –∞–ª–≥–æ—Ä–∏—Ç–º—ã={algorithms}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={confidence}")
    
    return result

def is_result_honest(result, test_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if not result:
        print(f"‚ùå {test_name}: –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É ToolResult
    if not hasattr(result, 'success'):
        print(f"‚ùå {test_name}: –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ ToolResult")
        return False
    
    success = result.success
    if not success:
        print(f"‚ùå {test_name}: success=False")
        if hasattr(result, 'error'):
            print(f"   –û—à–∏–±–∫–∞: {result.error}")
        return False
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    data_str = str(result.data) if hasattr(result, 'data') else str(result)
    data_size = len(data_str)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–µ–π–∫–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    fake_patterns = [
        "security_tool: —É—Å–ø–µ—à–Ω–æ",
        "–¥–µ–º–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–∑–∞–≥–ª—É—à–∫–∞ –ø–∞—Ä–æ–ª—è"
    ]
    
    for pattern in fake_patterns:
        if pattern.lower() in data_str.lower():
            print(f"‚ùå {test_name}: –ù–∞–π–¥–µ–Ω —Ñ–µ–π–∫–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    security_indicators = [
        "password", "strength", "vulnerability", "hash", "security", "score", 
        "algorithm", "weak", "strong", "sql", "xss", "injection", "confidence"
    ]
    
    has_security_data = any(indicator.lower() in data_str.lower() for indicator in security_indicators)
    
    if not has_security_data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        return False
    
    if data_size < 50:
        print(f"‚ùå {test_name}: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
        return False
    
    print(f"‚úÖ {test_name}: –ß–ï–°–¢–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
    return True

async def main():
    print("üîí –û–¢–õ–ê–î–ö–ê: security_tool")
    
    if not IMPORT_OK:
        return
    
    results = {}
    
    # –¢–µ—Å—Ç—ã (–≤—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ)
    tests = [
        ("password_analysis", test_password_analysis),
        ("secure_password_generation", test_secure_password_generation),
        ("code_vulnerability_scan", test_code_vulnerability_scan),
        ("hash_analysis", test_hash_analysis)
    ]
    
    for test_name, test_func in tests:
        print(f"\n{'='*30}")
        print(f"–¢–ï–°–¢: {test_name}")
        try:
            result = await test_func()
            results[test_name] = is_result_honest(result, test_name)
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ –û–®–ò–ë–ö–ê: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*50}")
    print("üìä –ò–¢–û–ì–ò:")
    
    total_tests = len(results)
    passed_tests = sum(1 for success in results.values() if success)
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
    
    print(f"\nüìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if success_rate >= 75 else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")

if __name__ == "__main__":
    asyncio.run(main()) 