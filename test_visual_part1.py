#!/usr/bin/env python3
"""
–í–ò–ó–£–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0 - –ß–ê–°–¢–¨ 1
–ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –Ω–∞–≥–ª—è–¥–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
"""

import sys
import asyncio
import time
import os
from pathlib import Path

sys.path.append('.')

async def test_part1_basic_tools():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    
    print("üîß –í–ò–ó–£–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í - –ß–ê–°–¢–¨ 1")
    print("=" * 50)
    print("üìã –¢–ï–°–¢–ò–†–£–ï–ú: MediaTool, SuperSystemTool, APIRequest")
    print()
    
    # 1. MEDIA TOOL - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    print("üé® [1/3] MEDIA TOOL - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("-" * 40)
    
    try:
        from kittycore.tools.media_tool import MediaTool
        media_tool = MediaTool()
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_image_path = "/tmp/test_kittycore_image.png"
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL
        from PIL import Image, ImageDraw, ImageFont
        
        # –°–æ–∑–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 400x300 —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        img = Image.new('RGB', (400, 300), color='lightblue')
        draw = ImageDraw.Draw(img)
        
        # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∏–≥—É—Ä—ã
        draw.rectangle([50, 50, 150, 150], fill='red', outline='black', width=3)
        draw.ellipse([200, 50, 350, 200], fill='green', outline='blue', width=3)
        draw.text((50, 200), "KittyCore 3.0 Test", fill='black')
        
        img.save(test_image_path)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image_path}")
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        result = await media_tool.execute({
            "action": "get_info",
            "file_path": test_image_path
        })
        
        if result["success"]:
            info = result.get("info", {})
            print(f"üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ò:")
            print(f"   –†–∞–∑–º–µ—Ä: {info.get('width', 0)}x{info.get('height', 0)}")
            print(f"   –§–æ—Ä–º–∞—Ç: {info.get('format', 'unknown')}")
            print(f"   –†–µ–∂–∏–º: {info.get('mode', 'unknown')}")
            print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {info.get('file_size', 0)} –±–∞–π—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {result.get('error')}")
        
        # –¢–µ—Å—Ç 2: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        resized_path = "/tmp/test_kittycore_resized.png"
        result = await media_tool.execute({
            "action": "resize",
            "file_path": test_image_path,
            "output_path": resized_path,
            "width": 200,
            "height": 150
        })
        
        if result["success"]:
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ: {resized_path}")
            if os.path.exists(resized_path):
                size = os.path.getsize(resized_path)
                print(f"   –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size} –±–∞–π—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞: {result.get('error')}")
        
        await asyncio.sleep(0.5)
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê MediaTool: {e}")
    
    print()
    
    # 2. SUPER SYSTEM TOOL - —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("üöÄ [2/3] SUPER SYSTEM TOOL - –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    print("-" * 40)
    
    try:
        from kittycore.tools.super_system_tool import SuperSystemTool
        system_tool = SuperSystemTool()
        
        # –¢–µ—Å—Ç 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        result = await system_tool.execute({
            "action": "get_system_info"
        })
        
        if result["success"]:
            info = result.get("system_info", {})
            print(f"üíª –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï:")
            print(f"   –û–°: {info.get('platform', 'unknown')}")
            print(f"   –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {info.get('processor', 'unknown')}")
            print(f"   –ü–∞–º—è—Ç—å: {info.get('memory', {}).get('total', 0) / (1024**3):.1f} –ì–ë")
            print(f"   –î–∏—Å–∫: {info.get('disk', {}).get('free', 0) / (1024**3):.1f} –ì–ë —Å–≤–æ–±–æ–¥–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {result.get('error')}")
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        test_file_path = "/tmp/kittycore_system_test.txt"
        result = await system_tool.execute({
            "action": "create_file",
            "file_path": test_file_path,
            "content": "KittyCore 3.0 System Test\n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: " + str(time.time())
        })
        
        if result["success"]:
            print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {test_file_path}")
            if os.path.exists(test_file_path):
                with open(test_file_path, 'r') as f:
                    content = f.read()
                print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤):")
                print(f"   {content[:50]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {result.get('error')}")
        
        # –¢–µ—Å—Ç 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        result = await system_tool.execute({
            "action": "execute_command",
            "command": "echo 'KittyCore —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã: $(date)'"
        })
        
        if result["success"]:
            output = result.get("output", "")
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:")
            print(f"   –í—ã–≤–æ–¥: {output.strip()}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {result.get('error')}")
        
        await asyncio.sleep(0.5)
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê SuperSystemTool: {e}")
    
    print()
    
    # 3. API REQUEST TOOL - –≤–µ–±-–∑–∞–ø—Ä–æ—Å—ã
    print("üåê [3/3] API REQUEST TOOL - –í–µ–±-–∑–∞–ø—Ä–æ—Å—ã")
    print("-" * 40)
    
    try:
        from kittycore.tools.api_request_tool import APIRequestTool
        api_tool = APIRequestTool()
        
        # –¢–µ—Å—Ç 1: GET –∑–∞–ø—Ä–æ—Å –∫ httpbin.org
        result = await api_tool.execute({
            "action": "get",
            "url": "https://httpbin.org/json"
        })
        
        if result["success"]:
            response = result.get("response", {})
            print(f"‚úÖ GET –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω:")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.get('status_code', 'unknown')}")
            print(f"   –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(str(response.get('data', '')))} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            data = response.get("data", {})
            if isinstance(data, dict):
                print(f"   –î–∞–Ω–Ω—ã–µ: {list(data.keys())[:3]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞: {result.get('error')}")
        
        # –¢–µ—Å—Ç 2: POST –∑–∞–ø—Ä–æ—Å
        result = await api_tool.execute({
            "action": "post",
            "url": "https://httpbin.org/post",
            "data": {
                "test": "KittyCore 3.0",
                "timestamp": str(time.time()),
                "message": "–¢–µ—Å—Ç POST –∑–∞–ø—Ä–æ—Å–∞"
            }
        })
        
        if result["success"]:
            response = result.get("response", {})
            print(f"‚úÖ POST –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω:")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.get('status_code', 'unknown')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            data = response.get("data", {})
            if isinstance(data, dict) and "json" in data:
                sent_data = data["json"]
                print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_data}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞: {result.get('error')}")
        
        await asyncio.sleep(0.5)
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê APIRequestTool: {e}")
    
    # –ò–¢–û–ì–ò –ß–ê–°–¢–ò 1
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –ß–ê–°–¢–ò 1 - –ë–ê–ó–û–í–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´")
    print("=" * 50)
    print("‚úÖ MediaTool: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ SuperSystemTool: –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç") 
    print("‚úÖ APIRequestTool: –í–µ–±-–∑–∞–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
    print()
    print("ÔøΩÔøΩ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    print("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —á–∞—Å—Ç–∏ 2...")

if __name__ == "__main__":
    asyncio.run(test_part1_basic_tools())
