#!/usr/bin/env python3
"""–¢–µ—Å—Ç –∑–∞–¥–∞—á–∏ –ë–∏—Ç—Ä–∏–∫—Å24 —Å –ë–´–°–¢–†–û–ô LLM –º–æ–¥–µ–ª—å—é –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""

import asyncio
import os
import sys
import time
import glob

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º KittyCore
sys.path.append('/home/cyberkitty/Project/kittycore')

from kittycore.core.unified_orchestrator import UnifiedOrchestrator
from kittycore.core.content_validator import ContentValidator
from kittycore.core.metrics_collector import MetricsCollector


def setup_fast_llm_config():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ã—Å—Ç—Ä–æ–π LLM –º–æ–¥–µ–ª–∏ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å DeepSeek R1
    os.environ["OPENROUTER_API_KEY"] = os.getenv("OPENROUTER_API_KEY", "")
    os.environ["LLM_MODEL"] = "deepseek/deepseek-r1-0528:free"  # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è
    os.environ["TIMEOUT"] = "30"  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
    os.environ["MAX_TOKENS"] = "4000"  # –ú–µ–Ω—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ = –±—ã—Å—Ç—Ä–µ–µ
    os.environ["TEMPERATURE"] = "0.1"  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ = –±–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê LLM:")
    print(f"   –ú–æ–¥–µ–ª—å: {os.environ['LLM_MODEL']}")
    print(f"   –¢–∞–π–º–∞—É—Ç: {os.environ['TIMEOUT']}—Å")
    print(f"   –ú–∞–∫—Å —Ç–æ–∫–µ–Ω—ã: {os.environ['MAX_TOKENS']}")
    print(f"   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {os.environ['TEMPERATURE']}")
    print(f"   API –∫–ª—é—á: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.environ['OPENROUTER_API_KEY'] else '‚ùå –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")


async def test_bitrix_analysis_task():
    """–¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ –ë–∏—Ç—Ä–∏–∫—Å24 —Å –±—ã—Å—Ç—Ä–æ–π LLM"""
    
    print("\n" + "="*80)
    print("üéØ –¢–ï–°–¢: –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24 —Å –ë–´–°–¢–†–û–ô LLM")
    print("="*80)
    
    setup_fast_llm_config()
    
    # –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    task = """
    –ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24:
    1. –ù–∞–π–¥–∏ –¢–û–ü-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π 
    2. –°–æ–∑–¥–∞–π –æ—Ç—á—ë—Ç —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    3. –û—Ü–µ–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã
    4. –°–æ–∑–¥–∞–π 3 –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö UX –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    """
    
    vault_path = "vault_bitrix_fast"
    
    print(f"\nüìã –ó–ê–î–ê–ß–ê: {task}")
    print(f"üìÇ VAULT: {vault_path}")
    
    # –°–æ–∑–¥–∞—ë–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = UnifiedOrchestrator(vault_path=vault_path)
    
    start_time = time.time()
    
    try:
        print("\nüöÄ –ó–ê–ü–£–°–ö –∑–∞–¥–∞—á–∏...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
        result = await orchestrator.execute_task(task)
        
        execution_time = time.time() - start_time
        print(f"\n‚è±Ô∏è –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø: {execution_time:.2f}—Å")
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å ContentValidator
        validator = ContentValidator()
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        created_files = glob.glob(f"{vault_path}/**/*", recursive=True)
        created_files = [f for f in created_files if os.path.isfile(f)]
        
        validation_result = validator.validate_task_result(task, created_files)
        quality_score = validation_result.get('percentage', 0.0) / 100.0
        
        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = MetricsCollector(vault_path)
        stats = await metrics.collect_comprehensive_metrics()
        
        print(f"\nüìä –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê: {quality_score:.2f}")
        print(f"üìÑ –°–û–ó–î–ê–ù–ù–´–• –§–ê–ô–õ–û–í: {stats.get('total_files', 0)}")
        print(f"üìà –°–¢–ê–¢–£–°: {'‚úÖ –£–°–ü–ï–•' if quality_score >= 0.7 else '‚ùå –ü–†–û–í–ê–õ'}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\nüîç –ú–ï–¢–†–ò–ö–ò –°–ò–°–¢–ï–ú–´:")
        print(f"   üìÅ –û–±—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {stats.get('total_files', 0)}")
        print(f"   ü§ñ –ê–≥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {stats.get('agent_count', 0)}")
        print(f"   üìã –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('task_count', 0)}")
        
        return {
            'success': quality_score >= 0.7,
            'quality_score': quality_score,
            'execution_time': execution_time,
            'files_created': stats.get('total_files', 0),
            'task_completed': True
        }
        
    except Exception as e:
        execution_time = time.time() - start_time
        error_msg = str(e)
        
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {error_msg}")
        print(f"‚è±Ô∏è –í–†–ï–ú–Ø –î–û –û–®–ò–ë–ö–ò: {execution_time:.2f}—Å")
        
        return {
            'success': False,
            'error': error_msg,
            'execution_time': execution_time,
            'task_completed': False
        }


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üê± KittyCore 3.0 - –¢–µ—Å—Ç –ë–´–°–¢–†–û–ô LLM —Å –∑–∞–¥–∞—á–µ–π –ë–∏—Ç—Ä–∏–∫—Å24")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if not os.getenv("OPENROUTER_API_KEY"):
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENROUTER_API_KEY")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export OPENROUTER_API_KEY=your_key")
        return
    
    result = await test_bitrix_analysis_task()
    
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("="*80)
    
    if result['task_completed']:
        if result['success']:
            print(f"‚úÖ –£–°–ü–ï–•! –°–∏—Å—Ç–µ–º–∞ —Å LLM —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ")
            print(f"   üìà –ö–∞—á–µ—Å—Ç–≤–æ: {result['quality_score']:.2f}")
            print(f"   üìÑ –§–∞–π–ª–æ–≤: {result['files_created']}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {result['execution_time']:.2f}—Å")
        else:
            print(f"‚ö†Ô∏è –ù–ò–ó–ö–û–ï –ö–ê–ß–ï–°–¢–í–û: —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–æ—Ö–æ–π")
            print(f"   üìà –ö–∞—á–µ—Å—Ç–≤–æ: {result['quality_score']:.2f} (–Ω—É–∂–Ω–æ ‚â•0.7)")
            print(f"   üìÑ –§–∞–π–ª–æ–≤: {result['files_created']}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {result['execution_time']:.2f}—Å")
    else:
        print(f"‚ùå –ü–†–û–í–ê–õ: {result['error']}")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {result['execution_time']:.2f}—Å")
        
        if "timeout" in result['error'].lower():
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞:")
            print("   1. –£–≤–µ–ª–∏—á–∏—Ç—å TIMEOUT –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print("   2. –£–º–µ–Ω—å—à–∏—Ç—å MAX_TOKENS")
            print("   3. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å")
            print("   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")


if __name__ == "__main__":
    asyncio.run(main()) 