#!/usr/bin/env python3
"""
üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø KITTYCORE 3.0 –° –ü–û–õ–ù–û–ô LLM –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
- –†–µ–∞–ª—å–Ω—ã–µ LLM –≤—ã–∑–æ–≤—ã —á–µ—Ä–µ–∑ OpenRouter
- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å LLM –∞–Ω–∞–ª–∏–∑–æ–º
- –ë–æ–≥–∞—Ç—É—é –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å —Å –ø–æ–ª–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
- –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
"""

import asyncio
import sys
import os
sys.path.insert(0, os.path.dirname(__file__))

async def demo_main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ KittyCore 3.0"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø KITTYCORE 3.0 - –°–ê–ú–û–†–ï–î–£–ü–õ–ò–¶–ò–†–£–Æ–©–ê–Ø–°–Ø –ê–ì–ï–ù–¢–ù–ê–Ø –°–ò–°–¢–ï–ú–ê")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è LLM —Ä–∞–±–æ—Ç—ã.")
        return
    
    print(f"üîë LLM API –∫–ª—é—á –≥–æ—Ç–æ–≤: {api_key[:20]}...{api_key[-10:]}")
    
    try:
        from kittycore.core.orchestrator import OrchestratorAgent, OrchestratorConfig
        from kittycore.core.rich_reporting import ReportLevel
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø–æ–ª–Ω–æ–π –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å—é
        config = OrchestratorConfig(
            orchestrator_id="demo_orchestrator",
            report_level=ReportLevel.FULL,
            max_agents=5
        )
        orchestrator = OrchestratorAgent(config)
        print("‚úÖ OrchestratorAgent —Å–æ–∑–¥–∞–Ω —Å –ø–æ–ª–Ω–æ–π –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å—é")
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞
        print("\nüåê –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞ —Å –∫–æ—Ç—è—Ç–∞–º–∏")
        print("-" * 50)
        
        task1 = "–°–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤—ã–π HTML —Å–∞–π—Ç –ø—Ä–æ –ø–æ—Ä–æ–¥—ã –∫–æ—à–µ–∫ —Å CSS —Å—Ç–∏–ª—è–º–∏"
        result1 = await orchestrator.solve_task(task1, {"user_id": "demo_user"})
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result1['status']}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result1.get('duration', 0):.2f}—Å")
        if 'rich_reporting' in result1:
            print(f"üìä –û—Ç—á—ë—Ç: {result1['rich_reporting']['execution_id']}")
            print(f"üì± –ö—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥: {result1['rich_reporting']['ui_summary']}")
        
        # –¢–µ—Å—Ç 2: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑
        print("\nüìã –¢–ï–°–¢ 2: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("-" * 50)
        
        task2 = "–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤"
        result2 = await orchestrator.solve_task(task2, {"user_id": "demo_user"})
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result2['status']}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result2.get('duration', 0):.2f}—Å")
        if 'rich_reporting' in result2:
            print(f"üìä –û—Ç—á—ë—Ç: {result2['rich_reporting']['execution_id']}")
            print(f"üì± –ö—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥: {result2['rich_reporting']['ui_summary']}")
        
        # –¢–µ—Å—Ç 3: –ù–∞—É—á–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã
        print("\nüî¨ –¢–ï–°–¢ 3: –ù–∞—É—á–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã")
        print("-" * 50)
        
        task3 = "–†–∞—Å—Å—á–∏—Ç–∞–π –æ—Ä–±–∏—Ç–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Å–ø—É—Ç–Ω–∏–∫–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ 400–∫–º –æ—Ç –ó–µ–º–ª–∏"
        result3 = await orchestrator.solve_task(task3, {"user_id": "demo_user"})
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result3['status']}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result3.get('duration', 0):.2f}—Å")
        if 'rich_reporting' in result3:
            print(f"üìä –û—Ç—á—ë—Ç: {result3['rich_reporting']['execution_id']}")
            print(f"üì± –ö—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥: {result3['rich_reporting']['ui_summary']}")
        
        # –ò—Ç–æ–≥–∏
        successful = sum(1 for r in [result1, result2, result3] if r['status'] == 'completed')
        total = 3
        
        print(f"\nüéØ –ò–¢–û–ì–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
        print("=" * 50)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–¥–∞—á: {successful}/{total}")
        print(f"üß† LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –†–ê–ë–û–¢–ê–ï–¢")
        print(f"ü§ñ –ê–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –†–ê–ë–û–¢–ê–ï–¢")
        print(f"üìä –ë–æ–≥–∞—Ç–∞—è –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å: –†–ê–ë–û–¢–ê–ï–¢")
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤: –†–ê–ë–û–¢–ê–ï–¢")
        
        if successful == total:
            print("\nüéâ KITTYCORE 3.0 –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–ï–ù!")
            print("üî• –°–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–∞—è—Å—è –∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –±–æ–µ–≤—ã–º –∑–∞–¥–∞—á–∞–º!")
        else:
            print(f"\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã
        print(f"\nüìÑ –î–ï–¢–ê–õ–¨–ù–´–ï –û–¢–ß–Å–¢–´:")
        print("-" * 30)
        for i, result in enumerate([result1, result2, result3], 1):
            if 'rich_reporting' in result:
                report_file = result['rich_reporting'].get('detailed_report_file')
                if report_file and os.path.exists(report_file):
                    size = os.path.getsize(report_file)
                    print(f"üìä –¢–µ—Å—Ç {i}: {report_file} ({size} –±–∞–π—Ç)")
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(demo_main()) 