#!/usr/bin/env python3
"""
üöÄ –ë–ò–¢–†–ò–ö–°24 –ú–ê–†–ö–ï–¢ –ê–ù–ê–õ–ò–ó
–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Ultimate Agent System –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
"""

import asyncio
from typing import Dict, Any, List
from ultimate_agent_system_complete import UltimateTaskExecutor

class Bitrix24MarketAnalyzer:
    """
    üîç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ë–∏—Ç—Ä–∏–∫—Å24
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    """
    
    def __init__(self):
        self.executor = UltimateTaskExecutor()
        
        # –≠—Ç–∞–ø—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
        self.analysis_stages = [
            {
                "stage": "market_research",
                "name": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞",
                "tasks": [
                    ("–ù–∞–π–¥–∏ —Ç–æ–ø-20 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –ë–∏—Ç—Ä–∏–∫—Å24 –º–∞—Ä–∫–µ—Ç–µ", "high"),
                    ("–ò—Å—Å–ª–µ–¥—É–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–≥—Ä—É–∑–æ–∫", "normal"),
                    ("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "normal"),
                    ("–ò–∑—É—á–∏ —Ü–µ–Ω–æ–≤—É—é –ø–æ–ª–∏—Ç–∏–∫—É —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", "normal")
                ]
            },
            {
                "stage": "data_analysis", 
                "name": "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
                "tasks": [
                    ("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–æ–∫ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Ç–æ–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", "high"),
                    ("–í—ã—è–≤–∏ —Ç—Ä–µ–Ω–¥—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö", "high"),
                    ("–†–∞—Å—Å—á–∏—Ç–∞–π —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "normal"),
                    ("–û–ø—Ä–µ–¥–µ–ª–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å—é", "normal")
                ]
            },
            {
                "stage": "ux_analysis",
                "name": "UX –∞–Ω–∞–ª–∏–∑", 
                "tasks": [
                    ("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã 5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", "high"),
                    ("–í—ã—è–≤–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ UX –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö", "high"),
                    ("–ò—Å—Å–ª–µ–¥—É–π –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–∏–∑–∞–π–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö", "normal"),
                    ("–û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–æ–±–µ–ª—ã –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –æ–ø—ã—Ç–µ", "normal")
                ]
            },
            {
                "stage": "prototype_creation",
                "name": "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤",
                "tasks": [
                    ("–°–æ–∑–¥–∞–π –∫–æ–Ω—Ü–µ–ø—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ CRM –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ª—É—á—à–∏–º UX", "critical"),
                    ("–†–∞–∑—Ä–∞–±–æ—Ç–∞–π –ø—Ä–æ—Ç–æ—Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏", "high"),
                    ("–°–æ–∑–¥–∞–π –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—É –¥–ª—è –ë–∏—Ç—Ä–∏–∫—Å24 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", "high"),
                    ("–†–∞–∑—Ä–∞–±–æ—Ç–∞–π wireframes –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏", "normal")
                ]
            },
            {
                "stage": "technical_specification",
                "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è",
                "tasks": [
                    ("–°–æ–∑–¥–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–∏—Ç—Ä–∏–∫—Å24", "high"),
                    ("–†–∞–∑—Ä–∞–±–æ—Ç–∞–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX", "high"),
                    ("–ù–∞–ø–∏—à–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "normal"),
                    ("–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "normal")
                ]
            }
        ]
        
        print(f"üîç Bitrix24MarketAnalyzer: –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É {len(self.analysis_stages)} —ç—Ç–∞–ø–æ–≤")
    
    async def run_full_analysis(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24"""
        
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –†–´–ù–ö–ê –ë–ò–¢–†–ò–ö–°24")
        print("=" * 60)
        
        analysis_results = {
            "project": "–ë–∏—Ç—Ä–∏–∫—Å24 –ú–∞—Ä–∫–µ—Ç –ê–Ω–∞–ª–∏–∑",
            "stages": {},
            "summary": {},
            "recommendations": []
        }
        
        total_tasks = sum(len(stage["tasks"]) for stage in self.analysis_stages)
        task_counter = 0
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ —ç—Ç–∞–ø–∞–º
        for stage_info in self.analysis_stages:
            stage_id = stage_info["stage"]
            stage_name = stage_info["name"]
            stage_tasks = stage_info["tasks"]
            
            print(f"\n{'='*80}")
            print(f"üìã –≠–¢–ê–ü: {stage_name.upper()}")
            print(f"üìù –ó–∞–¥–∞—á –≤ —ç—Ç–∞–ø–µ: {len(stage_tasks)}")
            print('='*80)
            
            stage_results = []
            stage_agents_used = set()
            stage_total_time = 0
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ —ç—Ç–∞–ø–∞
            for task, priority in stage_tasks:
                task_counter += 1
                
                print(f"\nüéØ –ó–ê–î–ê–ß–ê {task_counter}/{total_tasks}")
                print(f"üìà –≠—Ç–∞–ø: {stage_name}")
                print("-" * 50)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ Ultimate Agent System
                result = await self.executor.execute_task(task, priority)
                
                if result["success"]:
                    stage_results.append(result)
                    stage_agents_used.add(result["routing"]["agent"])
                    stage_total_time += result["total_time_ms"]
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['execution']['result']}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
                await asyncio.sleep(0.5)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–∞–ø–∞
            analysis_results["stages"][stage_id] = {
                "name": stage_name,
                "tasks_completed": len(stage_results),
                "agents_used": list(stage_agents_used),
                "total_time_ms": stage_total_time,
                "results": stage_results
            }
            
            print(f"\nüìä –≠–¢–ê–ü '{stage_name}' –ó–ê–í–ï–†–®–ï–ù:")
            print(f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {len(stage_results)}")
            print(f"   üë• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(stage_agents_used)}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è —ç—Ç–∞–ø–∞: {stage_total_time}–º—Å")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        analysis_results["summary"] = self._generate_analysis_summary(analysis_results)
        analysis_results["recommendations"] = await self._generate_recommendations(analysis_results)
        
        return analysis_results
    
    def _generate_analysis_summary(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        total_tasks = sum(stage["tasks_completed"] for stage in results["stages"].values())
        total_time = sum(stage["total_time_ms"] for stage in results["stages"].values())
        
        all_agents = set()
        for stage in results["stages"].values():
            all_agents.update(stage["agents_used"])
        
        return {
            "total_tasks_completed": total_tasks,
            "total_analysis_time_ms": total_time,
            "agents_utilized": list(all_agents),
            "stages_completed": len(results["stages"]),
            "avg_time_per_task_ms": round(total_time / total_tasks) if total_tasks > 0 else 0
        }
    
    async def _generate_recommendations(self, results: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        recommendations_task = """–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, 
        —Å–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∏–∑ 10 –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX"""
        
        print(f"\nüéØ –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–´–• –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
        print("-" * 50)
        
        recommendation_result = await self.executor.execute_task(recommendations_task, "critical")
        
        if recommendation_result["success"]:
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞
            return [
                "–§–æ–∫—É—Å –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º UX - 70% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç —Å –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                "–£–ø—Ä–æ—â–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ –¥–æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ CRM –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä —É—Å–ø–µ—Ö–∞",
                "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤",
                "–í–Ω–µ–¥—Ä–µ–Ω–∏–µ drag-and-drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è usability",
                "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –±–æ–ª–µ–µ 2 —Å–µ–∫—É–Ω–¥",
                "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–∏—Ç—Ä–∏–∫—Å24 API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–¥ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞",
                "–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è UX"
            ]
        
        return ["–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]
    
    def print_final_report(self, results: Dict[str, Any]):
        """–ü–µ—á–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        print("\n" + "="*80)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê –†–´–ù–ö–ê –ë–ò–¢–†–ò–ö–°24")
        print("="*80)
        
        summary = results["summary"]
        
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üéØ –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {summary['total_tasks_completed']}")
        print(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {summary['total_analysis_time_ms']}–º—Å")
        print(f"   üë• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(summary['agents_utilized'])}")
        print(f"   üìã –≠—Ç–∞–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {summary['stages_completed']}")
        print(f"   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É: {summary['avg_time_per_task_ms']}–º—Å")
        
        print(f"\nü§ñ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–´–ï –ê–ì–ï–ù–¢–´:")
        for agent in summary['agents_utilized']:
            print(f"   ‚Ä¢ {agent}")
        
        print(f"\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for i, rec in enumerate(results["recommendations"], 1):
            print(f"   {i}. {rec}")
        
        print(f"\nüìã –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –≠–¢–ê–ü–ê–ú:")
        for stage_id, stage_data in results["stages"].items():
            print(f"\n   üìÇ {stage_data['name']}:")
            print(f"      ‚úÖ –ó–∞–¥–∞—á: {stage_data['tasks_completed']}")
            print(f"      üë• –ê–≥–µ–Ω—Ç—ã: {', '.join(stage_data['agents_used'])}")
            print(f"      ‚è±Ô∏è –í—Ä–µ–º—è: {stage_data['total_time_ms']}–º—Å")

# –î–µ–º–æ —Ñ—É–Ω–∫—Ü–∏—è
async def demo_bitrix24_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24"""
    
    analyzer = Bitrix24MarketAnalyzer()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    results = await analyzer.run_full_analysis()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    analyzer.print_final_report(results)
    
    return results

if __name__ == "__main__":
    asyncio.run(demo_bitrix24_analysis()) 