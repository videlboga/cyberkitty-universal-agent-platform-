"""
üõ†Ô∏è BaseTool - –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ KittyCore 3.0

–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:
- Tool (–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å)
- BaseTool (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –Ω–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)
- ToolResult (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
- ToolManager (–º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)

–ü–†–ê–í–ò–õ–û: –ì–æ—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö!
"""

import logging
from abc import ABC, abstractmethod
from datetime import datetime
from typing import Dict, Any, List, Optional, Callable
from pathlib import Path

from .unified_tool_result import ToolResult

logger = logging.getLogger(__name__)


class Tool(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ KittyCore 3.0
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å execute()
    - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ö–µ–º—ã
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    
    def __init__(self, name: str, description: str):
        self.name = name
        self.description = description
        self.created_at = datetime.now()
        self.execution_count = 0
        self.last_execution = None
        
        logger.info(f"üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    @abstractmethod
    def execute(self, **kwargs) -> ToolResult:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        
        Args:
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            ToolResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        pass
    
    @abstractmethod 
    def get_schema(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å JSON Schema –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        
        Returns:
            Dict: JSON Schema
        """
        pass
    
    def validate_params(self, params: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —Å—Ö–µ–º–µ"""
        try:
            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å jsonschema
            schema = self.get_schema()
            required = schema.get("required", [])
            
            for field in required:
                if field not in params:
                    logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {field}")
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return False
    
    def _execute_with_logging(self, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        start_time = datetime.now()
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not self.validate_params(kwargs):
                return ToolResult(
                    success=False,
                    error="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
                )
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            result = self.execute(**kwargs)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.execution_count += 1
            self.last_execution = datetime.now()
            
            execution_time = (datetime.now() - start_time).total_seconds()
            logger.info(f"‚úÖ {self.name} –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_time:.2f}—Å")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {self.name}: {e}")
            return ToolResult(success=False, error=str(e))
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        return {
            "name": self.name,
            "description": self.description,
            "execution_count": self.execution_count,
            "last_execution": self.last_execution.isoformat() if self.last_execution else None,
            "created_at": self.created_at.isoformat()
        }


class BaseTool(Tool):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –Ω–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ KittyCore 3.0
    
    –î–æ–±–∞–≤–ª—è–µ—Ç:
    - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (actions)
    - –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
    - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self, name: str, description: str):
        super().__init__(name, description)
        self.actions = {}
        self.metrics = {
            "total_actions": 0,
            "successful_actions": 0,
            "failed_actions": 0,
            "average_execution_time": 0.0
        }
    
    def get_available_actions(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        return list(self.actions.keys()) if hasattr(self, 'actions') else []
    
    def execute(self, action: str = None, **kwargs) -> ToolResult:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        
        Args:
            action: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–π—Å—Ç–≤–∏—è
        """
        start_time = datetime.now()
        
        try:
            if not action:
                return ToolResult(
                    success=False,
                    error="–ù–µ —É–∫–∞–∑–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ",
                    data={"available_actions": self.get_available_actions()}
                )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            result = self._execute_action(action, **kwargs)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            execution_time = (datetime.now() - start_time).total_seconds()
            self._update_metrics(True, execution_time)
            
            return result
            
        except Exception as e:
            self._update_metrics(False, (datetime.now() - start_time).total_seconds())
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action}: {e}")
            return ToolResult(success=False, error=str(e))
    
    def _execute_action(self, action: str, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö"""
        return ToolResult(
            success=False,
            error=f"–î–µ–π—Å—Ç–≤–∏–µ {action} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ"
        )
    
    def _update_metrics(self, success: bool, execution_time: float):
        """–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.metrics["total_actions"] += 1
        
        if success:
            self.metrics["successful_actions"] += 1
        else:
            self.metrics["failed_actions"] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        total = self.metrics["total_actions"]
        current_avg = self.metrics["average_execution_time"]
        self.metrics["average_execution_time"] = ((current_avg * (total - 1)) + execution_time) / total
    
    def get_schema(self) -> Dict[str, Any]:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ö–µ–º–∞ –¥–ª—è BaseTool"""
        return {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                    "enum": self.get_available_actions()
                }
            },
            "required": ["action"]
        }


class FunctionTool(Tool):
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
    
    def __init__(self, name: str, description: str, func: Callable, schema: Dict[str, Any]):
        super().__init__(name, description)
        self.func = func
        self.schema = schema
    
    def execute(self, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—ë—Ä–Ω—É—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é"""
        try:
            result = self.func(**kwargs)
            return ToolResult(success=True, data=result)
        except Exception as e:
            return ToolResult(success=False, error=str(e))
    
    def get_schema(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É –æ–±—ë—Ä–Ω—É—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        return self.schema


class ToolManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        self.tools: Dict[str, Tool] = {}
        self.categories: Dict[str, List[str]] = {}
        
        logger.info("üîß ToolManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def register(self, tool: Tool, category: str = "general") -> None:
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        self.tools[tool.name] = tool
        
        if category not in self.categories:
            self.categories[category] = []
        self.categories[category].append(tool.name)
        
        logger.info(f"üìù –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool.name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
    
    def get_tool(self, name: str) -> Optional[Tool]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏"""
        return self.tools.get(name)
    
    def execute_tool(self, name: str, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏"""
        tool = self.get_tool(name)
        if not tool:
            return ToolResult(
                success=False,
                error=f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {name} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                data={"available_tools": list(self.tools.keys())}
            )
        
        return tool._execute_with_logging(**kwargs)
    
    def list_tools(self, category: Optional[str] = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        if category:
            tool_names = self.categories.get(category, [])
            return [self.tools[name].get_stats() for name in tool_names]
        
        return [tool.get_stats() for tool in self.tools.values()]
    
    def get_tools_by_category(self, category: str) -> List[Tool]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        tool_names = self.categories.get(category, [])
        return [self.tools[name] for name in tool_names]
    
    def get_schema_for_all(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—ã –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        return {
            name: tool.get_schema() 
            for name, tool in self.tools.items()
        }


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

def create_function_tool(
    name: str, 
    description: str, 
    func: Callable,
    schema: Dict[str, Any]
) -> Tool:
    """–°–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏"""
    return FunctionTool(name, description, func, schema)


def create_simple_tool(name: str, description: str, func: Callable) -> Tool:
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º–æ–π"""
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
    import inspect
    sig = inspect.signature(func)
    
    properties = {}
    required = []
    
    for param_name, param in sig.parameters.items():
        properties[param_name] = {
            "type": "string",  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            "description": f"–ü–∞—Ä–∞–º–µ—Ç—Ä {param_name}"
        }
        
        if param.default == inspect.Parameter.empty:
            required.append(param_name)
    
    schema = {
        "type": "object", 
        "properties": properties,
        "required": required
    }
    
    return create_function_tool(name, description, func, schema) 