#!/usr/bin/env python3
"""
üß† –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤ —Å A-MEM
–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ A-MEM –ø–æ–º–æ–≥–∞–µ—Ç —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig

async def test_improved_agent_logic():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤ —Å A-MEM –æ–±—É—á–µ–Ω–∏–µ–º"""
    
    print("üß† === –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –ê–ì–ï–ù–¢–û–í ===")
    print("üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ A-MEM —É–ª—É—á—à–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á")
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = UnifiedConfig(
        vault_path="./vault_improved_test",
        enable_amem_memory=True,
        enable_smart_validation=True,
        max_agents=3
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    print("\nüöÄ === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===")
    orchestrator = UnifiedOrchestrator(config)
    print(f"üß† A-MEM —Ç–∏–ø: {type(orchestrator.amem_system).__name__}")
    print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—É—á–µ–Ω–∏—é!")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–∏—è
    test_tasks = [
        {
            "id": "task_1_baseline",
            "task": "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ –∫–æ—Ç—è—Ç",
            "expected_files": 1,
            "complexity": "simple"
        },
        {
            "id": "task_2_analysis", 
            "task": "–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö CRM —Å–∏—Å—Ç–µ–º –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á—ë—Ç —Å 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏",
            "expected_files": 3,  # analysis.md, crm_data.json, recommendations.md
            "complexity": "medium"
        },
        {
            "id": "task_3_bitrix_repeat",
            "task": "–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∞ –±–∏—Ç—Ä–∏–∫—Å 24, –Ω–∞–π–¥–∏ —Ç–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö, —Å–æ—Å—Ç–∞–≤—å –æ—Ç—á—ë—Ç –∏ —Å–æ–∑–¥–∞–π 2 –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞",
            "expected_files": 4,  # market_analysis.md, top_apps.json, report.md, 2 prototypes
            "complexity": "complex"
        }
    ]
    
    results = []
    
    print("\n‚ö° === –í–´–ü–û–õ–ù–ï–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ó–ê–î–ê–ß ===")
    
    for i, test_task in enumerate(test_tasks, 1):
        print(f"\nüìã –ó–ê–î–ê–ß–ê {i}: {test_task['task'][:50]}...")
        print(f"üéØ –û–∂–∏–¥–∞–µ–º: {test_task['expected_files']} —Ñ–∞–π–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        memory_count_before = 0
        if orchestrator.amem_system:
            try:
                memories = await orchestrator.amem_system.search_memories(
                    query="–ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
                    limit=10
                )
                memory_count_before = len(memories)
                print(f"üíæ –û–ø—ã—Ç–∞ –≤ A-MEM: {memory_count_before} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            except:
                pass
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
        start_time = datetime.now()
        try:
            result = await orchestrator.solve_task(test_task["task"])
            execution_time = (datetime.now() - start_time).total_seconds()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            files_created = len(result.get("files_created", []))
            success = result.get("success", False)
            quality = result.get("quality_score", 0.0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
            memory_count_after = memory_count_before
            if orchestrator.amem_system:
                try:
                    memories = await orchestrator.amem_system.search_memories(
                        query="–ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
                        limit=10
                    )
                    memory_count_after = len(memories)
                except:
                    pass
            
            result_data = {
                "task_id": test_task["id"],
                "success": success,
                "files_created": files_created,
                "expected_files": test_task["expected_files"],
                "execution_time": execution_time,
                "quality_score": quality,
                "memory_before": memory_count_before,
                "memory_after": memory_count_after,
                "memory_growth": memory_count_after - memory_count_before,
                "completeness": files_created / test_task["expected_files"] if test_task["expected_files"] > 0 else 0
            }
            
            results.append(result_data)
            
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {'–£—Å–ø–µ—Ö' if success else '–ß–∞—Å—Ç–∏—á–Ω–æ'}")
            print(f"   üìÅ –§–∞–π–ª–æ–≤: {files_created}/{test_task['expected_files']} ({result_data['completeness']:.1%} –ø–æ–ª–Ω–æ—Ç—ã)")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {execution_time:.1f}—Å")
            print(f"   üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {quality:.2f}")
            print(f"   üß† –ù–æ–≤—ã–π –æ–ø—ã—Ç: +{result_data['memory_growth']} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            result_data = {
                "task_id": test_task["id"],
                "success": False,
                "error": str(e),
                "memory_before": memory_count_before,
                "memory_after": memory_count_before,
                "memory_growth": 0
            }
            results.append(result_data)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
    print("\nüìä === –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò –û–ë–£–ß–ï–ù–ò–Ø ===")
    
    successful_tasks = [r for r in results if r.get("success", False)]
    avg_completeness = sum(r.get("completeness", 0) for r in results) / len(results)
    total_memory_growth = sum(r.get("memory_growth", 0) for r in results)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–¥–∞—á: {len(successful_tasks)}/{len(results)}")
    print(f"üìà –°—Ä–µ–¥–Ω—è—è –ø–æ–ª–Ω–æ—Ç–∞: {avg_completeness:.1%}")
    print(f"üß† –û–±—â–µ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞: +{total_memory_growth} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    if len(results) >= 2:
        quality_trend = []
        completeness_trend = []
        
        for r in results:
            if "quality_score" in r:
                quality_trend.append(r["quality_score"])
            if "completeness" in r:
                completeness_trend.append(r["completeness"])
        
        if len(quality_trend) >= 2:
            quality_improvement = quality_trend[-1] - quality_trend[0]
            print(f"üìà –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_improvement:+.2f}")
            
        if len(completeness_trend) >= 2:
            completeness_improvement = completeness_trend[-1] - completeness_trend[0]
            print(f"üìà –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Ç—ã: {completeness_improvement:+.1%}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –æ–ø—ã—Ç–∞
    if orchestrator.amem_system and total_memory_growth > 0:
        print("\nüîç === –¢–ï–°–¢ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê –û–ü–´–¢–ê ===")
        
        search_queries = [
            "—É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞–Ω—ã –∞–Ω–∞–ª–∏–∑–∞",
            "—Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ HTML",
            "–ø—Ä–æ–±–ª–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á",
            "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è CRM –∞–Ω–∞–ª–∏–∑–∞"
        ]
        
        for query in search_queries:
            try:
                memories = await orchestrator.amem_system.search_memories(
                    query=query,
                    limit=3
                )
                print(f"   üîç '{query}': {len(memories)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                if memories:
                    best_match = memories[0]
                    preview = best_match.get('content', '')[:80] + "..."
                    print(f"      üí° –õ—É—á—à–∏–π: {preview}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ '{query}': {e}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —É–ª—É—á—à–µ–Ω–∏—è
    print("\nüöÄ === –ü–û–¢–ï–ù–¶–ò–ê–õ A-MEM –£–õ–£–ß–®–ï–ù–ò–ô ===")
    
    if avg_completeness < 0.8:
        print("‚ö†Ô∏è –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        print("   - –ù–µ–ø–æ–ª–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á")
        print("   - –°–ª–∞–±–∞—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –Ω–∞ —ç—Ç–∞–ø—ã")
        print("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã")
        
        print("\nüí° A-MEM –ü–û–ú–û–ñ–ï–¢:")
        print("   - –ù–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("   - –ò–∑—É—á–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ –∏–∑–±–µ–≥–∞—Ç—å –∏—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
        print("   - –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω—ã –ø–æ–¥ —Ç–∏–ø—ã –∑–∞–¥–∞—á")
        print("   - –£–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å –∫–∞–∂–¥–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ–π")
    
    if total_memory_growth > 0:
        print(f"\n‚úÖ A-MEM –ê–ö–¢–ò–í–ù–û –û–ë–£–ß–ê–ï–¢–°–Ø:")
        print(f"   - –ù–∞–∫–æ–ø–ª–µ–Ω–æ {total_memory_growth} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        print(f"   - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   - –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    test_results = {
        "timestamp": datetime.now().isoformat(),
        "test_summary": {
            "total_tasks": len(results),
            "successful_tasks": len(successful_tasks),
            "avg_completeness": avg_completeness,
            "total_memory_growth": total_memory_growth
        },
        "individual_results": results,
        "amem_status": {
            "available": orchestrator.amem_system is not None,
            "type": type(orchestrator.amem_system).__name__ if orchestrator.amem_system else None
        }
    }
    
    with open("improved_agent_logic_results.json", "w", encoding="utf-8") as f:
        json.dump(test_results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: improved_agent_logic_results.json")
    
    if avg_completeness >= 0.8 and total_memory_growth > 0:
        print("\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù: A-MEM —É–ª—É—á—à–∞–µ—Ç –ª–æ–≥–∏–∫—É –∞–≥–µ–Ω—Ç–æ–≤!")
    else:
        print("\n‚ö†Ô∏è –¢–ï–°–¢ –ß–ê–°–¢–ò–ß–ù–û –£–°–ü–ï–®–ï–ù: –ï—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
    
    return test_results

if __name__ == "__main__":
    asyncio.run(test_improved_agent_logic()) 