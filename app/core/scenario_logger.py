"""
üîç –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –°–¶–ï–ù–ê–†–ò–ï–í
–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª—ã
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
- –†–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
- –ú–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import json
import time
from datetime import datetime, timezone
from typing import Dict, Any, List, Optional, Union
from dataclasses import dataclass, field, asdict
from loguru import logger
from enum import Enum

class LogLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    MINIMAL = "minimal"      # –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü —Å—Ü–µ–Ω–∞—Ä–∏—è
    BASIC = "basic"          # + –∫–∞–∂–¥—ã–π —à–∞–≥
    DETAILED = "detailed"    # + –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    FULL = "full"           # + –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ

@dataclass
class StepLog:
    """–õ–æ–≥ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    step_id: str
    step_type: str
    started_at: datetime
    finished_at: Optional[datetime] = None
    duration_ms: Optional[float] = None
    status: str = "running"  # running, success, error, stopped
    error_message: Optional[str] = None
    
    # –î–∞–Ω–Ω—ã–µ —à–∞–≥–∞
    step_params: Dict[str, Any] = field(default_factory=dict)
    step_result: Dict[str, Any] = field(default_factory=dict)
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è DETAILED –∏ FULL —É—Ä–æ–≤–Ω–µ–π)
    context_before: Optional[Dict[str, Any]] = None
    context_after: Optional[Dict[str, Any]] = None
    context_changes: Optional[Dict[str, Any]] = None

@dataclass
class ScenarioLog:
    """–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    execution_id: str
    scenario_id: str
    user_id: Optional[str] = None
    chat_id: Optional[str] = None
    channel_id: Optional[str] = None
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    started_at: datetime = field(default_factory=lambda: datetime.now(timezone.utc))
    finished_at: Optional[datetime] = None
    duration_ms: Optional[float] = None
    
    # –°—Ç–∞—Ç—É—Å
    status: str = "running"  # running, completed, error, stopped
    final_status: Optional[str] = None
    error_message: Optional[str] = None
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç
    initial_context: Dict[str, Any] = field(default_factory=dict)
    final_context: Dict[str, Any] = field(default_factory=dict)
    
    # –®–∞–≥–∏
    steps: List[StepLog] = field(default_factory=list)
    total_steps: int = 0
    completed_steps: int = 0
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    performance_metrics: Dict[str, Any] = field(default_factory=dict)

class ScenarioLogger:
    """
    –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª—ã –∏ MongoDB
    - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    
    def __init__(self, log_level: LogLevel = LogLevel.BASIC, mongo_plugin=None):
        self.log_level = log_level
        self.mongo_plugin = mongo_plugin
        self.active_scenarios: Dict[str, ScenarioLog] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        self.logger = logger.bind(component="ScenarioLogger")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        logger.add(
            "logs/scenario_execution.log",
            rotation="50 MB",
            retention="30 days",
            compression="gz",
            format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | SCENARIO | {message}",
            level="INFO",
            filter=lambda record: record.get("extra", {}).get("component") == "ScenarioLogger"
        )
    
    def start_scenario(self, 
                      execution_id: str,
                      scenario_id: str,
                      initial_context: Dict[str, Any],
                      user_id: Optional[str] = None,
                      chat_id: Optional[str] = None,
                      channel_id: Optional[str] = None) -> ScenarioLog:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è."""
        
        scenario_log = ScenarioLog(
            execution_id=execution_id,
            scenario_id=scenario_id,
            user_id=user_id,
            chat_id=chat_id,
            channel_id=channel_id,
            initial_context=self._safe_copy_context(initial_context)
        )
        
        self.active_scenarios[execution_id] = scenario_log
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ
        self.logger.info(
            f"üé¨ –ù–ê–ß–ê–õ–û –°–¶–ï–ù–ê–†–ò–Ø {scenario_id}",
            execution_id=execution_id,
            scenario_id=scenario_id,
            user_id=user_id,
            chat_id=chat_id,
            channel_id=channel_id,
            log_level=self.log_level.value,
            initial_context_size=len(initial_context)
        )
        
        if self.log_level in [LogLevel.DETAILED, LogLevel.FULL]:
            self.logger.debug(
                f"üìã –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}",
                execution_id=execution_id,
                initial_context=initial_context
            )
        
        return scenario_log
    
    def start_step(self, 
                   execution_id: str,
                   step: Dict[str, Any],
                   context: Dict[str, Any]) -> Optional[StepLog]:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞."""
        
        if execution_id not in self.active_scenarios:
            self.logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —à–∞–≥ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è {execution_id}")
            return None
        
        scenario_log = self.active_scenarios[execution_id]
        step_id = step.get("id", "unknown")
        step_type = step.get("type", "unknown")
        
        step_log = StepLog(
            step_id=step_id,
            step_type=step_type,
            started_at=datetime.now(timezone.utc)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–≥–∞ (–¥–ª—è DETAILED –∏ FULL)
        if self.log_level in [LogLevel.DETAILED, LogLevel.FULL]:
            step_log.step_params = self._safe_copy_context(step.get("params", {}))
            step_log.context_before = self._safe_copy_context(context)
        
        scenario_log.steps.append(step_log)
        scenario_log.total_steps = len(scenario_log.steps)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —à–∞–≥–∞
        if self.log_level != LogLevel.MINIMAL:
            self.logger.info(
                f"‚ñ∂Ô∏è –®–ê–ì {step_id} ({step_type})",
                execution_id=execution_id,
                scenario_id=scenario_log.scenario_id,
                step_id=step_id,
                step_type=step_type,
                step_number=len(scenario_log.steps)
            )
            
            if self.log_level == LogLevel.FULL:
                self.logger.debug(
                    f"üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ —à–∞–≥–æ–º {step_id}",
                    execution_id=execution_id,
                    step_id=step_id,
                    context=context
                )
        
        return step_log
    
    def finish_step(self, 
                    execution_id: str,
                    step_id: str,
                    result_context: Dict[str, Any],
                    error: Optional[Exception] = None) -> bool:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞."""
        
        if execution_id not in self.active_scenarios:
            return False
        
        scenario_log = self.active_scenarios[execution_id]
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ —Å –¥–∞–Ω–Ω—ã–º ID
        step_log = None
        for s in reversed(scenario_log.steps):
            if s.step_id == step_id and s.finished_at is None:
                step_log = s
                break
        
        if not step_log:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥ {step_id} –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            return False
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —à–∞–≥
        step_log.finished_at = datetime.now(timezone.utc)
        step_log.duration_ms = (step_log.finished_at - step_log.started_at).total_seconds() * 1000
        
        if error:
            step_log.status = "error"
            step_log.error_message = str(error)
        else:
            step_log.status = "success"
            scenario_log.completed_steps += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if self.log_level in [LogLevel.DETAILED, LogLevel.FULL]:
            step_log.context_after = self._safe_copy_context(result_context)
            step_log.context_changes = self._calculate_context_changes(
                step_log.context_before or {},
                result_context
            )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —à–∞–≥–∞
        if self.log_level != LogLevel.MINIMAL:
            status_emoji = "‚úÖ" if step_log.status == "success" else "‚ùå"
            self.logger.info(
                f"{status_emoji} –®–ê–ì {step_id} –∑–∞–≤–µ—Ä—à–µ–Ω ({step_log.duration_ms:.1f}ms)",
                execution_id=execution_id,
                scenario_id=scenario_log.scenario_id,
                step_id=step_id,
                step_type=step_log.step_type,
                status=step_log.status,
                duration_ms=step_log.duration_ms,
                error=step_log.error_message
            )
            
            if self.log_level == LogLevel.FULL and step_log.context_changes:
                self.logger.debug(
                    f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —à–∞–≥–µ {step_id}",
                    execution_id=execution_id,
                    step_id=step_id,
                    context_changes=step_log.context_changes
                )
        
        return True
    
    def finish_scenario(self, 
                       execution_id: str,
                       final_context: Dict[str, Any],
                       final_status: str = "completed",
                       error: Optional[Exception] = None) -> Optional[ScenarioLog]:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è."""
        
        if execution_id not in self.active_scenarios:
            return None
        
        scenario_log = self.active_scenarios[execution_id]
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario_log.finished_at = datetime.now(timezone.utc)
        scenario_log.duration_ms = (scenario_log.finished_at - scenario_log.started_at).total_seconds() * 1000
        scenario_log.final_context = self._safe_copy_context(final_context)
        scenario_log.final_status = final_status
        
        if error:
            scenario_log.status = "error"
            scenario_log.error_message = str(error)
        else:
            scenario_log.status = final_status
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        scenario_log.performance_metrics = self._calculate_performance_metrics(scenario_log)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        status_emoji = "üéâ" if scenario_log.status == "completed" else "üí•" if scenario_log.status == "error" else "‚è∏Ô∏è"
        self.logger.info(
            f"{status_emoji} –°–¶–ï–ù–ê–†–ò–ô {scenario_log.scenario_id} –∑–∞–≤–µ—Ä—à–µ–Ω",
            execution_id=execution_id,
            scenario_id=scenario_log.scenario_id,
            status=scenario_log.status,
            duration_ms=scenario_log.duration_ms,
            total_steps=scenario_log.total_steps,
            completed_steps=scenario_log.completed_steps,
            success_rate=f"{(scenario_log.completed_steps / max(scenario_log.total_steps, 1) * 100):.1f}%",
            error=scenario_log.error_message
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.mongo_plugin:
            asyncio.create_task(self._save_to_mongo(scenario_log))
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        del self.active_scenarios[execution_id]
        
        return scenario_log
    
    def get_active_scenarios(self) -> List[ScenarioLog]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
        return list(self.active_scenarios.values())
    
    def get_scenario_status(self, execution_id: str) -> Optional[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è."""
        if execution_id not in self.active_scenarios:
            return None
        
        scenario_log = self.active_scenarios[execution_id]
        return {
            "execution_id": execution_id,
            "scenario_id": scenario_log.scenario_id,
            "status": scenario_log.status,
            "progress": f"{scenario_log.completed_steps}/{scenario_log.total_steps}",
            "duration_ms": (datetime.now(timezone.utc) - scenario_log.started_at).total_seconds() * 1000,
            "current_step": scenario_log.steps[-1].step_id if scenario_log.steps else None
        }
    
    def _safe_copy_context(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–ø–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏—Å–∫–ª—é—á–∞—è –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã."""
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ JSON –∏ –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            json_str = json.dumps(context, default=str, ensure_ascii=False)
            return json.loads(json_str)
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return {"_error": "Context serialization failed", "_original_keys": list(context.keys())}
    
    def _calculate_context_changes(self, before: Dict[str, Any], after: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ."""
        changes = {
            "added": {},
            "modified": {},
            "removed": []
        }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
        for key, value in after.items():
            if key not in before:
                changes["added"][key] = value
        
        # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
        for key, value in after.items():
            if key in before and before[key] != value:
                changes["modified"][key] = {
                    "before": before[key],
                    "after": value
                }
        
        # –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
        for key in before:
            if key not in after:
                changes["removed"].append(key)
        
        return changes
    
    def _calculate_performance_metrics(self, scenario_log: ScenarioLog) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
        if not scenario_log.steps:
            return {}
        
        step_durations = [s.duration_ms for s in scenario_log.steps if s.duration_ms is not None]
        
        metrics = {
            "total_duration_ms": scenario_log.duration_ms,
            "steps_count": len(scenario_log.steps),
            "success_rate": scenario_log.completed_steps / len(scenario_log.steps) * 100,
            "avg_step_duration_ms": sum(step_durations) / len(step_durations) if step_durations else 0,
            "max_step_duration_ms": max(step_durations) if step_durations else 0,
            "min_step_duration_ms": min(step_durations) if step_durations else 0,
            "slowest_step": None,
            "fastest_step": None
        }
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π —à–∞–≥–∏
        if step_durations:
            max_duration = max(step_durations)
            min_duration = min(step_durations)
            
            for step in scenario_log.steps:
                if step.duration_ms == max_duration:
                    metrics["slowest_step"] = {"id": step.step_id, "type": step.step_type, "duration_ms": max_duration}
                if step.duration_ms == min_duration:
                    metrics["fastest_step"] = {"id": step.step_id, "type": step.step_type, "duration_ms": min_duration}
        
        return metrics
    
    async def _save_to_mongo(self, scenario_log: ScenarioLog):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ MongoDB."""
        try:
            if not self.mongo_plugin:
                return
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            log_data = asdict(scenario_log)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ ISO —Å—Ç—Ä–æ–∫–∏
            log_data["started_at"] = scenario_log.started_at.isoformat()
            if scenario_log.finished_at:
                log_data["finished_at"] = scenario_log.finished_at.isoformat()
            
            for step in log_data["steps"]:
                step["started_at"] = datetime.fromisoformat(step["started_at"].replace("Z", "+00:00")).isoformat()
                if step["finished_at"]:
                    step["finished_at"] = datetime.fromisoformat(step["finished_at"].replace("Z", "+00:00")).isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é scenario_execution_logs
            context = {
                "collection": "scenario_execution_logs",
                "document": log_data
            }
            
            await self.mongo_plugin.insert_document(context)
            
            self.logger.debug(
                f"üíæ –õ–æ–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_log.scenario_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ MongoDB",
                execution_id=scenario_log.execution_id
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ –≤ MongoDB: {e}")

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† ===
_global_scenario_logger: Optional[ScenarioLogger] = None

def get_scenario_logger() -> ScenarioLogger:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
    global _global_scenario_logger
    if _global_scenario_logger is None:
        _global_scenario_logger = ScenarioLogger()
    return _global_scenario_logger

def initialize_scenario_logger(log_level: LogLevel = LogLevel.BASIC, mongo_plugin=None):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
    global _global_scenario_logger
    _global_scenario_logger = ScenarioLogger(log_level=log_level, mongo_plugin=mongo_plugin)
    return _global_scenario_logger 