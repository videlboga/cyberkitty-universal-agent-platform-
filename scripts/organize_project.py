#!/usr/bin/env python3
"""
–£–º–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ KittyCore 3.0
"""
import os
import shutil
from pathlib import Path
from datetime import datetime

class KittyCoreOrganizer:
    def __init__(self):
        self.project_root = Path(".")
        self.moved_files = []
        self.archived_files = []
        
    def organize_project(self):
        """–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç"""
        print("üßπ –ù–∞—á–∏–Ω–∞—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é KittyCore 3.0...")
        
        # 1. –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤ –¥–ª—è –º—É—Å–æ—Ä–∞
        self._archive_garbage()
        
        # 2. –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        self._create_folder_structure()
        
        # 3. –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º
        self._organize_files()
        
        # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._fix_duplicates()
        
        # 5. –û—Ç—á—ë—Ç
        self._generate_report()
        
    def _archive_garbage(self):
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –º—É—Å–æ—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        print("\nüì¶ –ê—Ä—Ö–∏–≤–∏—Ä—É—é –º—É—Å–æ—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã...")
        
        # –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤–Ω—É—é –ø–∞–ø–∫—É
        timestamp = datetime.now().strftime("%Y_%m_%d_%H%M%S")
        archive_dir = Path(f"archive_garbage_{timestamp}")
        archive_dir.mkdir(exist_ok=True)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –º—É—Å–æ—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        garbage_patterns = [
            "generated_script_*.py",
            "cleanup_temp_files.py",
            "analyze_architecture.py", 
            "analyze_kittycore_only.py",
            "archive_temp_files.py"
        ]
        
        garbage_files = []
        for pattern in garbage_patterns:
            garbage_files.extend(self.project_root.glob(pattern))
            
        for file_path in garbage_files:
            if file_path.exists():
                target = archive_dir / file_path.name
                shutil.move(str(file_path), str(target))
                self.archived_files.append(file_path.name)
                print(f"  üì¶ {file_path.name} -> –∞—Ä—Ö–∏–≤")
                
        print(f"‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {len(self.archived_files)} –º—É—Å–æ—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
    def _create_folder_structure(self):
        """–°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫"""
        print("\nüìÅ –°–æ–∑–¥–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫...")
        
        folders_to_create = [
            "utils",           # –£—Ç–∏–ª–∏—Ç—ã –∏ —Å–∫—Ä–∏–ø—Ç—ã
            "cli",            # CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã  
            "demos",          # –î–µ–º–æ –∏ –ø—Ä–∏–º–µ—Ä—ã
            "scripts",        # –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
            "data",           # –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
            "outputs/temp",   # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            "workspace/temp", # –†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            "docs",           # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        ]
        
        for folder in folders_to_create:
            folder_path = Path(folder)
            folder_path.mkdir(parents=True, exist_ok=True)
            print(f"  üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder}")
            
    def _organize_files(self):
        """–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º"""
        print("\nüöö –ü–µ—Ä–µ–º–µ—â–∞—é —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º...")
        
        # –ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        move_rules = {
            # –£—Ç–∏–ª–∏—Ç—ã –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            "utils": [
                "*calculation*.py", "*calculator*.py", "*area*.py", 
                "*factorial*.py", "*sort*.py", "*volume*.py",
                "radius*.py", "*–∞–ª–≥–æ—Ä–∏—Ç–º*.py", "—Ñ–∞–∫—Ç–æ—Ä–∏—è.py",
                "sphere_volume.py", "quick_sort*.py", "fast_sort*.py"
            ],
            
            # CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
            "cli": [
                "*_cli*.py", "kittycore_cli*.py", "*server*.py",
                "app.py", "start_web.py", "simple_web_server.py"
            ],
            
            # –î–µ–º–æ –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            "demos": [
                "check_*.py", "hello_world*.py", "intro_to_python.py",
                "real_hello.py", "biblioteka.py", "qr_*.py"
            ],
            
            # –°–∫—Ä–∏–ø—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏  
            "scripts": [
                "*script*.py", "*skrip*.py", "converter.py",
                "structure.py", "organize_project.py"
            ],
            
            # –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–∞–ª–∏–∑–∞
            "data": [
                "*data*.py", "*–∞–Ω–∞–ª–∏–∑*.py", "analyst.py", 
                "*analyze*.py", "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏*.py", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç.py",
                "api_data.py", "crm_data.py"
            ],
        }
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã
        for target_folder, patterns in move_rules.items():
            for pattern in patterns:
                for file_path in self.project_root.glob(pattern):
                    if file_path.is_file() and file_path.parent == self.project_root:
                        target_path = Path(target_folder) / file_path.name
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —Ñ–∞–π–ª–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
                        if target_path.exists():
                            counter = 1
                            while target_path.exists():
                                name_parts = file_path.stem, counter, file_path.suffix
                                target_path = Path(target_folder) / f"{name_parts[0]}_{name_parts[1]}{name_parts[2]}"
                                counter += 1
                                
                        shutil.move(str(file_path), str(target_path))
                        self.moved_files.append((file_path.name, target_folder))
                        print(f"  üöö {file_path.name} -> {target_folder}/")
                        
    def _fix_duplicates(self):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
        print("\nüîÑ –ò—Å–ø—Ä–∞–≤–ª—è—é –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        
        # –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∞–≥–µ–Ω—Ç—ã
        duplicate_agents = [
            ("agents/base_agent.py", "kittycore/agents/base_agent.py"),
            ("agents/intellectual_agent.py", "kittycore/agents/intellectual_agent.py")
        ]
        
        for old_path, main_path in duplicate_agents:
            old_file = Path(old_path)
            main_file = Path(main_path)
            
            if old_file.exists() and main_file.exists():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ª–∏ —Ñ–∞–π–ª—ã
                if old_file.stat().st_size != main_file.stat().st_size:
                    print(f"  ‚ö†Ô∏è  {old_path} –∏ {main_path} –æ—Ç–ª–∏—á–∞—é—Ç—Å—è!")
                    backup_name = f"backup_{old_file.name}"
                    shutil.move(str(old_file), str(Path("utils") / backup_name))
                    print(f"  üîÑ {old_path} -> utils/{backup_name}")
                else:
                    old_file.unlink()
                    print(f"  üóëÔ∏è  –£–¥–∞–ª—ë–Ω –¥—É–±–ª—å: {old_path}")
                    
        # –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è tools
        duplicate_tools = [
            ("tools/system_tools.py", "kittycore/tools/system_tools.py")
        ]
        
        for old_path, main_path in duplicate_tools:
            old_file = Path(old_path)
            if old_file.exists():
                shutil.move(str(old_file), str(Path("utils") / old_file.name))
                print(f"  üîÑ {old_path} -> utils/")
                
    def _generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
        print("\n" + "="*50)
        print("üìä –û–¢–ß–Å–¢ –û–ë –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò KITTYCORE 3.0")
        print("="*50)
        
        print(f"\nüì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {len(self.archived_files)} —Ñ–∞–π–ª–æ–≤")
        for file_name in self.archived_files:
            print(f"  ‚Ä¢ {file_name}")
            
        print(f"\nüöö –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: {len(self.moved_files)} —Ñ–∞–π–ª–æ–≤")
        by_folder = {}
        for file_name, folder in self.moved_files:
            if folder not in by_folder:
                by_folder[folder] = []
            by_folder[folder].append(file_name)
            
        for folder, files in by_folder.items():
            print(f"\n  üìÅ {folder}/ ({len(files)} —Ñ–∞–π–ª–æ–≤):")
            for file_name in files[:3]:
                print(f"    ‚Ä¢ {file_name}")
            if len(files) > 3:
                print(f"    ... –∏ –µ—â—ë {len(files) - 3} —Ñ–∞–π–ª–æ–≤")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –∫–æ—Ä–Ω–µ
        remaining_files = []
        for file_path in self.project_root.glob("*.py"):
            if file_path.is_file():
                remaining_files.append(file_path.name)
                
        print(f"\nüìÅ –û—Å—Ç–∞–ª–æ—Å—å –≤ –∫–æ—Ä–Ω–µ: {len(remaining_files)} —Ñ–∞–π–ª–æ–≤")
        for file_name in remaining_files[:5]:
            print(f"  ‚Ä¢ {file_name}")
        if len(remaining_files) > 5:
            print(f"  ... –∏ –µ—â—ë {len(remaining_files) - 5} —Ñ–∞–π–ª–æ–≤")
            
        print(f"\n‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"  1. üìù –°–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω—ã–π main.py")
        print(f"  2. üìö –û–±–Ω–æ–≤–∏—Ç—å README.md")
        print(f"  3. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    organizer = KittyCoreOrganizer()
    
    print("ü§î –ù–∞—á–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞ KittyCore 3.0?")
    response = input("–≠—Ç–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
    
    if response.lower() in ['y', 'yes', '–¥–∞']:
        organizer.organize_project()
    else:
        print("‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

if __name__ == "__main__":
    main() 