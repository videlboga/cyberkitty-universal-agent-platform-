#!/usr/bin/env python3
"""
üåç –†–ï–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ KITTYCORE 3.0
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö
"""

import sys
import asyncio
from pathlib import Path
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ kittycore
sys.path.insert(0, str(Path(__file__).parent))

from kittycore.core.obsidian_orchestrator import solve_with_obsidian_orchestrator


class RealWorldTester:
    """–¢–µ—Å—Ç–µ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    def __init__(self):
        self.results = []
        self.total_tests = 0
        self.passed_tests = 0
    
    async def run_test(self, name: str, task: str, expected_files: list, expected_content: list):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç"""
        print(f"\nüß™ –¢–ï–°–¢: {name}")
        print("=" * 60)
        print(f"üìã –ó–∞–¥–∞—á–∞: {task}")
        print()
        
        start_time = time.time()
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            result = await solve_with_obsidian_orchestrator(task)
            
            duration = time.time() - start_time
            
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result['status']}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è: {duration:.2f}—Å")
            print(f"ü§ñ –ê–≥–µ–Ω—Ç–æ–≤: {result['agents_created']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            score = self._evaluate_results(expected_files, expected_content)
            
            test_result = {
                "name": name,
                "task": task,
                "status": result['status'],
                "duration": duration,
                "agents": result['agents_created'],
                "score": score,
                "passed": score >= 0.7  # 70% –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            }
            
            self.results.append(test_result)
            self.total_tests += 1
            if test_result["passed"]:
                self.passed_tests += 1
            
            print(f"üèÜ –û–¶–ï–ù–ö–ê: {score*100:.0f}% ({'‚úÖ –ü–†–û–®–Å–õ' if test_result['passed'] else '‚ùå –ü–†–û–í–ê–õ'})")
            
            return test_result
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
            
            test_result = {
                "name": name,
                "task": task,
                "status": "error",
                "duration": time.time() - start_time,
                "agents": 0,
                "score": 0.0,
                "passed": False,
                "error": str(e)
            }
            
            self.results.append(test_result)
            self.total_tests += 1
            
            return test_result
    
    def _evaluate_results(self, expected_files: list, expected_content: list) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"""
        print("üìä –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        
        outputs_dir = Path("outputs")
        score = 0.0
        max_score = len(expected_files) + len(expected_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        for expected_file in expected_files:
            file_path = outputs_dir / expected_file
            if file_path.exists():
                size = file_path.stat().st_size
                print(f"   ‚úÖ {expected_file} ({size} –±–∞–π—Ç)")
                score += 1
            else:
                print(f"   ‚ùå {expected_file} - –ù–ï –ù–ê–ô–î–ï–ù")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        for content_check in expected_content:
            found = False
            for file_path in outputs_dir.glob("*"):
                if file_path.is_file():
                    try:
                        content = file_path.read_text(encoding='utf-8')
                        if content_check.lower() in content.lower():
                            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: '{content_check}' –≤ {file_path.name}")
                            found = True
                            break
                    except:
                        continue
            
            if found:
                score += 1
            else:
                print(f"   ‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: '{content_check}'")
        
        return score / max_score if max_score > 0 else 0.0
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        print("\n" + "="*80)
        print("üéØ –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –†–ï–ê–õ–¨–ù–´–• –¢–ï–°–¢–û–í")
        print("="*80)
        
        print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_tests}")
        print(f"‚úÖ –ü—Ä–æ—à–ª–æ: {self.passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.total_tests - self.passed_tests}")
        print(f"üèÜ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {self.passed_tests/self.total_tests*100:.1f}%")
        print()
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É
        for i, result in enumerate(self.results, 1):
            status_icon = "‚úÖ" if result["passed"] else "‚ùå"
            print(f"{i}. {status_icon} {result['name']}")
            print(f"   üìä –û—Ü–µ–Ω–∫–∞: {result['score']*100:.0f}%")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {result['duration']:.1f}—Å")
            print(f"   ü§ñ –ê–≥–µ–Ω—Ç–æ–≤: {result['agents']}")
            if "error" in result:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            print()
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        avg_score = sum(r["score"] for r in self.results) / len(self.results) if self.results else 0
        avg_time = sum(r["duration"] for r in self.results) / len(self.results) if self.results else 0
        
        print("üéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´:")
        print(f"   üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_score*100:.1f}%")
        print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f}—Å")
        print(f"   üöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É: {'‚úÖ –î–ê' if avg_score >= 0.8 else '‚ùå –ù–ï–¢'}")


async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    tester = RealWorldTester()
    
    print("üåç –†–ï–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ KITTYCORE 3.0")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö")
    print("="*80)
    
    # –¢–ï–°–¢ 1: –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞
    await tester.run_test(
        name="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞",
        task="–°–æ–∑–¥–∞–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–≤–æ–¥–∞",
        expected_files=["factorial.py"],
        expected_content=["factorial", "def", "import", "int(input"]
    )
    
    # –¢–ï–°–¢ 2: –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
    await tester.run_test(
        name="–§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        task="–°–æ–∑–¥–∞–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∏–º—è, email, –ø–∞—Ä–æ–ª—å) –∏ CSS —Å—Ç–∏–ª—è–º–∏",
        expected_files=["registration.html"],
        expected_content=["<form", "input", "email", "password", "css", "style"]
    )
    
    # –¢–ï–°–¢ 3: –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    await tester.run_test(
        name="JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
        task="–°–æ–∑–¥–∞–π JSON —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–æ—Ä—Ç–æ–º, —Ö–æ—Å—Ç–æ–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
        expected_files=["config.json"],
        expected_content=["port", "host", "logging", "{", "}"]
    )
    
    # –¢–ï–°–¢ 4: –ê–ª–≥–æ—Ä–∏—Ç–º—ã
    await tester.run_test(
        name="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞",
        task="–°–æ–∑–¥–∞–π Python —Å–∫—Ä–∏–ø—Ç —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø—Ä–∏–º–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        expected_files=["quicksort.py"],
        expected_content=["quicksort", "def", "pivot", "sort", "example"]
    )
    
    # –¢–ï–°–¢ 5: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    await tester.run_test(
        name="README —Ñ–∞–π–ª",
        task="–°–æ–∑–¥–∞–π README.md —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏",
        expected_files=["README.md"],
        expected_content=["# ", "## ", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞", "–ø—Ä–∏–º–µ—Ä", "–æ–ø–∏—Å–∞–Ω–∏–µ"]
    )
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    tester.print_summary()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è CI/CD
    return tester.passed_tests == tester.total_tests


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1) 