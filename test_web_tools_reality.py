#!/usr/bin/env python3
"""
üåê –†–ï–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ï–ë-–ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í - –ß–ê–°–¢–¨ 1

–†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
‚ùå –ù–ï–¢ –ú–û–ö–û–í - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚ùå –ù–ï–¢ f"{tool}: —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω"
‚ùå –ù–ï–¢ len(text) > 20 –≤–∞–ª–∏–¥–∞—Ü–∏–∏
‚úÖ –†–ï–ê–õ–¨–ù–´–ï API –≤—ã–∑–æ–≤—ã
‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import time
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass

@dataclass
class RealTestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    tool_name: str
    success: bool
    execution_time: float
    real_output: Optional[str] = None
    error_message: Optional[str] = None
    data_size: int = 0
    api_calls_made: int = 0

class WebToolsRealityTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.results: List[RealTestResult] = []
        
    async def test_enhanced_web_search(self) -> RealTestResult:
        """–†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É—é enhanced_web_search...")
        start_time = time.time()
        
        try:
            from kittycore.tools import DEFAULT_TOOLS
            tool = DEFAULT_TOOLS.get_tool("enhanced_web_search")
            
            if not tool:
                return RealTestResult("enhanced_web_search", False, 0, error_message="Tool not found")
            
            # –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫
            result = await tool.execute(query="Python programming language", limit=3)
            execution_time = time.time() - start_time
            
            # –°–¢–†–û–ì–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è
            success = False
            data_size = 0
            real_output = "No data"
            
            if result and hasattr(result, 'success') and result.success:
                if hasattr(result, 'data') and result.data:
                    data_str = str(result.data)
                    data_size = len(data_str)
                    real_output = data_str[:100]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –†–ï–ê–õ–¨–ù–û–°–¢–¨
                    success = (
                        data_size > 100 and
                        ("python" in data_str.lower() or 
                         "programming" in data_str.lower()) and
                        not ("—É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω" in data_str.lower())
                    )
            
            return RealTestResult(
                "enhanced_web_search", 
                success, 
                execution_time,
                real_output=real_output,
                data_size=data_size,
                api_calls_made=1 if success else 0
            )
            
        except Exception as e:
            return RealTestResult("enhanced_web_search", False, time.time() - start_time, error_message=str(e)[:100])

    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
        print("üåê" + "="*60)
        print("üåê KITTYCORE 3.0 - –†–ï–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")  
        print("üåê" + "="*60)
        print("‚ùå –ù–ï–¢ –ú–û–ö–û–í | ‚úÖ –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï API")
        print()
        
        result = await self.test_enhanced_web_search()
        self.results.append(result)
        
        status = "‚úÖ" if result.success else "‚ùå"
        print(f"    {status} {result.execution_time:.1f}—Å")
        
        if result.error_message:
            print(f"    ‚ö†Ô∏è {result.error_message}")
        elif result.success:
            print(f"    üìä {result.data_size} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö")
        else:
            print(f"    ‚ùå –ù–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        print(f"\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢: {status}")

async def main():
    tester = WebToolsRealityTester()
    await tester.run_tests()

if __name__ == "__main__":
    asyncio.run(main())