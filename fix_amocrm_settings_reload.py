#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–æ –≤—Å–µ—Ö AmoCRM –º–æ–¥—É–ª—è—Ö
1. –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ _ensure_fresh_settings() –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
2. –î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–∑–æ–≤ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤ –Ω–∞—á–∞–ª–æ –∫–∞–∂–¥–æ–≥–æ handler
"""

import os
import re
from pathlib import Path

# –ö–æ–¥ –º–µ—Ç–æ–¥–∞ _ensure_fresh_settings –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
ENSURE_FRESH_SETTINGS_METHOD = '''
    async def _ensure_fresh_settings(self):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î"""
        try:
            if not self.engine or not hasattr(self.engine, 'plugins') or 'mongo' not in self.engine.plugins:
                return
                
            mongo_plugin = self.engine.plugins['mongo']
            settings_result = await mongo_plugin._find_one("plugin_settings", {"plugin_name": "simple_amocrm"})
            
            if settings_result and settings_result.get("success") and settings_result.get("document"):
                settings = settings_result["document"]
                new_base_url = settings.get("base_url")
                new_access_token = settings.get("access_token")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                if new_base_url != self.base_url or new_access_token != self.access_token:
                    self.base_url = new_base_url
                    self.access_token = new_access_token
                    self.headers = {
                        'Authorization': f'Bearer {self.access_token}',
                        'Content-Type': 'application/json'
                    } if self.access_token else {}
                    logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {self.base_url}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AmoCRM: {e}")
'''

def add_ensure_fresh_settings_method(content: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ _ensure_fresh_settings –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    if '_ensure_fresh_settings' in content:
        return content
    
    # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ register_handlers)
    pattern = r'(    def register_handlers\(self\) -> Dict\[str, Any\]:\s*.*?return \{[^}]*\}\s*\n)'
    
    def add_method(match):
        return match.group(1) + ENSURE_FRESH_SETTINGS_METHOD + '\n'
    
    return re.sub(pattern, add_method, content, flags=re.DOTALL)

def add_settings_reload_to_handlers(content: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–∑–æ–≤ _ensure_fresh_settings() –≤ handlers"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ handlers (–º–µ—Ç–æ–¥—ã –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å async def _handle_)
    handler_pattern = r'(    async def _handle_[^(]+\([^)]+\) -> None:\s*\n        """[^"]*"""\s*\n)'
    
    # –§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã - –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–∑–æ–≤ _ensure_fresh_settings()
    def add_settings_reload(match):
        original = match.group(1)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –≤—ã–∑–æ–≤–∞ _ensure_fresh_settings
        if '_ensure_fresh_settings()' in original:
            return original
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –ø–æ—Å–ª–µ docstring
        return original + '        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n        await self._ensure_fresh_settings()\n        \n'
    
    return re.sub(handler_pattern, add_settings_reload, content)

def fix_amocrm_module(file_path: str):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω AmoCRM –º–æ–¥—É–ª—å"""
    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º {file_path}...")
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    original_content = content
    
    # 1. –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ _ensure_fresh_settings –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    content = add_ensure_fresh_settings_method(content)
    
    # 2. –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤—ã –≤ handlers
    content = add_settings_reload_to_handlers(content)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if content != original_content:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ {file_path} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        return True
    else:
        print(f"‚ÑπÔ∏è {file_path} —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ù–ê–°–¢–†–û–ï–ö AMOCRM")
    print("="*60)
    
    # –°–ø–∏—Å–æ–∫ AmoCRM –º–æ–¥—É–ª–µ–π –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    amocrm_modules = [
        "app/plugins/simple_amocrm_companies.py",
        "app/plugins/simple_amocrm_tasks.py", 
        "app/plugins/simple_amocrm_advanced.py",
        "app/plugins/simple_amocrm_admin.py"
    ]
    
    fixed_count = 0
    
    for module_path in amocrm_modules:
        if os.path.exists(module_path):
            if fix_amocrm_module(module_path):
                fixed_count += 1
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {module_path}")
    
    print("\n" + "="*60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –º–æ–¥—É–ª–µ–π")
    print("‚úÖ –¢–µ–ø–µ—Ä—å –≤—Å–µ AmoCRM handlers –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
    print("üí° –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –∫—Ä–µ–¥–∞–º–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    create_test_script()

def create_test_script():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    test_script = '''#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ AmoCRM
"""

import asyncio
from app.core.simple_engine import create_engine

async def test_settings_reload():
    print("üß™ –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ù–ê–°–¢–†–û–ï–ö AMOCRM")
    print("="*50)
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    engine = await create_engine()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–≥–∏–Ω
    amocrm = engine.plugins.get('simple_amocrm')
    if amocrm:
        print(f"üìã –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–≥–∏–Ω: {amocrm.base_url or '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ handler
        context = {"test": True}
        result = await engine.execute_step({
            "type": "action",
            "params": {"action": "amocrm_find_contact", "query": "test"}
        }, context)
        
        print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {result.get('contact', {}).get('success', '–ù–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–ê')}")
    
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    asyncio.run(test_settings_reload())
'''
    
    with open('test_amocrm_settings_fix.py', 'w', encoding='utf-8') as f:
        f.write(test_script)
    
    print("üìù –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç: test_amocrm_settings_fix.py")

if __name__ == "__main__":
    main() 