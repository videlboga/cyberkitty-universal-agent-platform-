"""
ContentFixer - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–æ—Ö–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
–†–∞–±–æ—Ç–∞–µ—Ç —Å SmartValidator –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–º–µ—Å—Ç–æ –æ—Ç—á—ë—Ç–æ–≤
"""

import asyncio
from typing import Dict, List, Any, Optional
from pathlib import Path
import json
from loguru import logger

from ..llm import get_llm_provider

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ValidationResult –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞
import sys
sys.path.append('.')
from agents.smart_validator import ValidationResult


class ContentFixer:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–æ—Ö–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤, —Å–æ–∑–¥–∞–≤–∞—è —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –¥–µ—à—ë–≤—É—é –º–æ–¥–µ–ª—å —á—Ç–æ –∏ SmartValidator
        self.llm_provider = get_llm_provider("mistralai/ministral-8b")
        logger.info("üîß ContentFixer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Ministral 8B")
    
    async def fix_result(self, 
                        original_task: str,
                        bad_result: Dict[str, Any],
                        validation: ValidationResult,
                        created_files: List[str] = None) -> Dict[str, Any]:
        """
        –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≥–µ–Ω—Ç–∞
        
        Args:
            original_task: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞
            bad_result: –ü–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≥–µ–Ω—Ç–∞
            validation: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç SmartValidator
            created_files: –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            
        Returns:
            –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        
        logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ—Ü–µ–Ω–∫–∞: {validation.score:.1f}/1.0)")
        
        try:
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            fix_prompt = self._create_fix_prompt(
                original_task, bad_result, validation, created_files
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç LLM
            response = self.llm_provider.complete(fix_prompt)
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç LLM
            fixed_result = self._parse_fix_response(response, original_task)
            
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: {fixed_result.get('summary', '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')}")
            
            return fixed_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            return self._create_basic_fix(original_task, validation)
    
    def _create_fix_prompt(self, 
                          task: str, 
                          bad_result: Dict[str, Any], 
                          validation: ValidationResult,
                          created_files: List[str]) -> str:
        """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        
        return f"""
–ó–ê–î–ê–ß–ê: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≥–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞—Ç—å –†–ï–ê–õ–¨–ù–´–ô –ü–û–õ–ï–ó–ù–´–ô –ö–û–ù–¢–ï–ù–¢

–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –ó–ê–î–ê–ß–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{task}

–ü–õ–û–•–û–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ì–ï–ù–¢–ê:
{json.dumps(bad_result, ensure_ascii=False, indent=2)}

–ü–†–û–ë–õ–ï–ú–´ (–æ—Ç SmartValidator):
- –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {validation.score:.1f}/1.0
- –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(validation.issues)}
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {', '.join(validation.recommendations)}

–°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´: {created_files or '–ù–µ—Ç'}

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —á—Ç–æ –†–ï–ê–õ–¨–ù–û –Ω—É–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
2. –°–æ–∑–¥–∞–π –ö–û–ù–ö–†–ï–¢–ù–´–ô –ü–û–õ–ï–ó–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ (–∫–æ–¥, —Ñ–∞–π–ª—ã, –¥–∞–Ω–Ω—ã–µ)
3. –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –æ—Ç—á—ë—Ç—ã, –ø–ª–∞–Ω—ã –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è - —Å–æ–∑–¥–∞–≤–∞–π –ì–û–¢–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢

–û–¢–í–ï–¢–¨ –í –§–û–†–ú–ê–¢–ï JSON:
{{
    "action_type": "create_file|generate_code|process_data|create_content",
    "filename": "–∏–º—è_—Ñ–∞–π–ª–∞_–¥–ª—è_—Å–æ–∑–¥–∞–Ω–∏—è",
    "content": "–†–ï–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ù–¢ (–∫–æ–¥, –¥–∞–Ω–Ω—ã–µ, HTML, etc)",
    "summary": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–æ",
    "user_benefit": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–ª—å–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
}}

–í–ê–ñ–ù–û: –°–æ–∑–¥–∞–≤–∞–π –†–ï–ê–õ–¨–ù–´–ô —Ä–∞–±–æ—á–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∞ –Ω–µ –æ–ø–∏—Å–∞–Ω–∏—è!
"""
    
    def _parse_fix_response(self, response: str, task: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç LLM –∏ —Å–æ–∑–¥–∞—ë—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            if "```json" in response:
                json_part = response.split("```json")[1].split("```")[0].strip()
            else:
                json_part = response.strip()
            
            fix_data = json.loads(json_part)
            
            # –°–æ–∑–¥–∞—ë–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            fixed_result = {
                "success": True,
                "output": f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fix_data.get('summary', '–†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω')}",
                "action_type": fix_data.get("action_type", "create_content"),
                "filename": fix_data.get("filename", "fixed_result.txt"),
                "content": fix_data.get("content", "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"),
                "user_benefit": fix_data.get("user_benefit", "–ü–æ–ª–µ–∑–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                "fixed": True,
                "original_issues": "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
            }
            
            # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if fix_data.get("filename") and fix_data.get("content"):
                self._create_fixed_file(fix_data["filename"], fix_data["content"])
                fixed_result["files_created"] = [fix_data["filename"]]
            
            return fixed_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            return self._create_basic_fix(task, None)
    
    def _create_fixed_file(self, filename: str, content: str):
        """–°–æ–∑–¥–∞—ë—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        
        try:
            outputs_dir = Path("outputs")
            outputs_dir.mkdir(exist_ok=True)
            
            file_path = outputs_dir / filename
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
    
    def _create_basic_fix(self, task: str, validation: Optional[ValidationResult]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—ë—Ç –±–∞–∑–æ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ LLM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ —Å–æ–∑–¥–∞—ë–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        task_lower = task.lower()
        
        if "python" in task_lower or "—Å–∫—Ä–∏–ø—Ç" in task_lower:
            return self._create_python_fix(task)
        elif "html" in task_lower or "—Å–∞–π—Ç" in task_lower:
            return self._create_html_fix(task)
        elif "json" in task_lower or "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è" in task_lower:
            return self._create_json_fix(task)
        else:
            return self._create_text_fix(task)
    
    def _create_python_fix(self, task: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—ë—Ç Python –∫–æ–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        
        if "—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª" in task.lower():
            content = '''def factorial(n):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ n"""
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    for i in range(1, 11):
        print(f"{i}! = {factorial(i)}")
'''
            filename = "factorial.py"
        else:
            content = '''# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Python —Å–∫—Ä–∏–ø—Ç
print("Hello, World!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–°–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

if __name__ == "__main__":
    main()
'''
            filename = "fixed_script.py"
        
        self._create_fixed_file(filename, content)
        
        return {
            "success": True,
            "output": f"‚úÖ –°–æ–∑–¥–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Python —Å–∫—Ä–∏–ø—Ç: {filename}",
            "filename": filename,
            "content": content,
            "files_created": [filename],
            "fixed": True,
            "user_benefit": "–ì–æ—Ç–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π Python –∫–æ–¥"
        }
    
    def _create_html_fix(self, task: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—ë—Ç HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        
        content = '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .container { max-width: 800px; margin: 0 auto; }
        .header { color: #333; border-bottom: 2px solid #eee; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h1>
        </div>
        <div class="content">
            <p>–≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π HTML –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π ContentFixer.</p>
            <p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!</p>
        </div>
    </div>
</body>
</html>'''
        
        filename = "fixed_page.html"
        self._create_fixed_file(filename, content)
        
        return {
            "success": True,
            "output": f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {filename}",
            "filename": filename,
            "content": content,
            "files_created": [filename],
            "fixed": True,
            "user_benefit": "–ì–æ—Ç–æ–≤–∞—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        }
    
    def _create_json_fix(self, task: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—ë—Ç JSON –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        
        content = '''{
    "name": "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
    "version": "1.0.0",
    "description": "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JSON —Ñ–∞–π–ª",
    "settings": {
        "enabled": true,
        "debug": false,
        "timeout": 30
    },
    "created_by": "ContentFixer",
    "status": "ready"
}'''
        
        filename = "fixed_config.json"
        self._create_fixed_file(filename, content)
        
        return {
            "success": True,
            "output": f"‚úÖ –°–æ–∑–¥–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JSON —Ñ–∞–π–ª: {filename}",
            "filename": filename,
            "content": content,
            "files_created": [filename],
            "fixed": True,
            "user_benefit": "–ì–æ—Ç–æ–≤—ã–π JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"
        }
    
    def _create_text_fix(self, task: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        
        content = f"""–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–¥–∞—á–∏: {task}

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π ContentFixer –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è 
–ø–ª–æ—Ö–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≥–µ–Ω—Ç–∞.

–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.

–°–æ–∑–¥–∞–Ω–æ: ContentFixer KittyCore 3.0
–°—Ç–∞—Ç—É—Å: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ
"""
        
        filename = "fixed_result.txt"
        self._create_fixed_file(filename, content)
        
        return {
            "success": True,
            "output": f"‚úÖ –°–æ–∑–¥–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {filename}",
            "filename": filename,
            "content": content,
            "files_created": [filename],
            "fixed": True,
            "user_benefit": "–ì–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        }


# –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def fix_bad_result(task: str, 
                        bad_result: Dict[str, Any], 
                        validation: ValidationResult,
                        files: List[str] = None) -> Dict[str, Any]:
    """
    –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–æ—Ö–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    """
    fixer = ContentFixer()
    return await fixer.fix_result(task, bad_result, validation, files) 