#!/usr/bin/env python3
"""
üî• –¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è Enhanced OrchestratorAgent

–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –ë–ï–ó –ø–æ–¥—Å–∫–∞–∑–æ–∫
"""

import asyncio
import time
from pathlib import Path
from integrate_to_orchestrator import EnhancedOrchestratorAgent
from kittycore.core.orchestrator import OrchestratorConfig

async def test_complex_tasks():
    """–¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
    print("üî• === –¢–ï–°–¢ –°–õ–û–ñ–ù–´–• –ó–ê–î–ê–ß –ë–ï–ó –ü–û–î–°–ö–ê–ó–û–ö ===")
    print("–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–∞–º–∞ –ø–æ–Ω—è—Ç—å —á—Ç–æ –¥–µ–ª–∞—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞—ë–º Enhanced Orchestrator
    config = OrchestratorConfig(orchestrator_id="complex_test_orchestrator")
    orchestrator = EnhancedOrchestratorAgent(config)
    
    # –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ë–ï–ó –ø–æ–¥—Å–∫–∞–∑–æ–∫
    complex_tasks = [
        "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏–ø–æ—Ç–µ–∫–∏ —Å –¥–æ—Å—Ä–æ—á–Ω—ã–º –ø–æ–≥–∞—à–µ–Ω–∏–µ–º",
        "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –∫–Ω–∏–≥",
        "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏",
        "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏",
        "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"
    ]
    
    results = []
    start_time = time.time()
    
    for i, task in enumerate(complex_tasks, 1):
        print(f"\nüéØ –°–õ–û–ñ–ù–ê–Ø –ó–ê–î–ê–ß–ê {i}/5:")
        print(f"üìã {task}")
        print("-" * 60)
        
        task_start = time.time()
        
        try:
            result = await orchestrator.execute_task_with_content_validation(task)
            task_time = time.time() - task_start
            
            if result["status"] == "completed" and "enhanced_result" in result:
                print(f"‚úÖ –£–°–ü–ï–• –∑–∞ {task_time:.1f}—Å")
                print(f"üìÅ –§–∞–π–ª: {result['content_file']}")
                print(f"üéØ –í–∞–ª–∏–¥–∞—Ü–∏—è: {result['validation']['score']:.2f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                try:
                    with open(result['content_file'], 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    print(f"üìè –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"üíé –ü—Ä–µ–≤—å—é: {content[:100]}...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ï –æ—Ç—á—ë—Ç
                    is_report = any(pattern in content for pattern in ["–ó–∞–¥–∞—á–∞:", "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã", "–∞–≥–µ–Ω—Ç–æ–º"])
                    print(f"‚úÖ –†–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {'–ù–µ—Ç' if is_report else '–î–∞'}")
                    
                    results.append({
                        "task": task,
                        "success": True,
                        "time": task_time,
                        "file": result['content_file'],
                        "size": len(content),
                        "is_real_content": not is_report,
                        "validation_score": result['validation']['score']
                    })
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                    results.append({
                        "task": task,
                        "success": False,
                        "error": f"–§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è: {e}",
                        "time": task_time
                    })
            else:
                print(f"‚ùå –ù–ï–£–î–ê–ß–ê –∑–∞ {task_time:.1f}—Å")
                if "error" in result:
                    print(f"üö´ –û—à–∏–±–∫–∞: {result['error']}")
                
                results.append({
                    "task": task,
                    "success": False,
                    "error": result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'),
                    "time": task_time
                })
                
        except Exception as e:
            task_time = time.time() - task_start
            print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∑–∞ {task_time:.1f}—Å: {e}")
            results.append({
                "task": task,
                "success": False,
                "error": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}",
                "time": task_time
            })
    
    total_time = time.time() - start_time
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 80)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –°–õ–û–ñ–ù–´–• –ó–ê–î–ê–ß")
    print("=" * 80)
    
    successful_tasks = [r for r in results if r.get("success", False)]
    real_content_tasks = [r for r in successful_tasks if r.get("is_real_content", False)]
    
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–¥–∞—á: {len(successful_tasks)}/{len(complex_tasks)}")
    print(f"üíé –†–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {len(real_content_tasks)}/{len(successful_tasks)}")
    
    if successful_tasks:
        avg_time = sum(r["time"] for r in successful_tasks) / len(successful_tasks)
        avg_size = sum(r.get("size", 0) for r in successful_tasks) / len(successful_tasks)
        avg_validation = sum(r.get("validation_score", 0) for r in successful_tasks) / len(successful_tasks)
        
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f}—Å")
        print(f"üìè –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {avg_size:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üéØ –°—Ä–µ–¥–Ω—è—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: {avg_validation:.2f}")
    
    print("\nüìã –î–ï–¢–ê–õ–ò –ü–û –ó–ê–î–ê–ß–ê–ú:")
    for i, result in enumerate(results, 1):
        status = "‚úÖ" if result.get("success") else "‚ùå"
        task_name = result["task"][:40] + "..." if len(result["task"]) > 40 else result["task"]
        
        print(f"{status} {i}. {task_name}")
        if result.get("success"):
            print(f"    üìÅ {result.get('file', '–ù–µ—Ç —Ñ–∞–π–ª–∞')}")
            print(f"    ‚è±Ô∏è {result['time']:.1f}—Å, üìè {result.get('size', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print(f"    üö´ {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
    success_rate = len(successful_tasks) / len(complex_tasks)
    real_content_rate = len(real_content_tasks) / len(successful_tasks) if successful_tasks else 0
    
    print(f"\nüéØ –û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ü–†–û–î–ê–ö–®–ï–ù–£:")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1%}")
    print(f"üíé –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {real_content_rate:.1%}")
    
    if success_rate >= 0.8 and real_content_rate >= 0.9:
        print("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        print("‚úÖ –í—ã—Å–æ–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á")
        print("‚úÖ –°–æ–∑–¥–∞—ë—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–º–µ—Å—Ç–æ –æ—Ç—á—ë—Ç–æ–≤")
        print("‚úÖ –ú–æ–∂–Ω–æ –ø—É—à–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω")
        return True
    elif success_rate >= 0.6:
        print("‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ß–ê–°–¢–ò–ß–ù–û –ì–û–¢–û–í–ê")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏")
        return False
    else:
        print("‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê")
        print("üõ†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å—ë–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        return False

async def check_created_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    print("\nüìÅ === –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–´–• –§–ê–ô–õ–û–í ===")
    
    outputs_dir = Path("outputs")
    if not outputs_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ outputs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    files = list(outputs_dir.glob("*"))
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
    
    for file_path in files:
        if file_path.is_file():
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                print(f"\nüìÑ {file_path.name}:")
                print(f"   üìè –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   üíé –ü—Ä–µ–≤—å—é: {content[:80]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                is_report = any(pattern in content for pattern in ["–ó–∞–¥–∞—á–∞:", "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã"])
                content_type = "–û—Ç—á—ë—Ç" if is_report else "–†–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
                print(f"   üéØ –¢–∏–ø: {content_type}")
                
            except Exception as e:
                print(f"\nüìÑ {file_path.name}: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üî• –¢–ï–°–¢ –°–õ–û–ñ–ù–´–• –ó–ê–î–ê–ß –î–õ–Ø ENHANCED ORCHESTRATOR")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
    print("=" * 80)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏
    is_ready = await test_complex_tasks()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    await check_created_files()
    
    print("\n" + "=" * 80)
    if is_ready:
        print("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢: –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        print("üöÄ –ú–æ–∂–Ω–æ –ø—É—à–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö")
    else:
        print("‚ö†Ô∏è –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢: –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")
        print("üîß –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º")

if __name__ == "__main__":
    asyncio.run(main()) 