#!/usr/bin/env python3
"""
üîß –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô
–ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –ø–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

import asyncio
import sys
import os
sys.path.append('.')

from kittycore.core.orchestrator import solve_with_orchestrator

async def test_simple_task():
    """–ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    print("üîß –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 50)
    
    # –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞
    task = "–°–æ–∑–¥–∞—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ—Ç—è—Ç–∞—Ö"
    
    print(f"üìã –ó–ê–î–ê–ß–ê: {task}")
    print(f"üéØ –û–ñ–ò–î–ê–ï–ú: HTML —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –æ –∫–æ—Ç—è—Ç–∞—Ö")
    
    try:
        result = await solve_with_orchestrator(task)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"‚úÖ –£—Å–ø–µ—Ö: {result.get('success', False)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        print(f"\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
        for root, dirs, files in os.walk("."):
            for file in files:
                if file.endswith('.html') and '–∫–æ—Ç—è—Ç' in file.lower():
                    filepath = os.path.join(root, file)
                    size = os.path.getsize(filepath)
                    print(f"  üìÑ {filepath} ({size} –±–∞–π—Ç)")
                    
                    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            content = f.read()
                            print(f"    üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤):")
                            print(f"    {content[:200]}...")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                            if "–∫–æ—Ç—è—Ç" in content.lower() and len(content) > 100:
                                print(f"    ‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–º!")
                                return True
                            else:
                                print(f"    ‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π –∏–ª–∏ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π")
                                return False
                    except Exception as e:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                        return False
        
        print(f"‚ùå HTML —Ñ–∞–π–ª—ã —Å –∫–æ—Ç—è—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False

async def main():
    print("üöÄ –¢–ï–°–¢ –ü–†–û–°–¢–û–ô –ó–ê–î–ê–ß–ò")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JSON –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    print("=" * 60)
    
    success = await test_simple_task()
    
    print(f"\nüìä –ò–¢–û–ì:")
    if success:
        print(f"üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢! –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞—ë—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
    else:
        print(f"‚ùå –ù–£–ñ–ù–´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")

if __name__ == "__main__":
    asyncio.run(main()) 