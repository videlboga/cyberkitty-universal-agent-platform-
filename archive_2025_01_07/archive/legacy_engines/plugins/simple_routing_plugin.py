"""
Simple Routing Plugin - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–ª–∞–≥–∏–Ω –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:
- –ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –ø–æ ID
- –£—Å–ª–æ–≤–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ callback_data
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤
"""

from typing import Dict, Any
from loguru import logger

from app.core.base_plugin import BasePlugin


class SimpleRoutingPlugin(BasePlugin):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–ª–∞–≥–∏–Ω –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏"""
    
    def __init__(self):
        super().__init__("simple_routing")
        logger.info("SimpleRoutingPlugin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _do_initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
        logger.info("‚úÖ SimpleRoutingPlugin –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def register_handlers(self) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —à–∞–≥–æ–≤"""
        return {
            "route_callback": self._handle_route_callback,
            "route_to_step": self._handle_route_to_step,
            "conditional_route": self._handle_conditional_route
        }
    
    async def _handle_route_callback(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ callback_data.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - routes: —Å–ª–æ–≤–∞—Ä—å –º–∞—Ä—à—Ä—É—Ç–æ–≤ {callback_data: target_step_id}
        - default_step: —à–∞–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - callback_field: –ø–æ–ª–µ —Å callback –¥–∞–Ω–Ω—ã–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "callback_data")
        - output_var: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "route_result")
        
        –ü—Ä–∏–º–µ—Ä:
        {
            "type": "route_callback",
            "params": {
                "routes": {
                    "view_examples": "show_examples",
                    "start_diagnosis": "begin_diagnosis",
                    "contact_request": "request_contact"
                },
                "default_step": "main_menu",
                "callback_field": "telegram_callback_data",
                "output_var": "routing_result"
            }
        }
        """
        params = step_data.get("params", {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        routes = params.get("routes", {})
        default_step = params.get("default_step")
        callback_field = params.get("callback_field", "callback_data")
        output_var = params.get("output_var", "route_result")
        
        # –ü–æ–ª—É—á–∞–µ–º callback_data –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        callback_data = context.get(callback_field)
        
        # –ï—Å–ª–∏ callback_data –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä—è–º–æ–º –ø–æ–ª–µ, –∏—â–µ–º –≤ telegram_update
        if not callback_data and "telegram_update" in context:
            telegram_update = context["telegram_update"]
            if "callback_query" in telegram_update:
                callback_data = telegram_update["callback_query"].get("data")
            elif "message" in telegram_update:
                callback_data = telegram_update["message"].get("text")
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —à–∞–≥
            target_step = None
            
            if callback_data and callback_data in routes:
                target_step = routes[callback_data]
                logger.info(f"üìç –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: {callback_data} -> {target_step}")
            elif default_step:
                target_step = default_step
                logger.info(f"üìç –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: -> {target_step}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            route_result = {
                "success": bool(target_step),
                "callback_data": callback_data,
                "target_step": target_step,
                "routes_checked": routes,
                "used_default": bool(default_step and not (callback_data and callback_data in routes))
            }
            
            context[output_var] = route_result
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
            if target_step:
                context["next_step_id"] = target_step
                context["routing_successful"] = True
            else:
                context["routing_successful"] = False
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ä—à—Ä—É—Ç –¥–ª—è callback_data: {callback_data}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            context[output_var] = {
                "success": False,
                "error": str(e),
                "callback_data": callback_data
            }
            context["routing_successful"] = False
        
        return context
    
    async def _handle_route_to_step(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —à–∞–≥.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - target_step: ID —Ü–µ–ª–µ–≤–æ–≥–æ —à–∞–≥–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        - condition: —É—Å–ª–æ–≤–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - output_var: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "route_result")
        
        –ü—Ä–∏–º–µ—Ä:
        {
            "type": "route_to_step",
            "params": {
                "target_step": "confirmation_step",
                "condition": "user_confirmed == true",
                "output_var": "step_routing"
            }
        }
        """
        params = step_data.get("params", {})
        
        target_step = params.get("target_step")
        condition = params.get("condition")
        output_var = params.get("output_var", "route_result")
        
        if not target_step:
            logger.error("route_to_step: target_step –Ω–µ —É–∫–∞–∑–∞–Ω")
            context[output_var] = {"success": False, "error": "target_step –Ω–µ —É–∫–∞–∑–∞–Ω"}
            return context
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            should_route = True
            if condition:
                should_route = self._evaluate_condition(condition, context)
            
            if should_route:
                context["next_step_id"] = target_step
                context["routing_successful"] = True
                context[output_var] = {
                    "success": True,
                    "target_step": target_step,
                    "condition_checked": condition,
                    "condition_result": should_route
                }
                logger.info(f"üìç –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —à–∞–≥: {target_step}")
            else:
                context["routing_successful"] = False
                context[output_var] = {
                    "success": False,
                    "target_step": target_step,
                    "condition_checked": condition,
                    "condition_result": should_route,
                    "reason": "–£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
                }
                logger.info(f"üö´ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —à–∞–≥ {target_step} –æ—Ç–º–µ–Ω–µ–Ω - —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —à–∞–≥: {e}")
            context[output_var] = {
                "success": False,
                "error": str(e),
                "target_step": target_step
            }
            context["routing_successful"] = False
        
        return context
    
    async def _handle_conditional_route(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –£—Å–ª–æ–≤–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - conditions: —Å–ø–∏—Å–æ–∫ —É—Å–ª–æ–≤–∏–π –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —à–∞–≥–æ–≤
        - default_step: —à–∞–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - output_var: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "route_result")
        
        –ü—Ä–∏–º–µ—Ä:
        {
            "type": "conditional_route",
            "params": {
                "conditions": [
                    {"condition": "user_type == 'premium'", "target_step": "premium_menu"},
                    {"condition": "user_type == 'basic'", "target_step": "basic_menu"},
                    {"condition": "is_first_visit == true", "target_step": "welcome_tour"}
                ],
                "default_step": "main_menu",
                "output_var": "conditional_routing"
            }
        }
        """
        params = step_data.get("params", {})
        
        conditions = params.get("conditions", [])
        default_step = params.get("default_step")
        output_var = params.get("output_var", "route_result")
        
        try:
            target_step = None
            matched_condition = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ –ø–æ—Ä—è–¥–∫—É
            for condition_item in conditions:
                condition = condition_item.get("condition")
                step = condition_item.get("target_step")
                
                if condition and step and self._evaluate_condition(condition, context):
                    target_step = step
                    matched_condition = condition
                    break
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
            if not target_step and default_step:
                target_step = default_step
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if target_step:
                context["next_step_id"] = target_step
                context["routing_successful"] = True
                context[output_var] = {
                    "success": True,
                    "target_step": target_step,
                    "matched_condition": matched_condition,
                    "used_default": bool(not matched_condition and default_step),
                    "conditions_checked": len(conditions)
                }
                logger.info(f"üìç –£—Å–ª–æ–≤–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: -> {target_step}")
            else:
                context["routing_successful"] = False
                context[output_var] = {
                    "success": False,
                    "reason": "–ù–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –Ω–µ—Ç —à–∞–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                    "conditions_checked": len(conditions)
                }
                logger.warning("‚ö†Ô∏è –£—Å–ª–æ–≤–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å–ª–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            context[output_var] = {
                "success": False,
                "error": str(e)
            }
            context["routing_successful"] = False
        
        return context
    
    def _evaluate_condition(self, condition: str, context: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —É—Å–ª–æ–≤–∏–π.
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: ==, !=, >, <, >=, <=, and, or, not, in
        """
        try:
            # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            for key, value in context.items():
                if isinstance(value, str):
                    condition = condition.replace(f"{key}", f'"{value}"')
                else:
                    condition = condition.replace(f"{key}", str(value))
            
            # –í–ù–ò–ú–ê–ù–ò–ï: eval –Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!
            # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –≤—ã—Ä–∞–∂–µ–Ω–∏–π
            return bool(eval(condition))
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏—è '{condition}': {e}")
            return False
    
    async def healthcheck(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–ª–∞–≥–∏–Ω–∞"""
        return True 