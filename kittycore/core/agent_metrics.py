"""
üìä Agent Metrics System - –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–æ–≤ KittyCore 3.0

–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
- ‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
- ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- ‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è  
- ‚úÖ –û—à–∏–±–∫–∏ –∏ —É—Å–ø–µ—Ö–∏
- ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ

–¶–ï–õ–¨: –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–æ–≤-—Ö–∞–ª—Ç—É—Ä—â–∏–∫–æ–≤ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤! üéØ
"""

import asyncio
import json
import logging
import time
from dataclasses import dataclass, field, asdict
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Union
from pathlib import Path
from enum import Enum

logger = logging.getLogger(__name__)

# === –¢–ò–ü–´ –ò –ü–ï–†–ï–ß–ò–°–õ–ï–ù–ò–Ø ===

class TaskStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
    PENDING = "pending"
    IN_PROGRESS = "in_progress"  
    COMPLETED = "completed"
    FAILED = "failed"
    TIMEOUT = "timeout"
    CANCELLED = "cancelled"

class QualityScore(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    EXCELLENT = 5  # 0.9-1.0 - –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    GOOD = 4       # 0.7-0.89 - –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç  
    AVERAGE = 3    # 0.5-0.69 - –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    POOR = 2       # 0.3-0.49 - –ü–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    TERRIBLE = 1   # 0.0-0.29 - –£–∂–∞—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

# === –ë–ê–ó–û–í–´–ï –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• ===

@dataclass
class TaskMetric:
    """–ú–µ—Ç—Ä–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    task_id: str
    agent_id: str
    task_description: str
    status: TaskStatus
    start_time: datetime
    end_time: Optional[datetime] = None
    duration_seconds: float = 0.0
    quality_score: float = 0.0
    success_rate: float = 0.0
    artifacts_created: int = 0
    errors_count: int = 0
    retries_count: int = 0
    memory_usage_mb: float = 0.0
    llm_calls: int = 0
    tools_used: List[str] = field(default_factory=list)
    error_messages: List[str] = field(default_factory=list)
    
    def complete_task(self, quality_score: float, artifacts: int = 0, errors: List[str] = None):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        self.end_time = datetime.now()
        self.duration_seconds = (self.end_time - self.start_time).total_seconds()
        self.quality_score = quality_score
        self.success_rate = 1.0 if quality_score >= 0.7 else 0.0
        self.artifacts_created = artifacts
        self.errors_count = len(errors or [])
        self.error_messages = errors or []
        self.status = TaskStatus.COMPLETED if quality_score >= 0.3 else TaskStatus.FAILED

@dataclass  
class AgentPerformanceMetrics:
    """–°–æ–≤–æ–∫—É–ø–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞"""
    agent_id: str
    agent_type: str
    total_tasks: int = 0
    completed_tasks: int = 0
    failed_tasks: int = 0
    average_quality: float = 0.0
    average_duration: float = 0.0
    success_rate: float = 0.0
    total_artifacts: int = 0
    total_errors: int = 0
    total_llm_calls: int = 0
    preferred_tools: List[str] = field(default_factory=list)
    error_patterns: Dict[str, int] = field(default_factory=dict)
    quality_trend: List[float] = field(default_factory=list)
    last_updated: datetime = field(default_factory=datetime.now)
    
    def update_from_task(self, task_metric: TaskMetric):
        """–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        self.total_tasks += 1
        
        if task_metric.status == TaskStatus.COMPLETED:
            self.completed_tasks += 1
        elif task_metric.status == TaskStatus.FAILED:
            self.failed_tasks += 1
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.average_quality = self._update_average(
            self.average_quality, task_metric.quality_score, self.total_tasks
        )
        self.average_duration = self._update_average(
            self.average_duration, task_metric.duration_seconds, self.total_tasks  
        )
        
        self.success_rate = self.completed_tasks / self.total_tasks if self.total_tasks > 0 else 0.0
        self.total_artifacts += task_metric.artifacts_created
        self.total_errors += task_metric.errors_count
        self.total_llm_calls += task_metric.llm_calls
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –æ—à–∏–±–∫–∏
        self.preferred_tools.extend(task_metric.tools_used)
        for error in task_metric.error_messages:
            self.error_patterns[error] = self.error_patterns.get(error, 0) + 1
            
        # –¢—Ä–µ–Ω–¥ –∫–∞—á–µ—Å—Ç–≤–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–¥–∞—á)
        self.quality_trend.append(task_metric.quality_score)
        if len(self.quality_trend) > 10:
            self.quality_trend.pop(0)
            
        self.last_updated = datetime.now()
    
    def _update_average(self, current_avg: float, new_value: float, count: int) -> float:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ"""
        if count == 1:
            return new_value
        return ((current_avg * (count - 1)) + new_value) / count
    
    def get_quality_grade(self) -> QualityScore:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –∞–≥–µ–Ω—Ç–∞"""
        if self.average_quality >= 0.9:
            return QualityScore.EXCELLENT
        elif self.average_quality >= 0.7:
            return QualityScore.GOOD  
        elif self.average_quality >= 0.5:
            return QualityScore.AVERAGE
        elif self.average_quality >= 0.3:
            return QualityScore.POOR
        else:
            return QualityScore.TERRIBLE

# === –°–ò–°–¢–ï–ú–ê –°–ë–û–†–ê –ú–ï–¢–†–ò–ö ===

class MetricsCollector:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, storage_path: str = "metrics_storage"):
        self.storage_path = Path(storage_path)
        self.storage_path.mkdir(exist_ok=True)
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –º–µ—Ç—Ä–∏–∫
        self.task_metrics: Dict[str, TaskMetric] = {}
        self.agent_metrics: Dict[str, AgentPerformanceMetrics] = {}
        self.team_metrics: Dict[str, Dict] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.auto_save_interval = 60  # —Å–µ–∫—É–Ω–¥
        self.last_save = time.time()
        
        logger.info(f"üìä MetricsCollector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {storage_path}")
    
    def start_task_tracking(self, task_id: str, agent_id: str, task_description: str) -> TaskMetric:
        """–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        task_metric = TaskMetric(
            task_id=task_id,
            agent_id=agent_id, 
            task_description=task_description,
            status=TaskStatus.PENDING,
            start_time=datetime.now()
        )
        
        self.task_metrics[task_id] = task_metric
        logger.info(f"üìä –ù–∞—á–∞—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id} –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_id}")
        
        return task_metric
    
    def update_task_progress(self, task_id: str, status: TaskStatus, **kwargs):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏"""
        if task_id not in self.task_metrics:
            logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö")
            return
            
        task_metric = self.task_metrics[task_id]
        task_metric.status = status
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        for key, value in kwargs.items():
            if hasattr(task_metric, key):
                setattr(task_metric, key, value)
        
        logger.debug(f"üìä –û–±–Ω–æ–≤–ª—ë–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id}: {status.value}")
    
    def complete_task(
        self, 
        task_id: str, 
        quality_score: float, 
        artifacts_created: int = 0,
        errors: List[str] = None,
        tools_used: List[str] = None,
        llm_calls: int = 0
    ):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        if task_id not in self.task_metrics:
            logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            return
            
        task_metric = self.task_metrics[task_id]
        task_metric.complete_task(quality_score, artifacts_created, errors or [])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if tools_used:
            task_metric.tools_used = tools_used
        task_metric.llm_calls = llm_calls
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞
        self._update_agent_metrics(task_metric)
        
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f}")
    
    def _update_agent_metrics(self, task_metric: TaskMetric):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–≤–æ–∫—É–ø–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞"""
        agent_id = task_metric.agent_id
        
        if agent_id not in self.agent_metrics:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞
            agent_type = self._detect_agent_type(agent_id)
            self.agent_metrics[agent_id] = AgentPerformanceMetrics(
                agent_id=agent_id,
                agent_type=agent_type
            )
        
        self.agent_metrics[agent_id].update_from_task(task_metric)
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if time.time() - self.last_save > self.auto_save_interval:
            asyncio.create_task(self.save_metrics())
    
    def _detect_agent_type(self, agent_id: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞ –ø–æ ID"""
        if "nova" in agent_id.lower():
            return "NovaAgent" 
        elif "artemis" in agent_id.lower():
            return "ArtemisAgent"
        elif "cipher" in agent_id.lower():
            return "CipherAgent"
        elif "ada" in agent_id.lower():
            return "AdaAgent"
        elif "analyst" in agent_id.lower():
            return "AnalystAgent"
        elif "developer" in agent_id.lower():
            return "DeveloperAgent"
        elif "tester" in agent_id.lower():
            return "TesterAgent"
        else:
            return "UnknownAgent"
    
    def get_agent_performance(self, agent_id: str) -> Optional[AgentPerformanceMetrics]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞"""
        return self.agent_metrics.get(agent_id)
    
    def get_top_agents(self, limit: int = 5) -> List[AgentPerformanceMetrics]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É"""
        sorted_agents = sorted(
            self.agent_metrics.values(),
            key=lambda x: (x.average_quality, x.success_rate, -x.average_duration),
            reverse=True
        )
        return sorted_agents[:limit]
    
    def get_worst_agents(self, limit: int = 5) -> List[AgentPerformanceMetrics]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ö—É–¥—à–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ (–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è)"""
        sorted_agents = sorted(
            self.agent_metrics.values(),
            key=lambda x: (x.average_quality, x.success_rate, x.average_duration)
        )
        return sorted_agents[:limit]
    
    async def save_metrics(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–∞–π–ª—ã"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
            agent_file = self.storage_path / "agent_metrics.json"
            agent_data = {}
            for agent_id, metrics in self.agent_metrics.items():
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º dataclass –≤ —Å–ª–æ–≤–∞—Ä—å
                data = asdict(metrics)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
                data['last_updated'] = data['last_updated'].isoformat() if isinstance(data['last_updated'], datetime) else str(data['last_updated'])
                agent_data[agent_id] = data
            
            with open(agent_file, 'w', encoding='utf-8') as f:
                json.dump(agent_data, f, indent=2, ensure_ascii=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–¥–∞—á
            tasks_file = self.storage_path / "task_metrics.json"
            tasks_data = {}
            for task_id, metric in self.task_metrics.items():
                data = asdict(metric)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º enum –≤ —Å—Ç—Ä–æ–∫—É
                data['status'] = data['status'].value if hasattr(data['status'], 'value') else str(data['status'])
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
                data['start_time'] = data['start_time'].isoformat() if isinstance(data['start_time'], datetime) else str(data['start_time'])
                if data['end_time']:
                    data['end_time'] = data['end_time'].isoformat() if isinstance(data['end_time'], datetime) else str(data['end_time'])
                tasks_data[task_id] = data
            
            with open(tasks_file, 'w', encoding='utf-8') as f:
                json.dump(tasks_data, f, indent=2, ensure_ascii=False)
            
            self.last_save = time.time()
            logger.debug("üíæ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")

    def get_global_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        total_tasks = sum(agent.total_tasks for agent in self.agent_metrics.values())
        total_agents = len(self.agent_metrics)
        
        if total_tasks == 0:
            avg_quality = 0.0
            success_rate = 0.0
        else:
            total_quality = sum(
                agent.average_quality * agent.total_tasks 
                for agent in self.agent_metrics.values()
            )
            avg_quality = total_quality / total_tasks
            
            successful_tasks = sum(
                agent.completed_tasks 
                for agent in self.agent_metrics.values()
            )
            success_rate = successful_tasks / total_tasks
        
        return {
            "total_agents": total_agents,
            "total_tasks": total_tasks,
            "average_quality": avg_quality,
            "success_rate": success_rate,
            "active_agents": len([a for a in self.agent_metrics.values() if a.total_tasks > 0]),
            "total_artifacts": sum(agent.total_artifacts for agent in self.agent_metrics.values()),
            "total_errors": sum(agent.total_errors for agent in self.agent_metrics.values())
        }

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –°–ë–û–†–©–ò–ö –ú–ï–¢–†–ò–ö ===

# –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–±–æ—Ä—â–∏–∫–∞ –º–µ—Ç—Ä–∏–∫
_global_metrics_collector = None

def get_metrics_collector() -> MetricsCollector:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫"""
    global _global_metrics_collector
    if _global_metrics_collector is None:
        _global_metrics_collector = MetricsCollector()
    return _global_metrics_collector 