#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¢–û–õ–¨–ö–û KittyCore 3.0 (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
"""
import os
import re
import ast
from pathlib import Path
from collections import defaultdict, Counter

class KittyCoreAnalyzer:
    def __init__(self):
        self.project_root = Path(".")
        self.components = defaultdict(list)
        self.duplicates = defaultdict(list)
        self.files_by_category = defaultdict(list)
        
    def analyze_project(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç KittyCore"""
        print("üê± –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É KittyCore 3.0...")
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ Python —Ñ–∞–π–ª—ã
        python_files = []
        for file_path in self.project_root.rglob("*.py"):
            if self._is_our_file(file_path):
                python_files.append(file_path)
                
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(python_files)} –Ω–∞—à–∏—Ö Python —Ñ–∞–π–ª–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for file_path in python_files:
            self._analyze_file(file_path)
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        self._generate_report()
        
    def _is_our_file(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –Ω–∞—à–∏–º"""
        path_str = str(file_path)
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        exclude_patterns = [
            ".venv/", "venv/", "telegram_test_env/", ".git/", 
            "node_modules/", "__pycache__/", "archive_",
            ".pytest_cache/", ".mypy_cache/"
        ]
        
        for pattern in exclude_patterns:
            if pattern in path_str:
                return False
                
        return True
        
    def _analyze_file(self, file_path: Path):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
            self._categorize_file(file_path, content)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {file_path}: {e}")
            
    def _categorize_file(self, file_path: Path, content: str):
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É"""
        relative_path = file_path.relative_to(self.project_root)
        path_str = str(relative_path)
        content_lower = content.lower()
        file_name = file_path.name.lower()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã KittyCore
        if path_str.startswith("kittycore/core/"):
            self.components["üß† Core Engine"].append(relative_path)
        elif path_str.startswith("kittycore/agents/"):
            self.components["ü§ñ Agent System"].append(relative_path)
        elif path_str.startswith("kittycore/tools/"):
            self.components["üîß Tool System"].append(relative_path)
        elif path_str.startswith("kittycore/memory/"):
            self.components["üíæ Memory System"].append(relative_path)
        elif path_str.startswith("kittycore/llm/"):
            self.components["üß† LLM Integration"].append(relative_path)
        elif path_str.startswith("kittycore/visualization/"):
            self.components["üìä Visualization"].append(relative_path)
        elif path_str.startswith("kittycore/config/"):
            self.components["‚öôÔ∏è Configuration"].append(relative_path)
        elif path_str.startswith("kittycore/tests/"):
            self.components["üß™ Tests"].append(relative_path)
        elif "obsidian" in path_str:
            self.components["üìù Obsidian Integration"].append(relative_path)
        elif path_str.startswith("kittycore/"):
            self.components["üè† KittyCore Root"].append(relative_path)
            
        # –ë–µ–Ω—á–º–∞—Ä–∫–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã
        elif path_str.startswith("benchmarks/"):
            self.components["üìà Benchmarks"].append(relative_path)
        elif path_str.startswith("examples/"):
            self.components["üìö Examples"].append(relative_path)
            
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
        elif any(word in file_name for word in ["test_", "demo_", "check_"]):
            self.components["üß™ Root Tests/Demos"].append(relative_path)
        elif "generated_" in file_name:
            self.components["üîÑ Generated Files"].append(relative_path)
        elif any(word in file_name for word in ["temp_", "tmp_", "archive_"]):
            self.components["üìÅ Temp Files"].append(relative_path)
            
        # –£—Ç–∏–ª–∏—Ç—ã –∏ —Å–∫—Ä–∏–ø—Ç—ã
        elif any(word in file_name for word in ["script", "skrip", "calculation", "calculator"]):
            self.components["üìù Utility Scripts"].append(relative_path)
        elif any(word in file_name for word in ["server", "app", "main", "start"]):
            self.components["üöÄ Application Entry Points"].append(relative_path)
        elif any(word in file_name for word in ["bot", "telegram"]):
            self.components["ü§ñ Bot Scripts"].append(relative_path)
        elif file_name.endswith("data.py") or "–∞–Ω–∞–ª–∏–∑" in file_name:
            self.components["üìä Data Analysis"].append(relative_path)
            
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
        elif relative_path.parent == Path("."):
            self.components["üìÅ Root Level Files"].append(relative_path)
        else:
            self.components["‚ùì Other"].append(relative_path)
            
        # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        self._find_duplicates_by_name(file_path)
        
    def _find_duplicates_by_name(self, file_path: Path):
        """–ò—â–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤"""
        name = file_path.stem.lower()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        normalized_name = re.sub(r'[_\-\d]', '', name)
        
        if len(normalized_name) > 3:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ
            self.files_by_category[normalized_name].append(file_path)
            
    def _generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç"""
        print("\n" + "="*60)
        print("üìä –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ KITTYCORE 3.0")
        print("="*60)
        
        total_files = sum(len(files) for files in self.components.values())
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞: {total_files}")
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        print(f"\nüèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        priority_order = [
            "üß† Core Engine", "ü§ñ Agent System", "üîß Tool System", 
            "üíæ Memory System", "üß† LLM Integration", "üìä Visualization",
            "‚öôÔ∏è Configuration", "üìù Obsidian Integration", "üè† KittyCore Root",
            "üß™ Tests", "üìà Benchmarks", "üìö Examples",
            "üöÄ Application Entry Points", "ü§ñ Bot Scripts", 
            "üìä Data Analysis", "üìù Utility Scripts",
            "üß™ Root Tests/Demos", "üìÅ Root Level Files",
            "üîÑ Generated Files", "üìÅ Temp Files", "‚ùì Other"
        ]
        
        for component in priority_order:
            files = self.components.get(component, [])
            if files:
                print(f"\n  {component} ({len(files)} —Ñ–∞–π–ª–æ–≤):")
                for file_path in sorted(files)[:5]:
                    print(f"    ‚Ä¢ {file_path}")
                if len(files) > 5:
                    print(f"    ... –∏ –µ—â—ë {len(files) - 5} —Ñ–∞–π–ª–æ–≤")
                    
        # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø:")
        
        duplicates_found = False
        for name, files in self.files_by_category.items():
            if len(files) > 1 and len(name) > 4:  # –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –¥—É–±–ª–∏
                duplicates_found = True
                print(f"\n  ‚ö†Ô∏è –ü–æ—Ö–æ–∂–∏–µ —Ñ–∞–π–ª—ã '{name}':")
                for file_path in sorted(files):
                    print(f"    ‚Ä¢ {file_path}")
                    
        if not duplicates_found:
            print("  ‚úÖ –ó–Ω–∞—á–∏–º—ã—Ö –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self._generate_recommendations(total_files)
        
    def _generate_recommendations(self, total_files: int):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ
        root_files = len(self.components.get("üìÅ Root Level Files", []))
        if root_files > 10:
            recommendations.append(f"üìÅ {root_files} —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ - –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤ –ø–∞–ø–∫–∏")
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
        root_tests = len(self.components.get("üß™ Root Tests/Demos", []))
        if root_tests > 5:
            recommendations.append(f"üß™ {root_tests} —Ç–µ—Å—Ç–æ–≤ –≤ –∫–æ—Ä–Ω–µ - –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ tests/")
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        generated = len(self.components.get("üîÑ Generated Files", []))
        if generated > 0:
            recommendations.append(f"üîÑ {generated} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ - –æ—á–∏—Å—Ç–∏—Ç—å")
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        temp_files = len(self.components.get("üìÅ Temp Files", []))
        if temp_files > 0:
            recommendations.append(f"üìÅ {temp_files} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ - —É–¥–∞–ª–∏—Ç—å")
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã
        utilities = len(self.components.get("üìù Utility Scripts", []))
        if utilities > 8:
            recommendations.append(f"üìù {utilities} —É—Ç–∏–ª–∏—Ç –≤ –∫–æ—Ä–Ω–µ - —Å–æ–∑–¥–∞—Ç—å utils/")
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        core_files = len(self.components.get("üß† Core Engine", []))
        if core_files == 0:
            recommendations.append("üß† –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ Core Engine - —Å–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤—É")
            
        agent_files = len(self.components.get("ü§ñ Agent System", []))
        if agent_files < 3:
            recommendations.append("ü§ñ –ú–∞–ª–æ —Ñ–∞–π–ª–æ–≤ –≤ Agent System - —Ä–∞–∑–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
            
        if recommendations:
            for i, rec in enumerate(recommendations, 1):
                print(f"  {i}. {rec}")
        else:
            print("  ‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ!")
            
        # –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
        print(f"\nüéØ –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:")
        print("  1. üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–µ–Ω—å –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        print("  2. üìÅ –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ (utils/, cli/, demos/)")
        print("  3. üöö –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏")
        print("  4. üîÑ –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª")
        print("  5. üìù –°–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω—ã–π —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ (main.py)")

def main():
    analyzer = KittyCoreAnalyzer()
    analyzer.analyze_project()

if __name__ == "__main__":
    main() 