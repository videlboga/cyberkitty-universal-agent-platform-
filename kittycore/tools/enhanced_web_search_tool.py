"""
üîç Enhanced Web Search Tool - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ

–£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- DuckDuckGo API
- Fallback –ø–æ–∏—Å–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
- –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import time
from typing import Dict, Any, List
from urllib.parse import quote

try:
    import aiohttp
    AIOHTTP_AVAILABLE = True
except ImportError:
    AIOHTTP_AVAILABLE = False

from .base_tool import Tool, ToolResult
from .web_common import SearchResult, asdict


class EnhancedWebSearchTool(Tool):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
    
    def __init__(self):
        super().__init__(
            name="enhanced_web_search",
            description="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
        )
        self.duckduckgo_url = "https://api.duckduckgo.com/"
        self.session = None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if not AIOHTTP_AVAILABLE:
            print("‚ö†Ô∏è aiohttp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    async def _ensure_session(self):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ aiohttp —Å–µ—Å—Å–∏–∏"""
        if self.session is None or self.session.closed:
            timeout = aiohttp.ClientTimeout(total=15)
            self.session = aiohttp.ClientSession(timeout=timeout)
    
    async def _close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session and not self.session.closed:
            await self.session.close()
    
    async def execute(self, query: str, limit: int = 10, sources: List[str] = None) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫"""
        try:
            await self._ensure_session()
            
            if sources is None:
                sources = ["duckduckgo", "fallback"]
            
            all_results = []
            
            # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo
            if "duckduckgo" in sources:
                ddg_results = await self._search_duckduckgo(query, limit)
                all_results.extend(ddg_results)
            
            # Fallback –ø–æ–∏—Å–∫
            if "fallback" in sources and len(all_results) < limit:
                fallback_results = self._search_fallback(query, limit - len(all_results))
                all_results.extend(fallback_results)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            all_results.sort(key=lambda x: x.relevance_score, reverse=True)
            
            return ToolResult(
                success=True,
                data={
                    "query": query,
                    "results": [asdict(result) for result in all_results[:limit]],
                    "total_found": len(all_results),
                    "sources_used": sources,
                    "search_time": time.time()
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"
            )
        finally:
            # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            pass
    
    async def _search_duckduckgo(self, query: str, limit: int) -> List[SearchResult]:
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo API"""
        try:
            params = {
                'q': query,
                'format': 'json',
                'no_html': '1',
                'skip_disambig': '1'
            }
            
            async with self.session.get(self.duckduckgo_url, params=params) as response:
                if response.status != 200:
                    return []
                
                # DuckDuckGo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º Content-Type
                text = await response.text()
                import json
                data = json.loads(text)
                results = []
                
                # Instant Answer
                if data.get('Answer'):
                    results.append(SearchResult(
                        title=f"Instant Answer: {query}",
                        url=data.get('AnswerURL', ''),
                        snippet=data['Answer'],
                        source="DuckDuckGo Instant",
                        relevance_score=0.9,
                        timestamp=time.strftime('%Y-%m-%d %H:%M:%S')
                    ))
                
                # Abstract
                if data.get('Abstract'):
                    results.append(SearchResult(
                        title=data.get('Heading', query),
                        url=data.get('AbstractURL', ''),
                        snippet=data['Abstract'],
                        source="DuckDuckGo Abstract",
                        relevance_score=0.8,
                        timestamp=time.strftime('%Y-%m-%d %H:%M:%S')
                    ))
                
                # Related Topics
                for i, topic in enumerate(data.get('RelatedTopics', [])[:limit-len(results)]):
                    if isinstance(topic, dict) and topic.get('Text'):
                        title = topic.get('FirstURL', '').split('/')[-1].replace('_', ' ')
                        results.append(SearchResult(
                            title=title or f"Related: {query}",
                            url=topic.get('FirstURL', ''),
                            snippet=topic['Text'],
                            source="DuckDuckGo Related",
                            relevance_score=0.7 - (i * 0.1),  # –°–Ω–∏–∂–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                            timestamp=time.strftime('%Y-%m-%d %H:%M:%S')
                        ))
                
                return results[:limit]
                
        except Exception as e:
            return []
    
    def _search_fallback(self, query: str, limit: int) -> List[SearchResult]:
        """Fallback –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        results = []
        
        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞
        search_engines = [
            ("Google", f"https://www.google.com/search?q={quote(query)}"),
            ("Bing", f"https://www.bing.com/search?q={quote(query)}"),
            ("Yandex", f"https://yandex.ru/search/?text={quote(query)}"),
            ("Wikipedia", f"https://en.wikipedia.org/wiki/Special:Search?search={quote(query)}")
        ]
        
        for i, (engine, url) in enumerate(search_engines[:limit]):
            results.append(SearchResult(
                title=f"–ü–æ–∏—Å–∫ '{query}' –≤ {engine}",
                url=url,
                snippet=f"–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ '{query}' –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ {engine}",
                source=f"Fallback {engine}",
                relevance_score=0.3 - (i * 0.05),
                timestamp=time.strftime('%Y-%m-%d %H:%M:%S')
            ))
        
        return results

    def get_schema(self) -> Dict[str, Any]:
        return {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
                },
                "limit": {
                    "type": "integer",
                    "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                    "default": 10,
                    "minimum": 1,
                    "maximum": 20
                },
                "sources": {
                    "type": "array",
                    "items": {"type": "string", "enum": ["duckduckgo", "fallback"]},
                    "description": "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                    "default": ["duckduckgo", "fallback"]
                }
            },
            "required": ["query"]
        }

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
    async def execute_action(self, action: str, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–∞–ª–∏–∞—Å –¥–ª—è execute)"""
        return await self.execute(**kwargs)


# –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def create_enhanced_web_search_tool() -> EnhancedWebSearchTool:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Enhanced Web Search"""
    return EnhancedWebSearchTool() 