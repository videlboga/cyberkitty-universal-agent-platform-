#!/usr/bin/env python3
"""
üöÄ –†–ï–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0

–†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
‚ùå –ù–ï–¢ –ú–û–ö–û–í - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚ùå –ù–ï–¢ –§–ò–ö–¢–ò–í–ù–´–• –û–¢–í–ï–¢–û–í  
‚ùå –ù–ï–¢ "len(text) > 20" –≤–∞–ª–∏–¥–∞—Ü–∏–∏
‚úÖ –†–ï–ê–õ–¨–ù–´–ï API –≤—ã–∑–æ–≤—ã
‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏/—Å–µ—Ç—å—é
"""

import asyncio
import time
import json
import os
import tempfile
import requests
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass

@dataclass
class RealTestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    tool_name: str
    success: bool
    execution_time: float
    real_output: Optional[str] = None
    error_message: Optional[str] = None
    data_size: int = 0
    api_calls_made: int = 0
    files_created: int = 0

class ToolRealityTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.temp_dir = Path(tempfile.mkdtemp(prefix="kittycore_reality_"))
        self.results: List[RealTestResult] = []
        
    async def test_enhanced_web_search(self) -> RealTestResult:
        """–†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É—é –†–ï–ê–õ–¨–ù–´–ô –≤–µ–±-–ø–æ–∏—Å–∫...")
        start_time = time.time()
        
        try:
            from kittycore.tools import DEFAULT_TOOLS
            tool = DEFAULT_TOOLS.get_tool("enhanced_web_search")
            
            if not tool:
                return RealTestResult("enhanced_web_search", False, 0, error_message="Tool not found")
            
            # –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ Python
            result = await tool.execute(query="Python programming language", max_results=3)
            execution_time = time.time() - start_time
            
            # –†–ï–ê–õ–¨–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è
            success = (
                result.success and 
                result.data and
                len(str(result.data)) > 100 and  # –†–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                ("python" in str(result.data).lower() or "programming" in str(result.data).lower())
            )
            
            return RealTestResult(
                "enhanced_web_search", 
                success, 
                execution_time,
                real_output=str(result.data)[:200] if result.data else None,
                data_size=len(str(result.data)) if result.data else 0,
                api_calls_made=1
            )
            
        except Exception as e:
            return RealTestResult("enhanced_web_search", False, time.time() - start_time, error_message=str(e))
    
    async def test_enhanced_web_scraping(self) -> RealTestResult:
        """–†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞"""
        print("üï∑Ô∏è –¢–µ—Å—Ç–∏—Ä—É—é –†–ï–ê–õ–¨–ù–´–ô –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥...")
        start_time = time.time()
        
        try:
            from kittycore.tools import DEFAULT_TOOLS
            tool = DEFAULT_TOOLS.get_tool("enhanced_web_scraping")
            
            if not tool:
                return RealTestResult("enhanced_web_scraping", False, 0, error_message="Tool not found")
            
            # –†–ï–ê–õ–¨–ù–´–ô —Å–∫—Ä–∞–ø–∏–Ω–≥ httpbin (–Ω–∞–¥—ë–∂–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∞–π—Ç)
            result = await tool.execute(url="https://httpbin.org/html")
            execution_time = time.time() - start_time
            
            # –†–ï–ê–õ–¨–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è HTML
            success = (
                result.success and 
                result.data and
                "<html>" in str(result.data).lower() and
                len(str(result.data)) > 50
            )
            
            return RealTestResult(
                "enhanced_web_scraping", 
                success, 
                execution_time,
                real_output=str(result.data)[:200] if result.data else None,
                data_size=len(str(result.data)) if result.data else 0,
                api_calls_made=1
            )
            
        except Exception as e:
            return RealTestResult("enhanced_web_scraping", False, time.time() - start_time, error_message=str(e))
    
    async def test_api_request(self) -> RealTestResult:
        """–†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print("üåê –¢–µ—Å—Ç–∏—Ä—É—é –†–ï–ê–õ–¨–ù–´–ï API –∑–∞–ø—Ä–æ—Å—ã...")
        start_time = time.time()
        
        try:
            from kittycore.tools import DEFAULT_TOOLS
            tool = DEFAULT_TOOLS.get_tool("api_request")
            
            if not tool:
                return RealTestResult("api_request", False, 0, error_message="Tool not found")
            
            # –†–ï–ê–õ–¨–ù–´–ô API –∑–∞–ø—Ä–æ—Å –∫ httpbin
            result = await tool.execute(
                url="https://httpbin.org/json",
                method="GET"
            )
            execution_time = time.time() - start_time
            
            # –†–ï–ê–õ–¨–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è JSON
            success = False
            if result.success and result.data:
                try:
                    if isinstance(result.data, dict):
                        success = True
                    elif isinstance(result.data, str):
                        json.loads(result.data)
                        success = True
                except:
                    pass
            
            return RealTestResult(
                "api_request", 
                success, 
                execution_time,
                real_output=str(result.data)[:200] if result.data else None,
                data_size=len(str(result.data)) if result.data else 0,
                api_calls_made=1
            )
            
        except Exception as e:
            return RealTestResult("api_request", False, time.time() - start_time, error_message=str(e))
    
    async def test_code_execution(self) -> RealTestResult:
        """–†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞"""
        print("üíª –¢–µ—Å—Ç–∏—Ä—É—é –†–ï–ê–õ–¨–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞...")
        start_time = time.time()
        
        try:
            from kittycore.tools import DEFAULT_TOOLS
            tool = DEFAULT_TOOLS.get_tool("code_execution")
            
            if not tool:
                return RealTestResult("code_execution", False, 0, error_message="Tool not found")
            
            # –†–ï–ê–õ–¨–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python
            test_code = """
import math
result = math.sqrt(16) + math.pi
print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
"""
            
            result = await tool.execute(code=test_code, language="python")
            execution_time = time.time() - start_time
            
            # –†–ï–ê–õ–¨–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            success = (
                result.success and 
                result.data and
                "–†–µ–∑—É–ª—å—Ç–∞—Ç:" in str(result.data) and
                "7.14" in str(result.data)  # sqrt(16) + pi ‚âà 7.14
            )
            
            return RealTestResult(
                "code_execution", 
                success, 
                execution_time,
                real_output=str(result.data)[:200] if result.data else None,
                data_size=len(str(result.data)) if result.data else 0
            )
            
        except Exception as e:
            return RealTestResult("code_execution", False, time.time() - start_time, error_message=str(e))
    
    async def test_super_system_tool(self) -> RealTestResult:
        """–†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        print("üöÄ –¢–µ—Å—Ç–∏—Ä—É—é –†–ï–ê–õ–¨–ù–´–ï —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...")
        start_time = time.time()
        
        try:
            from kittycore.tools import DEFAULT_TOOLS
            tool = DEFAULT_TOOLS.get_tool("super_system_tool")
            
            if not tool:
                return RealTestResult("super_system_tool", False, 0, error_message="Tool not found")
            
            # –†–ï–ê–õ–¨–ù–ê–Ø –æ–ø–µ—Ä–∞—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            test_file = self.temp_dir / "system_test.txt"
            test_content = "KittyCore 3.0 Reality Test"
            
            result = await tool.execute(
                action="write_file",
                file_path=str(test_file),
                content=test_content
            )
            execution_time = time.time() - start_time
            
            # –†–ï–ê–õ–¨–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è - —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω?
            success = (
                result.success and 
                test_file.exists() and
                test_file.read_text().strip() == test_content
            )
            
            files_created = 1 if test_file.exists() else 0
            
            return RealTestResult(
                "super_system_tool", 
                success, 
                execution_time,
                real_output=f"File created: {test_file.exists()}",
                files_created=files_created
            )
            
        except Exception as e:
            return RealTestResult("super_system_tool", False, time.time() - start_time, error_message=str(e))
    
    async def test_image_generation(self) -> RealTestResult:
        """–†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        print("üé® –¢–µ—Å—Ç–∏—Ä—É—é –†–ï–ê–õ–¨–ù–£–Æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        start_time = time.time()
        
        try:
            from kittycore.tools import DEFAULT_TOOLS
            tool = DEFAULT_TOOLS.get_tool("image_generation")
            
            if not tool:
                return RealTestResult("image_generation", False, 0, error_message="Tool not found")
            
            # –†–ï–ê–õ–¨–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            result = await tool.execute(
                prompt="A simple blue circle on white background",
                width=256,
                height=256
            )
            execution_time = time.time() - start_time
            
            # –†–ï–ê–õ–¨–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            success = (
                result.success and 
                result.data and
                (isinstance(result.data, bytes) or "image" in str(result.data).lower())
            )
            
            data_size = len(result.data) if isinstance(result.data, bytes) else len(str(result.data))
            
            return RealTestResult(
                "image_generation", 
                success, 
                execution_time,
                real_output=f"Image data: {type(result.data).__name__}",
                data_size=data_size,
                api_calls_made=1
            )
            
        except Exception as e:
            return RealTestResult("image_generation", False, time.time() - start_time, error_message=str(e))

    async def run_reality_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ" + "="*50)
        print("üöÄ KITTYCORE 3.0 - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–°–¢–ò")  
        print("üöÄ" + "="*50)
        print("‚ùå –ù–ï–¢ –ú–û–ö–û–í | ‚úÖ –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
        print()
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        tests = [
            self.test_enhanced_web_search,
            self.test_enhanced_web_scraping, 
            self.test_api_request,
            self.test_code_execution,
            self.test_super_system_tool,
            self.test_image_generation,
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
        total_start = time.time()
        for i, test_func in enumerate(tests, 1):
            print(f"{i}/{len(tests)} {test_func.__name__}")
            result = await test_func()
            self.results.append(result)
            
            status = "‚úÖ" if result.success else "‚ùå"
            time_str = f"{result.execution_time:.1f}—Å"
            print(f"    {status} {time_str}")
            
            if result.error_message:
                print(f"    ‚ö†Ô∏è {result.error_message[:50]}...")
            elif result.real_output:
                print(f"    üìä {result.real_output[:50]}...")
                
        total_time = time.time() - total_start
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful = sum(1 for r in self.results if r.success)
        success_rate = successful / len(self.results)
        
        print("\nüöÄ" + "="*50)
        print("üöÄ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ï–ê–õ–¨–ù–û–°–¢–ò")
        print("üöÄ" + "="*50)
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}/{len(self.results)} ({success_rate:.1%})")
        print(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å")
        print(f"   üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {total_time/len(self.results):.1f}—Å")
        
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.results:
            status = "‚úÖ" if result.success else "‚ùå"
            print(f"   {status} {result.tool_name:20} - {result.execution_time:.1f}—Å")
            
            if result.data_size > 0:
                print(f"      üìä –î–∞–Ω–Ω—ã—Ö: {result.data_size} –±–∞–π—Ç")
            if result.api_calls_made > 0:
                print(f"      üåê API –≤—ã–∑–æ–≤–æ–≤: {result.api_calls_made}")
            if result.files_created > 0:
                print(f"      üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {result.files_created}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        if success_rate >= 0.8:
            print(f"\nüèÜ KITTYCORE 3.0: –û–¢–õ–ò–ß–ù–ê–Ø –†–ï–ê–õ–¨–ù–û–°–¢–¨!")
        elif success_rate >= 0.6:
            print(f"\nüëç KITTYCORE 3.0: –•–û–†–û–®–ê–Ø –†–ï–ê–õ–¨–ù–û–°–¢–¨")
        else:
            print(f"\n‚ö†Ô∏è KITTYCORE 3.0: –ù–£–ñ–ù–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
            
        print(f"\nüí° –†–ï–í–û–õ–Æ–¶–ò–Ø: –ù–∏–∫–∞–∫–∏—Ö –º–æ–∫–æ–≤ - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üöÄ")
        
        return {
            "success_rate": success_rate,
            "successful_tests": successful,
            "total_tests": len(self.results),
            "total_time": total_time,
            "results": self.results
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = ToolRealityTester()
    
    try:
        results = await tester.run_reality_tests()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = Path("reality_test_results.json")
        with open(results_file, "w", encoding="utf-8") as f:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            serializable_results = []
            for r in results["results"]:
                serializable_results.append({
                    "tool_name": r.tool_name,
                    "success": r.success,
                    "execution_time": r.execution_time,
                    "real_output": r.real_output,
                    "error_message": r.error_message,
                    "data_size": r.data_size,
                    "api_calls_made": r.api_calls_made,
                    "files_created": r.files_created
                })
            
            json.dump({
                "success_rate": results["success_rate"],
                "successful_tests": results["successful_tests"],
                "total_tests": results["total_tests"],
                "total_time": results["total_time"],
                "results": serializable_results
            }, f, indent=2, ensure_ascii=False)
            
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        import shutil
        try:
            shutil.rmtree(tester.temp_dir)
        except:
            pass

if __name__ == "__main__":
    asyncio.run(main()) 