"""
üß† –°–ò–°–¢–ï–ú–ê –ù–ê–ö–û–ü–õ–ï–ù–ò–Ø –ó–ù–ê–ù–ò–ô –ê–ì–ï–ù–¢–û–í
–ê–≥–µ–Ω—Ç—ã —É—á–∞—Ç—Å—è –æ—Ç –æ—à–∏–±–æ–∫ –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç –æ–ø—ã—Ç –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
"""

import json
import asyncio
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
from pathlib import Path

from loguru import logger

@dataclass
class LearningEntry:
    """–ó–∞–ø–∏—Å—å –æ–± –æ–±—É—á–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
    timestamp: str
    task_description: str
    attempt_number: int
    score_before: float
    score_after: float
    error_patterns: List[str]
    successful_actions: List[str]
    failed_actions: List[str]
    feedback_received: str
    tools_used: List[str]
    lesson_learned: str

@dataclass
class AgentKnowledge:
    """–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞"""
    agent_id: str
    total_attempts: int
    successful_patterns: List[str]
    error_patterns: List[str]
    tool_preferences: Dict[str, int]  # tool_name -> success_count
    lessons_learned: List[str]
    last_updated: str

class AgentLearningSystem:
    """–°–∏—Å—Ç–µ–º–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, vault_path: str = "obsidian_vault"):
        self.vault_path = Path(vault_path)
        self.knowledge_dir = self.vault_path / "knowledge"
        self.knowledge_dir.mkdir(parents=True, exist_ok=True)
        
        # –ö—ç—à –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤
        self.agent_knowledge: Dict[str, AgentKnowledge] = {}
        
    async def record_learning(
        self,
        agent_id: str,
        task_description: str,
        attempt_number: int,
        score_before: float,
        score_after: float,
        error_patterns: List[str],
        successful_actions: List[str],
        failed_actions: List[str],
        feedback_received: str,
        tools_used: List[str]
    ) -> str:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–ø—ã—Ç –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–∫
        lesson_learned = await self._extract_lesson(
            error_patterns, successful_actions, failed_actions, feedback_received
        )
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
        entry = LearningEntry(
            timestamp=datetime.now().isoformat(),
            task_description=task_description,
            attempt_number=attempt_number,
            score_before=score_before,
            score_after=score_after,
            error_patterns=error_patterns,
            successful_actions=successful_actions,
            failed_actions=failed_actions,
            feedback_received=feedback_received,
            tools_used=tools_used,
            lesson_learned=lesson_learned
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞
        await self._update_agent_knowledge(agent_id, entry)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Obsidian vault
        await self._save_learning_entry(agent_id, entry)
        
        logger.info(f"üß† –ê–≥–µ–Ω—Ç {agent_id} –∏–∑—É—á–∏–ª —É—Ä–æ–∫: {lesson_learned}")
        
        return lesson_learned
    
    async def get_agent_knowledge(self, agent_id: str) -> AgentKnowledge:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        
        if agent_id not in self.agent_knowledge:
            await self._load_agent_knowledge(agent_id)
        
        return self.agent_knowledge.get(agent_id, AgentKnowledge(
            agent_id=agent_id,
            total_attempts=0,
            successful_patterns=[],
            error_patterns=[],
            tool_preferences={},
            lessons_learned=[],
            last_updated=datetime.now().isoformat()
        ))
    
    async def get_improvement_suggestions(
        self, 
        agent_id: str, 
        current_task: str,
        current_errors: List[str]
    ) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π"""
        
        knowledge = await self.get_agent_knowledge(agent_id)
        suggestions = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
        for error in current_errors:
            for known_error in knowledge.error_patterns:
                if self._similarity(error, known_error) > 0.7:
                    suggestions.append(f"‚ö†Ô∏è –ò–∑–±–µ–≥–∞–π –æ—à–∏–±–∫–∏: {known_error}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern in knowledge.successful_patterns[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
            suggestions.append(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π —É—Å–ø–µ—à–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ª—É—á—à–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        best_tools = sorted(
            knowledge.tool_preferences.items(), 
            key=lambda x: x[1], 
            reverse=True
        )[:3]
        
        for tool, success_count in best_tools:
            if success_count > 1:
                suggestions.append(f"üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool} (—É—Å–ø–µ—Ö–æ–≤: {success_count})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫–∏
        for lesson in knowledge.lessons_learned[-2:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —É—Ä–æ–∫–∞
            suggestions.append(f"üìö –ü–æ–º–Ω–∏ —É—Ä–æ–∫: {lesson}")
        
        return suggestions
    
    async def _extract_lesson(
        self,
        error_patterns: List[str],
        successful_actions: List[str],
        failed_actions: List[str],
        feedback: str
    ) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —É—Ä–æ–∫ –∏–∑ –æ–ø—ã—Ç–∞"""
        
        if successful_actions and not error_patterns:
            return f"–£—Å–ø–µ—à–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {', '.join(successful_actions[:2])}"
        
        if error_patterns and failed_actions:
            return f"–ò–∑–±–µ–≥–∞—Ç—å: {error_patterns[0]} –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ {failed_actions[0]}"
        
        if "file_manager" in feedback and "—Å–æ–∑–¥–∞—Ç—å" in feedback.lower():
            return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å file_manager –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"
        
        if "code_generator" in feedback and "–∫–æ–¥" in feedback.lower():
            return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å code_generator –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞"
        
        return "–°–ª–µ–¥–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–∑ —Ñ–∏–¥–±–µ–∫–∞"
    
    async def _update_agent_knowledge(self, agent_id: str, entry: LearningEntry):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞"""
        
        knowledge = await self.get_agent_knowledge(agent_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        knowledge.total_attempts += 1
        knowledge.last_updated = datetime.now().isoformat()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if entry.score_after > entry.score_before:
            knowledge.successful_patterns.extend(entry.successful_actions)
            knowledge.successful_patterns = list(set(knowledge.successful_patterns))[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
        
        knowledge.error_patterns.extend(entry.error_patterns)
        knowledge.error_patterns = list(set(knowledge.error_patterns))[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        for tool in entry.tools_used:
            if entry.score_after > entry.score_before:
                knowledge.tool_preferences[tool] = knowledge.tool_preferences.get(tool, 0) + 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫
        if entry.lesson_learned not in knowledge.lessons_learned:
            knowledge.lessons_learned.append(entry.lesson_learned)
            knowledge.lessons_learned = knowledge.lessons_learned[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É—Ä–æ–∫–æ–≤
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        self.agent_knowledge[agent_id] = knowledge
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        await self._save_agent_knowledge(agent_id, knowledge)
    
    async def _save_learning_entry(self, agent_id: str, entry: LearningEntry):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –æ–±—É—á–µ–Ω–∏—è –≤ Obsidian vault"""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"learning_{agent_id}_{timestamp}.md"
        filepath = self.knowledge_dir / filename
        
        content = f"""# üß† –û–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ {agent_id}

## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø—ã—Ç–∫–µ
- **–ó–∞–¥–∞—á–∞**: {entry.task_description}
- **–ü–æ–ø—ã—Ç–∫–∞**: #{entry.attempt_number}
- **–í—Ä–µ–º—è**: {entry.timestamp}

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
- **–û—Ü–µ–Ω–∫–∞ –¥–æ**: {entry.score_before}/1.0
- **–û—Ü–µ–Ω–∫–∞ –ø–æ—Å–ª–µ**: {entry.score_after}/1.0
- **–ü—Ä–æ–≥—Ä–µ—Å—Å**: {'+' if entry.score_after > entry.score_before else '-'}{abs(entry.score_after - entry.score_before):.1f}

## –ê–Ω–∞–ª–∏–∑ –¥–µ–π—Å—Ç–≤–∏–π

### ‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
{chr(10).join(f"- {action}" for action in entry.successful_actions) if entry.successful_actions else "- –ù–µ—Ç"}

### ‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
{chr(10).join(f"- {action}" for action in entry.failed_actions) if entry.failed_actions else "- –ù–µ—Ç"}

### ‚ö†Ô∏è –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫
{chr(10).join(f"- {error}" for error in entry.error_patterns) if entry.error_patterns else "- –ù–µ—Ç"}

## üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
{', '.join(entry.tools_used) if entry.tools_used else "–ù–µ—Ç"}

## üìù –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∏–¥–±–µ–∫
```
{entry.feedback_received}
```

## üìö –£—Ä–æ–∫
**{entry.lesson_learned}**

---
*–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ AgentLearningSystem*
"""
        
        filepath.write_text(content, encoding='utf-8')
    
    async def _save_agent_knowledge(self, agent_id: str, knowledge: AgentKnowledge):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞"""
        
        filepath = self.knowledge_dir / f"knowledge_{agent_id}.json"
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(asdict(knowledge), f, ensure_ascii=False, indent=2)
    
    async def _load_agent_knowledge(self, agent_id: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞"""
        
        filepath = self.knowledge_dir / f"knowledge_{agent_id}.json"
        
        if filepath.exists():
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.agent_knowledge[agent_id] = AgentKnowledge(**data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞ {agent_id}: {e}")
    
    def _similarity(self, text1: str, text2: str) -> float:
        """–ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤"""
        words1 = set(text1.lower().split())
        words2 = set(text2.lower().split())
        
        if not words1 or not words2:
            return 0.0
        
        intersection = words1.intersection(words2)
        union = words1.union(words2)
        
        return len(intersection) / len(union)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
learning_system = AgentLearningSystem() 