#!/usr/bin/env python3
"""
üéØ –†–ï–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û! SmartValidator - LLM-–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω–µ—á–Ω–æ–π –ø–æ–ª—å–∑—ã
===============================================================

–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ –ø—Ä–æ–º–ø—Ç—ã –∏ LLM-–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—à–∞—é—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É:
- –ë–´–õ–û: –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω—ã, –æ—Ç—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è success: True
- –°–¢–ê–õ–û: SmartValidator —á–µ—Å—Ç–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç "–ø–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ —á—Ç–æ –ø—Ä–æ—Å–∏–ª?"
"""

import asyncio
import os
import tempfile
import time
from agents.smart_validator import SmartValidator


def print_header():
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("\n" + "üéØ" * 25)
    print("üéØ –†–ï–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û! SmartValidator")
    print("üéØ" * 25)
    print("–ü—Ä–æ–º–ø—Ç—ã —Ä–µ—à–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—É –∫–∞—á–µ—Å—Ç–≤–∞!")
    print("LLM-–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω–µ—á–Ω–æ–π –ø–æ–ª—å–∑—ã —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    print()


async def demonstrate_solution():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    
    print_header()
    
    validator = SmartValidator()
    
    print("üìã –ü–†–û–ë–õ–ï–ú–ê:")
    print("   KittyCore —Å–æ–∑–¥–∞–≤–∞–ª –ø–ª–∞–Ω—ã –≤–º–µ—Å—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("   –°–∏—Å—Ç–µ–º–∞: success: True, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ø–æ–ª—É—á–∞–ª —Ç–æ —á—Ç–æ –ø—Ä–æ—Å–∏–ª")
    print()
    
    print("üí° –†–ï–®–ï–ù–ò–ï:")
    print("   SmartValidator —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏: '–ü–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ —á—Ç–æ –ø—Ä–æ—Å–∏–ª?'")
    print("   LLM –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–Ω–µ—á–Ω—É—é –ø–æ–ª—å–∑—É –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print()
    
    # –î–µ–º–æ –∏–∑ 4 –ø—Ä–∏–º–µ—Ä–æ–≤
    test_cases = [
        {
            "name": "–ü–ª–∞–Ω —Å–∞–π—Ç–∞ (–ü–õ–û–•–û)",
            "task": "–°–æ–∑–¥–∞–π —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏",
            "content": """# –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞

1. HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
2. CSS —Å—Ç–∏–ª–∏  
3. –ö–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—Ç—è—Ç

–ü—Ä–∏–º–µ—Ä: <h1>–ö–æ—Ç—è—Ç–∞</h1>""",
            "expected": "–ù–ï –í–ê–õ–ò–î–ù–û"
        },
        {
            "name": "–†–∞–±–æ—á–∏–π HTML (–•–û–†–û–®–û)",
            "task": "–°–æ–∑–¥–∞–π —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏", 
            "content": """<!DOCTYPE html>
<html><head><title>–ö–æ—Ç—è—Ç–∞</title></head>
<body>
<h1>üê± –°–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏</h1>
<div>–†—ã–∂–∏–π –∫–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫</div>
<div>–°–µ—Ä–∞—è –∫–æ—à–µ—á–∫–∞ –ú—É—Å—è</div>
</body></html>""",
            "expected": "–í–ê–õ–ò–î–ù–û"
        },
        {
            "name": "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ (–ü–õ–û–•–û)",
            "task": "–ø–æ—Å—á–∏—Ç–∞–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —á—ë—Ä–Ω–æ–π –¥—ã—Ä—ã",
            "content": """–ö–∞–∫ —Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å:

–ü–ª–æ—Ç–Ω–æ—Å—Ç—å = –º–∞—Å—Å–∞ / –æ–±—ä—ë–º
–î–ª—è —á–µ—Ä–Ω–æ–π –¥—ã—Ä—ã –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –º–∞—Å—Å—É –∏ —Ä–∞–¥–∏—É—Å
–§–æ—Ä–º—É–ª–∞: œÅ = M/V""",
            "expected": "–ù–ï –í–ê–õ–ò–î–ù–û"  
        },
        {
            "name": "–ì–æ—Ç–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç (–•–û–†–û–®–û)",
            "task": "–ø–æ—Å—á–∏—Ç–∞–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —á—ë—Ä–Ω–æ–π –¥—ã—Ä—ã",
            "content": """–†–ê–°–ß–ï–¢ –ü–õ–û–¢–ù–û–°–¢–ò –ß–ï–†–ù–û–ô –î–´–†–´

–î–∞–Ω–æ: M = 10 —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –º–∞—Å—Å = 1.989√ó10¬≥¬π –∫–≥
–†–∞–¥–∏—É—Å: rs = 29,534 –º
–û–±—ä—ë–º: V = 1.077√ó10¬π‚Å¥ –º¬≥

–†–ï–ó–£–õ–¨–¢–ê–¢: œÅ = 1.85√ó10¬π‚Å∑ –∫–≥/–º¬≥""",
            "expected": "–í–ê–õ–ò–î–ù–û"
        }
    ]
    
    results = []
    
    with tempfile.TemporaryDirectory() as temp_dir:
        
        for i, case in enumerate(test_cases, 1):
            print(f"üß™ –¢–ï–°–¢ {i}: {case['name']}")
            print("-" * 50)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
            test_file = os.path.join(temp_dir, f"test_{i}.txt")
            with open(test_file, 'w', encoding='utf-8') as f:
                f.write(case['content'])
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏—Å—Ç–µ–º—ã
            system_result = {
                "success": True,
                "message": "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
            }
            
            print(f"üìù –ó–∞–¥–∞—á–∞: {case['task']}")
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞: {system_result['message']}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            validation_start = time.time()
            validation = await validator.validate_result(
                original_task=case['task'],
                result=system_result,
                created_files=[test_file]
            )
            validation_time = time.time() - validation_start
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            actual = "–í–ê–õ–ò–î–ù–û" if validation.is_valid else "–ù–ï –í–ê–õ–ò–î–ù–û"
            correct = actual == case['expected']
            
            print(f"üß† SmartValidator ({validation_time:.1f}—Å): {actual}")
            print(f"üìä –û—Ü–µ–Ω–∫–∞: {validation.score:.1f}/1.0")
            print(f"üéØ {'‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û' if correct else '‚ùå –û–®–ò–ë–ö–ê'} (–æ–∂–∏–¥–∞–ª–æ—Å—å {case['expected']})")
            
            results.append({
                'name': case['name'],
                'expected': case['expected'],
                'actual': actual,
                'correct': correct,
                'score': validation.score
            })
            
            if validation.user_benefit:
                benefit_short = validation.user_benefit[:80] + "..." if len(validation.user_benefit) > 80 else validation.user_benefit
                print(f"üí∞ –ü–æ–ª—å–∑–∞: {benefit_short}")
            
            print()
    
    # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 50)
    
    correct_count = sum(1 for r in results if r['correct'])
    total_count = len(results)
    
    for result in results:
        status = "‚úÖ" if result['correct'] else "‚ùå"
        print(f"{status} {result['actual']:>11} | {result['score']:.1f}/1.0 | {result['name']}")
    
    print(f"\nüéØ –¢–û–ß–ù–û–°–¢–¨ –í–ê–õ–ò–î–ê–¶–ò–ò: {correct_count}/{total_count} ({100*correct_count/total_count:.0f}%)")
    
    if correct_count == total_count:
        print("\nüöÄ –†–ï–®–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
        print("   SmartValidator –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç –ø–ª–∞–Ω—ã –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print("   LLM-–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω–µ—á–Ω–æ–π –ø–æ–ª—å–∑—ã —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∫–∞—á–µ—Å—Ç–≤–∞")
        print("   –ü—Ä–æ–º–ø—Ç—ã '–ü–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ —á—Ç–æ –ø—Ä–æ—Å–∏–ª?' —Ä–∞–±–æ—Ç–∞—é—Ç!")
    
    print("\nüí° –ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢:")
    print("   1. SmartValidator —á–∏—Ç–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("   2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏—Å—Ç–µ–º—ã")  
    print("   3. –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç LLM: '–ü–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ —á—Ç–æ –ø—Ä–æ—Å–∏–ª?'")
    print("   4. LLM –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–Ω–µ—á–Ω—É—é –ø–æ–ª—å–∑—É –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print("   5. –í—ã–¥–∞–µ—Ç —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É: –ø–ª–∞–Ω (0.3/1.0) vs —Ä–µ–∑—É–ª—å—Ç–∞—Ç (0.9/1.0)")
    
    print(f"\nüéâ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê –ü–†–û–ú–ü–¢–ê–ú–ò –ò LLM-–í–ê–õ–ò–î–ê–¶–ò–ï–ô!")


if __name__ == "__main__":
    asyncio.run(demonstrate_solution())