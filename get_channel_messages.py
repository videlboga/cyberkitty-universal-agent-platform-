#!/usr/bin/env python3
"""
üì∫ –ü–û–õ–£–ß–ï–ù–ò–ï ID –°–û–û–ë–©–ï–ù–ò–ô –ò–ó –ö–ê–ù–ê–õ–ê ONTOBOT
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö ID –≤–∏–¥–µ–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ -1002614708769
"""

import asyncio
import json
from datetime import datetime
import aiohttp
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("logs/channel_messages.log", 
          format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | CHANNEL | {message}",
          level="INFO", rotation="10 MB", compression="zip")

class ChannelMessageGetter:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–∑ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Telegram Bot API."""
    
    def __init__(self, bot_token: str = None):
        self.bot_token = bot_token or self._get_bot_token()
        self.channel_id = "-1002614708769"
        
        logger.info("üì∫ Channel Message Getter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    def _get_bot_token(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞."""
        import os
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if token:
            return token
            
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ .env
        try:
            with open('.env', 'r') as f:
                for line in f:
                    if line.startswith('TELEGRAM_BOT_TOKEN='):
                        return line.split('=', 1)[1].strip().strip('"\'')
        except FileNotFoundError:
            pass
            
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ KittyCore
        return self._get_token_from_db()
    
    def _get_token_from_db(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ KittyCore API."""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ KittyCore –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é
        return None
    
    async def get_channel_updates(self, limit: int = 10) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞."""
        
        if not self.bot_token:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {"error": "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
        
        logger.info(f"üåê –ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {self.channel_id}")
        
        try:
            async with aiohttp.ClientSession() as session:
                params = {
                    "limit": limit,
                    "timeout": 10
                }
                
                async with session.get(url, params=params) as response:
                    result = await response.json()
                    
                    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(result.get('result', []))}")
                    
                    return result
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
            return {"error": str(e)}
    
    async def get_chat_info(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ."""
        
        if not self.bot_token:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {"error": "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        url = f"https://api.telegram.org/bot{self.bot_token}/getChat"
        
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {self.channel_id}")
        
        try:
            async with aiohttp.ClientSession() as session:
                params = {
                    "chat_id": self.channel_id
                }
                
                async with session.get(url, params=params) as response:
                    result = await response.json()
                    
                    logger.info(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ –ø–æ–ª—É—á–µ–Ω–∞: {result.get('ok', False)}")
                    
                    return result
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {str(e)}")
            return {"error": str(e)}
    
    async def send_test_message(self, text: str = "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ") -> dict:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞."""
        
        if not self.bot_token:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {"error": "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª {self.channel_id}")
        
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    "chat_id": self.channel_id,
                    "text": text
                }
                
                async with session.post(url, json=data) as response:
                    result = await response.json()
                    
                    if result.get('ok'):
                        message_id = result.get('result', {}).get('message_id')
                        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: {message_id}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('description')}")
                    
                    return result
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return {"error": str(e)}
    
    async def check_channel_access(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π."""
        
        logger.info("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É")
        
        results = {
            "channel_info": await self.get_chat_info(),
            "updates": await self.get_channel_updates(),
            "timestamp": datetime.now().isoformat()
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        channel_accessible = results["channel_info"].get("ok", False)
        updates_available = results["updates"].get("ok", False)
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        logger.info(f"   –ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω: {channel_accessible}")
        logger.info(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã: {updates_available}")
        
        if channel_accessible:
            chat_info = results["channel_info"].get("result", {})
            logger.info(f"   –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {chat_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            logger.info(f"   –¢–∏–ø: {chat_info.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        if updates_available:
            updates = results["updates"].get("result", [])
            logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(updates)}")
            
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
            channel_messages = []
            for update in updates:
                message = update.get("message", {})
                chat = message.get("chat", {})
                if str(chat.get("id")) == self.channel_id:
                    channel_messages.append({
                        "message_id": message.get("message_id"),
                        "text": message.get("text", "")[:100],
                        "date": message.get("date"),
                        "content_type": self._get_content_type(message)
                    })
            
            logger.info(f"   –°–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞: {len(channel_messages)}")
            results["channel_messages"] = channel_messages
        
        return results
    
    def _get_content_type(self, message: dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if message.get("video"):
            return "video"
        elif message.get("photo"):
            return "photo"
        elif message.get("document"):
            return "document"
        elif message.get("text"):
            return "text"
        else:
            return "other"
    
    async def manual_message_check(self) -> dict:
        """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö ID —Å–æ–æ–±—â–µ–Ω–∏–π."""
        
        logger.info("üîç –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID –æ—Ç 1 –¥–æ 10
        message_results = {}
        
        for msg_id in range(1, 11):
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                url = f"https://api.telegram.org/bot{self.bot_token}/forwardMessage"
                
                async with aiohttp.ClientSession() as session:
                    data = {
                        "chat_id": self.channel_id,  # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ —Ç–æ—Ç –∂–µ –∫–∞–Ω–∞–ª
                        "from_chat_id": self.channel_id,
                        "message_id": msg_id
                    }
                    
                    async with session.post(url, json=data) as response:
                        result = await response.json()
                        
                        if result.get('ok'):
                            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                            message_results[msg_id] = "exists"
                        else:
                            logger.info(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {result.get('description', '')}")
                            message_results[msg_id] = "not_found"
                            
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {str(e)}")
                message_results[msg_id] = f"error: {str(e)}"
        
        return message_results

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞."""
    
    print("üì∫ –ü–û–õ–£–ß–ï–ù–ò–ï ID –°–û–û–ë–©–ï–ù–ò–ô –ò–ó –ö–ê–ù–ê–õ–ê ONTOBOT")
    print("="*60)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot_token = input("ü§ñ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è): ").strip()
    
    if not bot_token:
        bot_token = None
    
    getter = ChannelMessageGetter(bot_token)
    
    if not getter.bot_token:
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω.")
        return
    
    print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {getter.bot_token[:10]}...")
    print(f"üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª: {getter.channel_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
    print("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É...")
    access_results = await getter.check_channel_access()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("logs/channel_access_results.json", "w", encoding="utf-8") as f:
        json.dump(access_results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ logs/channel_access_results.json")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –ø—Ä–æ–±—É–µ–º —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    if not access_results.get("channel_info", {}).get("ok"):
        print("\nüîç –ü—Ä–æ–±—É–µ–º —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π...")
        manual_results = await getter.manual_message_check()
        
        with open("logs/manual_message_check.json", "w", encoding="utf-8") as f:
            json.dump(manual_results, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ logs/manual_message_check.json")
    
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(main()) 