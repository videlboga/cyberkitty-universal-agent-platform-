"""
üß≠ OrchestratorAgent - –ì–ª–∞–≤–Ω—ã–π –¥–∏—Ä–∏–∂—ë—Ä KittyCore 3.0

–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∞–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É 
–≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–∏—Ö—Å—è –∞–≥–µ–Ω—Ç–æ–≤.

–≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –¥–∏—Ä–∏–∂—ë—Ä–∞ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import json
import logging
import time
from datetime import datetime
from dataclasses import dataclass, asdict
from typing import Dict, List, Any, Optional, Union
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏, –≥—Ä–∞—Ñ-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –∏ –±–æ–≥–∞—Ç—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
from ..memory import CollectiveMemory
from .graph_workflow import WorkflowGraph, WorkflowPlanner as GraphWorkflowPlanner, NodeStatus
from .self_improvement import SelfLearningEngine
from .rich_reporting import get_rich_reporter, ReportLevel
from .shared_chat import SharedChat
from ..agents.tool_adapter_agent import ToolAdapterAgent
from ..obsidian_integration import ObsidianAdapter, ObsidianConfig

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
from .agent_metrics import get_metrics_collector, MetricsCollector, TaskStatus
from ..memory.vector_memory import get_vector_store, VectorMemoryStore
from .quality_controller import QualityController

logger = logging.getLogger(__name__)

# === –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß ===

class TaskAnalyzer:
    """–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á —Å –ø–æ–º–æ—â—å—é LLM"""
    
    def __init__(self):
        self.complexity_cache = {}
        self.llm = self._init_llm()
    
    def _init_llm(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π LLM –º–æ–¥—É–ª—å
            from ..llm import get_llm_provider, LLMConfig
            config = LLMConfig()
            return get_llm_provider(config=config)
        except Exception as e:
            raise Exception(f"‚ùå LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω! –û—à–∏–±–∫–∞: {e}")
    
    def analyze_task_complexity(self, task: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é LLM"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if task in self.complexity_cache:
            return self.complexity_cache[task]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:

–ó–∞–¥–∞—á–∞: {task}

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "complexity": "simple|medium|complex",
    "estimated_agents": —á–∏—Å–ª–æ_–∞–≥–µ–Ω—Ç–æ–≤,
    "requires_planning": true/false,
    "requires_coordination": true/false,
    "reasoning": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ",
    "estimated_time": –º–∏–Ω—É—Ç—ã
}}

–ö—Ä–∏—Ç–µ—Ä–∏–∏:
- simple: –æ–¥–Ω–∞ –ø—Ä–æ—Å—Ç–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, 1 –∞–≥–µ–Ω—Ç
- medium: –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, 2-3 –∞–≥–µ–Ω—Ç–∞  
- complex: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, 3-4 –∞–≥–µ–Ω—Ç–∞
"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç LLM
            response = self.llm.complete(analysis_prompt)
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            analysis = self._parse_llm_analysis(response, task)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.complexity_cache[task] = analysis
            
            logger.info(f"üìä LLM –∞–Ω–∞–ª–∏–∑: {analysis['complexity']} ({analysis['estimated_agents']} –∞–≥–µ–Ω—Ç–æ–≤)")
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞: {e}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π —ç–≤—Ä–∏—Å—Ç–∏–∫–µ
            return self._fallback_analysis(task)
    
    def _parse_llm_analysis(self, response: str, task: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ LLM"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
            import json
            import re
            
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                data = json.loads(json_match.group(0))
                
                return {
                    "task": task,
                    "complexity": data.get("complexity", "medium"),
                    "estimated_agents": data.get("estimated_agents", 2),
                    "word_count": len(task.split()),
                    "requires_planning": data.get("requires_planning", True),
                    "requires_coordination": data.get("requires_coordination", True),
                    "reasoning": data.get("reasoning", "LLM –∞–Ω–∞–ª–∏–∑"),
                    "estimated_time": data.get("estimated_time", 10)
                }
        except:
            pass
            
        # –ï—Å–ª–∏ JSON –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        response_lower = response.lower()
        
        if "simple" in response_lower:
            complexity = "simple"
            agents = 1
        elif "complex" in response_lower:
            complexity = "complex" 
            agents = 4
        else:
            complexity = "medium"
            agents = 3
            
        return {
            "task": task,
            "complexity": complexity,
            "estimated_agents": agents,
            "word_count": len(task.split()),
            "requires_planning": complexity != "simple",
            "requires_coordination": agents > 1,
            "reasoning": "LLM —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
            "estimated_time": agents * 5
        }
    
    def _fallback_analysis(self, task: str) -> Dict[str, Any]:
        """Fallback –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ LLM"""
        word_count = len(task.split())
        
        if word_count < 10:
            complexity = "simple"
            agent_count = 1
        elif word_count < 30:
            complexity = "medium"  
            agent_count = 3
        else:
            complexity = "complex"
            agent_count = 4
        
        return {
            "task": task,
            "complexity": complexity,
            "estimated_agents": agent_count,
            "word_count": word_count,
            "requires_planning": complexity != "simple",
            "requires_coordination": agent_count > 1,
            "reasoning": "Fallback —ç–≤—Ä–∏—Å—Ç–∏–∫–∞",
            "estimated_time": agent_count * 5
        }

class TaskDecomposer:
    """–†–∞–∑–±–∏–≤–∫–∞ –∑–∞–¥–∞—á –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é LLM"""
    
    def __init__(self):
        self.llm = self._init_llm()
        
    def _init_llm(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π LLM –º–æ–¥—É–ª—å
            from ..llm import get_llm_provider, LLMConfig
            config = LLMConfig()
            return get_llm_provider(config=config)
        except Exception as e:
            raise Exception(f"‚ùå LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω! –û—à–∏–±–∫–∞: {e}")
    
    def decompose_task(self, task: str, complexity: str) -> List[Dict[str, Any]]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é LLM"""
        
        if complexity == "simple":
            return [{"id": "single_task", "description": task, "type": "execute"}]
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
        decompose_prompt = f"""
–†–∞–∑–±–µ–π –∑–∞–¥–∞—á—É –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏:

–ó–∞–¥–∞—á–∞: {task}
–°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity}

–°–æ–∑–¥–∞–π 3-4 –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
[
    {{"id": "step1", "description": "–æ–ø–∏—Å–∞–Ω–∏–µ", "type": "analysis|planning|execution|verification"}},
    {{"id": "step2", "description": "–æ–ø–∏—Å–∞–Ω–∏–µ", "type": "analysis|planning|execution|verification"}},
    ...
]

–¢–∏–ø—ã –ø–æ–¥–∑–∞–¥–∞—á:
- analysis: –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
- planning: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∞, –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤
- execution: –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, —Å–æ–∑–¥–∞–Ω–∏–µ
- verification: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–ö–∞–∂–¥–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏ –≤—ã–ø–æ–ª–Ω–∏–º–æ–π.
"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é –æ—Ç LLM
            response = self.llm.complete(decompose_prompt)
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            subtasks = self._parse_llm_decomposition(response, task, complexity)
            
            logger.info(f"üîÑ LLM –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è: {len(subtasks)} –ø–æ–¥–∑–∞–¥–∞—á")
            return subtasks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏: {e}")
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
            return self._fallback_decomposition(task, complexity)
    
    def _parse_llm_decomposition(self, response: str, task: str, complexity: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –æ—Ç LLM"""
        try:
            import json
            import re
            
            # –ò—â–µ–º JSON –º–∞—Å—Å–∏–≤ –≤ –æ—Ç–≤–µ—Ç–µ
            json_match = re.search(r'\[.*\]', response, re.DOTALL)
            if json_match:
                data = json.loads(json_match.group(0))
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                subtasks = []
                for i, item in enumerate(data):
                    if isinstance(item, dict) and "description" in item:
                        subtasks.append({
                            "id": item.get("id", f"step_{i+1}"),
                            "description": item["description"],
                            "type": item.get("type", "execution")
                        })
                
                if subtasks:
                    return subtasks
                    
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        
        # –ï—Å–ª–∏ JSON –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        return self._parse_text_decomposition(response, task, complexity)
    
    def _parse_text_decomposition(self, response: str, task: str, complexity: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏"""
        lines = response.split('\n')
        subtasks = []
        
        for i, line in enumerate(lines):
            line = line.strip()
            if line and (line.startswith(str(i+1)) or line.startswith('-') or line.startswith('‚Ä¢')):
                # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –Ω–æ–º–µ—Ä–æ–≤ –∏ –º–∞—Ä–∫–µ—Ä–æ–≤
                description = re.sub(r'^[\d\-‚Ä¢\.\)\s]+', '', line).strip()
                if description:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                    desc_lower = description.lower()
                    if any(word in desc_lower for word in ["–∞–Ω–∞–ª–∏–∑", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω", "–∏–∑—É—á–µ–Ω"]):
                        task_type = "analysis"
                    elif any(word in desc_lower for word in ["–ø–ª–∞–Ω", "—Å—Ç—Ä–∞—Ç–µ–≥", "–ø–æ–¥—Ö–æ–¥"]):
                        task_type = "planning"
                    elif any(word in desc_lower for word in ["–ø—Ä–æ–≤–µ—Ä–∫", "—Ç–µ—Å—Ç", "–≤–∞–ª–∏–¥"]):
                        task_type = "verification"
                    else:
                        task_type = "execution"
                    
                    subtasks.append({
                        "id": f"step_{len(subtasks)+1}",
                        "description": description,
                        "type": task_type
                    })
        
        if subtasks:
            return subtasks
            
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ø–∞—Ä—Å–∏–ª–æ—Å—å, fallback
        return self._fallback_decomposition(task, complexity)
    
    def _fallback_decomposition(self, task: str, complexity: str) -> List[Dict[str, Any]]:
        """Fallback –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è"""
        if complexity == "medium":
            return [
                {"id": "analyze", "description": f"–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏: {task}", "type": "analysis"},
                {"id": "execute", "description": f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {task}", "type": "execution"},
                {"id": "verify", "description": f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {task}", "type": "verification"}
            ]
        else:  # complex
            return [
                {"id": "analyze", "description": f"–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏: {task}", "type": "analysis"},
                {"id": "plan", "description": f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è: {task}", "type": "planning"},
                {"id": "execute", "description": f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {task}", "type": "execution"},
                {"id": "verify", "description": f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {task}", "type": "verification"}
            ]

class ComplexityEvaluator:
    """–û—Ü–µ–Ω–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    
    def evaluate_resources(self, subtasks: List[Dict]) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã"""
        return {
            "subtask_count": len(subtasks),
            "estimated_time": len(subtasks) * 5,  # 5 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á—É
            "memory_required": "medium",
            "tools_required": ["basic", "communication"],
            "human_intervention_likely": len(subtasks) > 2
        }

class SkillsetMatcher:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤"""
    
    def match_skills(self, subtasks: List[Dict]) -> Dict[str, List[str]]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–≤—ã–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–∑–∞–¥–∞—á–∏"""
        skill_map = {
            "analysis": ["analysis", "research", "critical_thinking"],
            "planning": ["planning", "organization", "strategy"],
            "execution": ["coding", "implementation", "problem_solving"],
            "verification": ["testing", "validation", "quality_control"]
        }
        
        result = {}
        for subtask in subtasks:
            task_type = subtask.get("type", "general")
            result[subtask["id"]] = skill_map.get(task_type, ["general"])
        
        return result 

# === –°–û–ó–î–ê–ù–ò–ï –ê–ì–ï–ù–¢–û–í ===

class AgentSpawner:
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–¥ –∑–∞–¥–∞—á–∏"""
    
    def __init__(self):
        self.spawned_agents = {}
    
    def spawn_agent_for_task(self, subtask: Dict, skills: List[str]) -> Any:
        """–°–æ–∑–¥–∞—ë—Ç IntellectualAgent –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–∑–∞–¥–∞—á–∏"""
        from ..agents.intellectual_agent import IntellectualAgent
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –∞–≥–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
        role_map = {
            "analysis": "analyst", 
            "planning": "planner",
            "execution": "developer", 
            "verification": "tester"
        }
        
        role = role_map.get(subtask.get("type"), "generalist")
        agent_role = f"{role}_agent"
        
        # –°–æ–∑–¥–∞—ë–º IntellectualAgent –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ Agent
        agent = IntellectualAgent(agent_role, subtask)
        agent_id = f"{role}_{subtask['id']}"
        self.spawned_agents[agent_id] = agent
        
        logger.info(f"ü§ñ –°–æ–∑–¥–∞–Ω IntellectualAgent {agent_id} –¥–ª—è –∑–∞–¥–∞—á–∏: {subtask['description'][:50]}...")
        return agent

class TeamComposer:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def compose_team(self, agents: Dict[str, Any]) -> Dict[str, Any]:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        return {
            "team_id": f"team_{int(time.time())}",
            "agents": agents,
            "team_size": len(agents),
            "roles": list(agents.keys()),
            "created_at": datetime.now().isoformat()
        }

# === –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ü–†–û–¶–ï–°–°–û–í ===

class WorkflowPlanner:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    
    def plan_workflow(self, subtasks: List[Dict], team: Dict) -> Dict[str, Any]:
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å"""
        workflow = {
            "workflow_id": f"workflow_{int(time.time())}",
            "steps": [],
            "dependencies": {},
            "estimated_duration": len(subtasks) * 5
        }
        
        for i, subtask in enumerate(subtasks):
            step = {
                "step_id": subtask["id"],
                "description": subtask["description"],
                "assigned_agent": list(team["agents"].keys())[i % len(team["agents"])],
                "estimated_time": 5,
                "dependencies": [subtasks[i-1]["id"]] if i > 0 else []
            }
            workflow["steps"].append(step)
        
        return workflow 

# === –û–†–ö–ï–°–¢–†–ê–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===

class ExecutionManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        self.execution_status = {}
    
    async def execute_workflow(self, workflow: Dict, team: Dict) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏"""
        execution_id = f"exec_{int(time.time())}"
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º IntellectualAgent –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from ..agents.intellectual_agent import IntellectualAgent
        
        results = {
            "execution_id": execution_id,
            "workflow_id": workflow["workflow_id"],
            "start_time": datetime.now().isoformat(),
            "steps_completed": 0,
            "step_results": {},
            "status": "running",
            "files_created": []
        }
        
        for step in workflow["steps"]:
            logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —à–∞–≥: {step['description']}")
            
            try:
                # –ù–∞—Ö–æ–¥–∏–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
                agent_id = step["assigned_agent"]
                
                if agent_id in team["agents"]:
                    # –°–æ–∑–¥–∞—ë–º —Ä–∞–±–æ—á–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
                    subtask = {
                        "description": step["description"],
                        "type": "general"
                    }
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
                    agent_info = team["agents"][agent_id]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞ (–æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å)
                    if hasattr(agent_info, 'role'):
                        agent_role = agent_info.role
                    elif isinstance(agent_info, dict):
                        agent_role = agent_info.get("role", agent_id)
                    else:
                        agent_role = str(agent_info)
                    
                    # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                    working_agent = IntellectualAgent(agent_role, subtask)
                    execution_result = await working_agent.execute_task()
                    
                    step_result = execution_result["output"]
                    step_status = execution_result["status"]
                    
                    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    if "files_created" in execution_result:
                        results["files_created"].extend(execution_result["files_created"])
                
                else:
                    step_result = "‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    step_status = "failed"
                
                results["step_results"][step["step_id"]] = {
                    "result": step_result,
                    "status": step_status,
                    "timestamp": datetime.now().isoformat(),
                    "agent": agent_id,
                    "files_created": execution_result.get("files_created", [])
                }
                
                results["steps_completed"] += 1
                print(f"‚úÖ –®–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {step['description']}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ {step['step_id']}: {e}")
                
                results["step_results"][step["step_id"]] = {
                    "result": f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    "status": "failed",
                    "error": str(e),
                    "timestamp": datetime.now().isoformat(),
                    "agent": step.get("assigned_agent", "unknown")
                }
                
                results["steps_completed"] += 1
        
        results["status"] = "completed"
        results["end_time"] = datetime.now().isoformat()
        
        return results

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===

@dataclass
class OrchestratorConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    orchestrator_id: str = "main_orchestrator"
    max_agents: int = 10
    timeout: int = 300
    enable_human_intervention: bool = True
    log_level: str = "INFO"
    report_level: ReportLevel = ReportLevel.DETAILED  # –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤
    # Obsidian –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    enable_obsidian: bool = False
    obsidian_vault_path: str = "./obsidian_vault"
    # –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    enable_metrics: bool = True           # –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–æ–≤
    enable_vector_memory: bool = True     # –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞
    enable_quality_control: bool = True   # –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞
    vector_memory_path: str = "./vector_memory"
    metrics_storage_path: str = "./metrics_storage" 

# === –ì–õ–ê–í–ù–´–ô –û–†–ö–ï–°–¢–†–ê–¢–û–† ===

class OrchestratorAgent:
    """
    üß≠ –ì–ª–∞–≤–Ω—ã–π –¥–∏—Ä–∏–∂—ë—Ä KittyCore 3.0
    
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–∏—Ö—Å—è –∞–≥–µ–Ω—Ç–æ–≤:
    - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    - –°–æ–∑–¥–∞—ë—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–¥ –∑–∞–¥–∞—á–∏  
    - –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    - –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤
    """
    
    def __init__(self, config: OrchestratorConfig = None):
        self.config = config or OrchestratorConfig()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.task_analyzer = TaskAnalyzer()
        self.task_decomposer = TaskDecomposer()
        self.complexity_evaluator = ComplexityEvaluator()
        self.skillset_matcher = SkillsetMatcher()
        
        self.agent_spawner = AgentSpawner()
        self.team_composer = TeamComposer()
        
        self.workflow_planner = WorkflowPlanner()
        self.execution_manager = ExecutionManager()
        
        # –ì—Ä–∞—Ñ-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ 
        self.graph_planner = GraphWorkflowPlanner()
        
        # –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è (–ù–û–í–û–ï!)
        self.self_improvement = SelfLearningEngine()
        
        # –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å 
        self.collective_memory = CollectiveMemory(self.config.orchestrator_id)
        
        # –£–º–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä (–ù–û–í–û–ï!)
        self.smart_validator = None  # –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–∏–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
        
        # –°–∏—Å—Ç–µ–º–∞ –±–æ–≥–∞—Ç—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ (–ù–û–í–û–ï!)
        self.rich_reporter = get_rich_reporter()
        self.rich_reporter.report_level = self.config.report_level
        
        # SharedChat –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤ (–ù–û–í–û–ï!)
        self.shared_chat = SharedChat(
            team_id=f"team_{self.config.orchestrator_id}",
            collective_memory=self.collective_memory
        )
        
        # ToolAdapterAgent –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ (–ù–û–í–û–ï!)
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π LLM –º–æ–¥—É–ª—å
            from ..llm import get_llm_provider
            llm_provider = get_llm_provider()
            self.tool_adapter = ToolAdapterAgent(llm_provider)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ToolAdapterAgent: {e}")
            self.tool_adapter = None
        
        # Obsidian –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–ù–û–í–û–ï!)
        self.obsidian_adapter = None
        if self.config.enable_obsidian:
            try:
                obsidian_config = ObsidianConfig(
                    vault_path=self.config.obsidian_vault_path,
                    notes_folder="KittyCore",
                    auto_link=True,
                    execute_code=True
                )
                self.obsidian_adapter = ObsidianAdapter(obsidian_config)
                logger.info(f"üìù Obsidian –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {self.config.obsidian_vault_path}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ObsidianAdapter: {e}")
                self.obsidian_adapter = None
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —á–∞—Ç–µ –∫–∞–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
        self.shared_chat.register_agent(
            agent_id=self.config.orchestrator_id,
            agent_role="Orchestrator",
            is_coordinator=True
        )
        
        # === –ù–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –°–ò–°–¢–ï–ú–´ –ú–ï–¢–†–ò–ö –ò –ö–ê–ß–ï–°–¢–í–ê ===
        
        # –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–æ–≤
        self.metrics_collector = None
        if self.config.enable_metrics:
            self.metrics_collector = get_metrics_collector()
            logger.info("üìä –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ 
        self.vector_store = None
        if self.config.enable_vector_memory:
            self.vector_store = get_vector_store()
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å vault
            if self.config.enable_obsidian and Path(self.config.obsidian_vault_path).exists():
                asyncio.create_task(self._initialize_vector_memory())
            logger.info("üîç –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞
        self.quality_controller = None
        if self.config.enable_quality_control:
            self.quality_controller = QualityController()
            logger.info("üéØ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.tasks_processed = 0
        self.agents_created = 0
        self.workflows_executed = 0
        
        logger.info(f"üß≠ OrchestratorAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.config.orchestrator_id}")
        logger.info(f"üí¨ SharedChat –≥–æ—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: team_{self.config.orchestrator_id}")
    
    async def _initialize_vector_memory(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏ —Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π Obsidian vault"""
        try:
            vault_path = Path(self.config.obsidian_vault_path)
            if vault_path.exists() and self.vector_store:
                indexed_count = await self.vector_store.index_documents(vault_path)
                logger.info(f"üîç –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {indexed_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ Obsidian vault")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ Obsidian vault: {e}")
    
    async def _execute_with_coordination(self, workflow: Dict, team: Dict, original_task: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ SharedChat"""
        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            await self.shared_chat.broadcast_update(
                sender_id=self.config.orchestrator_id,
                update="–ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á",
                task_info={'workflow_steps': len(workflow['steps'])}
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ExecutionManager
            execution_result = await self.execution_manager.execute_workflow(workflow, team)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º ToolAdapter
            if self.tool_adapter and 'errors' in execution_result:
                for error in execution_result.get('errors', []):
                    if '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç' in error.lower() or 'unknown tool' in error.lower():
                        # –ü—ã—Ç–∞–µ–º—Å—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                        adapter_result = await self.tool_adapter.execute_task(
                            f"–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—à–∏–±–∫–∏: {error}"
                        )
                        
                        if adapter_result.get('success'):
                            await self.shared_chat.send_message(
                                sender_id=self.config.orchestrator_id,
                                content=f"üîß –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {adapter_result.get('available_tool', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}",
                                message_type="coordination"
                            )
                            
                            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            self.tasks_processed += 1  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—é
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            success_count = len([r for r in execution_result.get('results', []) if r.get('success', False)])
            total_count = len(execution_result.get('results', []))
            
            await self.shared_chat.broadcast_update(
                sender_id=self.config.orchestrator_id,
                update=f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count}/{total_count} —É—Å–ø–µ—à–Ω–æ",
                task_info={
                    'success_rate': success_count / total_count if total_count > 0 else 0,
                    'original_task': original_task
                }
            )
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–º–µ—Ç–∫–∏ –≤ Obsidian –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if self.obsidian_adapter:
                await self._create_obsidian_notes(original_task, workflow, team, execution_result)
            
            return execution_result
            
        except Exception as e:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
            await self.shared_chat.send_message(
                sender_id=self.config.orchestrator_id,
                content=f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}",
                message_type="coordination"
            )
            raise e
    
    async def solve_task(self, task: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        üéØ –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ - —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —Å–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â—É—é—Å—è —Å–∏—Å—Ç–µ–º—É
        
        Args:
            task: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        """
        logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task[:100]}...")
        start_time = datetime.now()
        
        # –ù–ê–ß–ò–ù–ê–ï–ú –ë–û–ì–ê–¢–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï
        execution_id = f"task_{int(time.time() * 1000000)}"
        task_execution = self.rich_reporter.start_task_execution(
            execution_id, task, context.get('user_id') if context else None
        )
        
        try:
            # 1. –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß–ò
            complexity_analysis = self.task_analyzer.analyze_task_complexity(task)
            
            # –õ–û–ì–ò–†–£–ï–ú –ê–ù–ê–õ–ò–ó
            self.rich_reporter.log_task_analysis(execution_id, complexity_analysis)
            logger.info(f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity_analysis['complexity']}, –∞–≥–µ–Ω—Ç–æ–≤: {complexity_analysis['estimated_agents']}")
            
            # 2. –î–ï–ö–û–ú–ü–û–ó–ò–¶–ò–Ø
            subtasks = self.task_decomposer.decompose_task(task, complexity_analysis["complexity"])
            resources = self.complexity_evaluator.evaluate_resources(subtasks)
            skills = self.skillset_matcher.match_skills(subtasks)
            
            # –õ–û–ì–ò–†–£–ï–ú –î–ï–ö–û–ú–ü–û–ó–ò–¶–ò–Æ
            self.rich_reporter.log_task_decomposition(execution_id, subtasks)
            
            logger.info(f"üîÑ –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è: {len(subtasks)} –ø–æ–¥–∑–∞–¥–∞—á")
            
            # 3. –°–û–ó–î–ê–ù–ò–ï –ê–ì–ï–ù–¢–û–í –ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í –ß–ê–¢–ï
            agents = {}
            
            # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            await self.shared_chat.send_message(
                sender_id=self.config.orchestrator_id,
                content=f"üéØ –§–æ—Ä–º–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–¥–∞—á–∏: {task[:100]}...",
                message_type="coordination"
            )
            
            for subtask in subtasks:
                required_skills = skills[subtask["id"]]
                agent = self.agent_spawner.spawn_agent_for_task(subtask, required_skills)
                agent_id = f"agent_{subtask['id']}"
                agents[agent_id] = agent
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ –≤ —á–∞—Ç–µ
                self.shared_chat.register_agent(
                    agent_id=agent_id,
                    agent_role=getattr(agent, 'role', 'worker')
                )
                
                # === –ù–ê–ß–ò–ù–ê–ï–ú –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ú–ï–¢–†–ò–ö –ê–ì–ï–ù–¢–ê ===
                if self.metrics_collector:
                    task_metric = self.metrics_collector.start_task_tracking(
                        task_id=f"{execution_id}_{subtask['id']}",
                        agent_id=agent_id,
                        task_description=subtask["description"]
                    )
                    logger.debug(f"üìä –ù–∞—á–∞—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è {agent_id}")
                
                # –õ–û–ì–ò–†–£–ï–ú –°–û–ó–î–ê–ù–ò–ï –ê–ì–ï–ù–¢–ê
                self.rich_reporter.log_agent_created(execution_id, {
                    "agent_id": agent_id,
                    "type": type(agent).__name__,
                    "role": getattr(agent, 'role', 'worker'),
                    "subtask_id": subtask["id"],
                    "required_skills": required_skills
                })
            
            self.agents_created += len(agents)
            
            # –°–æ–æ–±—â–∞–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
            await self.shared_chat.send_message(
                sender_id=self.config.orchestrator_id,
                content=f"üë• –ö–æ–º–∞–Ω–¥–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞: {len(agents)} –∞–≥–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ",
                message_type="coordination"
            )
            
            # 4. –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î–´
            team = self.team_composer.compose_team(agents)
            logger.info(f"üë• –ö–æ–º–∞–Ω–¥–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞: {team['team_size']} –∞–≥–µ–Ω—Ç–æ–≤")
            
            # 5. –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï WORKFLOW
            workflow = self.workflow_planner.plan_workflow(subtasks, team)
            logger.info(f"üìã Workflow –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω: {len(workflow['steps'])} —à–∞–≥–æ–≤")
            
            # 5.5. –°–û–ó–î–ê–ù–ò–ï –ì–†–ê–§–ê –ü–†–û–¶–ï–°–°–ê (–ù–û–í–û–ï!)
            workflow_graph = self.graph_planner.create_workflow_from_subtasks(subtasks, agents)
            logger.info(f"üìä –ì—Ä–∞—Ñ —Å–æ–∑–¥–∞–Ω: {len(workflow_graph.nodes)} —É–∑–ª–æ–≤, {len(workflow_graph.edges)} —Å–≤—è–∑–µ–π")
            
            # 5.7. –ö–û–û–†–î–ò–ù–ê–¶–ò–Ø –ó–ê–î–ê–ß –ß–ï–†–ï–ó –ß–ê–¢
            task_assignments = {
                agent_id: subtasks[i]['description'] 
                for i, agent_id in enumerate(agents.keys()) if i < len(subtasks)
            }
            
            await self.shared_chat.coordinate_task(
                coordinator_id=self.config.orchestrator_id,
                task=task[:100],
                assignments=task_assignments
            )
            
            # 6. –í–´–ü–û–õ–ù–ï–ù–ò–ï –° –ö–û–û–†–î–ò–ù–ê–¶–ò–ï–ô
            execution_result = await self._execute_with_coordination(workflow, team, task)
            
            # 6.5. –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (–ù–û–í–û–ï!)
            validation_result = await self._validate_execution_result(task, execution_result)
            
            # 6.5. –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ö–û–õ–õ–ï–ö–¢–ò–í–ù–û–ô –ü–ê–ú–Ø–¢–ò (–ù–û–í–û–ï!)
            await self.collective_memory.store(
                f"–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task[:100]}", 
                "orchestrator", 
                ["–∑–∞–¥–∞—á–∞", "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", complexity_analysis["complexity"]]
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            for agent_id, agent in team["agents"].items():
                await self.collective_memory.store(
                    f"–ê–≥–µ–Ω—Ç {agent_id} —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –∑–∞–¥–∞—á–µ: {task[:50]}",
                    agent_id,
                    ["–∞–≥–µ–Ω—Ç", "—É—á–∞—Å—Ç–∏–µ", agent.role if hasattr(agent, 'role') else "unknown"]
                )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–∏—Å—Ç–µ–º—É —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è (–ù–û–í–û–ï!)
                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                temp_duration = (datetime.now() - start_time).total_seconds()
                await self.self_improvement.record_agent_execution(
                    agent_id=agent_id,
                    task_id=task[:100],  
                    input_data={"task": task, "context": context or {}},
                    output=execution_result,
                    execution_time=temp_duration,
                    success=True,  # –°—á–∏—Ç–∞–µ–º –∑–∞–¥–∞—á—É —É—Å–ø–µ—à–Ω–æ–π
                    quality_score=validation_result.get("quality_score", 0.5)
                )
            
            # 7. –†–ï–ó–£–õ–¨–¢–ê–¢
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            self.tasks_processed += 1
            self.workflows_executed += 1
            
            result = {
                "task": task,
                "status": "completed",
                "duration": duration,
                "complexity_analysis": complexity_analysis,
                "subtasks": subtasks,
                "team": team,
                "workflow": workflow,
                "workflow_graph": {
                    "id": workflow_graph.workflow_id,
                    "nodes_count": len(workflow_graph.nodes),
                    "edges_count": len(workflow_graph.edges),
                    "mermaid": workflow_graph.generate_mermaid()
                },
                "execution": execution_result,
                "validation": validation_result,
                "statistics": self.get_statistics(),
                "collective_memory_stats": self.collective_memory.get_team_stats(),
                "self_improvement_report": self.self_improvement.get_system_overview(),
                "coordination": {
                    "team_status": self.shared_chat.get_team_status(),
                    "chat_messages": len(self.shared_chat.messages),
                    "conversation_summary": self.shared_chat.get_conversation_summary(20),
                    "tool_adapter_stats": self.tool_adapter.get_adaptation_stats() if self.tool_adapter else None
                },
                "completed_at": end_time.isoformat()
            }
            
            # –ó–ê–í–ï–†–®–ê–ï–ú –ë–û–ì–ê–¢–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï
            self.rich_reporter.finish_task_execution(
                execution_id, 
                result.get("execution", {}).get("final_result", "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"),
                quality_score=validation_result.get("quality_score"),
                validation_results=validation_result
            )
            
            # –°–û–•–†–ê–ù–Ø–ï–ú –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢
            detailed_report = self.rich_reporter.generate_detailed_report(execution_id)
            report_filename = f"workspace/task_reports/detailed_report_{execution_id}.md"
            
            try:
                Path("workspace/task_reports").mkdir(parents=True, exist_ok=True)
                with open(report_filename, 'w', encoding='utf-8') as f:
                    f.write(detailed_report)
                logger.info(f"üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_filename}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç: {e}")
            
            # –î–û–ë–ê–í–õ–Ø–ï–ú –ö–†–ê–¢–ö–ò–ô –û–¢–ß–Å–¢ –í –†–ï–ó–£–õ–¨–¢–ê–¢
            result["rich_reporting"] = {
                "execution_id": execution_id,
                "detailed_report_file": report_filename,
                "ui_summary": self.rich_reporter.generate_ui_summary(execution_id)
            }
            
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {duration:.2f}—Å, —Å–æ–∑–¥–∞–Ω–æ {len(agents)} –∞–≥–µ–Ω—Ç–æ–≤")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            
            # –ó–ê–í–ï–†–®–ê–ï–ú –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –° –û–®–ò–ë–ö–û–ô
            self.rich_reporter.finish_task_execution(
                execution_id, 
                "–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π",
                error=str(e)
            )
            
            # –°–û–•–†–ê–ù–Ø–ï–ú –û–¢–ß–Å–¢ –û–ë –û–®–ò–ë–ö–ï
            try:
                error_report = self.rich_reporter.generate_detailed_report(execution_id)
                error_filename = f"workspace/task_reports/error_report_{execution_id}.md"
                Path("workspace/task_reports").mkdir(parents=True, exist_ok=True)
                with open(error_filename, 'w', encoding='utf-8') as f:
                    f.write(error_report)
                logger.info(f"üìÑ –û—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {error_filename}")
            except Exception as report_error:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–µ: {report_error}")
            
            return {
                "task": task,
                "status": "error",
                "error": str(e),
                "completed_at": datetime.now().isoformat(),
                "rich_reporting": {
                    "execution_id": execution_id,
                    "ui_summary": self.rich_reporter.generate_ui_summary(execution_id)
                }
            }
    
    async def execute_task(self, task: str, context: Dict[str, Any] = None) -> Any:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É (–ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è solve_task –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏)"""
        result = await self.solve_task(task, context)
        return result.get("result", result.get("execution", {}).get("final_result", "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"))
    
    async def _validate_execution_result(self, original_task: str, execution_result: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ QualityController"""
        try:
            # === –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–†–û–õ–Ø –ö–ê–ß–ï–°–¢–í–ê ===
            if self.quality_controller:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                created_files = execution_result.get("files_created", [])
                artifact_paths = [Path(f) for f in created_files if f]
                
                # –ü—Ä–æ–≤–æ–¥–∏–º –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
                quality_assessment = await self.quality_controller.assess_quality(
                    task_description=original_task,
                    result=execution_result,
                    artifacts_paths=artifact_paths
                )
                
                logger.info(f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞: {quality_assessment.verdict} ({quality_assessment.overall_score:.2f}/1.0)")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                if quality_assessment.fatal_issues:
                    logger.warning(f"üíÄ –§–∞—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞:")
                    for issue in quality_assessment.fatal_issues:
                        logger.warning(f"  - {issue}")
                
                # === –ó–ê–í–ï–†–®–ê–ï–ú –ú–ï–¢–†–ò–ö–ò –ê–ì–ï–ù–¢–û–í ===
                if self.metrics_collector:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
                    for check in quality_assessment.checks:
                        if hasattr(check, 'criteria'):
                            agent_id = f"agent_{check.criteria.value}"  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                            if agent_id in execution_result.get('agent_results', {}):
                                self.metrics_collector.complete_task(
                                    task_id=f"task_{int(time.time())}_{agent_id}",
                                    quality_score=quality_assessment.overall_score,
                                    artifacts_created=len(artifact_paths),
                                    errors=quality_assessment.fatal_issues,
                                    tools_used=execution_result.get('tools_used', []),
                                    llm_calls=execution_result.get('llm_calls', 0)
                                )
                
                return {
                    "validation_passed": quality_assessment.is_acceptable(),
                    "quality_score": quality_assessment.overall_score,
                    "user_benefit": f"–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_assessment.overall_score:.2f}/1.0",
                    "issues": quality_assessment.fatal_issues,
                    "recommendations": getattr(quality_assessment, 'improvement_suggestions', []),
                    "verdict": quality_assessment.verdict,
                    "quality_details": {
                        "passed_checks": quality_assessment.passed_checks,
                        "total_checks": quality_assessment.total_checks,
                        "check_results": [
                            {
                                "criteria": check.criteria.value,
                                "passed": check.passed,
                                "score": check.score,
                                "message": check.message
                            } for check in quality_assessment.checks
                        ]
                    }
                }
            
            else:
                # Fallback –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                return {
                    "validation_passed": True,
                    "quality_score": 0.5,
                    "user_benefit": "–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    "issues": ["QualityController –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"],
                    "recommendations": [],
                    "verdict": "‚ö†Ô∏è –ë–ï–ó –ö–û–ù–¢–†–û–õ–Ø –ö–ê–ß–ï–°–¢–í–ê"
                }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return {
                "validation_passed": False,
                "quality_score": 0.0,
                "user_benefit": "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞",
                "issues": [f"–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"],
                "recommendations": ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞"],
                "verdict": "‚ùå –û–®–ò–ë–ö–ê –ö–û–ù–¢–†–û–õ–Ø –ö–ê–ß–ï–°–¢–í–ê"
            }
    
    async def _create_obsidian_notes(self, task: str, workflow: Dict, team: Dict, execution_result: Dict[str, Any]):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –≤ Obsidian –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ"""
        try:
            task_id = f"TASK-{int(time.time())}"
            
            # 1. –°–æ–∑–¥–∞—ë–º –∑–∞–º–µ—Ç–∫—É –∑–∞–¥–∞—á–∏
            task_data = {
                "title": task[:100],
                "description": task,
                "status": "completed" if execution_result.get("success", False) else "failed",
                "priority": "normal",
                "complexity": workflow.get("complexity", "medium"),
                "assigned_agents": list(team.keys()),
                "type": "orchestrator_task"
            }
            
            task_note = await self.obsidian_adapter.create_task_note(task_id, task_data)
            logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –≤ Obsidian: {task_note}")
            
            # 2. –°–æ–∑–¥–∞—ë–º –∑–∞–º–µ—Ç–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
            for agent_id, agent in team.items():
                agent_data = {
                    "description": f"–ê–≥–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏ {agent_id}",
                    "type": getattr(agent, 'agent_type', 'worker'),
                    "capabilities": getattr(agent, 'capabilities', ['general']),
                    "tasks_completed": 1,
                    "success_rate": 100.0 if execution_result.get("success", False) else 0.0
                }
                
                agent_note = await self.obsidian_adapter.create_agent_note(agent_id, agent_data)
                logger.debug(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ –∞–≥–µ–Ω—Ç–∞ –≤ Obsidian: {agent_note}")
            
            # 3. –°–æ–∑–¥–∞—ë–º –∑–∞–º–µ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_data = {
                "title": f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task[:50]}",
                "description": "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤",
                "status": "completed" if execution_result.get("success", False) else "failed",
                "success": execution_result.get("success", False),
                "quality_score": execution_result.get("quality_score", 0.0),
                "execution_time": execution_result.get("duration", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "output": str(execution_result.get("final_result", "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"))[:1000],
                "files": execution_result.get("files_created", []),
                "reviewed_by": "OrchestratorAgent",
                "review_status": "completed"
            }
            
            result_note = await self.obsidian_adapter.create_result_note(task_id, "Team", result_data)
            logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Obsidian: {result_note}")
            
            # 4. –°–æ–∑–¥–∞—ë–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
            report_data = {
                "title": f"–û—Ç—á—ë—Ç: {task[:50]}",
                "summary": f"–ö–æ–º–∞–Ω–¥–∞ –∏–∑ {len(team)} –∞–≥–µ–Ω—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏–ª–∞ –∑–∞–¥–∞—á—É",
                "overall_success": execution_result.get("success", False),
                "overall_quality": execution_result.get("quality_score", 0.0),
                "execution_time": execution_result.get("duration", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "agents": [{"name": agent_id, "tasks_completed": 1, "success_rate": 100} for agent_id in team.keys()],
                "conclusions": "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–∏—Ö—Å—è –∞–≥–µ–Ω—Ç–æ–≤ KittyCore 3.0"
            }
            
            report_note = await self.obsidian_adapter.create_report_note(task_id, report_data)
            logger.info(f"üìù –°–æ–∑–¥–∞–Ω –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –≤ Obsidian: {report_note}")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –≤ Obsidian: {e}")

    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        stats = {
            "tasks_processed": self.tasks_processed,
            "agents_created": self.agents_created,
            "workflows_executed": self.workflows_executed,
            "config": asdict(self.config)
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Obsidian –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.obsidian_adapter:
            stats["obsidian"] = {
                "enabled": True,
                "vault_path": self.config.obsidian_vault_path
            }
        
        return stats

# === –£–î–û–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def create_orchestrator(config: OrchestratorConfig = None) -> OrchestratorAgent:
    """–°–æ–∑–¥–∞—Ç—å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return OrchestratorAgent(config)

async def solve_with_orchestrator(task: str, **kwargs) -> Dict[str, Any]:
    """–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä"""
    orchestrator = create_orchestrator()
    return await orchestrator.solve_task(task, kwargs)

# === –ê–õ–ò–ê–°–´ –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
UnifiedKittyCoreEngine = OrchestratorAgent
UnifiedConfig = OrchestratorConfig

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    "OrchestratorAgent", "OrchestratorConfig",
    
    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    "TaskAnalyzer", "TaskDecomposer", "ComplexityEvaluator", "SkillsetMatcher",
    
    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
    "AgentSpawner", "TeamComposer",
    
    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    "WorkflowPlanner", "ExecutionManager",
    
    # –£—Ç–∏–ª–∏—Ç—ã
    "create_orchestrator", "solve_with_orchestrator",
    
    # –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    "UnifiedKittyCoreEngine", "UnifiedConfig"
] 