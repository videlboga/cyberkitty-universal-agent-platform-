#!/usr/bin/env python3
"""
üß† –†–ï–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ú–ù–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í - –ß–ê–°–¢–¨ 3

–†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
‚ùå –ù–ï–¢ –ú–û–ö–û–í - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚ùå –ù–ï–¢ f"{tool}: —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω"
‚ùå –ù–ï–¢ len(text) > 20 –≤–∞–ª–∏–¥–∞—Ü–∏–∏
‚úÖ –†–ï–ê–õ–¨–ù–´–ï AI –≤—ã–∑–æ–≤—ã
‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚úÖ –ó–ê–ü–ò–°–¨ –í –ü–ê–ú–Ø–¢–¨ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import asyncio
import time
import tempfile
import json
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass

@dataclass
class RealTestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    tool_name: str
    success: bool
    execution_time: float
    real_output: Optional[str] = None
    error_message: Optional[str] = None
    data_size: int = 0
    ai_calls_made: int = 0
    parameters_used: Dict[str, Any] = None

class SmartToolsRealityTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —É–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.temp_dir = Path(tempfile.mkdtemp(prefix="kittycore_smart_reality_"))
        self.results: List[RealTestResult] = []
        self.memory_records = []  # –î–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ø–∞–º—è—Ç—å
        
    async def test_ai_integration_tool(self) -> RealTestResult:
        """–†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("üß† –¢–µ—Å—Ç–∏—Ä—É—é ai_integration_tool...")
        start_time = time.time()
        
        try:
            from kittycore.tools import DEFAULT_TOOLS
            tool = DEFAULT_TOOLS.get_tool("ai_integration_tool")
            
            if not tool:
                return RealTestResult("ai_integration_tool", False, 0, error_message="Tool not found")
            
            # –†–ï–ê–õ–¨–ù–´–ô AI –≤—ã–∑–æ–≤ - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π  
            result = await tool.execute(
                action="list_models"
            )
            execution_time = time.time() - start_time
            
            # –°–¢–†–û–ì–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è AI –¥–∞–Ω–Ω—ã—Ö
            success = False
            data_size = 0
            real_output = "No AI data"
            ai_calls_made = 0
            
            if result and hasattr(result, 'success') and result.success:
                if hasattr(result, 'data') and result.data:
                    data_str = str(result.data)
                    data_size = len(data_str)
                    real_output = data_str[:100]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –†–ï–ê–õ–¨–ù–´–ô AI –æ—Ç–≤–µ—Ç —Å –º–æ–¥–µ–ª—è–º–∏
                    success = (
                        data_size > 50 and
                        ("model" in data_str.lower() or 
                         "openrouter" in data_str.lower() or
                         "category" in data_str.lower()) and
                        not ("—É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω" in data_str.lower())
                    )
                    
                    if success:
                        ai_calls_made = 1
                        # –ó–ê–ü–ò–°–´–í–ê–ï–ú –í –ü–ê–ú–Ø–¢–¨ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                        self.memory_records.append({
                            "tool": "ai_integration_tool",
                            "working_action": "list_models",
                            "success": True,
                            "correct_params": {"action": "list_models"},
                            "note": "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ AI –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π action='list_models' –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
                        })
            
            return RealTestResult(
                "ai_integration_tool", 
                success, 
                execution_time,
                real_output=real_output,
                data_size=data_size,
                ai_calls_made=ai_calls_made,
                parameters_used={"action": "list_models"}
            )
            
        except Exception as e:
            # –ó–ê–ü–ò–°–´–í–ê–ï–ú –û–®–ò–ë–ö–£ –í –ü–ê–ú–Ø–¢–¨
            self.memory_records.append({
                "tool": "ai_integration_tool",
                "working_action": "list_models",
                "success": False,
                "error": str(e)[:100],
                "note": f"ai_integration_tool –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É: {str(e)[:100]}"
            })
            return RealTestResult("ai_integration_tool", False, time.time() - start_time, error_message=str(e)[:100])

    async def test_smart_function_tool(self) -> RealTestResult:
        """–†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç —É–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        print("üîß –¢–µ—Å—Ç–∏—Ä—É—é smart_function_tool...")
        start_time = time.time()
        
        try:
            from kittycore.tools import DEFAULT_TOOLS
            tool = DEFAULT_TOOLS.get_tool("smart_function_tool")
            
            if not tool:
                return RealTestResult("smart_function_tool", False, 0, error_message="Tool not found")
            
            # –†–ï–ê–õ–¨–ù–ê–Ø —É–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞
            result = await tool.execute(
                action="create_function",
                name="factorial",
                description="Calculate factorial of a number",
                code="def factorial(n): return 1 if n <= 1 else n * factorial(n-1)"
            )
            execution_time = time.time() - start_time
            
            # –°–¢–†–û–ì–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è —É–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            success = False
            real_output = "No function created"
            
            if result and hasattr(result, 'success') and result.success:
                if hasattr(result, 'data') and result.data:
                    data_str = str(result.data)
                    real_output = data_str[:100]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –†–ï–ê–õ–¨–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
                    success = (
                        ("factorial" in data_str.lower() or
                         "function" in data_str.lower() or
                         "created" in data_str.lower()) and
                        not ("—É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω" in data_str.lower())
                    )
                    
                    if success:
                        # –ó–ê–ü–ò–°–´–í–ê–ï–ú –í –ü–ê–ú–Ø–¢–¨ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                        self.memory_records.append({
                            "tool": "smart_function_tool",
                            "working_action": "create_function",
                            "success": True,
                            "correct_params": {
                                "action": "create_function",
                                "name": "string",
                                "description": "string", 
                                "code": "string"
                            },
                            "note": "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π action='create_function' —Å name, description, code"
                        })
            
            return RealTestResult(
                "smart_function_tool", 
                success, 
                execution_time,
                real_output=real_output,
                parameters_used={
                    "action": "create_function",
                    "name": "factorial",
                    "description": "Calculate factorial of a number",
                    "code": "def factorial(n): return 1 if n <= 1 else n * factorial(n-1)"
                }
            )
            
        except Exception as e:
            # –ó–ê–ü–ò–°–´–í–ê–ï–ú –û–®–ò–ë–ö–£ –í –ü–ê–ú–Ø–¢–¨
            self.memory_records.append({
                "tool": "smart_function_tool",
                "working_action": "create_function",
                "success": False,
                "error": str(e)[:100],
                "note": f"smart_function_tool –æ—à–∏–±–∫–∞ –ø—Ä–∏ create_function: {str(e)[:100]}"
            })
            return RealTestResult("smart_function_tool", False, time.time() - start_time, error_message=str(e)[:100])

    async def test_data_analysis_tool(self) -> RealTestResult:
        """–†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("üìä –¢–µ—Å—Ç–∏—Ä—É—é data_analysis_tool...")
        start_time = time.time()
        
        try:
            from kittycore.tools import DEFAULT_TOOLS
            tool = DEFAULT_TOOLS.get_tool("data_analysis_tool")
            
            if not tool:
                return RealTestResult("data_analysis_tool", False, 0, error_message="Tool not found")
            
            # –†–ï–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ - —Å–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            test_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
            
            result = await tool.execute(
                action="basic_statistics",
                data=test_data
            )
            execution_time = time.time() - start_time
            
            # –°–¢–†–û–ì–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            success = False
            real_output = "No analysis"
            
            if result and hasattr(result, 'success') and result.success:
                if hasattr(result, 'data') and result.data:
                    data_str = str(result.data)
                    real_output = data_str[:100]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –†–ï–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ (—Å—Ä–µ–¥–Ω–µ–µ = 5.5, —Å—É–º–º–∞ = 55)
                    success = (
                        ("5.5" in data_str or "mean" in data_str.lower() or
                         "55" in data_str or "sum" in data_str.lower()) and
                        not ("—É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω" in data_str.lower())
                    )
                    
                    if success:
                        # –ó–ê–ü–ò–°–´–í–ê–ï–ú –í –ü–ê–ú–Ø–¢–¨ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                        self.memory_records.append({
                            "tool": "data_analysis_tool",
                            "working_action": "basic_statistics",
                            "success": True,
                            "correct_params": {
                                "action": "basic_statistics",
                                "data": "array_of_numbers"
                            },
                            "note": "–î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π action='basic_statistics' —Å data=—Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª"
                        })
            
            return RealTestResult(
                "data_analysis_tool", 
                success, 
                execution_time,
                real_output=real_output,
                parameters_used={
                    "action": "basic_statistics",
                    "data": test_data
                }
            )
            
        except Exception as e:
            # –ó–ê–ü–ò–°–´–í–ê–ï–ú –û–®–ò–ë–ö–£ –í –ü–ê–ú–Ø–¢–¨
            self.memory_records.append({
                "tool": "data_analysis_tool",
                "working_action": "basic_statistics", 
                "success": False,
                "error": str(e)[:100],
                "note": f"data_analysis_tool –æ—à–∏–±–∫–∞ –ø—Ä–∏ basic_statistics: {str(e)[:100]}"
            })
            return RealTestResult("data_analysis_tool", False, time.time() - start_time, error_message=str(e)[:100])

    async def save_memory_records(self):
        """–°–û–•–†–ê–ù–Ø–ï–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–º—è—Ç—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        if not self.memory_records:
            return
            
        try:
            # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –ø–∞–º—è—Ç–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            memory_file = self.temp_dir / "tool_usage_memory.json"
            
            memory_data = {
                "timestamp": time.strftime('%Y-%m-%d %H:%M:%S'),
                "test_purpose": "–†–ï–ê–õ–¨–ù–û–ï —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                "total_tools_tested": len(self.results),
                "successful_tools": sum(1 for r in self.results if r.success),
                "tool_usage_guide": self.memory_records,
                "summary": {
                    "working_tools": [r.tool_name for r in self.results if r.success],
                    "broken_tools": [r.tool_name for r in self.results if not r.success],
                    "correct_parameters": {
                        record["tool"]: record.get("correct_params", {}) 
                        for record in self.memory_records 
                        if record.get("success", False)
                    }
                }
            }
            
            with open(memory_file, 'w', encoding='utf-8') as f:
                json.dump(memory_data, f, indent=2, ensure_ascii=False)
                
            print(f"\nüíæ –ü–ê–ú–Ø–¢–¨ –°–û–•–†–ê–ù–ï–ù–ê: {memory_file}")
            print(f"   üìù {len(self.memory_records)} –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")

    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        print("üß†" + "="*60)
        print("üß† KITTYCORE 3.0 - –†–ï–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ú–ù–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")  
        print("üß†" + "="*60)
        print("‚ùå –ù–ï–¢ –ú–û–ö–û–í | ‚úÖ –†–ï–ê–õ–¨–ù–´–ï AI –í–´–ó–û–í–´ | üß† –ó–ê–ü–ò–°–¨ –í –ü–ê–ú–Ø–¢–¨")
        print()
        
        # –¢–µ—Å—Ç 1: AI Integration
        result1 = await self.test_ai_integration_tool()
        self.results.append(result1)
        
        status1 = "‚úÖ" if result1.success else "‚ùå"
        print(f"1/3 ai_integration_tool   {status1} {result1.execution_time:.1f}—Å")
        
        if result1.error_message:
            print(f"    ‚ö†Ô∏è {result1.error_message}")
        elif result1.success:
            print(f"    üß† {result1.ai_calls_made} AI –≤—ã–∑–æ–≤–æ–≤, {result1.data_size} –±–∞–π—Ç")
        else:
            print(f"    ‚ùå {result1.real_output}")
        
        # –¢–µ—Å—Ç 2: Smart Function
        result2 = await self.test_smart_function_tool()
        self.results.append(result2)
        
        status2 = "‚úÖ" if result2.success else "‚ùå"
        print(f"2/3 smart_function_tool   {status2} {result2.execution_time:.1f}—Å")
        
        if result2.error_message:
            print(f"    ‚ö†Ô∏è {result2.error_message}")
        elif result2.success:
            print(f"    üîß –£–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print(f"    ‚ùå {result2.real_output}")
            
        # –¢–µ—Å—Ç 3: Data Analysis  
        result3 = await self.test_data_analysis_tool()
        self.results.append(result3)
        
        status3 = "‚úÖ" if result3.success else "‚ùå"
        print(f"3/3 data_analysis_tool    {status3} {result3.execution_time:.1f}—Å")
        
        if result3.error_message:
            print(f"    ‚ö†Ô∏è {result3.error_message}")
        elif result3.success:
            print(f"    üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω")
        else:
            print(f"    ‚ùå {result3.real_output}")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        await self.save_memory_records()
            
        # –ò—Ç–æ–≥–∏
        successful = sum(1 for r in self.results if r.success)
        success_rate = successful / len(self.results)
        total_ai_calls = sum(r.ai_calls_made for r in self.results)
        
        print(f"\nüß†" + "="*60)
        print(f"üß† –ò–¢–û–ì–ò –£–ú–ù–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
        print(f"üß†" + "="*60)
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}/{len(self.results)} ({success_rate:.1%})")
        print(f"   üß† AI –≤—ã–∑–æ–≤–æ–≤: {total_ai_calls}")
        print(f"   üíæ –ó–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç—å: {len(self.memory_records)}")
        
        if success_rate >= 0.8:
            print(f"\nüèÜ –£–ú–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´: –û–¢–õ–ò–ß–ù–ê–Ø –†–ï–ê–õ–¨–ù–û–°–¢–¨!")
        elif success_rate >= 0.6:
            print(f"\nüëç –£–ú–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´: –•–û–†–û–®–ê–Ø –†–ï–ê–õ–¨–ù–û–°–¢–¨")
        else:
            print(f"\n‚ö†Ô∏è –£–ú–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´: –ù–£–ñ–ù–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")

async def main():
    tester = SmartToolsRealityTester()
    
    try:
        await tester.run_tests()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        import shutil
        try:
            shutil.rmtree(tester.temp_dir)
        except:
            pass

if __name__ == "__main__":
    asyncio.run(main()) 