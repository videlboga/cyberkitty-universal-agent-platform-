// Universal Agent Platform - УПРОЩЕННАЯ АРХИТЕКТУРА  
// Принцип: ПРОСТОТА ПРЕВЫШЕ ВСЕГО!

// === АРХИТЕКТУРНЫЕ ПРИНЦИПЫ ===
// - Один SimpleScenarioEngine вместо множества движков
// - Простая система плагинов через BasePlugin  
// - Один API endpoint вместо множества
// - Минимум зависимостей и абстракций
// - Контекст передается явно между компонентами

// === ОСНОВНЫЕ КОМПОНЕНТЫ ===
// 1. SimpleScenarioEngine - единственный движок выполнения
// 2. BasePlugin - базовый класс для всех плагинов
// 3. Simple API - /simple/channels/{channel_id}/execute endpoint
// 4. Simple Dependencies - минимальная инициализация

// === ЛОГИРОВАНИЕ ===
// - Используй loguru для Python, JSON-формат логов
// - Все логи — только в папку logs/, с ротацией и сжатием
// - Логи движка: logs/engine.log
// - Логи плагинов: logs/plugins.log  
// - Логи ошибок: logs/errors.log
// - Логи API: logs/api.log

// === СТРУКТУРА ФАЙЛОВ ===
// app/core/simple_engine.py - главный движок
// app/core/base_plugin.py - базовый класс плагинов
// app/plugins/ - все плагины наследуют BasePlugin
// app/api/simple.py - упрощенный API
// app/dependencies.py - минимальные зависимости

// === ПРАВИЛА КОДА ===
// - Python: black, isort, flake8, docstrings Google-style
// - JS/TS: eslint, prettier, jsdoc
// - Покрытие тестами >80% (pytest)
// - Все тестовые логи — в logs/tests.log

// === ТЕСТИРОВАНИЕ ===
// - Unit тесты для SimpleScenarioEngine
// - Unit тесты для каждого плагина
// - Интеграционные тесты движка + плагины
// - E2E тесты реальных сценариев

// === ЗАПРЕЩЕНО ===
// - Создавать новые движки (только SimpleScenarioEngine)
// - Усложнять систему зависимостей
// - Создавать циклические зависимости  
// - Смешивать ответственность компонентов
// - Использовать старые движки (UnifiedEngine, ExtensibleEngine)

// === ПЛАГИНЫ ===
// - Все плагины наследуют BasePlugin
// - Метод register_handlers() возвращает Dict[str, Callable]  
// - Метод healthcheck() для проверки состояния
// - Плагины НЕ зависят друг от друга
// - TelegramPlugin - сообщения и callback_query
// - MongoPlugin - работа с базой данных
// - LLMPlugin - интеграция с ИИ
// - OrchestratorPlugin - переключение сценариев

// === СЦЕНАРИИ ===
// - JSON формат с полями: scenario_id, steps, initial_context
// - Шаги: {id, type, params, next_step}
// - Типы шагов: start, end, action, input, telegram_send_message
// - Переключение сценариев через switch_scenario шаг
// - Контекст сохраняется между переключениями

// === API ===
// - Только один endpoint: POST /simple/channels/{channel_id}/execute
// - Payload: {user_id?, chat_id?, scenario_id?, context?}
// - Response: {success, scenario_id, final_context, message}
// - Все ошибки возвращают 500 с описанием

// === БЕЗОПАСНОСТЬ ===
// - Все секреты только в .env
// - Валидация входных данных через Pydantic
// - Логирование подозрительной активности

// Всегда следуй этим правилам для создания простой и надежной системы! 