#!/usr/bin/env python3
"""
üß† –¢–ï–°–¢ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø A-MEM –ü–ê–ú–Ø–¢–ò

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫ A-MEM –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å:
1. –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞—á (–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞)
2. –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞—á–∏ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø—ã—Ç–∞)
3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ —É–ª—É—á—à–µ–Ω–∏–π
4. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π
"""

import asyncio
import sys
import time
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig
from loguru import logger

# –î–≤—É—Ö—Ñ–∞–∑–Ω—ã–π —Ç–µ—Å—Ç: —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –æ–ø—ã—Ç, –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º
PHASE_1_TASKS = [
    {
        "id": "web_basics_1",
        "task": "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        "category": "web_development",
        "skills": ["html", "css", "forms"],
        "quality": 0.7
    },
    {
        "id": "python_basics_1", 
        "task": "–ù–∞–ø–∏—Å–∞—Ç—å Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV —Ñ–∞–π–ª–∞",
        "category": "data_processing",
        "skills": ["python", "csv", "pandas"],
        "quality": 0.75
    },
    {
        "id": "api_basics_1",
        "task": "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π REST API —Å —Ç—Ä–µ–º—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏",
        "category": "backend",
        "skills": ["python", "flask", "api_design"],
        "quality": 0.8
    }
]

PHASE_2_TASKS = [
    {
        "id": "web_advanced_1",
        "task": "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ñ–æ—Ä–º –∏ AJAX",
        "category": "web_development", 
        "skills": ["html", "css", "javascript", "ajax"],
        "expected_insights": ["html", "css", "forms", "web_development"]
    },
    {
        "id": "python_advanced_1",
        "task": "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å Python –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª—å—à–∏—Ö CSV –¥–∞—Ç–∞—Å–µ—Ç–æ–≤",
        "category": "data_processing",
        "skills": ["python", "pandas", "numpy", "optimization"],
        "expected_insights": ["python", "csv", "pandas", "data_processing"]
    },
    {
        "id": "api_advanced_1", 
        "task": "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö",
        "category": "backend",
        "skills": ["python", "flask", "database", "auth"],
        "expected_insights": ["python", "flask", "api_design", "backend"]
    }
]

async def test_amem_memory_utilization():
    """üß† –¢–µ—Å—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π A-MEM –ø–∞–º—è—Ç–∏"""
    print("üöÄ === –¢–ï–°–¢ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø A-MEM –ü–ê–ú–Ø–¢–ò ===")
    start_time = time.time()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    import os
    os.environ["FORCE_AMEM_FALLBACK"] = "true"
    
    print("\nüéØ === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ ===")
    
    config = UnifiedConfig(
        orchestrator_id="amem_memory_test",
        enable_amem_memory=True,
        amem_memory_path="./vault/system/amem_memory_test",
        vault_path="./vault_memory_test",
        enable_shared_chat=True,
        enable_vector_memory=False,
        enable_smart_validation=True,
        timeout=60
    )
    
    orchestrator = UnifiedOrchestrator(config)
    print("‚úÖ UnifiedOrchestrator –≥–æ—Ç–æ–≤")
    
    results = {
        "phase_1_insights": [],
        "phase_2_insights": [],
        "memory_growth": [],
        "recommendation_quality": [],
        "search_effectiveness": []
    }
    
    # === –§–ê–ó–ê 1: –ù–ê–ö–û–ü–õ–ï–ù–ò–ï –ë–ê–ó–û–í–û–ì–û –û–ü–´–¢–ê ===
    print(f"\nüìö === –§–ê–ó–ê 1: –ù–ê–ö–û–ü–õ–ï–ù–ò–ï –ë–ê–ó–û–í–û–ì–û –û–ü–´–¢–ê ({len(PHASE_1_TASKS)} –∑–∞–¥–∞—á) ===")
    
    for i, task in enumerate(PHASE_1_TASKS, 1):
        print(f"\n{i}Ô∏è‚É£ –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {task['category']}")
        print(f"   üìù {task['task']}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        mock_result = {
            "success": True,
            "execution_time": 10.0 + i * 2,
            "tools_used": ["file_manager", "code_generator"] + task['skills'][:2],
            "files_created": [f"{task['id']}.py", f"{task['id']}.md"],
            "content": f"–ë–∞–∑–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è {task['category']}",
            "quality_score": task['quality']
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—ã—Ç –≤ A-MEM
        await orchestrator._save_agent_experience_to_amem(
            agent_id=f"agent_{task['id']}",
            agent_data={"role": task['category'], "skills": task['skills']},
            agent_result=mock_result,
            task_id=task['id']
        )
        
        await orchestrator._save_task_solution_to_amem(
            task=task['task'],
            final_result={
                "created_files": mock_result["files_created"],
                "process_trace": ["–∞–Ω–∞–ª–∏–∑", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"],
                "validation_summary": {"quality_score": mock_result["quality_score"]}
            },
            duration=mock_result["execution_time"]
        )
        
        print(f"   ‚úÖ –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–∫–∞—á–µ—Å—Ç–≤–æ: {task['quality']:.2f})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏
        memories = await orchestrator.amem_system.search_memories("", limit=100)
        results["memory_growth"].append(len(memories))
        print(f"   üß† –ü–∞–º—è—Ç—å: {len(memories)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    print(f"\nüìä –§–∞–∑–∞ 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –Ω–∞–∫–æ–ø–ª–µ–Ω–æ {results['memory_growth'][-1]} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    # === –§–ê–ó–ê 2: –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ù–ê–ö–û–ü–õ–ï–ù–ù–û–ì–û –û–ü–´–¢–ê ===
    print(f"\nüöÄ === –§–ê–ó–ê 2: –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ù–ê–ö–û–ü–õ–ï–ù–ù–û–ì–û –û–ü–´–¢–ê ({len(PHASE_2_TASKS)} –∑–∞–¥–∞—á) ===")
    
    for i, task in enumerate(PHASE_2_TASKS, 1):
        print(f"\n{i}Ô∏è‚É£ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∑–∞–¥–∞—á–∞: {task['category']}")
        print(f"   üìù {task['task']}")
        print(f"   üéØ –û–∂–∏–¥–∞–µ–º—ã–µ insights: {', '.join(task['expected_insights'])}")
        
        # –ü–æ–ª—É—á–∞–µ–º insights –ù–ê –û–°–ù–û–í–ï –ù–ê–ö–û–ü–õ–ï–ù–ù–û–ì–û –û–ü–´–¢–ê
        mock_subtasks = [
            {"id": f"subtask_{task['id']}_1", "description": task['task']},
            {"id": f"subtask_{task['id']}_2", "description": f"—É–ª—É—á—à–µ–Ω–∏–µ {task['category']}"}
        ]
        
        print(f"\n   üß† A-MEM insights –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞:")
        insights = await orchestrator._get_amem_insights_for_team_creation(
            mock_subtasks, task['id']
        )
        
        print(f"      üîç –ü–æ–∏—Å–∫: enabled={insights.get('enabled', False)}")
        print(f"      üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–π: {len(insights.get('search_results', []))}")
        print(f"      üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(insights.get('agent_recommendations', []))}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = insights.get('agent_recommendations', [])
        successful_searches = len(insights.get('search_results', []))
        
        for rec in recommendations:
            print(f"      ‚ú® {rec}")
        
        results["phase_2_insights"].append({
            "task_id": task['id'],
            "recommendations_count": len(recommendations),
            "search_results_count": successful_searches,
            "expected_keywords": task['expected_insights']
        })
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö insights
        relevant_count = 0
        for keyword in task['expected_insights']:
            for rec in recommendations:
                if keyword.lower() in rec.lower():
                    relevant_count += 1
                    break
        
        relevance_score = relevant_count / len(task['expected_insights']) if task['expected_insights'] else 0
        results["recommendation_quality"].append(relevance_score)
        
        print(f"      üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevant_count}/{len(task['expected_insights'])} = {relevance_score:.2f}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä—è –æ–ø—ã—Ç—É
        improved_quality = 0.8 + (i * 0.05) + (relevance_score * 0.1)  # –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç—ë—Ç –æ—Ç –æ–ø—ã—Ç–∞
        
        mock_result = {
            "success": True,
            "execution_time": 8.0 + i * 1.5,  # –í—Ä–µ–º—è —Å–Ω–∏–∂–∞–µ—Ç—Å—è –æ—Ç –æ–ø—ã—Ç–∞
            "tools_used": ["file_manager", "code_generator"] + task['skills'],
            "files_created": [f"{task['id']}.py", f"{task['id']}.html", f"{task['id']}.md"],
            "content": f"–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è {task['category']} –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞",
            "quality_score": improved_quality
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ–ø—ã—Ç
        await orchestrator._save_agent_experience_to_amem(
            agent_id=f"agent_{task['id']}_improved",
            agent_data={"role": task['category'], "skills": task['skills']},
            agent_result=mock_result,
            task_id=task['id']
        )
        
        await orchestrator._save_task_solution_to_amem(
            task=task['task'],
            final_result={
                "created_files": mock_result["files_created"],
                "process_trace": ["–∞–Ω–∞–ª–∏–∑ –æ–ø—ã—Ç–∞", "—É–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"],
                "validation_summary": {"quality_score": mock_result["quality_score"]}
            },
            duration=mock_result["execution_time"]
        )
        
        print(f"   ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–∫–∞—á–µ—Å—Ç–≤–æ: {improved_quality:.2f})")
    
    # === –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê ===
    print(f"\nüîç === –¢–ï–°–¢ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê –ù–ê–ö–û–ü–õ–ï–ù–ù–´–• –ó–ù–ê–ù–ò–ô ===")
    
    search_tests = [
        {"query": "HTML —Ñ–æ—Ä–º—ã –≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "expected_results": 2},
        {"query": "Python CSV –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "expected_results": 2},
        {"query": "API Flask backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "expected_results": 2},
        {"query": "–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", "expected_results": 3},
        {"query": "javascript ajax –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "expected_results": 1},
        {"query": "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "expected_results": 1}
    ]
    
    search_scores = []
    for test in search_tests:
        results_found = await orchestrator.amem_system.search_memories(test['query'], limit=5)
        actual_count = len(results_found)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞
        effectiveness = min(actual_count / test['expected_results'], 1.0) if test['expected_results'] > 0 else 0
        search_scores.append(effectiveness)
        
        print(f"   üîç '{test['query']}': {actual_count} –∏–∑ {test['expected_results']} –æ–∂–∏–¥–∞–µ–º—ã—Ö ({effectiveness:.2f})")
        
        if results_found:
            best = results_found[0]
            content_preview = best.get('content', '')[:50].replace('\n', ' ')
            print(f"      ‚ú® –õ—É—á—à–∏–π: {content_preview}...")
    
    results["search_effectiveness"] = search_scores
    avg_search_effectiveness = sum(search_scores) / len(search_scores) if search_scores else 0
    
    # === –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    total_time = time.time() - start_time
    final_memories = await orchestrator.amem_system.search_memories("", limit=100)
    
    phase_1_quality = sum(task['quality'] for task in PHASE_1_TASKS) / len(PHASE_1_TASKS)
    phase_2_quality = sum(results["recommendation_quality"]) / len(results["recommendation_quality"]) if results["recommendation_quality"] else 0
    
    print(f"\nüìà === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–ê–ú–Ø–¢–ò ===")
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å")
    print(f"üß† –ò—Ç–æ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(final_memories)}")
    print(f"üìö –§–∞–∑–∞ 1 (–±–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç): –∫–∞—á–µ—Å—Ç–≤–æ {phase_1_quality:.3f}")
    print(f"üöÄ –§–∞–∑–∞ 2 (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø—ã—Ç–∞): —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å {phase_2_quality:.3f}")
    print(f"üîç –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞: {avg_search_effectiveness:.3f}")
    print(f"üìä –†–æ—Å—Ç –ø–∞–º—è—Ç–∏: {results['memory_growth']}")
    
    # –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ A-MEM
    memory_utilization_score = (phase_2_quality + avg_search_effectiveness) / 2
    
    print(f"\nüéØ === –û–¶–ï–ù–ö–ê –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò A-MEM ===")
    if memory_utilization_score >= 0.7:
        print(f"‚ú® –û–¢–õ–ò–ß–ù–û! A-MEM —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –æ–ø—ã—Ç ({memory_utilization_score:.3f})")
    elif memory_utilization_score >= 0.5:
        print(f"‚úÖ –•–û–†–û–®–û! A-MEM –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ({memory_utilization_score:.3f})")
    elif memory_utilization_score >= 0.3:
        print(f"‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! A-MEM —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç ({memory_utilization_score:.3f})")
    else:
        print(f"‚ùå –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–ô! A-MEM –Ω–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω ({memory_utilization_score:.3f})")
    
    return {
        "success": True,
        "time": total_time,
        "total_memories": len(final_memories),
        "phase_1_quality": phase_1_quality,
        "phase_2_quality": phase_2_quality,
        "search_effectiveness": avg_search_effectiveness,
        "memory_utilization_score": memory_utilization_score,
        "detailed_results": results
    }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        print("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è A-MEM –ø–∞–º—è—Ç–∏...")
        result = await test_amem_memory_utilization()
        
        print("\nüéâ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù ===")
        print("üß† A-MEM –ø–∞–º—è—Ç—å –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!")
        print("üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è!")
        print("‚ú® –°–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—Å—è –Ω–∞ –æ–ø—ã—Ç–µ –∏ —É–ª—É—á—à–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = Path("amem_memory_utilization_results.json")
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
        
        return result
        
    except Exception as e:
        print(f"\nüí• === –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
        print(f"‚ùå {e}")
        import traceback
        traceback.print_exc()
        return {"success": False, "error": str(e)}

if __name__ == "__main__":
    asyncio.run(main()) 