#!/usr/bin/env python3
"""
üõ°Ô∏è –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ß–ï–°–¢–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –ß–ê–°–¢–¨ 1
üéØ –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —á–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ KittyCore 3.0

–ü–†–ò–ù–¶–ò–ü–´:
- ‚ùå –ù–ï–¢ –ú–û–ö–û–í - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
- üïµÔ∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ü–û–î–î–ï–õ–û–ö
- ‚úÖ –ß–ï–°–¢–ù–ê–Ø –û–¶–ï–ù–ö–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò
- üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–ß–Å–¢–ù–û–°–¢–¨ –û –ß–ï–°–¢–ù–û–°–¢–ò

–¶–ï–õ–¨: –ó–∞–º–µ–Ω–∏—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã —á–µ—Å—Ç–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏ —Ä–∞–∑ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞!
"""

import asyncio
import json
import time
import sys
import os
from pathlib import Path
from typing import Dict, List, Any, Tuple
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.insert(0, str(Path(__file__).parent / 'kittycore'))

from kittycore.core.fake_detector import FakeDetector, FakeIndicator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class HonestToolsTester:
    """
    üõ°Ô∏è –ß–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –ø–æ–¥–¥–µ–ª–æ–∫
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è FakeDetector –≤ –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–ª–æ–≥–æ/—á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    - –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
    """
    
    def __init__(self, honesty_threshold: float = 0.7):
        self.fake_detector = FakeDetector()
        self.honesty_threshold = honesty_threshold
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_results = []
        self.honest_tools = set()
        self.dishonest_tools = set()
        self.suspicious_tools = set()
        
        # –ü–∞–º—è—Ç—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.memory_records = []
        
        logger.info(f"üõ°Ô∏è HonestToolsTester –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø–æ—Ä–æ–≥ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏: {honesty_threshold})")
    
    def wrap_test_with_honesty_check(self, tool_name: str, action: str, test_func, *args, **kwargs):
        """
        –û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –ª—é–±–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å
        
        Args:
            tool_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            action: –î–µ–π—Å—Ç–≤–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
            test_func: –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞
            *args, **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —á–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        """
        start_time = time.time()
        
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É—é {tool_name}.{action} —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–µ—Å—Ç–Ω–æ—Å—Ç–∏...")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
            if asyncio.iscoroutinefunction(test_func):
                original_result = asyncio.run(test_func(*args, **kwargs))
            else:
                original_result = test_func(*args, **kwargs)
            
            execution_time = time.time() - start_time
            
            # –î–µ—Ç–µ–∫—Ç–∏–º –ø–æ–¥–¥–µ–ª–∫–∏
            is_fake, indicators = self.fake_detector.detect_fake_result(
                tool_name, action, original_result
            )
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
            honesty_score = self.fake_detector.get_honesty_score(indicators)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
            honesty_status = self._determine_honesty_status(honesty_score)
            
            # –°–æ–∑–¥–∞—ë–º —á–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            honest_result = {
                'tool_name': tool_name,
                'action': action,
                'execution_time': execution_time,
                'original_success': getattr(original_result, 'success', False),
                'honest_success': honesty_score >= self.honesty_threshold,
                'honesty_score': honesty_score,
                'honesty_status': honesty_status,
                'is_fake': is_fake,
                'fake_indicators_count': len(indicators),
                'fake_indicators': [
                    {
                        'type': ind.type,
                        'severity': ind.severity,
                        'description': ind.description,
                        'confidence': ind.confidence
                    } for ind in indicators
                ],
                'data_size': len(str(getattr(original_result, 'data', ''))),
                'original_data_preview': str(original_result)[:200] + '...' if len(str(original_result)) > 200 else str(original_result)
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_tool_statistics(tool_name, honesty_status)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.test_results.append(honest_result)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._print_test_result(honest_result, indicators)
            
            return honest_result
            
        except Exception as e:
            execution_time = time.time() - start_time
            error_result = {
                'tool_name': tool_name,
                'action': action,
                'execution_time': execution_time,
                'original_success': False,
                'honest_success': False,
                'honesty_score': 0.0,
                'honesty_status': '–û–®–ò–ë–ö–ê',
                'is_fake': True,
                'fake_indicators_count': 0,
                'fake_indicators': [],
                'data_size': 0,
                'error': str(e),
                'original_data_preview': f"–û—à–∏–±–∫–∞: {str(e)}"
            }
            
            self.dishonest_tools.add(tool_name)
            self.test_results.append(error_result)
            
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {str(e)[:100]}")
            return error_result
    
    def _determine_honesty_status(self, honesty_score: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ –æ—Ü–µ–Ω–∫–µ"""
        if honesty_score >= self.honesty_threshold:
            return "–ß–ï–°–¢–ù–´–ô"
        elif honesty_score >= 0.3:
            return "–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô"
        else:
            return "–ù–ï–ß–ï–°–¢–ù–´–ô"
    
    def _update_tool_statistics(self, tool_name: str, honesty_status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        if honesty_status == "–ß–ï–°–¢–ù–´–ô":
            self.honest_tools.add(tool_name)
            self.dishonest_tools.discard(tool_name)
            self.suspicious_tools.discard(tool_name)
        elif honesty_status == "–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô":
            self.suspicious_tools.add(tool_name)
        else:
            self.dishonest_tools.add(tool_name)
            self.honest_tools.discard(tool_name)
            self.suspicious_tools.discard(tool_name)
    
    def _print_test_result(self, result: Dict[str, Any], indicators: List[FakeIndicator]):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status_emoji = {
            "–ß–ï–°–¢–ù–´–ô": "‚úÖ",
            "–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô": "‚ö†Ô∏è", 
            "–ù–ï–ß–ï–°–¢–ù–´–ô": "‚ùå",
            "–û–®–ò–ë–ö–ê": "üí•"
        }.get(result['honesty_status'], "‚ùì")
        
        print(f"   {status_emoji} {result['honesty_status']} (—á–µ—Å—Ç–Ω–æ—Å—Ç—å: {result['honesty_score']:.2f})")
        print(f"   üìä –í—Ä–µ–º—è: {result['execution_time']:.1f}—Å, —Ä–∞–∑–º–µ—Ä: {result['data_size']} –±–∞–π—Ç")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–¥–¥–µ–ª–∫–∏
        if indicators:
            print(f"   üö® –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥–¥–µ–ª–∫–∏: {len(indicators)}")
            for indicator in indicators[:2]:
                severity_emoji = {
                    "critical": "üî¥", "high": "üü†", "medium": "üü°", "low": "üîµ"
                }.get(indicator.severity, "‚ö™")
                print(f"      {severity_emoji} {indicator.description}")
    
    def record_successful_params(self, tool_name: str, action: str, params: Dict[str, Any], notes: str = ""):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø–∞–º—è—Ç—å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self.memory_records.append({
            "tool": tool_name,
            "working_action": action,
            "correct_params": params,
            "notes": notes,
            "timestamp": time.time()
        })
    
    def generate_honesty_summary(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –æ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏"""
        if not self.test_results:
            return "üìù –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        
        total_tests = len(self.test_results)
        honest_count = len([r for r in self.test_results if r['honesty_status'] == '–ß–ï–°–¢–ù–´–ô'])
        dishonest_count = len([r for r in self.test_results if r['honesty_status'] == '–ù–ï–ß–ï–°–¢–ù–´–ô']) 
        suspicious_count = len([r for r in self.test_results if r['honesty_status'] == '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô'])
        error_count = len([r for r in self.test_results if r['honesty_status'] == '–û–®–ò–ë–ö–ê'])
        
        average_honesty = sum(r['honesty_score'] for r in self.test_results) / total_tests
        
        summary = [
            "üõ°Ô∏è –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –û –ß–ï–°–¢–ù–û–°–¢–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø",
            "=" * 50,
            f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:",
            f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}",
            f"   ‚úÖ –ß–µ—Å—Ç–Ω—ã—Ö: {honest_count} ({honest_count/total_tests*100:.1f}%)",
            f"   ‚ùå –ù–µ—á–µ—Å—Ç–Ω—ã—Ö: {dishonest_count} ({dishonest_count/total_tests*100:.1f}%)",
            f"   ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {suspicious_count} ({suspicious_count/total_tests*100:.1f}%)", 
            f"   üí• –û—à–∏–±–æ–∫: {error_count} ({error_count/total_tests*100:.1f}%)",
            f"   üìà –°—Ä–µ–¥–Ω—è—è —á–µ—Å—Ç–Ω–æ—Å—Ç—å: {average_honesty:.2f}/1.00",
            "",
            "üèÜ –ë–ï–õ–´–ô –°–ü–ò–°–û–ö (—á–µ—Å—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã):",
        ]
        
        for tool in sorted(self.honest_tools):
            summary.append(f"   ‚úÖ {tool}")
        
        if self.dishonest_tools:
            summary.extend([
                "",
                "üö´ –ß–Å–†–ù–´–ô –°–ü–ò–°–û–ö (–Ω–µ—á–µ—Å—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã):",
            ])
            for tool in sorted(self.dishonest_tools):
                summary.append(f"   ‚ùå {tool}")
        
        if self.suspicious_tools:
            summary.extend([
                "",
                "‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:",
            ])
            for tool in sorted(self.suspicious_tools):
                summary.append(f"   ‚ö†Ô∏è {tool}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        summary.extend([
            "",
            "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:",
        ])
        
        if average_honesty < 0.5:
            summary.append("   üö® –ö–†–ò–¢–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–µ—á–µ—Å—Ç–Ω–∞—è - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞!")
        elif average_honesty < 0.7:
            summary.append("   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–Ω–æ–≥–æ –Ω–µ—á–µ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –Ω—É–∂–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        else:
            summary.append("   üéâ –û–¢–õ–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —á–µ—Å—Ç–Ω–∞—è!")
        
        summary.append(f"   üéØ –ü–†–ò–ù–¶–ò–ü: –õ—É—á—à–µ —á–µ—Å—Ç–Ω—ã–µ {average_honesty*100:.0f}%, —á–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ 94%!")
        
        return "\n".join(summary)
    
    def save_honesty_results(self, filepath: str = "honesty_test_results.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        data = {
            'test_results': self.test_results,
            'honest_tools': list(self.honest_tools),
            'dishonest_tools': list(self.dishonest_tools),
            'suspicious_tools': list(self.suspicious_tools),
            'memory_records': self.memory_records,
            'honesty_threshold': self.honesty_threshold,
            'summary_stats': {
                'total_tests': len(self.test_results),
                'honest_percentage': len(self.honest_tools) / max(1, len(self.test_results)) * 100,
                'average_honesty': sum(r['honesty_score'] for r in self.test_results) / max(1, len(self.test_results))
            },
            'generated_at': time.time()
        }
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filepath}")

def demo_honest_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üõ°Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ß–ï–°–¢–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –ß–ê–°–¢–¨ 1")
    print("=" * 60)
    print("üéØ –¶–µ–ª—å: –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ –æ–±–µ—Ä–Ω—É—Ç—å –ª—é–±–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–µ—Å—Ç–Ω–æ—Å—Ç–∏")
    print()
    
    tester = HonestToolsTester()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤
    def mock_honest_test():
        return type('Result', (), {'success': True, 'data': {'real_data': True, 'size': 1024}})()
    
    def mock_fake_test():
        return type('Result', (), {'success': True, 'data': 'This is example demo data'})()
    
    def mock_error_test():
        raise Exception("API key missing")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
    print("üìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –ü–†–û–í–ï–†–ö–û–ô –ß–ï–°–¢–ù–û–°–¢–ò:")
    print("-" * 40)
    
    tester.wrap_test_with_honesty_check("media_tool", "analyze_file", mock_honest_test)
    tester.wrap_test_with_honesty_check("email_tool", "send_email", mock_fake_test)
    tester.wrap_test_with_honesty_check("broken_tool", "test_action", mock_error_test)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á—ë—Ç
    print("\n" + tester.generate_honesty_summary())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    tester.save_honesty_results("demo_honest_integration_results.json")
    print("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ demo_honest_integration_results.json")

if __name__ == "__main__":
    demo_honest_integration() 