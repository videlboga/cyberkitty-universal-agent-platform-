"""
üìû CommunicationTools - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –¥–ª—è KittyCore 3.0

–†–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:
- Email –æ—Ç–ø—Ä–∞–≤–∫–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω SMTP)
- Telegram (–∑–∞–≥–ª—É—à–∫–∏)
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
- –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API
"""

import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, Any, List, Optional
from .base_tool import Tool, ToolResult

# –ò–º–ø–æ—Ä—Ç –º–æ—â–Ω–æ–≥–æ Telegram –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
try:
    from ..telegram_tools import TelegramTool as PowerfulTelegramTool
    POWERFUL_TELEGRAM_AVAILABLE = True
except ImportError:
    # Fallback –µ—Å–ª–∏ –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    PowerfulTelegramTool = Tool
    POWERFUL_TELEGRAM_AVAILABLE = False


class EmailTool(Tool):
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""
    
    def __init__(self, smtp_config: Optional[Dict] = None):
        super().__init__(
            name="email_tool",
            description="–û—Ç–ø—Ä–∞–≤–∫–∞ email —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ SMTP"
        )
        self.smtp_config = smtp_config or {}
    
    def execute(self, operation: str = "send", to: str = None, subject: str = None, 
               body: str = None, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å email –æ–ø–µ—Ä–∞—Ü–∏—é"""
        try:
            if operation == "send":
                return self._send_email(to, subject, body, **kwargs)
            elif operation == "validate_config":
                return self._validate_config()
            else:
                return ToolResult(
                    success=False,
                    error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}"
                )
                
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ email –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
            )
    
    def _send_email(self, to: str, subject: str, body: str, **kwargs) -> ToolResult:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å email"""
        if not all([to, subject, body]):
            return ToolResult(
                success=False,
                error="–¢—Ä–µ–±—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: to, subject, body"
            )
        
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ production –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SMTP
        return ToolResult(
            success=True,
            data={
                "operation": "send_email",
                "to": to,
                "subject": subject,
                "body_length": len(body),
                "status": "simulated_send",
                "note": "–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ SMTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
            }
        )
    
    def _validate_config(self) -> ToolResult:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        return ToolResult(
            success=True,
            data={
                "operation": "validate_config",
                "valid": False,
                "note": "SMTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
            }
        )
    
    def get_schema(self) -> Dict[str, Any]:
        return {
            "type": "object",
            "properties": {
                "operation": {
                    "type": "string",
                    "enum": ["send", "validate_config"],
                    "description": "Email –æ–ø–µ—Ä–∞—Ü–∏—è",
                    "default": "send"
                },
                "to": {
                    "type": "string",
                    "description": "Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è"
                },
                "subject": {
                    "type": "string",
                    "description": "–¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"
                },
                "body": {
                    "type": "string",
                    "description": "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
                }
            },
            "required": []
        }


class TelegramTool(PowerfulTelegramTool):
    """–ú–æ—â–Ω—ã–π Telegram –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç KittyCore 3.0 - –ü–û–õ–ù–ê–Ø –≠–ö–û–°–ò–°–¢–ï–ú–ê!
    
    üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ @BotFather –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏  
    - TON –∫–æ—à–µ–ª—å–∫–∏ –∏ –ø–ª–∞—Ç–µ–∂–∏
    - Telegram Stars –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    - –Æ–∑–µ—Ä–±–æ—Ç—ã —Å Pyrogram
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏/–≥—Ä—É–ø–ø–∞–º–∏
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–æ–≤
    """
    
    def __init__(self, bot_token: Optional[str] = None):
        if POWERFUL_TELEGRAM_AVAILABLE:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–∞–∫ –æ—Å–Ω–æ–≤—É
            super().__init__()
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            self.name = "telegram_tool"
        else:
            # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É Tool
            Tool.__init__(self, 
                name="telegram_tool",
                description="–ë–∞–∑–æ–≤—ã–π Telegram –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–º–æ—â–Ω—ã–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API
        self.bot_token = bot_token
        if not self.bot_token:
            import os
            self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    def execute(self, operation: str = "send_message", chat_id: str = None, 
               text: str = None, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å Telegram –æ–ø–µ—Ä–∞—Ü–∏—é - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ú–û–©–ù–´–ô –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å!"""
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –Ω–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ—â–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        operation_mapping = {
            "send_message": "send_message",
            "get_me": "get_bot_info", 
            "get_updates": "get_messages",
            "send_photo": "send_message",  # –í –º–æ—â–Ω–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ —ç—Ç–æ —á–µ—Ä–µ–∑ send_message
            "send_document": "send_message", # –í –º–æ—â–Ω–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ —ç—Ç–æ —á–µ—Ä–µ–∑ send_message  
            "delete_message": "send_message", # –í –º–æ—â–Ω–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ —ç—Ç–æ —á–µ—Ä–µ–∑ API
            "validate_token": "health_check"
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—â–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–ª–∏ fallback
        if POWERFUL_TELEGRAM_AVAILABLE and operation in operation_mapping:
            action = operation_mapping[operation]
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ—â–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            params = {
                "action": action,
                "chat_id": chat_id,
                "message": text,
                **kwargs
            }
            
            return super().execute(**params)
        elif not POWERFUL_TELEGRAM_AVAILABLE:
            return ToolResult(
                success=False,
                error="–ú–æ—â–Ω—ã–π Telegram –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pyrogram: pip install pyrogram",
                data={
                    "operation": operation,
                    "required_dependencies": ["pyrogram", "aiohttp", "aiofiles"],
                    "telegram_tools_path": "kittycore.telegram_tools"
                }
            )
        else:
            return ToolResult(
                success=False,
                error=f"–û–ø–µ—Ä–∞—Ü–∏—è {operation} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ—â–Ω—ã–π API: create_bot, create_userbot, send_ton, create_stars_invoice –∏ –¥—Ä."
            )
    
    # –í—Å–µ –º–µ—Ç–æ–¥—ã —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω—ã –æ—Ç PowerfulTelegramTool!
    # –î–æ—Å—Ç—É–ø–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏: create_bot, create_userbot, send_ton, create_stars_invoice –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!
    
    def get_schema(self) -> Dict[str, Any]:
        """–£–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –æ—Ç –º–æ—â–Ω–æ–≥–æ Telegram –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ + —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"""
        
        if POWERFUL_TELEGRAM_AVAILABLE:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ö–µ–º—É –æ—Ç PowerfulTelegramTool
            base_schema = super().get_schema()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
            base_schema["properties"]["operation"] = {
                "type": "string",
                "enum": [
                    # –°—Ç–∞—Ä—ã–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                    "send_message", "get_me", "get_updates", 
                    "send_photo", "send_document", "delete_message", "validate_token",
                    # –ú–û–©–ù–´–ï –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç PowerfulTelegramTool
                    "create_bot", "setup_bot", "delete_bot",
                    "create_ton_wallet", "send_ton", "check_ton_balance", 
                    "create_stars_invoice", "handle_stars_payment",
                    "create_userbot", "create_channel", "join_channel", "monitor_chats",
                    "health_check"
                ],
                "description": "üöÄ –ú–û–©–ù–ê–Ø Telegram –æ–ø–µ—Ä–∞—Ü–∏—è - –ø–æ–ª–Ω–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞!"
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            base_schema["properties"].update({
                "text": {
                    "type": "string", 
                    "description": "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"
                },
                "parse_mode": {
                    "type": "string",
                    "enum": ["HTML", "Markdown"],
                    "description": "–†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞",
                    "default": "HTML"
                }
            })
            
            return base_schema
        else:
            # Fallback —Å—Ö–µ–º–∞
            return {
                "type": "object",
                "properties": {
                    "operation": {
                        "type": "string",
                        "enum": ["send_message", "get_me"],
                        "description": "–ë–∞–∑–æ–≤–∞—è Telegram –æ–ø–µ—Ä–∞—Ü–∏—è (–º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
                    },
                    "chat_id": {
                        "type": "string",
                        "description": "ID —á–∞—Ç–∞"
                    },
                    "text": {
                        "type": "string",
                        "description": "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
                    }
                },
                "required": []
            }


class NotificationTool(Tool):
    """–ü—Ä–æ—Å—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª—ã"""
    
    def __init__(self):
        super().__init__(
            name="notification_tool",
            description="–ü—Ä–æ—Å—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª—ã"
        )
    
    def execute(self, operation: str = "console", message: str = None, 
               level: str = "info", **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            if operation == "console":
                return self._console_notification(message, level)
            elif operation == "file":
                return self._file_notification(message, kwargs.get("filename", "notifications.log"))
            elif operation == "json_log":
                return self._json_log_notification(message, level, **kwargs)
            else:
                return ToolResult(
                    success=False,
                    error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}"
                )
                
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}"
            )
    
    def _console_notification(self, message: str, level: str) -> ToolResult:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        if not message:
            return ToolResult(
                success=False,
                error="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é
        level_formats = {
            "info": f"‚ÑπÔ∏è  {message}",
            "warning": f"‚ö†Ô∏è  {message}",
            "error": f"‚ùå {message}",
            "success": f"‚úÖ {message}",
            "debug": f"üîç {message}"
        }
        
        formatted_message = level_formats.get(level.lower(), f"üìù {message}")
        
        print(formatted_message)
        
        return ToolResult(
            success=True,
            data={
                "operation": "console_notification",
                "message": message,
                "level": level,
                "formatted": formatted_message
            }
        )
    
    def _file_notification(self, message: str, filename: str) -> ToolResult:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        if not message:
            return ToolResult(
                success=False,
                error="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            )
        
        try:
            from datetime import datetime
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log_entry = f"[{timestamp}] {message}\n"
            
            with open(filename, 'a', encoding='utf-8') as f:
                f.write(log_entry)
            
            return ToolResult(
                success=True,
                data={
                    "operation": "file_notification",
                    "message": message,
                    "filename": filename,
                    "timestamp": timestamp
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {str(e)}"
            )
    
    def _json_log_notification(self, message: str, level: str, **kwargs) -> ToolResult:
        """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ JSON –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        if not message:
            return ToolResult(
                success=False,
                error="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            )
        
        try:
            from datetime import datetime
            
            log_entry = {
                "timestamp": datetime.now().isoformat(),
                "level": level,
                "message": message,
                "source": "KittyCore",
                "metadata": kwargs
            }
            
            filename = kwargs.get("filename", "notifications.json")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    logs = json.load(f)
                    if not isinstance(logs, list):
                        logs = []
            except (FileNotFoundError, json.JSONDecodeError):
                logs = []
            
            logs.append(log_entry)
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(logs, f, ensure_ascii=False, indent=2)
            
            return ToolResult(
                success=True,
                data={
                    "operation": "json_log_notification",
                    "log_entry": log_entry,
                    "filename": filename,
                    "total_logs": len(logs)
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ JSON –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
            )
    
    def get_schema(self) -> Dict[str, Any]:
        return {
            "type": "object",
            "properties": {
                "operation": {
                    "type": "string",
                    "enum": ["console", "file", "json_log"],
                    "description": "–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    "default": "console"
                },
                "message": {
                    "type": "string",
                    "description": "–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                },
                "level": {
                    "type": "string",
                    "enum": ["info", "warning", "error", "success", "debug"],
                    "description": "–£—Ä–æ–≤–µ–Ω—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    "default": "info"
                },
                "filename": {
                    "type": "string",
                    "description": "–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏",
                    "default": "notifications.log"
                }
            },
            "required": ["message"]
        } 