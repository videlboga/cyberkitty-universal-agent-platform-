#!/usr/bin/env python3
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: DatabaseTool - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

–ü–†–û–ë–õ–ï–ú–ê: execute(query, **kwargs), –∞ –Ω–µ execute(action, **kwargs)
–†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É + –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
"""

import asyncio
import time
import os
import tempfile

def sync_execute(async_tool, *args, **kwargs):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è async execute"""
    try:
        loop = asyncio.get_running_loop()
        import concurrent.futures
        with concurrent.futures.ThreadPoolExecutor() as executor:
            future = executor.submit(asyncio.run, async_tool.execute(*args, **kwargs))
            return future.result(timeout=30)
    except RuntimeError:
        return asyncio.run(async_tool.execute(*args, **kwargs))

def test_database_tool():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ DatabaseTool"""
    print("üóÑÔ∏è –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û: DatabaseTool")
    
    try:
        from kittycore.tools.database_tool import DatabaseTool, DatabaseConnection
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é SQLite –±–∞–∑—É
        temp_db = tempfile.mktemp(suffix='.db')
        print(f"üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞: {temp_db}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        db_config = DatabaseConnection(
            db_type='sqlite',
            database=temp_db
        )
        tool = DatabaseTool(default_connection=db_config)
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        create_table_query = """
        CREATE TABLE IF NOT EXISTS test_table (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """
        
        print("\nüìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")
        result1 = sync_execute(tool, create_table_query)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: success={getattr(result1, 'success', 'N/A')}")
        
        # –¢–µ—Å—Ç 2: –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        insert_query = "INSERT INTO test_table (name) VALUES ('–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å')"
        
        print("\nüìù –¢–µ—Å—Ç 2: –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        result2 = sync_execute(tool, insert_query)
        print(f"‚úÖ –í—Å—Ç–∞–≤–∫–∞: success={getattr(result2, 'success', 'N/A')}")
        if hasattr(result2, 'data'):
            print(f"üìä –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {result2.data.get('affected_rows', 0)}")
        
        # –¢–µ—Å—Ç 3: –í—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        select_query = "SELECT * FROM test_table"
        
        print("\nüìù –¢–µ—Å—Ç 3: –í—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        result3 = sync_execute(tool, select_query)
        print(f"‚úÖ –í—ã–±–æ—Ä–∫–∞: success={getattr(result3, 'success', 'N/A')}")
        if hasattr(result3, 'data') and result3.data:
            data = result3.data.get('data', [])
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")
            if data:
                print(f"üìÑ –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {data[0]}")
        
        # –¢–µ—Å—Ç 4: –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        print("\nüìù –¢–µ—Å—Ç 4: –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü")
        result4 = sync_execute(tool, "SELECT name FROM sqlite_master WHERE type='table'")
        print(f"‚úÖ –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü: success={getattr(result4, 'success', 'N/A')}")
        if hasattr(result4, 'data') and result4.data:
            tables = result4.data.get('data', [])
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        # –û—á–∏—Å—Ç–∫–∞
        try:
            os.unlink(temp_db)
            print(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞ —É–¥–∞–ª–µ–Ω–∞")
        except:
            pass
        
        # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        results = [result1, result2, result3, result4]
        success_count = sum(1 for r in results if hasattr(r, 'success') and r.success)
        success_rate = (success_count / len(results)) * 100
        
        print(f"\nüìä –ò–¢–û–ì–ò: {success_count}/{len(results)} —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate >= 75:
            return f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù: {success_rate:.1f}% —É—Å–ø–µ—Ö"
        else:
            return f"‚ùå –ß–ê–°–¢–ò–ß–ù–û: {success_rate:.1f}% —É—Å–ø–µ—Ö"
            
    except ImportError as e:
        return f"‚ùå –ò–ú–ü–û–†–¢: {e}"
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}"

if __name__ == "__main__":
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï DATABASETOOL")
    print("=" * 50)
    
    start_time = time.time()
    result = test_database_tool()
    end_time = time.time()
    
    test_time = (end_time - start_time) * 1000
    print(f"\nüèÅ –†–ï–ó–£–õ–¨–¢–ê–¢: {result} ({test_time:.1f}–º—Å)") 