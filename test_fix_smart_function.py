#!/usr/bin/env python3
"""
üß† –û–¢–õ–ê–î–ö–ê: smart_function_tool
–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ async –≤—ã–∑–æ–≤—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

–û–°–û–ë–ï–ù–ù–û–°–¢–ò:
- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ê–°–ò–ù–•–†–û–ù–ù–´–ô (—Ç—Ä–µ–±—É–µ—Ç await)
- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: action (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π), + –¥–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –¥–µ–π—Å—Ç–≤–∏—é
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: create_function, execute_function, list_functions, –∏ –¥—Ä.
- –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–ø–æ–ª–Ω—è–µ—Ç list_functions

–ü–õ–ê–ù –û–¢–õ–ê–î–ö–ò:
1. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π async –≤—ã–∑–æ–≤
2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (action + –¥–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
"""

import asyncio
import time
import json

# –ò–º–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
try:
    from kittycore.tools.smart_function_tool import SmartFunctionTool
    IMPORT_OK = True
    print("‚úÖ –ò–º–ø–æ—Ä—Ç smart_function_tool —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ –û–®–ò–ë–ö–ê: {e}")
    IMPORT_OK = False

async def test_smart_function_list():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüß† –¢–µ—Å—Ç–∏—Ä—É—é smart_function —Å list_functions...")
    start_time = time.time()
    
    tool = SmartFunctionTool()
    
    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –≤—ã–∑–æ–≤: await + action
    result = await tool.execute(action="list_functions")
    
    execution_time = time.time() - start_time
    
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            print(f"üì¶ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(str(data))} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if isinstance(data, dict):
                print(f"üîë –ö–ª—é—á–∏ –¥–∞–Ω–Ω—ã—Ö: {list(data.keys())}")
                print(f"üìä –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {data.get('total_functions', '–ù–ï–¢')}")
                if 'functions' in data:
                    functions = data['functions']
                    print(f"üìù –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π: {list(functions.keys()) if functions else '–ø—É—Å—Ç–æ'}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {getattr(result, 'error', '–ù–ï–ò–ó–í–ï–°–¢–ù–û')}")
    
    return result

async def test_smart_function_create():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüß† –¢–µ—Å—Ç–∏—Ä—É—é smart_function —Å create_function...")
    
    tool = SmartFunctionTool()
    
    # –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    function_code = """
def hello_world(name="World"):
    '''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    return f"Hello, {name}!"
"""
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    result = await tool.execute(
        action="create_function",
        function_code=function_code,
        auto_import=True
    )
    
    print(f"üìä Create function —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            print(f"üéØ –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏: {data.get('function_name', '–ù–ï–¢')}")
            print(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {data.get('registered', '–ù–ï–¢')}")
            if 'metadata' in data:
                metadata = data['metadata']
                print(f"üìù –°–∏–≥–Ω–∞—Ç—É—Ä–∞: {metadata.get('signature', '–ù–ï–¢')}")
                print(f"‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å: {metadata.get('complexity', '–ù–ï–¢')}")
    
    return result

async def test_smart_function_execute():
    """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüß† –¢–µ—Å—Ç–∏—Ä—É—é smart_function —Å execute_function...")
    
    tool = SmartFunctionTool()
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    function_code = """
def add_numbers(a, b):
    '''–°–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞'''
    return a + b
"""
    
    create_result = await tool.execute(
        action="create_function",
        function_code=function_code
    )
    
    if not create_result.success:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é: {create_result.error}")
        return create_result
    
    # –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    result = await tool.execute(
        action="execute_function",
        function_name="add_numbers",
        args=[5, 3]
    )
    
    print(f"üìä Execute function —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {data.get('result', '–ù–ï–¢')}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {data.get('execution_time', '–ù–ï–¢')}—Å")
            print(f"üìù –§—É–Ω–∫—Ü–∏—è: {data.get('function_name', '–ù–ï–¢')}")
    
    return result

async def test_smart_function_validate():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∞"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüß† –¢–µ—Å—Ç–∏—Ä—É—é smart_function —Å validate_code...")
    
    tool = SmartFunctionTool()
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    test_code = """
def factorial(n):
    if n <= 1:
        return 1
    return n * factorial(n-1)
"""
    
    result = await tool.execute(
        action="validate_code",
        code=test_code
    )
    
    print(f"üìä Validate code —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–π: {data.get('valid', '–ù–ï–¢')}")
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(data.get('warnings', []))}")
            print(f"üìä AST —É–∑–ª–æ–≤: {data.get('ast_nodes', '–ù–ï–¢')}")
    
    return result

def is_result_honest(result, test_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if not result:
        print(f"‚ùå {test_name}: –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return False
    
    if not hasattr(result, 'success'):
        print(f"‚ùå {test_name}: –ù–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ success")
        return False
    
    if not result.success:
        print(f"‚ùå {test_name}: success=False")
        if hasattr(result, 'error'):
            print(f"   –û—à–∏–±–∫–∞: {result.error}")
        return False
    
    if not hasattr(result, 'data') or not result.data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    data = result.data
    data_str = str(data)
    data_size = len(data_str)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–µ–π–∫–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    fake_patterns = [
        "smart_function: —É—Å–ø–µ—à–Ω–æ",
        "–¥–µ–º–æ —Ñ—É–Ω–∫—Ü–∏—è",
        "–∑–∞–≥–ª—É—à–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏",
        "—Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è"
    ]
    
    for pattern in fake_patterns:
        if pattern.lower() in data_str.lower():
            print(f"‚ùå {test_name}: –ù–∞–π–¥–µ–Ω —Ñ–µ–π–∫–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    function_indicators = [
        "function", "result", "metadata", "signature", "execution_time", "valid", "ast_nodes"
    ]
    
    has_function_data = any(indicator in data_str.lower() for indicator in function_indicators)
    
    if not has_function_data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
        return False
    
    if data_size < 30:
        print(f"‚ùå {test_name}: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
        return False
    
    print(f"‚úÖ {test_name}: –ß–ï–°–¢–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("üß† –û–¢–õ–ê–î–ö–ê: smart_function_tool")
    print("=" * 50)
    
    if not IMPORT_OK:
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞")
        return
    
    results = {}
    
    # –¢–µ—Å—Ç 1: –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 1: –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π")
    try:
        result1 = await test_smart_function_list()
        results["list_functions"] = is_result_honest(result1, "–°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 1 –û–®–ò–ë–ö–ê: {e}")
        results["list_functions"] = False
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    try:
        result2 = await test_smart_function_create()
        results["create_function"] = is_result_honest(result2, "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 2 –û–®–ò–ë–ö–ê: {e}")
        results["create_function"] = False
    
    # –¢–µ—Å—Ç 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    try:
        result3 = await test_smart_function_execute()
        results["execute_function"] = is_result_honest(result3, "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 3 –û–®–ò–ë–ö–ê: {e}")
        results["execute_function"] = False
    
    # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞")
    try:
        result4 = await test_smart_function_validate()
        results["validate_code"] = is_result_honest(result4, "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 4 –û–®–ò–ë–ö–ê: {e}")
        results["validate_code"] = False
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –û–¢–õ–ê–î–ö–ò:")
    
    total_tests = len(results)
    passed_tests = sum(1 for success in results.values() if success)
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    print("\n–î–µ—Ç–∞–ª–∏:")
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("smart_function_fix_results.json", "w", encoding="utf-8") as f:
        json.dump({
            "tool": "smart_function_tool",
            "tests": results,
            "summary": {
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "success_rate": success_rate
            },
            "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ smart_function_fix_results.json")
    
    # –í–µ—Ä–¥–∏–∫—Ç
    if success_rate >= 75:
        print("\nüéâ SMART_FUNCTION_TOOL –ò–°–ü–†–ê–í–õ–ï–ù!")
        print("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ async –≤—ã–∑–æ–≤–∞–º–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        return True
    elif success_rate >= 50:
        print("\n‚ö†Ô∏è SMART_FUNCTION_TOOL –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
        return False
    else:
        print("\n‚ùå SMART_FUNCTION_TOOL –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        return False

if __name__ == "__main__":
    asyncio.run(main()) 