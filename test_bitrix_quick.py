#!/usr/bin/env python3
"""
‚ö° –ë–´–°–¢–†–´–ô –¢–ï–°–¢ A-MEM –ù–ê –ë–ò–¢–†–ò–ö–°24
–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
"""

import asyncio
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig

async def quick_bitrix_test():
    """‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç A-MEM"""
    print("‚ö° === –ë–´–°–¢–†–´–ô –¢–ï–°–¢ A-MEM –ù–ê –ë–ò–¢–†–ò–ö–°24 ===")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = UnifiedConfig(
        orchestrator_id="bitrix_quick_test",
        enable_amem_memory=True,
        vault_path="./vault_quick_test",
        enable_shared_chat=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        enable_smart_validation=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        timeout=60
    )
    
    try:
        print("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        orchestrator = UnifiedOrchestrator(config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º A-MEM
        amem_type = type(orchestrator.amem_system.amem).__name__
        print(f"üß† A-MEM: {amem_type}")
        
        from kittycore.memory.amem_integration import AMEM_AVAILABLE
        print(f"‚úÖ AMEM –¥–æ—Å—Ç—É–ø–Ω–∞: {AMEM_AVAILABLE}")
        
        if amem_type == "AgenticMemorySystem":
            print("üöÄ A-MEM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–Ω–∞!")
            
            # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            print("\nüíæ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
            
            test_memories = [
                "–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24: –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ CRM –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                "–¢–æ–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: SalesBooster, ClientTracker, TaskManager Pro", 
                "–ü—Ä–æ–±–ª–µ–º—ã: —Å–ª–æ–∂–Ω—ã–π UX, –º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, –≤—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                "–ü—Ä–æ—Ç–æ—Ç–∏–ø 1: –ü—Ä–æ—Å—Ç–æ–π CRM –¥–∞—à–±–æ—Ä–¥ —Å –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π",
                "–ü—Ä–æ—Ç–æ—Ç–∏–ø 2: –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á —Å offline —Ä–µ–∂–∏–º–æ–º"
            ]
            
            for i, memory in enumerate(test_memories):
                await orchestrator.amem_system.store_memory(
                    content=memory,
                    agent_id=f"bitrix_analyzer_{i}",
                    tags=["–±–∏—Ç—Ä–∏–∫—Å24", "–∞–Ω–∞–ª–∏–∑", "—Ä—ã–Ω–æ–∫", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"]
                )
                print(f"   ‚úÖ –ü–∞–º—è—Ç—å {i+1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
            # –¢–µ—Å—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
            print(f"\nüîç –¢–µ—Å—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
            
            search_queries = [
                "–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–∏—Ç—Ä–∏–∫—Å24",
                "–ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π CRM",
                "–ø—Ä–æ—Ç–æ—Ç–∏–ø—ã —É–ª—É—á—à–µ–Ω–∏—è UX",
                "–±—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—à–±–æ—Ä–¥"
            ]
            
            total_found = 0
            for query in search_queries:
                results = await orchestrator.amem_system.search_memories(query, limit=2)
                found = len(results)
                total_found += found
                print(f"   üîç '{query}': {found} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                if results:
                    best = results[0]
                    preview = best.get('content', '')[:50]
                    print(f"      ‚ú® {preview}...")
            
            effectiveness = total_found / len(search_queries)
            print(f"\nüìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞: {effectiveness:.1f}")
            
            if effectiveness >= 1.0:
                print("üéâ A-MEM —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
                success = True
            else:
                print("‚ö†Ô∏è A-MEM —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ")
                success = False
                
        else:
            print("‚ö†Ô∏è A-MEM –≤ fallback —Ä–µ–∂–∏–º–µ")
            success = False
        
        return {"success": success, "amem_type": amem_type, "amem_available": AMEM_AVAILABLE}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return {"success": False, "error": str(e)}

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    start_time = time.time()
    
    result = await quick_bitrix_test()
    
    elapsed = time.time() - start_time
    print(f"\n‚è±Ô∏è –í—Ä–µ–º—è: {elapsed:.2f}—Å")
    
    if result.get("success"):
        print("‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ A-MEM –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ç–µ—Å—Ç—É –Ω–∞ –ë–∏—Ç—Ä–∏–∫—Å24!")
    else:
        print("‚ùå –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à—ë–ª")
        print(f"–û—à–∏–±–∫–∞: {result.get('error', 'Unknown')}")
    
    return result

if __name__ == "__main__":
    asyncio.run(main()) 