#!/usr/bin/env python3
"""
üß¨ EvolutionaryAgentFactory - –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ KittyCore 3.0

–§–ê–ó–ê 2: –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
–ü—Ä–∏–Ω—Ü–∏–ø: "–ê–≥–µ–Ω—Ç—ã —Ä–∞–∑–º–Ω–æ–∂–∞—é—Ç—Å—è, –Ω–∞—Å–ª–µ–¥—É—é—Ç –ª—É—á—à–∏–µ —á–µ—Ä—Ç—ã, –º—É—Ç–∏—Ä—É—é—Ç –∏ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É—é—Ç"

–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
üß¨ –†–ê–ó–ú–ù–û–ñ–ï–ù–ò–ï: –£—Å–ø–µ—à–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç –ø–æ—Ç–æ–º–∫–æ–≤
üß† –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–ï: –ü–æ—Ç–æ–º–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
üîÑ –ú–£–¢–ê–¶–ò–ò: –°–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
‚ö° –ï–°–¢–ï–°–¢–í–ï–ù–ù–´–ô –û–¢–ë–û–†: –í—ã–∂–∏–≤–∞–Ω–∏–µ —Å–∞–º—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö
üå± –≠–í–û–õ–Æ–¶–ò–Ø: –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏
"""

import json
import random
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from pathlib import Path
from loguru import logger

# === –ß–ê–°–¢–¨ 1: –ë–ê–ó–û–í–´–ï –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• ===

@dataclass
class AgentGenes:
    """üß¨ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–¥ –∞–≥–µ–Ω—Ç–∞ - –Ω–∞—Å–ª–µ–¥—É–µ–º—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    agent_type: str = "general"  # –¢–∏–ø –∞–≥–µ–Ω—Ç–∞ (code, web, analysis, etc.)
    specialization: List[str] = None  # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    success_rate: float = 0.5  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ (0.0-1.0)
    speed_factor: float = 1.0  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ (0.5-2.0)
    quality_factor: float = 1.0  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–∞ (0.5-2.0)
    
    # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    preferred_tools: List[str] = None  # –õ—é–±–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    tool_efficiency: Dict[str, float] = None  # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
    learning_rate: float = 0.1  # –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (0.01-0.5)
    mutation_resistance: float = 0.8  # –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –º—É—Ç–∞—Ü–∏—è–º (0.5-1.0)
    
    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    collaboration_skill: float = 0.7  # –ù–∞–≤—ã–∫ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ (0.0-1.0)
    leadership_tendency: float = 0.3  # –°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –ª–∏–¥–µ—Ä—Å—Ç–≤—É (0.0-1.0)
    
    def __post_init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if self.specialization is None:
            self.specialization = ["general"]
        if self.preferred_tools is None:
            self.preferred_tools = ["general_tools"]
        if self.tool_efficiency is None:
            self.tool_efficiency = {"general_tools": 1.0}

@dataclass
class AgentDNA:
    """üß¨ –î–ù–ö –∞–≥–µ–Ω—Ç–∞ - –ø–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    
    agent_id: str  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∞–≥–µ–Ω—Ç–∞
    generation: int = 0  # –ü–æ–∫–æ–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    parent_ids: List[str] = None  # ID —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    birth_time: datetime = None  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    
    # –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–¥
    genes: AgentGenes = None
    
    # –ò—Å—Ç–æ—Ä–∏—è —ç–≤–æ–ª—é—Ü–∏–∏
    mutations_count: int = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É—Ç–∞—Ü–∏–π
    crossover_count: int = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏–π
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏
    tasks_completed: int = 0  # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    total_success_rate: float = 0.0  # –û–±—â–∏–π —É—Å–ø–µ—Ö
    life_span: timedelta = None  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏
    
    def __post_init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if self.parent_ids is None:
            self.parent_ids = []
        if self.birth_time is None:
            self.birth_time = datetime.now()
        if self.genes is None:
            self.genes = AgentGenes()

@dataclass
class EvolutionEvent:
    """üîÑ –°–æ–±—ã—Ç–∏–µ —ç–≤–æ–ª—é—Ü–∏–∏ - –∑–∞–ø–∏—Å—å –æ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"""
    
    event_type: str  # "birth", "mutation", "crossover", "death", "selection"
    timestamp: datetime
    agent_id: str
    
    # –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
    parent_ids: List[str] = None  # –î–ª—è birth/crossover
    mutation_details: Dict[str, Any] = None  # –î–ª—è mutation
    selection_reason: str = None  # –î–ª—è selection/death
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    fitness_before: float = 0.0
    fitness_after: float = 0.0
    success_improvement: float = 0.0

@dataclass
class PopulationStats:
    """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
    
    # –†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏
    total_agents: int = 0
    active_agents: int = 0
    retired_agents: int = 0
    
    # –ü–æ–∫–æ–ª–µ–Ω–∏—è
    max_generation: int = 0
    avg_generation: float = 0.0
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    avg_success_rate: float = 0.0
    best_success_rate: float = 0.0
    worst_success_rate: float = 1.0
    
    # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
    unique_specializations: int = 0
    genetic_diversity: float = 0.0
    
    # –≠–≤–æ–ª—é—Ü–∏—è
    total_mutations: int = 0
    total_crossovers: int = 0
    evolution_events: int = 0
    
    # –ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–ø—É–ª—è—Ü–∏–∏
    population_health: float = 0.0
    adaptation_rate: float = 0.0

# === –ß–ê–°–¢–¨ 2: –ì–ï–ù–ï–¢–ò–ß–ï–°–ö–ò–ï –û–ü–ï–†–ê–¶–ò–ò ===

class GeneticOperations:
    """üß¨ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, mutation_rate: float = 0.1, crossover_rate: float = 0.3):
        self.mutation_rate = mutation_rate
        self.crossover_rate = crossover_rate
        self.random = random.Random()
        self.random.seed(int(time.time()))
    
    def create_initial_agent(self, agent_type: str = "general", specialization: List[str] = None) -> AgentDNA:
        """üå± –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–Ω—É–ª–µ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ)"""
        
        agent_id = f"{agent_type}_{int(time.time())}_{self.random.randint(1000, 9999)}"
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å –Ω–µ–±–æ–ª—å—à–∏–º —Ä–∞–∑–±—Ä–æ—Å–æ–º
        genes = AgentGenes(
            agent_type=agent_type,
            specialization=specialization or [agent_type],
            success_rate=self.random.uniform(0.3, 0.7),  # –°—Ä–µ–¥–Ω–∏–π —Å—Ç–∞—Ä—Ç
            speed_factor=self.random.uniform(0.8, 1.2),
            quality_factor=self.random.uniform(0.8, 1.2),
            preferred_tools=self._generate_initial_tools(agent_type),
            tool_efficiency=self._generate_tool_efficiency(agent_type),
            learning_rate=self.random.uniform(0.05, 0.2),
            mutation_resistance=self.random.uniform(0.7, 0.9),
            collaboration_skill=self.random.uniform(0.5, 0.8),
            leadership_tendency=self.random.uniform(0.2, 0.5)
        )
        
        dna = AgentDNA(
            agent_id=agent_id,
            generation=0,
            genes=genes
        )
        
        logger.info(f"üå± –°–æ–∑–¥–∞–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç {agent_id} —Ç–∏–ø–∞ {agent_type}")
        return dna
    
    def mutate_agent(self, parent_dna: AgentDNA, mutation_strength: float = 1.0) -> AgentDNA:
        """üîÑ –ú—É—Ç–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ - —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –º—É—Ç–∞—Ü–∏—è–º
        if self.random.random() > (self.mutation_rate * mutation_strength / parent_dna.genes.mutation_resistance):
            return parent_dna  # –ú—É—Ç–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞
        
        # –°–æ–∑–¥–∞—ë–º –ø–æ—Ç–æ–º–∫–∞
        child_id = f"mut_{parent_dna.agent_id}_{int(time.time())}"
        child_genes = self._copy_genes(parent_dna.genes)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É—Ç–∞—Ü–∏–∏
        mutations = []
        
        # –ú—É—Ç–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (¬±10%)
        if self.random.random() < 0.7:
            old_success = child_genes.success_rate
            child_genes.success_rate = max(0.0, min(1.0, 
                child_genes.success_rate + self.random.uniform(-0.1, 0.1)))
            mutations.append(f"success_rate: {old_success:.2f} ‚Üí {child_genes.success_rate:.2f}")
        
        # –ú—É—Ç–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ (¬±20%)
        if self.random.random() < 0.5:
            old_speed = child_genes.speed_factor
            child_genes.speed_factor = max(0.5, min(2.0,
                child_genes.speed_factor + self.random.uniform(-0.2, 0.2)))
            mutations.append(f"speed_factor: {old_speed:.2f} ‚Üí {child_genes.speed_factor:.2f}")
        
        # –ú—É—Ç–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ (¬±15%)
        if self.random.random() < 0.5:
            old_quality = child_genes.quality_factor
            child_genes.quality_factor = max(0.5, min(2.0,
                child_genes.quality_factor + self.random.uniform(-0.15, 0.15)))
            mutations.append(f"quality_factor: {old_quality:.2f} ‚Üí {child_genes.quality_factor:.2f}")
        
        # –ú—É—Ç–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)
        if self.random.random() < 0.3:
            self._mutate_tools(child_genes)
            mutations.append("tools_mutated")
        
        # –ú—É—Ç–∞—Ü–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
        if self.random.random() < 0.4:
            old_collab = child_genes.collaboration_skill
            child_genes.collaboration_skill = max(0.0, min(1.0,
                child_genes.collaboration_skill + self.random.uniform(-0.1, 0.1)))
            mutations.append(f"collaboration: {old_collab:.2f} ‚Üí {child_genes.collaboration_skill:.2f}")
        
        # –°–æ–∑–¥–∞—ë–º –î–ù–ö –ø–æ—Ç–æ–º–∫–∞
        child_dna = AgentDNA(
            agent_id=child_id,
            generation=parent_dna.generation + 1,
            parent_ids=[parent_dna.agent_id],
            genes=child_genes,
            mutations_count=parent_dna.mutations_count + 1
        )
        
        logger.info(f"üîÑ –ú—É—Ç–∞—Ü–∏—è {parent_dna.agent_id} ‚Üí {child_id}: {', '.join(mutations)}")
        return child_dna
    
    def crossover_agents(self, parent1_dna: AgentDNA, parent2_dna: AgentDNA) -> AgentDNA:
        """üß¨ –°–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ –¥–≤—É—Ö –∞–≥–µ–Ω—Ç–æ–≤ - –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ª—É—á—à–∏—Ö —á–µ—Ä—Ç"""
        
        # –°–æ–∑–¥–∞—ë–º ID –ø–æ—Ç–æ–º–∫–∞
        child_id = f"cross_{parent1_dna.agent_id[:8]}_{parent2_dna.agent_id[:8]}_{int(time.time())}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        better_parent = parent1_dna if parent1_dna.total_success_rate >= parent2_dna.total_success_rate else parent2_dna
        worse_parent = parent2_dna if better_parent == parent1_dna else parent1_dna
        
        # –ù–∞—Å–ª–µ–¥—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (70% –æ—Ç –ª—É—á—à–µ–≥–æ, 30% –æ—Ç —Ö—É–¥—à–µ–≥–æ)
        child_genes = AgentGenes()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - –æ—Ç –ª—É—á—à–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        child_genes.agent_type = better_parent.genes.agent_type
        child_genes.specialization = list(set(
            better_parent.genes.specialization + worse_parent.genes.specialization
        ))
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ —Å —É–∫–ª–æ–Ω–æ–º –∫ –ª—É—á—à–µ–º—É
        child_genes.success_rate = (
            better_parent.genes.success_rate * 0.7 + 
            worse_parent.genes.success_rate * 0.3
        )
        child_genes.speed_factor = (
            better_parent.genes.speed_factor * 0.6 + 
            worse_parent.genes.speed_factor * 0.4
        )
        child_genes.quality_factor = (
            better_parent.genes.quality_factor * 0.6 + 
            worse_parent.genes.quality_factor * 0.4
        )
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö
        child_genes.preferred_tools = self._merge_tools(
            better_parent.genes.preferred_tools,
            worse_parent.genes.preferred_tools
        )
        child_genes.tool_efficiency = self._merge_tool_efficiency(
            better_parent.genes.tool_efficiency,
            worse_parent.genes.tool_efficiency
        )
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å - —Å—Ä–µ–¥–Ω–µ–µ
        child_genes.learning_rate = (
            better_parent.genes.learning_rate + worse_parent.genes.learning_rate
        ) / 2
        child_genes.mutation_resistance = (
            better_parent.genes.mutation_resistance + worse_parent.genes.mutation_resistance
        ) / 2
        
        # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ - –ª—É—á—à–µ–µ –∏–∑ –¥–≤—É—Ö
        child_genes.collaboration_skill = max(
            better_parent.genes.collaboration_skill,
            worse_parent.genes.collaboration_skill
        )
        child_genes.leadership_tendency = (
            better_parent.genes.leadership_tendency + worse_parent.genes.leadership_tendency
        ) / 2
        
        # –°–æ–∑–¥–∞—ë–º –î–ù–ö –ø–æ—Ç–æ–º–∫–∞
        child_dna = AgentDNA(
            agent_id=child_id,
            generation=max(parent1_dna.generation, parent2_dna.generation) + 1,
            parent_ids=[parent1_dna.agent_id, parent2_dna.agent_id],
            genes=child_genes,
            crossover_count=max(parent1_dna.crossover_count, parent2_dna.crossover_count) + 1
        )
        
        logger.info(f"üß¨ –°–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ {parent1_dna.agent_id} √ó {parent2_dna.agent_id} ‚Üí {child_id}")
        return child_dna
    
    def calculate_fitness(self, agent_dna: AgentDNA, task_history: List[Dict] = None) -> float:
        """‚ö° –†–∞—Å—á—ë—Ç –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞ (fitness function)"""
        
        fitness = 0.0
        
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç –≥–µ–Ω–æ–≤ (40%)
        base_fitness = (
            agent_dna.genes.success_rate * 0.5 +
            (agent_dna.genes.speed_factor - 0.5) * 0.1 +  # –°–∫–æ—Ä–æ—Å—Ç—å –≤–∞–∂–Ω–∞, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞
            (agent_dna.genes.quality_factor - 0.5) * 0.2 +  # –ö–∞—á–µ—Å—Ç–≤–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ
            agent_dna.genes.collaboration_skill * 0.2
        )
        fitness += base_fitness * 0.4
        
        # –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (60%)
        if agent_dna.total_success_rate > 0:
            performance_fitness = agent_dna.total_success_rate
            fitness += performance_fitness * 0.6
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
            fitness += agent_dna.genes.success_rate * 0.6
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ–ø—ã—Ç (–±–æ–ª—å—à–µ –∑–∞–¥–∞—á = –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞)
        experience_bonus = min(0.1, agent_dna.tasks_completed * 0.01)
        fitness += experience_bonus
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ —Å—Ç–∞—Ä–æ—Å—Ç—å (–ø–æ–æ—â—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏)
        if agent_dna.life_span:
            age_penalty = min(0.05, agent_dna.life_span.days * 0.001)
            fitness -= age_penalty
        
        return max(0.0, min(1.0, fitness))
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def _copy_genes(self, genes: AgentGenes) -> AgentGenes:
        """–ì–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–æ–≤"""
        return AgentGenes(
            agent_type=genes.agent_type,
            specialization=genes.specialization.copy(),
            success_rate=genes.success_rate,
            speed_factor=genes.speed_factor,
            quality_factor=genes.quality_factor,
            preferred_tools=genes.preferred_tools.copy(),
            tool_efficiency=genes.tool_efficiency.copy(),
            learning_rate=genes.learning_rate,
            mutation_resistance=genes.mutation_resistance,
            collaboration_skill=genes.collaboration_skill,
            leadership_tendency=genes.leadership_tendency
        )
    
    def _generate_initial_tools(self, agent_type: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞"""
        base_tools = ["general_tools"]
        
        if agent_type == "code":
            base_tools.extend(["code_generator", "file_manager"])
        elif agent_type == "web":
            base_tools.extend(["web_search", "web_scraping"])
        elif agent_type == "analysis":
            base_tools.extend(["data_analysis", "visualization"])
        elif agent_type == "document":
            base_tools.extend(["document_tool", "file_manager"])
        
        return base_tools
    
    def _generate_tool_efficiency(self, agent_type: str) -> Dict[str, float]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        efficiency = {"general_tools": self.random.uniform(0.7, 1.0)}
        
        if agent_type == "code":
            efficiency.update({
                "code_generator": self.random.uniform(0.8, 1.2),
                "file_manager": self.random.uniform(0.7, 1.1)
            })
        elif agent_type == "web":
            efficiency.update({
                "web_search": self.random.uniform(0.8, 1.2),
                "web_scraping": self.random.uniform(0.7, 1.1)
            })
        
        return efficiency
    
    def _mutate_tools(self, genes: AgentGenes):
        """–ú—É—Ç–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞"""
        available_tools = [
            "code_generator", "web_search", "data_analysis", 
            "file_manager", "document_tool", "smart_validator"
        ]
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        if self.random.random() < 0.5 and len(genes.preferred_tools) < 5:
            new_tool = self.random.choice([t for t in available_tools if t not in genes.preferred_tools])
            genes.preferred_tools.append(new_tool)
            genes.tool_efficiency[new_tool] = self.random.uniform(0.6, 1.0)
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ª—É—á—à–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        if genes.preferred_tools:
            tool = self.random.choice(genes.preferred_tools)
            if tool in genes.tool_efficiency:
                old_eff = genes.tool_efficiency[tool]
                genes.tool_efficiency[tool] = max(0.3, min(1.5, 
                    old_eff + self.random.uniform(-0.1, 0.2)))
    
    def _merge_tools(self, tools1: List[str], tools2: List[str]) -> List[str]:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–≤—É—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π"""
        # –ë–µ—Ä—ë–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 6
        merged = list(set(tools1 + tools2))
        if len(merged) > 6:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 6 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            merged = self.random.sample(merged, 6)
        return merged
    
    def _merge_tool_efficiency(self, eff1: Dict[str, float], eff2: Dict[str, float]) -> Dict[str, float]:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        merged = {}
        all_tools = set(eff1.keys()) | set(eff2.keys())
        
        for tool in all_tools:
            val1 = eff1.get(tool, 0.5)
            val2 = eff2.get(tool, 0.5)
            # –ë–µ—Ä—ë–º –ª—É—á—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            merged[tool] = max(val1, val2)
        
        return merged

# === –ß–ê–°–¢–¨ 3: –≠–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –§–ê–ë–†–ò–ö–ê ===

class EvolutionaryAgentFactory:
    """üß¨ –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–µ–π –∏ —ç–≤–æ–ª—é—Ü–∏–µ–π"""
    
    def __init__(self, storage_path: str = "./evolutionary_storage"):
        self.storage_path = Path(storage_path)
        self.storage_path.mkdir(exist_ok=True)
        
        # –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.genetics = GeneticOperations()
        
        # –ü–æ–ø—É–ª—è—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        self.population: Dict[str, AgentDNA] = {}
        self.active_agents: Dict[str, AgentDNA] = {}
        self.retired_agents: Dict[str, AgentDNA] = {}
        
        # –ò—Å—Ç–æ—Ä–∏—è —ç–≤–æ–ª—é—Ü–∏–∏
        self.evolution_history: List[EvolutionEvent] = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏
        self.max_population = 20
        self.min_population = 5
        self.retirement_age_days = 30
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–ø—É–ª—è—Ü–∏—é
        self._load_population()
        
        logger.info(f"üß¨ EvolutionaryAgentFactory –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        logger.info(f"üìä –ü–æ–ø—É–ª—è—Ü–∏—è: {len(self.active_agents)} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {len(self.retired_agents)} –≤ –æ—Ç—Å—Ç–∞–≤–∫–µ")
    
    def spawn_agent(self, agent_type: str = "general", specialization: List[str] = None) -> AgentDNA:
        """üå± –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (—Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ)"""
        
        # –ï—Å–ª–∏ –ø–æ–ø—É–ª—è—Ü–∏—è –ø—É—Å—Ç–∞—è, —Å–æ–∑–¥–∞—ë–º –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        if not self.active_agents:
            agent_dna = self.genetics.create_initial_agent(agent_type, specialization)
            self._add_to_population(agent_dna)
            self._record_evolution_event("birth", agent_dna.agent_id, fitness_after=0.5)
            return agent_dna
        
        # –ò—â–µ–º –ª—É—á—à–∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è
        candidates = self._select_breeding_candidates(agent_type)
        
        if len(candidates) >= 2:
            # –°–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ –¥–≤—É—Ö –ª—É—á—à–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
            parent1, parent2 = candidates[:2]
            child_dna = self.genetics.crossover_agents(parent1, parent2)
            
            # –í–æ–∑–º–æ–∂–Ω–∞—è –º—É—Ç–∞—Ü–∏—è –ø–æ—Ç–æ–º–∫–∞
            if random.random() < 0.3:
                child_dna = self.genetics.mutate_agent(child_dna)
            
            self._add_to_population(child_dna)
            self._record_evolution_event("birth", child_dna.agent_id, 
                                       parent_ids=child_dna.parent_ids,
                                       fitness_after=self.genetics.calculate_fitness(child_dna))
            
            logger.info(f"üß¨ –†–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ: {parent1.agent_id} √ó {parent2.agent_id} ‚Üí {child_dna.agent_id}")
            
        elif len(candidates) == 1:
            # –ú—É—Ç–∞—Ü–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            parent = candidates[0]
            child_dna = self.genetics.mutate_agent(parent, mutation_strength=1.5)
            
            self._add_to_population(child_dna)
            self._record_evolution_event("birth", child_dna.agent_id,
                                       parent_ids=[parent.agent_id],
                                       fitness_after=self.genetics.calculate_fitness(child_dna))
            
            logger.info(f"üîÑ –ú—É—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ: {parent.agent_id} ‚Üí {child_dna.agent_id}")
            
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –Ω—É–ª—è
            child_dna = self.genetics.create_initial_agent(agent_type, specialization)
            self._add_to_population(child_dna)
            self._record_evolution_event("birth", child_dna.agent_id, fitness_after=0.5)
            
            logger.info(f"üå± –ù–æ–≤—ã–π –∞–≥–µ–Ω—Ç: {child_dna.agent_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–ø—É–ª—è—Ü–∏—é
        self._manage_population_size()
        
        return child_dna
    
    def update_agent_performance(self, agent_id: str, task_success: bool, task_duration: float = 0.0):
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        
        if agent_id not in self.active_agents:
            logger.warning(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç {agent_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏")
            return
        
        agent_dna = self.active_agents[agent_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        agent_dna.tasks_completed += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π success rate
        old_rate = agent_dna.total_success_rate
        new_rate = (
            (old_rate * (agent_dna.tasks_completed - 1) + (1.0 if task_success else 0.0)) 
            / agent_dna.tasks_completed
        )
        agent_dna.total_success_rate = new_rate
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–æ–±—É—á–µ–Ω–∏–µ)
        if task_success:
            # –£—Å–ø–µ—Ö —É—Å–∏–ª–∏–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            learning_boost = agent_dna.genes.learning_rate * 0.1
            agent_dna.genes.success_rate = min(1.0, agent_dna.genes.success_rate + learning_boost)
        else:
            # –ù–µ—É–¥–∞—á–∞ —Å–Ω–∏–∂–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –Ω–æ —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏—é
            learning_penalty = agent_dna.genes.learning_rate * 0.05
            agent_dna.genes.success_rate = max(0.0, agent_dna.genes.success_rate - learning_penalty)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±—É—á–µ–Ω–∏—è
        fitness_change = new_rate - old_rate
        if abs(fitness_change) > 0.01:  # –ó–Ω–∞—á–∏–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            self._record_evolution_event("learning", agent_id,
                                       fitness_before=old_rate,
                                       fitness_after=new_rate,
                                       success_improvement=fitness_change)
        
        logger.debug(f"üìä –ê–≥–µ–Ω—Ç {agent_id}: –∑–∞–¥–∞—á {agent_dna.tasks_completed}, —É—Å–ø–µ—Ö {new_rate:.2f}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        self._save_population()
    
    def evolve_population(self, force_evolution: bool = False):
        """üå± –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏"""
        
        if len(self.active_agents) < 2 and not force_evolution:
            logger.info("üß¨ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏")
            return
        
        logger.info("üß¨ –ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏...")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏
        sorted_agents = sorted(
            self.active_agents.values(),
            key=lambda a: self.genetics.calculate_fitness(a),
            reverse=True
        )
        
        evolution_count = 0
        
        # –ú—É—Ç–∏—Ä—É–µ–º —Ö—É–¥—à–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
        worst_agents = sorted_agents[-len(sorted_agents)//3:] if len(sorted_agents) >= 3 else sorted_agents[-1:]
        for agent in worst_agents:
            if random.random() < 0.4:  # 40% —à–∞–Ω—Å –º—É—Ç–∞—Ü–∏–∏
                mutated = self.genetics.mutate_agent(agent, mutation_strength=1.2)
                self._replace_agent(agent.agent_id, mutated)
                evolution_count += 1
        
        # –°–∫—Ä–µ—â–∏–≤–∞–µ–º –ª—É—á—à–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
        best_agents = sorted_agents[:len(sorted_agents)//2] if len(sorted_agents) >= 4 else sorted_agents[:2]
        if len(best_agents) >= 2:
            for i in range(0, len(best_agents)-1, 2):
                if random.random() < 0.3:  # 30% —à–∞–Ω—Å —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è
                    child = self.genetics.crossover_agents(best_agents[i], best_agents[i+1])
                    # –ó–∞–º–µ–Ω—è–µ–º –æ–¥–Ω–æ–≥–æ –∏–∑ —Ö—É–¥—à–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
                    if worst_agents:
                        self._replace_agent(worst_agents[0].agent_id, child)
                        worst_agents = worst_agents[1:]  # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
                        evolution_count += 1
        
        logger.info(f"üß¨ –≠–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {evolution_count} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        self._save_population()
    
    def get_best_agent(self, agent_type: str = None) -> Optional[AgentDNA]:
        """üèÜ –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ —Ç–∏–ø—É)"""
        
        candidates = self.active_agents.values()
        if agent_type:
            candidates = [a for a in candidates if a.genes.agent_type == agent_type]
        
        if not candidates:
            return None
        
        best_agent = max(candidates, key=lambda a: self.genetics.calculate_fitness(a))
        return best_agent
    
    def get_population_stats(self) -> PopulationStats:
        """üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø—É–ª—è—Ü–∏–∏"""
        
        active_agents = list(self.active_agents.values())
        all_agents = list(self.population.values())
        
        if not all_agents:
            return PopulationStats()
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = PopulationStats(
            total_agents=len(all_agents),
            active_agents=len(active_agents),
            retired_agents=len(self.retired_agents)
        )
        
        # –ü–æ–∫–æ–ª–µ–Ω–∏—è
        generations = [a.generation for a in all_agents]
        stats.max_generation = max(generations)
        stats.avg_generation = sum(generations) / len(generations)
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        success_rates = [a.total_success_rate for a in active_agents if a.total_success_rate > 0]
        if success_rates:
            stats.avg_success_rate = sum(success_rates) / len(success_rates)
            stats.best_success_rate = max(success_rates)
            stats.worst_success_rate = min(success_rates)
        
        # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
        specializations = set()
        for agent in active_agents:
            specializations.update(agent.genes.specialization)
        stats.unique_specializations = len(specializations)
        
        # –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç)
        if len(active_agents) > 1:
            diversity_sum = 0
            for i, agent1 in enumerate(active_agents):
                for agent2 in active_agents[i+1:]:
                    diversity_sum += self._calculate_genetic_distance(agent1, agent2)
            stats.genetic_diversity = diversity_sum / (len(active_agents) * (len(active_agents) - 1) / 2)
        
        # –≠–≤–æ–ª—é—Ü–∏—è
        stats.total_mutations = sum(a.mutations_count for a in all_agents)
        stats.total_crossovers = sum(a.crossover_count for a in all_agents)
        stats.evolution_events = len(self.evolution_history)
        
        # –ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–ø—É–ª—è—Ü–∏–∏
        stats.population_health = self._calculate_population_health(active_agents)
        
        return stats
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def _select_breeding_candidates(self, agent_type: str) -> List[AgentDNA]:
        """üéØ –í—ã–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è"""
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        candidates = list(self.active_agents.values())
        if agent_type != "general":
            candidates = [a for a in candidates if a.genes.agent_type == agent_type or agent_type in a.genes.specialization]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏
        candidates.sort(key=lambda a: self.genetics.calculate_fitness(a), reverse=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏—Ö (–º–∞–∫—Å–∏–º—É–º 3)
        return candidates[:3]
    
    def _add_to_population(self, agent_dna: AgentDNA):
        """‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –≤ –ø–æ–ø—É–ª—è—Ü–∏—é"""
        self.population[agent_dna.agent_id] = agent_dna
        self.active_agents[agent_dna.agent_id] = agent_dna
    
    def _replace_agent(self, old_agent_id: str, new_agent_dna: AgentDNA):
        """üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –≤ –ø–æ–ø—É–ª—è—Ü–∏–∏"""
        if old_agent_id in self.active_agents:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ä–æ–≥–æ –≤ –æ—Ç—Å—Ç–∞–≤–∫—É
            old_agent = self.active_agents.pop(old_agent_id)
            self.retired_agents[old_agent_id] = old_agent
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
            self._add_to_population(new_agent_dna)
            
            self._record_evolution_event("replacement", new_agent_dna.agent_id,
                                       selection_reason=f"replaced_{old_agent_id}")
    
    def _manage_population_size(self):
        """‚öñÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º –ø–æ–ø—É–ª—è—Ü–∏–∏"""
        
        if len(self.active_agents) > self.max_population:
            # –£–¥–∞–ª—è–µ–º —Ö—É–¥—à–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
            excess = len(self.active_agents) - self.max_population
            sorted_agents = sorted(
                self.active_agents.values(),
                key=lambda a: self.genetics.calculate_fitness(a)
            )
            
            for agent in sorted_agents[:excess]:
                self._retire_agent(agent.agent_id, "population_limit")
        
        elif len(self.active_agents) < self.min_population:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            needed = self.min_population - len(self.active_agents)
            for _ in range(needed):
                new_agent = self.genetics.create_initial_agent()
                self._add_to_population(new_agent)
                self._record_evolution_event("birth", new_agent.agent_id, 
                                           selection_reason="population_minimum",
                                           fitness_after=0.5)
    
    def _retire_agent(self, agent_id: str, reason: str):
        """üèñÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –≤ –æ—Ç—Å—Ç–∞–≤–∫—É"""
        if agent_id in self.active_agents:
            agent = self.active_agents.pop(agent_id)
            agent.life_span = datetime.now() - agent.birth_time
            self.retired_agents[agent_id] = agent
            
            self._record_evolution_event("retirement", agent_id, selection_reason=reason)
            logger.info(f"üèñÔ∏è –ê–≥–µ–Ω—Ç {agent_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å—Ç–∞–≤–∫—É: {reason}")
    
    def _record_evolution_event(self, event_type: str, agent_id: str, **kwargs):
        """üìù –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —ç–≤–æ–ª—é—Ü–∏–∏"""
        event = EvolutionEvent(
            event_type=event_type,
            timestamp=datetime.now(),
            agent_id=agent_id,
            **kwargs
        )
        self.evolution_history.append(event)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–æ–±—ã—Ç–∏–π)
        if len(self.evolution_history) > 1000:
            self.evolution_history = self.evolution_history[-1000:]
    
    def _calculate_genetic_distance(self, agent1: AgentDNA, agent2: AgentDNA) -> float:
        """üß¨ –†–∞—Å—á—ë—Ç –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        distance = 0.0
        
        # –†–∞–∑–ª–∏—á–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
        distance += abs(agent1.genes.success_rate - agent2.genes.success_rate)
        distance += abs(agent1.genes.speed_factor - agent2.genes.speed_factor) * 0.5
        distance += abs(agent1.genes.quality_factor - agent2.genes.quality_factor) * 0.5
        distance += abs(agent1.genes.learning_rate - agent2.genes.learning_rate) * 0.3
        
        # –†–∞–∑–ª–∏—á–∏—è –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è—Ö
        spec1 = set(agent1.genes.specialization)
        spec2 = set(agent2.genes.specialization)
        spec_distance = len(spec1.symmetric_difference(spec2)) / max(len(spec1 | spec2), 1)
        distance += spec_distance * 0.3
        
        return distance
    
    def _calculate_population_health(self, agents: List[AgentDNA]) -> float:
        """üí™ –†–∞—Å—á—ë—Ç –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–ø—É–ª—è—Ü–∏–∏"""
        if not agents:
            return 0.0
        
        # –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å
        avg_fitness = sum(self.genetics.calculate_fitness(a) for a in agents) / len(agents)
        
        # –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
        if len(agents) > 1:
            diversity = 0.0
            for i, agent1 in enumerate(agents):
                for agent2 in agents[i+1:]:
                    diversity += self._calculate_genetic_distance(agent1, agent2)
            diversity = diversity / (len(agents) * (len(agents) - 1) / 2)
        else:
            diversity = 0.5  # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        
        # –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        ages = [(datetime.now() - a.birth_time).days for a in agents]
        avg_age = sum(ages) / len(ages)
        age_health = max(0.0, 1.0 - avg_age / 60)  # –®—Ç—Ä–∞—Ñ –∑–∞ —Å—Ç–∞—Ä–æ—Å—Ç—å
        
        # –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ
        health = (avg_fitness * 0.5 + diversity * 0.3 + age_health * 0.2)
        return max(0.0, min(1.0, health))
    
    def _save_population(self):
        """üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ø—É–ª—è—Ü–∏—é –Ω–∞ –¥–∏—Å–∫"""
        try:
            population_file = self.storage_path / "population.json"
            history_file = self.storage_path / "evolution_history.json"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é
            population_data = {
                "active_agents": {k: asdict(v) for k, v in self.active_agents.items()},
                "retired_agents": {k: asdict(v) for k, v in self.retired_agents.items()},
                "settings": {
                    "max_population": self.max_population,
                    "min_population": self.min_population,
                    "retirement_age_days": self.retirement_age_days
                }
            }
            
            with open(population_file, 'w', encoding='utf-8') as f:
                json.dump(population_data, f, indent=2, default=str)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —ç–≤–æ–ª—é—Ü–∏–∏
            history_data = [asdict(event) for event in self.evolution_history[-100:]]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–±—ã—Ç–∏–π
            with open(history_file, 'w', encoding='utf-8') as f:
                json.dump(history_data, f, indent=2, default=str)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏: {e}")
    
    def _load_population(self):
        """üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ø—É–ª—è—Ü–∏—é —Å –¥–∏—Å–∫–∞"""
        try:
            population_file = self.storage_path / "population.json"
            history_file = self.storage_path / "evolution_history.json"
            
            if population_file.exists():
                with open(population_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
                for agent_id, agent_data in data.get("active_agents", {}).items():
                    agent_dna = self._dict_to_agent_dna(agent_data)
                    self.active_agents[agent_id] = agent_dna
                    self.population[agent_id] = agent_dna
                
                for agent_id, agent_data in data.get("retired_agents", {}).items():
                    agent_dna = self._dict_to_agent_dna(agent_data)
                    self.retired_agents[agent_id] = agent_dna
                    self.population[agent_id] = agent_dna
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                settings = data.get("settings", {})
                self.max_population = settings.get("max_population", self.max_population)
                self.min_population = settings.get("min_population", self.min_population)
                self.retirement_age_days = settings.get("retirement_age_days", self.retirement_age_days)
                
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—É–ª—è—Ü–∏—è: {len(self.active_agents)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
            
            if history_file.exists():
                with open(history_file, 'r', encoding='utf-8') as f:
                    history_data = json.load(f)
                
                self.evolution_history = [self._dict_to_evolution_event(event) for event in history_data]
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —ç–≤–æ–ª—é—Ü–∏–∏: {len(self.evolution_history)} —Å–æ–±—ã—Ç–∏–π")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏: {e}")
    
    def _dict_to_agent_dna(self, data: dict) -> AgentDNA:
        """üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –≤ AgentDNA"""
        genes_data = data.get("genes", {})
        genes = AgentGenes(**genes_data)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
        birth_time_str = data.get("birth_time")
        birth_time = datetime.fromisoformat(birth_time_str) if birth_time_str else datetime.now()
        
        life_span_str = data.get("life_span")
        life_span = timedelta(seconds=float(life_span_str)) if life_span_str else None
        
        return AgentDNA(
            agent_id=data["agent_id"],
            generation=data.get("generation", 0),
            parent_ids=data.get("parent_ids", []),
            birth_time=birth_time,
            genes=genes,
            mutations_count=data.get("mutations_count", 0),
            crossover_count=data.get("crossover_count", 0),
            tasks_completed=data.get("tasks_completed", 0),
            total_success_rate=data.get("total_success_rate", 0.0),
            life_span=life_span
        )
    
    def _dict_to_evolution_event(self, data: dict) -> EvolutionEvent:
        """üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –≤ EvolutionEvent"""
        timestamp_str = data.get("timestamp")
        timestamp = datetime.fromisoformat(timestamp_str) if timestamp_str else datetime.now()
        
        return EvolutionEvent(
            event_type=data["event_type"],
            timestamp=timestamp,
            agent_id=data["agent_id"],
            parent_ids=data.get("parent_ids"),
            mutation_details=data.get("mutation_details"),
            selection_reason=data.get("selection_reason"),
            fitness_before=data.get("fitness_before", 0.0),
            fitness_after=data.get("fitness_after", 0.0),
            success_improvement=data.get("success_improvement", 0.0)
        )


# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

_global_evolutionary_factory = None

def get_evolutionary_factory(storage_path: str = "./evolutionary_storage") -> EvolutionaryAgentFactory:
    """üß¨ –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏"""
    global _global_evolutionary_factory
    if _global_evolutionary_factory is None:
        _global_evolutionary_factory = EvolutionaryAgentFactory(storage_path)
    return _global_evolutionary_factory

def spawn_evolved_agent(agent_type: str = "general", specialization: List[str] = None) -> AgentDNA:
    """üå± –°–æ–∑–¥–∞—Ç—å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    factory = get_evolutionary_factory()
    return factory.spawn_agent(agent_type, specialization)

def update_agent_evolution(agent_id: str, task_success: bool, task_duration: float = 0.0):
    """üìä –û–±–Ω–æ–≤–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞"""
    factory = get_evolutionary_factory()
    factory.update_agent_performance(agent_id, task_success, task_duration)

def get_evolution_stats() -> PopulationStats:
    """üìà –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–≤–æ–ª—é—Ü–∏–∏"""
    factory = get_evolutionary_factory()
    return factory.get_population_stats()


if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
    print("üß¨ –¢–µ—Å—Ç EvolutionaryAgentFactory")
    
    factory = EvolutionaryAgentFactory("./test_evolution")
    
    # –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤
    agent1 = factory.spawn_agent("code", ["python", "web"])
    agent2 = factory.spawn_agent("analysis", ["data", "statistics"])
    agent3 = factory.spawn_agent("web", ["frontend", "design"])
    
    print(f"–°–æ–∑–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(factory.active_agents)}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    factory.update_agent_performance(agent1.agent_id, True)
    factory.update_agent_performance(agent1.agent_id, True)
    factory.update_agent_performance(agent2.agent_id, False)
    factory.update_agent_performance(agent3.agent_id, True)
    
    # –≠–≤–æ–ª—é—Ü–∏—è
    factory.evolve_population(force_evolution=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = factory.get_population_stats()
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats.active_agents} –∞–∫—Ç–∏–≤–Ω—ã—Ö, –ø–æ–∫–æ–ª–µ–Ω–∏–µ {stats.max_generation}")
    print(f"–õ—É—á—à–∏–π —É—Å–ø–µ—Ö: {stats.best_success_rate:.2f}")
    print(f"–ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–ø—É–ª—è—Ü–∏–∏: {stats.population_health:.2f}")
    
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!") 