/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => KittyCorePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var KittyCoreSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "\u{1F431} KittyCore 3.0 - \u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438" });
    new import_obsidian.Setting(containerEl).setName("URL API KittyCore").setDesc("\u0410\u0434\u0440\u0435\u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 KittyCore (\u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440: http://localhost:8003)").addText((text) => text.setPlaceholder("http://localhost:8003").setValue(this.plugin.settings.kittycoreApiUrl).onChange(async (value) => {
      this.plugin.settings.kittycoreApiUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API \u043A\u043B\u044E\u0447").setDesc("OpenRouter API \u043A\u043B\u044E\u0447 \u0434\u043B\u044F LLM (sk-or-v1-...)").addText((text) => text.setPlaceholder("sk-or-v1-...").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u0410\u0432\u0442\u043E\u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435 \u043A\u043E\u0434\u0430").setDesc("\u0410\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438 \u0432\u044B\u043F\u043E\u043B\u043D\u044F\u0442\u044C \u043A\u043E\u0434 \u0432 \u0431\u043B\u043E\u043A\u0430\u0445 Python").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoExecuteCode).onChange(async (value) => {
      this.plugin.settings.autoExecuteCode = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u0421\u0438\u043D\u0445\u0440\u043E\u043D\u0438\u0437\u0430\u0446\u0438\u044F \u0433\u0440\u0430\u0444\u0430").setDesc("\u0410\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438 \u043E\u0431\u043D\u043E\u0432\u043B\u044F\u0442\u044C \u0433\u0440\u0430\u0444 \u0441\u0432\u044F\u0437\u0435\u0439").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableGraphSync).onChange(async (value) => {
      this.plugin.settings.enableGraphSync = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/dashboard.ts
var import_obsidian3 = require("obsidian");

// src/api-client.ts
var import_obsidian2 = require("obsidian");
var KittyCoreAPI = class {
  constructor(plugin) {
    this.isConnected = false;
    this.plugin = plugin;
    this.baseUrl = plugin.settings.kittycoreApiUrl;
  }
  // Проверка подключения к API
  async checkConnection() {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5e3);
      const response = await fetch(`${this.baseUrl}/api/status`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "X-API-Key": this.plugin.settings.apiKey
        },
        signal: controller.signal
      });
      clearTimeout(timeoutId);
      if (response.ok) {
        this.isConnected = true;
        return true;
      } else {
        this.isConnected = false;
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
    } catch (error) {
      this.isConnected = false;
      console.error("KittyCore API connection failed:", error);
      return false;
    }
  }
  // Получить статус системы
  async getSystemStatus() {
    try {
      const response = await fetch(`${this.baseUrl}/api/status`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "X-API-Key": this.plugin.settings.apiKey
        }
      });
      if (response.ok) {
        const data = await response.json();
        return {
          api_online: data.status === "active",
          total_agents: 0,
          // Простой API не возвращает эту информацию
          active_tasks: 0,
          completed_tasks: 0,
          success_rate: 100,
          last_task_time: data.timestamp,
          uptime: "Running"
        };
      } else {
        throw new Error(`Failed to get system status: ${response.statusText}`);
      }
    } catch (error) {
      console.error("Error getting system status:", error);
      return {
        api_online: false,
        total_agents: 0,
        active_tasks: 0,
        completed_tasks: 0,
        success_rate: 0,
        last_task_time: "Unknown",
        uptime: "Disconnected"
      };
    }
  }
  // Получить список агентов
  async getAgents() {
    try {
      const response = await fetch(`${this.baseUrl}/api/agents`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "X-API-Key": this.plugin.settings.apiKey
        }
      });
      if (response.ok) {
        return await response.json();
      } else {
        throw new Error(`Failed to get agents: ${response.statusText}`);
      }
    } catch (error) {
      console.error("Error getting agents:", error);
      return [];
    }
  }
  // Создать нового агента (заглушка для простого API)
  async createAgent(name, type = "generic", capabilities = []) {
    new import_obsidian2.Notice(`\u{1F4DD} \u0410\u0433\u0435\u043D\u0442 ${name} \u0431\u0443\u0434\u0435\u0442 \u0441\u043E\u0437\u0434\u0430\u043D \u043B\u043E\u043A\u0430\u043B\u044C\u043D\u043E (\u043F\u0440\u043E\u0441\u0442\u043E\u0439 \u0440\u0435\u0436\u0438\u043C API)`);
    return true;
  }
  // Запустить задачу (упрощённая версия для простого API)
  async executeTask(taskRequest) {
    const taskId = `task_${Date.now()}`;
    new import_obsidian2.Notice(`\u{1F4CB} \u0417\u0430\u0434\u0430\u0447\u0430 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0430: ${taskRequest.description.substring(0, 50)}...`);
    return {
      task_id: taskId,
      status: "pending",
      agents_involved: ["simple-api"],
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
  }
  // Получить статус задачи
  async getTaskStatus(taskId) {
    try {
      const response = await fetch(`${this.baseUrl}/api/tasks/${taskId}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "X-API-Key": this.plugin.settings.apiKey
        }
      });
      if (response.ok) {
        return await response.json();
      } else {
        throw new Error(`Failed to get task status: ${response.statusText}`);
      }
    } catch (error) {
      console.error("Error getting task status:", error);
      return null;
    }
  }
  // Получить логи системы
  async getSystemLogs(limit = 50) {
    try {
      const response = await fetch(`${this.baseUrl}/api/logs?limit=${limit}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "X-API-Key": this.plugin.settings.apiKey
        }
      });
      if (response.ok) {
        const data = await response.json();
        return data.logs || [];
      } else {
        throw new Error(`Failed to get logs: ${response.statusText}`);
      }
    } catch (error) {
      console.error("Error getting logs:", error);
      return [];
    }
  }
  // Установить WebSocket соединение для real-time обновлений
  connectWebSocket(onMessage) {
    if (!this.isConnected) {
      console.warn("API not connected, skipping WebSocket connection");
      return null;
    }
    try {
      const wsUrl = this.baseUrl.replace("http", "ws") + "/ws/dashboard";
      const ws = new WebSocket(wsUrl);
      ws.onopen = () => {
        console.log("KittyCore WebSocket connected");
        new import_obsidian2.Notice("\u{1F517} Real-time \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u0430\u043A\u0442\u0438\u0432\u043D\u043E");
      };
      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          onMessage(data);
        } catch (error) {
          console.error("Error parsing WebSocket message:", error);
        }
      };
      ws.onerror = (error) => {
        console.error("WebSocket error:", error);
        new import_obsidian2.Notice("\u274C \u041E\u0448\u0438\u0431\u043A\u0430 WebSocket \u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F");
      };
      ws.onclose = () => {
        console.log("WebSocket connection closed");
        new import_obsidian2.Notice("\u{1F50C} Real-time \u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 \u0437\u0430\u043A\u0440\u044B\u0442\u043E");
      };
      return ws;
    } catch (error) {
      console.error("Error connecting WebSocket:", error);
      return null;
    }
  }
  // Геттеры
  get connected() {
    return this.isConnected;
  }
  get url() {
    return this.baseUrl;
  }
  // Обновить URL API
  updateBaseUrl(newUrl) {
    this.baseUrl = newUrl;
    this.isConnected = false;
  }
};

// src/dashboard.ts
var DASHBOARD_VIEW_TYPE = "kittycore-dashboard";
var KittyCoreDashboard = class extends import_obsidian3.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.websocket = null;
    this.systemStatus = null;
    this.plugin = plugin;
    this.api = new KittyCoreAPI(plugin);
  }
  getViewType() {
    return DASHBOARD_VIEW_TYPE;
  }
  getDisplayText() {
    return "\u{1F916} KittyCore Dashboard";
  }
  getIcon() {
    return "robot";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("kittycore-dashboard-view");
    this.createHeader(container);
    this.createStatusSection(container);
    this.createCommandsSection(container);
    this.createLogsSection(container);
    this.createQuickActions(container);
    await this.initializeAPI();
    await this.updateStatus();
    this.setupWebSocket();
  }
  createHeader(container) {
    const header = container.createEl("div", { cls: "kittycore-dashboard-header" });
    header.createEl("h1", { text: "\u{1F431} KittyCore 3.0 Dashboard" });
    header.createEl("p", { text: "\u0421\u0430\u043C\u043E\u0440\u0435\u0434\u0443\u043F\u043B\u0438\u0446\u0438\u0440\u0443\u044E\u0449\u0430\u044F\u0441\u044F \u0430\u0433\u0435\u043D\u0442\u043D\u0430\u044F \u0441\u0438\u0441\u0442\u0435\u043C\u0430" });
  }
  createStatusSection(container) {
    const section = container.createEl("div", { cls: "kittycore-section" });
    section.createEl("h2", { text: "\u{1F4CA} \u0421\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043C\u044B" });
    this.statusElement = section.createEl("div", { cls: "kittycore-status-grid" });
    this.updateStatus();
  }
  createCommandsSection(container) {
    const section = container.createEl("div", { cls: "kittycore-section" });
    section.createEl("h2", { text: "\u{1F680} \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435" });
    this.commandsElement = section.createEl("div", { cls: "kittycore-commands-grid" });
    const button = this.commandsElement.createEl("button", {
      cls: "kittycore-command-btn",
      text: "\u26A1 \u0414\u0430\u0442\u044C \u0430\u0433\u0435\u043D\u0442\u0430\u043C \u0437\u0430\u0434\u0430\u0447\u0443"
    });
    const handleClick = async (e) => {
      e.preventDefault();
      e.stopPropagation();
      console.log("KittyCore: \u041A\u043D\u043E\u043F\u043A\u0430 \u043D\u0430\u0436\u0430\u0442\u0430!");
      this.logAction('\u{1F5B1}\uFE0F \u041A\u043D\u043E\u043F\u043A\u0430 "\u0414\u0430\u0442\u044C \u0430\u0433\u0435\u043D\u0442\u0430\u043C \u0437\u0430\u0434\u0430\u0447\u0443" \u043D\u0430\u0436\u0430\u0442\u0430');
      button.disabled = true;
      button.textContent = "\u23F3 \u041E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430...";
      try {
        await this.executeTask();
      } catch (error) {
        console.error("KittyCore: \u041E\u0448\u0438\u0431\u043A\u0430 \u0432 executeTask:", error);
        this.logAction(`\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0432 executeTask: ${error}`);
        new import_obsidian3.Notice(`\u274C \u041E\u0448\u0438\u0431\u043A\u0430: ${error}`);
      } finally {
        button.disabled = false;
        button.textContent = "\u26A1 \u0414\u0430\u0442\u044C \u0430\u0433\u0435\u043D\u0442\u0430\u043C \u0437\u0430\u0434\u0430\u0447\u0443";
      }
    };
    button.addEventListener("click", handleClick);
    console.log("KittyCore: \u041A\u043D\u043E\u043F\u043A\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0430 \u0438 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D");
    this.logAction('\u2705 \u041A\u043D\u043E\u043F\u043A\u0430 "\u0414\u0430\u0442\u044C \u0430\u0433\u0435\u043D\u0442\u0430\u043C \u0437\u0430\u0434\u0430\u0447\u0443" \u0433\u043E\u0442\u043E\u0432\u0430 \u043A \u0440\u0430\u0431\u043E\u0442\u0435');
  }
  createLogsSection(container) {
    const section = container.createEl("div", { cls: "kittycore-section" });
    section.createEl("h2", { text: "\u{1F4CB} \u041B\u043E\u0433\u0438 \u043E\u0442\u043B\u0430\u0434\u043A\u0438" });
    this.logsElement = section.createEl("div", { cls: "kittycore-logs" });
    this.loadRecentLogs();
  }
  createQuickActions(container) {
    const section = container.createEl("div", { cls: "kittycore-section" });
    section.createEl("h2", { text: "\u{1F680} \u0411\u044B\u0441\u0442\u0440\u044B\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044F" });
    const actionsGrid = section.createEl("div", { cls: "kittycore-actions-grid" });
    const quickActions = [
      { name: "Nova Agent", type: "agent", template: "nova" },
      { name: "Artemis Agent", type: "agent", template: "artemis" },
      { name: "Cipher Agent", type: "agent", template: "cipher" },
      { name: "Ada Agent", type: "agent", template: "ada" },
      { name: "\u041D\u043E\u0432\u0430\u044F \u0437\u0430\u0434\u0430\u0447\u0430", type: "task", template: "generic" },
      { name: "\u041E\u0442\u0447\u0451\u0442 \u043A\u043E\u043C\u0430\u043D\u0434\u044B", type: "report", template: "team" }
    ];
    quickActions.forEach((action) => {
      const btn = actionsGrid.createEl("button", {
        cls: "kittycore-quick-action",
        text: action.name
      });
      btn.onclick = () => this.createFromTemplate(action.type, action.template);
    });
  }
  async updateStatus() {
    var _a, _b, _c, _d, _e, _f, _g;
    if (!this.statusElement)
      return;
    this.statusElement.empty();
    await this.refreshSystemStatus();
    const apiStatus = this.api.connected ? "\u{1F7E2} \u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0451\u043D" : "\u{1F534} \u041E\u0442\u043A\u043B\u044E\u0447\u0435\u043D";
    const apiStatusType = this.api.connected ? "good" : "error";
    const stats = [
      { label: "\u041F\u043B\u0430\u0433\u0438\u043D", value: "\u{1F7E2} \u0410\u043A\u0442\u0438\u0432\u0435\u043D", status: "good" },
      { label: "API", value: apiStatus, status: apiStatusType },
      {
        label: "\u0410\u0433\u0435\u043D\u0442\u043E\u0432",
        value: ((_b = (_a = this.systemStatus) == null ? void 0 : _a.total_agents) == null ? void 0 : _b.toString()) || "0",
        status: "info"
      },
      {
        label: "\u0417\u0430\u043C\u0435\u0442\u043E\u043A",
        value: this.getNotesCount().toString(),
        status: "info"
      },
      {
        label: "\u0410\u043A\u0442\u0438\u0432\u043D\u044B\u0445 \u0437\u0430\u0434\u0430\u0447",
        value: ((_d = (_c = this.systemStatus) == null ? void 0 : _c.active_tasks) == null ? void 0 : _d.toString()) || "0",
        status: ((_e = this.systemStatus) == null ? void 0 : _e.active_tasks) ? "warning" : "good"
      },
      {
        label: "\u0423\u0441\u043F\u0435\u0448\u043D\u043E\u0441\u0442\u044C",
        value: ((_f = this.systemStatus) == null ? void 0 : _f.success_rate) ? `${Math.round(this.systemStatus.success_rate)}%` : "0%",
        status: ((_g = this.systemStatus) == null ? void 0 : _g.success_rate) && this.systemStatus.success_rate > 80 ? "good" : "warning"
      }
    ];
    stats.forEach((stat) => {
      const item = this.statusElement.createEl("div", { cls: `kittycore-stat kittycore-stat-${stat.status}` });
      item.createEl("div", { cls: "kittycore-stat-label", text: stat.label });
      item.createEl("div", { cls: "kittycore-stat-value", text: stat.value });
    });
  }
  getNotesCount() {
    return this.app.vault.getMarkdownFiles().filter((file) => file.path.startsWith("KittyCore/")).length;
  }
  // Обновить статус системы через API
  async refreshSystemStatus() {
    try {
      const connected = await this.api.checkConnection();
      if (connected) {
        this.systemStatus = {
          api_online: true,
          total_agents: 1,
          // Простой API = 1 агент
          active_tasks: 0,
          completed_tasks: 0,
          success_rate: 100,
          last_task_time: new Date().toISOString(),
          uptime: "Running"
        };
        this.logAction(`\u2705 API \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0451\u043D: ${this.api.url}`);
      } else {
        this.systemStatus = null;
        this.logAction(`\u274C API \u043D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u0435\u043D: ${this.api.url}`);
      }
    } catch (error) {
      this.systemStatus = null;
      this.logAction(`\u274C \u041E\u0448\u0438\u0431\u043A\u0430 API: ${error}`);
    }
  }
  async createAgent() {
    const name = prompt("\u0418\u043C\u044F \u0430\u0433\u0435\u043D\u0442\u0430:");
    if (!name)
      return;
    if (this.api.connected) {
      const success = await this.api.createAgent(name, "generic", ["analysis", "tasks"]);
      if (success) {
        await this.createFromTemplate("agent", "generic", name);
        this.logAction(`\u0410\u0433\u0435\u043D\u0442 ${name} \u0441\u043E\u0437\u0434\u0430\u043D \u0432 KittyCore \u0438 Obsidian`);
      }
    } else {
      await this.createFromTemplate("agent", "generic", name);
      this.logAction(`\u0410\u0433\u0435\u043D\u0442 ${name} \u0441\u043E\u0437\u0434\u0430\u043D \u043B\u043E\u043A\u0430\u043B\u044C\u043D\u043E (API \u043D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u0435\u043D)`);
    }
  }
  async executeTask() {
    console.log("KittyCore: executeTask \u0432\u044B\u0437\u0432\u0430\u043D");
    this.logAction("\u{1F680} \u0417\u0430\u043F\u0443\u0441\u043A executeTask...");
    this.logAction(`\u{1F50D} API URL: ${this.api.url}`);
    this.logAction(`\u{1F50D} API \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0451\u043D: ${this.api.connected}`);
    const task = prompt("\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:");
    if (!task) {
      console.log("KittyCore: \u0417\u0430\u0434\u0430\u0447\u0430 \u043E\u0442\u043C\u0435\u043D\u0435\u043D\u0430 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u043C");
      this.logAction("\u274C \u0417\u0430\u0434\u0430\u0447\u0430 \u043E\u0442\u043C\u0435\u043D\u0435\u043D\u0430 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u043C");
      return;
    }
    console.log("KittyCore: \u0417\u0430\u0434\u0430\u0447\u0430 \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u0430:", task);
    this.logAction(`\u{1F4DD} \u041F\u043E\u043B\u0443\u0447\u0435\u043D\u0430 \u0437\u0430\u0434\u0430\u0447\u0430: ${task}`);
    this.logAction("\u{1F517} \u041F\u0440\u043E\u0432\u0435\u0440\u044F\u0435\u043C \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u043A API...");
    const isConnected = await this.api.checkConnection();
    this.logAction(`\u{1F517} \u0420\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442 \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0438: ${isConnected}`);
    if (isConnected) {
      console.log("KittyCore: API \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0451\u043D, \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u044F\u0435\u043C \u0437\u0430\u0434\u0430\u0447\u0443");
      this.logAction("\u{1F517} API \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0451\u043D, \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u044F\u0435\u043C \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 KittyCore...");
      try {
        const result = await this.api.executeTask({
          description: task,
          priority: "medium",
          requester: "obsidian-user"
        });
        if (result) {
          console.log("KittyCore: \u0417\u0430\u0434\u0430\u0447\u0430 \u0443\u0441\u043F\u0435\u0448\u043D\u043E \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0430:", result);
          this.logAction(`\u2705 \u0417\u0430\u0434\u0430\u0447\u0430 \u0437\u0430\u043F\u0443\u0449\u0435\u043D\u0430 \u0432 KittyCore: ${result.task_id}`);
          new import_obsidian3.Notice(`\u{1F680} \u0417\u0430\u0434\u0430\u0447\u0430 \u0437\u0430\u043F\u0443\u0449\u0435\u043D\u0430! ID: ${result.task_id}`);
        } else {
          console.log("KittyCore: \u041D\u0435 \u043F\u043E\u043B\u0443\u0447\u0435\u043D \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442 \u043E\u0442 API");
          this.logAction("\u274C \u041D\u0435 \u043F\u043E\u043B\u0443\u0447\u0435\u043D \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442 \u043E\u0442 API");
          new import_obsidian3.Notice("\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u043E\u0442\u043F\u0440\u0430\u0432\u043A\u0438 \u0437\u0430\u0434\u0430\u0447\u0438");
        }
      } catch (error) {
        console.error("KittyCore: \u041E\u0448\u0438\u0431\u043A\u0430 \u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F \u0437\u0430\u0434\u0430\u0447\u0438:", error);
        this.logAction(`\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F \u0437\u0430\u0434\u0430\u0447\u0438: ${error}`);
        new import_obsidian3.Notice(`\u274C \u041E\u0448\u0438\u0431\u043A\u0430: ${error}`);
      }
    } else {
      console.log("KittyCore: API \u043D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u0435\u043D, \u0441\u043E\u0445\u0440\u0430\u043D\u044F\u0435\u043C \u043B\u043E\u043A\u0430\u043B\u044C\u043D\u043E");
      this.logAction(`\u{1F4DD} API \u043D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u0435\u043D. \u0417\u0430\u0434\u0430\u0447\u0430 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0430 \u043B\u043E\u043A\u0430\u043B\u044C\u043D\u043E: ${task}`);
      new import_obsidian3.Notice("\u26A0\uFE0F API \u043D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u0435\u043D. \u0417\u0430\u0434\u0430\u0447\u0430 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0430 \u043B\u043E\u043A\u0430\u043B\u044C\u043D\u043E.");
      try {
        await this.createFromTemplate("task", "user-request", `\u0417\u0430\u0434\u0430\u0447\u0430-${Date.now()}`);
      } catch (error) {
        console.error("KittyCore: \u041E\u0448\u0438\u0431\u043A\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F \u043B\u043E\u043A\u0430\u043B\u044C\u043D\u043E\u0439 \u0437\u0430\u0434\u0430\u0447\u0438:", error);
      }
    }
  }
  async openGraph() {
    const leaf = this.app.workspace.getLeaf("split", "horizontal");
    await leaf.openFile(this.app.vault.getAbstractFileByPath("KittyCore/KittyCore-Overview.md"));
    this.app.workspace.setActiveLeaf(leaf);
  }
  async checkAPI() {
    this.logAction("\u{1F50D} \u041F\u0440\u043E\u0432\u0435\u0440\u044F\u0435\u043C \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u043A API...");
    const connected = await this.api.checkConnection();
    if (connected) {
      await this.refreshSystemStatus();
      this.logAction(`\u2705 API \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0451\u043D: ${this.api.url}`);
      new import_obsidian3.Notice("\u2705 API \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0451\u043D!");
    } else {
      this.logAction(`\u274C API \u043D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u0435\u043D: ${this.api.url}`);
      new import_obsidian3.Notice("\u274C API \u043D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u0435\u043D!");
    }
    await this.updateStatus();
  }
  clearLogs() {
    if (this.logsElement) {
      this.logsElement.empty();
      const logLine = this.logsElement.createEl("div", {
        cls: "kittycore-log-line",
        text: `[${new Date().toLocaleString()}] \u{1F9F9} \u041B\u043E\u0433\u0438 \u043E\u0447\u0438\u0449\u0435\u043D\u044B`
      });
    }
  }
  openSettings() {
    this.app.setting.open();
    this.app.setting.openTabById("kittycore-plugin");
  }
  async createFromTemplate(type, template, name) {
    const timestamp = new Date().toISOString();
    const agentName = name || prompt(`\u0418\u043C\u044F \u0434\u043B\u044F ${type}:`);
    if (!agentName)
      return;
    const content = this.generateTemplate(type, template, agentName, timestamp);
    const folder = this.getFolderForType(type);
    const fileName = `${folder}/${agentName}-${template}.md`;
    try {
      const folderPath = folder.split("/").slice(0, -1).join("/");
      if (folderPath) {
        try {
          await this.app.vault.createFolder(folderPath);
        } catch (e) {
        }
      }
      await this.app.vault.create(fileName, content);
      new import_obsidian3.Notice(`\u2705 \u0421\u043E\u0437\u0434\u0430\u043D\u043E: ${fileName}`);
      this.logAction(`\u0421\u043E\u0437\u0434\u0430\u043D ${type}: ${agentName} (${template})`);
      const file = this.app.vault.getAbstractFileByPath(fileName);
      const leaf = this.app.workspace.getLeaf("split", "horizontal");
      await leaf.openFile(file);
    } catch (error) {
      new import_obsidian3.Notice(`\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F: ${error}`);
      this.logAction(`\u041E\u0448\u0438\u0431\u043A\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F ${type}: ${error}`);
    }
  }
  getFolderForType(type) {
    const folders = {
      agent: "KittyCore/Agents",
      task: "KittyCore/Tasks",
      result: "KittyCore/Results",
      report: "KittyCore/Reports"
    };
    return folders[type] || "KittyCore";
  }
  generateTemplate(type, template, name, timestamp) {
    const baseTemplate = `---
type: ${type}
created: ${timestamp}
name: ${name}
template: ${template}
tags: [kittycore, ${type}, ${template}]
kittycore_version: "3.0"
status: created
---

# ${type === "agent" ? "\u{1F916}" : "\u{1F4CB}"} ${name}

## \u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435
${type === "agent" ? "\u0421\u043F\u0435\u0446\u0438\u0430\u043B\u0438\u0437\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439 \u0430\u0433\u0435\u043D\u0442 KittyCore 3.0" : "\u0417\u0430\u0434\u0430\u0447\u0430 \u0434\u043B\u044F \u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F"}

## \u0421\u0442\u0430\u0442\u0443\u0441
- **\u0421\u043E\u0437\u0434\u0430\u043D**: ${new Date().toLocaleString()}
- **\u0422\u0438\u043F**: ${template}
- **\u0421\u0442\u0430\u0442\u0443\u0441**: \u0413\u043E\u0442\u043E\u0432 \u043A \u0440\u0430\u0431\u043E\u0442\u0435

## \u0421\u0432\u044F\u0437\u0430\u043D\u043D\u044B\u0435 \u0437\u0430\u043C\u0435\u0442\u043A\u0438
- [[KittyCore-Overview]] - \u041E\u0431\u0437\u043E\u0440 \u0441\u0438\u0441\u0442\u0435\u043C\u044B

## \u041B\u043E\u0433\u0438
\`\`\`
[${new Date().toLocaleString()}] ${type} \u0441\u043E\u0437\u0434\u0430\u043D
\`\`\`

---
*\u0421\u043E\u0437\u0434\u0430\u043D\u043E \u0430\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438 \u0447\u0435\u0440\u0435\u0437 KittyCore Dashboard* \u{1F916}
`;
    return baseTemplate;
  }
  async loadRecentLogs() {
    const logFile = this.app.vault.getAbstractFileByPath("KittyCore/\u{1F41B} Debug Logs.md");
    if (logFile && logFile instanceof import_obsidian3.TFile) {
      const content = await this.app.vault.read(logFile);
      const lines = content.split("\n").slice(-10);
      this.logsElement.innerHTML = lines.map((line) => `<div class="kittycore-log-line">${line}</div>`).join("");
    }
  }
  async logAction(message) {
    const timestamp = new Date().toLocaleString();
    const logEntry = `[${timestamp}] ${message}`;
    await this.saveLogToFile(logEntry);
  }
  async saveLogToFile(logEntry) {
    const logPath = "KittyCore/\u{1F41B} Debug Logs.md";
    let logContent = "";
    try {
      const logFile = this.app.vault.getAbstractFileByPath(logPath);
      if (logFile && logFile instanceof import_obsidian3.TFile) {
        logContent = await this.app.vault.read(logFile);
      }
    } catch (_) {
    }
    logContent += `
${logEntry}`;
    try {
      const logFile = this.app.vault.getAbstractFileByPath(logPath);
      if (logFile && logFile instanceof import_obsidian3.TFile) {
        await this.app.vault.modify(logFile, logContent);
      } else {
        await this.app.vault.create(logPath, logContent);
      }
    } catch (e) {
      console.error("KittyCore: \u041E\u0448\u0438\u0431\u043A\u0430 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u044F \u043B\u043E\u0433\u0430", e);
    }
  }
  async onClose() {
    if (this.websocket) {
      this.websocket.close();
      this.websocket = null;
    }
  }
  setupWebSocket() {
    if (!this.api.connected)
      return;
    try {
      const wsUrl = this.api.url.replace("http://", "ws://").replace("https://", "wss://") + "/ws";
      this.websocket = new WebSocket(wsUrl);
      this.websocket.onopen = () => this.logAction("\u{1F517} WebSocket \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0451\u043D");
      this.websocket.onclose = () => this.logAction("\u{1F50C} WebSocket \u043E\u0442\u043A\u043B\u044E\u0447\u0451\u043D");
      this.websocket.onerror = (err) => this.logAction(`WebSocket \u043E\u0448\u0438\u0431\u043A\u0430: ${err}`);
      this.websocket.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          this.handleWebSocketMessage(data);
        } catch (e) {
          this.logAction(`WebSocket parse error: ${e}`);
        }
      };
    } catch (err) {
      this.logAction(`\u041E\u0448\u0438\u0431\u043A\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F WebSocket: ${err}`);
    }
  }
  handleWebSocketMessage(data) {
    switch (data.type) {
      case "status_update":
        this.systemStatus = data.payload;
        this.updateStatus();
        break;
      case "task_started":
        this.logAction(`\u26A1 \u0417\u0430\u0434\u0430\u0447\u0430 \u0437\u0430\u043F\u0443\u0449\u0435\u043D\u0430: ${data.payload.task_id}`);
        break;
      case "task_completed":
        this.logAction(`\u2705 \u0417\u0430\u0434\u0430\u0447\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u0430: ${data.payload.task_id}`);
        break;
      default:
        this.logAction(`\u{1F4E8} WS: ${JSON.stringify(data)}`);
    }
  }
  async initializeAPI() {
    try {
      this.logAction("\u{1F50D} \u0418\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u044F API...");
      const connected = await this.api.checkConnection();
      if (connected) {
        this.logAction(`\u2705 API \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0451\u043D: ${this.api.url}`);
        console.log("KittyCore: API \u0443\u0441\u043F\u0435\u0448\u043D\u043E \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0451\u043D");
      } else {
        this.logAction(`\u274C API \u043D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u0435\u043D: ${this.api.url}`);
        console.log("KittyCore: API \u043D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u0435\u043D");
      }
    } catch (error) {
      this.logAction(`\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438 API: ${error}`);
      console.error("KittyCore: \u041E\u0448\u0438\u0431\u043A\u0430 \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438 API:", error);
    }
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  kittycoreApiUrl: "http://localhost:8003",
  autoExecuteCode: true,
  enableGraphSync: true,
  apiKey: ""
};
var KittyCorePlugin = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      DASHBOARD_VIEW_TYPE,
      (leaf) => new KittyCoreDashboard(leaf, this)
    );
    this.addRibbonIcon("robot", "KittyCore: \u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043F\u0430\u043D\u0435\u043B\u044C \u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F", () => {
      this.openDashboard();
    });
    this.addCommand({
      id: "open-dashboard",
      name: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043F\u0440\u0438\u0431\u043E\u0440\u043D\u0443\u044E \u043F\u0430\u043D\u0435\u043B\u044C KittyCore",
      callback: () => this.openDashboard()
    });
    this.addCommand({
      id: "create-agent-note",
      name: "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u0437\u0430\u043C\u0435\u0442\u043A\u0443 \u0430\u0433\u0435\u043D\u0442\u0430",
      callback: () => this.createAgentNote()
    });
    this.addCommand({
      id: "open-graph-split",
      name: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0433\u0440\u0430\u0444 \u0432 \u043D\u043E\u0432\u043E\u0439 \u043F\u0430\u043D\u0435\u043B\u0438",
      callback: () => this.openGraphInSplit()
    });
    this.addSettingTab(new KittyCoreSettingTab(this.app, this));
    this.setupGraphNavigation();
    console.log("\u{1F680} KittyCore 3.0 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D \u0432 Obsidian!");
  }
  onunload() {
    console.log("\u{1F44B} KittyCore \u0432\u044B\u0433\u0440\u0443\u0436\u0435\u043D");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // Создание заметки агента
  async createAgentNote() {
    const agentName = await this.promptForAgentName();
    if (!agentName)
      return;
    const agentContent = `---
type: agent
created: ${new Date().toISOString()}
agent_name: ${agentName}
capabilities: []
tags: [agent, kittycore]
---

# ${agentName}

## \u0421\u043F\u0435\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u044F
\u0423\u043D\u0438\u0432\u0435\u0440\u0441\u0430\u043B\u044C\u043D\u044B\u0439 \u0430\u0433\u0435\u043D\u0442 KittyCore 3.0

## \u0412\u043E\u0437\u043C\u043E\u0436\u043D\u043E\u0441\u0442\u0438
- \u0412\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435 \u0437\u0430\u0434\u0430\u0447
- \u0421\u043E\u0437\u0434\u0430\u043D\u0438\u0435 \u0437\u0430\u043C\u0435\u0442\u043E\u043A
- \u0410\u043D\u0430\u043B\u0438\u0437 \u0434\u0430\u043D\u043D\u044B\u0445

## \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043A\u0430
- \u0421\u043E\u0437\u0434\u0430\u043D: ${new Date().toLocaleString()}
- \u0417\u0430\u0434\u0430\u0447 \u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u043E: 0
- \u0423\u0441\u043F\u0435\u0448\u043D\u043E\u0441\u0442\u044C: 0%

## \u0422\u0435\u0433\u0438
#agent #kittycore #${agentName.toLowerCase()}
`;
    const agentsFolder = "KittyCore/Agents";
    try {
      await this.app.vault.createFolder(agentsFolder).catch(() => {
      });
    } catch (e) {
    }
    const fileName = `${agentsFolder}/${agentName}-Agent.md`;
    try {
      await this.app.vault.create(fileName, agentContent);
      new import_obsidian4.Notice(`\u2705 \u0410\u0433\u0435\u043D\u0442 ${agentName} \u0441\u043E\u0437\u0434\u0430\u043D \u0432 ${fileName}!`);
    } catch (error) {
      new import_obsidian4.Notice(`\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F \u0430\u0433\u0435\u043D\u0442\u0430: ${error}`);
      console.error("KittyCore Plugin Error:", error);
    }
  }
  // Простой промпт для ввода имени агента
  async promptForAgentName() {
    return new Promise((resolve) => {
      const name = prompt("\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043C\u044F \u0430\u0433\u0435\u043D\u0442\u0430:");
      resolve(name);
    });
  }
  // Открыть приборную панель
  async openDashboard() {
    const existing = this.app.workspace.getLeavesOfType(DASHBOARD_VIEW_TYPE);
    if (existing.length > 0) {
      this.app.workspace.setActiveLeaf(existing[0]);
      return;
    }
    const leaf = this.app.workspace.getLeftLeaf(false);
    await leaf.setViewState({
      type: DASHBOARD_VIEW_TYPE,
      active: true
    });
  }
  // Открыть граф в новой панели справа
  async openGraphInSplit() {
    try {
      const activeFile = this.app.workspace.getActiveFile();
      if (!activeFile) {
        new import_obsidian4.Notice("\u0421\u043D\u0430\u0447\u0430\u043B\u0430 \u043E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 \u0444\u0430\u0439\u043B \u0434\u043B\u044F \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F \u0441\u0432\u044F\u0437\u0438");
        return;
      }
      const leaf = this.app.workspace.getLeaf("split", "horizontal");
      await leaf.setViewState({
        type: "graph",
        active: true
      });
      new import_obsidian4.Notice("\u{1F4CA} \u0413\u0440\u0430\u0444 \u043E\u0442\u043A\u0440\u044B\u0442 \u0432 \u043D\u043E\u0432\u043E\u0439 \u043F\u0430\u043D\u0435\u043B\u0438");
    } catch (error) {
      new import_obsidian4.Notice(`\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u043E\u0442\u043A\u0440\u044B\u0442\u0438\u044F \u0433\u0440\u0430\u0444\u0430: ${error}`);
    }
  }
  // Настройка улучшенной навигации по графу
  setupGraphNavigation() {
    this.registerDomEvent(document, "click", (evt) => {
      const target = evt.target;
      if (target.closest(".graph-view") && target.classList.contains("node")) {
        const nodeTitle = target.getAttribute("data-title") || target.textContent;
        if (nodeTitle && evt.ctrlKey) {
          evt.preventDefault();
          this.openFileInSplit(nodeTitle);
        }
      }
    });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (file.path.startsWith("KittyCore/")) {
          menu.addItem((item) => {
            item.setTitle("\u{1F517} \u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0432 \u043D\u043E\u0432\u043E\u0439 \u043F\u0430\u043D\u0435\u043B\u0438").setIcon("split-horizontal").onClick(() => {
              this.openFileInSplit(file.basename);
            });
          });
        }
      })
    );
  }
  // Открыть файл в новой панели справа
  async openFileInSplit(fileName) {
    try {
      const files = this.app.vault.getMarkdownFiles();
      const file = files.find(
        (f) => f.basename === fileName || f.path.includes(fileName) || f.name === fileName + ".md"
      );
      if (!file) {
        new import_obsidian4.Notice(`\u274C \u0424\u0430\u0439\u043B ${fileName} \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D`);
        return;
      }
      const leaf = this.app.workspace.getLeaf("split", "horizontal");
      await leaf.openFile(file);
      this.app.workspace.setActiveLeaf(leaf);
      new import_obsidian4.Notice(`\u{1F4C4} ${file.basename} \u043E\u0442\u043A\u0440\u044B\u0442 \u0432 \u043D\u043E\u0432\u043E\u0439 \u043F\u0430\u043D\u0435\u043B\u0438`);
    } catch (error) {
      new import_obsidian4.Notice(`\u274C \u041E\u0448\u0438\u0431\u043A\u0430 \u043E\u0442\u043A\u0440\u044B\u0442\u0438\u044F \u0444\u0430\u0439\u043B\u0430: ${error}`);
    }
  }
};
