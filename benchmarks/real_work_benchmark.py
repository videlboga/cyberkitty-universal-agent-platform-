#!/usr/bin/env python3
"""
üéØ REAL WORK BENCHMARK –¥–ª—è KittyCore 3.0
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á–∞—Ö

–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö:
- SWE-bench: —Ä–µ–∞–ª—å–Ω—ã–µ GitHub issues
- AgentBench: —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏  
- C¬≥-Bench: –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
"""

import asyncio
import sys
import os
import time
import json
from typing import List, Dict, Any
from datetime import datetime
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from kittycore.core.orchestrator import OrchestratorAgent

class RealWorkBenchmark:
    """–ë–µ–Ω—á–º–∞—Ä–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á"""
    
    def __init__(self):
        self.results = []
        self.start_time = None
        
    async def run_benchmark(self):
        """–ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
        print("üéØ REAL WORK BENCHMARK –¥–ª—è KittyCore 3.0")
        print("=" * 50)
        
        self.start_time = time.time()
        
        # –ü—Ä–æ—Å—Ç—ã–µ –Ω–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
        tasks = [
            {
                'name': '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂',
                'description': '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü. –ù–∞–π–¥–∏ —Ç–æ–ø-3 —Ç–æ–≤–∞—Ä–∞ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–¥–∞–∂.',
                'complexity': 'medium'
            },
            {
                'name': '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
                'description': '–°–æ–∑–¥–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è REST API. –í–∫–ª—é—á–∏ –æ–ø–∏—Å–∞–Ω–∏–µ endpoints, –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤.',
                'complexity': 'high'
            },
            {
                'name': '–ü–ª–∞–Ω –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏',
                'description': '–†–∞–∑—Ä–∞–±–æ—Ç–∞–π –ø–ª–∞–Ω –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞. –í–∫–ª—é—á–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é, –∫–∞–Ω–∞–ª—ã –∏ –±—é–¥–∂–µ—Ç.',
                'complexity': 'medium'
            },
            {
                'name': '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞',
                'description': '–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤. –û–ø–∏—à–∏ —ç—Ç–∞–ø—ã –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.',
                'complexity': 'high'
            },
            {
                'name': '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
                'description': '–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –°—Ä–∞–≤–Ω–∏ –∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ã, —Ü–µ–Ω—ã –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.',
                'complexity': 'medium'
            }
        ]
        
        total_score = 0
        
        for i, task in enumerate(tasks, 1):
            print(f"\nüìã –ó–∞–¥–∞—á–∞ {i}/{len(tasks)}: {task['name']}")
            print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}")
            print(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {task['complexity']}")
            
            result = await self.execute_task(task)
            self.results.append(result)
            total_score += result['score']
            
            status = "‚úÖ –£–°–ü–ï–•" if result['score'] >= 0.7 else "‚ùå –ù–ï–£–î–ê–ß–ê"
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {status} ({result['score']:.1f}/1.0)")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_time = time.time() - self.start_time
        success_rate = total_score / len(tasks) * 100
        
        print(f"\nüèÜ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("=" * 50)
        print(f"–û–±—â–∏–π —Å—á—ë—Ç: {total_score:.1f}/{len(tasks)} ({success_rate:.1f}%)")
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        await self.save_results()
        
        return {
            'score': total_score,
            'total': len(tasks),
            'success_rate': success_rate,
            'time': total_time
        }
    
    async def execute_task(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        start_time = time.time()
        
        try:
            # –°–æ–∑–¥–∞—ë–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏
            orchestrator = OrchestratorAgent()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            result = await orchestrator.solve_task(task['description'])
            
            execution_time = time.time() - start_time
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            score = self.evaluate_result(result)
            
            # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            clean_result = self._clean_result_for_json(result)
            
            return {
                'task': task['name'],
                'complexity': task['complexity'],
                'score': score,
                'time': execution_time,
                'result': clean_result
            }
            
        except Exception as e:
            execution_time = time.time() - start_time
            print(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
            
            return {
                'task': task['name'],
                'complexity': task['complexity'],
                'score': 0,
                'time': execution_time,
                'error': str(e)
            }
    
    def evaluate_result(self, result: Dict[str, Any]) -> float:
        """–ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        score = 0.0
        
        # –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        if result.get('status') == 'completed':
            score += 0.5
        
        # –ï—Å—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        if result.get('solution') and len(result['solution']) > 50:
            score += 0.3
        
        # –°–æ–∑–¥–∞–Ω—ã –∞–≥–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–∞–π–ª—ã
        if result.get('agents_created') or result.get('created_files'):
            score += 0.2
        
        return min(score, 1.0)
    
    def _clean_result_for_json(self, result):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è JSON"""
        from datetime import datetime
        
        if isinstance(result, dict):
            cleaned = {}
            for key, value in result.items():
                if hasattr(value, '__dict__') and not isinstance(value, datetime):  # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä Agent)
                    cleaned[key] = str(value)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                elif isinstance(value, datetime):
                    cleaned[key] = value.isoformat()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
                elif isinstance(value, (list, dict)):
                    cleaned[key] = self._clean_result_for_json(value)
                else:
                    cleaned[key] = value
            return cleaned
        elif isinstance(result, list):
            return [self._clean_result_for_json(item) for item in result]
        elif isinstance(result, datetime):
            return result.isoformat()
        else:
            return result
    
    async def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        os.makedirs('workspace/benchmark_results', exist_ok=True)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'workspace/benchmark_results/real_work_{timestamp}.json'
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
    benchmark = RealWorkBenchmark()
    results = await benchmark.run_benchmark()
    
    if results['success_rate'] >= 80:
        print("üèÜ –û–¢–õ–ò–ß–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
    elif results['success_rate'] >= 60:
        print("üëç –•–û–†–û–®–ò–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
    else:
        print("‚ö†Ô∏è –ù–£–ñ–ù–ê –†–ê–ë–û–¢–ê!")

if __name__ == "__main__":
    asyncio.run(main()) 