#!/usr/bin/env python3
"""
üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–°–¢–ò - –ß—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –¥–µ–ª–∞–µ—Ç ObsidianOrchestrator?

–ù–ï –í–ï–†–ò–ú –°–¢–ê–¢–ò–°–¢–ò–ö–ï - –ü–†–û–í–ï–†–Ø–ï–ú –§–ê–ö–¢–´:
‚ùì –°–æ–∑–¥–∞—é—Ç—Å—è –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã?
‚ùì –°–æ–¥–µ—Ä–∂–∞—Ç –ª–∏ –æ–Ω–∏ —Ç–æ —á—Ç–æ –ø—Ä–æ—Å–∏–ª–∏?
‚ùì –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª–∏ –∞–≥–µ–Ω—Ç—ã?
‚ùì –ò–ª–∏ —ç—Ç–æ –æ–ø—è—Ç—å –æ—Ç—á—ë—Ç—ã –æ —Ä–∞–±–æ—Ç–µ?
"""

import asyncio
import shutil
from pathlib import Path
from kittycore.core.obsidian_orchestrator import create_obsidian_orchestrator

async def reality_check_factorial():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–°–¢–ò: –§–∞–∫—Ç–æ—Ä–∏–∞–ª")
    print("=" * 50)
    
    vault_path = "./reality_test_vault"
    if Path(vault_path).exists():
        shutil.rmtree(vault_path)
    
    orchestrator = create_obsidian_orchestrator(vault_path)
    
    # –ó–∞–¥–∞—á–∞: —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª
    task = "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª factorial.py —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞"
    print(f"üìã –ó–∞–¥–∞—á–∞: {task}")
    
    result = await orchestrator.solve_task(task, user_id="reality_test")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç:")
    print(f"   –°—Ç–∞—Ç—É—Å: {result['status']}")
    print(f"   –ê–≥–µ–Ω—Ç–æ–≤: {result['agents_created']}")
    print(f"   –®–∞–≥–æ–≤: {result['steps_completed']}")
    
    print(f"\nüîç –ê –ß–¢–û –ù–ê –°–ê–ú–û–ú –î–ï–õ–ï?")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°–æ–∑–¥–∞–ª—Å—è –ª–∏ —Ñ–∞–π–ª factorial.py?
    factorial_files = list(Path(".").glob("**/factorial.py"))
    print(f"üìÅ –§–∞–π–ª—ã factorial.py –Ω–∞–π–¥–µ–Ω—ã: {len(factorial_files)}")
    for file in factorial_files:
        print(f"   - {file}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ß—Ç–æ –≤ –ø–∞–ø–∫–µ outputs?
    outputs_path = Path("outputs")
    if outputs_path.exists():
        output_files = list(outputs_path.glob("*.py"))
        print(f"üìÅ Python —Ñ–∞–π–ª—ã –≤ outputs/: {len(output_files)}")
        for file in output_files:
            print(f"   - {file}")
            if file.name == "factorial.py":
                content = file.read_text()
                print(f"   üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ factorial.py:")
                print(f"   {content[:200]}...")
    else:
        print("üìÅ –ü–∞–ø–∫–∞ outputs/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ß—Ç–æ –≤ vault?
    vault_files = list(Path(vault_path).rglob("*.py"))
    print(f"üìÅ Python —Ñ–∞–π–ª—ã –≤ vault: {len(vault_files)}")
    for file in vault_files:
        print(f"   - {file}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ß—Ç–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–≥–µ–Ω—Ç–æ–≤?
    task_id = result['task_id']
    agent_results = result.get('obsidian_results', {}).get('agent_results', [])
    print(f"ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ ({len(agent_results)}):")
    
    real_code_found = False
    for i, agent_result in enumerate(agent_results):
        content = agent_result.get('content', '')
        print(f"   –ê–≥–µ–Ω—Ç {i+1}: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –†–ï–ê–õ–¨–ù–´–ô –∫–æ–¥
        if 'def factorial' in content or 'factorial(' in content:
            real_code_found = True
            print(f"   ‚úÖ –ù–ê–ô–î–ï–ù –†–ï–ê–õ–¨–ù–´–ô –ö–û–î —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞!")
            print(f"   üìÑ –§—Ä–∞–≥–º–µ–Ω—Ç: {content[:150]}...")
        else:
            print(f"   ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—á—ë—Ç: {content[:100]}...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ú–æ–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–¥?
    working_code = False
    for factorial_file in factorial_files:
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            code = factorial_file.read_text()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è factorial
            if 'def factorial' in code:
                # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥
                exec_globals = {}
                exec(code, exec_globals)
                
                if 'factorial' in exec_globals:
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                    factorial_func = exec_globals['factorial']
                    test_result = factorial_func(5)
                    expected = 120  # 5! = 120
                    
                    if test_result == expected:
                        working_code = True
                        print(f"   ‚úÖ –ö–û–î –†–ê–ë–û–¢–ê–ï–¢! factorial(5) = {test_result}")
                    else:
                        print(f"   ‚ùå –ö–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: factorial(5) = {test_result}, –æ–∂–∏–¥–∞–ª–æ—Å—å 120")
                else:
                    print(f"   ‚ùå –§—É–Ω–∫—Ü–∏—è factorial –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–¥–µ")
            else:
                print(f"   ‚ùå –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞: {e}")
    
    # –ò–¢–û–ì
    print(f"\nüéØ –ò–¢–û–ì –ü–†–û–í–ï–†–ö–ò –†–ï–ê–õ–¨–ù–û–°–¢–ò:")
    print(f"   üìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã: {len(factorial_files) > 0}")
    print(f"   ü§ñ –†–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: {real_code_found}")
    print(f"   ‚ö° –ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç: {working_code}")
    
    reality_score = sum([
        len(factorial_files) > 0,
        real_code_found,
        working_code
    ]) / 3 * 100
    
    print(f"   üéØ –ü–û–ö–ê–ó–ê–¢–ï–õ–¨ –†–ï–ê–õ–¨–ù–û–°–¢–ò: {reality_score:.1f}%")
    
    if reality_score < 50:
        print(f"   üî• –î–ò–ê–ì–ù–û–ó: –ò–õ–õ–Æ–ó–ò–Ø –†–ê–ë–û–¢–´!")
    elif reality_score < 80:
        print(f"   ‚ö†Ô∏è –î–ò–ê–ì–ù–û–ó: –ß–ê–°–¢–ò–ß–ù–ê–Ø –†–ê–ë–û–¢–ê")
    else:
        print(f"   ‚úÖ –î–ò–ê–ì–ù–û–ó: –†–ï–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
    
    return reality_score

async def reality_check_website():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–°–¢–ò: –í–µ–±-—Å–∞–π—Ç")
    print("=" * 50)
    
    vault_path = "./reality_test_vault"
    orchestrator = create_obsidian_orchestrator(vault_path)
    
    # –ó–∞–¥–∞—á–∞: —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Å–∞–π—Ç
    task = "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π HTML —Å–∞–π—Ç —Å —Ñ–æ—Ä–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
    print(f"üìã –ó–∞–¥–∞—á–∞: {task}")
    
    result = await orchestrator.solve_task(task, user_id="reality_web_test")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç:")
    print(f"   –°—Ç–∞—Ç—É—Å: {result['status']}")
    print(f"   –ê–≥–µ–Ω—Ç–æ–≤: {result['agents_created']}")
    print(f"   –®–∞–≥–æ–≤: {result['steps_completed']}")
    
    print(f"\nüîç –ê –ß–¢–û –ù–ê –°–ê–ú–û–ú –î–ï–õ–ï?")
    
    # –ò—â–µ–º HTML —Ñ–∞–π–ª—ã
    html_files = list(Path(".").glob("**/*.html"))
    print(f"üìÅ HTML —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã: {len(html_files)}")
    
    working_html = False
    real_form_found = False
    
    for html_file in html_files:
        print(f"   - {html_file}")
        content = html_file.read_text()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞
        if '<form' in content and 'input' in content:
            real_form_found = True
            print(f"   ‚úÖ –ù–ê–ô–î–ï–ù–ê –†–ï–ê–õ–¨–ù–ê–Ø –§–û–†–ú–ê!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTML
            if '<!DOCTYPE html>' in content and '<html>' in content:
                working_html = True
                print(f"   ‚úÖ –ö–û–†–†–ï–ö–¢–ù–´–ô HTML!")
            else:
                print(f"   ‚ö†Ô∏è HTML –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º")
        else:
            print(f"   ‚ùå –§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–∞—è")
            print(f"   üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content[:200]}...")
    
    # –ò–¢–û–ì
    print(f"\nüéØ –ò–¢–û–ì –ü–†–û–í–ï–†–ö–ò –í–ï–ë–ê:")
    print(f"   üìÅ HTML —Ñ–∞–π–ª—ã: {len(html_files) > 0}")
    print(f"   üìù –†–µ–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞: {real_form_found}")
    print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTML: {working_html}")
    
    web_reality_score = sum([
        len(html_files) > 0,
        real_form_found,
        working_html
    ]) / 3 * 100
    
    print(f"   üéØ –ü–û–ö–ê–ó–ê–¢–ï–õ–¨ –†–ï–ê–õ–¨–ù–û–°–¢–ò –í–ï–ë–ê: {web_reality_score:.1f}%")
    
    return web_reality_score

async def deep_vault_inspection(vault_path: str):
    """–ì–ª—É–±–æ–∫–∞—è –∏–Ω—Å–ø–µ–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ vault"""
    print(f"\nüî¨ –ì–õ–£–ë–û–ö–ê–Ø –ò–ù–°–ü–ï–ö–¶–ò–Ø VAULT: {vault_path}")
    print("=" * 50)
    
    if not Path(vault_path).exists():
        print("‚ùå Vault –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    
    # –ê–Ω–∞–ª–∏–∑ –∑–∞–º–µ—Ç–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
    agent_notes = list(Path(vault_path).glob("agents/*result*.md"))
    print(f"üìù –ó–∞–º–µ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤: {len(agent_notes)}")
    
    empty_results = 0
    report_results = 0
    code_results = 0
    
    for note in agent_notes[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –∑–∞–º–µ—Ç–∫–∏
        content = note.read_text()
        lines = content.split('\n')
        content_lines = [line for line in lines if not line.startswith('---') and not line.startswith('#') and line.strip()]
        
        print(f"\nüìÑ {note.name}:")
        print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
        print(f"   –°—Ç—Ä–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content_lines)}")
        
        if len(content_lines) == 0:
            empty_results += 1
            print(f"   ‚ùå –ü–£–°–¢–û–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
        elif any(word in content.lower() for word in ['–æ—Ç—á—ë—Ç', '–∞–Ω–∞–ª–∏–∑', '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ']):
            report_results += 1
            print(f"   ‚ö†Ô∏è –ü–û–•–û–ñ–ï –ù–ê –û–¢–ß–Å–¢")
        elif any(word in content for word in ['def ', 'function', '<html>', 'import', 'class ']):
            code_results += 1
            print(f"   ‚úÖ –°–û–î–ï–†–ñ–ò–¢ –ö–û–î")
        else:
            print(f"   ‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–Å–ù–ù–´–ô –ö–û–ù–¢–ï–ù–¢")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if content_lines:
            print(f"   üìÑ –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏:")
            for line in content_lines[:3]:
                print(f"      {line[:80]}...")
    
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ê–ì–ï–ù–¢–û–í:")
    print(f"   –ü—É—Å—Ç—ã–µ: {empty_results}")
    print(f"   –û—Ç—á—ë—Ç—ã: {report_results}")
    print(f"   –ö–æ–¥: {code_results}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("üî• –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–°–¢–ò OBSIDIANORCHESTRATOR")
    print("=" * 60)
    print("üéØ –ù–ï –í–ï–†–ò–ú –°–¢–ê–¢–ò–°–¢–ò–ö–ï - –ü–†–û–í–ï–†–Ø–ï–ú –§–ê–ö–¢–´!")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –§–∞–∫—Ç–æ—Ä–∏–∞–ª
    factorial_score = await reality_check_factorial()
    
    # –¢–µ—Å—Ç 2: –í–µ–±-—Å–∞–π—Ç
    web_score = await reality_check_website()
    
    # –ì–ª—É–±–æ–∫–∞—è –∏–Ω—Å–ø–µ–∫—Ü–∏—è
    await deep_vault_inspection("./reality_test_vault")
    
    # –û–ë–©–ò–ô –ò–¢–û–ì
    overall_score = (factorial_score + web_score) / 2
    
    print(f"\n" + "=" * 60)
    print(f"üéØ –û–ë–©–ò–ô –ü–û–ö–ê–ó–ê–¢–ï–õ–¨ –†–ï–ê–õ–¨–ù–û–°–¢–ò: {overall_score:.1f}%")
    print(f"=" * 60)
    
    if overall_score < 30:
        print("üî• –î–ò–ê–ì–ù–û–ó: –ü–û–õ–ù–ê–Ø –ò–õ–õ–Æ–ó–ò–Ø –†–ê–ë–û–¢–´!")
        print("   –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞—ë—Ç –æ—Ç—á—ë—Ç—ã –æ —Ä–∞–±–æ—Ç–µ, –Ω–æ –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
    elif overall_score < 60:
        print("‚ö†Ô∏è –î–ò–ê–ì–ù–û–ó: –ß–ê–°–¢–ò–ß–ù–ê–Ø –ò–õ–õ–Æ–ó–ò–Ø")
        print("   –°–∏—Å—Ç–µ–º–∞ —á—Ç–æ-—Ç–æ –¥–µ–ª–∞–µ—Ç, –Ω–æ –Ω–µ —Ç–æ —á—Ç–æ –ø—Ä–æ—Å–∏–ª–∏")
    elif overall_score < 80:
        print("üîß –î–ò–ê–ì–ù–û–ó: –†–ê–ë–û–¢–ê–ï–¢ –ù–û –ü–õ–û–•–û")
        print("   –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –æ–Ω–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ")
    else:
        print("‚úÖ –î–ò–ê–ì–ù–û–ó: –†–ï–ê–õ–¨–ù–û –†–ê–ë–û–¢–ê–ï–¢!")
        print("   –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞—ë—Ç —Ç–æ —á—Ç–æ –ø—Ä–æ—Å–∏–ª–∏ –∏ –æ–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")

if __name__ == "__main__":
    asyncio.run(main()) 