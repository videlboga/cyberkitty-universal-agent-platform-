"""
üß† IntellectualAgent - –ê–≥–µ–Ω—Ç —Å LLM-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º

–ê–≥–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è:
- –ê–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –í—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
- –°–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- –ü—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã
"""

import asyncio
import json
from datetime import datetime
from typing import Dict, Any, List
from ..tools.real_tools import REAL_TOOLS
from ..llm import get_llm_provider, LLMProvider
from .tool_validator_agent import create_tool_validator


class IntellectualAgent:
    """üß† –ê–≥–µ–Ω—Ç —Å LLM-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º"""
    
    def __init__(self, role: str, subtask: Dict[str, Any]):
        self.role = role
        self.subtask = subtask
        self.tools = REAL_TOOLS
        self.llm = get_llm_provider()
        self.tool_validator = create_tool_validator()  # üîß –ù–û–í–û–ï: –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.results = []
        
    def _create_simple_plan(self, task_description: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """
        –£–ú–ù–´–ô FALLBACK: —Å–æ–∑–¥–∞—ë—Ç —Ä–∞–±–æ—á–∏–π –ø–ª–∞–Ω –µ—Å–ª–∏ JSON –ø–∞—Ä—Å–∏–Ω–≥ LLM –æ—Ç–≤–µ—Ç–∞ –ø–∞–¥–∞–µ—Ç
        
        –ü—Ä–∏–Ω—Ü–∏–ø: JSON –ø–∞—Ä—Å–∏–Ω–≥ –ù–ï –ö–†–ò–¢–ò–ß–ï–ù - –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ –†–ê–ë–û–¢–ê–õ–ê!
        """
        print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π fallback –ø–ª–∞–Ω...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools = analysis.get("chosen_tools", ["file_manager"])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if "web_client" in tools:
            # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–∏—Å–∫–∞
            main_tool = "web_client"
            params = {"query": f"–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ {task_description}"}
        elif "code_generator" in tools:
            # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞
            main_tool = "code_generator" 
            if "python" in task_description.lower():
                params = {"filename": "result.py", "content": f"# –ö–æ–¥ –¥–ª—è: {task_description}"}
            else:
                params = {"filename": "result.html", "content": f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è: {task_description}"}
        else:
            # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            main_tool = "file_manager"
            params = {"filename": "result.txt", "content": f"–ê–Ω–∞–ª–∏–∑: {task_description}"}
        
        return {
            "steps": [
                {
                    "step": 1,
                    "action": f"–í—ã–ø–æ–ª–Ω–∏—Ç—å: {task_description}",
                    "tool": main_tool,
                    "params": params
                }
            ]
        }
        
    async def execute_task(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª—å–∑—É—è LLM-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"""
        task_description = self.subtask.get("description", "")
        
        print(f"üß† {self.role} –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É: {task_description}")
        
        try:
            # –§–ê–ó–ê 1: LLM –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            analysis = await self._analyze_task_with_llm(task_description)
            
            # –§–ê–ó–ê 2: LLM —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_plan = await self._create_execution_plan(task_description, analysis)
            
            # –§–ê–ó–ê 3: –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            result = await self._execute_plan(execution_plan, task_description)
            
            # üß† –§–ê–ó–ê 4: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—ã—Ç –≤ A-MEM –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
            await self._save_execution_experience_to_amem(
                task_description, analysis, execution_plan, result
            )
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ IntellectualAgent: {e}")
            return {
                "status": "failed",
                "error": str(e)
            }
    
    async def _analyze_task_with_llm(self, task_description: str) -> Dict[str, Any]:
        """LLM –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è LLM
        available_tools = {
            "file_manager": "–°–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤",
            "code_generator": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ HTML —Å—Ç—Ä–∞–Ω–∏—Ü",
            "web_client": "HTTP –∑–∞–ø—Ä–æ—Å—ã, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–∞–π—Ç–æ–≤",
            "system_tools": "–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥"
        }
        
        prompt = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –∑–∞–¥–∞—á. –¢–≤–æ—è —Ü–µ–ª—å - –ø–æ–Ω—è—Ç—å –ß–¢–û –ò–ú–ï–ù–ù–û —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.

–ó–ê–î–ê–ß–ê: "{task_description}"

–î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
{json.dumps(available_tools, ensure_ascii=False, indent=2)}

–ê–ù–ê–õ–ò–ó–ò–†–£–ô –ó–ê–î–ê–ß–£ –ü–û –ö–†–ò–¢–ï–†–ò–Ø–ú:

üéØ –¢–ò–ü –†–ï–ó–£–õ–¨–¢–ê–¢–ê:
- –§–ê–ô–õ–´: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã (–∫–æ–¥, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –¥–∞–Ω–Ω—ã–µ)
- –ê–ù–ê–õ–ò–ó: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –æ—Ç—á—ë—Ç, –∞–Ω–∞–ª–∏—Ç–∏–∫—É
- –í–ï–ë-–ü–†–û–í–ï–†–ö–ê: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∞–π—Ç
- –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–∫—Ä–∏–ø—Ç/–ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á

üìä –ü–†–ï–î–ú–ï–¢–ù–ê–Ø –û–ë–õ–ê–°–¢–¨:
- –ë–ò–ó–ù–ï–°: –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, –ø—Ä–æ–¥–∞–∂–∏, —Ñ–∏–Ω–∞–Ω—Å—ã, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
- –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, —Å–∏—Å—Ç–µ–º—ã
- –ö–†–ï–ê–¢–ò–í–ù–ê–Ø: –¥–∏–∑–∞–π–Ω, –∫–æ–Ω—Ç–µ–Ω—Ç, –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã
- –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ê–Ø: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –¥–∞–Ω–Ω—ã–µ, –æ—Ç—á—ë—Ç—ã

üîß –í–´–ë–û–† –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í:
- file_manager: –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –¥–∞–Ω–Ω—ã—Ö
- code_generator: –¥–ª—è Python —Å–∫—Ä–∏–ø—Ç–æ–≤, HTML —Å—Ç—Ä–∞–Ω–∏—Ü, –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∫–æ–¥–∞
- web_client: –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- system_tools: –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥

–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê:
üö´ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π web_client –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–π code_generator!
üö´ –ù–ï –≤—ã–±–∏—Ä–∞–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã "–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π" - —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ!
‚úÖ –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞/–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: web_client (–ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö) + file_manager + code_generator (–¥–ª—è JSON)
‚úÖ –î–ª—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤: file_manager (–æ–ø–∏—Å–∞–Ω–∏—è) + code_generator (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–æ–¥)
‚úÖ –î–ª—è –≤–µ–±-—Å–∞–π—Ç–æ–≤: code_generator + file_manager
‚úÖ –î–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö/–ø—Ä–æ–¥—É–∫—Ç–∞—Ö: web_client + file_manager

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (MARKDOWN):

## –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏

**–¢–∏–ø –∑–∞–¥–∞—á–∏**: creation/analysis/web_check/automation
**–¶–µ–ª—å**: –ö–û–ù–ö–†–ï–¢–ù–û —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –Ω–∞ –≤—ã—Ö–æ–¥–µ
**–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã**: —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
**–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ**: –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
**–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã/—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
**–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞**: –∫–æ–¥/–¥–æ–∫—É–º–µ–Ω—Ç—ã/–¥–∞–Ω–Ω—ã–µ/–∞–Ω–∞–ª–∏–∑

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:

–ó–∞–¥–∞—á–∞: "–°–æ–∑–¥–∞–π —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏"
‚Üí task_type: "creation", tools: ["code_generator", "file_manager"], outputs: ["index.html", "style.css"]

–ó–∞–¥–∞—á–∞: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä—ã–Ω–æ–∫ CRM —Å–∏—Å—Ç–µ–º"  
‚Üí task_type: "analysis", tools: ["web_client", "file_manager", "code_generator"], outputs: ["market_analysis.txt", "crm_data.json"]

–ó–∞–¥–∞—á–∞: "–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∞ –±–∏—Ç—Ä–∏–∫—Å 24"
‚Üí task_type: "analysis", tools: ["web_client", "file_manager", "code_generator"], outputs: ["bitrix_market_analysis.json", "top_apps.json"]

–ó–∞–¥–∞—á–∞: "–ü—Ä–æ–≤–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–∞–π—Ç google.com"
‚Üí task_type: "web_check", tools: ["web_client"], outputs: ["site_status_report.txt"]

–ü–û–ú–ù–ò: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ö–û–ù–ö–†–ï–¢–ù–´–ô, –ü–û–õ–ï–ó–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
"""
        
        try:
            print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM...")
            response = self.llm.complete(prompt)
            print(f"üìù LLM –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üîç –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {response[:200]}...")
            
            # –ü–∞—Ä—Å–∏–º Markdown –æ—Ç–≤–µ—Ç
            analysis = self._parse_markdown_analysis(response)
            print(f"üéØ LLM –∞–Ω–∞–ª–∏–∑: {analysis['intent']}")
            print(f"üîß –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {analysis['chosen_tools']}")
            
            return analysis
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞: {e}")
            # –£–º–Ω—ã–π fallback –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            return self._smart_fallback_analysis(task_description)
    
    def _parse_markdown_analysis(self, response: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ Markdown –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Markdown —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            lines = response.split('\n')
            analysis = {}
            
            for line in lines:
                if line.startswith('**–¢–∏–ø –∑–∞–¥–∞—á–∏**:'):
                    task_type = line.split(':', 1)[1].strip()
                    analysis['task_type'] = task_type
                    
                    # üöÄ –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
                    if task_type in ['analysis', 'research'] or '–∞–Ω–∞–ª–∏–∑' in task_type.lower():
                        analysis['complexity'] = 'complex'
                    elif task_type in ['creation', 'automation']:
                        analysis['complexity'] = 'medium'
                    else:
                        analysis['complexity'] = 'simple'
                        
                elif line.startswith('**–¶–µ–ª—å**:'):
                    intent = line.split(':', 1)[1].strip()
                    analysis['intent'] = intent
                    
                    # üöÄ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –£—Å–∏–ª–∏–≤–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ —Ü–µ–ª–∏
                    if any(keyword in intent.lower() for keyword in ['–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π', '–¥–µ—Ç–∞–ª—å–Ω—ã–π', '–≥–ª—É–±–æ–∫–∏–π', '–ø—Ä–æ—Ç–æ—Ç–∏–ø']):
                        analysis['complexity'] = 'complex'
                    elif any(keyword in intent.lower() for keyword in ['—Å–æ–∑–¥–∞—Ç—å', '—Å–¥–µ–ª–∞—Ç—å', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å']):
                        analysis['complexity'] = 'medium'
                        
                elif line.startswith('**–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã**:'):
                    tools_str = line.split(':', 1)[1].strip()
                    # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                    tools = [t.strip().strip('[]"\'') for t in tools_str.split(',')]
                    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    clean_tools = []
                    for tool in tools:
                        clean_tool = tool.strip().replace('"', '').replace("'", '').replace('[', '').replace(']', '')
                        if clean_tool:
                            clean_tools.append(clean_tool)
                    analysis['chosen_tools'] = clean_tools
                    
                    # üöÄ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –£—Å–∏–ª–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                    if len(clean_tools) >= 3:
                        analysis['complexity'] = 'complex'
                    elif len(clean_tools) == 2:
                        analysis['complexity'] = 'medium'
                        
                elif line.startswith('**–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ**:'):
                    analysis['reasoning'] = line.split(':', 1)[1].strip()
                elif line.startswith('**–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**:'):
                    analysis['expected_outputs'] = line.split(':', 1)[1].strip()
                elif line.startswith('**–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞**:'):
                    analysis['content_type'] = line.split(':', 1)[1].strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if not analysis.get('intent') or not analysis.get('chosen_tools'):
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –≤ Markdown")
            
            # üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞—Å—å
            if 'complexity' not in analysis:
                analysis['complexity'] = 'simple'
                
            print(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis['complexity']}")
            return analysis
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –∞–Ω–∞–ª–∏–∑–∞: {e}")
            # Fallback –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            return self._smart_fallback_analysis(response)
    
    def _parse_plan_response(self, response: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ LLM –≤ JSON"""
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ JSON
        response = response.strip()
        
        # –ù–∞—Ö–æ–¥–∏–º JSON —á–∞—Å—Ç—å
        start_idx = response.find('{')
        end_idx = response.rfind('}') + 1
        
        if start_idx == -1 or end_idx == 0:
            raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
            
        json_part = response[start_idx:end_idx]
        
        try:
            plan = json.loads(json_part)
            return plan
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"JSON —á–∞—Å—Ç—å: {json_part}")
            raise ValueError(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {e}")
    
    def _parse_markdown_plan(self, response: str) -> Dict[str, Any]:
        """
        üîß –ù–û–í–û–ï: –ü–∞—Ä—Å–∏–Ω–≥ –ø–ª–∞–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        
        –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:
        ### –®–∞–≥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ
        - **–î–µ–π—Å—Ç–≤–∏–µ**: –æ–ø–∏—Å–∞–Ω–∏–µ
        - **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**: tool_name
        - **–§–∞–π–ª**: filename
        - **–ö–æ–Ω—Ç–µ–Ω—Ç**: content
        """
        steps = []
        current_step = None
        step_counter = 1
        
        lines = response.split('\n')
        
        for line in lines:
            line = line.strip()
            
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ —à–∞–≥–∞
            if line.startswith('### –®–∞–≥') or line.startswith('## –®–∞–≥'):
                if current_step:
                    steps.append(current_step)
                
                current_step = {
                    "step": step_counter,
                    "action": line.split(':', 1)[1].strip() if ':' in line else f"–®–∞–≥ {step_counter}",
                    "tool": "file_manager",  # default
                    "params": {}
                }
                step_counter += 1
                
            elif current_step and line.startswith('- **'):
                # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–≥–∞
                if '**–î–µ–π—Å—Ç–≤–∏–µ**:' in line:
                    current_step["action"] = line.split(':', 1)[1].strip()
                elif '**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**:' in line:
                    tool = line.split(':', 1)[1].strip()
                    current_step["tool"] = tool
                elif '**–§–∞–π–ª**:' in line:
                    filename = line.split(':', 1)[1].strip()
                    current_step["params"]["filename"] = filename
                elif '**–ö–æ–Ω—Ç–µ–Ω—Ç**:' in line:
                    content = line.split(':', 1)[1].strip()
                    current_step["params"]["content"] = content
                elif '**–ó–∞–ø—Ä–æ—Å**:' in line:
                    query = line.split(':', 1)[1].strip()
                    current_step["params"]["query"] = query
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥
        if current_step:
            steps.append(current_step)
        
        print(f"üìù –†–∞—Å–ø–∞—Ä—Å–∏–ª–∏ {len(steps)} —à–∞–≥–æ–≤ –∏–∑ Markdown")
        return {"steps": steps}
    
    def _smart_fallback_analysis(self, task_description: str) -> Dict[str, Any]:
        """–£–º–Ω—ã–π fallback –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        task_lower = task_description.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        tools = []
        
        # –í–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
        if any(word in task_lower for word in ["—Ä—ã–Ω–æ–∫", "–º–∞—Ä–∫–µ—Ç", "–∞–Ω–∞–ª–∏–∑", "–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ", "—Ç–æ–ø", "–±–∏—Ç—Ä–∏–∫—Å"]):
            tools.append("web_client")
            tools.append("file_manager")
            tools.append("code_generator")
            intent = "–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å –ø–æ–∏—Å–∫–æ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤
        elif any(word in task_lower for word in ["—Å–∞–π—Ç", "html", "–≤–µ–±"]) and any(word in task_lower for word in ["—Å–æ–∑–¥–∞–π", "—Å–¥–µ–ª–∞–π"]):
            tools = ["code_generator", "file_manager"]
            intent = "—Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞"
        # –ü–ª–∞–Ω—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        elif "–ø–ª–∞–Ω" in task_lower:
            tools = ["file_manager"]
            intent = "—Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞"
        else:
            tools = ["file_manager"]
            intent = "–∞–Ω–∞–ª–∏–∑ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"
        
        return {
            "task_type": "analysis" if "–∞–Ω–∞–ª–∏–∑" in intent else "creation",
            "intent": intent,
            "chosen_tools": tools,
            "reasoning": f"fallback –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {task_lower[:50]}...",
            "expected_outputs": ["—Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"]
        }
    
    def _smart_fallback_plan(self, task_description: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """
        –£–î–ê–õ–ï–ù–û: Fallback –ø–ª–∞–Ω—ã —É–±—Ä–∞–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø—É "–ù–µ—Ç LLM = –ù–µ—Ç —Ä–∞–±–æ—Ç—ã"
        """
        raise Exception("‚ùå Fallback –ø–ª–∞–Ω—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã. –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–±–æ—á–∏–π LLM –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
    
    async def _create_execution_plan(self, task_description: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """
        üß† LLM —Å–æ–∑–¥–∞—ë—Ç –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, ToolValidatorAgent –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        
        –ü–†–ò–ù–¶–ò–ü: –ü—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ. –ù–µ—Ç LLM = –ù–µ—Ç —Ä–∞–±–æ—Ç—ã.
        """
        # üß† A-MEM: –ü–æ–ª—É—á–∞–µ–º insights –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        amem_insights = await self._get_amem_planning_insights(task_description, analysis)
        
        chosen_tools = analysis.get("chosen_tools", ["file_manager"])
        task_complexity = analysis.get("complexity", "simple")
        
        # üöÄ –ù–û–í–û–ï: –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
        if task_complexity in ["complex", "very_complex"]:
            return await self._create_multi_stage_plan(task_description, analysis, amem_insights)
        else:
            return await self._create_simple_plan(task_description, analysis, amem_insights)
    
    async def _create_multi_stage_plan(self, task_description: str, analysis: Dict[str, Any], amem_insights: str) -> Dict[str, Any]:
        """
        üöÄ –†–ï–í–û–õ–Æ–¶–ò–Ø: –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–µ Agile –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
        
        –≠–¢–ê–ü–´:
        1. üîç RESEARCH - –≥–ª—É–±–æ–∫–∏–π —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        2. üìä ANALYSIS - –∞–Ω–∞–ª–∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        3. üõ†Ô∏è IMPLEMENTATION - —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤  
        4. ‚úÖ VALIDATION - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        """
        chosen_tools = analysis.get("chosen_tools", ["file_manager"])
        
        prompt = f"""–°–æ–∑–¥–∞–π –ú–ù–û–ì–û–≠–¢–ê–ü–ù–´–ô –ø–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º Agile.

–ó–ê–î–ê–ß–ê: "{task_description}"

–ê–ù–ê–õ–ò–ó:
- –¢–∏–ø: {analysis.get('task_type', 'general')}
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis.get('complexity', 'complex')}
- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {chosen_tools}

–î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
- web_client: –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –∏–∑—É—á–µ–Ω–∏–µ —Å–∞–π—Ç–æ–≤
- file_manager: —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
- code_generator: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤
- system_tools: —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

–ü–†–ò–ù–¶–ò–ü–´ –ú–ù–û–ì–û–≠–¢–ê–ü–ù–û–ì–û –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø:
1. RESEARCH –ü–ï–†–í–´–ú - –±–µ–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
2. –ö–∞–∂–¥—ã–π —ç—Ç–∞–ø —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
3. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (Markdown):

## –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π –ø–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è

### –≠–¢–ê–ü 1: üîç RESEARCH
- **–î–µ–π—Å—Ç–≤–∏–µ**: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ–º—ã, —Å–±–æ—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
- **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**: web_client
- **–¶–µ–ª—å**: –ü–æ–Ω—è—Ç—å –í–°–ï –∞—Å–ø–µ–∫—Ç—ã –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
- **–†–µ–∑—É–ª—å—Ç–∞—Ç**: –ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

### –≠–¢–ê–ü 2: üìä ANALYSIS
- **–î–µ–π—Å—Ç–≤–∏–µ**: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**: file_manager
- **–¶–µ–ª—å**: –í—ã—è–≤–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –ø—Ä–æ–±–ª–µ–º—ã, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
- **–†–µ–∑—É–ª—å—Ç–∞—Ç**: –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

### –≠–¢–ê–ü 3: üõ†Ô∏è IMPLEMENTATION
- **–î–µ–π—Å—Ç–≤–∏–µ**: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
- **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**: code_generator
- **–¶–µ–ª—å**: –°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è
- **–†–µ–∑—É–ª—å—Ç–∞—Ç**: –ì–æ—Ç–æ–≤—ã–µ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã

### –≠–¢–ê–ü 4: ‚úÖ VALIDATION
- **–î–µ–π—Å—Ç–≤–∏–µ**: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
- **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**: system_tools
- **–¶–µ–ª—å**: –£–±–µ–¥–∏—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
- **–†–µ–∑—É–ª—å—Ç–∞—Ç**: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏—è

{amem_insights}

–û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –í MARKDOWN –§–û–†–ú–ê–¢–ï!"""

        try:
            print(f"üöÄ –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π –ø–ª–∞–Ω —á–µ—Ä–µ–∑ LLM...")
            response = self.llm.complete(prompt)
            print(f"üìù –ü–æ–ª—É—á–µ–Ω –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π –ø–ª–∞–Ω: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–∞—Ä—Å–∏–º –ø–ª–∞–Ω
            plan = self._parse_multi_stage_markdown(response)
            
            # üîß –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ ToolValidatorAgent
            validation_result = self.tool_validator.validate_plan(plan)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
            validated_plan = {
                "type": "multi_stage",
                "stages": validation_result.corrected_steps
            }
            
            print(f"üöÄ –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π –ø–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: {len(validated_plan.get('stages', []))} —ç—Ç–∞–ø–æ–≤")
            if validation_result.corrections_made:
                print(f"   –í–Ω–µ—Å–µ–Ω–æ {len(validation_result.corrections_made)} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            
            return validated_plan
            
        except Exception as e:
            print(f"‚ùå LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise Exception(f"–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π –ø–ª–∞–Ω –±–µ–∑ LLM: {e}")
    
    async def _create_simple_plan(self, task_description: str, analysis: Dict[str, Any], amem_insights: str) -> Dict[str, Any]:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω –¥–ª—è –Ω–µ—Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á"""
        chosen_tools = analysis.get("chosen_tools", ["file_manager"])
        
        prompt = f"""–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.

–ó–ê–î–ê–ß–ê: "{task_description}"

–ê–ù–ê–õ–ò–ó:
- –¢–∏–ø: {analysis.get('task_type', 'general')}
- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {chosen_tools}

–î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
- file_manager: —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
- code_generator: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞  
- web_client: –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
- system_tools: —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

–ü–†–ê–í–ò–õ–ê:
1. –ú–∞–∫—Å–∏–º—É–º 5 —à–∞–≥–æ–≤
2. –ö–∞–∂–¥—ã–π —à–∞–≥ —Å–æ–∑–¥–∞—ë—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
3. –î–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞–π —Å web_client

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (Markdown):

## –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

### –®–∞–≥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
- **–î–µ–π—Å—Ç–≤–∏–µ**: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**: –Ω–∞–∑–≤–∞–Ω–∏–µ_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞  
- **–§–∞–π–ª**: –∏–º—è_—Ñ–∞–π–ª–∞.ext
- **–ö–æ–Ω—Ç–µ–Ω—Ç**: –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

{amem_insights}

–û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –í MARKDOWN –§–û–†–ú–ê–¢–ï!"""

        try:
            print(f"ü§ñ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω —á–µ—Ä–µ–∑ LLM...")
            response = self.llm.complete(prompt)
            print(f"üìù –ü–æ–ª—É—á–µ–Ω –ø–ª–∞–Ω: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–∞—Ä—Å–∏–º –ø–ª–∞–Ω
            plan = self._parse_markdown_plan(response)
            
            # üîß –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ ToolValidatorAgent
            validation_result = self.tool_validator.validate_plan(plan)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
            validated_plan = {
                "type": "simple",
                "steps": validation_result.corrected_steps
            }
            
            print(f"üîß –ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω: {len(validated_plan.get('steps', []))} —à–∞–≥–æ–≤")
            if validation_result.corrections_made:
                print(f"   –í–Ω–µ—Å–µ–Ω–æ {len(validation_result.corrections_made)} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            
            return validated_plan
            
        except Exception as e:
            print(f"‚ùå LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            raise Exception(f"–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –±–µ–∑ LLM: {e}")
    
    def _parse_multi_stage_markdown(self, response: str) -> Dict[str, Any]:
        """
        üöÄ –ù–û–í–û–ï: –ü–∞—Ä—Å–∏–Ω–≥ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        
        –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:
        ### –≠–¢–ê–ü 1: üîç RESEARCH
        - **–î–µ–π—Å—Ç–≤–∏–µ**: –æ–ø–∏—Å–∞–Ω–∏–µ
        - **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**: tool_name
        - **–¶–µ–ª—å**: —Ü–µ–ª—å —ç—Ç–∞–ø–∞
        - **–†–µ–∑—É–ª—å—Ç–∞—Ç**: –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        stages = []
        current_stage = None
        stage_counter = 1
        
        lines = response.split('\n')
        
        for line in lines:
            line = line.strip()
            
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ —ç—Ç–∞–ø–∞
            if line.startswith('### –≠–¢–ê–ü') and ('RESEARCH' in line or 'ANALYSIS' in line or 'IMPLEMENTATION' in line or 'VALIDATION' in line):
                if current_stage:
                    stages.append(current_stage)
                
                stage_name = line.split(':', 1)[1].strip() if ':' in line else f"–≠—Ç–∞–ø {stage_counter}"
                current_stage = {
                    "step": stage_counter,
                    "action": stage_name,
                    "tool": "file_manager",  # default
                    "params": {},
                    "stage_type": self._extract_stage_type(line)
                }
                stage_counter += 1
                
            elif current_stage and line.startswith('- **'):
                # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç—Ç–∞–ø–∞
                if '**–î–µ–π—Å—Ç–≤–∏–µ**:' in line:
                    current_stage["action"] = line.split(':', 1)[1].strip()
                elif '**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**:' in line:
                    tool = line.split(':', 1)[1].strip()
                    current_stage["tool"] = tool
                elif '**–¶–µ–ª—å**:' in line:
                    goal = line.split(':', 1)[1].strip()
                    current_stage["params"]["goal"] = goal
                elif '**–†–µ–∑—É–ª—å—Ç–∞—Ç**:' in line:
                    result = line.split(':', 1)[1].strip()
                    current_stage["params"]["expected_result"] = result
                elif '**–§–∞–π–ª**:' in line:
                    filename = line.split(':', 1)[1].strip()
                    current_stage["params"]["filename"] = filename
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø
        if current_stage:
            stages.append(current_stage)
        
        print(f"üöÄ –†–∞—Å–ø–∞—Ä—Å–∏–ª–∏ {len(stages)} —ç—Ç–∞–ø–æ–≤ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∞")
        return {"steps": stages}
    
    def _extract_stage_type(self, line: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç—Ç–∞–ø–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        line_upper = line.upper()
        if 'RESEARCH' in line_upper:
            return "research"
        elif 'ANALYSIS' in line_upper:
            return "analysis"
        elif 'IMPLEMENTATION' in line_upper:
            return "implementation"
        elif 'VALIDATION' in line_upper:
            return "validation"
        else:
            return "general"
    
    async def _execute_plan(self, plan: Dict[str, Any], task_description: str) -> Dict[str, Any]:
        """
        üöÄ –ù–û–í–û–ï: –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω - –ø—Ä–æ—Å—Ç–æ–π –∏–ª–∏ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π
        """
        plan_type = plan.get("type", "simple")
        
        if plan_type == "multi_stage":
            return await self._execute_multi_stage_plan(plan, task_description)
        else:
            return await self._execute_simple_plan(plan, task_description)
    
    async def _execute_multi_stage_plan(self, plan: Dict[str, Any], task_description: str) -> Dict[str, Any]:
        """
        üöÄ –†–ï–í–û–õ–Æ–¶–ò–Ø: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        
        –ö–∞–∂–¥—ã–π —ç—Ç–∞–ø –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        """
        stages = plan.get("stages", [])
        all_results = []
        stage_results = {}
        
        print(f"üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∞: {len(stages)} —ç—Ç–∞–ø–æ–≤")
        
        for i, stage in enumerate(stages, 1):
            stage_type = stage.get("stage_type", "general")
            print(f"\nüìã –≠–¢–ê–ü {i}: {stage_type.upper()} - {stage.get('action', '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–∞')}")
            
            # –û–±–æ–≥–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç—Ç–∞–ø–æ–≤
            enriched_stage = self._enrich_stage_with_context(stage, stage_results)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–ø
            stage_result = await self._execute_single_step(enriched_stage, task_description)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞
            stage_results[stage_type] = stage_result
            all_results.append(stage_result)
            
            print(f"‚úÖ –≠–¢–ê–ü {i} –∑–∞–≤–µ—Ä—à—ë–Ω: {stage_result.get('success', False)}")
            
            # –ï—Å–ª–∏ —ç—Ç–∞–ø –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            if not stage_result.get('success', False):
                print(f"‚ùå –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π –ø–ª–∞–Ω –ø—Ä–µ—Ä–≤–∞–Ω –Ω–∞ —ç—Ç–∞–ø–µ {i}")
                break
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤
        final_result = self._aggregate_stage_results(all_results, stage_results)
        
        print(f"üéâ –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π –ø–ª–∞–Ω –∑–∞–≤–µ—Ä—à—ë–Ω: {len(all_results)} —ç—Ç–∞–ø–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        return final_result
    
    async def _execute_simple_plan(self, plan: Dict[str, Any], task_description: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–ª–∞–Ω–∞ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)"""
        steps = plan.get("steps", [])
        all_results = []
        
        print(f"üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–ª–∞–Ω–∞: {len(steps)} —à–∞–≥–æ–≤")
        
        for step in steps:
            result = await self._execute_single_step(step, task_description)
            all_results.append(result)
        
        return self._aggregate_simple_results(all_results)
    
    async def _execute_single_step(self, step: Dict[str, Any], task_description: str) -> Dict[str, Any]:
        """
        üîß –ù–û–í–û–ï: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ –ø–ª–∞–Ω–∞
        
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤, —Ç–∞–∫ –∏ —ç—Ç–∞–ø–æ–≤ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        """
        tool_name = step.get("tool", "file_manager")
        action = step.get("action", "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è")
        params = step.get("params", {})
        
        print(f"üìã –®–∞–≥ {step.get('step', '?')}: {action}")
        print(f"üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}, –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            if tool_name == "file_manager":
                result = await self._use_file_manager(params, task_description)
            elif tool_name == "code_generator":
                result = await self._use_code_generator(params, task_description)
            elif tool_name == "web_client":
                result = await self._use_web_client(params)
            elif tool_name == "system_tools":
                result = await self._use_system_tools(params, task_description)
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º file_manager")
                result = await self._use_file_manager(params, task_description)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            success = result.get("success", False)
            if success:
                created_file = result.get("filename", "")
                if created_file:
                    print(f"üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {created_file}")
                else:
                    content_info = result.get("content", "")
                    if content_info:
                        print(f"üíé –ö–æ–Ω—Ç–µ–Ω—Ç: {str(content_info)[:100]}...")
                print(f"‚úÖ –®–∞–≥ {step.get('step', '?')} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                error = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                print(f"‚ùå –®–∞–≥ {step.get('step', '?')} –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {error}")
            
            # –û–±–æ–≥–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∞–≥–µ
            enriched_result = result.copy()
            enriched_result.update({
                "step_number": step.get("step", 0),
                "action": action,
                "tool_used": tool_name,
                "content_summary": self._create_step_summary(result, action)
            })
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º created_files
            if "filename" in enriched_result and enriched_result["filename"]:
                enriched_result["created_files"] = [enriched_result["filename"]]
            elif "created_files" not in enriched_result:
                enriched_result["created_files"] = []
            
            return enriched_result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ {step.get('step', '?')}: {e}")
            return {
                "success": False,
                "error": str(e),
                "step_number": step.get("step", 0),
                "action": action,
                "tool_used": tool_name,
                "created_files": []
            }
    
    def _create_step_summary(self, result: Dict[str, Any], action: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —à–∞–≥–∞"""
        if not result.get("success", False):
            return f"–û—à–∏–±–∫–∞: {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        content = result.get("content", "")
        filename = result.get("filename", "")
        
        if filename:
            return f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {filename}"
        elif content:
            content_preview = str(content)[:100] + ("..." if len(str(content)) > 100 else "")
            return f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {content_preview}"
        else:
            return f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
    
    def _enrich_stage_with_context(self, stage: Dict[str, Any], previous_results: Dict[str, Any]) -> Dict[str, Any]:
        """
        üß† –£–ú–ù–û–ï –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        RESEARCH —ç—Ç–∞–ø: —á–∏—Å—Ç—ã–π, –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ANALYSIS —ç—Ç–∞–ø: –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ RESEARCH
        IMPLEMENTATION —ç—Ç–∞–ø: –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ RESEARCH + ANALYSIS  
        VALIDATION —ç—Ç–∞–ø: –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        """
        enriched_stage = stage.copy()
        stage_type = stage.get("stage_type", "general")
        
        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —ç—Ç–∞–ø–∞
        context_parts = []
        
        if stage_type == "analysis" and "research" in previous_results:
            research_data = previous_results["research"].get("content_summary", "")
            context_parts.append(f"–î–ê–ù–ù–´–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø: {research_data}")
        
        elif stage_type == "implementation":
            if "research" in previous_results:
                research_data = previous_results["research"].get("content_summary", "")
                context_parts.append(f"–ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï: {research_data}")
            if "analysis" in previous_results:
                analysis_data = previous_results["analysis"].get("content_summary", "")
                context_parts.append(f"–ê–ù–ê–õ–ò–ó: {analysis_data}")
        
        elif stage_type == "validation":
            for prev_type, prev_result in previous_results.items():
                content = prev_result.get("content_summary", "")
                context_parts.append(f"{prev_type.upper()}: {content}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç—Ç–∞–ø–∞
        if context_parts:
            existing_content = enriched_stage.get("params", {}).get("content", "")
            context_text = " | ".join(context_parts)
            
            if "params" not in enriched_stage:
                enriched_stage["params"] = {}
            
            if existing_content:
                enriched_stage["params"]["content"] = f"{existing_content}\n\n–ö–û–ù–¢–ï–ö–°–¢ –ü–†–ï–î–´–î–£–©–ò–• –≠–¢–ê–ü–û–í: {context_text}"
            else:
                enriched_stage["params"]["content"] = f"–ö–û–ù–¢–ï–ö–°–¢: {context_text}"
        
        return enriched_stage
    
    def _aggregate_stage_results(self, all_results: List[Dict[str, Any]], stage_results: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        total_steps = len(all_results)
        successful_steps = sum(1 for r in all_results if r.get('success', False))
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        all_files = []
        for result in all_results:
            files = result.get('created_files', [])
            if isinstance(files, list):
                all_files.extend(files)
            elif isinstance(files, str):
                all_files.append(files)
        
        # –°–æ–∑–¥–∞—ë–º —Å—É–º–º–∞—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤
        stage_summaries = []
        for stage_type, result in stage_results.items():
            summary = result.get("content_summary", f"–≠—Ç–∞–ø {stage_type} –≤—ã–ø–æ–ª–Ω–µ–Ω")
            stage_summaries.append(f"{stage_type.upper()}: {summary}")
        
        return {
            "success": successful_steps == total_steps,
            "completed_steps": successful_steps,
            "total_steps": total_steps,
            "created_files": all_files,
            "stage_results": stage_results,
            "content_summary": " | ".join(stage_summaries),
            "execution_type": "multi_stage"
        }
    
    def _aggregate_simple_results(self, all_results: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)"""
        total_steps = len(all_results)
        successful_steps = sum(1 for r in all_results if r.get('success', False))
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        all_files = []
        for result in all_results:
            files = result.get('created_files', [])
            if isinstance(files, list):
                all_files.extend(files)
            elif isinstance(files, str):
                all_files.append(files)
        
        return {
            "success": successful_steps == total_steps,
            "completed_steps": successful_steps,
            "total_steps": total_steps,
            "created_files": all_files,
            "execution_type": "simple"
        }
    
    async def _use_code_generator(self, params: Dict[str, Any], task_description: str) -> Dict[str, Any]:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ code_generator —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ outputs/"""
        filename = params.get("filename", f"generated_{id(self)}.html")
        title = params.get("title", "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É outputs/ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        if not filename.startswith("outputs/"):
            filename = f"outputs/{filename}"
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if filename.endswith('.py'):
            # –î–ª—è Python —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º generate_python_script
            description = params.get("content", task_description)
            if not description or description in ["–ø—Ä–æ—Å—Ç–æ–π –∫–æ–¥", "–∫–æ–¥ —Ñ–∞–π–ª–∞", "—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"]:
                description = task_description
            return self.tools["code_generator"].generate_python_script(description, filename)
        
        elif filename.endswith('.html'):
            # –î–ª—è HTML —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º generate_html_page
            if "–∫–æ—Ç—è—Ç" in task_description.lower() or "cat" in task_description.lower():
                content = f"""
                <div class="header">
                    <h1>üê± {title}</h1>
                    <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç –æ –∫–æ—Ç—è—Ç–∞—Ö!</p>
                </div>
                <div class="content">
                    <h2>–ù–∞—à–∏ –º–∏–ª—ã–µ –∫–æ—Ç—è—Ç–∫–∏</h2>
                    <p>–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å–∞–º—ã—Ö –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ç—è—Ç! üêæ</p>
                    <ul>
                        <li>üê± –ü—É—à–∏—Å—Ç—ã–µ –∫–æ—Ç—è—Ç–∞</li>
                        <li>üêà –ò–≥—Ä–∏–≤—ã–µ –º–∞–ª—ã—à–∏</li>
                        <li>üò∫ –õ–∞—Å–∫–æ–≤—ã–µ –ø–∏—Ç–æ–º—Ü—ã</li>
                    </ul>
                    <p>–ö–æ—Ç—è—Ç–∞ –ø—Ä–∏–Ω–æ—Å—è—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ —É—é—Ç –≤ –Ω–∞—à –¥–æ–º!</p>
                </div>
                """
            else:
                content = f"<p>–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è: {task_description}</p>"
            result = self.tools["code_generator"].generate_html_page(title, content, filename)
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get("success"):
                result["filename"] = filename
            return result
        
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∑–∞–¥–∞—á–∏ –ò —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            if "python" in task_description.lower() or "print" in task_description.lower() or ".py" in task_description.lower():
                # –≠—Ç–æ Python –∫–æ–¥
                description = params.get("content", task_description)
                if not description or description in ["–ø—Ä–æ—Å—Ç–æ–π –∫–æ–¥", "–∫–æ–¥ —Ñ–∞–π–ª–∞", "—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"]:
                    description = task_description
                result = self.tools["code_generator"].generate_python_script(description, filename)
                if result.get("success"):
                    result["filename"] = filename
                return result
            elif filename.endswith(('.txt', '.md', '.json', '.csv', '.xml')):
                # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º file_manager –≤–º–µ—Å—Ç–æ code_generator!
                return await self._use_file_manager(params, task_description)
            else:
                # –¢–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Å–æ–∑–¥–∞—ë–º HTML
                content = f"<p>–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è: {task_description}</p>"
                result = self.tools["code_generator"].generate_html_page(title, content, filename)
                if result.get("success"):
                    result["filename"] = filename
                return result
    
    async def _use_file_manager(self, params: Dict[str, Any], task_description: str) -> Dict[str, Any]:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ file_manager —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ outputs/"""
        filename = params.get("filename", f"—Ñ–∞–π–ª_{id(self)}.txt")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É outputs/ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        if not filename.startswith("outputs/"):
            filename = f"outputs/{filename}"
        
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–¢–ï–ù–¢ –ò–ó LLM –ü–õ–ê–ù–ê!
        llm_content = params.get("content", "")
        
        if llm_content and llm_content not in ["–ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç", "—Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞", "—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"]:
            # LLM –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            content = llm_content
        else:
            # Fallback —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ LLM –Ω–µ –¥–∞–ª –∫–æ–Ω—Ç–µ–Ω—Ç
            content = f"""# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã

–ó–∞–¥–∞—á–∞: {task_description}
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º: {self.role}

## –†–µ–∑—É–ª—å—Ç–∞—Ç
–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.
"""
        
        result = self.tools["file_manager"].create_file(filename, content)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.get("success"):
            result["filename"] = filename
        return result
    
    async def _use_web_client(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ web_client –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–æ–≤"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å query - —ç—Ç–æ –ø–æ–∏—Å–∫, –µ—Å–ª–∏ url - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞
        query = params.get("query", "")
        url = params.get("url", "")
        
        if query:
            # –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
            search_result = self.tools["web_search"].search(query)
            return {
                "success": True,
                "search_query": query,
                "search_results": search_result,
                "content": search_result
            }
        elif url:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞
            return self.tools["web_client"].check_website(url)
        else:
            # Fallback - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞
            return self.tools["web_client"].check_website("https://httpbin.org/status/200")
    
    async def _use_system_tools(self, params: Dict[str, Any], task_description: str) -> Dict[str, Any]:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ super_system_tool - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        try:
            from ..tools.super_system_tool import SuperSystemTool
            system_tool = SuperSystemTool()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            operation = params.get("operation", "run_command")
            command = params.get("command", "echo 'System tools working'")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            result = system_tool.execute(operation=operation, command=command)
            
            if result.success:
                return {
                    "success": True,
                    "filename": f"system_output_{id(self)}.txt",
                    "content": str(result.data),
                    "operation": operation
                }
            else:
                return {
                    "success": False,
                    "error": result.error or "System tools execution failed"
                }
                
        except Exception as e:
            return {
                "success": False,
                "error": f"System tools error: {str(e)}"
            }
    
    async def _get_amem_planning_insights(self, task_description: str, analysis: Dict[str, Any]) -> str:
        """üß† –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –∏–∑ A-MEM –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å AMEM –∏–∑ UnifiedOrchestrator (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            amem_system = getattr(self, 'amem_system', None)
            if not amem_system:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π AMEM
                try:
                    from ..core.unified_orchestrator import UnifiedOrchestrator
                    # TODO: –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π orchestrator
                    return self._generate_fallback_insights(task_description, analysis)
                except:
                    return self._generate_fallback_insights(task_description, analysis)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö
            task_type = analysis.get('task_type', 'general')
            tools_needed = analysis.get('tools', [])
            
            # –ò—â–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–¥–∞—á
            successful_memories = await amem_system.search_memories(
                query=f"—É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞–Ω—ã {task_type} –∫–∞—á–µ—Å—Ç–≤–æ",
                filter_tags=["high_quality", "successful_plan"]
            )
            
            # –ò—â–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á
            failure_memories = await amem_system.search_memories(
                query=f"–ø—Ä–æ–±–ª–µ–º—ã –æ—à–∏–±–∫–∏ {task_type}",
                filter_tags=["failure_analysis", "lessons_learned"]
            )
            
            insights_text = "üß† A-MEM –ò–ù–°–ê–ô–¢–´ –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø:\n\n"
            
            if successful_memories:
                insights_text += "‚úÖ –ü–†–û–í–ï–†–ï–ù–ù–´–ï –£–°–ü–ï–®–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:\n"
                for i, memory in enumerate(successful_memories[:3], 1):
                    content_preview = memory.get('content', '')[:150] + "..."
                    insights_text += f"{i}. {content_preview}\n"
                insights_text += "\n"
            
            if failure_memories:
                insights_text += "üö´ –ò–ó–ë–ï–ì–ê–ô –≠–¢–ò–• –û–®–ò–ë–û–ö:\n"
                for i, memory in enumerate(failure_memories[:2], 1):
                    content_preview = memory.get('content', '')[:100] + "..."
                    insights_text += f"{i}. {content_preview}\n"
                insights_text += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–∞–≥–æ–≤
            if "–∞–Ω–∞–ª–∏–∑" in task_description.lower() and ("—Å–æ–∑–¥–∞–π" in task_description.lower() or "—Å–¥–µ–ª–∞–π" in task_description.lower()):
                insights_text += "üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –ü–û –°–¢–†–£–ö–¢–£–†–ï:\n"
                insights_text += "- –†–∞–∑–±–µ–π –Ω–∞ 4-6 —à–∞–≥–æ–≤ (–∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω—ã–π!)\n"
                insights_text += "- –ù–∞—á–Ω–∏ —Å web_client –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
                insights_text += "- –°–æ–∑–¥–∞–≤–∞–π –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
                insights_text += "- –§–∏–Ω–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤/—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n\n"
            
            return insights_text
        
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è A-MEM –∏–Ω—Å–∞–π—Ç–æ–≤: {e}")
            return self._generate_fallback_insights(task_description, analysis)
    
    async def _save_execution_experience_to_amem(self, task_description: str, analysis: Dict, 
                                               execution_plan: Dict, result: Dict) -> None:
        """üß† –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ A-MEM –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å AMEM –∏–∑ UnifiedOrchestrator
            amem_system = getattr(self, 'amem_system', None)
            if not amem_system:
                print("‚ö†Ô∏è A-MEM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–ø—ã—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            success_rate = sum(1 for r in result.get('step_results', []) if r.get('success', False))
            total_steps = len(result.get('step_results', []))
            quality_score = success_rate / max(total_steps, 1)
            
            is_successful = result.get('status') == 'completed' and quality_score >= 0.5
            files_created = result.get('created_files', [])
            
            # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if is_successful:
                memory_content = f"""
–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á: {analysis.get('task_type', 'general')}

–ó–∞–¥–∞—á–∞: {task_description[:100]}...
–ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {quality_score:.2f} ({success_rate}/{total_steps} —à–∞–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ)
–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_created)}

–ü–õ–ê–ù –í–´–ü–û–õ–ù–ï–ù–ò–Ø:
{self._format_plan_for_memory(execution_plan)}

–†–ï–ó–£–õ–¨–¢–ê–¢–´:
- –°—Ç–∞—Ç—É—Å: {result.get('status')}
- –§–∞–π–ª—ã: {', '.join(files_created[:5])}
- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(analysis.get('chosen_tools', []))}

–£–°–ü–ï–•: –≠—Ç–æ—Ç –ø–ª–∞–Ω –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–¥–∞—á!
"""
                tags = ["successful_plan", "high_quality", analysis.get('task_type', 'general')]
            else:
                memory_content = f"""
–ù–µ—É–¥–∞—á–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á: {analysis.get('task_type', 'general')}

–ó–∞–¥–∞—á–∞: {task_description[:100]}...
–ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {quality_score:.2f} ({success_rate}/{total_steps} —à–∞–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ)

–ü–†–û–ë–õ–ï–ú–ù–´–ô –ü–õ–ê–ù:
{self._format_plan_for_memory(execution_plan)}

–û–®–ò–ë–ö–ò:
{self._extract_failure_reasons(result)}

–£–†–û–ö: –ò–∑–±–µ–≥–∞—Ç—å —ç—Ç–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –¥–ª—è –ø–æ–¥–æ–±–Ω—ã—Ö –∑–∞–¥–∞—á!
"""
                tags = ["failure_analysis", "lessons_learned", analysis.get('task_type', 'general')]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ A-MEM
            await amem_system.store_memory(
                content=memory_content.strip(),
                context={
                    "agent_role": self.role,
                    "task_type": analysis.get('task_type'),
                    "tools_used": analysis.get('chosen_tools', []),
                    "quality_score": quality_score,
                    "success": is_successful,
                    "step_count": total_steps,
                    "files_created_count": len(files_created)
                },
                tags=tags
            )
            
            print(f"üß† –û–ø—ã—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ A-MEM (–∫–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f})")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –≤ A-MEM: {e}")
    
    def _format_plan_for_memory(self, execution_plan: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å"""
        formatted_steps = []
        for step in execution_plan.get('steps', []):
            step_text = f"–®–∞–≥ {step.get('step', '?')}: {step.get('action', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')}"
            step_text += f" (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {step.get('tool', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})"
            formatted_steps.append(step_text)
        
        return '\n'.join(formatted_steps)
    
    def _extract_failure_reasons(self, result: Dict) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –Ω–µ—É–¥–∞—á –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        failures = []
        for step_result in result.get('step_results', []):
            if not step_result.get('success', True):
                error = step_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                failures.append(f"- {error}")
        
        return '\n'.join(failures) if failures else "- –ù–µ—Ç —è–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ —à–∞–≥–∞—Ö"
    
    def _generate_fallback_insights(self, task_description: str, analysis: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ –±–µ–∑ A-MEM"""
        insights = "üß† –ë–ê–ó–û–í–´–ï –ò–ù–°–ê–ô–¢–´ (A-MEM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω):\n\n"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –∏ –¥–∞—ë–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if "–∞–Ω–∞–ª–∏–∑" in task_description.lower():
            insights += "üìä –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß:\n"
            insights += "- –ù–∞—á–∏–Ω–∞–π —Å –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (web_client)\n"
            insights += "- –°–æ–∑–¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (.json –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, .md –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤)\n"
            insights += "- –í–∫–ª—é—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, –Ω–∞–∑–≤–∞–Ω–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        
        if "–ø—Ä–æ—Ç–æ—Ç–∏–ø" in task_description.lower() or "—Å–æ–∑–¥–∞–π" in task_description.lower():
            insights += "üé® –°–û–ó–î–ê–ù–ò–ï –ü–†–û–¢–û–¢–ò–ü–û–í:\n"
            insights += "- –û–ø–∏—Å—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏\n"
            insights += "- –í–∫–ª—é—á–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏\n"
            insights += "- –°–æ–∑–¥–∞–≤–∞–π —Ä–∞–±–æ—Ç–∞—é—â–∏–π –∫–æ–¥, –∞ –Ω–µ –æ–ø–∏—Å–∞–Ω–∏—è\n\n"
        
        if len(task_description.split()) > 15:  # –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞
            insights += "‚ö° –°–õ–û–ñ–ù–´–ï –ó–ê–î–ê–ß–ò:\n"
            insights += "- –†–∞–∑–±–∏–≤–∞–π –Ω–∞ 4-8 —à–∞–≥–æ–≤\n"
            insights += "- –ö–∞–∂–¥—ã–π —à–∞–≥ = –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
            insights += "- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö\n\n"
        
        return insights