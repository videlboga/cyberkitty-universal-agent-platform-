#!/usr/bin/env python3
"""
üîß –¢–ï–°–¢ CHROMADB –° –í–°–¢–†–û–ï–ù–ù–´–ú–ò EMBEDDING
–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é default_ef —Ñ—É–Ω–∫—Ü–∏—é ChromaDB
"""

import asyncio
import sys
import time
from pathlib import Path

try:
    import chromadb
    from chromadb.utils import embedding_functions
    print("‚úÖ ChromaDB –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
except ImportError:
    print("‚ùå ChromaDB –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sys.exit(1)

async def test_chromadb_builtin():
    """–¢–µ—Å—Ç ChromaDB —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π embedding —Ñ—É–Ω–∫—Ü–∏–µ–π"""
    print("üöÄ –¢–ï–°–¢ CHROMADB –° –í–°–¢–†–û–ï–ù–ù–´–ú–ò EMBEDDING")
    
    start_time = time.time()
    
    # –°–æ–∑–¥–∞—ë–º ChromaDB –∫–ª–∏–µ–Ω—Ç
    client = chromadb.Client()
    print("‚úÖ ChromaDB –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é embedding —Ñ—É–Ω–∫—Ü–∏—é
    default_ef = embedding_functions.DefaultEmbeddingFunction()
    print("‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è embedding —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å embedding —Ñ—É–Ω–∫—Ü–∏–µ–π
    collection = client.create_collection(
        name="test_builtin_collection",
        embedding_function=default_ef,
        get_or_create=True
    )
    print(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {collection.name}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã (ChromaDB —Å–∞–º —Å–æ–∑–¥–∞—Å—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏)
    documents = [
        "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python",
        "–≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å Django", 
        "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        "–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL",
        "—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ React"
    ]
    
    ids = [f"doc_{i}" for i in range(len(documents))]
    metadatas = [{"category": "programming", "id": i} for i in range(len(documents))]
    
    collection.add(
        documents=documents,
        metadatas=metadatas,
        ids=ids
    )
    
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    query = "Python —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
    results = collection.query(
        query_texts=[query],
        n_results=3
    )
    
    print(f"\nüîç –ü–æ–∏—Å–∫: '{query}'")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(results['documents'][0])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    for i, (doc, distance) in enumerate(zip(results['documents'][0], results['distances'][0])):
        print(f"  {i+1}. {doc} (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.3f})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    collection_count = collection.count()
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection_count}")
    
    total_time = time.time() - start_time
    print(f"  ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å")
    
    print("\nüéâ –í–°–¢–†–û–ï–ù–ù–´–ï EMBEDDING –†–ê–ë–û–¢–ê–Æ–¢!")
    return True

async def test_amem_with_builtin():
    """–¢–µ—Å—Ç A-MEM —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ embedding"""
    print("\nüß† –¢–ï–°–¢ A-MEM –° –í–°–¢–†–û–ï–ù–ù–´–ú–ò EMBEDDING")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
    sys.path.append(str(Path(__file__).parent))
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º A-MEM –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ sentence_transformers
        from kittycore.memory.amem_integration import KittyCoreMemorySystem
        
        # –°–æ–∑–¥–∞—ë–º A-MEM —Å–∏—Å—Ç–µ–º—É
        memory = KittyCoreMemorySystem(vault_path="test_vault")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API
        await memory.agent_remember(
            agent_id="test_agent",
            memory="–ò–∑—É—á–∞—é Python –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
            context={"task_type": "learning", "tags": ["python", "programming"]}
        )
        
        await memory.agent_remember(
            agent_id="test_agent", 
            memory="–†–∞–±–æ—Ç–∞—é —Å Django –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–º",
            context={"task_type": "work", "tags": ["django", "web", "python"]}
        )
        
        await memory.agent_remember(
            agent_id="test_agent",
            memory="–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL", 
            context={"task_type": "technical", "tags": ["database", "postgresql"]}
        )
        
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ 3 –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        search_query = "python –≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
        memories = await memory.collective_search(search_query)
        
        print(f"\nüîç –ü–æ–∏—Å–∫: '{search_query}'")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(memories)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
        for memory_item in memories:
            print(f"  üìù {memory_item['content']}")
            print(f"     üè∑Ô∏è –¢–µ–≥–∏: {memory_item.get('tags', [])}")
            print(f"     üÜî ID: {memory_item.get('id', 'unknown')}")
        
        print("\nüéâ A-MEM –° –í–°–¢–†–û–ï–ù–ù–´–ú–ò EMBEDDING –†–ê–ë–û–¢–ê–ï–¢!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ A-MEM: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ß–∏—Å—Ç—ã–π ChromaDB 
    success1 = await test_chromadb_builtin()
    
    # –¢–µ—Å—Ç 2: A-MEM —Å ChromaDB
    success2 = await test_amem_with_builtin()
    
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢:")
    print(f"  üß™ ChromaDB builtin: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if success1 else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"  üß† A-MEM builtin: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if success2 else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")

if __name__ == "__main__":
    asyncio.run(main()) 