#!/usr/bin/env python3
"""
üìö –ó–ê–ì–†–£–ó–ö–ê –°–¶–ï–ù–ê–†–ò–ï–í ONTOBOT –í –ë–ê–ó–£ –î–ê–ù–ù–´–•
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import os
import yaml
import json
import requests
from pathlib import Path
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("logs/scenario_loader.log", 
          format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | LOADER | {message}",
          level="INFO", rotation="10 MB", compression="zip")

class ScenarioLoader:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ KittyCore API."""
    
    def __init__(self, api_base_url: str = "http://localhost:8085"):
        self.api_base_url = api_base_url
        self.scenarios_dir = Path("scenarios")
        
        logger.info("üìö Scenario Loader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    def load_yaml_scenario(self, file_path: Path) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ YAML —Ñ–∞–π–ª–∞."""
        
        logger.info(f"üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑ {file_path}")
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                scenario = yaml.safe_load(f)
                
            logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω: {scenario.get('scenario_id', 'unknown')}")
            return scenario
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {str(e)}")
            return None
    
    def save_scenario_to_db(self, scenario: dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API."""
        
        scenario_id = scenario.get('scenario_id', 'unknown')
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id} –≤ –ë–î")
        
        try:
            url = f"{self.api_base_url}/api/v1/simple/mongo/save-scenario"
            
            payload = {
                "collection": "scenarios",
                "scenario_id": scenario_id,
                "document": scenario
            }
            
            response = requests.post(url, json=payload, timeout=30)
            result = response.json()
            
            if result.get('success'):
                logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {scenario_id}: {result.get('error', 'Unknown error')}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {scenario_id}: {str(e)}")
            return False
    
    def load_all_scenarios(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ –ø–∞–ø–∫–∏ scenarios."""
        
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
        
        if not self.scenarios_dir.exists():
            logger.error(f"‚ùå –ü–∞–ø–∫–∞ {self.scenarios_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return {"success": False, "error": "Scenarios directory not found"}
        
        results = {
            "loaded": [],
            "failed": [],
            "total": 0
        }
        
        # –ò—â–µ–º –≤—Å–µ YAML —Ñ–∞–π–ª—ã
        yaml_files = list(self.scenarios_dir.glob("*.yaml")) + list(self.scenarios_dir.glob("*.yml"))
        
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ YAML —Ñ–∞–π–ª–æ–≤: {len(yaml_files)}")
        
        for yaml_file in yaml_files:
            results["total"] += 1
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
            scenario = self.load_yaml_scenario(yaml_file)
            
            if scenario:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                if self.save_scenario_to_db(scenario):
                    results["loaded"].append({
                        "file": str(yaml_file),
                        "scenario_id": scenario.get('scenario_id', 'unknown')
                    })
                else:
                    results["failed"].append({
                        "file": str(yaml_file),
                        "scenario_id": scenario.get('scenario_id', 'unknown'),
                        "error": "Database save failed"
                    })
            else:
                results["failed"].append({
                    "file": str(yaml_file),
                    "scenario_id": "unknown",
                    "error": "YAML load failed"
                })
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:")
        logger.info(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {results['total']}")
        logger.info(f"   –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(results['loaded'])}")
        logger.info(f"   –û—à–∏–±–æ–∫: {len(results['failed'])}")
        
        return results
    
    def check_api_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ KittyCore API."""
        
        logger.info("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KittyCore API")
        
        try:
            url = f"{self.api_base_url}/health"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                logger.info("‚úÖ KittyCore API –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                logger.error(f"‚ùå KittyCore API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
    
    print("üìö –ó–ê–ì–†–£–ó–ö–ê –°–¶–ï–ù–ê–†–ò–ï–í ONTOBOT –í –ë–ê–ó–£ –î–ê–ù–ù–´–•")
    print("="*50)
    
    loader = ScenarioLoader()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
    print("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KittyCore...")
    if not loader.check_api_connection():
        print("‚ùå KittyCore API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8085.")
        return
    
    print("‚úÖ KittyCore API –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    print("\nüìö –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
    results = loader.load_all_scenarios()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–ì–†–£–ó–ö–ò:")
    print("-" * 30)
    print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {results['total']}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(results['loaded'])}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(results['failed'])}")
    
    if results['loaded']:
        print(f"\n‚úÖ –£–°–ü–ï–®–ù–û –ó–ê–ì–†–£–ñ–ï–ù–´:")
        for item in results['loaded']:
            print(f"   üìÑ {item['scenario_id']} ({item['file']})")
    
    if results['failed']:
        print(f"\n‚ùå –û–®–ò–ë–ö–ò –ó–ê–ì–†–£–ó–ö–ò:")
        for item in results['failed']:
            print(f"   üìÑ {item['scenario_id']} ({item['file']}) - {item['error']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("logs/scenario_load_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ logs/scenario_load_results.json")
    print("\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main() 