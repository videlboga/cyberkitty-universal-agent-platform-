#!/usr/bin/env python3
"""–¢–µ—Å—Ç ToolValidatorAgent"""

from kittycore.agents.tool_validator_agent import create_tool_validator

def test_tool_validator():
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º ToolValidatorAgent")
    
    validator = create_tool_validator()
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –ø–ª–∞–Ω —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    bad_plan = {
        'steps': [
            {
                'step': 1, 
                'action': '—Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª', 
                'tool': '`code_generator`.', 
                'params': {'filename': 'test.py'}
            },
            {
                'step': 2, 
                'action': '–ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ', 
                'tool': 'Python Interpreter', 
                'params': {'query': 'test'}
            },
            {
                'step': 3, 
                'action': '–∑–∞–ø—É—Å–∫', 
                'tool': 'Live Server', 
                'params': {}
            }
        ]
    }
    
    print("\nüìã –ò—Å—Ö–æ–¥–Ω—ã–π –ø–ª–∞–Ω:")
    for step in bad_plan['steps']:
        print(f"  –®–∞–≥ {step['step']}: {step['tool']}")
    
    print("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è:")
    result = validator.validate_plan(bad_plan)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"  ‚úÖ –í–∞–ª–∏–¥–µ–Ω: {result.is_valid}")
    print(f"  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(result.corrections_made)}")
    print(f"  ‚ùå –û—à–∏–±–æ–∫: {len(result.validation_errors)}")
    
    print(f"\nüìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω:")
    for step in result.corrected_steps:
        print(f"  –®–∞–≥ {step['step']}: {step['tool']}")
    
    return result

if __name__ == "__main__":
    test_tool_validator() 