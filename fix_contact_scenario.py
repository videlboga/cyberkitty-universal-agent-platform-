#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–≥–∞ request_contact –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ mr_ontobot_diagnostic_ya_relations.
–ü—Ä–æ–±–ª–µ–º–∞: –∫–Ω–æ–ø–∫–∞ request_contact –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ inline, –Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å reply –∫–Ω–æ–ø–∫–æ–π.
"""

import requests
import json
from loguru import logger

def fix_contact_scenario():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —à–∞–≥ request_contact –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
    
    # URL API
    base_url = "http://localhost:8085/api/v1/simple/mongo"
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    logger.info("üì• –ü–æ–ª—É—á–∞—é —Ç–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π...")
    response = requests.post(f"{base_url}/find", json={
        "collection": "scenarios",
        "filter": {"scenario_id": "mr_ontobot_diagnostic_ya_relations"}
    })
    
    if not response.json().get("success"):
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π")
        return False
        
    scenario = response.json()["data"][0]
    logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–ª—É—á–µ–Ω, ID: {scenario['scenario_id']}")
    
    # 2. –ù–∞—Ö–æ–¥–∏–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —à–∞–≥ request_contact
    steps = scenario["steps"]
    for i, step in enumerate(steps):
        if step["id"] == "request_contact":
            logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è—é —à–∞–≥ request_contact (–∏–Ω–¥–µ–∫—Å {i})")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–≥–∞
            steps[i]["params"] = {
                "action": "send_message",
                "chat_id": "{chat_id}",
                "text": "üìû **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º**\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                "reply_markup": {
                    "keyboard": [
                        [
                            {
                                "text": "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                                "request_contact": True
                            }
                        ]
                    ],
                    "one_time_keyboard": True,
                    "resize_keyboard": True
                }
            }
            
            logger.info("‚úÖ –®–∞–≥ request_contact –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
            break
    else:
        logger.error("‚ùå –®–∞–≥ request_contact –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    logger.info("üíæ –û–±–Ω–æ–≤–ª—è—é —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    response = requests.post(f"{base_url}/update", json={
        "collection": "scenarios",
        "filter": {"scenario_id": "mr_ontobot_diagnostic_ya_relations"},
        "document": {
            "steps": steps
        }
    })
    
    if response.json().get("success"):
        logger.info("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        return True
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {response.json()}")
        return False

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è...")
    success = fix_contact_scenario()
    
    if success:
        logger.info("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("üí• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!") 