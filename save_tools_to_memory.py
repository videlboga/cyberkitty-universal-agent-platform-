#!/usr/bin/env python3
"""
üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –£–°–ü–ï–®–ù–´–• –ü–†–ò–ú–ï–ù–ï–ù–ò–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í –í –ü–ê–ú–Ø–¢–¨ KITTYCORE 3.0
–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã
"""

import json
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.append(str(Path(__file__).parent / 'kittycore'))

from kittycore.memory.enhanced_memory import EnhancedCollectiveMemory

class ToolsMemorySaver:
    def __init__(self):
        self.memory = EnhancedCollectiveMemory(team_id="tool_testing_team")
        
    async def save_successful_tools_to_memory(self, memory_file: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–º—è—Ç—å KittyCore"""
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        with open(memory_file, 'r', encoding='utf-8') as f:
            memory_records = json.load(f)
        
        print(f"üß† –°–æ—Ö—Ä–∞–Ω—è—é —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–º—è—Ç—å KittyCore...")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        successful_count = 0
        for record in memory_records:
            if record.get("success", False):
                tool_name = record["tool"]
                action = record["working_action"]
                params = record["correct_params"]
                notes = record["notes"]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø–∞–º—è—Ç–∏
                memory_content = {
                    "tool": tool_name,
                    "working_action": action,
                    "correct_parameters": params,
                    "performance_notes": notes,
                    "test_results": {
                        "success": True,
                        "verified": True,
                        "response_size": record.get("response_size", 0)
                    },
                    "usage_example": self._generate_usage_example(tool_name, action, params),
                    "type": "verified_tool_usage"
                }
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å —Å —Ç–µ–≥–∞–º–∏
                memory_entry_id = await self.memory.store(
                    content=json.dumps(memory_content, ensure_ascii=False, indent=2),
                    agent_id="tool_tester",
                    tags=[
                        "tool_usage", 
                        "verified", 
                        "successful", 
                        tool_name, 
                        action,
                        "real_testing"
                    ]
                )
                
                successful_count += 1
                print(f"   ‚úÖ {tool_name}.{action} ‚Üí —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å (ID: {memory_entry_id})")
        
        print(f"\nüéØ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {successful_count} —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤!")
        return successful_count
    
    def _generate_usage_example(self, tool_name: str, action: str, params: dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        
        if tool_name == "enhanced_web_search":
            return f"""
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {tool_name}
tool = EnhancedWebSearchTool()
result = await tool.execute(
    query="–≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
    limit=5
)
if result.success:
    results = result.data["results"]
    print(f"–ù–∞–π–¥–µ–Ω–æ {{len(results)}} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
"""
        
        elif tool_name == "media_tool":
            return f"""
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {tool_name}
tool = MediaTool()
result = tool.execute(action="get_info")
if result.success:
    print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ:", result.data)
"""
        
        elif tool_name == "network_tool":
            return f"""
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {tool_name}
tool = NetworkTool()
result = await tool.execute(
    action="ping_host",
    host="google.com",
    count=3
)
if result.success:
    print("Ping —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", result.data)
"""
        
        else:
            param_str = ", ".join([f"{k}='{v}'" for k, v in params.items()])
            return f"""
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {tool_name}
tool = {tool_name.title().replace('_', '')}()
result = tool.execute({param_str})
if result.success:
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç:", result.data)
"""
    
    async def search_tool_memories(self, tool_name: str = None):
        """–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –≤ –ø–∞–º—è—Ç–∏"""
        
        if tool_name:
            query = f"tool usage {tool_name}"
        else:
            query = "verified tool usage successful"
        
        memories = await self.memory.search(query, limit=10)
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(memories)} –∑–∞–ø–∏—Å–µ–π –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –≤ –ø–∞–º—è—Ç–∏:")
        
        for memory in memories:
            content = memory.content
            tags = ", ".join(memory.tags) if memory.tags else "–Ω–µ—Ç —Ç–µ–≥–æ–≤"
            print(f"   üìù ID: {memory.id}")
            print(f"      üìã –¢–µ–≥–∏: {tags}")
            print(f"      üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç: {content[:100]}...")
            print()
        
        return memories

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–û–•–†–ê–ù–ï–ù–ò–ï –£–°–ü–ï–®–ù–´–• –ü–†–ò–ú–ï–ù–ï–ù–ò–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í –í –ü–ê–ú–Ø–¢–¨ KITTYCORE 3.0")
    print("=" * 70)
    
    saver = ToolsMemorySaver()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
    memory_file = "test_real_tools_final/memory_records.json"
    
    if Path(memory_file).exists():
        await saver.save_successful_tools_to_memory(memory_file)
        
        print("\n" + "=" * 70)
        print("üîç –ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–Å–ù–ù–´–• –ó–ê–ü–ò–°–ï–ô:")
        
        # –ò—â–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        await saver.search_tool_memories()
        
    else:
        print(f"‚ùå –§–∞–π–ª {memory_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(main()) 