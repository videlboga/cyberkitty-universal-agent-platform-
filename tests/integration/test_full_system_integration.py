"""
üß™ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ KITTYCORE 3.0
Comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import pytest
import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ kittycore
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from kittycore.tools import DEFAULT_TOOLS
from kittycore.core.unified_orchestrator import UnifiedOrchestrator
from kittycore.memory.amem_integration import KittyCoreMemorySystem
from kittycore.core.obsidian_orchestrator import ObsidianOrchestrator

class TestFullSystemIntegration:
    """–¢–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    @pytest.fixture
    def test_vault_path(self, tmp_path):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ vault –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        vault = tmp_path / "test_vault"
        vault.mkdir()
        for subdir in ["agents", "tasks", "results", "system", "coordination", "human"]:
            (vault / subdir).mkdir()
        return str(vault)
    
    def test_tools_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {len(DEFAULT_TOOLS.tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        assert len(DEFAULT_TOOLS.tools) >= 15, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 15 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tool_names = list(DEFAULT_TOOLS.tools.keys())
        
        expected_categories = [
            "enhanced_web_scraping",  # Web
            "code_execution",         # Code  
            "super_system_tool",      # System
            "document_tool",          # Documents
            "computer_use",           # GUI
            "ai_integration_tool",    # AI
            "security_tool",          # Security
        ]
        
        for category in expected_categories:
            assert any(category in name for name in tool_names), f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        print(f"‚úÖ –í—Å–µ {len(DEFAULT_TOOLS.tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"üìã –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(tool_names[:5])}...")
    
    @pytest.mark.asyncio
    async def test_unified_orchestrator_basic(self, test_vault_path):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã UnifiedOrchestrator"""
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UnifiedOrchestrator...")
        
        orchestrator = UnifiedOrchestrator(vault_path=test_vault_path)
        
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞
        task = "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello.txt —Å —Ç–µ–∫—Å—Ç–æ–º 'Hello from KittyCore 3.0!'"
        
        result = await orchestrator.execute_task(task)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result is not None, "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        assert hasattr(result, 'success'), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–µ success"
        
        print(f"‚úÖ UnifiedOrchestrator —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: success={getattr(result, 'success', 'unknown')}")
    
    @pytest.mark.asyncio  
    async def test_memory_system_integration(self, test_vault_path):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ A-MEM"""
        print(f"\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ A-MEM...")
        
        # –°–æ–∑–¥–∞—ë–º —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏
        memory_system = KittyCoreMemorySystem(vault_path=test_vault_path)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        memory_data = {
            "agent_id": "test_agent",
            "task": "test_task",
            "content": "–¢–µ—Å—Ç–æ–≤–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞",
            "metadata": {"test": True, "type": "integration"}
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        memory_id = await memory_system.store_memory(**memory_data)
        assert memory_id is not None, "Memory ID –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        results = await memory_system.search_memories("—Ç–µ—Å—Ç–æ–≤–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
        assert len(results) > 0, "–ü–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ A-MEM —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(results)}")
    
    @pytest.mark.asyncio
    async def test_obsidian_orchestrator_integration(self, test_vault_path):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ObsidianOrchestrator"""
        print(f"\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ObsidianOrchestrator...")
        
        orchestrator = ObsidianOrchestrator(vault_path=test_vault_path)
        
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        task = "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞"
        
        result = await orchestrator.execute_task(task)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏—Å—å —Ñ–∞–π–ª—ã –≤ vault
        vault_path = Path(test_vault_path)
        task_files = list((vault_path / "tasks").glob("*.md"))
        
        assert len(task_files) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á"
        
        print(f"‚úÖ ObsidianOrchestrator —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞—á: {len(task_files)}")
    
    def test_tools_registration_consistency(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
        required_methods = ['execute', 'get_schema']
        
        for name, tool in DEFAULT_TOOLS.tools.items():
            for method in required_methods:
                assert hasattr(tool, method), f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {name} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ {method}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º—ë–Ω
        tool_names = list(DEFAULT_TOOLS.tools.keys())
        assert len(tool_names) == len(set(tool_names)), "–ò–º–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏"
        
        print(f"‚úÖ –í—Å–µ {len(DEFAULT_TOOLS.tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
    
    @pytest.mark.asyncio
    async def test_end_to_end_task_execution(self, test_vault_path):
        """End-to-end —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        print(f"\nüéØ E2E —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏...")
        
        orchestrator = UnifiedOrchestrator(vault_path=test_vault_path)
        
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞–¥–∞—á–∞
        task = """
        –°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–µ–∫—Ç:
        1. –§–∞–π–ª README.md —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
        2. –§–∞–π–ª main.py —Å —Ñ—É–Ω–∫—Ü–∏–µ–π hello_world()
        3. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        """
        
        result = await orchestrator.execute_task(task)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        assert result is not None, "–†–µ–∑—É–ª—å—Ç–∞—Ç E2E —Ç–µ—Å—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        expected_files = ["README.md", "main.py"]
        created_files = []
        
        # –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ outputs/ –∏–ª–∏ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        outputs_dir = Path("outputs")
        current_dir = Path(".")
        
        for expected_file in expected_files:
            if (outputs_dir / expected_file).exists():
                created_files.append(expected_file)
            elif (current_dir / expected_file).exists():
                created_files.append(expected_file)
        
        print(f"‚úÖ E2E —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(created_files)}/{len(expected_files)}")
        print(f"üìã –§–∞–π–ª—ã: {created_files}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    pytest.main([__file__, "-v", "--tb=short"]) 