#!/bin/bash

# –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã KittyCore API —á–µ—Ä–µ–∑ curl
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ MongoDB –∏ —Ä–∞–±–æ—Ç—É –ø–ª–∞–≥–∏–Ω–æ–≤

set -e  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ

API_URL="http://localhost:8085"
TEST_PREFIX="curl_test_$(date +%s)"

echo "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ KittyCore API —á–µ—Ä–µ–∑ curl"
echo "üîó API URL: $API_URL"
echo "üè∑Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ñ–∏–∫—Å: $TEST_PREFIX"
echo "=" | tr '=' '=' | head -c 50; echo

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ API
check_response() {
    local response="$1"
    local description="$2"
    
    if echo "$response" | jq -e '.success == true' > /dev/null 2>&1; then
        echo "‚úÖ $description: SUCCESS"
        return 0
    else
        echo "‚ùå $description: FAILED"
        echo "Response: $response"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ JSON
extract_value() {
    local response="$1"
    local path="$2"
    echo "$response" | jq -r "$path"
}

echo "üìä 1. –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø API"
health_response=$(curl -s "$API_URL/api/v1/simple/health")
echo "Health response: $health_response"

echo
echo "üìã 2. –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –°–ò–°–¢–ï–ú–ï"
info_response=$(curl -s "$API_URL/api/v1/simple/info")
echo "Info response:"
echo "$info_response" | jq .

echo
echo "üóÑÔ∏è 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MONGODB –û–ü–ï–†–ê–¶–ò–ô"

# === CREATE - –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===
echo "üìù 3.1. CREATE - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"

create_payload='{
  "collection": "test_api_crud",
  "document": {
    "_id": "'$TEST_PREFIX'_doc1",
    "name": "Test Document from API",
    "value": 100,
    "created_at": "'$(date -Iseconds)'",
    "tags": ["api", "test", "curl"]
  }
}'

create_response=$(curl -s -X POST "$API_URL/api/v1/simple/mongo/insert" \
  -H "Content-Type: application/json" \
  -d "$create_payload")

check_response "$create_response" "–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
created_id=$(extract_value "$create_response" '.inserted_id')
echo "üìÑ –°–æ–∑–¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç —Å ID: $created_id"

# === READ - –ß—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===
echo
echo "üìñ 3.2. READ - –ß—Ç–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"

read_payload='{
  "collection": "test_api_crud",
  "filter": {"_id": "'$TEST_PREFIX'_doc1"}
}'

read_response=$(curl -s -X POST "$API_URL/api/v1/simple/mongo/find" \
  -H "Content-Type: application/json" \
  -d "$read_payload")

check_response "$read_response" "–ß—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
doc_name=$(extract_value "$read_response" '.data[0].name')
doc_value=$(extract_value "$read_response" '.data[0].value')

if [ "$doc_name" = "Test Document from API" ] && [ "$doc_value" = "100" ]; then
    echo "‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ"
    echo "   –ò–º—è: $doc_name"
    echo "   –ó–Ω–∞—á–µ–Ω–∏–µ: $doc_value"
else
    echo "‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ"
    echo "   –û–∂–∏–¥–∞–ª–æ—Å—å: 'Test Document from API', 100"
    echo "   –ü–æ–ª—É—á–µ–Ω–æ: '$doc_name', $doc_value"
    exit 1
fi

# === BULK INSERT - –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ ===
echo
echo "üì¶ 3.3. BULK INSERT - –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"

bulk_docs='['
for i in {2..5}; do
    if [ $i -gt 2 ]; then bulk_docs+=','; fi
    bulk_docs+='{
        "_id": "'$TEST_PREFIX'_doc'$i'",
        "name": "Bulk Document '$i'",
        "value": '$((i * 10))',
        "batch": "'$TEST_PREFIX'"
    }'
done
bulk_docs+=']'

bulk_insert_payload='{
  "collection": "test_api_crud",
  "documents": '$bulk_docs'
}'

bulk_response=$(curl -s -X POST "$API_URL/api/v1/simple/mongo/insert" \
  -H "Content-Type: application/json" \
  -d "$bulk_insert_payload")

check_response "$bulk_response" "–ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞"
inserted_count=$(extract_value "$bulk_response" '.inserted_count')
echo "üì¶ –í—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: $inserted_count"

if [ "$inserted_count" != "4" ]; then
    echo "‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 4 –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ: $inserted_count"
    exit 1
fi

# === VERIFY BULK - –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏ ===
echo
echo "üîç 3.4. VERIFY BULK - –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏"

verify_payload='{
  "collection": "test_api_crud",
  "filter": {"_id": {"$regex": "^'$TEST_PREFIX'"}}
}'

verify_response=$(curl -s -X POST "$API_URL/api/v1/simple/mongo/find" \
  -H "Content-Type: application/json" \
  -d "$verify_payload")

check_response "$verify_response" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏"
total_docs=$(extract_value "$verify_response" '.data | length')

if [ "$total_docs" = "5" ]; then
    echo "‚úÖ –ù–∞–π–¥–µ–Ω–æ $total_docs –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å 5)"
else
    echo "‚ùå –ù–∞–π–¥–µ–Ω–æ $total_docs –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ–∂–∏–¥–∞–ª–æ—Å—å 5"
    exit 1
fi

echo
echo "üéØ 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–ò–Ø –°–¶–ï–ù–ê–†–ò–ï–í"

# === MONGO SCENARIO - –°—Ü–µ–Ω–∞—Ä–∏–π —Å MongoDB –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ ===
echo "üìú 4.1. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å MongoDB –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏"

mongo_scenario='{
  "scenario_id": "test_mongo_scenario",
  "steps": [
    {
      "id": "create_test_doc",
      "type": "mongo_insert_one",
      "params": {
        "collection": "test_scenarios",
        "document": {
          "_id": "'$TEST_PREFIX'_scenario",
          "scenario_name": "MongoDB Test Scenario",
          "executed_at": "'$(date -Iseconds)'",
          "status": "running"
        },
        "output_var": "create_result"
      },
      "next_step": "update_status"
    },
    {
      "id": "update_status",
      "type": "mongo_update_one",
      "params": {
        "collection": "test_scenarios",
        "filter": {"_id": "'$TEST_PREFIX'_scenario"},
        "update": {
          "$set": {
            "status": "completed",
            "completed_at": "'$(date -Iseconds)'"
          }
        },
        "output_var": "update_result"
      },
      "next_step": "end"
    },
    {
      "id": "end",
      "type": "end"
    }
  ]
}'

scenario_payload='{
  "scenario": '$mongo_scenario',
  "context": {
    "test_prefix": "'$TEST_PREFIX'",
    "api_test": true
  }
}'

scenario_response=$(curl -s -X POST "$API_URL/api/v1/simple/execute" \
  -H "Content-Type: application/json" \
  -d "$scenario_payload")

check_response "$scenario_response" "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ MongoDB —Å—Ü–µ–Ω–∞—Ä–∏—è"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è
scenario_verify_payload='{
  "collection": "test_scenarios",
  "filter": {"_id": "'$TEST_PREFIX'_scenario"}
}'

scenario_verify_response=$(curl -s -X POST "$API_URL/api/v1/simple/mongo/find" \
  -H "Content-Type: application/json" \
  -d "$scenario_verify_payload")

scenario_status=$(extract_value "$scenario_verify_response" '.data[0].status')
if [ "$scenario_status" = "completed" ]; then
    echo "‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Å—Ç–∞—Ç—É—Å: $scenario_status"
else
    echo "‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è, —Å—Ç–∞—Ç—É—Å: $scenario_status"
    exit 1
fi

echo
echo "üßπ 5. –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•"

# –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (—á–µ—Ä–µ–∑ —Å—Ü–µ–Ω–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω–∏—è)
cleanup_scenario='{
  "scenario_id": "cleanup_test",
  "steps": [
    {
      "id": "cleanup_crud",
      "type": "mongo_delete_many",
      "params": {
        "collection": "test_api_crud",
        "filter": {"_id": {"$regex": "^'$TEST_PREFIX'"}},
        "output_var": "cleanup_crud_result"
      },
      "next_step": "cleanup_scenarios"
    },
    {
      "id": "cleanup_scenarios",
      "type": "mongo_delete_many",
      "params": {
        "collection": "test_scenarios",
        "filter": {"_id": {"$regex": "^'$TEST_PREFIX'"}},
        "output_var": "cleanup_scenarios_result"
      },
      "next_step": "end"
    },
    {
      "id": "end",
      "type": "end"
    }
  ]
}'

cleanup_payload='{
  "scenario": '$cleanup_scenario',
  "context": {}
}'

cleanup_response=$(curl -s -X POST "$API_URL/api/v1/simple/execute" \
  -H "Content-Type: application/json" \
  -d "$cleanup_payload")

check_response "$cleanup_response" "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω—ã
final_verify_payload='{
  "collection": "test_api_crud",
  "filter": {"_id": {"$regex": "^'$TEST_PREFIX'"}}
}'

final_verify_response=$(curl -s -X POST "$API_URL/api/v1/simple/mongo/find" \
  -H "Content-Type: application/json" \
  -d "$final_verify_payload")

remaining_docs=$(extract_value "$final_verify_response" '.data | length')
if [ "$remaining_docs" = "0" ]; then
    echo "‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã"
else
    echo "‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å $remaining_docs –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)"
fi

echo
echo "üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:"
echo "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
echo "‚úÖ MongoDB –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
echo "‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç"
echo "‚úÖ –ß—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç"
echo "‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"
echo "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç"
echo "‚úÖ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è"
echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç"
echo
echo "üöÄ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!" 