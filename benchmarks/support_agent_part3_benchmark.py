#!/usr/bin/env python3
"""
üéß –ë–ï–ù–ß–ú–ê–†–ö –ê–ì–ï–ù–¢–ê –ü–û–î–î–ï–†–ñ–ö–ò - –ß–ê–°–¢–¨ 3: –°–ò–°–¢–ï–ú–ê –û–¶–ï–ù–ö–ò
–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
"""

import time
import random
from typing import List, Dict, Any
from support_agent_part1_knowledge import *
from support_agent_part2_agent import SupportAgent

class SupportBenchmark:
    """–ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    
    def __init__(self):
        self.test_scenarios = self._create_test_scenarios()
    
    def _create_test_scenarios(self) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        return [
            # –ü—Ä–æ—Å—Ç—ã–µ —Å–ª—É—á–∞–∏
            {
                "customer_id": "cust_001",
                "problem": "–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –¥–æ–º–∞",
                "priority": TicketPriority.MEDIUM,
                "expected_resolution": True,
                "difficulty": "easy"
            },
            {
                "customer_id": "cust_002", 
                "problem": "–ú–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å–∞–π—Ç—ã",
                "priority": TicketPriority.LOW,
                "expected_resolution": True,
                "difficulty": "easy"
            },
            
            # –°—Ä–µ–¥–Ω–∏–µ —Å–ª—É—á–∞–∏
            {
                "customer_id": "cust_001",
                "problem": "–ö–∞–∫ –ø–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å wifi?",
                "priority": TicketPriority.LOW,
                "expected_resolution": True,
                "difficulty": "medium"
            },
            {
                "customer_id": "cust_002",
                "problem": "–†–æ—É—Ç–µ—Ä –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è —Å–æ–≤—Å–µ–º",
                "priority": TicketPriority.HIGH,
                "expected_resolution": False,  # –¢—Ä–µ–±—É–µ—Ç —ç—Å–∫–∞–ª–∞—Ü–∏–∏
                "difficulty": "medium"
            },
            
            # –°–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏
            {
                "customer_id": "cust_003",  # –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
                "problem": "–û–ø—è—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –£–∂–µ —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑!",
                "priority": TicketPriority.HIGH,
                "expected_resolution": False,  # –°–ª–æ–∂–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
                "difficulty": "hard"
            },
            {
                "customer_id": "cust_001",
                "problem": "–£ –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π —Ç–æ–∂–µ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞",
                "priority": TicketPriority.URGENT,
                "expected_resolution": False,  # –ú–∞—Å—Å–æ–≤–∞—è –∞–≤–∞—Ä–∏—è
                "difficulty": "hard"
            }
        ]
    
    def evaluate_agent(self, agent: SupportAgent) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ –≤—Å–µ–º —Å—Ü–µ–Ω–∞—Ä–∏—è–º"""
        print(f"\nüéØ –û–¶–ï–ù–ö–ê –ê–ì–ï–ù–¢–ê: {agent.name}")
        print("=" * 50)
        
        results = []
        total_time = 0
        total_satisfaction = 0
        resolved_count = 0
        escalated_count = 0
        
        for i, scenario in enumerate(self.test_scenarios, 1):
            print(f"\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π {i}/{len(self.test_scenarios)} ({scenario['difficulty'].upper()})")
            
            # –°–æ–∑–¥–∞—ë–º —Ç–∏–∫–µ—Ç
            customer = agent.customer_db.get_customer(scenario["customer_id"])
            ticket = SupportTicket(
                id=f"BENCH_{i:03d}",
                customer=customer,
                problem_description=scenario["problem"],
                priority=scenario["priority"],
                status=TicketStatus.NEW,
                created_at=time.time(),
                agent_actions=[]
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
            start_time = time.time()
            result = agent.handle_ticket(ticket)
            end_time = time.time()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            scenario_result = {
                "scenario": i,
                "difficulty": scenario["difficulty"],
                "expected": scenario["expected_resolution"],
                "actual_status": result["status"],
                "processing_time": end_time - start_time,
                "customer_satisfaction": result.get("customer_satisfaction", 0),
                "correct_prediction": (result["status"] == "resolved") == scenario["expected_resolution"]
            }
            
            results.append(scenario_result)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_time += scenario_result["processing_time"]
            if result["status"] == "resolved":
                resolved_count += 1
                total_satisfaction += scenario_result["customer_satisfaction"]
            else:
                escalated_count += 1
            
            print(f"‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ: {'–†–µ—à–∏—Ç—å' if scenario['expected_resolution'] else '–≠—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å'}")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['status']} ({'‚úÖ' if scenario_result['correct_prediction'] else '‚ùå'})")
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        avg_time = total_time / len(self.test_scenarios)
        resolution_rate = resolved_count / len(self.test_scenarios)
        escalation_rate = escalated_count / len(self.test_scenarios)
        avg_satisfaction = total_satisfaction / max(resolved_count, 1)
        
        accuracy = sum(1 for r in results if r["correct_prediction"]) / len(results)
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        easy_results = [r for r in results if r["difficulty"] == "easy"]
        medium_results = [r for r in results if r["difficulty"] == "medium"]  
        hard_results = [r for r in results if r["difficulty"] == "hard"]
        
        easy_accuracy = sum(1 for r in easy_results if r["correct_prediction"]) / len(easy_results) if easy_results else 0
        medium_accuracy = sum(1 for r in medium_results if r["correct_prediction"]) / len(medium_results) if medium_results else 0
        hard_accuracy = sum(1 for r in hard_results if r["correct_prediction"]) / len(hard_results) if hard_results else 0
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª (0-100)
        final_score = (
            accuracy * 40 +           # –¢–æ—á–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π (40%)
            (avg_satisfaction/5) * 30 + # –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ (30%)
            (1 - avg_time/10) * 20 +  # –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã (20%)
            (easy_accuracy * 0.3 + medium_accuracy * 0.4 + hard_accuracy * 0.3) * 10  # –†–∞–±–æ—Ç–∞ —Å–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é (10%)
        )
        
        return {
            "agent_name": agent.name,
            "total_scenarios": len(self.test_scenarios),
            "resolved_tickets": resolved_count,
            "escalated_tickets": escalated_count,
            "resolution_rate": resolution_rate,
            "escalation_rate": escalation_rate,
            "avg_processing_time": avg_time,
            "avg_customer_satisfaction": avg_satisfaction,
            "accuracy": accuracy,
            "easy_accuracy": easy_accuracy,
            "medium_accuracy": medium_accuracy,
            "hard_accuracy": hard_accuracy,
            "final_score": final_score,
            "detailed_results": results
        }
    
    def print_evaluation_report(self, evaluation: Dict[str, Any]):
        """–ü–µ—á–∞—Ç—å –æ—Ç—á—ë—Ç–∞ –æ–± –æ—Ü–µ–Ω–∫–µ"""
        print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢: {evaluation['agent_name']}")
        print("=" * 60)
        
        print(f"üéØ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: {evaluation['final_score']:.1f}/100")
        print()
        
        print("üìà –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
        print(f"  ‚Ä¢ –†–µ—à–µ–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤: {evaluation['resolved_tickets']}/{evaluation['total_scenarios']} ({evaluation['resolution_rate']*100:.1f}%)")
        print(f"  ‚Ä¢ –≠—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–æ: {evaluation['escalated_tickets']}/{evaluation['total_scenarios']} ({evaluation['escalation_rate']*100:.1f}%)")
        print(f"  ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π: {evaluation['accuracy']*100:.1f}%")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {evaluation['avg_processing_time']:.2f} —Å–µ–∫")
        print(f"  ‚Ä¢ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å: {evaluation['avg_customer_satisfaction']:.1f}/5.0")
        print()
        
        print("üéöÔ∏è –†–ê–ë–û–¢–ê –ü–û –°–õ–û–ñ–ù–û–°–¢–ò:")
        print(f"  ‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏: {evaluation['easy_accuracy']*100:.1f}%")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏: {evaluation['medium_accuracy']*100:.1f}%") 
        print(f"  ‚Ä¢ –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏: {evaluation['hard_accuracy']*100:.1f}%")
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        if evaluation['final_score'] >= 80:
            grade = "üèÜ –û–¢–õ–ò–ß–ù–û"
        elif evaluation['final_score'] >= 60:
            grade = "üëç –•–û–†–û–®–û"
        elif evaluation['final_score'] >= 40:
            grade = "‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
        else:
            grade = "‚ùå –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
        
        print(f"\nüèÖ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {grade}")

# –¢–µ—Å—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞
if __name__ == "__main__":
    print("üéØ –¢–ï–°–¢ –ë–ï–ù–ß–ú–ê–†–ö–ê –ê–ì–ï–ù–¢–ê –ü–û–î–î–ï–†–ñ–ö–ò")
    
    # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞ –∏ –±–µ–Ω—á–º–∞—Ä–∫
    agent = SupportAgent("–¢–µ—Å—Ç–æ–≤—ã–π –ê–≥–µ–Ω—Ç")
    benchmark = SupportBenchmark()
    
    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    evaluation = benchmark.evaluate_agent(agent)
    
    # –ü–µ—á–∞—Ç–∞–µ–º –æ—Ç—á—ë—Ç
    benchmark.print_evaluation_report(evaluation)
    
    print(f"\n‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à—ë–Ω!") 