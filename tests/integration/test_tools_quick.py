"""
üöÄ –ë–´–°–¢–†–´–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import pytest
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ kittycore
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from kittycore.tools import DEFAULT_TOOLS

class TestToolsQuickIntegration:
    """–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def test_tools_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        print(f"\nüîß –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≥—Ä—É–∑–∫—É {len(DEFAULT_TOOLS.tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        assert len(DEFAULT_TOOLS.tools) > 0, "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        
        tool_names = list(DEFAULT_TOOLS.tools.keys())
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tool_names)}")
        print(f"üìã –ü–µ—Ä–≤—ã–µ 5: {tool_names[:5]}")
    
    @pytest.mark.asyncio
    async def test_enhanced_code_generator(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞"""
        print(f"\nüíª –¢–µ—Å—Ç–∏—Ä—É—é EnhancedCodeGenerator...")
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        code_tool = None
        for name, tool in DEFAULT_TOOLS.tools.items():
            if "code" in name.lower() and "enhanced" in name.lower():
                code_tool = tool
                break
        
        if code_tool is None:
            print("‚ö†Ô∏è EnhancedCodeGenerator –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–æ–¥–∞
        test_params = {
            "task": "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é hello_world() –Ω–∞ Python",
            "language": "python",
            "output_file": "test_hello.py"
        }
        
        try:
            result = await code_tool.execute(test_params)
            assert result is not None, "–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
            print(f"‚úÖ EnhancedCodeGenerator —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ EnhancedCodeGenerator: {e}")
    
    @pytest.mark.asyncio  
    async def test_super_system_tool(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        print(f"\nüõ†Ô∏è –¢–µ—Å—Ç–∏—Ä—É—é SuperSystemTool...")
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        system_tool = None
        for name, tool in DEFAULT_TOOLS.tools.items():
            if "super_system" in name.lower():
                system_tool = tool
                break
        
        if system_tool is None:
            print("‚ö†Ô∏è SuperSystemTool –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        test_params = {
            "action": "list_files",
            "path": "."
        }
        
        try:
            result = await system_tool.execute(test_params)
            assert result is not None, "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
            print(f"‚úÖ SuperSystemTool —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ SuperSystemTool: {e}")
    
    @pytest.mark.asyncio
    async def test_enhanced_web_scraping(self):
        """–¢–µ—Å—Ç –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞"""
        print(f"\nüåê –¢–µ—Å—Ç–∏—Ä—É—é EnhancedWebScraping...")
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        web_tool = None
        for name, tool in DEFAULT_TOOLS.tools.items():
            if "web" in name.lower() and "scraping" in name.lower():
                web_tool = tool
                break
        
        if web_tool is None:
            print("‚ö†Ô∏è EnhancedWebScraping –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å (httpbin –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        test_params = {
            "url": "https://httpbin.org/json",
            "method": "GET"
        }
        
        try:
            result = await web_tool.execute(test_params)
            assert result is not None, "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
            print(f"‚úÖ EnhancedWebScraping —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ EnhancedWebScraping: {e}")
    
    def test_tools_schemas(self):
        """–¢–µ—Å—Ç —Å—Ö–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        print(f"\nüìã –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ö–µ–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        valid_schemas = 0
        total_tools = len(DEFAULT_TOOLS.tools)
        
        for name, tool in DEFAULT_TOOLS.tools.items():
            try:
                schema = tool.get_schema()
                if schema and isinstance(schema, dict):
                    valid_schemas += 1
                else:
                    print(f"‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {name} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ö–µ–º—É")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ö–µ–º—ã {name}: {e}")
        
        print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Å—Ö–µ–º: {valid_schemas}/{total_tools}")
        assert valid_schemas >= total_tools * 0.8, "–ú–∏–Ω–∏–º—É–º 80% –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ö–µ–º—ã"
    
    def test_memory_system_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        print(f"\nüß† –¢–µ—Å—Ç–∏—Ä—É—é –±–∞–∑–æ–≤—É—é –ø–∞–º—è—Ç—å...")
        
        try:
            from kittycore.memory.amem_integration import KittyCoreMemorySystem
            
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏
            memory = KittyCoreMemorySystem(vault_path="/tmp/test_memory")
            
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ A-MEM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏: {e}")
    
    def test_tools_categories_coverage(self):
        """–¢–µ—Å—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        
        tool_names = [name.lower() for name in DEFAULT_TOOLS.tools.keys()]
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        expected_categories = {
            "web": ["web", "scraping", "search"],
            "code": ["code", "generator", "execution"],
            "system": ["system", "file", "directory"],
            "ai": ["ai", "integration", "llm"],
            "security": ["security", "analysis"],
            "document": ["document", "pdf", "text"],
            "data": ["data", "analysis", "processing"],
        }
        
        found_categories = set()
        
        for category, keywords in expected_categories.items():
            for tool_name in tool_names:
                if any(keyword in tool_name for keyword in keywords):
                    found_categories.add(category)
                    break
        
        coverage = len(found_categories) / len(expected_categories) * 100
        
        print(f"‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {coverage:.1f}%")
        print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ: {', '.join(sorted(found_categories))}")
        
        assert coverage >= 70, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∫—Ä—ã—Ç–æ –º–∏–Ω–∏–º—É–º 70% –∫–∞—Ç–µ–≥–æ—Ä–∏–π"

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    pytest.main([__file__, "-v", "-s", "--tb=short"]) 