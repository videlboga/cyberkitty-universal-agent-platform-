#!/usr/bin/env python3
"""
üéØ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ö–æ–Ω—Ç–µ–Ω—Ç + –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ KittyCore

–ó–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å –†–ï–ê–õ–¨–ù–´–ô –∫–æ–Ω—Ç–µ–Ω—Ç + –±–æ–≥–∞—Ç—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω–æ
"""

import json
import time
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional
from dataclasses import dataclass, asdict

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É
from ..content_metadata_system import ContentMetadataSystem, TaskMetadata

class ContentValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —Ñ–∞–π–ª—ã-–æ—Ç—á—ë—Ç—ã"""
    
    FORBIDDEN_PATTERNS = [
        "–ó–∞–¥–∞—á–∞:",
        "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã",
        "–∞–≥–µ–Ω—Ç–æ–º",
        "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º",
        "## –†–µ–∑—É–ª—å—Ç–∞—Ç",
        "# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã"
    ]
    
    REQUIRED_PATTERNS = {
        "python": ["print(", "def ", "import ", "=", "class "],
        "html": ["<html>", "<body>", "<!DOCTYPE"],
        "css": ["{", "}", ":", "color", "font"],
        "json": ["{", "}", ":", '"'],
        "javascript": ["function", "var ", "let ", "const ", "=>"],
        "markdown": ["#", "##", "###", "*", "-"],
        "text": []  # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ª—é–±—ã–º–∏
    }
    
    def validate_content(self, content: str, file_type: str, task: str) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –æ—Ç—á—ë—Ç—ã"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–æ—Ç—á—ë—Ç—ã)
        forbidden_found = []
        for pattern in self.FORBIDDEN_PATTERNS:
            if pattern in content:
                forbidden_found.append(pattern)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        required_patterns = self.REQUIRED_PATTERNS.get(file_type, [])
        missing_required = []
        
        for pattern in required_patterns:
            if pattern not in content:
                missing_required.append(pattern)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–µ
        relevance_score = self._check_task_relevance(content, task)
        
        is_valid = (
            len(forbidden_found) == 0 and  # –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤
            len(missing_required) <= len(required_patterns) // 2 and  # –ï—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            relevance_score > 0.3  # –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ –∑–∞–¥–∞—á–µ
        )
        
        return {
            "valid": is_valid,
            "score": 1.0 if is_valid else 0.0,
            "forbidden_found": forbidden_found,
            "missing_required": missing_required,
            "relevance_score": relevance_score,
            "reason": self._get_validation_reason(is_valid, forbidden_found, missing_required, relevance_score)
        }
    
    def _check_task_relevance(self, content: str, task: str) -> float:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–¥–∞—á–µ"""
        task_lower = task.lower()
        content_lower = content.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–¥–∞—á–∏
        task_keywords = []
        
        if "hello world" in task_lower:
            task_keywords = ["hello", "world", "print"]
        elif "–∫–æ—Ç—è—Ç" in task_lower or "–∫–æ—Ç" in task_lower:
            task_keywords = ["–∫–æ—Ç", "–∫–æ—Ç—è—Ç", "cat", "kitten"]
        elif "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü" in task_lower:
            task_keywords = ["—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü", "—Ñ–æ—Ä–º", "input", "email", "password"]
        elif "–ø–ª–æ—â–∞–¥" in task_lower:
            task_keywords = ["–ø–ª–æ—â–∞–¥", "—Ä–∞–¥–∏—É—Å", "œÄ", "pi", "math"]
        elif "—Å—É–º–º" in task_lower:
            task_keywords = ["—Å—É–º–º", "sum", "100", "—á–∏—Å–ª"]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        matches = sum(1 for keyword in task_keywords if keyword in content_lower)
        
        if not task_keywords:
            return 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        
        return min(1.0, matches / len(task_keywords))
    
    def _get_validation_reason(self, is_valid: bool, forbidden: List, missing: List, relevance: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        if is_valid:
            return "–ö–æ–Ω—Ç–µ–Ω—Ç –≤–∞–ª–∏–¥–µ–Ω"
        
        reasons = []
        if forbidden:
            reasons.append(f"–ù–∞–π–¥–µ–Ω—ã –æ—Ç—á—ë—Ç—ã: {forbidden}")
        if missing:
            reasons.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: {missing}")
        if relevance < 0.3:
            reasons.append(f"–ù–∏–∑–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–µ: {relevance:.2f}")
        
        return "; ".join(reasons)

class EnhancedIntellectualAgent:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π IntellectualAgent —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç+–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"""
    
    def __init__(self, role: str, subtask: Dict[str, Any], output_dir: str = "./outputs"):
        self.role = role
        self.subtask = subtask
        self.output_dir = Path(output_dir)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã
        self.content_system = ContentMetadataSystem(str(self.output_dir))
        self.validator = ContentValidator()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç
        from ..agents.intellectual_agent import IntellectualAgent
        self.original_agent = IntellectualAgent(role, subtask)
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.start_time = datetime.now()
        self.task_id = f"task_{int(time.time() * 1000000)}"
        self.steps_executed = []
        self.errors_encountered = []
        
    async def execute_task_with_content_metadata(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ + –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        
        task_description = self.subtask.get("description", "")
        print(f"üéØ Enhanced Agent –≤—ã–ø–æ–ª–Ω—è–µ—Ç: {task_description}")
        
        try:
            # –§–ê–ó–ê 1: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç
            original_result = await self.original_agent.execute_task()
            
            # –§–ê–ó–ê 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª –∞–≥–µ–Ω—Ç
            created_files = self._find_created_files()
            
            # –§–ê–ó–ê 3: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            validated_files = await self._validate_and_fix_content(created_files, task_description)
            
            # –§–ê–ó–ê 4: –°–æ–∑–¥–∞—ë–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = self._create_task_metadata(task_description, original_result, validated_files)
            
            # –§–ê–ó–ê 5: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            final_files = await self._save_content_with_metadata(validated_files, metadata)
            
            return {
                "status": "completed",
                "task_id": self.task_id,
                "original_result": original_result,
                "validated_files": len(validated_files),
                "final_files": final_files,
                "metadata": asdict(metadata)
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Enhanced Agent: {e}")
            self.errors_encountered.append(str(e))
            
            # –°–æ–∑–¥–∞—ë–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –¥–ª—è –æ—à–∏–±–∫–∏
            error_metadata = self._create_error_metadata(task_description, str(e))
            
            return {
                "status": "failed",
                "task_id": self.task_id,
                "error": str(e),
                "metadata": asdict(error_metadata)
            }
    
    def _find_created_files(self) -> List[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–æ–º"""
        created_files = []
        
        # –ò—â–µ–º –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for file_path in Path(".").glob("*"):
            if file_path.is_file() and file_path.stat().st_mtime > self.start_time.timestamp():
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    file_type = self._detect_file_type(file_path.name, content)
                    
                    created_files.append({
                        "path": str(file_path),
                        "name": file_path.name,
                        "content": content,
                        "type": file_type,
                        "size": len(content)
                    })
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(created_files)}")
        return created_files
    
    def _detect_file_type(self, filename: str, content: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞"""
        extension = Path(filename).suffix.lower()
        
        type_map = {
            ".py": "python",
            ".html": "html", 
            ".css": "css",
            ".js": "javascript",
            ".json": "json",
            ".md": "markdown",
            ".txt": "text"
        }
        
        return type_map.get(extension, "text")
    
    async def _validate_and_fix_content(self, files: List[Dict], task: str) -> List[Dict]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        validated_files = []
        
        for file_info in files:
            content = file_info["content"]
            file_type = file_info["type"]
            filename = file_info["name"]
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            validation = self.validator.validate_content(content, file_type, task)
            
            print(f"üìã –í–∞–ª–∏–¥–∞—Ü–∏—è {filename}: {'‚úÖ' if validation['valid'] else '‚ùå'} (–æ—Ü–µ–Ω–∫–∞: {validation['score']:.2f})")
            
            if validation["valid"]:
                # –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∞–ª–∏–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                validated_files.append({
                    **file_info,
                    "validation": validation,
                    "fixed": False
                })
            else:
                # –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω - –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º {filename}: {validation['reason']}")
                
                fixed_content = await self._fix_content(content, file_type, task, validation)
                
                if fixed_content:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                    fixed_validation = self.validator.validate_content(fixed_content, file_type, task)
                    
                    validated_files.append({
                        **file_info,
                        "content": fixed_content,
                        "validation": fixed_validation,
                        "fixed": True,
                        "original_content": content
                    })
                    
                    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {filename}: –æ—Ü–µ–Ω–∫–∞ {fixed_validation['score']:.2f}")
                else:
                    # –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å - –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Å –ø–æ–º–µ—Ç–∫–æ–π
                    validated_files.append({
                        **file_info,
                        "validation": validation,
                        "fixed": False,
                        "fix_failed": True
                    })
                    
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å {filename}")
        
        return validated_files
    
    async def _fix_content(self, content: str, file_type: str, task: str, validation: Dict) -> Optional[str]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç—á—ë—Ç - —Å–æ–∑–¥–∞—ë–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if validation["forbidden_found"]:
            return await self._generate_real_content(file_type, task)
        
        # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - –¥–æ–ø–æ–ª–Ω—è–µ–º
        if validation["missing_required"]:
            return await self._enhance_content(content, file_type, validation["missing_required"])
        
        return None
    
    async def _generate_real_content(self, file_type: str, task: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–º–µ—Å—Ç–æ –æ—Ç—á—ë—Ç–∞"""
        
        task_lower = task.lower()
        
        if file_type == "python":
            if "hello world" in task_lower:
                return 'print("Hello, World!")'
            elif "–ø–ª–æ—â–∞–¥" in task_lower and "–∫—Ä—É–≥" in task_lower:
                return '''import math

radius = 5  # –º–µ—Ç—Ä–æ–≤
area = math.pi * radius ** 2
print(f"–ü–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Å —Ä–∞–¥–∏—É—Å–æ–º {radius}–º = {area:.2f} –∫–≤.–º")
# –†–µ–∑—É–ª—å—Ç–∞—Ç: 78.54 –∫–≤.–º'''
            elif "—Å—É–º–º" in task_lower and "100" in task_lower:
                return '''# –°—É–º–º–∞ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100
total = sum(range(1, 101))
print(f"–°—É–º–º–∞ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100 = {total}")
# –†–µ–∑—É–ª—å—Ç–∞—Ç: 5050'''
            else:
                return f'# –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task}\nprint("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")'
        
        elif file_type == "html":
            if "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü" in task_lower:
                return '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        form { max-width: 400px; }
        input { width: 100%; padding: 10px; margin: 10px 0; }
        button { background: #007bff; color: white; padding: 12px 20px; border: none; }
    </style>
</head>
<body>
    <h1>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h1>
    <form>
        <input type="text" placeholder="–ò–º—è" required>
        <input type="email" placeholder="Email" required>
        <input type="password" placeholder="–ü–∞—Ä–æ–ª—å" required>
        <button type="submit">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
    </form>
</body>
</html>'''
            elif "–∫–æ—Ç—è—Ç" in task_lower or "–∫–æ—Ç" in task_lower:
                return '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–ö–æ—Ç—è—Ç–∞</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; text-align: center; }
        .kitten { margin: 20px; padding: 20px; border: 2px solid #ff69b4; border-radius: 10px; }
        img { max-width: 200px; border-radius: 10px; }
    </style>
</head>
<body>
    <h1>üê± –ú–∏–ª—ã–µ –∫–æ—Ç—è—Ç–∞ üê±</h1>
    <div class="kitten">
        <h2>–ü—É—à–∏—Å—Ç–∏–∫</h2>
        <p>–°–∞–º—ã–π –º–∏–ª—ã–π –∫–æ—Ç—ë–Ω–æ–∫ –≤ –º–∏—Ä–µ!</p>
        <p>üêæ –õ—é–±–∏—Ç –∏–≥—Ä–∞—Ç—å —Å –º—è—á–∏–∫–æ–º</p>
    </div>
    <div class="kitten">
        <h2>–ú—É—Ä–∑–∏–∫</h2>
        <p>–û—á–µ–Ω—å –ª–∞—Å–∫–æ–≤—ã–π –∏ –¥–æ–±—Ä—ã–π</p>
        <p>üò∏ –û–±–æ–∂–∞–µ—Ç –º–æ–ª–æ–∫–æ –∏ —Ä—ã–±–∫—É</p>
    </div>
</body>
</html>'''
            else:
                return f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞</title>
</head>
<body>
    <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç: {task}</h1>
    <p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</p>
</body>
</html>'''
        
        elif file_type == "json":
            if "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü" in task_lower and "—Å–µ—Ä–≤–µ—Ä" in task_lower:
                return '''{
    "server": {
        "host": "localhost",
        "port": 8080,
        "ssl": false
    },
    "database": {
        "host": "localhost", 
        "port": 5432,
        "name": "webapp"
    },
    "logging": {
        "level": "INFO",
        "file": "server.log"
    }
}'''
            else:
                return f'{{"task": "{task}", "status": "completed", "timestamp": "{datetime.now().isoformat()}"}}'
        
        else:
            return f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {task}\n\n–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."
    
    async def _enhance_content(self, content: str, file_type: str, missing: List[str]) -> str:
        """–î–æ–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏"""
        # –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        if file_type == "python" and "print(" in missing:
            return content + '\nprint("–í—ã–ø–æ–ª–Ω–µ–Ω–æ")'
        elif file_type == "html" and "<html>" in missing:
            return f"<!DOCTYPE html>\n<html>\n<body>\n{content}\n</body>\n</html>"
        
        return content
    
    def _create_task_metadata(self, task: str, result: Dict, files: List[Dict]) -> TaskMetadata:
        """–°–æ–∑–¥–∞—ë—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        
        end_time = datetime.now()
        execution_time = (end_time - self.start_time).total_seconds()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        valid_files = [f for f in files if f.get("validation", {}).get("valid", False)]
        quality_score = len(valid_files) / len(files) if files else 0.0
        
        # –°–æ–∑–¥–∞—ë–º –∫—Ä–∏—Ç–∏–∫—É
        critiques = []
        for file_info in files:
            validation = file_info.get("validation", {})
            critiques.append({
                "file": file_info["name"],
                "type": "content_quality",
                "score": validation.get("score", 0.0),
                "summary": validation.get("reason", "–ù–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"),
                "valid": validation.get("valid", False)
            })
        
        return TaskMetadata(
            task_id=self.task_id,
            original_task=task,
            agent_id=self.role,
            agent_type="EnhancedIntellectualAgent",
            execution_time=execution_time,
            start_time=self.start_time.isoformat(),
            end_time=end_time.isoformat(),
            llm_analysis={"summary": f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏: {task}"},
            complexity_score=0.5,
            estimated_difficulty="medium",
            steps_planned=["–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏", "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", "–í–∞–ª–∏–¥–∞—Ü–∏—è", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"],
            steps_executed=self.steps_executed,
            tools_used=["intellectual_agent", "content_validator", "metadata_system"],
            errors_encountered=self.errors_encountered,
            critiques=critiques,
            quality_score=quality_score,
            improvement_suggestions=[],
            rate_limiting_applied=False,
            cache_hit=False,
            memory_usage={"peak_mb": 0, "avg_mb": 0},
            system_health=0.8,
            content_file="",
            content_type="mixed",
            content_size=sum(f.get("size", 0) for f in files),
            success=len(valid_files) > 0,
            user_satisfaction_predicted=quality_score
        )
    
    def _create_error_metadata(self, task: str, error: str) -> TaskMetadata:
        """–°–æ–∑–¥–∞—ë—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—à–∏–±–∫–∏"""
        
        end_time = datetime.now()
        execution_time = (end_time - self.start_time).total_seconds()
        
        return TaskMetadata(
            task_id=self.task_id,
            original_task=task,
            agent_id=self.role,
            agent_type="EnhancedIntellectualAgent",
            execution_time=execution_time,
            start_time=self.start_time.isoformat(),
            end_time=end_time.isoformat(),
            llm_analysis={"summary": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {error}"},
            complexity_score=0.0,
            estimated_difficulty="failed",
            steps_planned=["–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏"],
            steps_executed=[{"description": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "success": False}],
            tools_used=["intellectual_agent"],
            errors_encountered=[error],
            critiques=[{"type": "error", "score": 0.0, "summary": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error}"}],
            quality_score=0.0,
            improvement_suggestions=["–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É", "–£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π"],
            rate_limiting_applied=False,
            cache_hit=False,
            memory_usage={"peak_mb": 0, "avg_mb": 0},
            system_health=0.0,
            content_file="",
            content_type="error",
            content_size=0,
            success=False,
            user_satisfaction_predicted=0.0
        )
    
    async def _save_content_with_metadata(self, files: List[Dict], metadata: TaskMetadata) -> Dict[str, List[str]]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"""
        
        saved_files = {
            "content_files": [],
            "metadata_files": [],
            "report_files": []
        }
        
        for file_info in files:
            if file_info.get("validation", {}).get("valid", False):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                result = self.content_system.create_content_with_metadata(
                    task=metadata.original_task,
                    content=file_info["content"],
                    filename=file_info["name"],
                    metadata=metadata
                )
                
                saved_files["content_files"].append(result["content_file"])
                saved_files["metadata_files"].append(result["metadata_file"])
                saved_files["report_files"].append(result["report_file"])
                
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–∞–π–ª: {result['content_file']}")
        
        return saved_files 