#!/usr/bin/env python3
"""
üéß –ë–ï–ù–ß–ú–ê–†–ö –ê–ì–ï–ù–¢–ê –ü–û–î–î–ï–†–ñ–ö–ò - –ß–ê–°–¢–¨ 1: –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô
–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏

–°–¶–ï–ù–ê–†–ò–ô: –ê–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ "–ö–∏–±–µ—Ä–ö–æ—Ç"
- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ –ø—Ä–æ–±–ª–µ–º
- –°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤ –∏ –¥–µ–π—Å—Ç–≤–∏–π
- –≠—Å–∫–∞–ª–∞—Ü–∏—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
- –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
"""

from dataclasses import dataclass
from typing import Dict, List, Optional, Any
from enum import Enum
import json
import time

class TicketPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–∏–∫–µ—Ç–∞"""
    LOW = 1      # –ù–∏–∑–∫–∏–π - –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    MEDIUM = 2   # –°—Ä–µ–¥–Ω–∏–π - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    HIGH = 3     # –í—ã—Å–æ–∫–∏–π - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏
    URGENT = 4   # –°—Ä–æ—á–Ω—ã–π - –º–∞—Å—Å–æ–≤—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è

class TicketStatus(Enum):
    """–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞"""
    NEW = "new"
    IN_PROGRESS = "in_progress"
    WAITING_CUSTOMER = "waiting_customer"
    ESCALATED = "escalated"
    RESOLVED = "resolved"
    CLOSED = "closed"

class ActionType(Enum):
    """–¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –∞–≥–µ–Ω—Ç–∞"""
    SEARCH_KB = "search_knowledge_base"      # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    RESTART_EQUIPMENT = "restart_equipment"   # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    CHECK_CONNECTION = "check_connection"     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    ESCALATE = "escalate"                    # –≠—Å–∫–∞–ª–∞—Ü–∏—è
    SEND_TECHNICIAN = "send_technician"      # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∞
    UPDATE_SETTINGS = "update_settings"      # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    PROVIDE_INFO = "provide_information"     # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

@dataclass
class Customer:
    """–ö–ª–∏–µ–Ω—Ç"""
    id: str
    name: str
    plan: str  # –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω
    location: str
    equipment: List[str]  # –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    history: List[str]    # –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π
    satisfaction_score: float = 5.0  # –û—Ü–µ–Ω–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏

@dataclass
class KnowledgeBaseEntry:
    """–ó–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    id: str
    title: str
    problem_keywords: List[str]
    solution_steps: List[str]
    required_actions: List[ActionType]
    escalation_needed: bool = False
    success_rate: float = 0.9

@dataclass
class SupportTicket:
    """–¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    id: str
    customer: Customer
    problem_description: str
    priority: TicketPriority
    status: TicketStatus
    created_at: float
    agent_actions: List[Dict[str, Any]]
    resolution_time: Optional[float] = None
    customer_satisfaction: Optional[float] = None

class KnowledgeBase:
    """–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    
    def __init__(self):
        self.entries = self._init_knowledge_base()
    
    def _init_knowledge_base(self) -> List[KnowledgeBaseEntry]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        return [
            # –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
            KnowledgeBaseEntry(
                id="kb_001",
                title="–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ - –±–∞–∑–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
                problem_keywords=["–Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ—Ç–∫–ª—é—á–∏–ª—Å—è", "–ø—Ä–æ–ø–∞–ª"],
                solution_steps=[
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ",
                    "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä (–≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞ 30 —Å–µ–∫)",
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–±–µ–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞"
                ],
                required_actions=[ActionType.CHECK_CONNECTION, ActionType.RESTART_EQUIPMENT],
                success_rate=0.85
            ),
            KnowledgeBaseEntry(
                id="kb_002", 
                title="–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
                problem_keywords=["–º–µ–¥–ª–µ–Ω–Ω–æ", "—Ç–æ—Ä–º–æ–∑–∏—Ç", "–Ω–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å", "–¥–æ–ª–≥–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"],
                solution_steps=[
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —á–µ—Ä–µ–∑ speedtest",
                    "–û—Ç–∫–ª—é—á–∏—Ç—å –ª–∏—à–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Wi-Fi –∫–∞–Ω–∞–ª–∞",
                    "–û–±–Ω–æ–≤–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä—ã —Å–µ—Ç–µ–≤–æ–π –∫–∞—Ä—Ç—ã"
                ],
                required_actions=[ActionType.CHECK_CONNECTION, ActionType.UPDATE_SETTINGS],
                success_rate=0.75
            ),
            
            # –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º
            KnowledgeBaseEntry(
                id="kb_003",
                title="–†–æ—É—Ç–µ—Ä –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è",
                problem_keywords=["–Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è", "–Ω–µ –≥–æ—Ä—è—Ç –ª–∞–º–ø–æ—á–∫–∏", "–º—ë—Ä—Ç–≤—ã–π", "—Å–ª–æ–º–∞–ª—Å—è"],
                solution_steps=[
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è",
                    "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Ä–æ–∑–µ—Ç–∫—É",
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è",
                    "–ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç - –∑–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
                ],
                required_actions=[ActionType.RESTART_EQUIPMENT, ActionType.SEND_TECHNICIAN],
                escalation_needed=True,
                success_rate=0.6
            ),
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            KnowledgeBaseEntry(
                id="kb_004",
                title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Wi-Fi –ø–∞—Ä–æ–ª—è",
                problem_keywords=["–ø–∞—Ä–æ–ª—å wifi", "–∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "–∑–∞–±—ã–ª –ø–∞—Ä–æ–ª—å", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ wifi"],
                solution_steps=[
                    "–ó–∞–π—Ç–∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–æ—É—Ç–µ—Ä–∞ (192.168.1.1)",
                    "–í–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å (admin/admin)",
                    "–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª Wi-Fi –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                    "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤)"
                ],
                required_actions=[ActionType.UPDATE_SETTINGS, ActionType.PROVIDE_INFO],
                success_rate=0.95
            ),
            
            # –ë–∏–ª–ª–∏–Ω–≥ –∏ —Ç–∞—Ä–∏—Ñ—ã
            KnowledgeBaseEntry(
                id="kb_005",
                title="–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–∞—Ä–∏—Ñ—É –∏ –æ–ø–ª–∞—Ç–µ",
                problem_keywords=["—Ç–∞—Ä–∏—Ñ", "–æ–ø–ª–∞—Ç–∞", "–±–∞–ª–∞–Ω—Å", "—Å—á—ë—Ç", "–¥–µ–Ω—å–≥–∏"],
                solution_steps=[
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ",
                    "–û–±—ä—è—Å–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞",
                    "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
                    "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - —Å–º–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞"
                ],
                required_actions=[ActionType.PROVIDE_INFO],
                success_rate=0.9
            ),
            
            # –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
            KnowledgeBaseEntry(
                id="kb_006",
                title="–ú–∞—Å—Å–æ–≤—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–∞–π–æ–Ω–µ",
                problem_keywords=["—É –≤—Å–µ—Ö –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–≤ —Ä–∞–π–æ–Ω–µ –æ—Ç–∫–ª—é—á–∏–ª–∏", "–∞–≤–∞—Ä–∏—è", "–º–∞—Å—Å–æ–≤—ã–π —Å–±–æ–π"],
                solution_steps=[
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ä—Ç—É –∞–≤–∞—Ä–∏–π",
                    "–£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø–ª–∞–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö",
                    "–î–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
                    "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º —Å–±–æ–µ"
                ],
                required_actions=[ActionType.ESCALATE, ActionType.PROVIDE_INFO],
                escalation_needed=True,
                success_rate=0.7
            )
        ]
    
    def search(self, query: str) -> List[KnowledgeBaseEntry]:
        """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        query_lower = query.lower()
        results = []
        
        for entry in self.entries:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            for keyword in entry.problem_keywords:
                if keyword in query_lower:
                    results.append(entry)
                    break
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è
        return sorted(results, key=lambda x: x.success_rate, reverse=True)

class CustomerDatabase:
    """–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.customers = self._init_customers()
    
    def _init_customers(self) -> Dict[str, Customer]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        return {
            "cust_001": Customer(
                id="cust_001",
                name="–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
                plan="–î–æ–º–∞—à–Ω–∏–π 100 –ú–±–∏—Ç/—Å",
                location="—É–ª. –õ–µ–Ω–∏–Ω–∞, 15, –∫–≤. 42",
                equipment=["–†–æ—É—Ç–µ—Ä TP-Link", "ONT Huawei"],
                history=["–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Wi-Fi (2024-01-15)", "–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç (2024-02-20)"],
                satisfaction_score=4.2
            ),
            "cust_002": Customer(
                id="cust_002", 
                name="–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤",
                plan="–ë–∏–∑–Ω–µ—Å 500 –ú–±–∏—Ç/—Å",
                location="–ø—Ä. –ú–∏—Ä–∞, 88, –æ—Ñ–∏—Å 12",
                equipment=["–†–æ—É—Ç–µ—Ä Cisco", "–ö–æ–º–º—É—Ç–∞—Ç–æ—Ä D-Link"],
                history=["–£—Å—Ç–∞–Ω–æ–≤–∫–∞ (2023-12-01)"],
                satisfaction_score=4.8
            ),
            "cust_003": Customer(
                id="cust_003",
                name="–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞", 
                plan="–ë–∞–∑–æ–≤—ã–π 50 –ú–±–∏—Ç/—Å",
                location="—É–ª. –°–∞–¥–æ–≤–∞—è, 7, –∫–≤. 5",
                equipment=["–†–æ—É—Ç–µ—Ä Keenetic"],
                history=["–ß–∞—Å—Ç—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è (2024-01-10)", "–ó–∞–º–µ–Ω–∞ —Ä–æ—É—Ç–µ—Ä–∞ (2024-01-25)", "–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ (2024-03-01)"],
                satisfaction_score=2.1  # –ù–µ–¥–æ–≤–æ–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
            )
        }
    
    def get_customer(self, customer_id: str) -> Optional[Customer]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID"""
        return self.customers.get(customer_id)

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
if __name__ == "__main__":
    print("üéß –ë–ï–ù–ß–ú–ê–†–ö –ê–ì–ï–ù–¢–ê –ü–û–î–î–ï–†–ñ–ö–ò - –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô")
    print("=" * 60)
    
    kb = KnowledgeBase()
    customers = CustomerDatabase()
    
    print(f"\nüìö –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô ({len(kb.entries)} –∑–∞–ø–∏—Å–µ–π):")
    for entry in kb.entries:
        print(f"  ‚Ä¢ {entry.title}")
        print(f"    –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(entry.problem_keywords[:3])}...")
        print(f"    –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {entry.success_rate*100:.0f}%")
        if entry.escalation_needed:
            print(f"    ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç —ç—Å–∫–∞–ª–∞—Ü–∏–∏")
        print()
    
    print(f"üë• –ë–ê–ó–ê –ö–õ–ò–ï–ù–¢–û–í ({len(customers.customers)} –∫–ª–∏–µ–Ω—Ç–æ–≤):")
    for customer in customers.customers.values():
        print(f"  ‚Ä¢ {customer.name} ({customer.plan})")
        print(f"    –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å: {customer.satisfaction_score}/5.0")
        print(f"    –ò—Å—Ç–æ—Ä–∏—è: {len(customer.history)} –æ–±—Ä–∞—â–µ–Ω–∏–π")
        print()
    
    print("üîç –¢–ï–°–¢ –ü–û–ò–°–ö–ê:")
    test_queries = ["–Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", "–º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–ø–∞—Ä–æ–ª—å wifi"]
    
    for query in test_queries:
        results = kb.search(query)
        print(f"\n–ó–∞–ø—Ä–æ—Å: '{query}'")
        print(f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ä–µ—à–µ–Ω–∏–π")
        for result in results[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-2
            print(f"  ‚Üí {result.title} (—É—Å–ø–µ—Ö: {result.success_rate*100:.0f}%)")
    
    print("\n‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≥–æ—Ç–æ–≤–∞!")
    print("üîÑ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç–∏–∫–µ—Ç–æ–≤ –∏ –∞–≥–µ–Ω—Ç–∞...") 