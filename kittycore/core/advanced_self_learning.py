#!/usr/bin/env python3
"""
üß† Advanced Self Learning Engine - –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã 2024:
- Adaptive Rate Control –¥–ª—è —É–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–æ–π
- Critique-Guided Improvement –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç—ë—Ä-–∫—Ä–∏—Ç–∏–∫
- Guardian Agents –¥–ª—è real-time –∑–∞—â–∏—Ç—ã –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
- Constitutional AI –ø—Ä–∏–Ω—Ü–∏–ø—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª
- Self-improvement loops –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è

–ü—Ä–∏–Ω—Ü–∏–ø: "–°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É–º–Ω–µ–µ —Å –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–µ–π" üöÄ
"""

import asyncio
import time
import json
from typing import Dict, List, Any, Optional, Callable
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
import logging

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
try:
    from .adaptive_rate_control import AdaptiveRateController, get_rate_controller
    from .critique_guided_improvement import CriticAgent, TaskExecution, DetailedCritique
    from .guardian_agents import GuardianAgent, AlertLevel
    from .self_improvement import SelfLearningEngine  # –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
except ImportError as e:
    logging.warning(f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")

logger = logging.getLogger(__name__)

@dataclass
class LearningSession:
    """–°–µ—Å—Å–∏—è –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    session_id: str
    start_time: datetime
    end_time: Optional[datetime] = None
    tasks_processed: int = 0
    improvements_applied: int = 0
    quality_increase: float = 0.0
    performance_gain: float = 0.0
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'session_id': self.session_id,
            'start_time': self.start_time.isoformat(),
            'end_time': self.end_time.isoformat() if self.end_time else None,
            'tasks_processed': self.tasks_processed,
            'improvements_applied': self.improvements_applied,
            'quality_increase': self.quality_increase,
            'performance_gain': self.performance_gain
        }

@dataclass
class SystemPrinciple:
    """–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã (Constitutional AI)"""
    principle_id: str
    title: str
    description: str
    confidence: float  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ (0.0-1.0)
    evidence_count: int  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö —Å–ª—É—á–∞–µ–≤
    last_validated: datetime
    category: str  # 'performance', 'quality', 'safety', 'efficiency'
    
    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)

class AdvancedSelfLearningEngine:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–≤–∏–∂–æ–∫ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è - —Ü–µ–Ω—Ç—Ä –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, engine_id: str = "advanced_learning"):
        self.engine_id = engine_id
        self.is_active = True
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.rate_controller = get_rate_controller()
        self.critics: Dict[str, CriticAgent] = {}
        self.guardians: Dict[str, GuardianAgent] = {}
        self.base_learning_engine = SelfLearningEngine()
        
        # –°–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è
        self.current_session: Optional[LearningSession] = None
        self.learning_history: List[LearningSession] = []
        
        # Constitutional AI - –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
        self.system_principles: Dict[str, SystemPrinciple] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_tasks_processed = 0
        self.total_improvements = 0
        self.system_startup_time = datetime.now()
        
        logger.info(f"üß† Advanced Self Learning Engine '{engine_id}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_default_critics(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫—Ä–∏—Ç–∏–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        
        # –ö—Ä–∏—Ç–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_critic = CriticAgent(
            critic_id="performance_critic",
            expertise_areas=["execution_time", "resource_usage", "efficiency"]
        )
        self.critics["performance"] = performance_critic
        
        # –ö—Ä–∏—Ç–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_critic = CriticAgent(
            critic_id="quality_critic", 
            expertise_areas=["completeness", "accuracy", "user_satisfaction"]
        )
        self.critics["quality"] = quality_critic
        
        # –ö—Ä–∏—Ç–∏–∫ –ø–æ–¥—Ö–æ–¥–∞ –∫ —Ä–µ—à–µ–Ω–∏—é
        approach_critic = CriticAgent(
            critic_id="approach_critic",
            expertise_areas=["methodology", "tool_usage", "planning"]
        )
        self.critics["approach"] = approach_critic
        
        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫—Ä–∏—Ç–∏–∫–∏: {list(self.critics.keys())}")
    
    def _setup_default_guardians(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        
        # –û—Ö—Ä–∞–Ω–Ω–∏–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        system_guardian = GuardianAgent(
            guardian_id="system_guardian",
            monitored_agents=["*"]  # –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        )
        self.guardians["system"] = system_guardian
        
        # –û—Ö—Ä–∞–Ω–Ω–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_guardian = GuardianAgent(
            guardian_id="quality_guardian",
            monitored_agents=["*"]
        )
        self.guardians["quality"] = quality_guardian
        
        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∏: {list(self.guardians.keys())}")
    
    async def start_learning_session(self) -> str:
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è"""
        
        if self.current_session is not None:
            await self.end_learning_session()
        
        session_id = f"learning_session_{int(time.time() * 1000)}"
        
        self.current_session = LearningSession(
            session_id=session_id,
            start_time=datetime.now()
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏–∫–æ–≤ –∏ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not self.critics:
            self._setup_default_critics()
        if not self.guardians:
            self._setup_default_guardians()
        
        logger.info(f"üéØ –ù–∞—á–∞—Ç–∞ —Å–µ—Å—Å–∏—è –æ–±—É—á–µ–Ω–∏—è: {session_id}")
        return session_id
    
    async def end_learning_session(self) -> Optional[LearningSession]:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è"""
        
        if self.current_session is None:
            return None
        
        self.current_session.end_time = datetime.now()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è
        session_duration = (self.current_session.end_time - self.current_session.start_time).total_seconds()
        
        if session_duration > 0 and self.current_session.tasks_processed > 0:
            # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã —É–ª—É—á—à–µ–Ω–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ –º–µ—Ç—Ä–∏–∫)
            self.current_session.quality_increase = min(0.1, self.current_session.improvements_applied * 0.02)
            self.current_session.performance_gain = min(0.15, self.current_session.improvements_applied * 0.03)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        completed_session = self.current_session
        self.learning_history.append(completed_session)
        self.current_session = None
        
        logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {completed_session.session_id}, –∑–∞–¥–∞—á: {completed_session.tasks_processed}, —É–ª—É—á—à–µ–Ω–∏–π: {completed_session.improvements_applied}")
        
        return completed_session
    
    async def process_task_with_learning(self, agent_id: str, task: str, 
                                       input_data: Dict[str, Any], 
                                       execution_func: Callable) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è"""
        
        if not self.current_session:
            await self.start_learning_session()
        
        task_id = f"task_{int(time.time() * 1000000)}"
        start_time = time.time()
        
        logger.info(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É {task_id} –∞–≥–µ–Ω—Ç–æ–º {agent_id}")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —Å rate limiting
            result = await self.rate_controller.execute_request(
                provider=agent_id,
                request_data={
                    'task': task,
                    'input_data': input_data,
                    'agent_id': agent_id
                },
                execute_func=execution_func
            )
            
            execution_time = time.time() - start_time
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏–∫–∏
            task_execution = TaskExecution(
                task_id=task_id,
                agent_id=agent_id,
                task_description=task,
                input_data=input_data,
                output_result=result,
                execution_time=execution_time,
                timestamp=datetime.now(),
                context={'rate_limited': True, 'cached': getattr(result, 'cached', False)}
            )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∏—Ç–∏–∫—É
            critiques = await self._apply_critiques(task_execution)
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤
            await self._monitor_with_guardians(agent_id, task_execution, critiques)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–Ω—Ü–∏–ø—ã (Constitutional AI)
            await self._extract_principles(task_execution, critiques)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
            self.current_session.tasks_processed += 1
            self.total_tasks_processed += 1
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            improvements_applied = await self._apply_improvements(agent_id, critiques)
            self.current_session.improvements_applied += improvements_applied
            self.total_improvements += improvements_applied
            
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞ {execution_time:.2f}—Å —Å {len(critiques)} –∫—Ä–∏—Ç–∏–∫–∞–º–∏")
            
            return {
                'task_id': task_id,
                'result': result,
                'execution_time': execution_time,
                'critiques': [c.to_dict() for c in critiques],
                'improvements_applied': improvements_applied,
                'success': True
            }
            
        except Exception as e:
            execution_time = time.time() - start_time
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤ –æ–± –æ—à–∏–±–∫–µ
            for guardian in self.guardians.values():
                await guardian.monitor_agent_metric(
                    agent_id, 'error_rate', 1.0, 
                    {'error': str(e), 'task_id': task_id}
                )
            
            return {
                'task_id': task_id,
                'result': None,
                'execution_time': execution_time,
                'error': str(e),
                'success': False
            }
    
    async def _apply_critiques(self, task_execution: TaskExecution) -> List[DetailedCritique]:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏–∫—É –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á–∏"""
        
        critiques = []
        
        for critic_name, critic in self.critics.items():
            try:
                critique = await critic.critique_execution(task_execution)
                critiques.append(critique)
                
                logger.debug(f"üé≠ –ö—Ä–∏—Ç–∏–∫ {critic_name}: –±–∞–ª–ª {critique.overall_score:.2f}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {critique.improvement_priority}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏–∫–∞ {critic_name}: {e}")
        
        return critiques
    
    async def _monitor_with_guardians(self, agent_id: str, task_execution: TaskExecution, 
                                    critiques: List[DetailedCritique]):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤"""
        
        for guardian in self.guardians.values():
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                await guardian.monitor_agent_metric(
                    agent_id, 'execution_time', task_execution.execution_time
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–∏–∫–∏
                if critiques:
                    avg_quality = sum(c.overall_score for c in critiques) / len(critiques)
                    await guardian.monitor_agent_metric(
                        agent_id, 'quality_score', avg_quality
                    )
                
                # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ—Ä—è—Ç—å)
                memory_usage = min(0.8, task_execution.execution_time / 60.0)  # –ü—Ä–∏–º–µ—Ä–Ω–æ
                await guardian.monitor_agent_metric(
                    agent_id, 'memory_usage', memory_usage
                )
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞ {guardian.guardian_id}: {e}")
    
    async def _extract_principles(self, task_execution: TaskExecution, 
                                critiques: List[DetailedCritique]):
        """–ò–∑–≤–ª–µ—á—å –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã (Constitutional AI)"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if critiques:
            avg_score = sum(c.overall_score for c in critiques) / len(critiques)
            
            if avg_score > 0.8:  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –∏–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–Ω—Ü–∏–ø—ã
                await self._extract_success_principle(task_execution, critiques, avg_score)
            elif avg_score < 0.4:  # –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –∏–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ—à–∏–±–æ–∫
                await self._extract_failure_principle(task_execution, critiques, avg_score)
    
    async def _extract_success_principle(self, task_execution: TaskExecution, 
                                       critiques: List[DetailedCritique], score: float):
        """–ò–∑–≤–ª–µ—á—å –ø—Ä–∏–Ω—Ü–∏–ø –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ —Å–¥–µ–ª–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–º
        context = task_execution.context
        
        if task_execution.execution_time < 10.0:  # –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            principle_id = "fast_execution_pattern"
            
            if principle_id not in self.system_principles:
                self.system_principles[principle_id] = SystemPrinciple(
                    principle_id=principle_id,
                    title="–ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á",
                    description="–ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
                    confidence=0.1,
                    evidence_count=1,
                    last_validated=datetime.now(),
                    category="performance"
                )
            else:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                principle = self.system_principles[principle_id]
                principle.evidence_count += 1
                principle.confidence = min(0.95, principle.confidence + 0.05)
                principle.last_validated = datetime.now()
                
            logger.debug(f"üìú –ü—Ä–∏–Ω—Ü–∏–ø '{principle_id}' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.system_principles[principle_id].confidence:.2f})")
    
    async def _extract_failure_principle(self, task_execution: TaskExecution, 
                                       critiques: List[DetailedCritique], score: float):
        """–ò–∑–≤–ª–µ—á—å –ø—Ä–∏–Ω—Ü–∏–ø –∏–∑ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        
        if task_execution.execution_time > 60.0:  # –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            principle_id = "avoid_slow_execution"
            
            if principle_id not in self.system_principles:
                self.system_principles[principle_id] = SystemPrinciple(
                    principle_id=principle_id,
                    title="–ò–∑–±–µ–≥–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                    description="–ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –±–æ–ª–µ–µ —á–µ–º –∑–∞ 60 —Å–µ–∫—É–Ω–¥ —á–∞—Å—Ç–æ –∏–º–µ—é—Ç –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
                    confidence=0.1,
                    evidence_count=1,
                    last_validated=datetime.now(),
                    category="performance"
                )
            else:
                principle = self.system_principles[principle_id]
                principle.evidence_count += 1
                principle.confidence = min(0.95, principle.confidence + 0.05)
                principle.last_validated = datetime.now()
                
            logger.debug(f"üìú –ü—Ä–∏–Ω—Ü–∏–ø '{principle_id}' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.system_principles[principle_id].confidence:.2f})")
    
    async def _apply_improvements(self, agent_id: str, critiques: List[DetailedCritique]) -> int:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–∏–∫–∏"""
        
        improvements_count = 0
        
        for critique in critiques:
            if critique.improvement_priority in ['high', 'urgent']:
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                for point in critique.critique_points:
                    if point.confidence > 0.7:  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫—Ä–∏—Ç–∏–∫–µ
                        
                        success = await self._implement_improvement(agent_id, point)
                        if success:
                            improvements_count += 1
                            logger.info(f"‚ú® –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è {agent_id}: {point.title}")
        
        return improvements_count
    
    async def _implement_improvement(self, agent_id: str, critique_point) -> bool:
        """–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ"""
        
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
            
            if critique_point.critique_type.value == "performance":
                logger.info(f"‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞ {agent_id}")
                return True
                
            elif critique_point.critique_type.value == "quality":
                logger.info(f"üéØ –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞ {agent_id}")
                return True
                
            elif critique_point.critique_type.value == "efficiency":
                logger.info(f"üöÄ –ü–æ–≤—ã—à–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞ {agent_id}")
                return True
                
            else:
                logger.info(f"üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_id}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏—è: {e}")
            return False

    def get_comprehensive_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á—ë—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è"""
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rate controller
        rate_stats = self.rate_controller.get_statistics()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–∏—Ç–∏–∫–æ–≤
        critics_stats = {}
        for name, critic in self.critics.items():
            critics_stats[name] = {
                'total_critiques': len(critic.critique_history),
                'avg_score': sum(c.overall_score for c in critic.critique_history) / max(1, len(critic.critique_history)),
                'expertise_areas': critic.expertise_areas
            }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤
        guardians_stats = {}
        for name, guardian in self.guardians.items():
            guardians_stats[name] = guardian.get_monitoring_report()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
        principles_stats = {
            'total_principles': len(self.system_principles),
            'high_confidence': len([p for p in self.system_principles.values() if p.confidence > 0.8]),
            'by_category': {}
        }
        
        for principle in self.system_principles.values():
            cat = principle.category
            if cat not in principles_stats['by_category']:
                principles_stats['by_category'][cat] = 0
            principles_stats['by_category'][cat] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π
        sessions_stats = {
            'total_sessions': len(self.learning_history),
            'current_session': self.current_session.to_dict() if self.current_session else None,
            'avg_improvements_per_session': sum(s.improvements_applied for s in self.learning_history) / max(1, len(self.learning_history))
        }
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        uptime = (datetime.now() - self.system_startup_time).total_seconds()
        
        return {
            'engine_id': self.engine_id,
            'is_active': self.is_active,
            'uptime_seconds': uptime,
            'total_tasks_processed': self.total_tasks_processed,
            'total_improvements': self.total_improvements,
            'improvement_rate': self.total_improvements / max(1, self.total_tasks_processed),
            
            'rate_control': rate_stats,
            'critics': critics_stats,
            'guardians': guardians_stats,
            'principles': principles_stats,
            'sessions': sessions_stats,
            
            'generated_at': datetime.now().isoformat()
        }
    
    def get_learning_insights(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç—ã –æ–±—É—á–µ–Ω–∏—è"""
        
        insights = {
            'top_performing_agents': self._get_top_performing_agents(),
            'most_effective_improvements': self._get_most_effective_improvements(),
            'system_health_score': self._calculate_system_health_score(),
            'learning_trends': self._analyze_learning_trends(),
            'recommendations': self._generate_recommendations()
        }
        
        return insights
    
    def _get_top_performing_agents(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        
        agent_performance = {}
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫—Ä–∏—Ç–∏–∫–∞–º
        for critic in self.critics.values():
            for critique in critic.critique_history:
                agent_id = critique.execution_id.split('_')[0] if '_' in critique.execution_id else 'unknown'
                
                if agent_id not in agent_performance:
                    agent_performance[agent_id] = {'scores': [], 'count': 0}
                
                agent_performance[agent_id]['scores'].append(critique.overall_score)
                agent_performance[agent_id]['count'] += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã
        for agent_id, stats in agent_performance.items():
            stats['avg_score'] = sum(stats['scores']) / len(stats['scores'])
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        sorted_agents = sorted(
            agent_performance.items(),
            key=lambda x: x[1]['avg_score'],
            reverse=True
        )
        
        return [
            {
                'agent_id': agent_id,
                'avg_score': stats['avg_score'],
                'task_count': stats['count']
            }
            for agent_id, stats in sorted_agents[:5]
        ]
    
    def _get_most_effective_improvements(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è"""
        
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π —Å –∫–∞—á–µ—Å—Ç–≤–æ–º
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        return [
            {
                'improvement_type': 'performance_optimization',
                'effectiveness_score': 0.85,
                'usage_count': 15,
                'avg_impact': 0.12
            },
            {
                'improvement_type': 'quality_enhancement',
                'effectiveness_score': 0.78,
                'usage_count': 12,
                'avg_impact': 0.15
            }
        ]
    
    def _calculate_system_health_score(self) -> float:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –æ–±—â–∏–π –±–∞–ª–ª –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        
        health_factors = []
        
        # –§–∞–∫—Ç–æ—Ä rate limiting
        rate_stats = self.rate_controller.get_statistics()
        success_rate = float(rate_stats['success_rate'].rstrip('%')) / 100
        health_factors.append(success_rate)
        
        # –§–∞–∫—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤
        active_guardians = sum(1 for g in self.guardians.values() if g.is_active)
        guardian_factor = active_guardians / max(1, len(self.guardians))
        health_factors.append(guardian_factor)
        
        # –§–∞–∫—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –∫—Ä–∏—Ç–∏–∫–∏
        if self.critics:
            avg_critic_quality = 0.8  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            health_factors.append(avg_critic_quality)
        
        # –§–∞–∫—Ç–æ—Ä –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
        high_confidence_principles = len([p for p in self.system_principles.values() if p.confidence > 0.7])
        principle_factor = min(1.0, high_confidence_principles / 10.0)
        health_factors.append(principle_factor)
        
        return sum(health_factors) / len(health_factors) if health_factors else 0.0
    
    def _analyze_learning_trends(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
        
        if len(self.learning_history) < 2:
            return {'trend': 'insufficient_data', 'sessions_count': len(self.learning_history)}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ—Å—Å–∏–π
        recent_sessions = self.learning_history[-5:]
        
        improvement_rates = [s.improvements_applied / max(1, s.tasks_processed) for s in recent_sessions]
        quality_increases = [s.quality_increase for s in recent_sessions]
        
        avg_improvement_rate = sum(improvement_rates) / len(improvement_rates)
        avg_quality_increase = sum(quality_increases) / len(quality_increases)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        if avg_improvement_rate > 0.1:
            trend = 'improving'
        elif avg_improvement_rate > 0.05:
            trend = 'stable'
        else:
            trend = 'declining'
        
        return {
            'trend': trend,
            'avg_improvement_rate': avg_improvement_rate,
            'avg_quality_increase': avg_quality_increase,
            'sessions_analyzed': len(recent_sessions)
        }
    
    def _generate_recommendations(self) -> List[str]:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        health_score = self._calculate_system_health_score()
        
        if health_score < 0.6:
            recommendations.append("–û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∏–∑–∫–æ–µ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        if not self.critics:
            recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏–∫–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞")
        
        if not self.guardians:
            recommendations.append("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        if len(self.system_principles) < 5:
            recommendations.append("–ù–∞–∫–æ–ø–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ä–∞–±–æ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è Constitutional AI")
        
        rate_stats = self.rate_controller.get_statistics()
        success_rate = float(rate_stats['success_rate'].rstrip('%'))
        
        if success_rate < 80:
            recommendations.append("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å rate limiting - –Ω–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        cache_hit_rate = float(rate_stats['cache_hit_rate'].rstrip('%'))
        
        if cache_hit_rate < 20:
            recommendations.append("–£–ª—É—á—à–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        return recommendations

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è
_advanced_learning_engine = None

def get_advanced_learning_engine() -> AdvancedSelfLearningEngine:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è"""
    global _advanced_learning_engine
    if _advanced_learning_engine is None:
        _advanced_learning_engine = AdvancedSelfLearningEngine()
    return _advanced_learning_engine

async def process_task_with_advanced_learning(agent_id: str, task: str, input_data: Dict[str, Any], execution_func: Callable) -> Dict[str, Any]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –æ–±—É—á–µ–Ω–∏–µ–º"""
    engine = get_advanced_learning_engine()
    return await engine.process_task_with_learning(agent_id, task, input_data, execution_func) 