#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ KittyCore 3.0
"""

import asyncio
from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig

async def test_fixed_system():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –í–ê–õ–ò–î–ê–¶–ò–ò")
    print("=" * 50)
    
    config = UnifiedConfig()
    orchestrator = UnifiedOrchestrator(config)
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏
    print("üìã –¢–µ—Å—Ç: —Å–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π hello world —Ñ–∞–π–ª")
    result = await orchestrator.solve_task('—Å–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π hello world —Ñ–∞–π–ª')
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {result.get('final_result', {}).get('quality_score', 0):.2f}")
    print(f"üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(result.get('final_result', {}).get('created_files', []))}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    import os
    files = [f for f in os.listdir('.') if f.endswith(('.py', '.txt', '.html', '.json'))]
    print(f"üóÇÔ∏è  –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {files}")
    
    if files:
        for file in files[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
            try:
                with open(file, 'r', encoding='utf-8') as f:
                    content = f.read()[:200]
                print(f"\nüìÑ {file}:")
                print(f"   –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   HTML: {'<!doctype' in content.lower() or '<html' in content.lower()}")
                print(f"   KittyCore: {'–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ KittyCore' in content}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    asyncio.run(test_fixed_system()) 