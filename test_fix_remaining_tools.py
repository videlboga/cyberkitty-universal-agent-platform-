#!/usr/bin/env python3
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã

–¶–ï–õ–¨: –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:
- NetworkTool (Unknown error)
- DatabaseTool (Unknown error)  
- VectorSearchTool (—Å–∏–≥–Ω–∞—Ç—É—Ä–∞ execute)
- EmailTool (—Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
- ApiRequest (—Ç–∞–π–º–∞—É—Ç—ã)
"""

import asyncio
import time
import traceback

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
def sync_execute(async_tool, *args, **kwargs):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è async execute"""
    try:
        loop = asyncio.get_running_loop()
        import concurrent.futures
        with concurrent.futures.ThreadPoolExecutor() as executor:
            future = executor.submit(asyncio.run, async_tool.execute(*args, **kwargs))
            return future.result(timeout=30)
    except RuntimeError:
        return asyncio.run(async_tool.execute(*args, **kwargs))

def diagnose_network_tool():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ NetworkTool"""
    print("\nüåê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: NetworkTool")
    
    try:
        from kittycore.tools.network_tool import NetworkTool
        tool = NetworkTool()
        print("‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        methods = [method for method in dir(tool) if not method.startswith('_')]
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {methods}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É execute
        import inspect
        if hasattr(tool, 'execute'):
            sig = inspect.signature(tool.execute)
            print(f"üîç –°–∏–≥–Ω–∞—Ç—É—Ä–∞ execute: {sig}")
            
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤
            if inspect.iscoroutinefunction(tool.execute):
                print("‚ö†Ô∏è execute - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–µ—Ä—Ç–∫—É")
                result = sync_execute(tool, action="ping", host="8.8.8.8")
            else:
                print("‚úÖ execute - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
                result = tool.execute(action="ping", host="8.8.8.8")
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: success={getattr(result, 'success', 'N/A')}")
            print(f"üìè –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(str(getattr(result, 'data', '')))} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return "‚úÖ –†–ê–ë–û–¢–ê–ï–¢"
        else:
            return "‚ùå –ù–ï–¢ –ú–ï–¢–û–î–ê execute"
            
    except ImportError as e:
        return f"‚ùå –ò–ú–ü–û–†–¢: {e}"
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()
        return f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}"

def diagnose_database_tool():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ DatabaseTool"""
    print("\nüóÑÔ∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: DatabaseTool")
    
    try:
        from kittycore.tools.database_tool import DatabaseTool
        tool = DatabaseTool()
        print("‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É execute
        import inspect
        if hasattr(tool, 'execute'):
            sig = inspect.signature(tool.execute)
            print(f"üîç –°–∏–≥–Ω–∞—Ç—É—Ä–∞ execute: {sig}")
            
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤
            if inspect.iscoroutinefunction(tool.execute):
                print("‚ö†Ô∏è execute - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–µ—Ä—Ç–∫—É")
                result = sync_execute(tool, action="list_tables")
            else:
                print("‚úÖ execute - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
                result = tool.execute(action="list_tables")
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: success={getattr(result, 'success', 'N/A')}")
            print(f"üìè –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(str(getattr(result, 'data', '')))} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return "‚úÖ –†–ê–ë–û–¢–ê–ï–¢"
        else:
            return "‚ùå –ù–ï–¢ –ú–ï–¢–û–î–ê execute"
            
    except ImportError as e:
        return f"‚ùå –ò–ú–ü–û–†–¢: {e}"
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()
        return f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}"

def diagnose_vector_search_tool():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ VectorSearchTool"""
    print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: VectorSearchTool")
    
    try:
        from kittycore.tools.vector_search_tool import VectorSearchTool
        tool = VectorSearchTool()
        print("‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É execute
        import inspect
        if hasattr(tool, 'execute'):
            sig = inspect.signature(tool.execute)
            print(f"üîç –°–∏–≥–Ω–∞—Ç—É—Ä–∞ execute: {sig}")
            
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤
            if inspect.iscoroutinefunction(tool.execute):
                print("‚ö†Ô∏è execute - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–µ—Ä—Ç–∫—É")
                result = sync_execute(tool, query="test search", collection="test")
            else:
                print("‚úÖ execute - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
                result = tool.execute(query="test search", collection="test")
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: success={getattr(result, 'success', 'N/A')}")
            print(f"üìè –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(str(getattr(result, 'data', '')))} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return "‚úÖ –†–ê–ë–û–¢–ê–ï–¢"
        else:
            return "‚ùå –ù–ï–¢ –ú–ï–¢–û–î–ê execute"
            
    except ImportError as e:
        return f"‚ùå –ò–ú–ü–û–†–¢: {e}"
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()
        return f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}"

def diagnose_email_tool():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ EmailTool"""
    print("\nüìß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: EmailTool")
    
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞
        import_paths = [
            "kittycore.tools.email_tool",
            "kittycore.tools.communication_tools", 
            "kittycore.tools.communication_tool"
        ]
        
        tool = None
        successful_import = None
        
        for path in import_paths:
            try:
                if "email_tool" in path:
                    exec(f"from {path} import EmailTool")
                    tool = locals()['EmailTool']()
                    successful_import = path
                    break
                elif "communication" in path:
                    exec(f"from {path} import EmailTool")
                    tool = locals()['EmailTool']()
                    successful_import = path
                    break
            except (ImportError, AttributeError):
                continue
        
        if tool is None:
            return "‚ùå –ù–ï –ù–ê–ô–î–ï–ù: –§–∞–π–ª email_tool –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω –∏–∑: {successful_import}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É execute
        import inspect
        if hasattr(tool, 'execute'):
            sig = inspect.signature(tool.execute)
            print(f"üîç –°–∏–≥–Ω–∞—Ç—É—Ä–∞ execute: {sig}")
            return "‚úÖ –ù–ê–ô–î–ï–ù –ò –î–û–°–¢–£–ü–ï–ù"
        else:
            return "‚ùå –ù–ï–¢ –ú–ï–¢–û–î–ê execute"
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()
        return f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}"

def diagnose_api_request_timeout():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ ApiRequest"""
    print("\nüåê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–ê–ô–ú–ê–£–¢–û–í: ApiRequest")
    
    try:
        from kittycore.tools.api_request_tool import ApiRequestTool
        tool = ApiRequestTool()
        print("‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        
        # –¢–µ—Å—Ç —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        start_time = time.time()
        result = tool.execute(
            url="https://httpbin.org/delay/1",  # –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
            method="GET",
            timeout=5  # –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
        )
        end_time = time.time()
        
        actual_time = end_time - start_time
        print(f"‚è±Ô∏è –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è: {actual_time:.1f}—Å")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: success={getattr(result, 'success', 'N/A')}")
        
        if hasattr(result, 'success') and result.success:
            return f"‚úÖ –†–ê–ë–û–¢–ê–ï–¢: {actual_time:.1f}—Å"
        else:
            error = getattr(result, 'error', 'Unknown error')
            return f"‚ùå –ü–†–û–í–ê–õ: {error}"
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        return f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}"

def main():
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–°–¢–ê–í–®–ò–•–°–Ø –ü–†–û–ë–õ–ï–ú–ù–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    print("=" * 60)
    
    diagnoses = {
        "NetworkTool": diagnose_network_tool,
        "DatabaseTool": diagnose_database_tool,
        "VectorSearchTool": diagnose_vector_search_tool,
        "EmailTool": diagnose_email_tool,
        "ApiRequest-Timeout": diagnose_api_request_timeout
    }
    
    results = {}
    
    for tool_name, diagnose_func in diagnoses.items():
        try:
            start_time = time.time()
            result = diagnose_func()
            end_time = time.time()
            
            test_time = (end_time - start_time) * 1000
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            is_working = result.startswith("‚úÖ")
            status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if is_working else "‚ùå –ü–†–û–ë–õ–ï–ú–´"
            
            print(f"\n{tool_name}: {result} ({test_time:.1f}–º—Å)")
            results[tool_name] = is_working
            
        except Exception as e:
            print(f"\n{tool_name}: ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            results[tool_name] = False
    
    # –ò—Ç–æ–≥–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    
    total_diagnosed = len(results)
    working_tools = sum(1 for is_working in results.values() if is_working)
    working_rate = (working_tools / total_diagnosed * 100) if total_diagnosed > 0 else 0
    
    print(f"–í—Å–µ–≥–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {total_diagnosed}")
    print(f"–†–∞–±–æ—Ç–∞—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {working_tools}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {working_rate:.1f}%")
    
    print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for tool_name, is_working in results.items():
        status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if is_working else "‚ùå –ù–£–ñ–ù–û –ß–ò–ù–ò–¢–¨"
        print(f"  {tool_name}: {status}")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    broken_tools = [name for name, is_working in results.items() if not is_working]
    if broken_tools:
        print(f"\nüîß –ü–†–ò–û–†–ò–¢–ï–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
        for i, tool in enumerate(broken_tools, 1):
            print(f"  {i}. {tool}")
    else:
        print(f"\nüéâ –í–°–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢!")

if __name__ == "__main__":
    main() 