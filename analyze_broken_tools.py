#!/usr/bin/env python3
"""
üîß –ê–ù–ê–õ–ò–ó –ù–ï–†–ê–ë–û–ß–ò–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KittyCore 3.0

–¶–ï–õ–¨: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ –ø–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
–ù–ï–†–ê–ë–û–ß–ò–ï: enhanced_web_scraping, smart_function, database, network
"""

import asyncio
import traceback

async def analyze_broken_tool(tool_name, module_path, class_name, test_params):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    print(f"\nüîß –ê–ù–ê–õ–ò–ó: {tool_name.upper()}")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç
        import importlib
        module = importlib.import_module(module_path)
        tool_class = getattr(module, class_name)
        tool = tool_class()
        
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç: OK")
        print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: OK")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            result = await tool.execute(**test_params)
            
            print(f"‚úÖ Execute: OK")
            print(f"üìä Success: {getattr(result, 'success', 'N/A')}")
            print(f"üìä Data: {len(str(getattr(result, 'data', ''))) if hasattr(result, 'data') else 0} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if hasattr(result, 'error'):
                print(f"‚ö†Ô∏è Error: {result.error}")
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã
            if hasattr(result, 'success') and not result.success:
                print(f"üîç –ü–†–û–ë–õ–ï–ú–ê: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success=False")
                if hasattr(result, 'error'):
                    print(f"üîç –ü–†–ò–ß–ò–ù–ê: {result.error}")
                return "LOGIC_ERROR"
            elif not hasattr(result, 'data') or not result.data:
                print(f"üîç –ü–†–û–ë–õ–ï–ú–ê: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return "EMPTY_DATA"
            else:
                print(f"üîç –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à—ë–ª")
                return "UNKNOWN"
                
        except Exception as e:
            print(f"‚ùå Execute: –û–®–ò–ë–ö–ê")
            print(f"üîç Exception: {str(e)[:200]}")
            print(f"üîç Traceback:")
            traceback.print_exc()
            return "EXECUTION_ERROR"
            
    except ImportError as e:
        print(f"‚ùå –ò–º–ø–æ—Ä—Ç: –û–®–ò–ë–ö–ê - {e}")
        return "IMPORT_ERROR"
    except Exception as e:
        print(f"‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –û–®–ò–ë–ö–ê - {e}")
        return "INIT_ERROR"

async def main():
    """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –Ω–µ—Ä–∞–±–æ—á–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("üîß –ê–ù–ê–õ–ò–ó –ù–ï–†–ê–ë–û–ß–ò–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    print("=" * 80)
    
    broken_tools = [
        {
            "name": "enhanced_web_scraping",
            "module": "kittycore.tools.enhanced_web_scraping_tool", 
            "class": "EnhancedWebScrapingTool",
            "params": {"url": "https://httpbin.org/html"},
            "expected": "HTML –∫–æ–Ω—Ç–µ–Ω—Ç —Å httpbin.org"
        },
        {
            "name": "smart_function",
            "module": "kittycore.tools.smart_function_tool",
            "class": "SmartFunctionTool",
            "params": {"action": "execute", "code": "def test(): return 'ok'", "function_name": "test"},
            "expected": "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ 'ok'"
        },
        {
            "name": "database",
            "module": "kittycore.tools.database_tool", 
            "class": "DatabaseTool",
            "params": {"query": "SELECT 1 as test"},
            "expected": "–†–µ–∑—É–ª—å—Ç–∞—Ç SQL –∑–∞–ø—Ä–æ—Å–∞"
        },
        {
            "name": "network",
            "module": "kittycore.tools.network_tool",
            "class": "NetworkTool", 
            "params": {"action": "get_info"},
            "expected": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏"
        }
    ]
    
    problems = {}
    
    for tool_config in broken_tools:
        print(f"\nüìã –û–ñ–ò–î–ê–ï–¢–°–Ø: {tool_config['expected']}")
        
        problem_type = await analyze_broken_tool(
            tool_config["name"],
            tool_config["module"],
            tool_config["class"], 
            tool_config["params"]
        )
        
        problems[tool_config["name"]] = problem_type
    
    # –ò—Ç–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞
    print(f"\nüìä –ò–¢–û–ì–ò –ê–ù–ê–õ–ò–ó–ê –ü–†–û–ë–õ–ï–ú")
    print("=" * 80)
    
    problem_groups = {}
    for tool, problem in problems.items():
        if problem not in problem_groups:
            problem_groups[problem] = []
        problem_groups[problem].append(tool)
    
    for problem_type, tools in problem_groups.items():
        print(f"\nüîç {problem_type}:")
        for tool in tools:
            print(f"  - {tool}")
    
    # –ü–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print(f"\nüõ†Ô∏è –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 80)
    
    if "LOGIC_ERROR" in problem_groups:
        print(f"üìù LOGIC_ERROR –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
        print(f"   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ª–æ–≥–∏–∫—É execute()")
        print(f"   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏—è success=True")
        print(f"   - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    
    if "EMPTY_DATA" in problem_groups:
        print(f"üìù EMPTY_DATA –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
        print(f"   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö")
        print(f"   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ result.data")
    
    if "EXECUTION_ERROR" in problem_groups:
        print(f"üìù EXECUTION_ERROR –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
        print(f"   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–æ–¥–µ")
        print(f"   - –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫")
    
    if "IMPORT_ERROR" in problem_groups:
        print(f"üìù IMPORT_ERROR –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
        print(f"   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞")
        print(f"   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    
    return problems

if __name__ == "__main__":
    asyncio.run(main()) 