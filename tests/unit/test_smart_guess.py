#!/usr/bin/env python3
"""
üîÆ –¢–µ—Å—Ç —É–≥–∞–¥—ã–≤–∞–Ω–∏—è –∑–∞–¥–∞—á SmartValidator
=====================================

–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ SmartValidator —É–≥–∞–¥—ã–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ —Ñ–∞–π–ª–∞–º
"""

import asyncio
import os
import tempfile
from agents.smart_validator import SmartValidator


async def test_task_guessing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–æ–≤"""
    
    print("üîÆ –¢–µ—Å—Ç —É–≥–∞–¥—ã–≤–∞–Ω–∏—è –∑–∞–¥–∞—á SmartValidator")
    print("=" * 50)
    
    validator = SmartValidator()
    
    test_cases = [
        {
            "name": "HTML —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏",
            "content": """<!DOCTYPE html>
<html>
<head><title>–ö–æ—Ç—è—Ç–∞</title></head>
<body>
<h1>–°–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏</h1>
<p>–†—ã–∂–∏–π –∫–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫</p>
</body>
</html>""",
            "expected_keywords": ["—Å–∞–π—Ç", "–∫–æ—Ç—è—Ç"]
        },
        {
            "name": "–ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞",
            "content": """–ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞ —Å –∫–æ—Ç—è—Ç–∞–º–∏

1. HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
2. CSS —Å—Ç–∏–ª–∏
3. –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏

–≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã...""",
            "expected_keywords": ["—Å–∞–π—Ç", "–∫–æ—Ç—è—Ç", "–ø–ª–∞–Ω"]
        },
        {
            "name": "–†–∞—Å—á–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏",
            "content": """–†–ê–°–ß–ï–¢ –ü–õ–û–¢–ù–û–°–¢–ò –ß–ï–†–ù–û–ô –î–´–†–´

–î–∞–Ω–æ: M = 10 —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –º–∞—Å—Å
–†–µ–∑—É–ª—å—Ç–∞—Ç: œÅ = 1.85√ó10¬π‚Å∑ –∫–≥/–º¬≥""",
            "expected_keywords": ["–ø–ª–æ—Ç–Ω–æ—Å—Ç—å", "—á–µ—Ä–Ω"]
        }
    ]
    
    with tempfile.TemporaryDirectory() as temp_dir:
        
        for i, case in enumerate(test_cases, 1):
            print(f"\nüß™ –¢–ï–°–¢ {i}: {case['name']}")
            print("-" * 40)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
            test_file = os.path.join(temp_dir, f"test_{i}.txt")
            with open(test_file, 'w', encoding='utf-8') as f:
                f.write(case['content'])
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø—É—Å—Ç–æ–π –∑–∞–¥–∞—á–µ–π (–∑–∞—Å—Ç–∞–≤–ª—è–µ–º —É–≥–∞–¥—ã–≤–∞—Ç—å)
            validation = await validator.validate_result(
                original_task="",  # –ü—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ - –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å!
                result={"success": True},
                created_files=[test_file]
            )
            
            print(f"üîÆ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            print(f"   üìä –û—Ü–µ–Ω–∫–∞: {validation.score:.1f}/1.0") 
            print(f"   üéØ –í–µ—Ä–¥–∏–∫—Ç: {validation.verdict}")
            print(f"   üí∞ –ü–æ–ª—å–∑–∞: {validation.user_benefit}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            response_text = (validation.verdict + " " + validation.user_benefit).lower()
            found_keywords = []
            for keyword in case['expected_keywords']:
                if keyword in response_text:
                    found_keywords.append(keyword)
            
            if found_keywords:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
            else:
                print(f"   ‚ö†Ô∏è  –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {case['expected_keywords']}")
    
    print(f"\nüéâ –¢–ï–°–¢ –£–ì–ê–î–´–í–ê–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù!")
    print("SmartValidator —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∏—Å—Ö–æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏!")


if __name__ == "__main__":
    asyncio.run(test_task_guessing())