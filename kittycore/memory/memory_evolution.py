"""
üß¨ Memory Evolution - –≠–≤–æ–ª—é—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –∫–æ–º–∞–Ω–¥ –∞–≥–µ–Ω—Ç–æ–≤

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —ç–≤–æ–ª—é—Ü–∏–∏ –ø–∞–º—è—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ A-MEM –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤.
–ê–≥–µ–Ω—Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è - –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É –Ω–∏–º–∏,
–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç –º–µ—Ç–∞-–∑–Ω–∞–Ω–∏—è.

–ü—Ä–∏–Ω—Ü–∏–ø: "–ü–∞–º—è—Ç—å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç, –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —É–º–Ω–µ–µ" üß¨
"""

import asyncio
import json
import logging
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from pathlib import Path

logger = logging.getLogger(__name__)

@dataclass
class TeamPattern:
    """–ü–∞—Ç—Ç–µ—Ä–Ω —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤"""
    pattern_id: str
    team_id: str
    pattern_type: str  # "success", "failure", "optimization", "collaboration"
    description: str
    frequency: int
    confidence: float
    examples: List[str]
    created_at: datetime

@dataclass
class MemoryLink:
    """–°–≤—è–∑—å –º–µ–∂–¥—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    link_id: str
    source_memory: str
    target_memory: str
    link_type: str  # "causal", "similar", "sequence", "contradiction"
    strength: float  # 0.0 - 1.0
    created_at: datetime

class TeamMemoryEvolution:
    """–≠–≤–æ–ª—é—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –∫–æ–º–∞–Ω–¥ –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, enhanced_memory_system=None):
        self.enhanced_memory = enhanced_memory_system
        self.team_patterns: Dict[str, List[TeamPattern]] = {}
        self.memory_links: Dict[str, List[MemoryLink]] = {}
        self.evolution_history: List[Dict[str, Any]] = []
        
        logger.info("üß¨ TeamMemoryEvolution –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def evolve_team_memory(self, team_id: str) -> Dict[str, Any]:
        """–≠–≤–æ–ª—é—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —ç–≤–æ–ª—é—Ü–∏—é –ø–∞–º—è—Ç–∏ –∫–æ–º–∞–Ω–¥—ã: {team_id}")
            
            # 1. –°–±–æ—Ä –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã
            team_memories = await self._collect_team_memories(team_id)
            
            if len(team_memories) < 3:
                logger.info(f"‚è≠Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã {team_id}")
                return {"status": "insufficient_data", "memories_count": len(team_memories)}
            
            # 2. –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            patterns = await self._analyze_team_patterns(team_memories)
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
            links = await self._create_memory_links(team_memories)
            
            # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞-–ø–∞–º—è—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
            meta_memory = await self._create_team_meta_memory(team_id, patterns, links)
            
            # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–≤–æ–ª—é—Ü–∏–∏
            evolution_result = {
                "team_id": team_id,
                "memories_analyzed": len(team_memories),
                "patterns_discovered": len(patterns),
                "links_created": len(links),
                "meta_memory_id": meta_memory,
                "timestamp": datetime.now().isoformat()
            }
            
            self.evolution_history.append(evolution_result)
            logger.info(f"‚úÖ –≠–≤–æ–ª—é—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã {team_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(patterns)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, {len(links)} —Å–≤—è–∑–µ–π")
            
            return evolution_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏ –ø–∞–º—è—Ç–∏ –∫–æ–º–∞–Ω–¥—ã {team_id}: {e}")
            return {"status": "error", "error": str(e)}
    
    async def _collect_team_memories(self, team_id: str) -> List[Dict[str, Any]]:
        """–°–±–æ—Ä –≤—Å–µ—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã"""
        if not self.enhanced_memory:
            logger.warning("‚ö†Ô∏è Enhanced memory system –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            return []
        
        try:
            # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã
            memories = await self.enhanced_memory.collective_search(
                query="",  # –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å = –≤—Å–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
                team_id=team_id
            )
            
            logger.debug(f"üìö –°–æ–±—Ä–∞–Ω–æ {len(memories)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã {team_id}")
            return memories
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return []
    
    async def _analyze_team_patterns(self, memories: List[Dict[str, Any]]) -> List[TeamPattern]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã"""
        patterns = []
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å LLM)
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω 1: –£—Å–ø–µ—à–Ω—ã–µ –∑–∞–¥–∞—á–∏
            success_memories = [m for m in memories if 'success' in m.get('content', '').lower()]
            if len(success_memories) >= 2:
                pattern = TeamPattern(
                    pattern_id=f"success_{datetime.now().timestamp()}",
                    team_id=memories[0].get('agent_id', 'unknown').split('_')[0] if memories else 'unknown',
                    pattern_type="success",
                    description=f"–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ({len(success_memories)} –∏–∑ {len(memories)} –∑–∞–¥–∞—á)",
                    frequency=len(success_memories),
                    confidence=len(success_memories) / len(memories),
                    examples=[m.get('content', '')[:100] for m in success_memories[:3]],
                    created_at=datetime.now()
                )
                patterns.append(pattern)
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω 2: –¢–∏–ø—ã –∑–∞–¥–∞—á
            task_types = {}
            for memory in memories:
                tags = memory.get('tags', [])
                for tag in tags:
                    if tag not in ['agent', 'memory', 'team']:  # –∏—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ç–µ–≥–∏
                        task_types[tag] = task_types.get(tag, 0) + 1
            
            if task_types:
                most_common = max(task_types.items(), key=lambda x: x[1])
                if most_common[1] >= 2:
                    pattern = TeamPattern(
                        pattern_id=f"specialty_{datetime.now().timestamp()}",
                        team_id=memories[0].get('agent_id', 'unknown').split('_')[0] if memories else 'unknown',
                        pattern_type="specialization",
                        description=f"–ö–æ–º–∞–Ω–¥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∑–∞–¥–∞—á–∞—Ö —Ç–∏–ø–∞ '{most_common[0]}' ({most_common[1]} –∑–∞–¥–∞—á)",
                        frequency=most_common[1],
                        confidence=most_common[1] / len(memories),
                        examples=[m.get('content', '')[:100] for m in memories if most_common[0] in m.get('tags', [])][:3],
                        created_at=datetime.now()
                    )
                    patterns.append(pattern)
            
            logger.info(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(patterns)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã")
            return patterns
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            return []
    
    async def _create_memory_links(self, memories: List[Dict[str, Any]]) -> List[MemoryLink]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
        links = []
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ö–æ–∂–∏—Ö —Ç–µ–≥–æ–≤ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            for i, memory1 in enumerate(memories):
                for j, memory2 in enumerate(memories[i+1:], i+1):
                    
                    # –°–≤—è–∑—å –ø–æ –æ–±—â–∏–º —Ç–µ–≥–∞–º
                    tags1 = set(memory1.get('tags', []))
                    tags2 = set(memory2.get('tags', []))
                    common_tags = tags1.intersection(tags2)
                    
                    if len(common_tags) >= 2:  # –º–∏–Ω–∏–º—É–º 2 –æ–±—â–∏—Ö —Ç–µ–≥–∞
                        link = MemoryLink(
                            link_id=f"link_{datetime.now().timestamp()}_{i}_{j}",
                            source_memory=memory1.get('id', ''),
                            target_memory=memory2.get('id', ''),
                            link_type="similar",
                            strength=len(common_tags) / max(len(tags1), len(tags2), 1),
                            created_at=datetime.now()
                        )
                        links.append(link)
                    
                    # –°–≤—è–∑—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
                    if abs(i - j) == 1:  # —Å–æ—Å–µ–¥–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        link = MemoryLink(
                            link_id=f"sequence_{datetime.now().timestamp()}_{i}_{j}",
                            source_memory=memory1.get('id', ''),
                            target_memory=memory2.get('id', ''),
                            link_type="sequence",
                            strength=0.7,  # —Å—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ —Å–≤—è–∑–∏
                            created_at=datetime.now()
                        )
                        links.append(link)
            
            logger.info(f"üîó –°–æ–∑–¥–∞–Ω–æ {len(links)} —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏")
            return links
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π: {e}")
            return []
    
    async def _create_team_meta_memory(self, team_id: str, patterns: List[TeamPattern], 
                                     links: List[MemoryLink]) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞-–ø–∞–º—è—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            if not self.enhanced_memory:
                return None
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞-–ø–∞–º—è—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            meta_content_parts = [
                f"üß¨ –ú–ï–¢–ê-–ü–ê–ú–Ø–¢–¨ –ö–û–ú–ê–ù–î–´ {team_id}",
                f"–ê–Ω–∞–ª–∏–∑ –æ—Ç: {datetime.now().isoformat()}",
                "",
                "üìä –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:"
            ]
            
            for pattern in patterns:
                meta_content_parts.extend([
                    f"‚Ä¢ {pattern.pattern_type.upper()}: {pattern.description}",
                    f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pattern.confidence:.2f}, –ß–∞—Å—Ç–æ—Ç–∞: {pattern.frequency}"
                ])
            
            meta_content_parts.extend([
                "",
                f"üîó –°–í–Ø–ó–ò –ú–ï–ñ–î–£ –í–û–°–ü–û–ú–ò–ù–ê–ù–ò–Ø–ú–ò: {len(links)}",
                f"‚Ä¢ –°–≤—è–∑–∏ –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É: {len([l for l in links if l.link_type == 'similar'])}",
                f"‚Ä¢ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏: {len([l for l in links if l.link_type == 'sequence'])}",
                "",
                "üéØ –í–´–í–û–î–´:",
                f"–ö–æ–º–∞–Ω–¥–∞ {team_id} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç {len(patterns)} —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞–±–æ—Ç—ã.",
                f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(links)} —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞",
                "—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è."
            ])
            
            meta_content = "\n".join(meta_content_parts)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞-–ø–∞–º—è—Ç–∏
            meta_memory_id = await self.enhanced_memory.agent_remember(
                agent_id=f"meta_evolution_{team_id}",
                memory=meta_content,
                context={
                    "team_id": team_id,
                    "category": "team_meta_memory",
                    "patterns_count": len(patterns),
                    "links_count": len(links),
                    "evolution_timestamp": datetime.now().isoformat()
                }
            )
            
            logger.info(f"üß† –ú–µ—Ç–∞-–ø–∞–º—è—Ç—å –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∞: {meta_memory_id}")
            return meta_memory_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∞-–ø–∞–º—è—Ç–∏: {e}")
            return None 