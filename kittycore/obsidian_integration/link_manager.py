"""
LinkManager - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –≤ Obsidian
"""

import re
from pathlib import Path
from typing import Dict, List, Set
from loguru import logger


class LinkManager:
    """
    –ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏ –∑–∞–º–µ—Ç–æ–∫
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ [[—Å—Å—ã–ª–æ–∫]] –º–µ–∂–¥—É –∑–∞–º–µ—Ç–∫–∞–º–∏
    - –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
    - –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–µ–π
    """
    
    def __init__(self, vault_path: Path):
        self.vault_path = vault_path
        logger.debug(f"üîó LinkManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è: {vault_path}")
    
    async def auto_link_note(self, note_path: str) -> int:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤ –∑–∞–º–µ—Ç–∫–µ
        
        Args:
            note_path: –ü—É—Ç—å –∫ –∑–∞–º–µ—Ç–∫–µ
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        """
        try:
            # –ß—Ç–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
            with open(note_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ª–∏–Ω–∫–æ–≤–∫–∏
            existing_notes = self._find_existing_notes()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫
            updated_content, links_count = self._create_links(content, existing_notes)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if links_count > 0:
                with open(note_path, 'w', encoding='utf-8') as f:
                    f.write(updated_content)
                
                logger.info(f"üîó –°–æ–∑–¥–∞–Ω–æ {links_count} —Å—Å—ã–ª–æ–∫ –≤ {note_path}")
            
            return links_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ª–∏–Ω–∫–æ–≤–∫–∏ {note_path}: {e}")
            return 0
    
    async def get_graph_data(self) -> Dict[str, List]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–µ–π
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —É–∑–ª–∞–º–∏ –∏ —Å–≤—è–∑—è–º–∏
        """
        nodes = []
        edges = []
        
        try:
            # –°–±–æ—Ä –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
            for md_file in self.vault_path.rglob("*.md"):
                node_name = md_file.stem
                nodes.append({
                    "id": node_name,
                    "name": node_name,
                    "path": str(md_file)
                })
                
                # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –≤ –∑–∞–º–µ—Ç–∫–µ
                try:
                    with open(md_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    links = re.findall(r'\[\[([^\]]+)\]\]', content)
                    
                    for link in links:
                        edges.append({
                            "source": node_name,
                            "target": link
                        })
                        
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {md_file}: {e}")
            
            return {
                "nodes": nodes,
                "edges": edges
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∞: {e}")
            return {"nodes": [], "edges": []}
    
    def _find_existing_notes(self) -> Dict[str, str]:
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–º–µ—Ç–æ–∫"""
        notes = {}
        
        for md_file in self.vault_path.rglob("*.md"):
            note_name = md_file.stem
            notes[note_name] = str(md_file)
        
        return notes
    
    def _create_links(self, content: str, existing_notes: Dict[str, str]) -> tuple:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ"""
        updated_content = content
        links_created = 0
        
        for note_name, note_path in existing_notes.items():
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–º–µ–Ω–∏ –∑–∞–º–µ—Ç–∫–∏
            pattern = rf'\b{re.escape(note_name)}\b(?!\]\])'
            
            if re.search(pattern, content, re.IGNORECASE):
                # –ó–∞–º–µ–Ω–∞ –Ω–∞ —Å—Å—ã–ª–∫—É
                replacement = f'[[{note_name}]]'
                updated_content = re.sub(pattern, replacement, updated_content, count=1)
                links_created += 1
        
        return updated_content, links_created 