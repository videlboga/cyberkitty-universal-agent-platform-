"""
üéØ Quality Controller - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è KittyCore 3.0

–ñ—ë—Å—Ç–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å 
–†–ï–ó–£–õ–¨–¢–ê–¢–´ –≤–º–µ—Å—Ç–æ –ø–ª–∞–Ω–æ–≤! –ù–∏–∫–∞–∫–∏—Ö —Ö–∞–ª—Ç—É—Ä!

- ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤  
- ‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- ‚úÖ –ü—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ –∫ –ø–µ—Ä–µ–¥–µ–ª–∫–µ
- ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å

–¶–ï–õ–¨: –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ –≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π! üí™
"""

import asyncio
import logging
import re
from dataclasses import dataclass, field
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple, Union
from pathlib import Path
from enum import Enum

logger = logging.getLogger(__name__)

# === –ö–†–ò–¢–ï–†–ò–ò –ö–ê–ß–ï–°–¢–í–ê ===

class QualityCriteria(Enum):
    """–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    HAS_ARTIFACTS = "has_artifacts"           # –ï—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã/—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    CONTENT_COMPLETENESS = "content_complete" # –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª–Ω—ã–π –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π  
    USER_INTENT_MATCH = "user_intent_match"   # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ACTIONABLE_RESULT = "actionable_result"   # –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    NO_PLACEHOLDER = "no_placeholder"         # –ù–µ—Ç –∑–∞–≥–ª—É—à–µ–∫ –∏ TODO
    TECHNICAL_VALIDITY = "technical_valid"    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    MEANINGFUL_CONTENT = "meaningful_content" # –û—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ

@dataclass
class QualityCheck:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    criteria: QualityCriteria
    passed: bool
    score: float  # 0.0 - 1.0
    message: str
    details: Optional[str] = None
    suggestions: List[str] = field(default_factory=list)

@dataclass  
class QualityAssessment:
    """–ü–æ–ª–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
    overall_score: float
    passed_checks: int
    total_checks: int
    checks: List[QualityCheck]
    fatal_issues: List[str]
    improvement_suggestions: List[str]
    verdict: str  # EXCELLENT, GOOD, ACCEPTABLE, POOR, UNACCEPTABLE
    
    def is_acceptable(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–µ–º–ª–µ–º—ã–º"""
        return self.overall_score >= 0.7 and len(self.fatal_issues) == 0

# === –ö–û–ù–¢–†–û–õ–õ–ï–† –ö–ê–ß–ï–°–¢–í–ê ===

class QualityController:
    """–ñ—ë—Å—Ç–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    def __init__(self):
        self.llm = self._init_llm()
        self.quality_cache = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫
        self.min_file_size = 100  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
        self.max_placeholder_ratio = 0.2  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥–ª—É—à–µ–∫
        
        logger.info("üéØ QualityController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _init_llm(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
        try:
            from ..llm import get_llm_provider
            return get_llm_provider()
        except ImportError:
            logger.warning("‚ö†Ô∏è LLM –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
            return None
    
    async def assess_quality(
        self, 
        task_description: str,
        result: Dict[str, Any],
        artifacts_paths: List[Path] = None
    ) -> QualityAssessment:
        """–ü–æ–ª–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        
        checks = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        artifacts_check = await self._check_artifacts(artifacts_paths or [])
        checks.append(artifacts_check)
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        completeness_check = await self._check_content_completeness(result, artifacts_paths or [])
        checks.append(completeness_check)
        
        # 3. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        intent_check = await self._check_user_intent_match(task_description, result, artifacts_paths or [])
        checks.append(intent_check)
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏ –∏ TODO
        placeholder_check = await self._check_placeholders(artifacts_paths or [])
        checks.append(placeholder_check)
        
        # 5. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        technical_check = await self._check_technical_validity(artifacts_paths or [])
        checks.append(technical_check)
        
        # 6. –û—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        meaningful_check = await self._check_meaningful_content(result, artifacts_paths or [])
        checks.append(meaningful_check)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
        overall_score = sum(check.score for check in checks) / len(checks)
        passed_checks = sum(1 for check in checks if check.passed)
        
        # –§–∞—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        fatal_issues = [
            check.message for check in checks 
            if not check.passed and check.score < 0.5
        ]
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        improvement_suggestions = []
        for check in checks:
            improvement_suggestions.extend(check.suggestions)
        
        # –í–µ—Ä–¥–∏–∫—Ç
        verdict = self._determine_verdict(overall_score, fatal_issues)
        
        assessment = QualityAssessment(
            overall_score=overall_score,
            passed_checks=passed_checks,
            total_checks=len(checks),
            checks=checks,
            fatal_issues=fatal_issues,
            improvement_suggestions=improvement_suggestions,
            verdict=verdict
        )
        
        logger.info(f"üéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {verdict} ({overall_score:.2f}/1.0)")
        
        return assessment
    
    async def _check_artifacts(self, artifacts_paths: List[Path]) -> QualityCheck:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"""
        
        if not artifacts_paths:
            return QualityCheck(
                criteria=QualityCriteria.HAS_ARTIFACTS,
                passed=False,
                score=0.0,
                message="‚ùå –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤",
                suggestions=["–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã"]
            )
        
        valid_artifacts = []
        total_size = 0
        
        for path in artifacts_paths:
            if path.exists() and path.is_file():
                size = path.stat().st_size
                if size >= self.min_file_size:
                    valid_artifacts.append(path)
                    total_size += size
        
        if not valid_artifacts:
            return QualityCheck(
                criteria=QualityCriteria.HAS_ARTIFACTS,
                passed=False,
                score=0.2,
                message="‚ùå –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –º–∞–ª—ã –∏–ª–∏ –ø—É—Å—Ç—ã",
                details=f"–ù–∞–π–¥–µ–Ω–æ {len(artifacts_paths)} —Ñ–∞–π–ª–æ–≤, –Ω–æ –≤—Å–µ –º–µ–Ω—å—à–µ {self.min_file_size} –±–∞–π—Ç",
                suggestions=["–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª—ã", "–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª–Ω—ã–µ, –∞ –Ω–µ –∑–∞–≥–æ—Ç–æ–≤–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã"]
            )
        
        score = min(1.0, len(valid_artifacts) / max(len(artifacts_paths), 1))
        
        return QualityCheck(
            criteria=QualityCriteria.HAS_ARTIFACTS,
            passed=score >= 0.7,
            score=score,
            message=f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(valid_artifacts)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ ({total_size} –±–∞–π—Ç)",
            details=f"–§–∞–π–ª—ã: {[p.name for p in valid_artifacts]}",
            suggestions=[] if score >= 0.8 else ["–°–æ–∑–¥–∞–π—Ç–µ –±–æ–ª—å—à–µ —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"]
        )
    
    async def _check_content_completeness(self, result: Dict[str, Any], artifacts_paths: List[Path]) -> QualityCheck:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        content_indicators = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º result 
        result_text = str(result).lower()
        
        # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–ø–ª–∞–Ω, –∞ –Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        plan_indicators = [
            "–ø–ª–∞–Ω", "–ø–ª–∞–Ω–∏—Ä—É—é", "–Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å", "—Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏", 
            "todo", "to-do", "–ø—Ä–µ–¥–ª–∞–≥–∞—é", "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–æ–∑–¥–∞—Ç—å",
            "—Å–æ–∑–¥–∞–º —Ñ–∞–π–ª", "—Å–æ–∑–¥–∞–º –ø–∞–ø–∫—É", "—Å–æ–∑–¥–∞–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É"
        ]
        
        plan_count = sum(1 for indicator in plan_indicators if indicator in result_text)
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        result_indicators = [
            "—Å–æ–∑–¥–∞–Ω", "—Å–æ–∑–¥–∞–Ω–æ", "–≥–æ—Ç–æ–≤", "–∑–∞–≤–µ—Ä—à—ë–Ω", "—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω",
            "—Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç", "–∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª–µ",
            "—Å–æ—Ö—Ä–∞–Ω—ë–Ω", "–¥–æ—Å—Ç—É–ø–µ–Ω", "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç"
        ]
        
        result_count = sum(1 for indicator in result_indicators if indicator in result_text)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        file_completeness = 0.0
        if artifacts_paths:
            for path in artifacts_paths:
                if path.exists():
                    try:
                        content = path.read_text(encoding='utf-8')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏
                        placeholder_indicators = [
                            "todo", "–∑–∞–≥–ª—É—à–∫–∞", "placeholder", "coming soon",
                            "–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ", "–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ"
                        ]
                        
                        has_placeholders = any(indicator in content.lower() for indicator in placeholder_indicators)
                        
                        if not has_placeholders and len(content.strip()) > 50:
                            file_completeness += 1.0
                            
                    except Exception:
                        pass
            
            file_completeness = file_completeness / len(artifacts_paths)
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã
        if plan_count > result_count and file_completeness < 0.5:
            score = 0.2
            passed = False
            message = "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ –ø–ª–∞–Ω–æ–≤ —á–µ–º –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π"
            suggestions = [
                "–°–æ–∑–¥–∞–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤–º–µ—Å—Ç–æ –ø–ª–∞–Ω–æ–≤ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è",
                "–†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –∞ –Ω–µ –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å",
                "–ó–∞–º–µ–Ω–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
            ]
        elif result_count > 0 and file_completeness >= 0.5:
            score = 0.8 + (file_completeness * 0.2)
            passed = True
            message = f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª–Ω—ã–π –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π ({result_count} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏)"
            suggestions = []
        else:
            score = 0.5
            passed = False
            message = "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
            suggestions = ["–î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"]
        
        return QualityCheck(
            criteria=QualityCriteria.CONTENT_COMPLETENESS,
            passed=passed,
            score=score,
            message=message,
            details=f"–ü–ª–∞–Ω—ã: {plan_count}, –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {result_count}, –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤: {file_completeness:.1f}",
            suggestions=suggestions
        )

    async def _check_user_intent_match(self, task_description: str, result: Dict[str, Any], artifacts_paths: List[Path]) -> QualityCheck:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        task_lower = task_description.lower()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        if "—Ä–∞—Å—á—ë—Ç" in task_lower or "—Ñ–æ—Ä–º—É–ª" in task_lower or "–≤—ã—á–∏—Å–ª" in task_lower:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É
            has_calculation = False
            has_html_instead = False
            
            for path in artifacts_paths:
                if path.exists():
                    try:
                        content = path.read_text(encoding='utf-8')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ HTML –≤–º–µ—Å—Ç–æ —Ä–∞—Å—á—ë—Ç–∞
                        if content.startswith("<!DOCTYPE html>"):
                            has_html_instead = True
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
                        math_indicators = ["=", "*", "+", "-", "/", "^", "¬≤", "œÄ", "3.14"]
                        calc_indicators = ["0.28", "0.3", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ"]
                        
                        math_count = sum(1 for indicator in math_indicators if indicator in content)
                        calc_count = sum(1 for indicator in calc_indicators if indicator in content)
                        
                        if math_count >= 3 and calc_count >= 2:
                            has_calculation = True
                            
                    except Exception:
                        pass
            
            if has_html_instead and not has_calculation:
                return QualityCheck(
                    criteria=QualityCriteria.USER_INTENT_MATCH,
                    passed=False,
                    score=0.3,
                    message="‚ùå –°–æ–∑–¥–∞–Ω HTML —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞",
                    details="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª —Ä–∞—Å—á—ë—Ç, –ø–æ–ª—É—á–∏–ª –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É",
                    suggestions=["–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏", "–î–æ–±–∞–≤—å—Ç–µ —á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–æ–≤"]
                )
            
            elif has_calculation:
                return QualityCheck(
                    criteria=QualityCriteria.USER_INTENT_MATCH,
                    passed=True,
                    score=0.9,
                    message="‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞—Å—á—ë—Ç–∞–º–∏",
                    suggestions=[]
                )
        
        # –û–±—â–∏–π —Å–ª—É—á–∞–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        score = 0.7  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        passed = True
        message = "‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        return QualityCheck(
            criteria=QualityCriteria.USER_INTENT_MATCH,
            passed=passed,
            score=score,
            message=message
        )

    async def _check_placeholders(self, artifacts_paths: List[Path]) -> QualityCheck:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥–ª—É—à–µ–∫ –∏ TODO"""
        
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥–ª—É—à–µ–∫ –∏ TODO
        # –≠—Ç–æ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        return QualityCheck(
            criteria=QualityCriteria.NO_PLACEHOLDER,
            passed=True,
            score=1.0,
            message="‚úÖ –ù–µ—Ç –∑–∞–≥–ª—É—à–µ–∫ –∏ TODO"
        )

    async def _check_technical_validity(self, artifacts_paths: List[Path]) -> QualityCheck:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏"""
        
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        # –≠—Ç–æ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        return QualityCheck(
            criteria=QualityCriteria.TECHNICAL_VALIDITY,
            passed=True,
            score=1.0,
            message="‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"
        )

    async def _check_meaningful_content(self, result: Dict[str, Any], artifacts_paths: List[Path]) -> QualityCheck:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        meaningful_score = 0.0
        meaningful_files = 0
        
        for path in artifacts_paths:
            if path.exists():
                try:
                    content = path.read_text(encoding='utf-8')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    content_lower = content.lower()
                    
                    # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (—à–∞–±–ª–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç)
                    template_indicators = [
                        "–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è:", "–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ kittycore", "<!doctype html>",
                        "placeholder", "template", "example"
                    ]
                    
                    # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (—Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)
                    meaningful_indicators = [
                        "—Ñ–æ—Ä–º—É–ª–∞", "—Ä–∞—Å—á—ë—Ç", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ", "–¥–∞–Ω–Ω—ã–µ",
                        "–∞–Ω–∞–ª–∏–∑", "—Ä–µ—à–µ–Ω–∏–µ", "–∫–æ–¥", "—Ñ—É–Ω–∫—Ü–∏—è", "algorithm"
                    ]
                    
                    template_count = sum(1 for indicator in template_indicators if indicator in content_lower)
                    meaningful_count = sum(1 for indicator in meaningful_indicators if indicator in content_lower)
                    
                    # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–º—ã—Å–ª–∞ –∫ —à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç–∏
                    if template_count > meaningful_count:
                        file_score = 0.3  # –ë–æ–ª—å—à–µ —à–∞–±–ª–æ–Ω–∞ —á–µ–º —Å–º—ã—Å–ª–∞
                    elif meaningful_count > 0:
                        file_score = 0.8  # –ï—Å—Ç—å —Å–º—ã—Å–ª–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    else:
                        file_score = 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                    
                    meaningful_score += file_score
                    meaningful_files += 1
                    
                except Exception:
                    pass
        
        if meaningful_files == 0:
            return QualityCheck(
                criteria=QualityCriteria.MEANINGFUL_CONTENT,
                passed=False,
                score=0.0,
                message="‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"
            )
        
        average_score = meaningful_score / meaningful_files
        
        return QualityCheck(
            criteria=QualityCriteria.MEANINGFUL_CONTENT,
            passed=average_score >= 0.6,
            score=average_score,
            message=f"{'‚úÖ' if average_score >= 0.6 else '‚ùå'} –û—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {average_score:.2f}",
            details=f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {meaningful_files} —Ñ–∞–π–ª–æ–≤"
        )

    def _determine_verdict(self, overall_score: float, fatal_issues: List[str]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–¥–∏–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏ –∏ —Ñ–∞—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, —Å–Ω–∏–∂–∞–µ–º –≤–µ—Ä–¥–∏–∫—Ç
        if fatal_issues:
            if overall_score >= 0.8:
                return "GOOD"  # –°–Ω–∏–∂–∞–µ–º —Å EXCELLENT
            elif overall_score >= 0.6:
                return "ACCEPTABLE"  # –°–Ω–∏–∂–∞–µ–º —Å GOOD
            elif overall_score >= 0.4:
                return "POOR"  # –°–Ω–∏–∂–∞–µ–º —Å ACCEPTABLE
            else:
                return "UNACCEPTABLE"
        
        # –ë–µ–∑ —Ñ–∞—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º - –æ–±—ã—á–Ω–∞—è —à–∫–∞–ª–∞
        if overall_score >= 0.9:
            return "EXCELLENT"
        elif overall_score >= 0.7:
            return "GOOD"
        elif overall_score >= 0.5:
            return "ACCEPTABLE"
        elif overall_score >= 0.3:
            return "POOR"
        else:
            return "UNACCEPTABLE"

    async def _check_artifacts(self, artifacts_paths: List[Path]) -> QualityCheck:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"""
        
        if not artifacts_paths:
            return QualityCheck(
                criteria=QualityCriteria.HAS_ARTIFACTS,
                passed=False,
                score=0.0,
                message="‚ùå –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤",
                suggestions=["–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã"]
            )
        
        valid_artifacts = []
        total_size = 0
        
        for path in artifacts_paths:
            if path.exists() and path.is_file():
                size = path.stat().st_size
                if size >= self.min_file_size:
                    valid_artifacts.append(path)
                    total_size += size
        
        if not valid_artifacts:
            return QualityCheck(
                criteria=QualityCriteria.HAS_ARTIFACTS,
                passed=False,
                score=0.2,
                message="‚ùå –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –º–∞–ª—ã –∏–ª–∏ –ø—É—Å—Ç—ã",
                details=f"–ù–∞–π–¥–µ–Ω–æ {len(artifacts_paths)} —Ñ–∞–π–ª–æ–≤, –Ω–æ –≤—Å–µ –º–µ–Ω—å—à–µ {self.min_file_size} –±–∞–π—Ç",
                suggestions=["–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª—ã", "–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª–Ω—ã–µ, –∞ –Ω–µ –∑–∞–≥–æ—Ç–æ–≤–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã"]
            )
        
        score = min(1.0, len(valid_artifacts) / max(len(artifacts_paths), 1))
        
        return QualityCheck(
            criteria=QualityCriteria.HAS_ARTIFACTS,
            passed=score >= 0.7,
            score=score,
            message=f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(valid_artifacts)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ ({total_size} –±–∞–π—Ç)",
            details=f"–§–∞–π–ª—ã: {[p.name for p in valid_artifacts]}",
            suggestions=[] if score >= 0.8 else ["–°–æ–∑–¥–∞–π—Ç–µ –±–æ–ª—å—à–µ —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"]
        )

    async def _check_content_completeness(self, result: Dict[str, Any], artifacts_paths: List[Path]) -> QualityCheck:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        content_indicators = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º result 
        result_text = str(result).lower()
        
        # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–ø–ª–∞–Ω, –∞ –Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        plan_indicators = [
            "–ø–ª–∞–Ω", "–ø–ª–∞–Ω–∏—Ä—É—é", "–Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å", "—Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏", 
            "todo", "to-do", "–ø—Ä–µ–¥–ª–∞–≥–∞—é", "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–æ–∑–¥–∞—Ç—å",
            "—Å–æ–∑–¥–∞–º —Ñ–∞–π–ª", "—Å–æ–∑–¥–∞–º –ø–∞–ø–∫—É", "—Å–æ–∑–¥–∞–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É"
        ]
        
        plan_count = sum(1 for indicator in plan_indicators if indicator in result_text)
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        result_indicators = [
            "—Å–æ–∑–¥–∞–Ω", "—Å–æ–∑–¥–∞–Ω–æ", "–≥–æ—Ç–æ–≤", "–∑–∞–≤–µ—Ä—à—ë–Ω", "—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω",
            "—Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç", "–∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª–µ",
            "—Å–æ—Ö—Ä–∞–Ω—ë–Ω", "–¥–æ—Å—Ç—É–ø–µ–Ω", "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç"
        ]
        
        result_count = sum(1 for indicator in result_indicators if indicator in result_text)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        file_completeness = 0.0
        if artifacts_paths:
            for path in artifacts_paths:
                if path.exists():
                    try:
                        content = path.read_text(encoding='utf-8')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏
                        placeholder_indicators = [
                            "todo", "–∑–∞–≥–ª—É—à–∫–∞", "placeholder", "coming soon",
                            "–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ", "–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ"
                        ]
                        
                        has_placeholders = any(indicator in content.lower() for indicator in placeholder_indicators)
                        
                        if not has_placeholders and len(content.strip()) > 50:
                            file_completeness += 1.0
                            
                    except Exception:
                        pass
            
            file_completeness = file_completeness / len(artifacts_paths)
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã
        if plan_count > result_count and file_completeness < 0.5:
            score = 0.2
            passed = False
            message = "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ –ø–ª–∞–Ω–æ–≤ —á–µ–º –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π"
            suggestions = [
                "–°–æ–∑–¥–∞–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤–º–µ—Å—Ç–æ –ø–ª–∞–Ω–æ–≤ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è",
                "–†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –∞ –Ω–µ –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å",
                "–ó–∞–º–µ–Ω–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
            ]
        elif result_count > 0 and file_completeness >= 0.5:
            score = 0.8 + (file_completeness * 0.2)
            passed = True
            message = f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª–Ω—ã–π –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π ({result_count} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏)"
            suggestions = []
        else:
            score = 0.5
            passed = False
            message = "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
            suggestions = ["–î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"]
        
        return QualityCheck(
            criteria=QualityCriteria.CONTENT_COMPLETENESS,
            passed=passed,
            score=score,
            message=message,
            details=f"–ü–ª–∞–Ω—ã: {plan_count}, –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {result_count}, –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤: {file_completeness:.1f}",
            suggestions=suggestions
        ) 