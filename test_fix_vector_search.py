#!/usr/bin/env python3
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: VectorSearchTool - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

–ü–†–û–ë–õ–ï–ú–ê: search_documents(collection_name=...), –∞ –Ω–µ search_documents(collection=...)
–†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É + —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
"""

import time
import tempfile
import os

def test_vector_search_tool():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ VectorSearchTool"""
    print("üîç –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û: VectorSearchTool")
    
    try:
        from kittycore.tools.vector_search_tool import VectorSearchTool
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è ChromaDB
        temp_dir = tempfile.mkdtemp()
        print(f"üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        tool = VectorSearchTool(
            storage_path=temp_dir,
            embedding_model="all-MiniLM-L6-v2",
            collection_name="test_collection"
        )
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        print("\nüìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        result1 = tool.execute(action="create_collection", collection_name="test_docs")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: success={getattr(result1, 'success', 'N/A')}")
        if hasattr(result1, 'data'):
            print(f"üìä –°—Ç–∞—Ç—É—Å: {result1.data.get('status', 'unknown')}")
        
        # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        test_documents = [
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏",
            "KittyCore - —Å–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–∞—è—Å—è –∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", 
            "Python - –æ—Ç–ª–∏—á–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
        ]
        
        print("\nüìù –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        result2 = tool.execute(
            action="add_documents",
            documents=test_documents,
            collection_name="test_docs",
            metadatas=[{"topic": "ml"}, {"topic": "ai"}, {"topic": "programming"}]
        )
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: success={getattr(result2, 'success', 'N/A')}")
        if hasattr(result2, 'data'):
            print(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {result2.data.get('added_count', 0)}")
        
        # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!)
        print("\nüìù –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        result3 = tool.execute(
            action="search_documents",
            query="–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            collection_name="test_docs",  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä!
            top_k=2
        )
        print(f"‚úÖ –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: success={getattr(result3, 'success', 'N/A')}")
        if hasattr(result3, 'data') and result3.data:
            matches = result3.data.get('matches', [])
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
            if matches:
                best_match = matches[0]
                print(f"ü•á –õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: score={best_match.get('score', 0):.3f}")
        
        # –¢–µ—Å—Ç 4: –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π
        print("\nüìù –¢–µ—Å—Ç 4: –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π")
        result4 = tool.execute(action="list_collections")
        print(f"‚úÖ –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π: success={getattr(result4, 'success', 'N/A')}")
        if hasattr(result4, 'data'):
            collections = result4.data.get('collections', [])
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {len(collections)}")
        
        # –û—á–∏—Å—Ç–∫–∞
        try:
            import shutil
            shutil.rmtree(temp_dir)
            print(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")
        except:
            pass
        
        # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        results = [result1, result2, result3, result4]
        success_count = sum(1 for r in results if hasattr(r, 'success') and r.success)
        success_rate = (success_count / len(results)) * 100
        
        print(f"\nüìä –ò–¢–û–ì–ò: {success_count}/{len(results)} —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate >= 75:
            return f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù: {success_rate:.1f}% —É—Å–ø–µ—Ö"
        else:
            return f"‚ùå –ß–ê–°–¢–ò–ß–ù–û: {success_rate:.1f}% —É—Å–ø–µ—Ö"
            
    except ImportError as e:
        return f"‚ùå –ò–ú–ü–û–†–¢: {e}"
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}"

if __name__ == "__main__":
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï VECTORSEARCHTOOL")
    print("=" * 50)
    
    start_time = time.time()
    result = test_vector_search_tool()
    end_time = time.time()
    
    test_time = (end_time - start_time) * 1000
    print(f"\nüèÅ –†–ï–ó–£–õ–¨–¢–ê–¢: {result} ({test_time:.1f}–º—Å)") 