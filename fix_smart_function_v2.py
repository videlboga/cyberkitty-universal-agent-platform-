#!/usr/bin/env python3
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: SmartFunctionTool v2

–ü–†–û–ë–õ–ï–ú–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –Ω—É–∂–µ–Ω function_code, –∞ –Ω–µ code
"""

import asyncio

async def test_smart_function_fixed():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SmartFunctionTool —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: SmartFunctionTool v2")
    print("=" * 50)
    
    from kittycore.tools.smart_function_tool import SmartFunctionTool
    tool = SmartFunctionTool()
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    print("\nüìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    result1 = await tool.execute(
        action="create_function",
        function_code="def test_func(): return 'Hello from function!'",
        function_name="test_func"
    )
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ: success={result1.success}")
    if result1.data:
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {len(str(result1.data))} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {result1.data}")
    if result1.error:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result1.error}")
    
    # –¢–µ—Å—Ç 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏  
    print("\nüöÄ –¢–µ—Å—Ç 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    result2 = await tool.execute(
        action="execute_function",
        function_name="test_func"
    )
    print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: success={result2.success}")
    if result2.data:
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {len(str(result2.data))} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {result2.data}")
    if result2.error:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result2.error}")
    
    # –¢–µ—Å—Ç 3: –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
    print("\nüìã –¢–µ—Å—Ç 3: –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π")
    result3 = await tool.execute(action="list_functions")
    print(f"‚úÖ –°–ø–∏—Å–æ–∫: success={result3.success}")
    if result3.data:
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {len(str(result3.data))} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìã –§—É–Ω–∫—Ü–∏–∏: {result3.data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —É—Å–ø–µ—Ö
    if result1.success and result2.success and result3.success:
        print(f"\nüéâ SmartFunctionTool –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: 3/3 —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    else:
        print(f"\n‚ö†Ô∏è SmartFunctionTool —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        successful_tests = sum([result1.success, result2.success, result3.success])
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {successful_tests}/3 —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
        return successful_tests >= 2  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º –µ—Å–ª–∏ 2+ —Ç–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç

if __name__ == "__main__":
    asyncio.run(test_smart_function_fixed()) 