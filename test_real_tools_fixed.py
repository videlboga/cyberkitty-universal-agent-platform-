#!/usr/bin/env python3
"""
üîß –†–ï–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–ü—Ä–∏–Ω—Ü–∏–ø—ã: ‚ùå –ù–ï–¢ –ú–û–ö–û–í, ‚úÖ –†–ï–ê–õ–¨–ù–´–ï API –í–´–ó–û–í–´, ‚úÖ –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê, ‚úÖ –ó–ê–ü–ò–°–¨ –í –ü–ê–ú–Ø–¢–¨
"""

import asyncio
import json
import time
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.append(str(Path(__file__).parent / 'kittycore'))

from kittycore.tools.enhanced_web_search_tool import EnhancedWebSearchTool
from kittycore.tools.media_tool import MediaTool
from kittycore.tools.network_tool import NetworkTool
from kittycore.tools.data_analysis_tool import DataAnalysisTool
from kittycore.tools.code_execution_tools import CodeExecutionTool

class RealToolsTesterFixed:
    def __init__(self):
        self.results = []
        self.memory_records = []
        
    def record_memory(self, tool_name: str, action: str, result: dict, notes: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–º—è—Ç—å"""
        self.memory_records.append({
            "tool": tool_name,
            "working_action": action,
            "correct_params": result.get("params", {}),
            "notes": notes,
            "success": result.get("success", False),
            "response_size": len(str(result.get("data", "")))
        })
        
    async def test_enhanced_web_search(self):
        """‚úÖ –†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
        print("üåê –¢–µ—Å—Ç–∏—Ä—É—é enhanced_web_search_tool...")
        start_time = time.time()
        
        tool = EnhancedWebSearchTool()
        
        # –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ KittyCore - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        result = await tool.execute(
            query="KittyCore agentic system github", 
            limit=3
        )
        
        execution_time = time.time() - start_time
        
        # –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        success = False
        data_size = 0
        validation_notes = []
        
        if result.success and result.data:
            data = result.data
            data_size = len(str(data))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if isinstance(data, dict) and "results" in data:
                results_list = data["results"]
                if len(results_list) > 0:
                    validation_notes.append("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
                    success = True
                else:
                    validation_notes.append("‚ùå –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            else:
                validation_notes.append("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
        else:
            validation_notes.append(f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result.error}")
            
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
        self.record_memory(
            "enhanced_web_search", 
            "search", 
            {"success": success, "params": {"query": "string", "limit": "number"}, "data": data_size},
            f"–í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä: {data_size} –±–∞–π—Ç. " + "; ".join(validation_notes)
        )
        
        print(f"   –í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {data_size} –±–∞–π—Ç")
        print(f"   –í–∞–ª–∏–¥–∞—Ü–∏—è: {'; '.join(validation_notes)}")
        return {"tool": "enhanced_web_search", "success": success, "time": execution_time, "size": data_size}
        
    async def test_media_tool(self):
        """üé® –†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç –º–µ–¥–∏–∞-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        print("üé® –¢–µ—Å—Ç–∏—Ä—É—é media_tool...")
        start_time = time.time()
        
        tool = MediaTool()
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ - –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            result = tool.execute(action="get_info")
            
            execution_time = time.time() - start_time
            
            # –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞
            success = False
            data_size = 0
            validation_notes = []
            
            if result.success:
                data = result.data or ""
                data_size = len(str(data))
                
                if data_size > 50:  # –ú–∏–Ω–∏–º—É–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                    validation_notes.append("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ")
                    success = True
                else:
                    validation_notes.append("‚ùå –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö")
            else:
                validation_notes.append(f"‚ùå –û—à–∏–±–∫–∞: {result.error or 'Unknown'}")
                
        except Exception as e:
            execution_time = time.time() - start_time
            success = False
            data_size = 0
            validation_notes = [f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}"]
            
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
        self.record_memory(
            "media_tool",
            "get_info", 
            {"success": success, "params": {"action": "get_info"}, "data": data_size},
            f"–í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä: {data_size} –±–∞–π—Ç. " + "; ".join(validation_notes)
        )
        
        print(f"   –í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {data_size} –±–∞–π—Ç")
        print(f"   –í–∞–ª–∏–¥–∞—Ü–∏—è: {'; '.join(validation_notes)}")
        return {"tool": "media_tool", "success": success, "time": execution_time, "size": data_size}
        
    async def test_network_tool(self):
        """üåê –†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        print("üåê –¢–µ—Å—Ç–∏—Ä—É—é network_tool...")
        start_time = time.time()
        
        tool = NetworkTool()
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π ping - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            result = await tool.execute(
                action="ping",
                target="google.com",
                count=1
            )
            
            execution_time = time.time() - start_time
            
            # –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞
            success = False
            data_size = 0
            validation_notes = []
            
            if result.success:
                data = result.data or ""
                data_size = len(str(data))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π ping —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                data_str = str(data).lower()
                if "ms" in data_str or "time=" in data_str or "ping" in data_str:
                    validation_notes.append("‚úÖ –†–µ–∞–ª—å–Ω—ã–π ping —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    success = True
                else:
                    validation_notes.append(f"‚ùå –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {str(data)[:100]}")
            else:
                validation_notes.append(f"‚ùå –û—à–∏–±–∫–∞: {result.error or 'Unknown'}")
                
        except Exception as e:
            execution_time = time.time() - start_time
            success = False
            data_size = 0
            validation_notes = [f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}"]
            
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
        self.record_memory(
            "network_tool",
            "ping",
            {"success": success, "params": {"action": "ping", "target": "string", "count": "number"}, "data": data_size},
            f"–í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä: {data_size} –±–∞–π—Ç. " + "; ".join(validation_notes)
        )
        
        print(f"   –í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {data_size} –±–∞–π—Ç")
        print(f"   –í–∞–ª–∏–¥–∞—Ü–∏—è: {'; '.join(validation_notes)}")
        return {"tool": "network_tool", "success": success, "time": execution_time, "size": data_size}
        
    async def test_code_execution(self):
        """üíª –†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞"""
        print("üíª –¢–µ—Å—Ç–∏—Ä—É—é code_execution_tool...")
        start_time = time.time()
        
        tool = CodeExecutionTool()
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π Python –∫–æ–¥ - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            result = tool.execute(
                action="execute",
                code="print('KittyCore Test'); result = 2 + 2; print(f'2 + 2 = {result}')",
                language="python"
            )
            
            execution_time = time.time() - start_time
            
            # –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞
            success = False
            data_size = 0
            validation_notes = []
            
            if result.success:
                output = result.data or ""
                data_size = len(str(output))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ —Ä–µ–∞–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è
                output_str = str(output)
                if "KittyCore Test" in output_str and "2 + 2 = 4" in output_str:
                    validation_notes.append("‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    success = True
                else:
                    validation_notes.append(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥: {output_str[:100]}")
            else:
                validation_notes.append(f"‚ùå –û—à–∏–±–∫–∞: {result.error or 'Unknown'}")
                
        except Exception as e:
            execution_time = time.time() - start_time
            success = False
            data_size = 0
            validation_notes = [f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}"]
            
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
        self.record_memory(
            "code_execution_tool",
            "execute",
            {"success": success, "params": {"action": "execute", "code": "string", "language": "python"}, "data": data_size},
            f"–í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä: {data_size} –±–∞–π—Ç. " + "; ".join(validation_notes)
        )
        
        print(f"   –í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {data_size} –±–∞–π—Ç")
        print(f"   –í–∞–ª–∏–¥–∞—Ü–∏—è: {'; '.join(validation_notes)}")
        return {"tool": "code_execution", "success": success, "time": execution_time, "size": data_size}
        
    async def test_data_analysis(self):
        """üìä –†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("üìä –¢–µ—Å—Ç–∏—Ä—É—é data_analysis_tool...")
        start_time = time.time()
        
        tool = DataAnalysisTool()
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            test_data = [
                {"name": "Agent1", "performance": 0.85, "tasks": 10},
                {"name": "Agent2", "performance": 0.92, "tasks": 15},
                {"name": "Agent3", "performance": 0.78, "tasks": 8}
            ]
            
            result = tool.execute(
                action="analyze_data",
                data=test_data
            )
            
            execution_time = time.time() - start_time
            
            # –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞
            success = False
            data_size = 0
            validation_notes = []
            
            if result.success:
                analysis = result.data or ""
                data_size = len(str(analysis))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                analysis_str = str(analysis).lower()
                if any(word in analysis_str for word in ["mean", "average", "std", "max", "min", "count", "data"]):
                    validation_notes.append("‚úÖ –†–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
                    success = True
                else:
                    validation_notes.append(f"‚ùå –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {str(analysis)[:100]}")
            else:
                validation_notes.append(f"‚ùå –û—à–∏–±–∫–∞: {result.error or 'Unknown'}")
                
        except Exception as e:
            execution_time = time.time() - start_time
            success = False
            data_size = 0
            validation_notes = [f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}"]
            
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
        self.record_memory(
            "data_analysis_tool",
            "analyze_data",
            {"success": success, "params": {"action": "analyze_data", "data": "list"}, "data": data_size},
            f"–í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä: {data_size} –±–∞–π—Ç. " + "; ".join(validation_notes)
        )
        
        print(f"   –í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {data_size} –±–∞–π—Ç")
        print(f"   –í–∞–ª–∏–¥–∞—Ü–∏—è: {'; '.join(validation_notes)}")
        return {"tool": "data_analysis", "success": success, "time": execution_time, "size": data_size}
        
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –†–ï–ê–õ–¨–ù–´–• –¢–ï–°–¢–û–í –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0")
        print("=" * 60)
        
        tests = [
            self.test_enhanced_web_search,
            self.test_media_tool,
            self.test_network_tool,
            self.test_code_execution,
            self.test_data_analysis
        ]
        
        total_start = time.time()
        
        for test in tests:
            try:
                result = await test()
                self.results.append(result)
            except Exception as e:
                print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
                self.results.append({"tool": test.__name__, "success": False, "error": str(e)})
            
            print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            
        total_time = time.time() - total_start
        
        # –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢
        print("=" * 60)
        print("üìà –ò–¢–û–ì–ò –†–ï–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        
        successful = sum(1 for r in self.results if r.get("success", False))
        total = len(self.results)
        success_rate = (successful / total * 100) if total > 0 else 0
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful}/{total} ({success_rate:.1f}%)")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å")
        print(f"üíæ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –ø–∞–º—è—Ç—å: {len(self.memory_records)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
        for result in self.results:
            status = "‚úÖ" if result.get("success") else "‚ùå"
            tool = result.get("tool", "unknown")
            time_taken = result.get("time", 0)
            size = result.get("size", 0)
            print(f"{status} {tool}: {time_taken:.1f}—Å, {size} –±–∞–π—Ç")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_results()
        
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("test_real_tools_fixed", exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open("test_real_tools_fixed/tools_results.json", "w", encoding="utf-8") as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏
        with open("test_real_tools_fixed/memory_records.json", "w", encoding="utf-8") as f:
            json.dump(self.memory_records, f, indent=2, ensure_ascii=False)
            
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_real_tools_fixed/")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = RealToolsTesterFixed()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main()) 