#!/usr/bin/env python3
"""
üë®‚Äçüç≥ –ê–î–ê–ü–¢–ò–í–ù–´–ô –ö–£–õ–ò–ù–ê–†–ù–´–ô –ê–ì–ï–ù–¢
–ê–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç—Å—è –≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–∫—Ü–∏–π –¥–µ–≥—É—Å—Ç–∞—Ç–æ—Ä–æ–≤
"""

import asyncio
import random
from typing import List, Dict, Any
from dataclasses import dataclass
from reactive_benchmark_concept import Recipe, TasterFeedback, CookingAttempt, VirtualTaster

@dataclass
class CookingMemory:
    """–ü–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–∞ –æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏"""
    successful_recipes: List[Recipe]
    failed_recipes: List[Recipe]
    ingredient_scores: Dict[str, float]  # –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç -> —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
    technique_scores: Dict[str, float]   # —Ç–µ—Ö–Ω–∏–∫–∞ -> —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
    taster_preferences: Dict[str, Dict[str, float]]  # –¥–µ–≥—É—Å—Ç–∞—Ç–æ—Ä -> –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è

class AdaptiveCookingAgent:
    """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∞–≥–µ–Ω—Ç"""
    
    def __init__(self, agent_name: str):
        self.agent_name = agent_name
        self.memory = CookingMemory(
            successful_recipes=[],
            failed_recipes=[],
            ingredient_scores={},
            technique_scores={},
            taster_preferences={}
        )
        self.attempt_count = 0
    
    async def cook_dish(self, dish_request: str, tasters: List[VirtualTaster]) -> CookingAttempt:
        """–ì–æ—Ç–æ–≤–∏—Ç –±–ª—é–¥–æ –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"""
        
        self.attempt_count += 1
        
        # 1. –°–æ–∑–¥–∞—ë–º —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–∞–º—è—Ç–∏
        recipe = await self._create_recipe(dish_request)
        
        print(f"üë®‚Äçüç≥ {self.agent_name} –≥–æ—Ç–æ–≤–∏—Ç: {recipe.name}")
        print(f"   –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {recipe.ingredients}")
        print(f"   –¢–µ—Ö–Ω–∏–∫–∞: {recipe.technique}")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –¥–µ–≥—É—Å—Ç–∞—Ç–æ—Ä–æ–≤
        feedbacks = []
        for taster in tasters:
            feedback = taster.taste_dish(recipe)
            feedbacks.append(feedback)
            print(f"   {feedback.taster_id}: {feedback.reaction.value} ({feedback.score}/5) - {feedback.comment}")
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        avg_score = sum(f.score for f in feedbacks) / len(feedbacks)
        success = avg_score >= 4.0
        
        attempt = CookingAttempt(
            attempt_id=f"attempt_{self.attempt_count}",
            recipe=recipe,
            feedbacks=feedbacks,
            avg_score=avg_score,
            success=success
        )
        
        # 4. –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å
        await self._update_memory(attempt)
        
        print(f"   üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_score:.1f}/5.0 ({'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –ù–µ—É–¥–∞—á–∞'})")
        
        return attempt
    
    async def _create_recipe(self, dish_request: str) -> Recipe:
        """–°–æ–∑–¥–∞—ë—Ç —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        
        # –ë–∞–∑–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–ª—é–¥
        base_recipes = {
            "–ø–∞—Å—Ç–∞": {
                "ingredients": {"–º–∞–∫–∞—Ä–æ–Ω—ã": 200, "—Ç–æ–º–∞—Ç—ã": 150, "—Å—ã—Ä": 50, "–æ–ª–∏–≤–∫–æ–≤–æ–µ_–º–∞—Å–ª–æ": 30},
                "technique": "–≤–∞—Ä–∫–∞",
                "time": 15,
                "temp": 100
            },
            "—Å—Ç–µ–π–∫": {
                "ingredients": {"–≥–æ–≤—è–¥–∏–Ω–∞": 300, "—Å–æ–ª—å": 5, "–ø–µ—Ä–µ—Ü": 3, "–º–∞—Å–ª–æ": 20},
                "technique": "–∂–∞—Ä–∫–∞", 
                "time": 10,
                "temp": 200
            },
            "—Å–∞–ª–∞—Ç": {
                "ingredients": {"—Å–∞–ª–∞—Ç": 100, "–ø–æ–º–∏–¥–æ—Ä—ã": 80, "–æ–≥—É—Ä—Ü—ã": 60, "–æ–ª–∏–≤–∫–æ–≤–æ–µ_–º–∞—Å–ª–æ": 20},
                "technique": "—Å–º–µ—à–∏–≤–∞–Ω–∏–µ",
                "time": 5,
                "temp": 20
            },
            "—Å—É–ø": {
                "ingredients": {"–±—É–ª—å–æ–Ω": 500, "–æ–≤–æ—â–∏": 200, "–º—è—Å–æ": 150, "—Å–æ–ª—å": 8},
                "technique": "–≤–∞—Ä–∫–∞",
                "time": 30,
                "temp": 90
            }
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–ª—é–¥–∞
        dish_type = "–ø–∞—Å—Ç–∞"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for dish in base_recipes.keys():
            if dish in dish_request.lower():
                dish_type = dish
                break
        
        base = base_recipes[dish_type]
        ingredients = base["ingredients"].copy()
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–º—è—Ç–∏
        if self.memory.ingredient_scores:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            for ingredient, amount in ingredients.items():
                if ingredient in self.memory.ingredient_scores:
                    score = self.memory.ingredient_scores[ingredient]
                    if score > 3.5:  # —Ö–æ—Ä–æ—à–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
                        ingredients[ingredient] = amount * 1.2
                    elif score < 2.5:  # –ø–ª–æ—Ö–æ–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
                        ingredients[ingredient] = amount * 0.8
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
        technique = base["technique"]
        if self.memory.technique_scores:
            best_technique = max(self.memory.technique_scores.items(), key=lambda x: x[1])
            if best_technique[1] > 3.5:
                technique = best_technique[0]
        
        return Recipe(
            name=f"{dish_request}_{self.attempt_count}",
            ingredients=ingredients,
            cooking_time=base["time"],
            temperature=base["temp"],
            technique=technique
        )
    
    async def _update_memory(self, attempt: CookingAttempt):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        
        recipe = attempt.recipe
        avg_score = attempt.avg_score
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö/–Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
        if attempt.success:
            self.memory.successful_recipes.append(recipe)
            self.memory.successful_recipes = self.memory.successful_recipes[-5:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
        else:
            self.memory.failed_recipes.append(recipe)
            self.memory.failed_recipes = self.memory.failed_recipes[-5:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        for ingredient in recipe.ingredients:
            if ingredient not in self.memory.ingredient_scores:
                self.memory.ingredient_scores[ingredient] = avg_score
            else:
                # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
                current = self.memory.ingredient_scores[ingredient]
                self.memory.ingredient_scores[ingredient] = (current + avg_score) / 2
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏ —Ç–µ—Ö–Ω–∏–∫
        technique = recipe.technique
        if technique not in self.memory.technique_scores:
            self.memory.technique_scores[technique] = avg_score
        else:
            current = self.memory.technique_scores[technique]
            self.memory.technique_scores[technique] = (current + avg_score) / 2
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–µ–≥—É—Å—Ç–∞—Ç–æ—Ä–æ–≤
        for feedback in attempt.feedbacks:
            taster_id = feedback.taster_id
            if taster_id not in self.memory.taster_preferences:
                self.memory.taster_preferences[taster_id] = {}
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
            for ingredient in recipe.ingredients:
                if ingredient not in self.memory.taster_preferences[taster_id]:
                    self.memory.taster_preferences[taster_id][ingredient] = feedback.score
                else:
                    current = self.memory.taster_preferences[taster_id][ingredient]
                    self.memory.taster_preferences[taster_id][ingredient] = (current + feedback.score) / 2
    
    def get_learning_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è"""
        
        return {
            "total_attempts": self.attempt_count,
            "successful_recipes": len(self.memory.successful_recipes),
            "failed_recipes": len(self.memory.failed_recipes),
            "known_ingredients": len(self.memory.ingredient_scores),
            "known_techniques": len(self.memory.technique_scores),
            "known_tasters": len(self.memory.taster_preferences),
            "best_ingredients": sorted(
                self.memory.ingredient_scores.items(), 
                key=lambda x: x[1], 
                reverse=True
            )[:3],
            "best_techniques": sorted(
                self.memory.technique_scores.items(),
                key=lambda x: x[1],
                reverse=True
            )[:3]
        }

print("üë®‚Äçüç≥ –ê–î–ê–ü–¢–ò–í–ù–´–ô –ö–£–õ–ò–ù–ê–†–ù–´–ô –ê–ì–ï–ù–¢ –ì–û–¢–û–í!")
print("üß† –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
print("   - –°–æ–∑–¥–∞—ë—Ç —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–æ–≤")
print("   - –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
print("   - –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–µ–≥—É—Å—Ç–∞—Ç–æ—Ä–æ–≤")
print("   - –£–ª—É—á—à–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º") 