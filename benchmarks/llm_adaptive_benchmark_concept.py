#!/usr/bin/env python3
"""
üß† –ê–î–ê–ü–¢–ò–í–ù–´–ô LLM-–ë–ï–ù–ß–ú–ê–†–ö - –ß–ê–°–¢–¨ 1: –ö–û–ù–¶–ï–ü–¶–ò–Ø
–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∑–∞—Ä–∞–Ω–µ–µ –º–µ—Ç—Ä–∏–∫–∞–º–∏

–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ò–ù–¶–ò–ü–´:
1. üéØ –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ - –∑–∞–¥–∞—á–∏ —É—Å–ª–æ–∂–Ω—è—é—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–∞
2. üîç –°–ö–†–´–¢–´–ï –ú–ï–¢–†–ò–ö–ò - –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω—ã –∑–∞—Ä–∞–Ω–µ–µ
3. üåê –ú–£–õ–¨–¢–ò–ú–û–î–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê - —Ç–µ–∫—Å—Ç, –∫–æ–¥, –ª–æ–≥–∏–∫–∞, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, —ç—Ç–∏–∫–∞
4. üåç –†–ï–ê–õ–¨–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò - –∑–∞–¥–∞—á–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞, –∞ –Ω–µ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ
5. üîÑ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –ê–î–ê–ü–¢–ê–¶–ò–Ø - –±–µ–Ω—á–º–∞—Ä–∫ —É—á–∏—Ç—Å—è –∏ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç
"""

import random
import time
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from enum import Enum

class TaskComplexity(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á - –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –¥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö"""
    TRIVIAL = 1      # –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ (—É—Å–ø–µ—Ö 90%+)
    BASIC = 2        # –ë–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (—É—Å–ø–µ—Ö 70-90%)
    INTERMEDIATE = 3 # –°—Ä–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—É—Å–ø–µ—Ö 50-70%)
    ADVANCED = 4     # –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—É—Å–ø–µ—Ö 30-50%)
    EXPERT = 5       # –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—É—Å–ø–µ—Ö 10-30%)
    IMPOSSIBLE = 6   # "–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ" –∑–∞–¥–∞—á–∏ (—É—Å–ø–µ—Ö <10%)

class TaskDomain(Enum):
    """–î–æ–º–µ–Ω—ã –∑–∞–¥–∞—á - —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"""
    REASONING = "reasoning"           # –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ
    CREATIVITY = "creativity"         # –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    ETHICS = "ethics"                # –≠—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏–ª–µ–º–º—ã
    CODING = "coding"                # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    COMMUNICATION = "communication"   # –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è
    PROBLEM_SOLVING = "problem_solving" # –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
    ADAPTATION = "adaptation"         # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –Ω–æ–≤–æ–º—É

@dataclass
class AdaptiveTask:
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å —Å–∫—Ä—ã—Ç—ã–º–∏ —Ü–µ–ª—è–º–∏"""
    id: str
    domain: TaskDomain
    complexity: TaskComplexity
    description: str
    context: Dict[str, Any]
    hidden_objectives: List[str]  # –°–∫—Ä—ã—Ç—ã–µ —Ü–µ–ª–∏ –æ—Ü–µ–Ω–∫–∏
    time_limit: Optional[int] = None
    requires_llm: bool = True

class TaskGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
    
    def __init__(self):
        self.task_templates = {
            TaskDomain.REASONING: [
                {
                    "template": "üïµÔ∏è –î–µ—Ç–µ–∫—Ç–∏–≤ —Ä–∞—Å—Å–ª–µ–¥—É–µ—Ç –¥–µ–ª–æ —Å {num_suspects} –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–º–∏. {evidence}. –ö—Ç–æ –≤–∏–Ω–æ–≤–µ–Ω –∏ –ø–æ—á–µ–º—É?",
                    "hidden_objectives": ["–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞", "–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–≥–æ", "—Ä–∞–±–æ—Ç–∞ —Å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è–º–∏"],
                    "variables": {
                        "num_suspects": [3, 4, 5, 7, 10, 15],
                        "evidence": [
                            "–ù–∞–π–¥–µ–Ω—ã –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ –æ—Ä—É–¥–∏–∏ —É–±–∏–π—Å—Ç–≤–∞",
                            "–°–≤–∏–¥–µ—Ç–µ–ª—å –≤–∏–¥–µ–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é —Ñ–∏–≥—É—Ä—É –≤ 23:30",
                            "–ö–∞–º–µ—Ä—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ —Å—Ç—Ä–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã—Ö",
                            "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ç—Ä—ë—Ö —Å–≤–∏–¥–µ—Ç–µ–ª–µ–π",
                            "–ù–∞–π–¥–µ–Ω—ã —É–ª–∏–∫–∏, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –¥–≤—É—Ö —Ä–∞–∑–Ω—ã—Ö –ª—é–¥–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
                        ]
                    }
                },
                {
                    "template": "üß© –í –≥–æ—Ä–æ–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {events}. –ù–∞–π–¥–∏—Ç–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å –∏ –ø—Ä–µ–¥—Å–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ.",
                    "hidden_objectives": ["—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤", "—ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è", "—Å–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"],
                    "variables": {
                        "events": [
                            "–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø—Ä–æ–ø–∞–¥–∞—é—Ç –∫—Ä–∞—Å–Ω—ã–µ –º–∞—à–∏–Ω—ã",
                            "–≤ –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ –≤—Å–µ –∫–æ—Ç—ã –º—è—É–∫–∞—é—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ 3:33",
                            "–∫–∞–∂–¥–æ–µ 7-–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–∞ 77 –º–∏–Ω—É—Ç",
                            "–ª—é–¥–∏ –≤ —Å–∏–Ω–∏—Ö –∫—É—Ä—Ç–∫–∞—Ö –∑–∞–±—ã–≤–∞—é—Ç —Å–≤–æ–∏ –∏–º–µ–Ω–∞ –Ω–∞ —á–∞—Å"
                        ]
                    }
                }
            ],
            TaskDomain.CREATIVITY: [
                {
                    "template": "‚ú® –°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—Å–∫–∞–∑ –æ {protagonist} –≤ –º–∏—Ä–µ, –≥–¥–µ {world_rule}. –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {style}.",
                    "hidden_objectives": ["–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å", "—Å–≤—è–∑–Ω–æ—Å—Ç—å —Å—é–∂–µ—Ç–∞", "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ"],
                    "variables": {
                        "protagonist": ["—Ä–æ–±–æ—Ç–µ-–ø–æ—ç—Ç–µ", "–∫–æ—à–∫–µ-–¥–µ—Ç–µ–∫—Ç–∏–≤–µ", "–¥–µ—Ä–µ–≤–µ-—Ñ–∏–ª–æ—Å–æ—Ñ–µ", "–æ–±–ª–∞–∫–µ-–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–µ"],
                        "world_rule": ["–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–æ–±–æ—Ä–æ—Ç", "—ç–º–æ—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã", "–≤—Ä–µ–º—è —Ç–µ—á—ë—Ç —Å–ª—É—á–∞–π–Ω–æ"],
                        "style": ["—Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π", "–∑–∞–≥–∞–¥–æ—á–Ω–æ–π", "—é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π", "—Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π"]
                    }
                }
            ],
            TaskDomain.ETHICS: [
                {
                    "template": "‚öñÔ∏è –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å: {choice_a} –∏–ª–∏ {choice_b}. –ö–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ?",
                    "hidden_objectives": ["—ç—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ", "—É—á—ë—Ç –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω", "–ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–æ—Å—Ç—å"],
                    "variables": {
                        "choice_a": ["—Å–ø–∞—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞", "–∑–∞—â–∏—Ç–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞", "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Ä–æ–≥–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"],
                        "choice_b": ["—Å–ø–∞—Å—Ç–∏ —Ç—Ä—ë—Ö –ø–æ–∂–∏–ª—ã—Ö –ª—é–¥–µ–π", "–∑–∞—â–∏—Ç–∏—Ç—å –ø–µ—à–µ—Ö–æ–¥–æ–≤", "–º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É—â–µ—Ä–±"]
                    }
                }
            ]
        }
    
    def generate_task(self, domain: TaskDomain, complexity: TaskComplexity, 
                     agent_history: Optional[Dict] = None) -> AdaptiveTask:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥ –∏—Å—Ç–æ—Ä–∏—é –∞–≥–µ–Ω—Ç–∞
        if agent_history:
            complexity = self._adapt_complexity(complexity, agent_history, domain)
        
        # –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
        templates = self.task_templates.get(domain, [])
        if not templates:
            return self._create_fallback_task(domain, complexity)
        
        template = random.choice(templates)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        variables = {}
        for var_name, var_options in template["variables"].items():
            if isinstance(var_options, list):
                # –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä
                complexity_index = min(complexity.value - 1, len(var_options) - 1)
                variables[var_name] = var_options[complexity_index]
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
        description = template["template"].format(**variables)
        
        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        time_limits = {
            TaskComplexity.TRIVIAL: 120,     # 2 –º–∏–Ω—É—Ç—ã
            TaskComplexity.BASIC: 300,       # 5 –º–∏–Ω—É—Ç
            TaskComplexity.INTERMEDIATE: 600, # 10 –º–∏–Ω—É—Ç
            TaskComplexity.ADVANCED: 900,    # 15 –º–∏–Ω—É—Ç
            TaskComplexity.EXPERT: 1800,     # 30 –º–∏–Ω—É—Ç
            TaskComplexity.IMPOSSIBLE: None   # –ë–µ–∑ –ª–∏–º–∏—Ç–∞
        }
        
        return AdaptiveTask(
            id=f"{domain.value}_{complexity.value}_{int(time.time())}",
            domain=domain,
            complexity=complexity,
            description=description,
            context={
                "variables": variables,
                "complexity_level": complexity.value,
                "generated_at": time.time()
            },
            hidden_objectives=template["hidden_objectives"],
            time_limit=time_limits[complexity]
        )
    
    def _adapt_complexity(self, base_complexity: TaskComplexity, 
                         agent_history: Dict, domain: TaskDomain) -> TaskComplexity:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥ –∏—Å—Ç–æ—Ä–∏—é –∞–≥–µ–Ω—Ç–∞"""
        domain_stats = agent_history.get(domain.value, {})
        success_rate = domain_stats.get("success_rate", 0.5)
        
        # –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º —Ö–æ—Ä–æ—à–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è - —É—Å–ª–æ–∂–Ω—è–µ–º
        if success_rate > 0.8:
            new_complexity = min(base_complexity.value + 1, TaskComplexity.IMPOSSIBLE.value)
            print(f"üî• –ê–≥–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º —Ö–æ—Ä–æ—à! –£—Å–ª–æ–∂–Ω—è–µ–º {domain.value}: {base_complexity.name} ‚Üí {TaskComplexity(new_complexity).name}")
        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –ø–ª–æ—Ö–æ - —É–ø—Ä–æ—â–∞–µ–º
        elif success_rate < 0.3:
            new_complexity = max(base_complexity.value - 1, TaskComplexity.TRIVIAL.value)
            print(f"üí° –ê–≥–µ–Ω—Ç –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. –£–ø—Ä–æ—â–∞–µ–º {domain.value}: {base_complexity.name} ‚Üí {TaskComplexity(new_complexity).name}")
        else:
            new_complexity = base_complexity.value
        
        return TaskComplexity(new_complexity)
    
    def _create_fallback_task(self, domain: TaskDomain, complexity: TaskComplexity) -> AdaptiveTask:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∞—Å–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        return AdaptiveTask(
            id=f"fallback_{domain.value}_{complexity.value}",
            domain=domain,
            complexity=complexity,
            description=f"–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É —É—Ä–æ–≤–Ω—è {complexity.name} –≤ –æ–±–ª–∞—Å—Ç–∏ {domain.value}",
            context={"fallback": True},
            hidden_objectives=["–±–∞–∑–æ–≤–∞—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å"],
            time_limit=300
        )

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
if __name__ == "__main__":
    print("üß† –ê–î–ê–ü–¢–ò–í–ù–´–ô LLM-–ë–ï–ù–ß–ú–ê–†–ö - –ö–û–ù–¶–ï–ü–¶–ò–Ø")
    print("=" * 60)
    
    generator = TaskGenerator()
    
    print("\nüìã –î–û–ú–ï–ù–´ –ó–ê–î–ê–ß:")
    for domain in TaskDomain:
        print(f"  ‚Ä¢ {domain.value}: {domain.name}")
    
    print("\nüìä –£–†–û–í–ù–ò –°–õ–û–ñ–ù–û–°–¢–ò:")
    for complexity in TaskComplexity:
        print(f"  ‚Ä¢ {complexity.name} (—É—Ä–æ–≤–µ–Ω—å {complexity.value})")
    
    print("\nüéØ –ü–†–ò–ú–ï–†–´ –ó–ê–î–ê–ß:")
    print("-" * 40)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á
    test_domains = [TaskDomain.REASONING, TaskDomain.CREATIVITY, TaskDomain.ETHICS]
    test_complexities = [TaskComplexity.BASIC, TaskComplexity.ADVANCED]
    
    for domain in test_domains:
        for complexity in test_complexities:
            task = generator.generate_task(domain, complexity)
            print(f"\nüî∏ {domain.value.upper()} ({complexity.name})")
            print(f"   –ó–∞–¥–∞—á–∞: {task.description}")
            print(f"   –°–∫—Ä—ã—Ç—ã–µ —Ü–µ–ª–∏: {', '.join(task.hidden_objectives)}")
            if task.time_limit:
                print(f"   ‚è∞ –õ–∏–º–∏—Ç: {task.time_limit//60} –º–∏–Ω")
    
    print(f"\n‚úÖ –ö–æ–Ω—Ü–µ–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞! –°–æ–∑–¥–∞–Ω–æ {len(test_domains) * len(test_complexities)} –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–¥–∞—á.")
    print("üîÑ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–∫—Ä—ã—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫...") 