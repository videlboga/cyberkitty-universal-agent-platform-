#!/usr/bin/env python3
"""
ü§ù MULTI-AGENT COLLABORATION BENCHMARK –¥–ª—è KittyCore 3.0
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—É—é —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–æ–≤, memory sharing –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é
"""

import asyncio
import sys
import os
import time
import json
from datetime import datetime
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from kittycore.core.orchestrator import OrchestratorAgent

class MultiAgentBenchmark:
    """–ë–µ–Ω—á–º–∞—Ä–∫ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.results = []
        
    async def run_benchmark(self):
        """–ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
        print("ü§ù MULTI-AGENT COLLABORATION BENCHMARK")
        print("=" * 50)
        
        # –ó–∞–¥–∞—á–∏ —Ç—Ä–µ–±—É—é—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
        collaboration_tasks = [
            {
                'name': '–ü—Ä–æ–µ–∫—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞',
                'description': '–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –¥–∏–∑–∞–π–Ω UI/UX, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –ø–ª–∞–Ω –∏ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å. –ö–∞–∂–¥—ã–π –∞—Å–ø–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –¥–æ–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–æ–π.',
                'required_agents': ['technical', 'design', 'marketing', 'business'],
                'complexity': 'very_high'
            },
            {
                'name': '–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞',
                'description': '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ SaaS –ø—Ä–æ–¥—É–∫—Ç–∞: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞, MVP –ø–ª–∞–Ω, —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä—ã–Ω–æ–∫.',
                'required_agents': ['research', 'product', 'pricing', 'marketing'],
                'complexity': 'high'
            },
            {
                'name': '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —Å—Ä–µ–¥—ã',
                'description': '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Å—Ñ–µ—Ä–µ EdTech: –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ —Ñ–∏—á–∏, —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ SWOT-–∞–Ω–∞–ª–∏–∑.',
                'required_agents': ['analyst', 'market_research', 'product_comparison'],
                'complexity': 'medium'
            }
        ]
        
        total_score = 0
        
        for i, task in enumerate(collaboration_tasks, 1):
            print(f"\nüéØ –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ {i}/{len(collaboration_tasks)}: {task['name']}")
            print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}")
            print(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≥–µ–Ω—Ç–æ–≤: {len(task['required_agents'])}")
            
            result = await self.execute_collaboration_task(task)
            self.results.append(result)
            total_score += result['score']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤
            coordination_score = self.evaluate_agent_coordination(result)
            memory_sharing_score = self.evaluate_memory_sharing(result)
            
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏: {result['score']:.1f}/1.0")
            print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {coordination_score:.1f}/1.0")
            print(f"–û–±–º–µ–Ω –ø–∞–º—è—Ç—å—é: {memory_sharing_score:.1f}/1.0")
            
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success_rate = total_score / len(collaboration_tasks) * 100
        print(f"\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–õ–õ–ï–ö–¢–ò–í–ù–û–ô –†–ê–ë–û–¢–´")
        print("=" * 50)
        print(f"–û–±—â–∏–π —Å—á—ë—Ç: {total_score:.1f}/{len(collaboration_tasks)} ({success_rate:.1f}%)")
        
        await self.save_results()
        
        return {
            'score': total_score,
            'total': len(collaboration_tasks),
            'success_rate': success_rate
        }
    
    async def execute_collaboration_task(self, task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        start_time = time.time()
        
        try:
            orchestrator = OrchestratorAgent()
            
            # –ü–æ–¥—á—ë—Ä–∫–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            enhanced_description = f"""
            {task['description']}
            
            –í–ê–ñ–ù–û: –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏–∑ {len(task['required_agents'])} —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤.
            –ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏: {', '.join(task['required_agents'])}.
            –ê–≥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è.
            """
            
            result = await orchestrator.solve_task(enhanced_description)
            
            execution_time = time.time() - start_time
            score = self.evaluate_result(result)
            
            # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            clean_result = self._clean_result_for_json(result)
            
            return {
                'task': task['name'],
                'complexity': task['complexity'],
                'score': score,
                'time': execution_time,
                'result': clean_result,
                'agents_created': result.get('agents_created', 0),
                'files_created': len(result.get('created_files', []))
            }
            
        except Exception as e:
            execution_time = time.time() - start_time
            print(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
            
            return {
                'task': task['name'],
                'complexity': task['complexity'],
                'score': 0,
                'time': execution_time,
                'error': str(e)
            }
    
    def evaluate_result(self, result):
        """–û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        score = 0.0
        
        # –ë–∞–∑–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        if result.get('status') == 'completed':
            score += 0.3
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        agents_created = result.get('agents_created', 0)
        if agents_created >= 3:
            score += 0.3
        elif agents_created >= 2:
            score += 0.2
        elif agents_created >= 1:
            score += 0.1
        
        # –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏—è
        solution = result.get('solution', '')
        if len(solution) > 200:
            score += 0.2
        
        # –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        if result.get('created_files'):
            score += 0.2
        
        return min(score, 1.0)
    
    def evaluate_agent_coordination(self, result):
        """–û—Ü–µ–Ω–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        score = 0.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rich_reporting –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        if 'rich_reporting' in result:
            score += 0.3
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        agents_created = result.get('agents_created', 0)
        if agents_created >= 3:
            score += 0.4
        elif agents_created >= 2:
            score += 0.2
        
        # –ù–∞–ª–∏—á–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤ —Ä–µ—à–µ–Ω–∏–∏
        solution = str(result.get('solution', '')).lower()
        coordination_keywords = ['–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è', '–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ', '–∫–æ–º–∞–Ω–¥–∞', '—Å–æ–≤–º–µ—Å—Ç–Ω–æ', '–∫–æ–ª–ª–µ–∫—Ç–∏–≤']
        if any(keyword in solution for keyword in coordination_keywords):
            score += 0.3
        
        return min(score, 1.0)
    
    def evaluate_memory_sharing(self, result):
        """–û—Ü–µ–Ω–∫–∞ –æ–±–º–µ–Ω–∞ –ø–∞–º—è—Ç—å—é –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        score = 0.0
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å rich reporting - –µ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        if 'rich_reporting' in result:
            rich_data = result['rich_reporting']
            if 'execution_id' in rich_data:
                score += 0.4
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–≤—è–∑–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è
        solution = result.get('solution', '')
        if len(solution) > 300:  # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            score += 0.3
        
        # –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–º–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        if '–∏–Ω—Ñ–æ—Ä–º–∞—Ü' in solution.lower() or '–¥–∞–Ω–Ω—ã' in solution.lower():
            score += 0.3
        
        return min(score, 1.0)
    
    def _clean_result_for_json(self, result):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è JSON"""
        from datetime import datetime
        
        if isinstance(result, dict):
            cleaned = {}
            for key, value in result.items():
                if hasattr(value, '__dict__') and not isinstance(value, datetime):  # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä Agent)
                    cleaned[key] = str(value)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                elif isinstance(value, datetime):
                    cleaned[key] = value.isoformat()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
                elif isinstance(value, (list, dict)):
                    cleaned[key] = self._clean_result_for_json(value)
                else:
                    cleaned[key] = value
            return cleaned
        elif isinstance(result, list):
            return [self._clean_result_for_json(item) for item in result]
        elif isinstance(result, datetime):
            return result.isoformat()
        else:
            return result
    
    async def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        os.makedirs('workspace/benchmark_results', exist_ok=True)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'workspace/benchmark_results/multiagent_{timestamp}.json'
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
    benchmark = MultiAgentBenchmark()
    results = await benchmark.run_benchmark()
    
    if results['success_rate'] >= 80:
        print("üèÜ –û–¢–õ–ò–ß–ù–ê–Ø –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
    elif results['success_rate'] >= 60:
        print("üëç –•–û–†–û–®–ê–Ø –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤!")
    else:
        print("‚ö†Ô∏è –ù–£–ñ–ù–û –£–õ–£–ß–®–ê–¢–¨ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!")

if __name__ == "__main__":
    asyncio.run(main()) 