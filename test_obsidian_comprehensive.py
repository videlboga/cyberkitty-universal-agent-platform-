#!/usr/bin/env python3
"""
üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç ObsidianOrchestrator - –ß–∞—Å—Ç—å 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

–ü–†–û–í–ï–†–Ø–ï–¢:
‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é ObsidianDB
‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —á—Ç–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —Å workspace
‚úÖ –ë–∞–∑–æ–≤—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
"""

import asyncio
import shutil
import json
from pathlib import Path
from datetime import datetime
from kittycore.core.obsidian_orchestrator import (
    ObsidianOrchestrator, create_obsidian_orchestrator
)
from kittycore.core.obsidian_db import ObsidianDB, ObsidianNote

class TestResults:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    def __init__(self):
        self.tests_run = 0
        self.tests_passed = 0
        self.tests_failed = 0
        self.failures = []
        
    def add_test(self, name: str, passed: bool, details: str = ""):
        self.tests_run += 1
        if passed:
            self.tests_passed += 1
            print(f"‚úÖ {name}: –ü–†–û–ô–î–ï–ù")
        else:
            self.tests_failed += 1
            self.failures.append(f"{name}: {details}")
            print(f"‚ùå {name}: –ü–†–û–í–ê–õ–ï–ù - {details}")
        
        if details and passed:
            print(f"   üìù {details}")
    
    def get_summary(self):
        success_rate = (self.tests_passed / self.tests_run * 100) if self.tests_run > 0 else 0
        return {
            "tests_run": self.tests_run,
            "tests_passed": self.tests_passed,
            "tests_failed": self.tests_failed,
            "success_rate": success_rate,
            "failures": self.failures
        }

async def test_1_obsidian_db_basic(results: TestResults):
    """–¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å ObsidianDB"""
    print("\nüß™ –¢–ï–°–¢ 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å ObsidianDB")
    
    vault_path = "./test_comprehensive_vault"
    if Path(vault_path).exists():
        shutil.rmtree(vault_path)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ ObsidianDB
        db = ObsidianDB(vault_path)
        results.add_test(
            "1.1 –°–æ–∑–¥–∞–Ω–∏–µ ObsidianDB", 
            True, 
            f"Vault —Å–æ–∑–¥–∞–Ω: {vault_path}"
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
        note = ObsidianNote(
            title="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞",
            content="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
            tags=["test", "basic"],
            metadata={"test_id": "test_1", "timestamp": datetime.now().isoformat()},
            folder="test"
        )
        
        saved_path = db.save_note(note)
        results.add_test(
            "1.2 –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏",
            Path(saved_path).exists(),
            f"–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {saved_path}"
        )
        
        # –ß—Ç–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
        retrieved_note = db.get_note("–¢–µ—Å—Ç–æ–≤–∞—è-–∑–∞–º–µ—Ç–∫–∞.md")
        results.add_test(
            "1.3 –ß—Ç–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏",
            retrieved_note is not None and retrieved_note.title == "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞",
            f"–ó–∞–º–µ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞: {retrieved_note.title if retrieved_note else 'None'}"
        )
        
        # –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫
        search_results = db.search_notes(metadata_filter={"test_id": "test_1"})
        results.add_test(
            "1.4 –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫",
            len(search_results) == 1,
            f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: {len(search_results)}"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
        expected_folders = ["tasks", "agents", "coordination", "results", "system", "test"]
        vault_folders = [f.name for f in Path(vault_path).iterdir() if f.is_dir()]
        folders_created = all(folder in vault_folders for folder in expected_folders)
        results.add_test(
            "1.5 –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫",
            folders_created,
            f"–°–æ–∑–¥–∞–Ω—ã –ø–∞–ø–∫–∏: {vault_folders}"
        )
        
    except Exception as e:
        results.add_test("1.X –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", False, f"–û—à–∏–±–∫–∞: {str(e)}")

async def test_2_orchestrator_initialization(results: TestResults):
    """–¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ObsidianOrchestrator"""
    print("\nüß™ –¢–ï–°–¢ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ObsidianOrchestrator")
    
    vault_path = "./test_comprehensive_vault"
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        orchestrator = create_obsidian_orchestrator(vault_path)
        results.add_test(
            "2.1 –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            orchestrator is not None,
            f"–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —Å vault: {vault_path}"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components_exist = all([
            hasattr(orchestrator, 'task_analyzer'),
            hasattr(orchestrator, 'task_decomposer'),
            hasattr(orchestrator, 'agent_spawner'),
            hasattr(orchestrator, 'execution_manager'),
            hasattr(orchestrator, 'db'),
            hasattr(orchestrator, 'task_manager')
        ])
        results.add_test(
            "2.2 –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            components_exist,
            "–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = orchestrator.get_statistics()
        results.add_test(
            "2.3 –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            'tasks_processed' in stats and 'vault_statistics' in stats,
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['tasks_processed']} –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
        )
        
    except Exception as e:
        results.add_test("2.X –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")

async def test_3_simple_task_execution(results: TestResults):
    """–¢–µ—Å—Ç 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏"""
    print("\nüß™ –¢–ï–°–¢ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏")
    
    vault_path = "./test_comprehensive_vault"
    
    try:
        orchestrator = create_obsidian_orchestrator(vault_path)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏
        task = "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞"
        result = await orchestrator.solve_task(task, user_id="test_simple")
        
        results.add_test(
            "3.1 –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            result['status'] == 'completed',
            f"–°—Ç–∞—Ç—É—Å: {result['status']}, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result['duration']:.2f}—Å"
        )
        
        results.add_test(
            "3.2 –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤",
            result['agents_created'] > 0,
            f"–°–æ–∑–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {result['agents_created']}"
        )
        
        results.add_test(
            "3.3 –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–æ–≤",
            result['steps_completed'] > 0,
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {result['steps_completed']}"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ ObsidianDB
        task_id = result['task_id']
        task_notes = orchestrator.db.search_notes(metadata_filter={"task_id": task_id})
        results.add_test(
            "3.4 –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ ObsidianDB",
            len(task_notes) > 0,
            f"–°–æ–∑–¥–∞–Ω–æ –∑–∞–º–µ—Ç–æ–∫: {len(task_notes)}"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ vault
        vault_files = len(list(Path(vault_path).rglob("*.md")))
        results.add_test(
            "3.5 –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫",
            vault_files > result.get('vault_notes_created', 0),
            f"–ó–∞–º–µ—Ç–æ–∫ –≤ vault: {vault_files}"
        )
        
    except Exception as e:
        results.add_test("3.X –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏", False, f"–û—à–∏–±–∫–∞: {str(e)}")

async def run_basic_tests():
    """–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –ë–ê–ó–û–í–´–• –¢–ï–°–¢–û–í OBSIDIANORCHESTRATOR")
    print("=" * 60)
    
    results = TestResults()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    await test_1_obsidian_db_basic(results)
    await test_2_orchestrator_initialization(results)
    await test_3_simple_task_execution(results)
    
    # –ò—Ç–æ–≥–∏
    summary = results.get_summary()
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –ë–ê–ó–û–í–´–• –¢–ï–°–¢–û–í:")
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {summary['tests_passed']}/{summary['tests_run']}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate']:.1f}%")
    
    if summary['failures']:
        print(f"\n‚ùå –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã:")
        for failure in summary['failures']:
            print(f"   - {failure}")
    
    return summary

if __name__ == "__main__":
    asyncio.run(run_basic_tests()) 