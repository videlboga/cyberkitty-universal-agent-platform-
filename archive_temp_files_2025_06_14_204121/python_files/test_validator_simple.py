#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç SmartValidator
"""

import asyncio
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'kittycore'))

from kittycore.agents.smart_validator import SmartValidator

async def test_validator():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
    
    print("üß™ –¢–ï–°–¢ SmartValidator")
    print("=" * 50)
    
    validator = SmartValidator()
    
    # –¢–µ—Å—Ç 1: –ü–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–ª–∞–Ω –≤–º–µ—Å—Ç–æ —Å–∞–π—Ç–∞)
    print("\nüîç –¢–ï–°–¢ 1: –ü–ª–∞–Ω –≤–º–µ—Å—Ç–æ —Å–∞–π—Ç–∞")
    task1 = "–°–æ–∑–¥–∞–π —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏"
    result1 = {"status": "completed", "output": "–ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞ –≥–æ—Ç–æ–≤"}
    files1 = []
    
    try:
        validation1 = await validator.validate_result(task1, result1, files1)
        print(f"‚úÖ –û–±—Ä–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {validation1.expected_result}")
        print(f"üìä –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {validation1.is_valid}")
        print(f"üéØ –û—Ü–µ–Ω–∫–∞: {validation1.score:.1f}/1.0")
        print(f"üí¨ –í–µ—Ä–¥–∏–∫—Ç: {validation1.verdict}")
        if validation1.issues:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(validation1.issues)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ä–∞–±–æ—á–∏–π HTML)
    print("\nüîç –¢–ï–°–¢ 2: –†–∞–±–æ—á–∏–π HTML —Ñ–∞–π–ª")
    task2 = "–°–æ–∑–¥–∞–π —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏"
    result2 = {"status": "completed", "output": "–°–æ–∑–¥–∞–Ω HTML —Ñ–∞–π–ª"}
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π HTML —Ñ–∞–π–ª
    test_html = "test_kittens.html"
    with open(test_html, 'w', encoding='utf-8') as f:
        f.write("""<!DOCTYPE html>
<html>
<head><title>–ö–æ—Ç—è—Ç–∞</title></head>
<body>
    <h1>–°–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏</h1>
    <img src="kitten.jpg" alt="–ö–æ—Ç—ë–Ω–æ–∫">
    <button onclick="alert('–ú—è—É!')">–ù–∞–∂–º–∏ –º–µ–Ω—è</button>
</body>
</html>""")
    
    files2 = [test_html]
    
    try:
        validation2 = await validator.validate_result(task2, result2, files2)
        print(f"‚úÖ –û–±—Ä–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {validation2.expected_result}")
        print(f"üìä –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {validation2.is_valid}")
        print(f"üéØ –û—Ü–µ–Ω–∫–∞: {validation2.score:.1f}/1.0")
        print(f"üí¨ –í–µ—Ä–¥–∏–∫—Ç: {validation2.verdict}")
        if validation2.issues:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(validation2.issues)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        if os.path.exists(test_html):
            os.remove(test_html)
    
    print("\nüéØ –ò–¢–û–ì: SmartValidator –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!")

if __name__ == "__main__":
    asyncio.run(test_validator()) 