"""
üîß –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø KITTYCORE 3.0
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ loguru —Å–æ–≥–ª–∞—Å–Ω–æ CursorRules
"""

import sys
from pathlib import Path
from loguru import logger

def setup_kittycore_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è KittyCore 3.0"""
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.remove()
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    logger.add(
        sys.stderr,
        level="INFO",
        format="<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
        colorize=True
    )
    
    # === –õ–û–ì–ò –°–û–ì–õ–ê–°–ù–û CURSORRULES ===
    
    # –õ–æ–≥–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    logger.add(
        "logs/orchestrator.log",
        level="INFO",
        rotation="10 MB",
        compression="gz",
        serialize=True,
        format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | {name}:{function}:{line} | {message}",
        filter=lambda record: "orchestrator" in record.get("name", "").lower()
    )
    
    # –õ–æ–≥–∏ –∞–≥–µ–Ω—Ç–æ–≤
    logger.add(
        "logs/agents.log", 
        level="INFO",
        rotation="10 MB",
        compression="gz",
        serialize=True,
        format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | {name}:{function}:{line} | {message}",
        filter=lambda record: any(keyword in record.get("name", "").lower() 
                                for keyword in ["agent", "factory", "intellectual"])
    )
    
    # –õ–æ–≥–∏ –ø–∞–º—è—Ç–∏
    logger.add(
        "logs/memory.log",
        level="INFO", 
        rotation="10 MB",
        compression="gz",
        serialize=True,
        format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | {name}:{function}:{line} | {message}",
        filter=lambda record: "memory" in record.get("name", "").lower()
    )
    
    # –õ–æ–≥–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    logger.add(
        "logs/human.log",
        level="INFO",
        rotation="10 MB", 
        compression="gz",
        serialize=True,
        format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | {name}:{function}:{line} | {message}",
        filter=lambda record: any(keyword in record.get("name", "").lower()
                                for keyword in ["human", "collaboration", "obsidian"])
    )
    
    # –õ–æ–≥–∏ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
    logger.add(
        "logs/improvement.log",
        level="INFO",
        rotation="10 MB",
        compression="gz", 
        serialize=True,
        format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | {name}:{function}:{line} | {message}",
        filter=lambda record: any(keyword in record.get("name", "").lower()
                                for keyword in ["improvement", "validator", "fixer"])
    )
    
    # –û–±—â–∏–π –ª–æ–≥ —Å–∏—Å—Ç–µ–º—ã
    logger.add(
        "logs/kittycore.log",
        level="DEBUG",
        rotation="50 MB",
        compression="gz",
        serialize=True,
        format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | {name}:{function}:{line} | {message}"
    )
    
    # –õ–æ–≥ –æ—à–∏–±–æ–∫
    logger.add(
        "logs/errors.log",
        level="ERROR",
        rotation="10 MB", 
        compression="gz",
        serialize=True,
        format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | {name}:{function}:{line} | {message} | {exception}"
    )
    
    logger.info("üîß –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è KittyCore 3.0 –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    logger.info("üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫—É logs/")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
setup_kittycore_logging() 