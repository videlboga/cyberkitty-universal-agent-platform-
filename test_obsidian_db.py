#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç ObsidianDB - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤

–ü—Ä–æ–≤–µ—Ä—è–µ–º:
1. –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
2. –ü–æ–∏—Å–∫ –∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫  
3. –†–∞–±–æ—á–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∞–≥–µ–Ω—Ç–æ–≤
4. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
"""

import asyncio
import shutil
from pathlib import Path
from kittycore.core.obsidian_db import (
    ObsidianDB, ObsidianNote, AgentWorkspace, TaskManager,
    get_obsidian_db, create_agent_workspace, create_task_manager
)

def test_obsidian_db():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å ObsidianDB"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º ObsidianDB...")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–ø–∫—É
    test_vault = "./test_obsidian_vault"
    if Path(test_vault).exists():
        shutil.rmtree(test_vault)
    
    # –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = ObsidianDB(test_vault)
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    print("\nüìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏")
    note = ObsidianNote(
        title="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞",
        content="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–º–µ—Ç–∫–∏",
        tags=["test", "demo"],
        metadata={"author": "test_system", "priority": "high"}
    )
    
    filepath = db.save_note(note)
    print(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}")
    
    # –¢–µ—Å—Ç 2: –ß—Ç–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    print("\nüìñ –¢–µ—Å—Ç 2: –ß—Ç–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏")
    loaded_note = db.get_note("–¢–µ—Å—Ç–æ–≤–∞—è-–∑–∞–º–µ—Ç–∫–∞.md")
    if loaded_note:
        print(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {loaded_note.title}")
        print(f"   –¢–µ–≥–∏: {loaded_note.tags}")
        print(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {loaded_note.metadata}")
    else:
        print("‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫
    print("\nüîç –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫")
    results = db.search_notes(query="—Ç–µ—Å—Ç–æ–≤—ã–π", tags=["test"])
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: {len(results)}")
    for result in results:
        print(f"   - {result['title']} (—Ç–µ–≥–∏: {result['tags']})")
    
    # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π
    print("\nüîó –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π")
    note2 = ObsidianNote(
        title="–°–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞",
        content="–≠—Ç–∞ –∑–∞–º–µ—Ç–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–µ—Ä–≤–æ–π",
        tags=["test", "linked"]
    )
    db.save_note(note2)
    
    # –°–æ–∑–¥–∞—ë–º —Å–≤—è–∑—å
    db.create_link("–¢–µ—Å—Ç–æ–≤–∞—è-–∑–∞–º–µ—Ç–∫–∞.md", "–°–≤—è–∑–∞–Ω–Ω–∞—è-–∑–∞–º–µ—Ç–∫–∞.md", "–°–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏
    backlinks = db.get_backlinks("–°–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞")
    print(f"‚úÖ –û–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏ –¥–ª—è '–°–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞': {backlinks}")
    
    return db

def test_agent_workspace():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º AgentWorkspace...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É
    db = get_obsidian_db("./test_obsidian_vault")
    
    # –°–æ–∑–¥–∞—ë–º —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è –¥–≤—É—Ö –∞–≥–µ–Ω—Ç–æ–≤
    agent1 = AgentWorkspace("agent_nova", db)
    agent2 = AgentWorkspace("agent_artemis", db)
    
    task_id = "test_task_001"
    
    # –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüíæ –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤")
    
    result1 = agent1.save_result(
        task_id=task_id,
        content="–ê–≥–µ–Ω—Ç Nova –≤—ã–ø–æ–ª–Ω–∏–ª –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–ª –æ—Ç—á—ë—Ç",
        result_type="analysis"
    )
    print(f"‚úÖ Agent Nova —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {Path(result1).name}")
    
    result2 = agent2.save_result(
        task_id=task_id,
        content="–ê–≥–µ–Ω—Ç Artemis —Å–æ–∑–¥–∞–ª –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏",
        result_type="webpage"
    )
    print(f"‚úÖ Agent Artemis —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {Path(result2).name}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
    print("\nüìã –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏")
    context = agent1.get_task_context(task_id)
    print(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è agent_nova:")
    print(f"   –°–≤—è–∑–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã: {context['related_agents']}")
    print(f"   –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(context['previous_results'])}")
    
    # –¢–µ—Å—Ç 3: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
    print("\nüì® –¢–µ—Å—Ç 3: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏")
    coord_msg = agent1.coordinate_with_agent(
        other_agent_id="agent_artemis",
        message="–ü—Ä–∏–≤–µ—Ç Artemis! –Ø –∑–∞–≤–µ—Ä—à–∏–ª –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö. –ú–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤?",
        task_id=task_id
    )
    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {Path(coord_msg).name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è agent2
    messages = agent2.get_messages_for_me(task_id)
    print(f"‚úÖ Agent Artemis –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
    for msg in messages:
        print(f"   –û—Ç {msg['from_agent']}: {msg['content'][:50]}...")
    
    return agent1, agent2

def test_task_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º TaskManager...")
    
    # –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
    task_manager = create_task_manager("./test_obsidian_vault")
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    print("\nüéØ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    task_id = task_manager.create_task(
        task_description="–°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂",
        user_id="user_123"
    )
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task_id}")
    
    # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –∫ –∑–∞–¥–∞—á–µ
    print("\nü§ñ –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –∫ –∑–∞–¥–∞—á–µ")
    task_manager.add_agent_to_task(task_id, "agent_nova", "Data Analyst")
    task_manager.add_agent_to_task(task_id, "agent_artemis", "Frontend Developer")
    print("‚úÖ –ê–≥–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∑–∞–¥–∞—á–µ")
    
    # –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìä –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫ –∑–∞–¥–∞—á–µ")
    task_manager.add_result_to_task(
        task_id=task_id,
        agent_id="agent_nova",
        result_content="–í—ã–ø–æ–ª–Ω–µ–Ω –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª. –í—ã—è–≤–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –º–µ—Ç—Ä–∏–∫–∏.",
        result_type="analysis"
    )
    
    task_manager.add_result_to_task(
        task_id=task_id,
        agent_id="agent_artemis", 
        result_content="–°–æ–∑–¥–∞–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã Chart.js –∏ Bootstrap.",
        result_type="dashboard"
    )
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∑–∞–¥–∞—á–µ")
    
    # –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    print("\nüîÑ –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏")
    task_manager.update_task_status(
        task_id=task_id,
        status="completed",
        details="–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–∞—à–±–æ—Ä–¥–∞ –≥–æ—Ç–æ–≤—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã"
    )
    print("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª—ë–Ω")
    
    # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏
    print("\nüìà –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –∑–∞–¥–∞—á–µ")
    summary = task_manager.get_task_summary(task_id)
    print(f"‚úÖ –°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–¥–∞—á–µ {task_id}:")
    print(f"   –°—Ç–∞—Ç—É—Å: {summary['status']}")
    print(f"   –ê–≥–µ–Ω—Ç–æ–≤: {summary['agents_count']}")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {summary['results_count']}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏: {summary['coordination_messages']}")
    
    return task_manager, task_id

def test_obsidian_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Obsidian"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Obsidian...")
    
    vault_path = Path("./test_obsidian_vault")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    print("\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ vault:")
    for folder in vault_path.rglob("*"):
        if folder.is_dir():
            print(f"   üìÅ {folder.relative_to(vault_path)}/")
        else:
            print(f"   üìÑ {folder.relative_to(vault_path)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏
    print("\nüìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏:")
    task_files = list(vault_path.glob("tasks/task_*.md"))
    if task_files:
        with open(task_files[0], 'r', encoding='utf-8') as f:
            content = f.read()
        print("=" * 50)
        print(content[:500] + "..." if len(content) > 500 else content)
        print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
    print("\nü§ñ –ó–∞–º–µ—Ç–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤:")
    agent_files = list(vault_path.glob("agents/**/*.md"))
    for agent_file in agent_files[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
        print(f"   üìÑ {agent_file.relative_to(vault_path)}")
    
    print(f"\n‚úÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(list(vault_path.rglob('*.md')))}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ ObsidianDB - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    print("=" * 70)
    
    try:
        # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
        db = test_obsidian_db()
        
        # –¢–µ—Å—Ç—ã —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∞–≥–µ–Ω—Ç–æ–≤
        agent1, agent2 = test_agent_workspace()
        
        # –¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
        task_manager, task_id = test_task_manager()
        
        # –¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Obsidian
        test_obsidian_integration()
        
        print("\n" + "=" * 70)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüóÑÔ∏è ObsidianDB –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–∞–∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É ./test_obsidian_vault –≤ Obsidian")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 