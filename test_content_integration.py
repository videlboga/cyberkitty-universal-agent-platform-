#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ö–æ–Ω—Ç–µ–Ω—Ç + –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∞–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç –†–ï–ê–õ–¨–ù–´–ô –∫–æ–Ω—Ç–µ–Ω—Ç –≤–º–µ—Å—Ç–æ –æ—Ç—á—ë—Ç–æ–≤
"""

import asyncio
from kittycore.core.content_integration import enhance_agent_with_content_system, EnhancedContentSystem

def test_content_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("üîç === –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –ö–û–ù–¢–ï–ù–¢–ê ===")
    
    # –ü—Ä–∏–º–µ—Ä—ã –ø–ª–æ—Ö–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ—Ç—á—ë—Ç—ã)
    bad_content_examples = [
        {
            "task": "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello_world.py —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π Hello World",
            "content": """# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã

–ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello_world.py —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π Hello World
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º

## –†–µ–∑—É–ª—å—Ç–∞—Ç
–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.""",
            "filename": "hello_world.py"
        },
        {
            "task": "–°–æ–∑–¥–∞–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            "content": """# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã

–ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º

## –†–µ–∑—É–ª—å—Ç–∞—Ç
–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.""",
            "filename": "registration.html"
        }
    ]
    
    content_system = EnhancedContentSystem()
    
    for i, example in enumerate(bad_content_examples, 1):
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä {i}: {example['task']}")
        
        result = content_system.create_validated_content(
            task=example["task"],
            original_content=example["content"],
            filename=example["filename"]
        )
        
        print(f"   ‚úÖ –£—Å–ø–µ—Ö: {result['success']}")
        print(f"   üìÅ –§–∞–π–ª: {result['content_file']}")
        print(f"   üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {result['metadata_file']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        with open(result['content_file'], 'r', encoding='utf-8') as f:
            final_content = f.read()
        
        print(f"   üíé –ö–æ–Ω—Ç–µ–Ω—Ç: {final_content[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ï –æ—Ç—á—ë—Ç
        is_report = any(pattern in final_content for pattern in ["–ó–∞–¥–∞—á–∞:", "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã", "–∞–≥–µ–Ω—Ç–æ–º"])
        print(f"   üö´ –≠—Ç–æ –æ—Ç—á—ë—Ç: {'–î–∞' if is_report else '–ù–µ—Ç'}")

def test_good_content():
    """–¢–µ—Å—Ç —Ö–æ—Ä–æ—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("\n‚úÖ === –¢–ï–°–¢ –•–û–†–û–®–ï–ì–û –ö–û–ù–¢–ï–ù–¢–ê ===")
    
    good_content_examples = [
        {
            "task": "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello_world.py —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π Hello World",
            "content": 'print("Hello, World!")',
            "filename": "hello_world_good.py"
        },
        {
            "task": "–°–æ–∑–¥–∞–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ—Ç—è—Ç–∞–º–∏",
            "content": '''<!DOCTYPE html>
<html>
<head><title>–ö–æ—Ç—è—Ç–∞</title></head>
<body>
    <h1>–ú–∏–ª—ã–µ –∫–æ—Ç—è—Ç–∞</h1>
    <p>üê± –ü—É—à–∏—Å—Ç–∏–∫ –æ—á–µ–Ω—å –º–∏–ª—ã–π!</p>
</body>
</html>''',
            "filename": "kittens_good.html"
        }
    ]
    
    content_system = EnhancedContentSystem()
    
    for i, example in enumerate(good_content_examples, 1):
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä {i}: {example['task']}")
        
        result = content_system.create_validated_content(
            task=example["task"],
            original_content=example["content"],
            filename=example["filename"]
        )
        
        print(f"   ‚úÖ –£—Å–ø–µ—Ö: {result['success']}")
        print(f"   üìÅ –§–∞–π–ª: {result['content_file']}")
        print(f"   üéØ –í–∞–ª–∏–¥–∞—Ü–∏—è: {result['validation']['score']:.2f}")

def test_enhance_agent_function():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nüöÄ === –¢–ï–°–¢ –§–£–ù–ö–¶–ò–ò –£–õ–£–ß–®–ï–ù–ò–Ø –ê–ì–ï–ù–¢–û–í ===")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–ª–æ—Ö–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
    agent_results = [
        {
            "task": "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello_world.py —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π Hello World",
            "agent_output": "# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã\n–ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello_world.py\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–º"
        },
        {
            "task": "–°–æ–∑–¥–∞–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ—Ç—è—Ç–∞–º–∏",
            "agent_output": "# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã\n–ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–º"
        },
        {
            "task": "–°–æ–∑–¥–∞–π JSON —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞",
            "agent_output": "# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã\n–ó–∞–¥–∞—á–∞: JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–º"
        }
    ]
    
    for i, example in enumerate(agent_results, 1):
        print(f"\nü§ñ –ê–≥–µ–Ω—Ç {i}: {example['task']}")
        print(f"   üì§ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {example['agent_output'][:50]}...")
        
        # –£–ª—É—á—à–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        enhanced_result = enhance_agent_with_content_system(
            agent_result=example["agent_output"],
            task=example["task"]
        )
        
        print(f"   ‚úÖ –£–ª—É—á—à–µ–Ω: {enhanced_result['success']}")
        print(f"   üìÅ –ù–æ–≤—ã–π —Ñ–∞–π–ª: {enhanced_result['content_file']}")
        
        # –ß–∏—Ç–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        with open(enhanced_result['content_file'], 'r', encoding='utf-8') as f:
            improved_content = f.read()
        
        print(f"   üíé –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {improved_content[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        is_real_content = not any(pattern in improved_content for pattern in ["–ó–∞–¥–∞—á–∞:", "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã"])
        print(f"   üéØ –†–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {'–î–∞' if is_real_content else '–ù–µ—Ç'}")

def test_file_contents():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ === –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û –§–ê–ô–õ–û–í ===")
    
    files_to_check = [
        "outputs/hello_world.py",
        "outputs/registration.html", 
        "outputs/kittens_page.html",
        "outputs/config.json"
    ]
    
    for file_path in files_to_check:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            print(f"\nüìÑ {file_path}:")
            print(f"   üìè –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   üíé –ü—Ä–µ–≤—å—é: {content[:100]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ï –æ—Ç—á—ë—Ç
            is_report = any(pattern in content for pattern in ["–ó–∞–¥–∞—á–∞:", "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã", "–∞–≥–µ–Ω—Ç–æ–º"])
            print(f"   ‚úÖ –ü–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {'–ù–µ—Ç' if is_report else '–î–∞'}")
            
        except FileNotFoundError:
            print(f"\nüìÑ {file_path}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ö–û–ù–¢–ï–ù–¢ + –ú–ï–¢–ê–î–ê–ù–ù–´–ï")
    print("=" * 80)
    
    test_content_validation()
    test_good_content()
    test_enhance_agent_function()
    test_file_contents()
    
    print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –ü–ª–æ—Ö–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
    print("‚úÖ –•–æ—Ä–æ—à–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è")
    print("‚úÖ –ê–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
    print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ")

if __name__ == "__main__":
    main() 