#!/usr/bin/env python3
"""
üìà –¢–ï–°–¢ –ü–†–û–ì–†–ï–°–°–ò–ò –û–ë–£–ß–ï–ù–ò–Ø –ê–ì–ï–ù–¢–û–í
–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –∞–≥–µ–Ω—Ç—ã —É—á–∞—Ç—Å—è –∏ —É–ª—É—á—à–∞—é—Ç—Å—è
"""

import asyncio
from kittycore.core.agent_learning_system import learning_system
from kittycore.core.iterative_improvement import IterativeImprovement
from agents.smart_validator import SmartValidator
from kittycore.agents.working_agent import WorkingAgent

async def test_learning_progression():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è"""
    print("üìà –¢–ï–°–¢ –ü–†–û–ì–†–ï–°–°–ò–ò –û–ë–£–ß–ï–ù–ò–Ø –ê–ì–ï–ù–¢–û–í")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏
    agent = WorkingAgent(
        role="math_developer",
        subtask={
            "description": "–°–æ–∑–¥–∞–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞ 5",
            "expected_output": "–†–∞–±–æ—á–∏–π Python —Ñ–∞–π–ª —Å —Ñ—É–Ω–∫—Ü–∏–µ–π —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞"
        }
    )
    
    validator = SmartValidator()
    improvement = IterativeImprovement()
    
    print("üéØ –ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞ 5")
    
    try:
        # –ü–µ—Ä–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        print("\n1Ô∏è‚É£ –ü–ï–†–í–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï:")
        result = await agent.execute_task()
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('output', '–ù–µ—Ç –≤—ã–≤–æ–¥–∞')[:100]}...")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        validation = await validator.validate_result(
            original_task="–°–æ–∑–¥–∞–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞ 5",
            result=result,
            created_files=result.get("files_created", [])
        )
        
        print(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {validation.score:.1f}/1.0")
        print(f"üîç –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(validation.issues)}")
        
        # –£–ª—É—á—à–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if validation.score < 0.7:
            print("\nüîÑ –ó–ê–ü–£–°–ö–ê–ï–ú –ò–¢–ï–†–ê–¢–ò–í–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï:")
            
            final_result, attempts = await improvement.improve_agent_iteratively(
                agent=agent,
                task="–°–æ–∑–¥–∞–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞ 5",
                initial_result=result,
                initial_validation=validation,
                smart_validator=validator
            )
            
            print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–õ–£–ß–®–ï–ù–ò–Ø:")
            print(f"   - –ü–æ–ø—ã—Ç–æ–∫: {len(attempts)}")
            print(f"   - –ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {validation.score:.1f}")
            
            for i, attempt in enumerate(attempts, 1):
                if attempt.improved_validation:
                    print(f"   - –ü–æ–ø—ã—Ç–∫–∞ {i}: {attempt.validation.score:.1f} ‚Üí {attempt.improved_validation.score:.1f}")
                else:
                    print(f"   - –ü–æ–ø—ã—Ç–∫–∞ {i}: {attempt.validation.score:.1f} ‚Üí –æ—à–∏–±–∫–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è
        print("\nüß† –ù–ê–ö–û–ü–õ–ï–ù–ù–´–ï –ó–ù–ê–ù–ò–Ø –ê–ì–ï–ù–¢–ê:")
        knowledge = await learning_system.get_agent_knowledge("math_developer")
        
        print(f"   üìä –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {knowledge.total_attempts}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {len(knowledge.successful_patterns)}")
        print(f"   ‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫: {len(knowledge.error_patterns)}")
        print(f"   üîß –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(knowledge.tool_preferences)}")
        print(f"   üìö –£—Ä–æ–∫–∏: {len(knowledge.lessons_learned)}")
        
        if knowledge.lessons_learned:
            print(f"\nüí° –£–†–û–ö–ò –ê–ì–ï–ù–¢–ê:")
            for i, lesson in enumerate(knowledge.lessons_learned[-3:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —É—Ä–æ–∫–∞
                print(f"   {i}. {lesson}")
        
        if knowledge.tool_preferences:
            print(f"\nüîß –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í:")
            for tool, count in knowledge.tool_preferences.items():
                print(f"   - {tool}: {count} —É—Å–ø–µ—Ö–æ–≤")
        
        if knowledge.successful_patterns:
            print(f"\n‚úÖ –£–°–ü–ï–®–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:")
            for pattern in knowledge.successful_patterns[-2:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –ø–∞—Ç—Ç–µ—Ä–Ω–∞
                print(f"   - {pattern}")
        
        return validation.score
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return 0.0

async def test_multiple_agents_learning():
    """–¢–µ—Å—Ç –æ–±—É—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nüë• –¢–ï–°–¢ –û–ë–£–ß–ï–ù–ò–Ø –ù–ï–°–ö–û–õ–¨–ö–ò–• –ê–ì–ï–ù–¢–û–í")
    print("=" * 50)
    
    agents_data = [
        ("file_creator", "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª numbers.txt —Å —á–∏—Å–ª–∞–º–∏ –æ—Ç 1 –¥–æ 10"),
        ("text_processor", "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª greeting.txt —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º"),
        ("data_formatter", "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª info.txt —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ")
    ]
    
    scores = []
    
    for role, task in agents_data:
        print(f"\nü§ñ –ê–≥–µ–Ω—Ç: {role}")
        print(f"üéØ –ó–∞–¥–∞—á–∞: {task}")
        
        agent = WorkingAgent(
            role=role,
            subtask={
                "description": task,
                "expected_output": "–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"
            }
        )
        
        validator = SmartValidator()
        
        try:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            result = await agent.execute_task()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            validation = await validator.validate_result(
                original_task=task,
                result=result,
                created_files=result.get("files_created", [])
            )
            
            print(f"üìä –û—Ü–µ–Ω–∫–∞: {validation.score:.1f}/1.0")
            scores.append((role, validation.score))
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø—ã—Ç –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
            await learning_system.record_learning(
                agent_id=role,
                task_description=task,
                attempt_number=1,
                score_before=0.0,
                score_after=validation.score,
                error_patterns=validation.issues,
                successful_actions=["file_creation"] if validation.score > 0.5 else [],
                failed_actions=validation.issues,
                feedback_received=f"–û—Ü–µ–Ω–∫–∞: {validation.score}",
                tools_used=["file_manager"]
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ {role}: {e}")
            scores.append((role, 0.0))
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    total_score = 0
    for role, score in scores:
        print(f"   {role}: {score:.1f}/1.0")
        total_score += score
    
    avg_score = total_score / len(scores) if scores else 0
    print(f"\nüèÜ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_score:.1f}/1.0")
    
    return avg_score

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏"""
    print("üìà –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ì–†–ï–°–°–ò–ò –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        score1 = await test_learning_progression()
        
        # –¢–µ—Å—Ç 2: –û–±—É—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
        score2 = await test_multiple_agents_learning()
        
        # –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüèÜ –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –∞–≥–µ–Ω—Ç–∞: {score1:.1f}/1.0")
        print(f"   –°—Ä–µ–¥–Ω—è—è –ø–æ –∫–æ–º–∞–Ω–¥–µ: {score2:.1f}/1.0")
        
        overall_score = (score1 + score2) / 2
        print(f"   –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {overall_score:.1f}/1.0")
        
        if overall_score >= 0.7:
            print("\nüéâ –ü–†–ï–í–û–°–•–û–î–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        elif overall_score >= 0.5:
            print("\nüëç –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å!")
        else:
            print("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê!")
        
        print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ì–†–ï–°–°–ò–ò –ó–ê–í–ï–†–®–ï–ù–´!")
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 