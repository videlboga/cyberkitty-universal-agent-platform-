"""
Telegram Tools –¥–ª—è KittyCore Agents
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ @BotFather (—é–∑–µ—Ä–±–æ—Ç—ã)
- TON –∫–æ—à–µ–ª—å–∫–∏ –∏ –ø–ª–∞—Ç–µ–∂–∏
- Stars –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è  
- –Æ–∑–µ—Ä–±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏/–≥—Ä—É–ø–ø–∞–º–∏
"""

import asyncio
import json
import re
import random
import string
import os
from datetime import datetime
from typing import Dict, List, Optional, Any
import logging

from .tools import Tool, ToolResult

logger = logging.getLogger(__name__)

try:
    import pyrogram
    from pyrogram import Client, filters
    from pyrogram.types import Message, User, Chat
    from pyrogram.errors import FloodWait, SessionPasswordNeeded
    PYROGRAM_AVAILABLE = True
except ImportError:
    PYROGRAM_AVAILABLE = False
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è type hints
    Client = None

try:
    import aiohttp
    import aiofiles
    ASYNC_LIBS_AVAILABLE = True
except ImportError:
    ASYNC_LIBS_AVAILABLE = False


class TelegramTool(Tool):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Telegram –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –±–æ—Ç—ã, —é–∑–µ—Ä–±–æ—Ç—ã, –ø–ª–∞—Ç–µ–∂–∏, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
    """
    
    def __init__(self):
        super().__init__(
            name="telegram",
            description="–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è Telegram: —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤, —é–∑–µ—Ä–±–æ—Ç—ã, TON –ø–ª–∞—Ç–µ–∂–∏, Stars"
        )
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        self.userbot_sessions: Dict[str, Client] = {}
        self.bot_tokens: Dict[str, str] = {}
        self.active_conversations: Dict[str, Any] = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.api_id = os.getenv("TELEGRAM_API_ID")
        self.api_hash = os.getenv("TELEGRAM_API_HASH") 
        self.default_phone = os.getenv("TELEGRAM_PHONE")
        
    def get_schema(self):
        """–°—Ö–µ–º–∞ –¥–ª—è Telegram –æ–ø–µ—Ä–∞—Ü–∏–π"""
        return {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "enum": [
                        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤
                        "create_bot", "setup_bot", "delete_bot",
                        # TON –ø–ª–∞—Ç–µ–∂–∏  
                        "create_ton_wallet", "send_ton", "check_ton_balance",
                        # Stars
                        "create_stars_invoice", "handle_stars_payment",
                        # –Æ–∑–µ—Ä–±–æ—Ç
                        "create_userbot", "send_message", "get_messages",
                        "create_channel", "join_channel", "monitor_chats",
                        # –£—Ç–∏–ª–∏—Ç—ã
                        "get_bot_info", "health_check"
                    ],
                    "description": "–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                },
                "bot_name": {
                    "type": "string", 
                    "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è"
                },
                "bot_username": {
                    "type": "string",
                    "description": "Username –±–æ—Ç–∞ (–±–µ–∑ @)"
                },
                "session_name": {
                    "type": "string",
                    "description": "–ò–º—è —Å–µ—Å—Å–∏–∏ —é–∑–µ—Ä–±–æ—Ç–∞"
                },
                "phone_number": {
                    "type": "string",
                    "description": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —é–∑–µ—Ä–±–æ—Ç–∞"
                },
                "chat_id": {
                    "type": "string",
                    "description": "ID —á–∞—Ç–∞ –∏–ª–∏ username"
                },
                "message": {
                    "type": "string",
                    "description": "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
                },
                "wallet_name": {
                    "type": "string",
                    "description": "–ò–º—è TON –∫–æ—à–µ–ª—å–∫–∞"
                },
                "amount": {
                    "type": "number",
                    "description": "–°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞/–ø–ª–∞—Ç–µ–∂–∞"
                },
                "to_address": {
                    "type": "string",
                    "description": "–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è TON"
                },
                "invoice_title": {
                    "type": "string",
                    "description": "–ù–∞–∑–≤–∞–Ω–∏–µ Stars –∏–Ω–≤–æ–π—Å–∞"
                },
                "channel_title": {
                    "type": "string",
                    "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã"
                }
            },
            "required": ["action"]
        }
    
    def execute(self, action: str, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å Telegram –æ–ø–µ—Ä–∞—Ü–∏—é"""
        if not PYROGRAM_AVAILABLE:
            return ToolResult(
                success=False, 
                error="Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyrogram"
            )
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            result = asyncio.run(self._execute_async(action, **kwargs))
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –æ–ø–µ—Ä–∞—Ü–∏–∏ {action}: {e}")
            return ToolResult(success=False, error=str(e))
    
    async def _execute_async(self, action: str, **kwargs) -> ToolResult:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        
        if action == "create_bot":
            return await self._create_bot_via_botfather(**kwargs)
        elif action == "setup_bot":
            return await self._setup_bot(**kwargs)
        elif action == "create_ton_wallet":
            return await self._create_ton_wallet(**kwargs)
        elif action == "send_ton":
            return await self._send_ton_payment(**kwargs)
        elif action == "create_stars_invoice":
            return await self._create_stars_invoice(**kwargs)
        elif action == "create_userbot":
            return await self._create_userbot_session(**kwargs)
        elif action == "send_message":
            return await self._userbot_send_message(**kwargs)
        elif action == "get_messages":
            return await self._userbot_get_messages(**kwargs)
        elif action == "create_channel":
            return await self._userbot_create_channel(**kwargs)
        elif action == "monitor_chats":
            return await self._userbot_monitor_chats(**kwargs)
        elif action == "health_check":
            return await self._health_check(**kwargs)
        else:
            return ToolResult(success=False, error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")

    # =====================================================
    # –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–û–í –ß–ï–†–ï–ó @BOTFATHER
    # =====================================================
    
    async def _create_bot_via_botfather(self, **kwargs) -> ToolResult:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –∏—Å–ø–æ–ª—å–∑—É—è —é–∑–µ—Ä–±–æ—Ç"""
        try:
            bot_name = kwargs.get("bot_name", f"AutoBot_{random.randint(1000, 9999)}")
            bot_username = kwargs.get("bot_username", f"autobot_{self._generate_random_string(8)}_bot")
            session_name = kwargs.get("session_name", "default_userbot")
            
            logger.info(f"ü§ñ –°–æ–∑–¥–∞—é –±–æ—Ç–∞: {bot_name} (@{bot_username})")
            
            # –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—é
            userbot = await self._get_userbot_session(session_name)
            if not userbot:
                return ToolResult(success=False, error="–Æ–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å @BotFather
            bot_token = await self._automate_botfather_dialogue(userbot, bot_name, bot_username)
            
            if bot_token:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
                self.bot_tokens[bot_username] = bot_token
                
                logger.info(f"‚úÖ –ë–æ—Ç @{bot_username} —Å–æ–∑–¥–∞–Ω!")
                return ToolResult(
                    success=True,
                    data={
                        "bot_username": bot_username,
                        "bot_token": bot_token,
                        "bot_name": bot_name,
                        "message": f"–ë–æ—Ç @{bot_username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ @BotFather"
                    }
                )
            else:
                return ToolResult(success=False, error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
            return ToolResult(success=False, error=str(e))

    async def _automate_botfather_dialogue(self, userbot, bot_name: str, bot_username: str) -> Optional[str]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å @BotFather"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
            await userbot.send_message("@BotFather", "/newbot")
            await asyncio.sleep(2)
            
            await userbot.send_message("@BotFather", bot_name)
            await asyncio.sleep(2)
            
            await userbot.send_message("@BotFather", bot_username)
            await asyncio.sleep(3)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–∞—Ä—Å–∏–º —Ç–æ–∫–µ–Ω
            async for message in userbot.get_chat_history("@BotFather", limit=1):
                if "congratulations" in message.text.lower() or "–ø–æ–∑–¥—Ä–∞–≤–ª—è—é" in message.text.lower():
                    token_match = re.search(r'(\d+:[A-Za-z0-9_-]+)', message.text)
                    if token_match:
                        return token_match.group(1)
                elif "sorry" in message.text.lower() or "–∏–∑–≤–∏–Ω–∏—Ç–µ" in message.text.lower():
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç BotFather: {message.text}")
                    return None
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å BotFather: {e}")
            return None

    # =====================================================
    # TON –ö–û–®–ï–õ–¨–ö–ò –ò –ü–õ–ê–¢–ï–ñ–ò
    # =====================================================
    
    async def _create_ton_wallet(self, **kwargs) -> ToolResult:
        """–°–æ–∑–¥–∞–Ω–∏–µ TON –∫–æ—à–µ–ª—å–∫–∞"""
        try:
            wallet_name = kwargs.get("wallet_name", f"wallet_{self._generate_random_string(8)}")
            
            logger.info(f"üíé –°–æ–∑–¥–∞—é TON –∫–æ—à–µ–ª–µ–∫: {wallet_name}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º seed —Ñ—Ä–∞–∑—É –∏ –∞–¥—Ä–µ—Å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            seed_phrase = self._generate_ton_seed()
            wallet_address = self._generate_ton_address()
            
            wallet_data = {
                "name": wallet_name,
                "address": wallet_address,
                "seed_phrase": seed_phrase,
                "balance": 0.0,
                "created_at": datetime.now().isoformat()
            }
            
            logger.info(f"‚úÖ TON –∫–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω: {wallet_address}")
            
            return ToolResult(
                success=True,
                data={
                    "wallet_name": wallet_name,
                    "wallet_address": wallet_address,
                    "seed_phrase": seed_phrase,
                    "message": f"TON –∫–æ—à–µ–ª–µ–∫ {wallet_name} —Å–æ–∑–¥–∞–Ω"
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TON –∫–æ—à–µ–ª—å–∫–∞: {e}")
            return ToolResult(success=False, error=str(e))

    async def _send_ton_payment(self, **kwargs) -> ToolResult:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ TON –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            wallet_name = kwargs.get("wallet_name", "default_wallet")
            to_address = kwargs.get("to_address")
            amount = kwargs.get("amount", 0.0)
            
            if not to_address:
                return ToolResult(success=False, error="–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
            logger.info(f"üí∞ –û—Ç–ø—Ä–∞–≤–ª—è—é {amount} TON –Ω–∞ {to_address}")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—É—Ç –±—É–¥–µ—Ç TON SDK)
            transaction_hash = f"tx_{self._generate_random_string(16)}"
            
            return ToolResult(
                success=True,
                data={
                    "transaction_hash": transaction_hash,
                    "amount": amount,
                    "to_address": to_address,
                    "status": "confirmed",
                    "message": f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {amount} TON –Ω–∞ {to_address}"
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TON: {e}")
            return ToolResult(success=False, error=str(e))

    # =====================================================
    # STARS –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
    # =====================================================
    
    async def _create_stars_invoice(self, **kwargs) -> ToolResult:
        """–°–æ–∑–¥–∞–Ω–∏–µ Stars –∏–Ω–≤–æ–π—Å–∞"""
        try:
            bot_token = kwargs.get("bot_token")
            invoice_title = kwargs.get("invoice_title", "Payment")
            amount = kwargs.get("amount", 1)
            
            if not bot_token:
                return ToolResult(success=False, error="–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
            logger.info(f"‚≠ê –°–æ–∑–¥–∞—é Stars –∏–Ω–≤–æ–π—Å: {invoice_title} ({amount} Stars)")
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
            invoice_id = f"inv_{self._generate_random_string(12)}"
            
            return ToolResult(
                success=True,
                data={
                    "invoice_id": invoice_id,
                    "title": invoice_title,
                    "amount": amount,
                    "currency": "XTR",
                    "message": f"Stars –∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω: {amount} Stars"
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Stars –∏–Ω–≤–æ–π—Å–∞: {e}")
            return ToolResult(success=False, error=str(e))

    # =====================================================
    # –Æ–ó–ï–†–ë–û–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ
    # =====================================================
    
    async def _create_userbot_session(self, **kwargs) -> ToolResult:
        """–°–æ–∑–¥–∞–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏–∏"""
        try:
            session_name = kwargs.get("session_name", "default_userbot")
            phone_number = kwargs.get("phone_number", self.default_phone)
            
            if not phone_number:
                return ToolResult(success=False, error="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
            if not self.api_id or not self.api_hash:
                return ToolResult(success=False, error="API ID/Hash –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
            logger.info(f"üë§ –°–æ–∑–¥–∞—é —é–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—é: {session_name}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = Client(
                session_name,
                api_id=int(self.api_id),
                api_hash=self.api_hash,
                phone_number=phone_number
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            self.userbot_sessions[session_name] = client
            
            return ToolResult(
                success=True,
                data={
                    "session_name": session_name,
                    "phone_number": phone_number,
                    "status": "created",
                    "message": f"–Æ–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—è {session_name} —Å–æ–∑–¥–∞–Ω–∞"
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏–∏: {e}")
            return ToolResult(success=False, error=str(e))

    async def _userbot_send_message(self, **kwargs) -> ToolResult:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —é–∑–µ—Ä–±–æ—Ç"""
        try:
            session_name = kwargs.get("session_name", "default_userbot")
            chat_id = kwargs.get("chat_id")
            message = kwargs.get("message")
            
            if not chat_id or not message:
                return ToolResult(success=False, error="chat_id –∏ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
            
            userbot = await self._get_userbot_session(session_name)
            if not userbot:
                return ToolResult(success=False, error="–Æ–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await userbot.send_message(chat_id, message)
            
            return ToolResult(
                success=True,
                data={
                    "message_id": sent_message.id,
                    "chat_id": chat_id,
                    "text": message,
                    "date": sent_message.date.isoformat(),
                    "message": f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}"
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return ToolResult(success=False, error=str(e))

    # =====================================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # =====================================================
    
    async def _get_userbot_session(self, session_name: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏–∏"""
        if session_name in self.userbot_sessions:
            client = self.userbot_sessions[session_name]
            if not client.is_connected:
                await client.start()
            return client
        return None
    
    def _generate_random_string(self, length: int = 8) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))
    
    def _generate_ton_seed(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è TON seed —Ñ—Ä–∞–∑—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        words = ["abandon", "ability", "able", "about", "above", "absent", "absorb", "abstract", 
                "absurd", "abuse", "access", "accident", "account", "accuse", "achieve", "acid",
                "acoustic", "acquire", "across", "act", "action", "actor", "actress", "actual"]
        return " ".join(random.choices(words, k=24))
    
    def _generate_ton_address(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è TON –∞–¥—Ä–µ—Å–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        return f"0:{self._generate_random_string(64)}"
    
    async def _health_check(self, **kwargs) -> ToolResult:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Telegram –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        status = {
            "pyrogram_available": PYROGRAM_AVAILABLE,
            "async_libs_available": ASYNC_LIBS_AVAILABLE,
            "api_configured": bool(self.api_id and self.api_hash),
            "active_sessions": len(self.userbot_sessions),
            "stored_tokens": len(self.bot_tokens)
        }
        
        healthy = all([
            PYROGRAM_AVAILABLE,
            bool(self.api_id and self.api_hash)
        ])
        
        return ToolResult(
            success=healthy,
            data=status,
            error=None if healthy else "–ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        ) 