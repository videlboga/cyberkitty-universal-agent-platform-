#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ KittyCore 3.0
"""
import os
import shutil
from pathlib import Path
import ast
from collections import defaultdict

class FinalCleanup:
    def __init__(self):
        self.project_root = Path(".")
        self.duplicates = defaultdict(list)
        
    def analyze_and_cleanup(self):
        """–ê–Ω–∞–ª–∏–∑ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"""
        print("üîç –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ KittyCore 3.0...")
        
        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
        self._analyze_root_files()
        
        # 2. –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        self._find_functional_duplicates()
        
        # 3. –°–æ–∑–¥–∞—ë–º –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        self._create_unified_structure()
        
        # 4. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
        self._final_report()
        
    def _analyze_root_files(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ"""
        print("\nüìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ...")
        
        root_files = list(self.project_root.glob("*.py"))
        
        categories = {
            "important": [],      # –í–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã
            "utilities": [],      # –£—Ç–∏–ª–∏—Ç—ã  
            "demos": [],         # –î–µ–º–æ —Ñ–∞–π–ª—ã
            "misc": []           # –ü—Ä–æ—á–µ–µ
        }
        
        for file_path in root_files:
            file_size = file_path.stat().st_size
            file_name = file_path.name.lower()
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
            if any(keyword in file_name for keyword in ['main', 'app', 'server', 'bot']):
                categories["important"].append((file_path.name, file_size))
            elif any(keyword in file_name for keyword in ['fix_', 'integrate_', 'result', 'validation']):
                categories["important"].append((file_path.name, file_size))
            elif any(keyword in file_name for keyword in ['card', 'media', 'button', 'radio']):
                categories["utilities"].append((file_path.name, file_size))
            elif any(keyword in file_name for keyword in ['kot_', 'model']):
                categories["demos"].append((file_path.name, file_size))
            else:
                categories["misc"].append((file_path.name, file_size))
                
        # –í—ã–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
        for category, files in categories.items():
            if files:
                print(f"\n  üìÇ {category.upper()} ({len(files)} —Ñ–∞–π–ª–æ–≤):")
                for name, size in files:
                    size_kb = round(size / 1024, 1)
                    print(f"    ‚Ä¢ {name} ({size_kb} KB)")
                    
    def _find_functional_duplicates(self):
        """–ò—â–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print("\nüîç –ò—â—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Python —Ñ–∞–π–ª—ã
        all_py_files = []
        
        # –ö–æ—Ä–µ–Ω—å
        all_py_files.extend(self.project_root.glob("*.py"))
        
        # –ü–æ–¥–ø–∞–ø–∫–∏
        for subdir in ['kittycore', 'agents', 'tools', 'utils', 'cli', 'demos', 'scripts', 'data']:
            subdir_path = Path(subdir)
            if subdir_path.exists():
                all_py_files.extend(subdir_path.rglob("*.py"))
                
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ—É–Ω–∫—Ü–∏–π
        function_signatures = defaultdict(list)
        
        for file_path in all_py_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                # –ü–∞—Ä—Å–∏–º AST
                tree = ast.parse(content)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã
                for node in ast.walk(tree):
                    if isinstance(node, ast.FunctionDef):
                        signature = f"func_{node.name}_{len(node.args.args)}"
                        function_signatures[signature].append(str(file_path))
                    elif isinstance(node, ast.ClassDef):
                        signature = f"class_{node.name}"
                        function_signatures[signature].append(str(file_path))
                        
            except Exception as e:
                print(f"    ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ {file_path}: {e}")
                
        # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏
        duplicates_found = 0
        for signature, files in function_signatures.items():
            if len(files) > 1:
                # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ __init__.py
                real_files = [f for f in files if not ('test_' in f or '__init__' in f)]
                if len(real_files) > 1:
                    print(f"    üîÑ {signature}: {len(real_files)} –∫–æ–ø–∏–π")
                    for file_path in real_files[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"      ‚Ä¢ {file_path}")
                    self.duplicates[signature] = real_files
                    duplicates_found += 1
                    
        if duplicates_found == 0:
            print("    ‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        else:
            print(f"    ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {duplicates_found} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–µ–π")
            
    def _create_unified_structure(self):
        """–°–æ–∑–¥–∞—ë—Ç –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        print("\nüèóÔ∏è  –°–æ–∑–¥–∞—é –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–π–ª—ã
        remaining_moves = {
            "kot_razmer.py": "demos/",
            "card_generator.py": "utils/",
            "cards.py": "utils/", 
            "button.py": "utils/",
            "media_processing.py": "utils/",
            "radio_pi.py": "utils/",
            "model.py": "utils/",
            "synchro_settings.py": "utils/",
            "input_validation.py": "utils/",
            "validation.py": "utils/",
            "telegram_bot.py": "cli/"
        }
        
        moved_count = 0
        for file_name, target_dir in remaining_moves.items():
            file_path = Path(file_name)
            if file_path.exists():
                target_path = Path(target_dir) / file_name
                if not target_path.exists():
                    shutil.move(str(file_path), str(target_path))
                    print(f"    üöö {file_name} -> {target_dir}")
                    moved_count += 1
                    
        print(f"    ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} —Ñ–∞–π–ª–æ–≤")
        
    def _final_report(self):
        """–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç"""
        print("\n" + "="*60)
        print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ KITTYCORE 3.0")
        print("="*60)
        
        # –°—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
        root_py_files = list(self.project_root.glob("*.py"))
        print(f"\nüìÅ –§–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ: {len(root_py_files)}")
        
        if root_py_files:
            print("  –í–ê–ñ–ù–´–ï —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ:")
            for file_path in root_py_files:
                size_kb = round(file_path.stat().st_size / 1024, 1)
                print(f"    ‚Ä¢ {file_path.name} ({size_kb} KB)")
                
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫
        print(f"\nüìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
        folders = ['kittycore', 'agents', 'tools', 'utils', 'cli', 'demos', 'scripts', 'data']
        for folder in folders:
            folder_path = Path(folder)
            if folder_path.exists():
                py_count = len(list(folder_path.rglob("*.py")))
                print(f"    üìÅ {folder}/ ({py_count} —Ñ–∞–π–ª–æ–≤)")
                
        # –ê—Ä—Ö–∏–≤—ã
        archives = list(self.project_root.glob("archive_*"))
        print(f"\nüì¶ –ê—Ä—Ö–∏–≤–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(archives)}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"  ‚úÖ –ü—Ä–æ–µ–∫—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω!")
        print(f"  üìù –°–æ–∑–¥–∞—Ç—å requirements.txt")
        print(f"  üìö –û–±–Ω–æ–≤–∏—Ç—å README.md")
        print(f"  üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print(f"  üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–æ–≤")
        
        if len(root_py_files) <= 5:
            print(f"  üèÜ –û–¢–õ–ò–ß–ù–û! –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ —á–∏—Å—Ç!")
        elif len(root_py_files) <= 10:
            print(f"  üëç –•–û–†–û–®–û! –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ—á—Ç–∏ —á–∏—Å—Ç!")
        else:
            print(f"  ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –ï—â—ë –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    cleanup = FinalCleanup()
    cleanup.analyze_and_cleanup()

if __name__ == "__main__":
    main() 