#!/usr/bin/env python3
"""
ü§ñ TELEGRAM MOCK SERVER
–°–∏–º—É–ª—è—Ü–∏—è Telegram Bot API –¥–ª—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ OntoBot —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ü–æ–ª–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è Telegram Bot API
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
- –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
- Webhook –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import json
import time
from datetime import datetime, timezone
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, field, asdict
from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import uvicorn
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add(
    "logs/telegram_mock.log",
    rotation="10 MB",
    retention="7 days",
    compression="gz",
    format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | MOCK | {message}",
    level="DEBUG"
)

# === –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ===

@dataclass
class MockUser:
    """–ú–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram."""
    id: int
    first_name: str
    last_name: Optional[str] = None
    username: Optional[str] = None
    language_code: str = "ru"
    is_bot: bool = False

@dataclass
class MockChat:
    """–ú–æ–∫ —á–∞—Ç–∞ Telegram."""
    id: int
    type: str = "private"  # private, group, supergroup, channel
    title: Optional[str] = None
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None

@dataclass
class MockMessage:
    """–ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram."""
    message_id: int
    date: int
    chat: MockChat
    from_user: MockUser
    text: Optional[str] = None
    reply_markup: Optional[Dict] = None
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç Telegram API."""
        return {
            "message_id": self.message_id,
            "date": self.date,
            "chat": asdict(self.chat),
            "from": asdict(self.from_user),
            "text": self.text,
            "reply_markup": self.reply_markup
        }

@dataclass
class MockCallbackQuery:
    """–ú–æ–∫ callback query Telegram."""
    id: str
    from_user: MockUser
    message: MockMessage
    data: str
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç Telegram API."""
        return {
            "id": self.id,
            "from": asdict(self.from_user),
            "message": self.message.to_dict(),
            "data": self.data
        }

@dataclass
class MockUpdate:
    """–ú–æ–∫ update Telegram."""
    update_id: int
    message: Optional[MockMessage] = None
    callback_query: Optional[MockCallbackQuery] = None
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç Telegram API."""
        result = {"update_id": self.update_id}
        if self.message:
            result["message"] = self.message.to_dict()
        if self.callback_query:
            result["callback_query"] = self.callback_query.to_dict()
        return result

# === TELEGRAM MOCK SERVER ===

class TelegramMockServer:
    """
    –ú–æ–∫ —Å–µ—Ä–≤–µ—Ä Telegram Bot API.
    
    –°–∏–º—É–ª–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã Telegram API:
    - sendMessage
    - editMessageText
    - sendDocument
    - answerCallbackQuery
    - getUpdates
    """
    
    def __init__(self):
        self.app = FastAPI(title="Telegram Mock Server", version="1.0.0")
        self.messages: List[MockMessage] = []
        self.updates: List[MockUpdate] = []
        self.users: Dict[int, MockUser] = {}
        self.chats: Dict[int, MockChat] = {}
        self.message_counter = 1
        self.update_counter = 1
        self.callback_counter = 1
        self.webhook_url: Optional[str] = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–æ–≤
        self._setup_routes()
        
        logger.info("ü§ñ Telegram Mock Server –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_routes(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç API —Ä–æ—É—Ç—ã."""
        
        @self.app.get("/")
        async def root():
            return {
                "ok": True,
                "result": {
                    "server": "Telegram Mock Server",
                    "version": "1.0.0",
                    "messages_count": len(self.messages),
                    "updates_count": len(self.updates),
                    "users_count": len(self.users)
                }
            }
        
        @self.app.post("/bot{token}/sendMessage")
        async def send_message(token: str, request: Request):
            """–°–∏–º—É–ª—è—Ü–∏—è sendMessage."""
            data = await request.json()
            
            chat_id = int(data.get("chat_id"))
            text = data.get("text", "")
            parse_mode = data.get("parse_mode")
            reply_markup = data.get("reply_markup")
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —á–∞—Ç
            chat = self._get_or_create_chat(chat_id)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
            bot_user = MockUser(
                id=0,
                first_name="OntoBot",
                username="mr_ontobot",
                is_bot=True
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = MockMessage(
                message_id=self.message_counter,
                date=int(time.time()),
                chat=chat,
                from_user=bot_user,
                text=text,
                reply_markup=reply_markup
            )
            
            self.messages.append(message)
            self.message_counter += 1
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {text[:50]}...")
            
            return {
                "ok": True,
                "result": message.to_dict()
            }
        
        @self.app.post("/bot{token}/editMessageText")
        async def edit_message_text(token: str, request: Request):
            """–°–∏–º—É–ª—è—Ü–∏—è editMessageText."""
            data = await request.json()
            
            chat_id = int(data.get("chat_id"))
            message_id = int(data.get("message_id"))
            text = data.get("text", "")
            reply_markup = data.get("reply_markup")
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            for message in self.messages:
                if message.chat.id == chat_id and message.message_id == message_id:
                    message.text = text
                    message.reply_markup = reply_markup
                    
                    logger.info(f"‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}")
                    
                    return {
                        "ok": True,
                        "result": message.to_dict()
                    }
            
            raise HTTPException(status_code=400, detail="Message not found")
        
        @self.app.post("/bot{token}/sendDocument")
        async def send_document(token: str, request: Request):
            """–°–∏–º—É–ª—è—Ü–∏—è sendDocument."""
            data = await request.json()
            
            chat_id = int(data.get("chat_id"))
            document = data.get("document")
            caption = data.get("caption", "")
            
            chat = self._get_or_create_chat(chat_id)
            bot_user = MockUser(id=0, first_name="OntoBot", is_bot=True)
            
            message = MockMessage(
                message_id=self.message_counter,
                date=int(time.time()),
                chat=chat,
                from_user=bot_user,
                text=f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {document}\n{caption}"
            )
            
            self.messages.append(message)
            self.message_counter += 1
            
            logger.info(f"üìÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ —á–∞—Ç {chat_id}: {document}")
            
            return {
                "ok": True,
                "result": message.to_dict()
            }
        
        @self.app.post("/bot{token}/answerCallbackQuery")
        async def answer_callback_query(token: str, request: Request):
            """–°–∏–º—É–ª—è—Ü–∏—è answerCallbackQuery."""
            data = await request.json()
            
            callback_query_id = data.get("callback_query_id")
            text = data.get("text", "")
            show_alert = data.get("show_alert", False)
            
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ callback {callback_query_id}: {text}")
            
            return {
                "ok": True,
                "result": True
            }
        
        @self.app.get("/bot{token}/getUpdates")
        async def get_updates(token: str, offset: int = 0, limit: int = 100):
            """–°–∏–º—É–ª—è—Ü–∏—è getUpdates."""
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º updates –Ω–∞—á–∏–Ω–∞—è —Å offset
            result_updates = []
            for update in self.updates:
                if update.update_id >= offset:
                    result_updates.append(update.to_dict())
                    if len(result_updates) >= limit:
                        break
            
            logger.debug(f"üì• getUpdates: offset={offset}, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(result_updates)} updates")
            
            return {
                "ok": True,
                "result": result_updates
            }
        
        @self.app.post("/bot{token}/setWebhook")
        async def set_webhook(token: str, request: Request):
            """–°–∏–º—É–ª—è—Ü–∏—è setWebhook."""
            data = await request.json()
            
            self.webhook_url = data.get("url", "")
            
            logger.info(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.webhook_url}")
            
            return {
                "ok": True,
                "result": True,
                "description": "Webhook was set"
            }
        
        @self.app.post("/bot{token}/deleteWebhook")
        async def delete_webhook(token: str):
            """–°–∏–º—É–ª—è—Ü–∏—è deleteWebhook."""
            self.webhook_url = None
            
            logger.info("üóëÔ∏è Webhook —É–¥–∞–ª–µ–Ω")
            
            return {
                "ok": True,
                "result": True,
                "description": "Webhook was deleted"
            }
        
        # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===
        
        @self.app.get("/mock/stats")
        async def get_mock_stats():
            """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞."""
            return {
                "messages_count": len(self.messages),
                "updates_count": len(self.updates),
                "users_count": len(self.users),
                "chats_count": len(self.chats),
                "webhook_url": self.webhook_url
            }
        
        @self.app.get("/mock/messages")
        async def get_messages(chat_id: Optional[int] = None, limit: int = 50):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
            messages = self.messages
            
            if chat_id:
                messages = [m for m in messages if m.chat.id == chat_id]
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = messages[-limit:]
            
            return {
                "messages": [m.to_dict() for m in messages],
                "count": len(messages)
            }
        
        @self.app.post("/mock/simulate_user_message")
        async def simulate_user_message(request: Request):
            """–°–∏–º—É–ª—è—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
            data = await request.json()
            
            user_id = int(data.get("user_id"))
            chat_id = int(data.get("chat_id", user_id))
            text = data.get("text", "")
            first_name = data.get("first_name", "–¢–µ—Å—Ç–æ–≤—ã–π")
            username = data.get("username")
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç
            user = self._get_or_create_user(user_id, first_name, username)
            chat = self._get_or_create_chat(chat_id, first_name)
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message = MockMessage(
                message_id=self.message_counter,
                date=int(time.time()),
                chat=chat,
                from_user=user,
                text=text
            )
            
            # –°–æ–∑–¥–∞–µ–º update
            update = MockUpdate(
                update_id=self.update_counter,
                message=message
            )
            
            self.messages.append(message)
            self.updates.append(update)
            self.message_counter += 1
            self.update_counter += 1
            
            logger.info(f"üë§ –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")
            
            # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω webhook, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º update
            if self.webhook_url:
                await self._send_webhook_update(update)
            
            return {
                "ok": True,
                "result": update.to_dict()
            }
        
        @self.app.post("/mock/simulate_callback_query")
        async def simulate_callback_query(request: Request):
            """–°–∏–º—É–ª—è—Ü–∏—è callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
            data = await request.json()
            
            user_id = int(data.get("user_id"))
            chat_id = int(data.get("chat_id", user_id))
            callback_data = data.get("callback_data", "")
            message_id = int(data.get("message_id", self.message_counter - 1))
            first_name = data.get("first_name", "–¢–µ—Å—Ç–æ–≤—ã–π")
            username = data.get("username")
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç
            user = self._get_or_create_user(user_id, first_name, username)
            chat = self._get_or_create_chat(chat_id, first_name)
            
            # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            original_message = None
            for msg in self.messages:
                if msg.message_id == message_id and msg.chat.id == chat_id:
                    original_message = msg
                    break
            
            if not original_message:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                original_message = MockMessage(
                    message_id=message_id,
                    date=int(time.time()) - 60,
                    chat=chat,
                    from_user=MockUser(id=0, first_name="OntoBot", is_bot=True),
                    text="–ö–Ω–æ–ø–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                )
            
            # –°–æ–∑–¥–∞–µ–º callback query
            callback_query = MockCallbackQuery(
                id=str(self.callback_counter),
                from_user=user,
                message=original_message,
                data=callback_data
            )
            
            # –°–æ–∑–¥–∞–µ–º update
            update = MockUpdate(
                update_id=self.update_counter,
                callback_query=callback_query
            )
            
            self.updates.append(update)
            self.callback_counter += 1
            self.update_counter += 1
            
            logger.info(f"üîò –°–∏–º—É–ª—è—Ü–∏—è callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {callback_data}")
            
            # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω webhook, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º update
            if self.webhook_url:
                await self._send_webhook_update(update)
            
            return {
                "ok": True,
                "result": update.to_dict()
            }
        
        @self.app.delete("/mock/clear")
        async def clear_mock_data():
            """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞."""
            self.messages.clear()
            self.updates.clear()
            self.users.clear()
            self.chats.clear()
            self.message_counter = 1
            self.update_counter = 1
            self.callback_counter = 1
            
            logger.info("üßπ –î–∞–Ω–Ω—ã–µ –º–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞ –æ—á–∏—â–µ–Ω—ã")
            
            return {
                "ok": True,
                "result": "Mock data cleared"
            }
    
    def _get_or_create_user(self, user_id: int, first_name: str, username: Optional[str] = None) -> MockUser:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if user_id not in self.users:
            self.users[user_id] = MockUser(
                id=user_id,
                first_name=first_name,
                username=username
            )
        return self.users[user_id]
    
    def _get_or_create_chat(self, chat_id: int, first_name: Optional[str] = None) -> MockChat:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç —á–∞—Ç."""
        if chat_id not in self.chats:
            self.chats[chat_id] = MockChat(
                id=chat_id,
                type="private",
                first_name=first_name
            )
        return self.chats[chat_id]
    
    async def _send_webhook_update(self, update: MockUpdate):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç update –Ω–∞ webhook URL."""
        if not self.webhook_url:
            return
        
        try:
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.webhook_url,
                    json=update.to_dict(),
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 200:
                        logger.debug(f"üì° Update –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ webhook: {update.update_id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ webhook: {response.status}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook: {e}")

# === –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ===

async def start_mock_server():
    """–ó–∞–ø—É—Å–∫ Mock Server."""
    
    mock_server = TelegramMockServer()
    
    config = uvicorn.Config(
        mock_server.app,  # –ò—Å–ø—Ä–∞–≤–∏–ª: –∏—Å–ø–æ–ª—å–∑—É–µ–º mock_server.app –≤–º–µ—Å—Ç–æ app
        host="127.0.0.1", 
        port=8082,
        log_level="info"
    )
    
    server = uvicorn.Server(config)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Mock Server –Ω–∞ 127.0.0.1:8082")
    
    try:
        await server.serve()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

if __name__ == "__main__":
    asyncio.run(start_mock_server()) 