#!/usr/bin/env python3
"""
üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í–°–ï–• –£–°–ü–ï–®–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í –ü–ê–ú–Ø–¢–¨ KITTYCORE 3.0
–û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
"""

import json
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.append(str(Path(__file__).parent / 'kittycore'))

from kittycore.memory.enhanced_memory import EnhancedCollectiveMemory

class AllSuccessfulToolsSaver:
    def __init__(self):
        self.memory = EnhancedCollectiveMemory(team_id="comprehensive_tool_testing")
        
    async def save_all_successful_tools(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–º—è—Ç—å"""
        
        print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í–°–ï–• –£–°–ü–ï–®–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –í –ü–ê–ú–Ø–¢–¨ KITTYCORE 3.0")
        print("=" * 80)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        all_successful = []
        
        # 1. –ò–∑ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (enhanced_web_search, media_tool, network_tool)
        if Path("test_real_tools_final/memory_records.json").exists():
            with open("test_real_tools_final/memory_records.json", 'r', encoding='utf-8') as f:
                first_batch = json.load(f)
                all_successful.extend(first_batch)
                print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(first_batch)} –∑–∞–ø–∏—Å–µ–π –∏–∑ test_real_tools_final")
        
        # 2. –ò–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (api_request_tool, super_system_tool, email_tool)
        if Path("test_tools_fixed_api/memory_records.json").exists():
            with open("test_tools_fixed_api/memory_records.json", 'r', encoding='utf-8') as f:
                second_batch = json.load(f)
                all_successful.extend(second_batch)
                print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(second_batch)} –∑–∞–ø–∏—Å–µ–π –∏–∑ test_tools_fixed_api")
        
        # 3. –ò–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (computer_use_tool)
        if Path("test_final_comprehensive/memory_records.json").exists():
            with open("test_final_comprehensive/memory_records.json", 'r', encoding='utf-8') as f:
                third_batch = json.load(f)
                all_successful.extend(third_batch)
                print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(third_batch)} –∑–∞–ø–∏—Å–µ–π –∏–∑ test_final_comprehensive")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        unique_tools = {}
        for record in all_successful:
            tool_name = record['tool']
            if tool_name not in unique_tools:
                unique_tools[tool_name] = record
        
        print(f"üîß –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(unique_tools)}")
        print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —É—Å–ø–µ—à–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ –ø–∞–º—è—Ç—å
        saved_count = 0
        
        for tool_name, record in unique_tools.items():
            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–º—è—Ç–∏
                memory_content = {
                    "tool_name": tool_name,
                    "working_action": record.get("working_action", "default"),
                    "correct_params": record.get("correct_params", {}),
                    "performance": record.get("notes", ""),
                    "tested_successfully": True,
                    "test_type": "comprehensive_real_testing"
                }
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å A-MEM
                memory_id = await self.memory.store(
                    content=json.dumps(memory_content, ensure_ascii=False, indent=2),
                    tags=[
                        "tool_usage", 
                        "verified", 
                        "successful", 
                        tool_name, 
                        record.get("working_action", "default"),
                        "comprehensive_testing",
                        "no_mocks"
                    ]
                )
                
                saved_count += 1
                print(f"   ‚úÖ {tool_name}.{record.get('working_action', 'default')} ‚Üí —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (ID: {memory_id})")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {tool_name}: {e}")
        
        print()
        print(f"üéØ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(unique_tools)}")
        print(f"   üíæ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å: {saved_count}")
        print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {(saved_count/len(unique_tools)*100):.1f}%")
        
        # –°–æ–∑–¥–∞—ë–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
        await self._create_final_report(unique_tools)
    
    async def _create_final_report(self, unique_tools):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"""
        
        print(f"\nüìã –°–û–ó–î–ê–ù–ò–ï –ò–¢–û–ì–û–í–û–ì–û –û–¢–ß–Å–¢–ê...")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        categories = {
            "–í–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": ["enhanced_web_search_tool", "api_request_tool", "enhanced_web_scraping_tool", "web_client_tool"],
            "–°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": ["super_system_tool", "computer_use_tool", "security_tool"],
            "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": ["email_tool", "telegram_tool"],
            "–î–∞–Ω–Ω—ã–µ –∏ AI": ["database_tool", "ai_integration_tool", "smart_function_tool", "vector_search_tool"],
            "–ú–µ–¥–∏–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç": ["media_tool", "image_generation_tool", "document_tool"],
            "–°–µ—Ç–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏": ["network_tool"]
        }
        
        report = {
            "summary": {
                "total_tested_tools": len(unique_tools),
                "testing_approach": "Real API calls without mocks",
                "test_date": "2025-06-18",
                "system": "KittyCore 3.0 - –°–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–∞—è—Å—è –∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
            },
            "successful_tools": {},
            "categories_analysis": {}
        }
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, tool_list in categories.items():
            successful_in_category = [tool for tool in tool_list if tool in unique_tools]
            total_in_category = len(tool_list)
            success_rate = (len(successful_in_category) / total_in_category * 100) if total_in_category > 0 else 0
            
            report["categories_analysis"][category] = {
                "successful": len(successful_in_category),
                "total": total_in_category,
                "success_rate": success_rate,
                "working_tools": successful_in_category
            }
        
        # –î–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        for tool_name, record in unique_tools.items():
            report["successful_tools"][tool_name] = {
                "working_action": record.get("working_action", "default"),
                "correct_params": record.get("correct_params", {}),
                "performance_notes": record.get("notes", ""),
                "status": "verified_working"
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
        with open("COMPREHENSIVE_TOOLS_TESTING_REPORT.json", 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"   üìÑ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç: COMPREHENSIVE_TOOLS_TESTING_REPORT.json")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for category, analysis in report["categories_analysis"].items():
            print(f"   üîß {category}: {analysis['successful']}/{analysis['total']} = {analysis['success_rate']:.1f}%")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    saver = AllSuccessfulToolsSaver()
    await saver.save_all_successful_tools()

if __name__ == "__main__":
    asyncio.run(main()) 