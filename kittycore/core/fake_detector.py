#!/usr/bin/env python3
"""
üïµÔ∏è –î–ï–¢–ï–ö–¢–û–† –ü–û–î–î–ï–õ–û–ö KITTYCORE 3.0

–¶–µ–ª—å: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
–ü—Ä–∏–Ω—Ü–∏–ø: "–í–∏–Ω–æ–≤–µ–Ω –≤ –ø–æ–¥–¥–µ–ª–∫–µ, –ø–æ–∫–∞ –Ω–µ –¥–æ–∫–∞–∂–µ—à—å –æ–±—Ä–∞—Ç–Ω–æ–µ"

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–≥–ª—É—à–µ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
- –£—Å–ø–µ—Ö –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API –∫–ª—é—á–µ–π
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
- –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import re
import json
from typing import Dict, List, Tuple, Any, Optional
from pathlib import Path
import logging
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class FakeIndicator:
    """–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–¥–µ–ª–∫–∏"""
    type: str  # "pattern", "missing_key", "no_side_effect", "suspicious_data"
    severity: str  # "critical", "high", "medium", "low"
    description: str
    confidence: float  # 0.0-1.0

class FakeDetector:
    """
    üïµÔ∏è –î–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ–¥–¥–µ–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∑–∞–≥–ª—É—à–µ–∫
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API –∫–ª—é—á–µ–π
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    - –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–≥–ª—É—à–µ–∫
        self.fake_patterns = [
            r"\b(demo|mock|–∑–∞–≥–ª—É—à–∫–∞|example|placeholder|dummy|fake|test.data)\b",
            r"\b(–ø—Ä–∏–º–µ—Ä|–æ–±—Ä–∞–∑–µ—Ü|—à–∞–±–ª–æ–Ω|–¥–µ–º–æ.—Ä–µ–∂–∏–º|–≤—Ä–µ–º–µ–Ω–Ω–æ)\b",
            r"\b(coming.soon|under.development|not.implemented)\b",
            r"\b(todo|fixme|tbd|—Ç—É—Ç.–±—É–¥–µ—Ç|–∑–¥–µ—Å—å.–±—É–¥–µ—Ç)\b"
        ]
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ API –∫–ª—é—á–∞–º
        self.api_requirements = {
            'email_tool': ['SMTP_SERVER', 'SMTP_USERNAME', 'SMTP_PASSWORD'],
            'image_generation_tool': ['REPLICATE_API_TOKEN'],
            'telegram_tool': ['TELEGRAM_API_ID', 'TELEGRAM_API_HASH'],
            'database_tool': ['DATABASE_URL'],
            'ai_integration_tool': ['OPENROUTER_API_KEY']
        }
        
        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        self.suspicious_sizes = {
            'too_small': 10,      # < 10 –±–∞–π—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            'too_generic': 50,    # 10-50 –±–∞–π—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥–ª—É—à–∫–æ–π
            'template_size': 100  # –†–æ–≤–Ω–æ 100 –±–∞–π—Ç —á–∞—Å—Ç–æ —à–∞–±–ª–æ–Ω
        }
        
        logger.info("üïµÔ∏è FakeDetector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def detect_fake_result(self, tool_name: str, action: str, result: Any) -> Tuple[bool, List[FakeIndicator]]:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ–¥–¥–µ–ª–æ–∫
        
        Returns:
            (is_fake, indicators) - –ø–æ–¥–¥–µ–ª–∫–∞ –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        """
        indicators = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∑–∞–≥–ª—É—à–µ–∫
        pattern_indicators = self._check_fake_patterns(result)
        indicators.extend(pattern_indicators)
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        api_indicators = self._check_missing_api_keys(tool_name, result)
        indicators.extend(api_indicators)
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        side_effect_indicators = self._check_side_effects(tool_name, action, result)
        indicators.extend(side_effect_indicators)
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        data_indicators = self._check_suspicious_data(result)
        indicators.extend(data_indicators)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π –≤–µ—Ä–¥–∏–∫—Ç
        is_fake = self._calculate_fake_verdict(indicators)
        
        if indicators:
            logger.warning(f"üö® –ù–∞–π–¥–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–¥–¥–µ–ª–∫–∏ –¥–ª—è {tool_name}.{action}: {len(indicators)}")
            
        return is_fake, indicators
    
    def _check_fake_patterns(self, result: Any) -> List[FakeIndicator]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∑–∞–≥–ª—É—à–µ–∫ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"""
        indicators = []
        result_text = str(result).lower()
        
        for pattern in self.fake_patterns:
            matches = re.findall(pattern, result_text, re.IGNORECASE)
            if matches:
                indicators.append(FakeIndicator(
                    type="pattern",
                    severity="high",
                    description=f"–ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –∑–∞–≥–ª—É—à–∫–∏: {matches}",
                    confidence=0.9
                ))
        
        return indicators
    
    def _check_missing_api_keys(self, tool_name: str, result: Any) -> List[FakeIndicator]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—Ö–∞ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API –∫–ª—é—á–µ–π"""
        indicators = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç "—É—Å–ø–µ—à–Ω—ã–π"
        result_success = getattr(result, 'success', None)
        if not result_success:
            return indicators
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–±—É–µ–º—ã—Ö –∫–ª—é—á–µ–π
        required_keys = self.api_requirements.get(tool_name, [])
        for key in required_keys:
            if not os.getenv(key):
                indicators.append(FakeIndicator(
                    type="missing_key",
                    severity="critical",
                    description=f"–£—Å–ø–µ—Ö –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞: {key}",
                    confidence=1.0
                ))
        
        return indicators
    
    def _check_side_effects(self, tool_name: str, action: str, result: Any) -> List[FakeIndicator]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        indicators = []
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
        if tool_name == 'email_tool' and action == 'send_email':
            if not self._check_email_side_effects(result):
                indicators.append(FakeIndicator(
                    type="no_side_effect",
                    severity="critical", 
                    description="Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤",
                    confidence=0.95
                ))
                
        elif tool_name == 'super_system_tool' and 'create' in action:
            if not self._check_file_creation_side_effects(result):
                indicators.append(FakeIndicator(
                    type="no_side_effect",
                    severity="high",
                    description="–§–∞–π–ª —Å–æ–∑–¥–∞–Ω –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤",
                    confidence=0.8
                ))
        
        return indicators
    
    def _check_suspicious_data(self, result: Any) -> List[FakeIndicator]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö"""
        indicators = []
        
        result_data = getattr(result, 'data', str(result))
        data_size = len(str(result_data))
        
        # –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä
        if data_size < self.suspicious_sizes['too_small']:
            indicators.append(FakeIndicator(
                type="suspicious_data",
                severity="medium",
                description=f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {data_size} –±–∞–π—Ç",
                confidence=0.6
            ))
        
        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä (—á–∞—Å—Ç–æ –≤ —à–∞–±–ª–æ–Ω–∞—Ö)
        if data_size in [50, 100, 200, 500, 1000]:
            indicators.append(FakeIndicator(
                type="suspicious_data", 
                severity="low",
                description=f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {data_size} –±–∞–π—Ç",
                confidence=0.3
            ))
        
        return indicators
    
    def _check_email_side_effects(self, result: Any) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SMTP –ª–æ–≥–æ–≤, —Ñ–∞–π–ª–æ–≤ outbox, —Å—á—ë—Ç—á–∏–∫–æ–≤ –∏ —Ç.–¥.
        smtp_log_exists = Path('/var/log/mail.log').exists() or Path('/tmp/kittycore_smtp.log').exists()
        outbox_exists = Path('/tmp/kittycore_outbox').exists()
        
        return smtp_log_exists or outbox_exists
    
    def _check_file_creation_side_effects(self, result: Any) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        result_str = str(result)
        file_patterns = [r'/tmp/', r'/home/', r'\.txt', r'\.py', r'\.html']
        
        for pattern in file_patterns:
            if re.search(pattern, result_str):
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                potential_paths = re.findall(r'(/\S+\.\w+)', result_str)
                for path in potential_paths:
                    if Path(path).exists():
                        return True
        
        return False
    
    def _calculate_fake_verdict(self, indicators: List[FakeIndicator]) -> bool:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤–µ—Ä–¥–∏–∫—Ç–∞ –æ –ø–æ–¥–¥–µ–ª–∫–µ"""
        if not indicators:
            return False
            
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã = –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–¥–µ–ª–∫–∞
        critical_indicators = [i for i in indicators if i.severity == "critical"]
        if critical_indicators:
            return True
        
        # –í—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        total_score = sum(i.confidence for i in indicators)
        high_severity_count = len([i for i in indicators if i.severity == "high"])
        
        # –ü–æ–¥–¥–µ–ª–∫–∞ –µ—Å–ª–∏:
        # - –û–±—â–∏–π –±–∞–ª–ª > 1.5 –ò–õ–ò
        # - –ë–æ–ª—å—à–µ 2 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤—ã—Å–æ–∫–æ–π –≤–∞–∂–Ω–æ—Å—Ç–∏
        return total_score > 1.5 or high_severity_count > 2
    
    def generate_fake_report(self, tool_name: str, action: str, indicators: List[FakeIndicator]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–¥–¥–µ–ª–∫–∞—Ö"""
        if not indicators:
            return f"‚úÖ {tool_name}.{action}: –ü–æ–¥–¥–µ–ª–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        
        report = [f"üö® –û–¢–ß–Å–¢ –û –ü–û–î–î–ï–õ–ö–ê–•: {tool_name}.{action}"]
        report.append("=" * 50)
        
        for i, indicator in enumerate(indicators, 1):
            severity_emoji = {
                "critical": "üî¥",
                "high": "üü†", 
                "medium": "üü°",
                "low": "üîµ"
            }.get(indicator.severity, "‚ö™")
            
            report.append(
                f"{i}. {severity_emoji} {indicator.severity.upper()}: "
                f"{indicator.description} (–¥–æ–≤–µ—Ä–∏–µ: {indicator.confidence:.1f})"
            )
        
        fake_verdict = self._calculate_fake_verdict(indicators)
        verdict_emoji = "‚ùå –ü–û–î–î–ï–õ–ö–ê" if fake_verdict else "‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û"
        report.append(f"\nüéØ –í–ï–†–î–ò–ö–¢: {verdict_emoji}")
        
        return "\n".join(report)
    
    def get_honesty_score(self, indicators: List[FakeIndicator]) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ (0.0 = –ø–æ–¥–¥–µ–ª–∫–∞, 1.0 = —á–µ—Å—Ç–Ω–æ)"""
        if not indicators:
            return 1.0
            
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        penalty = 0.0
        for indicator in indicators:
            severity_penalties = {
                "critical": 1.0,  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π = –ø–æ–ª–Ω—ã–π –ø—Ä–æ–≤–∞–ª
                "high": 0.4,      # –í—ã—Å–æ–∫–∏–π = —Å–µ—Ä—å—ë–∑–Ω—ã–π —à—Ç—Ä–∞—Ñ
                "medium": 0.2,    # –°—Ä–µ–¥–Ω–∏–π = —Å—Ä–µ–¥–Ω–∏–π —à—Ç—Ä–∞—Ñ
                "low": 0.1        # –ù–∏–∑–∫–∏–π = –ª—ë–≥–∫–∏–π —à—Ç—Ä–∞—Ñ
            }
            penalty += severity_penalties.get(indicator.severity, 0.1) * indicator.confidence
        
        honesty_score = max(0.0, 1.0 - penalty)
        return honesty_score

def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥–¥–µ–ª–æ–∫"""
    detector = FakeDetector()
    
    # –¢–µ—Å—Ç 1: –Ø–≤–Ω–∞—è –ø–æ–¥–¥–µ–ª–∫–∞
    print("üß™ –¢–ï–°–¢ 1: –Ø–≤–Ω–∞—è –ø–æ–¥–¥–µ–ª–∫–∞")
    fake_result_mock = type('MockResult', (), {
        'success': True,
        'data': 'This is example data for demo purposes'
    })()
    
    is_fake, indicators = detector.detect_fake_result('email_tool', 'send_email', fake_result_mock)
    print(detector.generate_fake_report('email_tool', 'send_email', indicators))
    print(f"–û—Ü–µ–Ω–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏: {detector.get_honesty_score(indicators):.2f}")
    
    print("\n" + "="*60 + "\n")
    
    # –¢–µ—Å—Ç 2: –ß–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("üß™ –¢–ï–°–¢ 2: –ß–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    honest_result = type('HonestResult', (), {
        'success': True,
        'data': {'file_size': 1024, 'path': '/tmp/real_file.txt', 'status': 'created'}
    })()
    
    is_fake2, indicators2 = detector.detect_fake_result('media_tool', 'analyze_file', honest_result)
    print(detector.generate_fake_report('media_tool', 'analyze_file', indicators2))
    print(f"–û—Ü–µ–Ω–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏: {detector.get_honesty_score(indicators2):.2f}")

if __name__ == "__main__":
    main() 