#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã "Agents Building Agents"

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ MasterAgent —Å–æ–∑–¥–∞—ë—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
–¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π.
"""

import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é kittycore
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from kittycore.master_agent import create_master_agent
from kittycore.agent_factory import agent_factory

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def demo_browser_extension_task():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    """
    
    print("üöÄ === –î–ï–ú–û: –ê–ì–ï–ù–¢–´ –°–û–ó–î–ê–Æ–¢ –ê–ì–ï–ù–¢–û–í ===\n")
    
    # –°–æ–∑–¥–∞—ë–º –º–∞—Å—Ç–µ—Ä-–∞–≥–µ–Ω—Ç–∞
    print("1. üß† –°–æ–∑–¥–∞—é –º–∞—Å—Ç–µ—Ä-–∞–≥–µ–Ω—Ç–∞...")
    master = create_master_agent()
    print(f"   ‚úÖ –ú–∞—Å—Ç–µ—Ä-–∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {master.created_at}")
    
    # –ó–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    task = """
–°–æ–∑–¥–∞–π –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è Chrome, –∫–æ—Ç–æ—Ä–æ–µ:

1. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–µ–±-—Å–∞–π—Ç–∞—Ö
2. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ popup –æ–∫–Ω–µ
3. –ü–æ–∑–≤–æ–ª—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Å–∞–π—Ç—ã
4. –ò–º–µ–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ Manifest V3 –∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
"""
    
    print(f"2. üìã –ó–∞–¥–∞—á–∞:\n{task}\n")
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_context = {
        "experience_level": "intermediate",
        "target_browser": "chrome",
        "preferences": {
            "ui_style": "modern",
            "color_scheme": "dark"
        }
    }
    
    print("3. üéØ –ó–∞–ø—É—Å–∫–∞—é —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –º–∞—Å—Ç–µ—Ä-–∞–≥–µ–Ω—Ç–∞...")
    
    try:
        # –†–µ—à–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –º–∞—Å—Ç–µ—Ä-–∞–≥–µ–Ω—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤)
        result = master.solve_task(task, user_context)
        
        print("\n4. üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–ë–û–¢–´:")
        print("=" * 50)
        
        if result["success"]:
            print("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"\nüìù –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç:\n{result['final_report']}")
            
            print(f"\nü§ñ –°–æ–∑–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(result.get('agent_results', []))}")
            
            for i, agent_result in enumerate(result.get('agent_results', []), 1):
                print(f"\nüî∏ –ê–≥–µ–Ω—Ç {i}:")
                print(f"   –†–æ–ª—å: {agent_result['agent'][:80]}...")
                if agent_result['success']:
                    print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {agent_result['result'][:200]}...")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {agent_result['error']}")
        
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result['error']}")
            
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞—Ö
    print("\n5. üèóÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–û–ó–î–ê–ù–ù–´–• –ê–ì–ï–ù–¢–ê–•:")
    print("=" * 50)
    
    agents_info = master.get_managed_agents_info()
    print(f"–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {agents_info['total_agents']}")
    
    for agent_id, info in agents_info['agents'].items():
        print(f"\nü§ñ {agent_id}:")
        print(f"   –ü—Ä–æ–º–ø—Ç: {info['prompt']}")
        print(f"   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {info['tools']}")
        print(f"   –°–æ–∑–¥–∞–Ω: {info['created_at']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞—á
    history = master.get_task_history()
    print(f"\nüìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á: {len(history)} –∑–∞–ø–∏—Å–µ–π")
    
    return result


def demo_agent_factory():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã AgentFactory –Ω–∞–ø—Ä—è–º—É—é
    """
    
    print("\nüè≠ === –î–ï–ú–û: –§–ê–ë–†–ò–ö–ê –ê–ì–ï–ù–¢–û–í ===\n")
    
    # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
    print("1. üîç –°–æ–∑–¥–∞—é –∞–≥–µ–Ω—Ç–∞-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞...")
    analyst = agent_factory.create_browser_dev_agent(
        "Analyze the existing tg-stat-helper extension code and suggest improvements"
    )
    print(f"   ‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {analyst.created_at}")
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç–æ–≤
    print("\n2. üë• –°–æ–∑–¥–∞—é –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞...")
    team = agent_factory.create_collaborative_team(
        "Develop a comprehensive browser extension for productivity tracking"
    )
    print(f"   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(team)} –∞–≥–µ–Ω—Ç–æ–≤")
    
    for i, agent in enumerate(team, 1):
        print(f"   ü§ñ –ê–≥–µ–Ω—Ç {i}: {agent.prompt[:100]}...")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–±—Ä–∏–∫–µ
    print("\n3. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏:")
    created_agents = agent_factory.list_created_agents()
    print(f"   –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {len(created_agents)} –∞–≥–µ–Ω—Ç–æ–≤")
    
    for agent_id in created_agents:
        info = agent_factory.get_agent_info(agent_id)
        print(f"   üî∏ {agent_id}: {info.get('created_at', 'unknown')}")


def demo_simple_task():
    """
    –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–∞–ª–µ–Ω—å–∫–æ–π –∑–∞–¥–∞—á–µ
    """
    
    print("\nüéØ === –î–ï–ú–û: –ü–†–û–°–¢–ê–Ø –ó–ê–î–ê–ß–ê ===\n")
    
    master = create_master_agent()
    
    simple_task = "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π manifest.json –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å popup"
    
    print(f"–ó–∞–¥–∞—á–∞: {simple_task}")
    
    result = master.solve_task(simple_task)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result['success']}")
    if result['success']:
        print(f"–û—Ç—á—ë—Ç: {result['final_report'][:300]}...")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    print("üé™ KittyCore 2.0 - –°–∏—Å—Ç–µ–º–∞ '–ê–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç –∞–≥–µ–Ω—Ç–æ–≤'\n")
    
    try:
        # 1. –î–µ–º–æ –ø–æ–ª–Ω–æ–π –∑–∞–¥–∞—á–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        demo_browser_extension_task()
        
        # 2. –î–µ–º–æ —Ñ–∞–±—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
        demo_agent_factory()
        
        # 3. –î–µ–º–æ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏
        demo_simple_task()
        
        print("\nüéâ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    main() 