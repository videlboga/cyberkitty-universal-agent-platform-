#!/usr/bin/env python3
"""
üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ö–æ–Ω—Ç–µ–Ω—Ç + –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ OrchestratorAgent

–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç OrchestratorAgent –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
from typing import Dict, Any
from kittycore.core.content_integration import enhance_agent_with_content_system

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
try:
    from kittycore.core.orchestrator import OrchestratorAgent, OrchestratorConfig
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OrchestratorAgent: {e}")
    exit(1)

class EnhancedOrchestratorAgent:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π OrchestratorAgent —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç+–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"""
    
    def __init__(self, config: OrchestratorConfig = None):
        # –°–æ–∑–¥–∞—ë–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        self.original_orchestrator = OrchestratorAgent(config)
        self.config = config or OrchestratorConfig()
        
        print(f"üöÄ Enhanced OrchestratorAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.config.orchestrator_id}")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç–µ–Ω—Ç+–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def execute_task_with_content_validation(self, task: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        print(f"üéØ Enhanced Orchestrator –≤—ã–ø–æ–ª–Ω—è–µ—Ç: {task}")
        
        try:
            # –§–ê–ó–ê 1: –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            original_result = await self.original_orchestrator.execute_task(task, context)
            
            print(f"üì§ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(str(original_result))} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –§–ê–ó–ê 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —É–ª—É—á—à–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if isinstance(original_result, str):
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å—Ç—Ä–æ–∫–∞, —É–ª—É—á—à–∞–µ–º –µ—ë
                enhanced_result = enhance_agent_with_content_system(
                    agent_result=original_result,
                    task=task
                )
                
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É–ª—É—á—à–µ–Ω: {enhanced_result['success']}")
                print(f"üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {enhanced_result['content_file']}")
                
                return {
                    "status": "completed",
                    "task": task,
                    "original_result": original_result,
                    "enhanced_result": enhanced_result,
                    "content_file": enhanced_result["content_file"],
                    "metadata_file": enhanced_result["metadata_file"],
                    "validation": enhanced_result["validation"]
                }
            else:
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –æ–±—ä–µ–∫—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                print("‚ÑπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è (–Ω–µ —Å—Ç—Ä–æ–∫–∞)")
                return {
                    "status": "completed",
                    "task": task,
                    "result": original_result,
                    "enhanced": False
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Enhanced Orchestrator: {e}")
            return {
                "status": "failed",
                "task": task,
                "error": str(e)
            }
    
    # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    async def execute_task(self, task: str, context: Dict[str, Any] = None) -> Any:
        """–û–±—ã—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        return await self.original_orchestrator.execute_task(task, context)
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return self.original_orchestrator.get_statistics()

async def test_enhanced_orchestrator():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("üß™ === –¢–ï–°–¢ ENHANCED ORCHESTRATOR ===")
    
    # –°–æ–∑–¥–∞—ë–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    config = OrchestratorConfig(orchestrator_id="enhanced_test_orchestrator")
    enhanced_orchestrator = EnhancedOrchestratorAgent(config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    test_tasks = [
        "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello_world.py —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π Hello World",
        "–°–æ–∑–¥–∞–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ—Ç—è—Ç–∞–º–∏",
        "–°–æ–∑–¥–∞–π JSON —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"
    ]
    
    results = []
    
    for i, task in enumerate(test_tasks, 1):
        print(f"\nüéØ –ó–∞–¥–∞—á–∞ {i}: {task}")
        
        result = await enhanced_orchestrator.execute_task_with_content_validation(task)
        results.append(result)
        
        if result["status"] == "completed" and "enhanced_result" in result:
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {result['status']}")
            print(f"   üìÅ –§–∞–π–ª: {result.get('content_file', '–ù–µ —Å–æ–∑–¥–∞–Ω')}")
            print(f"   üéØ –í–∞–ª–∏–¥–∞—Ü–∏—è: {result['validation']['score']:.2f}")
        else:
            print(f"   ‚ùå –°—Ç–∞—Ç—É—Å: {result['status']}")
            if "error" in result:
                print(f"   üö´ –û—à–∏–±–∫–∞: {result['error']}")
    
    return results

async def compare_original_vs_enhanced():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("\n‚öñÔ∏è === –°–†–ê–í–ù–ï–ù–ò–ï –û–†–ò–ì–ò–ù–ê–õ VS ENHANCED ===")
    
    task = "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello_world.py —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π Hello World"
    
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    print("\nüî∏ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –û–†–ö–ï–°–¢–†–ê–¢–û–†:")
    original_config = OrchestratorConfig(orchestrator_id="original_test")
    original_orchestrator = OrchestratorAgent(original_config)
    
    try:
        original_result = await original_orchestrator.execute_task(task)
        print(f"   üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç: {str(original_result)[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        import os
        created_files = [f for f in os.listdir('.') if f.startswith('hello_world') and f.endswith('.py')]
        print(f"   üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {created_files}")
        
        if created_files:
            with open(created_files[0], 'r') as f:
                content = f.read()
            print(f"   üíé –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content[:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—á—ë—Ç
            is_report = any(pattern in content for pattern in ["–ó–∞–¥–∞—á–∞:", "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã"])
            print(f"   üö´ –≠—Ç–æ –æ—Ç—á—ë—Ç: {'–î–∞' if is_report else '–ù–µ—Ç'}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    print("\nüîπ ENHANCED –û–†–ö–ï–°–¢–†–ê–¢–û–†:")
    enhanced_config = OrchestratorConfig(orchestrator_id="enhanced_test")
    enhanced_orchestrator = EnhancedOrchestratorAgent(enhanced_config)
    
    try:
        enhanced_result = await enhanced_orchestrator.execute_task_with_content_validation(task)
        print(f"   üì§ –°—Ç–∞—Ç—É—Å: {enhanced_result['status']}")
        
        if "content_file" in enhanced_result:
            print(f"   üìÅ –§–∞–π–ª: {enhanced_result['content_file']}")
            
            with open(enhanced_result['content_file'], 'r') as f:
                content = f.read()
            print(f"   üíé –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—á—ë—Ç
            is_report = any(pattern in content for pattern in ["–ó–∞–¥–∞—á–∞:", "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã"])
            print(f"   üö´ –≠—Ç–æ –æ—Ç—á—ë—Ç: {'–î–∞' if is_report else '–ù–µ—Ç'}")
            print(f"   üéØ –í–∞–ª–∏–¥–∞—Ü–∏—è: {enhanced_result['validation']['score']:.2f}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ö–û–ù–¢–ï–ù–¢ + –ú–ï–¢–ê–î–ê–ù–ù–´–ï –í ORCHESTRATOR")
    print("=" * 80)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    results = await test_enhanced_orchestrator()
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
    await compare_original_vs_enhanced()
    
    print("\nüìä –ò–¢–û–ì–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
    successful_tasks = sum(1 for r in results if r.get("status") == "completed")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–¥–∞—á: {successful_tasks}/{len(results)}")
    
    enhanced_tasks = sum(1 for r in results if r.get("enhanced_result"))
    print(f"üîß –£–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {enhanced_tasks}/{len(results)}")
    
    if successful_tasks == len(results):
        print("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
        print("‚úÖ Enhanced OrchestratorAgent —Å–æ–∑–¥–∞—ë—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

if __name__ == "__main__":
    asyncio.run(main()) 