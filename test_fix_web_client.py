#!/usr/bin/env python3
"""
üåê –û–¢–õ–ê–î–ö–ê: web_client_tool
–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

–û–°–û–ë–ï–ù–ù–û–°–¢–ò:
- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –°–ò–ù–•–†–û–ù–ù–´–ô (–ù–ï async)
- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: url (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π), check_type, timeout
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 3 —Ç–∏–ø–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫: status, ping, full
- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ToolResult —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

–ü–õ–ê–ù –û–¢–õ–ê–î–ö–ò:
1. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (url, check_type)
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–µ–±-–ø—Ä–æ–≤–µ—Ä–æ–∫
"""

import time
import json

# –ò–º–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
try:
    from kittycore.tools.web_client_tool import WebClientTool
    IMPORT_OK = True
    print("‚úÖ –ò–º–ø–æ—Ä—Ç web_client_tool —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ –û–®–ò–ë–ö–ê: {e}")
    IMPORT_OK = False

def test_web_client_status():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP —Å—Ç–∞—Ç—É—Å–∞"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüåê –¢–µ—Å—Ç–∏—Ä—É—é web_client —Å–æ status –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
    start_time = time.time()
    
    tool = WebClientTool()
    
    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –≤—ã–∑–æ–≤: –æ–±—ã—á–Ω—ã–π execute (–ù–ï await) + url + check_type
    result = tool.execute(
        url="https://httpbin.org/status/200",
        check_type="status",
        timeout=10
    )
    
    execution_time = time.time() - start_time
    
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            print(f"üì¶ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(str(data))} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if isinstance(data, dict):
                print(f"üîë –ö–ª—é—á–∏ –¥–∞–Ω–Ω—ã—Ö: {list(data.keys())[:10]}...")  # –ü–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–π
                print(f"üéØ URL: {data.get('url', '–ù–ï–¢')}")
                print(f"üåê –î–æ–º–µ–Ω: {data.get('domain', '–ù–ï–¢')}")
                print(f"üì° –°—Ç–∞—Ç—É—Å –∫–æ–¥: {data.get('status_code', '–ù–ï–¢')}")
                print(f"‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω: {data.get('available', '–ù–ï–¢')}")
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {data.get('response_time_ms', '–ù–ï–¢')}–º—Å")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {getattr(result, 'error', '–ù–ï–ò–ó–í–ï–°–¢–ù–û')}")
    
    return result

def test_web_client_ping():
    """–¢–µ—Å—Ç ping –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüåê –¢–µ—Å—Ç–∏—Ä—É—é web_client —Å ping –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
    
    tool = WebClientTool()
    
    # –¢–µ—Å—Ç ping
    result = tool.execute(
        url="https://httpbin.org",
        check_type="ping"
    )
    
    print(f"üìä Ping —Ç–µ—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            print(f"üèì Ping —É—Å–ø–µ—Ö: {data.get('ping_success', '–ù–ï–¢')}")
            print(f"üåê –î–æ–º–µ–Ω: {data.get('domain', '–ù–ï–¢')}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è ping: {data.get('ping_time_seconds', '–ù–ï–¢')}—Å")
    
    return result

def test_web_client_full():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüåê –¢–µ—Å—Ç–∏—Ä—É—é web_client —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
    
    tool = WebClientTool()
    
    # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    result = tool.execute(
        url="https://httpbin.org",
        check_type="full",
        timeout=15
    )
    
    print(f"üìä –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            print(f"üåê –û–±—â–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {data.get('overall_available', '–ù–ï–¢')}")
            print(f"üìù –°–≤–æ–¥–∫–∞: {len(data.get('summary', []))} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            if 'summary' in data:
                for item in data['summary'][:3]:  # –ü–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
                    print(f"   {item}")
    
    return result

def test_web_client_action_api():
    """–¢–µ—Å—Ç —á–µ—Ä–µ–∑ execute_action API"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüåê –¢–µ—Å—Ç–∏—Ä—É—é web_client —á–µ—Ä–µ–∑ execute_action...")
    
    tool = WebClientTool()
    
    # –¢–µ—Å—Ç —á–µ—Ä–µ–∑ action API
    result = tool.execute_action(
        action="status",
        url="https://httpbin.org/status/200"
    )
    
    print(f"üìä Action API —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success:
            data_size = len(str(result.data)) if hasattr(result, 'data') else 0
            print(f"üì¶ –†–∞–∑–º–µ—Ä: {data_size} –±–∞–π—Ç")
    
    return result

def is_result_honest(result, test_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if not result:
        print(f"‚ùå {test_name}: –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return False
    
    if not hasattr(result, 'success'):
        print(f"‚ùå {test_name}: –ù–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ success")
        return False
    
    if not result.success:
        print(f"‚ùå {test_name}: success=False")
        if hasattr(result, 'error'):
            print(f"   –û—à–∏–±–∫–∞: {result.error}")
        return False
    
    if not hasattr(result, 'data') or not result.data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    data = result.data
    data_str = str(data)
    data_size = len(data_str)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–µ–π–∫–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    fake_patterns = [
        "web_client: —É—Å–ø–µ—à–Ω–æ",
        "–¥–µ–º–æ –ø—Ä–æ–≤–µ—Ä–∫–∞",
        "–∑–∞–≥–ª—É—à–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞",
        "—Ç–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
    ]
    
    for pattern in fake_patterns:
        if pattern.lower() in data_str.lower():
            print(f"‚ùå {test_name}: –ù–∞–π–¥–µ–Ω —Ñ–µ–π–∫–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–∑–Ω–∞–∫–∏
    web_indicators = [
        "status_code", "response_time", "domain", "available", "ping_success", "url", "httpbin"
    ]
    
    has_web_data = any(indicator in data_str.lower() for indicator in web_indicators)
    
    if not has_web_data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ–±-–ø—Ä–æ–≤–µ—Ä–∫–∏")
        return False
    
    if data_size < 50:
        print(f"‚ùå {test_name}: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['url', 'check_type']
    missing_fields = [field for field in required_fields if field not in data]
    
    if missing_fields:
        print(f"‚ùå {test_name}: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
        return False
    
    print(f"‚úÖ {test_name}: –ß–ï–°–¢–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("üåê –û–¢–õ–ê–î–ö–ê: web_client_tool")
    print("=" * 50)
    
    if not IMPORT_OK:
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞")
        return
    
    results = {}
    
    # –¢–µ—Å—Ç 1: Status –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 1: Status –ø—Ä–æ–≤–µ—Ä–∫–∞")
    try:
        result1 = test_web_client_status()
        results["status_check"] = is_result_honest(result1, "Status –ø—Ä–æ–≤–µ—Ä–∫–∞")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 1 –û–®–ò–ë–ö–ê: {e}")
        results["status_check"] = False
    
    # –¢–µ—Å—Ç 2: Ping –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 2: Ping –ø—Ä–æ–≤–µ—Ä–∫–∞")
    try:
        result2 = test_web_client_ping()
        results["ping_check"] = is_result_honest(result2, "Ping –ø—Ä–æ–≤–µ—Ä–∫–∞")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 2 –û–®–ò–ë–ö–ê: {e}")
        results["ping_check"] = False
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 3: –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
    try:
        result3 = test_web_client_full()
        results["full_check"] = is_result_honest(result3, "–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 3 –û–®–ò–ë–ö–ê: {e}")
        results["full_check"] = False
    
    # –¢–µ—Å—Ç 4: Action API
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 4: Action API")
    try:
        result4 = test_web_client_action_api()
        results["action_api"] = is_result_honest(result4, "Action API")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 4 –û–®–ò–ë–ö–ê: {e}")
        results["action_api"] = False
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –û–¢–õ–ê–î–ö–ò:")
    
    total_tests = len(results)
    passed_tests = sum(1 for success in results.values() if success)
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    print("\n–î–µ—Ç–∞–ª–∏:")
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("web_client_fix_results.json", "w", encoding="utf-8") as f:
        json.dump({
            "tool": "web_client_tool",
            "tests": results,
            "summary": {
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "success_rate": success_rate
            },
            "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ web_client_fix_results.json")
    
    # –í–µ—Ä–¥–∏–∫—Ç
    if success_rate >= 75:
        print("\nüéâ WEB_CLIENT_TOOL –ò–°–ü–†–ê–í–õ–ï–ù!")
        print("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        return True
    elif success_rate >= 50:
        print("\n‚ö†Ô∏è WEB_CLIENT_TOOL –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
        return False
    else:
        print("\n‚ùå WEB_CLIENT_TOOL –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        return False

if __name__ == "__main__":
    main() 