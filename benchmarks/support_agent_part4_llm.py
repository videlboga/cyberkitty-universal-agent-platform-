#!/usr/bin/env python3
"""
üéß –ù–ê–°–¢–û–Ø–©–ò–ô LLM-–ê–ì–ï–ù–¢ –ü–û–î–î–ï–†–ñ–ö–ò
–ê–≥–µ–Ω—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ LLM
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

import time
import json
from typing import Dict, Any, Optional
from support_agent_part1_knowledge import *

# –ü—Ä–æ—Å—Ç–æ–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class SimpleLLMProvider:
    """–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
    
    async def analyze_problem(self, problem: str, customer_context: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã (–∏–º–∏—Ç–∞—Ü–∏—è LLM)"""
        problem_lower = problem.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if any(word in problem_lower for word in ["–Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ—Ç–∫–ª—é—á–∏–ª—Å—è"]):
            category = "connectivity"
        elif any(word in problem_lower for word in ["–º–µ–¥–ª–µ–Ω–Ω–æ", "—Ç–æ—Ä–º–æ–∑–∏—Ç", "—Å–∫–æ—Ä–æ—Å—Ç—å"]):
            category = "performance"
        elif any(word in problem_lower for word in ["–ø–∞—Ä–æ–ª—å", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "wifi"]):
            category = "configuration"
        elif any(word in problem_lower for word in ["—Ä–æ—É—Ç–µ—Ä", "–Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è", "—Å–ª–æ–º–∞–ª—Å—è"]):
            category = "equipment"
        else:
            category = "other"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        if any(word in problem_lower for word in ["!!!", "–æ–ø—è—Ç—å", "—É–∂–µ", "–∫–æ–Ω—á–∏—Ç—Å—è"]):
            mood = "angry"
        elif any(word in problem_lower for word in ["–ø–æ–º–æ–≥–∏—Ç–µ", "–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è", "–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ"]):
            mood = "confused"
        elif "—Ç—Ä–µ—Ç–∏–π —Ä–∞–∑" in problem_lower or "—Å–Ω–æ–≤–∞" in problem_lower:
            mood = "frustrated"
        else:
            mood = "calm"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ—á–Ω–æ—Å—Ç—å
        urgency = 3
        if "—Å—Ä–æ—á–Ω–æ" in problem_lower or mood == "angry":
            urgency = 5
        elif "–Ω–µ —Ä–∞–±–æ—Ç–∞—é" in problem_lower or "–≤–∞–∂–Ω–æ" in problem_lower:
            urgency = 4
        
        return {
            "problem_category": category,
            "urgency_level": urgency,
            "customer_mood": mood,
            "escalation_needed": mood == "angry" and "—Ç—Ä–µ—Ç–∏–π —Ä–∞–∑" in problem_lower,
            "reasoning": f"–ü—Ä–æ–±–ª–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}, –∫–ª–∏–µ–Ω—Ç {mood}, —Å—Ä–æ—á–Ω–æ—Å—Ç—å {urgency}/5"
        }
    
    async def generate_response(self, problem: str, mood: str, solution_steps: list = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É"""
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
        if mood == "angry":
            greeting = "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ, –¥–∞–≤–∞–π—Ç–µ –±—ã—Å—Ç—Ä–æ —Ä–µ—à–∏–º –ø—Ä–æ–±–ª–µ–º—É."
        elif mood == "frustrated":
            greeting = "–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, –ø–æ–º–æ–∂–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è."
        elif mood == "confused":
            greeting = "–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É! –í—Å—ë –æ–±—ä—è—Å–Ω—é –ø–æ—à–∞–≥–æ–≤–æ."
        else:
            greeting = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –†–µ—à–∏–º –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É."
        
        if solution_steps:
            steps_text = " ".join([f"{i+1}) {step}." for i, step in enumerate(solution_steps[:2])])
            return f"{greeting} {steps_text} –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç - —Å–æ–æ–±—â–∏—Ç–µ!"
        else:
            return f"{greeting} –ü–µ—Ä–µ–¥–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."

class LLMSupportAgent:
    """LLM-–∞–≥–µ–Ω—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    
    def __init__(self, name: str = "LLM –ê–≥–µ–Ω—Ç –ö–∏–±–µ—Ä–ö–æ—Ç"):
        self.name = name
        self.knowledge_base = KnowledgeBase()
        self.customer_db = CustomerDatabase()
        self.llm = SimpleLLMProvider()
    
    async def handle_ticket(self, ticket: SupportTicket) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–∫–µ—Ç–∞ —Å LLM-–∞–Ω–∞–ª–∏–∑–æ–º"""
        print(f"\nüéß {self.name} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç #{ticket.id}")
        print(f"–ö–ª–∏–µ–Ω—Ç: {ticket.customer.name} (—Ä–µ–π—Ç–∏–Ω–≥: {ticket.customer.satisfaction_score}/5.0)")
        print(f"–ü—Ä–æ–±–ª–µ–º–∞: {ticket.problem_description}")
        
        start_time = time.time()
        
        # 1. LLM-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
        print("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–±–ª–µ–º—É —á–µ—Ä–µ–∑ LLM...")
        customer_context = f"–ò—Å—Ç–æ—Ä–∏—è: {len(ticket.customer.history)} –æ–±—Ä–∞—â–µ–Ω–∏–π, —Ä–µ–π—Ç–∏–Ω–≥: {ticket.customer.satisfaction_score}"
        analysis = await self.llm.analyze_problem(ticket.problem_description, customer_context)
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑: {analysis['problem_category']} | {analysis['customer_mood']} | —Å—Ä–æ—á–Ω–æ—Å—Ç—å {analysis['urgency_level']}/5")
        print(f"üí≠ {analysis['reasoning']}")
        
        # 2. –ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏—è –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        solutions = self.knowledge_base.search(ticket.problem_description)
        solution = solutions[0] if solutions else None
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        print("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç...")
        solution_steps = solution.solution_steps if solution else None
        response_text = await self.llm.generate_response(
            ticket.problem_description, 
            analysis['customer_mood'], 
            solution_steps
        )
        
        processing_time = time.time() - start_time
        
        # 4. –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è
        if analysis['escalation_needed'] or not solution:
            ticket.status = TicketStatus.ESCALATED
            result = {
                "status": "escalated",
                "reason": analysis['reasoning'],
                "response": response_text,
                "processing_time": processing_time,
                "llm_analysis": analysis
            }
            print(f"‚ö†Ô∏è –≠—Å–∫–∞–ª–∞—Ü–∏—è: {analysis['reasoning']}")
        else:
            ticket.status = TicketStatus.RESOLVED
            
            # –û—Ü–µ–Ω–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
            base_satisfaction = 4.0
            if analysis['customer_mood'] == 'angry':
                base_satisfaction = 2.5
            elif analysis['customer_mood'] == 'frustrated':
                base_satisfaction = 3.0
            elif analysis['customer_mood'] == 'confused':
                base_satisfaction = 4.2
            
            # –ë–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä–æ—Ç—É
            if processing_time < 2:
                base_satisfaction += 0.5
            
            ticket.customer_satisfaction = min(base_satisfaction, 5.0)
            
            result = {
                "status": "resolved",
                "solution_used": solution.title,
                "response": response_text,
                "processing_time": processing_time,
                "customer_satisfaction": ticket.customer_satisfaction,
                "llm_analysis": analysis
            }
            print(f"‚úÖ –†–µ—à–µ–Ω–æ –∑–∞ {processing_time:.1f} —Å–µ–∫, –æ—Ü–µ–Ω–∫–∞: {ticket.customer_satisfaction:.1f}/5.0")
        
        print(f"üí¨ –û—Ç–≤–µ—Ç: {response_text}")
        return result

# –¢–µ—Å—Ç LLM-–∞–≥–µ–Ω—Ç–∞
if __name__ == "__main__":
    import asyncio
    
    async def test_llm_agent():
        print("üéß –¢–ï–°–¢ LLM-–ê–ì–ï–ù–¢–ê –ü–û–î–î–ï–†–ñ–ö–ò")
        print("=" * 60)
        
        agent = LLMSupportAgent()
        customers = agent.customer_db
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å —Ä–∞–∑–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
        test_cases = [
            ("cust_001", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –£ –º–µ–Ω—è –¥–æ–º–∞ –ø—Ä–æ–ø–∞–ª –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ —á—Ç–æ –¥–µ–ª–∞—Ç—å?"),
            ("cust_003", "–û–ü–Ø–¢–¨ –ù–ï –†–ê–ë–û–¢–ê–ï–¢! –£–∂–µ —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑ –∑–∞ –º–µ—Å—è—Ü! –ö–æ–≥–¥–∞ —ç—Ç–æ –∫–æ–Ω—á–∏—Ç—Å—è?!"),
            ("cust_002", "–ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–æ–ª—å wifi, –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∑–∞–π—Ç–∏ –≤ —Ä–æ—É—Ç–µ—Ä"),
            ("cust_001", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å–∞–π—Ç—ã")
        ]
        
        for i, (customer_id, problem) in enumerate(test_cases, 1):
            customer = customers.get_customer(customer_id)
            
            ticket = SupportTicket(
                id=f"LLM_{i:03d}",
                customer=customer,
                problem_description=problem,
                priority=TicketPriority.MEDIUM,
                status=TicketStatus.NEW,
                created_at=time.time(),
                agent_actions=[]
            )
            
            result = await agent.handle_ticket(ticket)
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['status']}")
            print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_llm_agent()) 