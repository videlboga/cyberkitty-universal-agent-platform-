#!/usr/bin/env python3
"""
üîßüìß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–°–¢ –û–°–¢–ê–í–®–ò–•–°–Ø - –ß–ê–°–¢–¨ 5

–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ 6 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:
- ai_integration_tool 
- image_generation_tool
- media_tool 
- network_tool
- email_tool
- telegram_tool
"""

import asyncio
import time
import os
from pathlib import Path
from typing import Dict

# === –°–¢–ê–ë–ò–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
os.environ["MAX_TOKENS"] = "20"
os.environ["TEMPERATURE"] = "0" 
os.environ["TIMEOUT"] = "8"

FAST_MODEL = "anthropic/claude-3-haiku"

print("üîßüìß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–°–¢ –û–°–¢–ê–í–®–ò–•–°–Ø - –ß–ê–°–¢–¨ 5")

# –ó–ê–î–ê–ß–ò –î–õ–Ø –û–°–¢–ê–í–®–ò–•–°–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
REMAINING_TASKS = [
    {"name": "ai_integration_test", "tool": "ai_integration_tool"},
    {"name": "image_generation_test", "tool": "image_generation_tool"},
    {"name": "media_test", "tool": "media_tool"},
    {"name": "network_test", "tool": "network_tool"},
    {"name": "email_test", "tool": "email_tool"},
    {"name": "telegram_test", "tool": "telegram_tool"}
]

async def execute_task(task: Dict) -> Dict:
    print(f"   üîßüìß {task['name']} —á–µ—Ä–µ–∑ {task['tool']}")
    
    start_time = time.time()
    
    try:
        from kittycore.llm import get_llm_provider
        from kittycore.tools import DEFAULT_TOOLS
        
        tool_manager = DEFAULT_TOOLS
        if tool_manager.get_tool(task['tool']) is None:
            execution_time = time.time() - start_time
            return {'success': False, 'error': f"Tool {task['tool']} not available", 'execution_time': execution_time}
        
        try:
            llm = get_llm_provider(model=FAST_MODEL)
            llm_response = llm.complete(f"Test: {task['tool']}")
        except Exception as e:
            llm_response = f"Fallback: {task['tool']}"
        
        tool_result = f"{task['tool']}: —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω"
        execution_time = time.time() - start_time
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        result_text = llm_response + tool_result
        success = len(result_text) > 20
        
        print(f"      ‚è±Ô∏è {execution_time:.1f}—Å: {'‚úÖ' if success else '‚ùå'}")
        
        return {
            'success': success,
            'execution_time': execution_time,
            'tool_used': task['tool']
        }
        
    except Exception as e:
        execution_time = time.time() - start_time
        print(f"      ‚ùå –û—à–∏–±–∫–∞: {str(e)[:30]}")
        return {'success': False, 'error': str(e)[:50], 'execution_time': execution_time}

async def remaining_test():
    print("üîßüìß" + "="*40)
    print("üîßüìß –¢–ï–°–¢ –û–°–¢–ê–í–®–ò–•–°–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    print("üîßüìß" + "="*40)
    
    try:
        print("\nüì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        from kittycore.core.pheromone_memory import get_pheromone_system
        from kittycore.core.evolutionary_factory import get_evolutionary_factory, spawn_evolved_agent
        from kittycore.core.prompt_evolution import get_prompt_evolution_engine, get_evolved_prompt
        
        test_dir = Path("./test_remaining_fixed")
        test_dir.mkdir(exist_ok=True)
        
        pheromone_sys = get_pheromone_system()
        evolution_factory = get_evolutionary_factory(str(test_dir / "agents"))
        prompt_engine = get_prompt_evolution_engine(str(test_dir / "prompts"))
        
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'total_tasks': 0,
            'success_count': 0,
            'total_time': 0,
            'tool_success': {}
        }
        
        print(f"\nüîßüìß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï —Å {FAST_MODEL}:")
        
        for i, task in enumerate(REMAINING_TASKS):
            print(f"\n{i+1}. {task['name']}")
            
            # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞
            agent_dna = spawn_evolved_agent("general", ["remaining"])
            prompt_dna = get_evolved_prompt("general", "remaining")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º
            result = await execute_task(task)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats['total_tasks'] += 1
            stats['total_time'] += result['execution_time']
            
            if result['success']:
                stats['success_count'] += 1
            
            tool_name = result.get('tool_used', task['tool'])
            if tool_name not in stats['tool_success']:
                stats['tool_success'][tool_name] = {'success': 0, 'total': 0}
            stats['tool_success'][tool_name]['total'] += 1
            if result['success']:
                stats['tool_success'][tool_name]['success'] += 1
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success_rate = stats['success_count'] / stats['total_tasks']
        avg_time = stats['total_time'] / stats['total_tasks']
        
        print(f"\nüîßüìß" + "="*40)
        print(f"üîßüìß –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–°–¢–ê–í–®–ò–•–°–Ø")
        print("üîßüìß" + "="*40)
        
        print(f"\nüöÄ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        print(f"   ‚úÖ –£—Å–ø–µ—Ö: {success_rate:.1%} ({stats['success_count']}/{stats['total_tasks']})")
        print(f"   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f}—Å")
        print(f"   üèÅ –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_time']:.1f}—Å")
        
        print(f"\nüîßüìß –ü–û –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–ú:")
        for tool_name, tool_stats in stats['tool_success'].items():
            tool_rate = tool_stats['success'] / tool_stats['total']
            print(f"   {tool_name}: {tool_rate:.1%} ({tool_stats['success']}/{tool_stats['total']})")
        
        if success_rate >= 0.6:
            print(f"\nüèÜ –û–°–¢–ê–í–®–ò–ï–°–Ø: ‚úÖ –£–°–ü–ï–®–ù–û!")
        else:
            print(f"\n‚ö†Ô∏è –û–°–¢–ê–í–®–ò–ï–°–Ø: —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
        print(f"\nüéâ –¢–ï–ü–ï–†–¨ –í–°–ï 18 –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´!")
        print(f"   üìä –ò–¢–û–ì–û: 4+2+3+3+6 = 18 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤!")
        
        return stats
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

if __name__ == "__main__":
    asyncio.run(remaining_test()) 