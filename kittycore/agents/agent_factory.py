"""
Agent Factory - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤

–ê–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á.
"""

from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import json
import logging

from .base_agent import Agent

# TODO: –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
BROWSER_TOOLS = []  # –ë—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
UNIVERSAL_TOOLS = []  # –ë—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏

logger = logging.getLogger(__name__)


@dataclass
class AgentSpecification:
    """–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    role: str
    expertise: List[str]
    prompt_template: str
    tools: List[str]
    model: str = "deepseek/deepseek-chat"
    context: Dict[str, Any] = None


class AgentFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.created_agents: Dict[str, Agent] = {}
        self.agent_templates = self._load_agent_templates()
        self.available_tools = self._register_tools()
    
    def create_agent(self, specification: AgentSpecification) -> Agent:
        """–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            agent_id = f"{specification.role}_{len(self.created_agents)}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
            prompt = self._generate_prompt(specification)
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            tools = self._gather_tools(specification.tools)
            
            # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞
            agent = Agent(
                prompt=prompt,
                model=specification.model,
                tools=tools
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            self.created_agents[agent_id] = agent
            
            logger.info(f"–°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç: {agent_id} —Å —Ä–æ–ª—å—é {specification.role}")
            return agent
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {e}")
            raise
    
    def create_browser_dev_agent(self, task_description: str) -> Agent:
        """–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        specialization = self._analyze_browser_task(task_description)
        
        spec = AgentSpecification(
            role=specialization["role"],
            expertise=specialization["expertise"],
            prompt_template=specialization["prompt"],
            tools=["filesystem", "manifest_validator", "human_request", "Python", "Pandas", "Calculator"],
            context={"task": task_description}
        )
        
        return self.create_agent(spec)
    
    def create_collaborative_team(self, project_description: str) -> List[Agent]:
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        subtasks = self._decompose_project(project_description)
        
        team = []
        for subtask in subtasks:
            agent_spec = self._design_agent_for_task(subtask)
            agent = self.create_agent(agent_spec)
            team.append(agent)
        
        return team
    
    def _analyze_browser_task(self, task: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞"""
        
        task_lower = task.lower()
        
        if any(word in task_lower for word in ["analyze", "review", "examine"]):
            return {
                "role": "analyst",
                "expertise": ["code_analysis", "architecture_review"],
                "prompt": self.agent_templates["analyst"]
            }
        
        elif any(word in task_lower for word in ["create", "develop", "build", "code"]):
            return {
                "role": "developer", 
                "expertise": ["coding", "manifest_creation", "javascript"],
                "prompt": self.agent_templates["developer"]
            }
            
        elif any(word in task_lower for word in ["test", "validate", "check"]):
            return {
                "role": "tester",
                "expertise": ["testing", "validation", "debugging"],
                "prompt": self.agent_templates["tester"] 
            }
            
        else:
            return {
                "role": "generalist",
                "expertise": ["general_development"],
                "prompt": self.agent_templates["generalist"]
            }
    
    def _decompose_project(self, project: str) -> List[Dict[str, Any]]:
        """–†–∞–∑–±–∏–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏"""
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã LLM
        if "browser extension" in project.lower():
            return [
                {"type": "analysis", "description": f"–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {project}"},
                {"type": "development", "description": f"–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞: {project}"},
                {"type": "testing", "description": f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {project}"},
                {"type": "packaging", "description": f"–£–ø–∞–∫–æ–≤–∫–∞: {project}"}
            ]
        
        return [{"type": "general", "description": project}]
    
    def _design_agent_for_task(self, subtask: Dict[str, Any]) -> AgentSpecification:
        """–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–¥–∑–∞–¥–∞—á—É"""
        
        task_type = subtask["type"]
        description = subtask["description"]
        
        if task_type == "analysis":
            return AgentSpecification(
                role="project_analyst",
                expertise=["requirements_analysis", "architecture_design"],
                prompt_template=self.agent_templates["analyst"],
                tools=["filesystem", "human_request", "Python", "ApiClient"],
                context={"subtask": subtask}
            )
            
        elif task_type == "development":
            return AgentSpecification(
                role="code_developer",
                expertise=["javascript", "html", "css", "manifest"],
                prompt_template=self.agent_templates["developer"],
                tools=["filesystem", "manifest_validator", "Python", "WebScraper"],
                context={"subtask": subtask}
            )
            
        elif task_type == "testing":
            return AgentSpecification(
                role="quality_tester", 
                expertise=["testing", "validation", "debugging"],
                prompt_template=self.agent_templates["tester"],
                tools=["manifest_validator", "human_request", "Python"],
                context={"subtask": subtask}
            )
            
        else:
            return AgentSpecification(
                role="general_agent",
                expertise=["general"],
                prompt_template=self.agent_templates["generalist"],
                tools=["filesystem", "human_request", "Python", "Calculator"],
                context={"subtask": subtask}
            )
    
    def _generate_prompt(self, spec: AgentSpecification) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
        
        base_prompt = spec.prompt_template
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if spec.context:
            context_str = json.dumps(spec.context, indent=2, ensure_ascii=False)
            base_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:\n{context_str}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        tools_info = "\n".join([f"- {tool}" for tool in spec.tools])
        base_prompt += f"\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n{tools_info}"
        
        return base_prompt
    
    def _gather_tools(self, tool_names: List[str]) -> List:
        """–°–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∞–º"""
        tools = []
        
        for tool_name in tool_names:
            if tool_name in self.available_tools:
                tools.append(self.available_tools[tool_name])
            else:
                logger.warning(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return tools
    
    def _load_agent_templates(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤"""
        
        return {
            "analyst": """
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π. –¢–≤–æ—è —Ä–æ–ª—å:

üîç –ê–ù–ê–õ–ò–ó –ò –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï:
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
- –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Ä–µ—à–µ–Ω–∏—è  
- –ü–ª–∞–Ω–∏—Ä—É–π —ç—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- –í—ã—è–≤–ª—è–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

üéØ –¢–í–û–ò –ü–†–ò–ù–¶–ò–ü–´:
- –¢—â–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
- –ü—Ä–µ–¥–≤–∏–¥–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∏ —Ä–∏—Å–∫–æ–≤
- –Ø—Å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π

–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∏—Å–ø–æ–ª—å–∑—É–π human_request.
""",

            "developer": """
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π. –¢–≤–æ—è —Ä–æ–ª—å:

üíª –†–ê–ó–†–ê–ë–û–¢–ö–ê –ö–û–î–ê:
- –°–æ–∑–¥–∞–Ω–∏–µ manifest.json –¥–ª—è Chrome Extensions
- –ù–∞–ø–∏—Å–∞–Ω–∏–µ content scripts –∏ background scripts
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ popup –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Chrome API

üõ†Ô∏è –¢–í–û–ò –ù–ê–í–´–ö–ò:
- JavaScript (ES6+), HTML5, CSS3
- Chrome Extension API
- Manifest V2/V3 —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
- Best practices –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

‚ö° –ü–û–î–•–û–î –ö –†–ê–ë–û–¢–ï:
- –°–Ω–∞—á–∞–ª–∞ –ø–æ–Ω–∏–º–∞–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- –ü–∏—à–∏ —á–∏—Å—Ç—ã–π, –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
- –í–∞–ª–∏–¥–∏—Ä—É–π manifest –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
- –¢–µ—Å—Ç–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

–ò—Å–ø–æ–ª—å–∑—É–π filesystem –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ manifest_validator –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
""",

            "tester": """
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π. –¢–≤–æ—è —Ä–æ–ª—å:

üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò –í–ê–õ–ò–î–ê–¶–ò–Ø:
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
- –í–∞–ª–∏–¥–∞—Ü–∏—è manifest.json —Ñ–∞–π–ª–æ–≤
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
- –ü–æ–∏—Å–∫ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–≥–æ–≤

üîç –¢–í–û–ò –ú–ï–¢–û–î–´:
- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º

‚úÖ –ö–†–ò–¢–ï–†–ò–ò –ö–ê–ß–ï–°–¢–í–ê:
- –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫
- Manifest —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
- –ù–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –°–æ–±–ª—é–¥–µ–Ω—ã best practices

–ò—Å–ø–æ–ª—å–∑—É–π manifest_validator –∏ —Å–æ–æ–±—â–∞–π –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö.
""",

            "generalist": """
–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏. –¢–≤–æ—è —Ä–æ–ª—å:

üéØ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê:
- –ü–æ–º–æ—â—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏
- –†–µ—à–µ–Ω–∏–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–¥–∞—á
- –û–±—É—á–µ–Ω–∏–µ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏

ü§ù –¢–í–û–ô –ü–û–î–•–û–î:
- –ê–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –∫ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
- –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–π —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
- –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–¢—ã –º–æ–∂–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π.
"""
        }
    
    def _register_tools(self) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        
        tools_dict = {}
        
        # TODO: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        logger.info("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        
        return tools_dict
    
    def get_agent_info(self, agent_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∞–≥–µ–Ω—Ç–µ"""
        
        if agent_id in self.created_agents:
            agent = self.created_agents[agent_id]
            return {
                "id": agent_id,
                "prompt": agent.prompt,
                "tools": [tool.name for tool in agent.tools.values()],
                "created_at": agent.created_at.isoformat()
            }
        
        return {"error": "Agent not found"}
    
    def list_created_agents(self) -> List[str]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        return list(self.created_agents.keys())


# TODO: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ–∞–±—Ä–∏–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
# agent_factory = AgentFactory()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
def create_browser_agent(task: str) -> Agent:
    """–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏"""
    factory = AgentFactory()
    return factory.create_browser_dev_agent(task)

def create_agent_team(project: str) -> List[Agent]:
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
    factory = AgentFactory()
    return factory.create_collaborative_team(project) 