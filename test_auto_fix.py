#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–æ—Ö–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import asyncio
import os
from pathlib import Path
from kittycore.core.obsidian_orchestrator import solve_with_obsidian_orchestrator

async def test_auto_fix():
    print("üß™ –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 50)
    
    # –ó–∞–¥–∞—á–∞ –∫–æ—Ç–æ—Ä–∞—è –æ–±—ã—á–Ω–æ —Å–æ–∑–¥–∞—ë—Ç –ø–ª–æ—Ö–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    task = "–°–æ–∑–¥–∞–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞"
    
    try:
        result = await solve_with_obsidian_orchestrator(task)
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result['status']}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result['duration']:.1f}—Å")
        print(f"ü§ñ –ê–≥–µ–Ω—Ç–æ–≤: {result['agents_created']}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        auto_fixes = 0
        validation_scores = []
        
        for step_id, step_result in result['execution']['step_results'].items():
            validation = step_result.get('validation', {})
            score = validation.get('score', 0)
            validation_scores.append(score)
            
            print(f"\nüîç –®–∞–≥ {step_id}:")
            print(f"  üìä –û—Ü–µ–Ω–∫–∞: {score:.1f}/1.0")
            print(f"  ‚úÖ –í–∞–ª–∏–¥–Ω—ã–π: {validation.get('is_valid', False)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if step_result.get('auto_fixed', False):
                auto_fixes += 1
                print(f"  üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù!")
                print(f"  üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {step_result.get('original_validation', {}).get('score', 'N/A')}")
                print(f"  üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {step_result.get('filename', 'N/A')}")
            elif "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!" in str(step_result):
                auto_fixes += 1
                print(f"  üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù! (–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤ –ª–æ–≥–∞—Ö)")
                print(f"  üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: factorial.py")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        outputs_dir = Path("outputs")
        if outputs_dir.exists():
            files = list(outputs_dir.glob("*"))
            print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
            for file in files:
                print(f"  - {file.name} ({file.stat().st_size} –±–∞–π—Ç)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ factorial.py
                if file.name == "factorial.py":
                    content = file.read_text(encoding='utf-8')
                    if "def factorial" in content and "return" in content:
                        print(f"    ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–±–æ—á–∏–π –∫–æ–¥ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞")
                    else:
                        print(f"    ‚ùå –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–±–æ—á–∏–π –∫–æ–¥")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg_score = sum(validation_scores) / len(validation_scores) if validation_scores else 0
        
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {auto_fixes}")
        print(f"üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {avg_score:.1f}/1.0")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result['status']}")
        
        # –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if auto_fixes > 0:
            print(f"\nüéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢!")
            print(f"   –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–∏–ª–∞ {auto_fixes} –ø–ª–æ—Ö–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        else:
            print(f"\n‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ")
        
        if avg_score > 0.7:
            print(f"üèÜ –í–´–°–û–ö–û–ï –ö–ê–ß–ï–°–¢–í–û –†–ï–ó–£–õ–¨–¢–ê–¢–û–í!")
        elif avg_score > 0.5:
            print(f"üìà –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        else:
            print(f"‚ùå –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_auto_fix()) 