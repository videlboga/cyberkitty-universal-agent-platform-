"""
NoteManager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏ –≤ Obsidian vault
"""

import os
import re
import yaml
import asyncio
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any
from loguru import logger


class NoteManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏ –≤ Obsidian vault
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–º–µ—Ç–æ–∫
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ YAML frontmatter
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫ –∑–∞–º–µ—Ç–∫–∞–º
    - –ü–æ–∏—Å–∫ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫
    """
    
    def __init__(self, vault_path: Path, config):
        self.vault_path = vault_path
        self.config = config
        self.notes_folder = vault_path / config.notes_folder
        
        logger.debug(f"üìÅ NoteManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è: {self.notes_folder}")
    
    async def create_note(self, folder: str, filename: str, content: str, metadata: Dict[str, Any] = None) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
        
        Args:
            folder: –ü–∞–ø–∫–∞ –≤ —Ä–∞–º–∫–∞—Ö notes_folder
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
            content: –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–º–µ—Ç–∫–∏
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è frontmatter
            
        Returns:
            –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–µ
        """
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ –∑–∞–º–µ—Ç–∫–µ
        note_folder = self.notes_folder / folder
        note_folder.mkdir(parents=True, exist_ok=True)
        
        # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        safe_filename = self._sanitize_filename(filename)
        note_path = note_folder / f"{safe_filename}.md"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        counter = 1
        while note_path.exists():
            note_path = note_folder / f"{safe_filename}-{counter}.md"
            counter += 1
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        full_content = await self._format_note_content(content, metadata)
        
        # –ó–∞–ø–∏—Å—å –∑–∞–º–µ—Ç–∫–∏
        async with asyncio.Lock():
            with open(note_path, 'w', encoding='utf-8') as f:
                f.write(full_content)
        
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: {note_path}")
        return str(note_path)
    
    async def update_note(self, note_path: str, content: str, metadata: Dict[str, Any] = None) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–º–µ—Ç–∫–∏
        
        Args:
            note_path: –ü—É—Ç—å –∫ –∑–∞–º–µ—Ç–∫–µ
            content: –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            metadata: –ù–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            path = Path(note_path)
            if not path.exists():
                logger.error(f"‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {note_path}")
                return False
            
            # –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ
            if metadata is None:
                existing_metadata = await self._extract_metadata(note_path)
                metadata = existing_metadata
            else:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                metadata['modified'] = datetime.now().isoformat()
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            full_content = await self._format_note_content(content, metadata)
            
            # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
            async with asyncio.Lock():
                with open(path, 'w', encoding='utf-8') as f:
                    f.write(full_content)
            
            logger.info(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: {note_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ {note_path}: {e}")
            return False
    
    async def append_to_note(self, note_path: str, content: str) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–º–µ—Ç–∫–µ
        
        Args:
            note_path: –ü—É—Ç—å –∫ –∑–∞–º–µ—Ç–∫–µ
            content: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            
        Returns:
            –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            path = Path(note_path)
            if not path.exists():
                logger.error(f"‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {note_path}")
                return False
            
            # –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            with open(path, 'r', encoding='utf-8') as f:
                existing_content = f.read()
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            updated_content = existing_content + "\n" + content
            
            # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            async with asyncio.Lock():
                with open(path, 'w', encoding='utf-8') as f:
                    f.write(updated_content)
            
            logger.debug(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –∫ –∑–∞–º–µ—Ç–∫–µ: {note_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫ –∑–∞–º–µ—Ç–∫–µ {note_path}: {e}")
            return False
    
    async def update_metadata(self, note_path: str, metadata: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–∫–∏
        
        Args:
            note_path: –ü—É—Ç—å –∫ –∑–∞–º–µ—Ç–∫–µ
            metadata: –ù–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            path = Path(note_path)
            if not path.exists():
                logger.error(f"‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {note_path}")
                return False
            
            # –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            with open(path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_without_metadata = await self._extract_content_without_metadata(content)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            metadata['modified'] = datetime.now().isoformat()
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            full_content = await self._format_note_content(content_without_metadata, metadata)
            
            # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
            async with asyncio.Lock():
                with open(path, 'w', encoding='utf-8') as f:
                    f.write(full_content)
            
            logger.debug(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏: {note_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–∫–∏ {note_path}: {e}")
            return False
    
    async def get_note_content(self, note_path: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–º–µ—Ç–∫–∏ –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        
        Args:
            note_path: –ü—É—Ç—å –∫ –∑–∞–º–µ—Ç–∫–µ
            
        Returns:
            –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            path = Path(note_path)
            if not path.exists():
                return None
            
            with open(path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            return await self._extract_content_without_metadata(content)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ {note_path}: {e}")
            return None
    
    async def get_note_metadata(self, note_path: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–∫–∏
        
        Args:
            note_path: –ü—É—Ç—å –∫ –∑–∞–º–µ—Ç–∫–µ
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        """
        try:
            return await self._extract_metadata(note_path)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–∫–∏ {note_path}: {e}")
            return {}
    
    async def find_notes_by_tag(self, tag: str) -> List[str]:
        """
        –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –ø–æ —Ç–µ–≥—É
        
        Args:
            tag: –¢–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∑–∞–º–µ—Ç–∫–∞–º
        """
        matching_notes = []
        
        for note_path in self.notes_folder.rglob("*.md"):
            try:
                metadata = await self._extract_metadata(str(note_path))
                note_tags = metadata.get('tags', [])
                
                if isinstance(note_tags, str):
                    note_tags = [note_tags]
                
                if tag in note_tags:
                    matching_notes.append(str(note_path))
                    
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–º–µ—Ç–∫–∏ {note_path}: {e}")
                continue
        
        return matching_notes
    
    async def find_notes_by_metadata(self, key: str, value: Any) -> List[str]:
        """
        –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        
        Args:
            key: –ö–ª—é—á –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∑–∞–º–µ—Ç–∫–∞–º
        """
        matching_notes = []
        
        for note_path in self.notes_folder.rglob("*.md"):
            try:
                metadata = await self._extract_metadata(str(note_path))
                
                if key in metadata and metadata[key] == value:
                    matching_notes.append(str(note_path))
                    
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–º–µ—Ç–∫–∏ {note_path}: {e}")
                continue
        
        return matching_notes
    
    async def get_all_notes(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–∫–∞—Ö
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–º–µ—Ç–∫–∞—Ö
        """
        notes = []
        
        for note_path in self.notes_folder.rglob("*.md"):
            try:
                metadata = await self._extract_metadata(str(note_path))
                
                note_info = {
                    'path': str(note_path),
                    'name': note_path.stem,
                    'folder': str(note_path.parent.relative_to(self.notes_folder)),
                    'metadata': metadata,
                    'modified': note_path.stat().st_mtime
                }
                
                notes.append(note_info)
                
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–º–µ—Ç–∫–∏ {note_path}: {e}")
                continue
        
        return notes
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    def _sanitize_filename(self, filename: str) -> str:
        """–°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        safe_name = re.sub(r'[<>:"/\\|?*]', '-', filename)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ—Ñ–∏—Å–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        safe_name = re.sub(r'[-\s]+', '-', safe_name)
        
        # –û–±—Ä–µ–∑–∫–∞ –¥–æ —Ä–∞–∑—É–º–Ω–æ–π –¥–ª–∏–Ω—ã
        safe_name = safe_name[:100].strip('-')
        
        return safe_name or 'untitled'
    
    async def _format_note_content(self, content: str, metadata: Dict[str, Any] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–º–µ—Ç–∫–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            content: –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è frontmatter
            
        Returns:
            –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–º–µ—Ç–∫–∏
        """
        if not metadata:
            return content
        
        # –°–æ–∑–¥–∞–Ω–∏–µ YAML frontmatter
        yaml_content = yaml.dump(metadata, default_flow_style=False, allow_unicode=True)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        full_content = f"---\n{yaml_content}---\n\n{content}"
        
        return full_content
    
    async def _extract_metadata(self, note_path: str) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–º–µ—Ç–∫–∏
        
        Args:
            note_path: –ü—É—Ç—å –∫ –∑–∞–º–µ—Ç–∫–µ
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        """
        try:
            with open(note_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü–æ–∏—Å–∫ YAML frontmatter
            match = re.match(r'^---\n(.*?)\n---\n', content, re.DOTALL)
            
            if match:
                yaml_content = match.group(1)
                return yaml.safe_load(yaml_content) or {}
            
            return {}
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ {note_path}: {e}")
            return {}
    
    async def _extract_content_without_metadata(self, content: str) -> str:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        
        Args:
            content: –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–º–µ—Ç–∫–∏
            
        Returns:
            –ö–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ frontmatter
        """
        # –£–¥–∞–ª–µ–Ω–∏–µ YAML frontmatter
        content_without_frontmatter = re.sub(r'^---\n.*?\n---\n\n?', '', content, flags=re.DOTALL)
        
        return content_without_frontmatter.strip()
    
    async def get_note_links(self, note_path: str) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö [[—Å—Å—ã–ª–æ–∫]] –∏–∑ –∑–∞–º–µ—Ç–∫–∏
        
        Args:
            note_path: –ü—É—Ç—å –∫ –∑–∞–º–µ—Ç–∫–µ
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        """
        try:
            content = await self.get_note_content(note_path)
            if not content:
                return []
            
            # –ü–æ–∏—Å–∫ [[—Å—Å—ã–ª–æ–∫]]
            links = re.findall(r'\[\[([^\]]+)\]\]', content)
            
            return list(set(links))  # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏–∑ {note_path}: {e}")
            return [] 