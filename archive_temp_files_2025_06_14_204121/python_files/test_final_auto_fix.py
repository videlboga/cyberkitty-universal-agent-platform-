#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–æ—Ö–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
"""

import asyncio
import os
from pathlib import Path
from kittycore.core.obsidian_orchestrator import solve_with_obsidian_orchestrator

async def test_final_auto_fix():
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 60)
    
    # –û—á–∏—â–∞–µ–º outputs –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    outputs_dir = Path("outputs")
    if outputs_dir.exists():
        for file in outputs_dir.glob("factorial*"):
            file.unlink()
    
    # –ó–∞–¥–∞—á–∞ –∫–æ—Ç–æ—Ä–∞—è –æ–±—ã—á–Ω–æ —Å–æ–∑–¥–∞—ë—Ç –ø–ª–æ—Ö–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    task = "–°–æ–∑–¥–∞–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞"
    
    print(f"üìã –ó–∞–¥–∞—á–∞: {task}")
    print(f"üéØ –û–∂–∏–¥–∞–µ–º: –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞—Å—Ç –ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ–±–Ω–∞—Ä—É–∂–∏—Ç —ç—Ç–æ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç")
    print()
    
    try:
        result = await solve_with_obsidian_orchestrator(task)
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result['status']}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result['duration']:.1f}—Å")
        print(f"ü§ñ –ê–≥–µ–Ω—Ç–æ–≤: {result['agents_created']}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        factorial_files = list(outputs_dir.glob("factorial*"))
        
        print("üìÅ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í:")
        if factorial_files:
            for file in factorial_files:
                print(f"  ‚úÖ {file.name} ({file.stat().st_size} –±–∞–π—Ç)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                content = file.read_text(encoding='utf-8')
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
                checks = {
                    "–ï—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è factorial": "def factorial" in content,
                    "–ï—Å—Ç—å —Ä–µ–∫—É—Ä—Å–∏—è –∏–ª–∏ —Ü–∏–∫–ª": "factorial(n-1)" in content or "for" in content,
                    "–ï—Å—Ç—å –±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π": "== 0" in content or "== 1" in content,
                    "–ï—Å—Ç—å –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": "__main__" in content or "print" in content,
                    "–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É": "def factorial" in content and "return" in content
                }
                
                print(f"    üìä –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê:")
                for check, passed in checks.items():
                    status = "‚úÖ" if passed else "‚ùå"
                    print(f"      {status} {check}")
                
                # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
                quality_score = sum(checks.values()) / len(checks)
                if quality_score >= 0.8:
                    print(f"    üèÜ –û–¢–õ–ò–ß–ù–û–ï –ö–ê–ß–ï–°–¢–í–û ({quality_score:.1%})")
                elif quality_score >= 0.6:
                    print(f"    üìà –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ ({quality_score:.1%})")
                else:
                    print(f"    ‚ùå –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ ({quality_score:.1%})")
        else:
            print("  ‚ùå –§–∞–π–ª—ã factorial.py –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        print("üîç –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        
        # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        auto_fix_detected = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ (–≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫)
        if factorial_files:
            auto_fix_detected = True
            print("  ‚úÖ –§–∞–π–ª factorial.py —Å–æ–∑–¥–∞–Ω - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if factorial_files:
            content = factorial_files[0].read_text(encoding='utf-8')
            if "def factorial" in content and "return" in content:
                print("  ‚úÖ –ö–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–±–æ—á—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞!")
                auto_fix_detected = True
        
        print()
        
        # –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê
        print("üéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´:")
        
        if auto_fix_detected and factorial_files:
            print("üèÜ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
            print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–ª–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥")
            print("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –≥–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ñ–∞–π–ª")
            print()
            print("üöÄ –ü–†–û–ë–õ–ï–ú–ê '–û–¢–ß–Å–¢–´ –í–ú–ï–°–¢–û –ö–û–ù–¢–ï–ù–¢–ê' –†–ï–®–ï–ù–ê!")
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
            print()
            print("üß™ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´:")
            print("   –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python outputs/factorial.py")
            
            return True
            
        else:
            print("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
            print("   –°–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_final_auto_fix())
    
    if success:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("\nüí• –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù! –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.") 