#!/usr/bin/env python3
"""
üì∫ –ü–û–õ–£–ß–ï–ù–ò–ï ID –í–ò–î–ï–û –°–û–û–ë–©–ï–ù–ò–ô –ò–ó –ö–ê–ù–ê–õ–ê ONTOBOT
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö ID –≤–∏–¥–µ–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ -1002614708769
"""

import asyncio
import json
from datetime import datetime
import aiohttp
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("logs/video_messages.log", 
          format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | VIDEO | {message}",
          level="INFO", rotation="10 MB", compression="zip")

class VideoMessageGetter:
    """–ü–æ–ª—É—á–∞–µ—Ç ID –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞."""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.channel_id = "-1002614708769"
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        
        logger.info("üì∫ Video Message Getter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    async def get_channel_history(self, limit: int = 50) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ getUpdates."""
        
        url = f"{self.base_url}/getUpdates"
        
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞ (–ª–∏–º–∏—Ç: {limit})")
        
        try:
            async with aiohttp.ClientSession() as session:
                params = {
                    "limit": limit,
                    "timeout": 30
                }
                
                async with session.get(url, params=params) as response:
                    result = await response.json()
                    
                    if result.get('ok'):
                        updates = result.get('result', [])
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(updates)}")
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
                        channel_messages = []
                        for update in updates:
                            message = update.get('message', {})
                            chat = message.get('chat', {})
                            
                            if str(chat.get('id')) == self.channel_id:
                                message_info = {
                                    "message_id": message.get('message_id'),
                                    "date": message.get('date'),
                                    "content_type": self._get_content_type(message),
                                    "text": message.get('text', '')[:100],
                                    "caption": message.get('caption', '')[:100]
                                }
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                                if message.get('video'):
                                    video = message.get('video', {})
                                    message_info['video'] = {
                                        "file_id": video.get('file_id'),
                                        "duration": video.get('duration'),
                                        "width": video.get('width'),
                                        "height": video.get('height'),
                                        "file_size": video.get('file_size')
                                    }
                                
                                channel_messages.append(message_info)
                        
                        logger.info(f"üì∫ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞: {len(channel_messages)}")
                        
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ message_id
                        channel_messages.sort(key=lambda x: x['message_id'])
                        
                        for msg in channel_messages:
                            logger.info(f"   ID {msg['message_id']}: {msg['content_type']} - {msg.get('text', msg.get('caption', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'))[:50]}")
                        
                        return {
                            "ok": True,
                            "channel_messages": channel_messages,
                            "total_updates": len(updates)
                        }
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {result.get('description')}")
                        return result
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
            return {"error": str(e)}
    
    async def check_specific_messages(self, message_ids: list) -> dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö ID —Å–æ–æ–±—â–µ–Ω–∏–π."""
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö ID —Å–æ–æ–±—â–µ–Ω–∏–π: {message_ids}")
        
        results = {}
        
        for msg_id in message_ids:
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ—Ç –∂–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                url = f"{self.base_url}/forwardMessage"
                
                async with aiohttp.ClientSession() as session:
                    data = {
                        "chat_id": self.channel_id,
                        "from_chat_id": self.channel_id,
                        "message_id": msg_id
                    }
                    
                    async with session.post(url, json=data) as response:
                        result = await response.json()
                        
                        if result.get('ok'):
                            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                            results[msg_id] = {
                                "exists": True,
                                "forwarded_message_id": result.get('result', {}).get('message_id')
                            }
                        else:
                            logger.info(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {result.get('description', '')}")
                            results[msg_id] = {
                                "exists": False,
                                "error": result.get('description', 'Unknown error')
                            }
                            
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {str(e)}")
                results[msg_id] = {
                    "exists": False,
                    "error": str(e)
                }
        
        return results
    
    async def get_message_by_id(self, message_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."""
        
        logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message_id}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ copyMessage –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            url = f"{self.base_url}/copyMessage"
            
            async with aiohttp.ClientSession() as session:
                data = {
                    "chat_id": self.channel_id,
                    "from_chat_id": self.channel_id,
                    "message_id": message_id
                }
                
                async with session.post(url, json=data) as response:
                    result = await response.json()
                    
                    if result.get('ok'):
                        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ")
                        return {
                            "exists": True,
                            "copied_message_id": result.get('result', {}).get('message_id')
                        }
                    else:
                        logger.info(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {result.get('description', '')}")
                        return {
                            "exists": False,
                            "error": result.get('description', 'Unknown error')
                        }
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {str(e)}")
            return {
                "exists": False,
                "error": str(e)
            }
    
    def _get_content_type(self, message: dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if message.get("video"):
            return "video"
        elif message.get("photo"):
            return "photo"
        elif message.get("document"):
            return "document"
        elif message.get("text"):
            return "text"
        elif message.get("animation"):
            return "animation"
        else:
            return "other"

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    print("üì∫ –ü–û–õ–£–ß–ï–ù–ò–ï ID –í–ò–î–ï–û –°–û–û–ë–©–ï–ù–ò–ô –ò–ó –ö–ê–ù–ê–õ–ê ONTOBOT")
    print("="*60)
    
    bot_token = "7907324843:AAFjN2H4ud2X6rm7XShrmS3G1l1JnCo4feM"
    
    getter = VideoMessageGetter(bot_token)
    
    print(f"ü§ñ –ë–æ—Ç: @CyberKittyTest_bot")
    print(f"üì∫ –ö–∞–Ω–∞–ª: {getter.channel_id}")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    print("\nüì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    history = await getter.get_channel_history()
    
    if history.get('ok'):
        messages = history.get('channel_messages', [])
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        print("\nüìã –°–ü–ò–°–û–ö –°–û–û–ë–©–ï–ù–ò–ô:")
        print("-" * 50)
        
        video_messages = []
        for msg in messages:
            content_type = msg['content_type']
            msg_id = msg['message_id']
            text = msg.get('text', msg.get('caption', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'))[:50]
            
            print(f"ID {msg_id:2d}: {content_type:8s} - {text}")
            
            if content_type == 'video':
                video_messages.append(msg_id)
        
        print(f"\nüé¨ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(video_messages)}")
        if video_messages:
            print(f"üì∫ ID –≤–∏–¥–µ–æ: {video_messages}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID
            video_mapping = {
                "mr_ontobot_main_router": video_messages[0] if len(video_messages) > 0 else 2,
                "mr_ontobot_diagnostic_ya_ya": video_messages[1] if len(video_messages) > 1 else 3,
                "mr_ontobot_diagnostic_ya_delo": video_messages[2] if len(video_messages) > 2 else 4,
                "mr_ontobot_diagnostic_ya_relations": video_messages[3] if len(video_messages) > 3 else 5
            }
            
            print(f"\nüîÑ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–û–ï –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï:")
            print("-" * 40)
            for scenario, msg_id in video_mapping.items():
                print(f"{scenario}: message_id = {msg_id}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ ID (1-10)
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ID —Å–æ–æ–±—â–µ–Ω–∏–π 1-10...")
    check_results = await getter.check_specific_messages(list(range(1, 11)))
    
    existing_ids = [msg_id for msg_id, info in check_results.items() if info.get('exists')]
    print(f"‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID: {existing_ids}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    all_results = {
        "channel_history": history,
        "message_check": check_results,
        "video_messages": video_messages if 'video_messages' in locals() else [],
        "timestamp": datetime.now().isoformat()
    }
    
    with open("logs/video_messages_results.json", "w", encoding="utf-8") as f:
        json.dump(all_results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ logs/video_messages_results.json")
    print("\n‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main()) 