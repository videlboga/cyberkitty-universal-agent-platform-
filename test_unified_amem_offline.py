#!/usr/bin/env python3
"""
üß† –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢: UNIFIED ORCHESTRATOR + OFFLINE A-MEM

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é A-MEM –≤ offline —Ä–µ–∂–∏–º–µ
—Å UnifiedOrchestrator –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–Ω—ã—Ö –∑–∞–¥–∞—á.
"""

import asyncio
import sys
import time
import json
import os
from pathlib import Path
from datetime import datetime

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π offline —Ä–µ–∂–∏–º (NO FALLBACK!)
os.environ["TRANSFORMERS_OFFLINE"] = "1"
os.environ["HF_DATASETS_OFFLINE"] = "1"
os.environ["TOKENIZERS_PARALLELISM"] = "false"

# –£–±–∏—Ä–∞–µ–º fallback –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
if "FORCE_AMEM_FALLBACK" in os.environ:
    del os.environ["FORCE_AMEM_FALLBACK"]

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig
from loguru import logger

# –†–µ–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
REAL_AGENT_TASKS = [
    {
        "id": "web_app_flask",
        "task": "–°–æ–∑–¥–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Flask —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π",
        "category": "web_development",
        "expected_skills": ["python", "flask", "html", "authentication"]
    },
    {
        "id": "data_analysis_pandas",
        "task": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª",
        "category": "data_analysis", 
        "expected_skills": ["python", "pandas", "analysis", "visualization"]
    },
    {
        "id": "api_rest_jwt",
        "task": "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å REST API —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        "category": "backend_development",
        "expected_skills": ["python", "api", "jwt", "authentication"]
    },
    {
        "id": "ml_classification",
        "task": "–°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤",
        "category": "machine_learning",
        "expected_skills": ["python", "scikit-learn", "nlp", "classification"]
    },
    {
        "id": "automation_email",
        "task": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö email –∑–∞—è–≤–æ–∫ —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π",
        "category": "automation",
        "expected_skills": ["python", "email", "automation", "classification"]
    }
]

async def test_unified_orchestrator_offline_amem():
    """üß† –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: UnifiedOrchestrator + offline A-MEM"""
    print("üöÄ === –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢: UNIFIED ORCHESTRATOR + OFFLINE A-MEM ===")
    print("üîí –ü–æ–ª–Ω–æ—Å—Ç—å—é offline —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    start_time = time.time()
    
    print("\nüéØ === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø UNIFIED ORCHESTRATOR ===")
    
    config = UnifiedConfig(
        orchestrator_id="unified_offline_amem_test",
        enable_amem_memory=True,
        amem_memory_path="./vault/system/amem_unified_offline",
        vault_path="./vault_unified_offline",
        enable_shared_chat=True,
        enable_vector_memory=False,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ A-MEM
        enable_smart_validation=True,
        timeout=90
    )
    
    try:
        orchestrator = UnifiedOrchestrator(config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ A-MEM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –±–µ–∑ fallback
        amem_type = type(orchestrator.amem_system.amem).__name__
        print(f"üß† A-MEM —Ç–∏–ø: {amem_type}")
        
        from kittycore.memory.amem_integration import AMEM_AVAILABLE
        print(f"üîç AMEM_AVAILABLE: {AMEM_AVAILABLE}")
        
        if not AMEM_AVAILABLE or amem_type == "SimpleAgenticMemory":
            print("‚ùå A-MEM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è! Fallback –∞–∫—Ç–∏–≤–µ–Ω.")
            return {"success": False, "error": "A-MEM fallback mode"}
        
        print("‚úÖ UnifiedOrchestrator —Å offline A-MEM –≥–æ—Ç–æ–≤!")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_stats = {
            "tasks_processed": 0,
            "memories_stored": 0,
            "insights_generated": 0,
            "search_results": {},
            "quality_progression": []
        }
        
        print(f"\nüìã === –û–ë–†–ê–ë–û–¢–ö–ê {len(REAL_AGENT_TASKS)} –†–ï–ê–õ–¨–ù–´–• –ó–ê–î–ê–ß ===")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º –æ–ø—ã—Ç–∞
        for i, task in enumerate(REAL_AGENT_TASKS, 1):
            print(f"\n{i}Ô∏è‚É£ === –ó–ê–î–ê–ß–ê: {task['category'].upper()} ===")
            print(f"üìù {task['task']}")
            print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(task['expected_skills'])}")
            
            # –ü–æ–ª—É—á–∞–µ–º A-MEM insights –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            print(f"\nüß† –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º A-MEM insights...")
            
            mock_subtasks = [
                {"id": f"{task['id']}_analysis", "description": f"–∞–Ω–∞–ª–∏–∑ {task['category']}"},
                {"id": f"{task['id']}_implementation", "description": task['task']}
            ]
            
            insights = await orchestrator._get_amem_insights_for_team_creation(
                mock_subtasks, task['id']
            )
            
            print(f"   üîç A-MEM –ø–æ–∏—Å–∫: enabled={insights.get('enabled', False)}")
            print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–π: {len(insights.get('search_results', []))}")
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(insights.get('agent_recommendations', []))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            for rec in insights.get('agent_recommendations', []):
                print(f"   ‚ú® {rec}")
            
            test_stats["insights_generated"] += len(insights.get('agent_recommendations', []))
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–º
            print(f"\n‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
            await asyncio.sleep(0.1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –∏–º–∏—Ç–∞—Ü–∏—è
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–ª—É—á—à–∞—é—â–∏–º—Å—è –∫–∞—á–µ—Å—Ç–≤–æ–º
            base_quality = 0.7
            experience_bonus = min(i * 0.03, 0.2)  # –û–ø—ã—Ç —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ
            insights_bonus = len(insights.get('agent_recommendations', [])) * 0.02
            
            final_quality = base_quality + experience_bonus + insights_bonus
            
            mock_result = {
                "success": True,
                "execution_time": 12.0 + i * 2,
                "tools_used": ["file_manager", "code_generator"] + task['expected_skills'][:2],
                "files_created": [f"{task['id']}.py", f"{task['id']}.md", f"{task['id']}_test.py"],
                "content": f"–†–µ—à–µ–Ω–∏–µ –¥–ª—è {task['category']}: {task['task'][:60]}...",
                "quality_score": final_quality
            }
            
            test_stats["quality_progression"].append(final_quality)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—ã—Ç –∞–≥–µ–Ω—Ç–∞ –≤ A-MEM
            try:
                await orchestrator._save_agent_experience_to_amem(
                    agent_id=f"agent_{task['category']}_{i}",
                    agent_data={
                        "role": task['category'],
                        "skills": task['expected_skills'],
                        "specialization": f"{task['category']}_expert"
                    },
                    agent_result=mock_result,
                    task_id=task['id']
                )
                
                print(f"   ‚úÖ –û–ø—ã—Ç –∞–≥–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–∫–∞—á–µ—Å—Ç–≤–æ: {final_quality:.3f})")
                test_stats["memories_stored"] += 1
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—ã—Ç–∞: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            try:
                final_result = {
                    "created_files": mock_result["files_created"],
                    "process_trace": ["–∞–Ω–∞–ª–∏–∑ A-MEM", "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"],
                    "validation_summary": {"quality_score": mock_result["quality_score"]},
                    "amem_insights_used": len(insights.get('agent_recommendations', []))
                }
                
                await orchestrator._save_task_solution_to_amem(
                    task=task['task'],
                    final_result=final_result,
                    duration=mock_result["execution_time"]
                )
                
                print(f"   ‚úÖ –†–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ A-MEM")
                test_stats["memories_stored"] += 1
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è: {e}")
            
            test_stats["tasks_processed"] += 1
            print(f"   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(REAL_AGENT_TASKS)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
        print(f"\nüîç === –¢–ï–°–¢ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê –ù–ê–ö–û–ü–õ–ï–ù–ù–û–ô –ü–ê–ú–Ø–¢–ò ===")
        
        search_tests = [
            "–≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Flask –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö pandas –ø—Ä–æ–¥–∞–∂–∏",
            "REST API JWT –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç",
            "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è email –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            "–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
            "–æ–ø—ã—Ç Python —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        ]
        
        total_search_results = 0
        for query in search_tests:
            try:
                results = await orchestrator.amem_system.search_memories(query, limit=3)
                found_count = len(results)
                test_stats["search_results"][query] = found_count
                total_search_results += found_count
                
                print(f"   üîç '{query}': {found_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                if results:
                    best = results[0]
                    content_preview = best.get('content', '')[:50].replace('\n', ' ')
                    tags = best.get('tags', [])
                    print(f"      ‚ú® –õ—É—á—à–∏–π: {content_preview}... (—Ç–µ–≥–∏: {', '.join(tags[:2])})")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ '{query}': {e}")
                test_stats["search_results"][query] = 0
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        avg_search_effectiveness = total_search_results / len(search_tests) if search_tests else 0
        quality_improvement = 0
        
        if len(test_stats["quality_progression"]) >= 2:
            first_quality = test_stats["quality_progression"][0]
            last_quality = test_stats["quality_progression"][-1]
            quality_improvement = last_quality - first_quality
        
        avg_quality = sum(test_stats["quality_progression"]) / len(test_stats["quality_progression"]) if test_stats["quality_progression"] else 0
        
        print(f"\nüìà === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê OFFLINE A-MEM ===")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è: {total_time:.2f}—Å")
        print(f"‚úÖ –ó–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {test_stats['tasks_processed']}")
        print(f"üíæ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {test_stats['memories_stored']}")
        print(f"üí° Insights —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {test_stats['insights_generated']}")
        print(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(search_tests)}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total_search_results}")
        print(f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞: {avg_search_effectiveness:.1f}")
        print(f"üéØ –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {avg_quality:.3f}")
        print(f"üöÄ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: +{quality_improvement:.3f}")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        overall_score = (
            (test_stats['tasks_processed'] / len(REAL_AGENT_TASKS)) * 0.3 +
            (avg_search_effectiveness / 2.0) * 0.4 +
            avg_quality * 0.3
        )
        
        print(f"\nüèÜ === –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê OFFLINE A-MEM –°–ò–°–¢–ï–ú–´ ===")
        if overall_score >= 0.8:
            print(f"‚ú® –ü–†–ï–í–û–°–•–û–î–ù–û! ({overall_score:.3f}) - –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ!")
            rating = "excellent"
        elif overall_score >= 0.6:
            print(f"‚úÖ –û–¢–õ–ò–ß–ù–û! ({overall_score:.3f}) - –°–∏—Å—Ç–µ–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
            rating = "good"
        elif overall_score >= 0.4:
            print(f"‚ö†Ô∏è –•–û–†–û–®–û! ({overall_score:.3f}) - –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π")
            rating = "fair"
        else:
            print(f"‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò! ({overall_score:.3f}) - –°–∏—Å—Ç–µ–º–∞ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏—è—Ö")
            rating = "poor"
        
        return {
            "success": True,
            "time": total_time,
            "amem_type": amem_type,
            "amem_available": AMEM_AVAILABLE,
            "tasks_processed": test_stats['tasks_processed'],
            "memories_stored": test_stats['memories_stored'],
            "insights_generated": test_stats['insights_generated'],
            "search_effectiveness": avg_search_effectiveness,
            "average_quality": avg_quality,
            "quality_improvement": quality_improvement,
            "overall_score": overall_score,
            "rating": rating,
            "offline_mode": True,
            "detailed_stats": test_stats
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return {"success": False, "error": str(e)}

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        print("üéØ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: UnifiedOrchestrator + offline A-MEM...")
        result = await test_unified_orchestrator_offline_amem()
        
        if result["success"]:
            print("\nüéâ === –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û ===")
            print("üîí A-MEM —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é offline —Å UnifiedOrchestrator!")
            print("üß† –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç!")
            print("üìà –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π —É–ª—É—á—à–∞–µ—Ç—Å—è —Å –æ–ø—ã—Ç–æ–º!")
            print("‚ú® KittyCore 3.0 –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É —Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é!")
        else:
            print("\nüí• === –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ù–ï –ü–†–û–®–Å–õ ===")
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = Path("unified_amem_offline_test_results.json")
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
        
        return result
        
    except Exception as e:
        print(f"\nüí• === –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ===")
        print(f"‚ùå {e}")
        import traceback
        traceback.print_exc()
        return {"success": False, "error": str(e)}

if __name__ == "__main__":
    asyncio.run(main()) 