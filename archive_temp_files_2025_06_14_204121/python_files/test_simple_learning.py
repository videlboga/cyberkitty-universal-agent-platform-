#!/usr/bin/env python3
"""
üß† –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –û–ë–£–ß–ï–ù–ò–Ø
"""

import asyncio
from kittycore.core.agent_learning_system import learning_system
from kittycore.core.iterative_improvement import IterativeImprovement
from agents.smart_validator import SmartValidator
from kittycore.agents.working_agent import WorkingAgent

async def test_simple_learning():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    print("üß† –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞
    agent = WorkingAgent(
        role="simple_developer",
        subtask={
            "description": "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello.py —Å print('Hello World')",
            "expected_output": "Python —Ñ–∞–π–ª"
        }
    )
    
    validator = SmartValidator()
    improvement = IterativeImprovement()
    
    print("üéØ –ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello.py —Å print('Hello World')")
    
    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        result = await agent.execute_task()
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('output', '–ù–µ—Ç –≤—ã–≤–æ–¥–∞')[:100]}...")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        validation = await validator.validate_result(
            original_task="–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello.py —Å print('Hello World')",
            result=result,
            created_files=result.get("files_created", [])
        )
        
        print(f"üìä –û—Ü–µ–Ω–∫–∞: {validation.score:.1f}/1.0")
        print(f"üîç –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(validation.issues)}")
        
        # –£–ª—É—á—à–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if validation.score < 0.7:
            print("\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ...")
            
            final_result, attempts = await improvement.improve_agent_iteratively(
                agent=agent,
                task="–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello.py —Å print('Hello World')",
                initial_result=result,
                initial_validation=validation,
                smart_validator=validator,
                max_attempts=2  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
            )
            
            print(f"üìà –ü–æ–ø—ã—Ç–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è: {len(attempts)}")
            if attempts and attempts[-1].improved_validation:
                print(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {attempts[-1].improved_validation.score:.1f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è
        print("\nüß† –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê–ö–û–ü–õ–ï–ù–ù–´–ï –ó–ù–ê–ù–ò–Ø:")
        knowledge = await learning_system.get_agent_knowledge("simple_developer")
        
        print(f"   üìä –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {knowledge.total_attempts}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {len(knowledge.successful_patterns)}")
        print(f"   ‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫: {len(knowledge.error_patterns)}")
        print(f"   üìö –£—Ä–æ–∫–∏: {len(knowledge.lessons_learned)}")
        
        if knowledge.lessons_learned:
            print(f"   üí° –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫: {knowledge.lessons_learned[-1]}")
        
        return validation.score
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        return 0.0

async def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("üåç –ü–†–û–°–¢–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 50)
    
    try:
        score = await test_simple_learning()
        
        print(f"\nüèÜ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {score:.1f}/1.0")
        
        if score >= 0.7:
            print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        elif score >= 0.4:
            print("üëç –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å!")
        else:
            print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê!")
            
        print("\n‚úÖ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù!")
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 