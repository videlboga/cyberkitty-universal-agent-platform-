#!/usr/bin/env python3
"""
üß† –¢–µ—Å—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è KittyCore

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É:
- Adaptive Rate Control  
- Critique-Guided Improvement
- Guardian Agents
- Constitutional AI –ø—Ä–∏–Ω—Ü–∏–ø—ã
"""

import asyncio
import time
import random
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
try:
    from kittycore.core.advanced_self_learning import get_advanced_learning_engine, process_task_with_advanced_learning
    from kittycore.core.adaptive_rate_control import get_rate_controller
    print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    exit(1)

async def mock_agent_execution(request_data: Dict[str, Any]) -> str:
    """–ú–æ–∫-—Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–º"""
    
    task = request_data.get('task', 'unknown')
    agent_id = request_data.get('agent_id', 'unknown')
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if '–±—ã—Å—Ç—Ä–æ' in task.lower():
        await asyncio.sleep(random.uniform(0.1, 2.0))  # –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        return f"‚úÖ –ê–≥–µ–Ω—Ç {agent_id} –±—ã—Å—Ç—Ä–æ –≤—ã–ø–æ–ª–Ω–∏–ª: {task}"
    
    elif '–º–µ–¥–ª–µ–Ω–Ω–æ' in task.lower():
        await asyncio.sleep(random.uniform(10.0, 15.0))  # –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ  
        return f"üêå –ê–≥–µ–Ω—Ç {agent_id} –º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª: {task}"
    
    elif '–æ—à–∏–±–∫–∞' in task.lower():
        raise Exception(f"–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ {agent_id}")
    
    else:
        await asyncio.sleep(random.uniform(3.0, 8.0))  # –û–±—ã—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        return f"üìù –ê–≥–µ–Ω—Ç {agent_id} –≤—ã–ø–æ–ª–Ω–∏–ª: {task}"

async def test_basic_learning():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è"""
    
    print("\nüéØ === –¢–ï–°–¢ –ë–ê–ó–û–í–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø ===")
    
    engine = get_advanced_learning_engine()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
    session_id = await engine.start_learning_session()
    print(f"üéØ –ù–∞—á–∞—Ç–∞ —Å–µ—Å—Å–∏—è –æ–±—É—á–µ–Ω–∏—è: {session_id}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    test_tasks = [
        ("agent_speedy", "–°–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ –±—ã—Å—Ç—Ä–æ", {"priority": "high"}),
        ("agent_normal", "–û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞", {"priority": "medium"}),
        ("agent_slow", "–°–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ –º–µ–¥–ª–µ–Ω–Ω–æ", {"priority": "low"}),
        ("agent_speedy", "–ï—â—ë –æ–¥–Ω–∞ –±—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞", {"priority": "high"}),
    ]
    
    results = []
    
    for agent_id, task, input_data in test_tasks:
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {task} (–∞–≥–µ–Ω—Ç: {agent_id})")
        
        result = await process_task_with_advanced_learning(
            agent_id=agent_id,
            task=task,
            input_data=input_data,
            execution_func=mock_agent_execution
        )
        
        results.append(result)
        
        if result['success']:
            print(f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {result['execution_time']:.2f}—Å")
            print(f"   üìä –ö—Ä–∏—Ç–∏–∫: {len(result['critiques'])} –∑–∞–º–µ—á–∞–Ω–∏–π")
            print(f"   ‚ú® –£–ª—É—á—à–µ–Ω–∏–π: {result['improvements_applied']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    completed_session = await engine.end_learning_session()
    print(f"\n‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {completed_session.tasks_processed} –∑–∞–¥–∞—á, {completed_session.improvements_applied} —É–ª—É—á—à–µ–Ω–∏–π")
    
    return results

async def test_rate_limiting():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã rate limiting"""
    
    print("\nüöÄ === –¢–ï–°–¢ RATE LIMITING ===")
    
    rate_controller = get_rate_controller()
    
    # –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limiting
    tasks = []
    for i in range(10):
        task = asyncio.create_task(
            rate_controller.execute_request(
                provider="test_provider",
                request_data={"request_id": i},
                execute_func=lambda data: asyncio.sleep(0.1)  # –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            )
        )
        tasks.append(task)
    
    start_time = time.time()
    results = await asyncio.gather(*tasks, return_exceptions=True)
    total_time = time.time() - start_time
    
    successful = sum(1 for r in results if hasattr(r, 'success') and r.success)
    
    print(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ {successful}/10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {total_time:.2f}—Å")
    print(f"üéØ Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç: {total_time > 2.0}")  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ –∏–∑-–∑–∞ rate limiting
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rate controller
    stats = rate_controller.get_statistics()
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['success_rate']} —É—Å–ø–µ—Ö–∞, {stats['cache_hit_rate']} –∫–µ—à")
    
    return stats

async def test_guardian_alerts():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤ Guardian Agents"""
    
    print("\nüëÆ === –¢–ï–°–¢ GUARDIAN AGENTS ===")
    
    engine = get_advanced_learning_engine()
    session_id = await engine.start_learning_session()
    
    # –ó–∞–¥–∞—á–∏ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤—ã–∑–≤–∞—Ç—å –∞–ª–µ—Ä—Ç—ã
    problematic_tasks = [
        ("agent_error", "–ó–∞–¥–∞—á–∞ —Å –æ—à–∏–±–∫–∞", {"simulate": "error"}),
        ("agent_slow", "–û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –º–µ–¥–ª–µ–Ω–Ω–æ", {"timeout": "long"}),
        ("agent_slow", "–ï—â—ë –æ–¥–Ω–∞ –º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –º–µ–¥–ª–µ–Ω–Ω–æ", {"timeout": "long"}),
    ]
    
    for agent_id, task, input_data in problematic_tasks:
        print(f"\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∑–∞–¥–∞—á—É: {task}")
        
        try:
            result = await process_task_with_advanced_learning(
                agent_id=agent_id,
                task=task,
                input_data=input_data,
                execution_func=mock_agent_execution
            )
            
            if not result['success']:
                print(f"   ‚ùå –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {result.get('error', 'unknown')}")
            else:
                print(f"   ‚è∞ –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {result['execution_time']:.2f}—Å")
                
        except Exception as e:
            print(f"   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã –æ—Ç –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤
    for name, guardian in engine.guardians.items():
        report = guardian.get_monitoring_report()
        print(f"\nüëÆ –û—Ç—á—ë—Ç –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞ {name}:")
        print(f"   üö® –ê–ª–µ—Ä—Ç–æ–≤: {report['recent_alerts_count']}")
        print(f"   üõ°Ô∏è –í–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤: {report['recent_interventions_count']}")
        print(f"   üìä –ú–µ—Ç—Ä–∏–∫ –æ—Ç—Å–ª–µ–∂–µ–Ω–æ: {report['total_metrics_tracked']}")
    
    await engine.end_learning_session()

async def test_constitutional_ai():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ (Constitutional AI)"""
    
    print("\nüìú === –¢–ï–°–¢ CONSTITUTIONAL AI ===")
    
    engine = get_advanced_learning_engine()
    session_id = await engine.start_learning_session()
    
    # –ó–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
    learning_tasks = [
        ("agent_fast", "–ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞ 1", {}),
        ("agent_fast", "–ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞ 2", {}),  
        ("agent_fast", "–ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞ 3", {}),  # –ü–∞—Ç—Ç–µ—Ä–Ω –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        ("agent_slow", "–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –º–µ–¥–ª–µ–Ω–Ω–æ 1", {}),
        ("agent_slow", "–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –º–µ–¥–ª–µ–Ω–Ω–æ 2", {}),  # –ü–∞—Ç—Ç–µ—Ä–Ω –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    ]
    
    for agent_id, task, input_data in learning_tasks:
        result = await process_task_with_advanced_learning(
            agent_id=agent_id,
            task=task,
            input_data=input_data,
            execution_func=mock_agent_execution
        )
        
        print(f"üìù {task}: {result['execution_time']:.2f}—Å, {len(result['critiques'])} –∫—Ä–∏—Ç–∏–∫")
    
    await engine.end_learning_session()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
    print(f"\nüìú –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤: {len(engine.system_principles)}")
    
    for principle_id, principle in engine.system_principles.items():
        print(f"   ‚Ä¢ {principle.title}")
        print(f"     –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {principle.confidence:.2f} ({principle.evidence_count} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π)")
        print(f"     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {principle.category}")

async def test_comprehensive_report():
    """–¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ —Å–∏—Å—Ç–µ–º—ã"""
    
    print("\nüìä === –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–Å–¢ –°–ò–°–¢–ï–ú–´ ===")
    
    engine = get_advanced_learning_engine()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç
    report = engine.get_comprehensive_report()
    
    print(f"üÜî Engine ID: {report['engine_id']}")
    print(f"‚è±Ô∏è Uptime: {report['uptime_seconds']:.1f}—Å")
    print(f"üìà –ó–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {report['total_tasks_processed']}")
    print(f"‚ú® –£–ª—É—á—à–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {report['total_improvements']}")
    print(f"üìä Rate —É–ª—É—á—à–µ–Ω–∏–π: {report['improvement_rate']:.3f}")
    
    print(f"\nüé≠ –ö—Ä–∏—Ç–∏–∫–∏:")
    for name, stats in report['critics'].items():
        print(f"   ‚Ä¢ {name}: {stats['total_critiques']} –∫—Ä–∏—Ç–∏–∫, —Å—Ä.–±–∞–ª–ª {stats['avg_score']:.2f}")
    
    print(f"\nüëÆ –û—Ö—Ä–∞–Ω–Ω–∏–∫–∏:")
    for name, stats in report['guardians'].items():
        print(f"   ‚Ä¢ {name}: {stats['recent_alerts_count']} –∞–ª–µ—Ä—Ç–æ–≤, {stats['recent_interventions_count']} –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤")
    
    print(f"\nüìú –ü—Ä–∏–Ω—Ü–∏–ø—ã: {report['principles']['total_principles']} –≤—Å–µ–≥–æ, {report['principles']['high_confidence']} —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã
    insights = engine.get_learning_insights()
    
    print(f"\nüß† –ò–ù–°–ê–ô–¢–´ –û–ë–£–ß–ï–ù–ò–Ø:")
    print(f"üí™ –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {insights['system_health_score']:.2f}")
    print(f"üìà –¢—Ä–µ–Ω–¥ –æ–±—É—á–µ–Ω–∏—è: {insights['learning_trends']['trend']}")
    
    print(f"\nüèÜ –¢–æ–ø –∞–≥–µ–Ω—Ç—ã:")
    for agent in insights['top_performing_agents']:
        print(f"   ‚Ä¢ {agent['agent_id']}: {agent['avg_score']:.2f} ({agent['task_count']} –∑–∞–¥–∞—á)")
    
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    for rec in insights['recommendations']:
        print(f"   ‚Ä¢ {rec}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–Ø KITTYCORE 3.0")
    print("=" * 70)
    
    try:
        # –ë–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        await test_basic_learning()
        
        # Rate limiting  
        await test_rate_limiting()
        
        # Guardian Agents
        await test_guardian_alerts()
        
        # Constitutional AI
        await test_constitutional_ai()
        
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á—ë—Ç
        await test_comprehensive_report()
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 