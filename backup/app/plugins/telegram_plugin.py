from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, filters
import asyncio
from loguru import logger
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("logs", exist_ok=True)
logger.add("logs/telegram_plugin.log", format="{time} {level} {message}", level="INFO", rotation="10 MB", compression="zip", serialize=True)

class TelegramPlugin:
    def __init__(self, app):
        self.app = app
        self.add_handlers()
        logger.info("Telegram Plugin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def add_handlers(self):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.app.add_handler(CommandHandler("start", self.on_start))
        self.app.add_handler(CommandHandler("help", self.on_help))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.on_text))
        self.app.add_handler(MessageHandler(filters.VOICE, self.on_voice))
        self.app.add_handler(MessageHandler(filters.PHOTO, self.on_photo))
        self.app.add_handler(MessageHandler(filters.Document.ALL, self.on_document))
        self.app.add_handler(MessageHandler(filters.VIDEO, self.on_video))
        self.app.add_handler(MessageHandler(filters.AUDIO, self.on_audio))
        self.app.add_handler(MessageHandler(filters.Sticker.ALL, self.on_sticker))
        self.app.add_handler(MessageHandler(filters.CONTACT, self.on_contact))
        self.app.add_handler(MessageHandler(filters.LOCATION, self.on_location))
        self.app.add_handler(CallbackQueryHandler(self.on_callback_query))
        
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self.app.handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")

    async def on_start(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start: –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–≥–µ–Ω—Ç–∞ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏"""
        user = update.effective_user
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{user.username})")
        
        buttons = [
            [InlineKeyboardButton("–ö–æ—É—á", callback_data="agent_coach")],
            [InlineKeyboardButton("–õ–∞–π—Ñ—Ö–∞–∫–µ—Ä", callback_data="agent_lifehacker")],
            [InlineKeyboardButton("–ú–µ–Ω—Ç–æ—Ä", callback_data="agent_mentor")],
            [InlineKeyboardButton("–î–∞–π–¥–∂–µ—Å—Ç", callback_data="agent_digest")],
            [InlineKeyboardButton("–≠–∫—Å–ø–µ—Ä—Ç", callback_data="agent_expert")],
        ]
        markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞:",
            reply_markup=markup
        )
    
    async def on_help(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏"""
        text = """
*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –í—ã–±—Ä–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:*
‚Ä¢ –ö–æ—É—á - –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –∫–∞–∫ –¥–æ—Å—Ç–∏—á—å –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π
‚Ä¢ –õ–∞–π—Ñ—Ö–∞–∫–µ—Ä - –ø–æ–¥–µ–ª–∏—Ç—Å—è –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏
‚Ä¢ –ú–µ–Ω—Ç–æ—Ä - –ø–æ–º–æ–∂–µ—Ç –≤ –æ–±—É—á–µ–Ω–∏–∏
‚Ä¢ –î–∞–π–¥–∂–µ—Å—Ç - —Å–æ–±–µ—Ä–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç - –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        """
        await update.message.reply_text(text, parse_mode="Markdown")

    async def on_text(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        text = update.message.text
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} (@{user.username}): {text[:50]}")
        
        # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è MVP
        await update.message.reply_text(f"–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

    async def on_voice(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text("–Ø –ø–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å")

    async def on_photo(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        await update.message.reply_text("–Ø –ø–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–æ –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –µ—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å")

    async def on_document(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        await update.message.reply_text(f"–Ø –ø–æ–ª—É—á–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç '{update.message.document.file_name}', –Ω–æ –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å")

    async def on_video(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ"""
        await update.message.reply_text("–Ø –ø–æ–ª—É—á–∏–ª –≤–∏–¥–µ–æ, –Ω–æ –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å")

    async def on_audio(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ"""
        await update.message.reply_text("–Ø –ø–æ–ª—É—á–∏–ª –∞—É–¥–∏–æ, –Ω–æ –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å")

    async def on_sticker(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤"""
        await update.message.reply_text("üëç")

    async def on_contact(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        contact = update.message.contact
        await update.message.reply_text(f"–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω: {contact.first_name} {contact.phone_number}")

    async def on_location(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–π"""
        location = update.message.location
        await update.message.reply_text(f"–õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {location.latitude}, {location.longitude}")

    async def healthcheck(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Telegram-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ get_me
        Returns:
            bool: True –µ—Å–ª–∏ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç, –∏–Ω–∞—á–µ False
        """
        try:
            me = await self.app.bot.get_me()
            return True if me else False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ healthcheck: {e}")
            return False

    async def send_reply_keyboard(self, chat_id, text, buttons, resize_keyboard=True, one_time_keyboard=True):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboardMarkup (–æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏)"""
        markup = ReplyKeyboardMarkup(buttons, resize_keyboard=resize_keyboard, one_time_keyboard=one_time_keyboard)
        await self.app.bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)

    async def send_inline_keyboard(self, chat_id, text, buttons):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å InlineKeyboardMarkup (inline-–∫–Ω–æ–ø–∫–∏)"""
        markup = InlineKeyboardMarkup(buttons)
        await self.app.bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)

    async def on_callback_query(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        data = query.data
        user = query.from_user
        
        logger.info(f"Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç {user.id} (@{user.username}): {data}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º DialogStateManager –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
            from app.utils.dialog_state import DialogStateManager
            dialog_state = DialogStateManager()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state = await dialog_state.get_state(user.id)
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AgentManagerPlugin
            from app.plugins.agent_manager_plugin import AgentManagerPlugin
            agent_manager = AgentManagerPlugin()
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_data = {
                "user_id": user.id,
                "chat_id": update.effective_chat.id,
                "callback_data": data,
                "username": user.username,
                "first_name": user.first_name,
                "last_name": user.last_name
            }
            
            # –ï—Å–ª–∏ callback –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "agent:", —ç—Ç–æ –≤—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞
            if data.startswith("agent:"):
                await query.answer(f"–í—ã–±—Ä–∞–Ω –∞–≥–µ–Ω—Ç: {data.split(':', 1)[1]}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback —á–µ—Ä–µ–∑ AgentManagerPlugin
                updated_context = await agent_manager.process_callback(data, context_data)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if "welcome_message" in updated_context:
                    await query.edit_message_text(updated_context["welcome_message"])
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await dialog_state.update_step(user.id, "agent_active", updated_context)
                
            # –ï—Å–ª–∏ callback = "menu", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            elif data == "menu":
                await query.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback —á–µ—Ä–µ–∑ AgentManagerPlugin
                updated_context = await agent_manager.process_callback(data, context_data)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω—é
                if "agent_menu" in updated_context:
                    menu = updated_context["agent_menu"]
                    text = menu.get("text", "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞:")
                    reply_markup = menu.get("reply_markup")
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    keyboard = []
                    for row in reply_markup.get("inline_keyboard", []):
                        keyboard_row = []
                        for btn in row:
                            keyboard_row.append(InlineKeyboardButton(btn[0], callback_data=btn[1]))
                        keyboard.append(keyboard_row)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
                    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await dialog_state.update_step(user.id, "agent_menu", updated_context)
            
            # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã callback
            else:
                await query.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã...")
                await query.edit_message_text(f"–ö–æ–º–∞–Ω–¥–∞ –≤—ã–±—Ä–∞–Ω–∞: {data}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")

    async def send_message(self, chat_id: int, text: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        try:
            await self.app.bot.send_message(chat_id=chat_id, text=text)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
            return False 