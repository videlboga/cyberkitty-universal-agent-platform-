"""
üß† SmartFunctionTool - –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Python —Ñ—É–Ω–∫—Ü–∏—è–º–∏

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ Python —Ñ—É–Ω–∫—Ü–∏–π —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º.
"""

import ast
import inspect
import time
import sys
import traceback
from typing import Optional, Dict, Any, List, Union, Callable
from dataclasses import dataclass
from loguru import logger

from kittycore.tools.base_tool import Tool, ToolResult


@dataclass
class FunctionMetadata:
    """–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Python —Ñ—É–Ω–∫—Ü–∏–∏"""
    name: str
    signature: str
    parameters: List[Dict[str, Any]]
    return_type: Optional[str] = None
    docstring: Optional[str] = None
    source_code: Optional[str] = None
    complexity: int = 0
    is_async: bool = False


@dataclass
class ExecutionResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"""
    success: bool
    result: Any = None
    error: Optional[str] = None
    execution_time: float = 0.0
    output: Optional[str] = None
    function_name: str = ""


class SmartFunctionTool(Tool):
    """–£–º–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Python —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    
    def __init__(self):
        super().__init__(
            name="smart_function_tool", 
            description="–°–æ–∑–¥–∞–Ω–∏–µ, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ Python —Ñ—É–Ω–∫—Ü–∏–π —Å –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–æ–º"
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä —Ñ—É–Ω–∫—Ü–∏–π
        self.functions: Dict[str, Callable] = {}
        self.metadata: Dict[str, FunctionMetadata] = {}
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π namespace –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.global_namespace = {
            '__builtins__': __builtins__,
            'math': None,  # –ë—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            'datetime': None,
            'json': None,
            'random': None,
            'os': None,
            're': None
        }
        
        logger.info("üß† SmartFunctionTool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_available_actions(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        return [
            "create_function",
            "execute_function", 
            "analyze_function",
            "list_functions",
            "get_function_info",
            "delete_function",
            "import_module",
            "validate_code"
        ]
    
    async def create_function(self, 
                            function_code: str,
                            function_name: Optional[str] = None,
                            auto_import: bool = True) -> ToolResult:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ Python —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –∫–æ–¥–∞
        
        Args:
            function_code: –ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
            function_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–µ—Å–ª–∏ None - –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
            auto_import: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            validation_result = await self.validate_code(function_code)
            if not validation_result.success:
                return validation_result
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
            if auto_import:
                await self._auto_import_modules(function_code)
            
            # –ü–∞—Ä—Å–∏–Ω–≥ AST –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏–∏
            tree = ast.parse(function_code)
            
            # –ü–æ–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
            function_def = None
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    function_def = node
                    break
            
            if not function_def:
                return ToolResult(
                    success=False,
                    error="–ö–æ–¥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"
                )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
            actual_name = function_name or function_def.name
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º namespace
            exec(function_code, self.global_namespace)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            created_function = self.global_namespace.get(function_def.name)
            if not created_function:
                return ToolResult(
                    success=False,
                    error=f"–§—É–Ω–∫—Ü–∏—è {function_def.name} –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞"
                )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            metadata = self._analyze_function_ast(function_def, function_code)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            self.functions[actual_name] = created_function
            self.metadata[actual_name] = metadata
            
            logger.info(f"üéØ –§—É–Ω–∫—Ü–∏—è {actual_name} —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            
            return ToolResult(
                success=True,
                data={
                    "function_name": actual_name,
                    "metadata": metadata.__dict__,
                    "registered": True
                }
            )
            
        except SyntaxError as e:
            return ToolResult(
                success=False,
                error=f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
            )
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: {e}"
            )
    
    def _analyze_function_ast(self, func_node: ast.FunctionDef, source_code: str) -> FunctionMetadata:
        """–ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ AST"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        parameters = []
        for arg in func_node.args.args:
            param_info = {
                "name": arg.arg,
                "type": None,
                "default": None,
                "required": True
            }
            
            # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ç–∏–ø–∞
            if arg.annotation:
                param_info["type"] = ast.unparse(arg.annotation)
            
            parameters.append(param_info)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        defaults = func_node.args.defaults
        if defaults:
            # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–¥—É—Ç —Å –∫–æ–Ω—Ü–∞
            offset = len(parameters) - len(defaults)
            for i, default in enumerate(defaults):
                parameters[offset + i]["default"] = ast.unparse(default)
                parameters[offset + i]["required"] = False
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        return_type = None
        if func_node.returns:
            return_type = ast.unparse(func_node.returns)
        
        # –ü–æ–ª—É—á–∞–µ–º docstring
        docstring = None
        if (func_node.body and 
            isinstance(func_node.body[0], ast.Expr) and 
            isinstance(func_node.body[0].value, ast.Constant) and 
            isinstance(func_node.body[0].value.value, str)):
            docstring = func_node.body[0].value.value
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤)
        complexity = len(list(ast.walk(func_node)))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å
        is_async = isinstance(func_node, ast.AsyncFunctionDef)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É
        signature = f"{func_node.name}({', '.join([p['name'] for p in parameters])})"
        if return_type:
            signature += f" -> {return_type}"
        
        return FunctionMetadata(
            name=func_node.name,
            signature=signature,
            parameters=parameters,
            return_type=return_type,
            docstring=docstring,
            source_code=source_code,
            complexity=complexity,
            is_async=is_async
        )
    
    async def validate_code(self, code: str) -> ToolResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è Python –∫–æ–¥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            ast.parse(code)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            dangerous_patterns = [
                '__import__', 'eval', 'exec', 'open', 'file',
                'subprocess', 'os.system', 'os.popen'
            ]
            
            warnings = []
            for pattern in dangerous_patterns:
                if pattern in code:
                    warnings.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {pattern}")
            
            return ToolResult(
                success=True,
                data={
                    "valid": True,
                    "warnings": warnings,
                    "ast_nodes": len(list(ast.walk(ast.parse(code))))
                }
            )
            
        except SyntaxError as e:
            return ToolResult(
                success=False,
                error=f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}",
                data={
                    "valid": False,
                    "line": e.lineno,
                    "column": e.offset
                }
            )
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}"
            )
    
    async def execute_function(self,
                             function_name: str,
                             args: Optional[List[Any]] = None,
                             kwargs: Optional[Dict[str, Any]] = None,
                             timeout: float = 30.0) -> ToolResult:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        
        Args:
            function_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏
            args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            timeout: –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        try:
            if function_name not in self.functions:
                return ToolResult(
                    success=False,
                    error=f"–§—É–Ω–∫—Ü–∏—è {function_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
            
            func = self.functions[function_name]
            args = args or []
            kwargs = kwargs or {}
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            validation_result = self._validate_function_args(function_name, args, kwargs)
            if not validation_result.success:
                return validation_result
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
            start_time = time.time()
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å
                if self.metadata[function_name].is_async:
                    import asyncio
                    result = await asyncio.wait_for(func(*args, **kwargs), timeout=timeout)
                else:
                    result = func(*args, **kwargs)
                
                execution_time = time.time() - start_time
                
                return ToolResult(
                    success=True,
                    data={
                        "function_name": function_name,
                        "result": result,
                        "execution_time": max(round(execution_time, 6), 0.000001),  # –ú–∏–Ω–∏–º—É–º 1 –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞
                        "args_count": len(args),
                        "kwargs_count": len(kwargs)
                    }
                )
                
            except Exception as func_error:
                execution_time = time.time() - start_time
                
                return ToolResult(
                    success=False,
                    error=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: {func_error}",
                    data={
                        "function_name": function_name,
                        "execution_time": round(execution_time, 4),
                        "traceback": traceback.format_exc()
                    }
                )
                
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}"
            )
    
    def _validate_function_args(self, function_name: str, args: List[Any], kwargs: Dict[str, Any]) -> ToolResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            metadata = self.metadata[function_name]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            required_params = [p for p in metadata.parameters if p["required"]]
            optional_params = [p for p in metadata.parameters if not p["required"]]
            
            total_provided = len(args) + len(kwargs)
            min_required = len(required_params)
            max_allowed = len(metadata.parameters)
            
            if total_provided < min_required:
                return ToolResult(
                    success=False,
                    error=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min_required}, –ø–µ—Ä–µ–¥–∞–Ω–æ {total_provided}"
                )
            
            if total_provided > max_allowed:
                return ToolResult(
                    success=False,
                    error=f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: –º–∞–∫—Å–∏–º—É–º {max_allowed}, –ø–µ—Ä–µ–¥–∞–Ω–æ {total_provided}"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–º–µ–Ω
            param_names = [p["name"] for p in metadata.parameters]
            for i, arg in enumerate(args):
                if i < len(param_names) and param_names[i] in kwargs:
                    return ToolResult(
                        success=False,
                        error=f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {param_names[i]} –ø–µ—Ä–µ–¥–∞–Ω –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ –∏ –ø–æ –∏–º–µ–Ω–∏"
                    )
            
            return ToolResult(success=True, data={"validation": "passed"})
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {e}"
            )
    
    async def _auto_import_modules(self, code: str):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞"""
        try:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞
            common_modules = {
                'math': ['math', 'sqrt', 'sin', 'cos', 'pi', 'e'],
                'datetime': ['datetime', 'date', 'time', 'timedelta'],
                'json': ['json', 'loads', 'dumps'],
                'random': ['random', 'randint', 'choice', 'shuffle'],
                'os': ['os', 'path', 'listdir', 'getcwd'],
                're': ['re', 'match', 'search', 'findall', 'sub']
            }
            
            for module_name, keywords in common_modules.items():
                if any(keyword in code for keyword in keywords):
                    if self.global_namespace.get(module_name) is None:
                        try:
                            imported_module = __import__(module_name)
                            self.global_namespace[module_name] = imported_module
                            logger.info(f"üì¶ –ê–≤—Ç–æ–∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è: {module_name}")
                        except ImportError:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å: {module_name}")
                            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞: {e}")
    
    async def import_module(self, module_name: str, alias: Optional[str] = None) -> ToolResult:
        """–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π namespace"""
        try:
            imported_module = __import__(module_name)
            
            # –î–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∏–º–µ–Ω –º–æ–¥—É–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, os.path)
            if '.' in module_name:
                for part in module_name.split('.')[1:]:
                    imported_module = getattr(imported_module, part)
            
            name_in_namespace = alias or module_name.split('.')[-1]
            self.global_namespace[name_in_namespace] = imported_module
            
            logger.info(f"üì¶ –ú–æ–¥—É–ª—å {module_name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {name_in_namespace}")
            
            return ToolResult(
                success=True,
                data={
                    "module": module_name,
                    "alias": name_in_namespace,
                    "type": str(type(imported_module))
                }
            )
            
        except ImportError as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è {module_name}: {e}"
            )
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}"
            )
    
    async def list_functions(self) -> ToolResult:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        try:
            functions_info = []
            
            for name, metadata in self.metadata.items():
                functions_info.append({
                    "name": name,
                    "signature": metadata.signature,
                    "parameters_count": len(metadata.parameters),
                    "complexity": metadata.complexity,
                    "is_async": metadata.is_async,
                    "has_docstring": bool(metadata.docstring)
                })
            
            return ToolResult(
                success=True,
                data={
                    "functions": functions_info,
                    "total_count": len(functions_info),
                    "namespace_size": len(self.global_namespace)
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π: {e}"
            )
    
    async def get_function_info(self, function_name: str) -> ToolResult:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            if function_name not in self.metadata:
                return ToolResult(
                    success=False,
                    error=f"–§—É–Ω–∫—Ü–∏—è {function_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
            
            metadata = self.metadata[function_name]
            
            return ToolResult(
                success=True,
                data={
                    "metadata": metadata.__dict__,
                    "is_registered": function_name in self.functions,
                    "source_available": bool(metadata.source_code)
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏–∏: {e}"
            )
    
    async def analyze_function(self, function_name: str) -> ToolResult:
        """–ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        try:
            if function_name not in self.functions:
                return ToolResult(
                    success=False,
                    error=f"–§—É–Ω–∫—Ü–∏—è {function_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
            
            func = self.functions[function_name]
            metadata = self.metadata[function_name]
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ inspect
            try:
                signature = inspect.signature(func)
                source = inspect.getsource(func)
                lines_count = len(source.split('\n'))
            except Exception:
                signature = None
                source = metadata.source_code
                lines_count = len(source.split('\n')) if source else 0
            
            analysis = {
                "basic_info": metadata.__dict__,
                "inspect_signature": str(signature) if signature else None,
                "lines_of_code": lines_count,
                "callable": callable(func),
                "memory_size": sys.getsizeof(func),
                "is_builtin": inspect.isbuiltin(func),
                "is_method": inspect.ismethod(func)
            }
            
            return ToolResult(
                success=True,
                data=analysis
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ—É–Ω–∫—Ü–∏–∏: {e}"
            )
    
    async def delete_function(self, function_name: str) -> ToolResult:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
        try:
            if function_name not in self.functions:
                return ToolResult(
                    success=False,
                    error=f"–§—É–Ω–∫—Ü–∏—è {function_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞
            del self.functions[function_name]
            del self.metadata[function_name]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ namespace –µ—Å–ª–∏ –µ—Å—Ç—å
            if function_name in self.global_namespace:
                del self.global_namespace[function_name]
            
            logger.info(f"üóëÔ∏è –§—É–Ω–∫—Ü–∏—è {function_name} —É–¥–∞–ª–µ–Ω–∞")
            
            return ToolResult(
                success=True,
                data={
                    "deleted_function": function_name,
                    "remaining_functions": len(self.functions)
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: {e}"
            )
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã Tool
    async def execute(self, **kwargs) -> ToolResult:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - –∞–ª–∏–∞—Å –¥–ª—è execute_action"""
        action = kwargs.pop('action', 'list_functions')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
        return await self.execute_action(action, **kwargs)
    
    def get_schema(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è LLM"""
        return {
            "name": self.name,
            "description": self.description,
            "actions": {
                "create_function": {
                    "description": "–°–æ–∑–¥–∞–Ω–∏–µ Python —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –∫–æ–¥–∞",
                    "parameters": {
                        "function_code": {"type": "string", "required": True, "description": "–ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏"},
                        "function_name": {"type": "string", "required": False, "description": "–ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)"},
                        "auto_import": {"type": "boolean", "required": False, "default": True, "description": "–ê–≤—Ç–æ–∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π"}
                    }
                },
                "execute_function": {
                    "description": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏",
                    "parameters": {
                        "function_name": {"type": "string", "required": True, "description": "–ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏"},
                        "args": {"type": "array", "required": False, "description": "–ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã"},
                        "kwargs": {"type": "object", "required": False, "description": "–ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã"},
                        "timeout": {"type": "number", "required": False, "default": 30.0, "description": "–¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"}
                    }
                },
                "validate_code": {
                    "description": "–í–∞–ª–∏–¥–∞—Ü–∏—è Python –∫–æ–¥–∞",
                    "parameters": {
                        "code": {"type": "string", "required": True, "description": "–ö–æ–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"}
                    }
                },
                "list_functions": {
                    "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                    "parameters": {}
                },
                "get_function_info": {
                    "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏–∏",
                    "parameters": {
                        "function_name": {"type": "string", "required": True, "description": "–ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏"}
                    }
                },
                "analyze_function": {
                    "description": "–ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏",
                    "parameters": {
                        "function_name": {"type": "string", "required": True, "description": "–ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏"}
                    }
                },
                "delete_function": {
                    "description": "–£–¥–∞–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏",
                    "parameters": {
                        "function_name": {"type": "string", "required": True, "description": "–ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏"}
                    }
                },
                "import_module": {
                    "description": "–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –≤ namespace",
                    "parameters": {
                        "module_name": {"type": "string", "required": True, "description": "–ò–º—è –º–æ–¥—É–ª—è"},
                        "alias": {"type": "string", "required": False, "description": "–ê–ª–∏–∞—Å –º–æ–¥—É–ª—è"}
                    }
                }
            },
            "examples": [
                {
                    "description": "–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏",
                    "action": "create_function",
                    "parameters": {
                        "function_code": "def factorial(n):\\n    if n <= 1:\\n        return 1\\n    return n * factorial(n-1)"
                    }
                },
                {
                    "description": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏",
                    "action": "execute_function",
                    "parameters": {
                        "function_name": "factorial",
                        "args": [5]
                    }
                }
            ]
        }
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ Tool
    async def execute_action(self, action: str, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        
        action_map = {
            "create_function": self.create_function,
            "execute_function": self.execute_function,
            "analyze_function": self.analyze_function,
            "list_functions": self.list_functions,
            "get_function_info": self.get_function_info,
            "delete_function": self.delete_function,
            "import_module": self.import_module,
            "validate_code": self.validate_code
        }
        
        if action not in action_map:
            return ToolResult(
                success=False,
                error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {list(action_map.keys())}"
            )
        
        try:
            method = action_map[action]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
            if inspect.iscoroutinefunction(method):
                return await method(**kwargs)
            else:
                return method(**kwargs)
                
        except TypeError as e:
            return ToolResult(
                success=False,
                error=f"–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è {action}: {e}"
            )
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action}: {e}"
            )


# –§–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def create_smart_function_tool() -> SmartFunctionTool:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    return SmartFunctionTool()


def create_math_function_tool() -> SmartFunctionTool:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    tool = SmartFunctionTool()
    
    # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º math –º–æ–¥—É–ª—å
    import math
    tool.global_namespace['math'] = math
    
    return tool