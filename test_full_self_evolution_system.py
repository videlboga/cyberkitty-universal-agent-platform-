#!/usr/bin/env python3
"""
üß¨ Comprehensive —Ç–µ—Å—Ç —Å–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–µ–π—Å—è —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è KittyCore 3.0

–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ 3 —Ñ–∞–∑—ã –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
üêú –§–ê–ó–ê 1: –§–µ—Ä–æ–º–æ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã
üß¨ –§–ê–ó–ê 2: –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤  
üß† –§–ê–ó–ê 3: –ù–µ–π—Ä–æ—ç–≤–æ–ª—é—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤

–ü—Ä–∏–Ω—Ü–∏–ø: "–°–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—Å—è, —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∏ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–µ—Ç—Å—è"
"""

import asyncio
import time
import random
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

async def test_full_self_evolution_system():
    """üß¨ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–µ–π—Å—è —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üß¨" + "="*80)
    print("üß¨ COMPREHENSIVE –¢–ï–°–¢ –°–ê–ú–û–†–ï–î–£–ü–õ–ò–¶–ò–†–£–Æ–©–ï–ô–°–Ø –°–ò–°–¢–ï–ú–´ KITTYCORE 3.0")
    print("üß¨" + "="*80)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
        print("\nüì¶ –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º...")
        from kittycore.core.pheromone_memory import get_pheromone_system, record_agent_success
        from kittycore.core.evolutionary_factory import get_evolutionary_factory, spawn_evolved_agent, update_agent_evolution
        from kittycore.core.prompt_evolution import get_prompt_evolution_engine, get_evolved_prompt, record_prompt_usage, generate_prompt_text
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º...")
        pheromone_sys = get_pheromone_system()
        evolution_factory = get_evolutionary_factory("./test_full_evolution/agents")
        prompt_engine = get_prompt_evolution_engine("./test_full_evolution/prompts")
        
        print(f"‚úÖ –§–µ—Ä–æ–º–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –∑–¥–æ—Ä–æ–≤—å–µ {pheromone_sys.get_pheromone_statistics()['system_health']:.2f}")
        print(f"‚úÖ –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞: {len(evolution_factory.active_agents)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
        print(f"‚úÖ –î–≤–∏–∂–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(prompt_engine.prompt_population)} –ø—Ä–æ–º–ø—Ç–æ–≤")
        
        # === –°–¶–ï–ù–ê–†–ò–ô 1: –°–û–ó–î–ê–ù–ò–ï –ò –û–ë–£–ß–ï–ù–ò–ï –ê–ì–ï–ù–¢–û–í ===
        print("\n" + "üå±" + "-"*60)
        print("üå± –°–¶–ï–ù–ê–†–ò–ô 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤")
        print("üå±" + "-"*60)
        
        # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        tasks_scenarios = [
            ("code", "programming", "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
            ("web", "web_development", "–°–æ–∑–¥–∞–π landing page"),
            ("analysis", "data_analysis", "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂"),
            ("code", "programming", "–°–æ–∑–¥–∞–π API endpoint"),
            ("web", "web_development", "Responsive –¥–∏–∑–∞–π–Ω"),
        ]
        
        agents_created = []
        prompts_used = {}
        
        for i, (agent_type, task_type, task_desc) in enumerate(tasks_scenarios):
            print(f"\nü§ñ –ó–∞–¥–∞—á–∞ {i+1}: {task_desc} (—Ç–∏–ø: {agent_type})")
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            agent_dna = spawn_evolved_agent(agent_type, [task_type])
            agents_created.append(agent_dna)
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            prompt_dna = get_evolved_prompt(agent_type, task_type)
            prompts_used[prompt_dna.prompt_id] = prompt_dna
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt_text = generate_prompt_text(prompt_dna)
            
            print(f"   üß¨ –ê–≥–µ–Ω—Ç: {agent_dna.agent_id} (–ø–æ–∫–æ–ª–µ–Ω–∏–µ {agent_dna.generation})")
            print(f"   üß† –ü—Ä–æ–º–ø—Ç: {prompt_dna.prompt_id} (–¥–ª–∏–Ω–∞ {len(prompt_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            start_time = time.time()
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–µ–Ω–µ—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞
            base_success_chance = agent_dna.genes.success_rate
            task_quality = agent_dna.genes.quality_factor
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
            actual_success = random.random() < base_success_chance
            quality_score = min(1.0, task_quality * random.uniform(0.7, 1.3))
            execution_time = random.uniform(10, 30) / agent_dna.genes.speed_factor
            
            end_time = time.time()
            
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—Ö' if actual_success else '‚ùå –ù–µ—É–¥–∞—á–∞'}")
            print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f}, –í—Ä–µ–º—è: {execution_time:.1f}—Å")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
            
            # 1. –§–µ—Ä–æ–º–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
            record_agent_success(
                task_type=task_type,
                solution_pattern=f"{agent_type}_solution",
                agent_combination=agent_type,
                tools_used=["llm", "code_generator"],
                success=actual_success
            )
            
            # 2. –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞
            update_agent_evolution(agent_dna.agent_id, actual_success, execution_time)
            
            # 3. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
            record_prompt_usage(
                prompt_dna.prompt_id, 
                task_type, 
                actual_success, 
                quality_score, 
                execution_time
            )
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
            await asyncio.sleep(0.1)
        
        # === –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê ===
        print("\n" + "üéØ" + "="*60)
        print("üéØ –ë–´–°–¢–†–ê–Ø –û–¶–ï–ù–ö–ê –°–ê–ú–û–†–ï–î–£–ü–õ–ò–¶–ò–†–£–Æ–©–ï–ô–°–Ø –°–ò–°–¢–ï–ú–´")
        print("üéØ" + "="*60)
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        pheromone_stats = pheromone_sys.get_pheromone_statistics()
        evolution_stats = evolution_factory.get_population_stats()
        
        print(f"üêú –§–µ—Ä–æ–º–æ–Ω—ã: –∑–¥–æ—Ä–æ–≤—å–µ {pheromone_stats['system_health']:.2f}")
        print(f"üß¨ –ê–≥–µ–Ω—Ç—ã: {evolution_stats.active_agents} –∞–∫—Ç–∏–≤–Ω—ã—Ö, –ø–æ–∫–æ–ª–µ–Ω–∏–µ {evolution_stats.max_generation}")
        print(f"üß† –ü—Ä–æ–º–ø—Ç—ã: {len(prompt_engine.prompt_population)} –≤ –ø–æ–ø—É–ª—è—Ü–∏–∏")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(agents_created)}")
        print(f"üéØ –°–∞–º–æ—Ä–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: –†–ê–ë–û–¢–ê–ï–¢!")
        
        return {
            'agents_created': len(agents_created),
            'max_generation': evolution_stats.max_generation,
            'system_health': pheromone_stats['system_health'],
            'success': True
        }
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    print("üß¨ –ó–∞–ø—É—Å–∫ comprehensive —Ç–µ—Å—Ç–∞ —Å–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–µ–π—Å—è —Å–∏—Å—Ç–µ–º—ã...")
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    test_dir = Path("./test_full_evolution")
    test_dir.mkdir(exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    result = asyncio.run(test_full_self_evolution_system())
    
    if result:
        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –ê–≥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {result['agents_created']}")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏!") 