// Universal Agent Platform - УПРОЩЕННАЯ АРХИТЕКТУРА  
// Принцип: ПРОСТОТА ПРЕВЫШЕ ВСЕГО!

// === АРХИТЕКТУРНЫЕ ПРИНЦИПЫ ===
// - Один SimpleScenarioEngine вместо множества движков
// - Простая система плагинов через BasePlugin  
// - Один API endpoint вместо множества
// - Минимум зависимостей и абстракций
// - Контекст передается явно между компонентами

// === ОСНОВНЫЕ КОМПОНЕНТЫ ===
// 1. SimpleScenarioEngine - единственный движок выполнения
// 2. BasePlugin - базовый класс для всех плагинов
// 3. Simple API - /simple/channels/{channel_id}/execute endpoint
// 4. Simple Dependencies - минимальная инициализация

// === ЛОГИРОВАНИЕ ===
// - Используй loguru для Python, JSON-формат логов
// - Все логи — только в папку logs/, с ротацией и сжатием
// - Логи движка: logs/engine.log
// - Логи плагинов: logs/plugins.log  
// - Логи ошибок: logs/errors.log
// - Логи API: logs/api.log

// === СТРУКТУРА ФАЙЛОВ ===
// app/core/simple_engine.py - главный движок
// app/core/base_plugin.py - базовый класс плагинов
// app/plugins/ - все плагины наследуют BasePlugin
// app/api/simple.py - упрощенный API
// app/dependencies.py - минимальные зависимости

// === ПРАВИЛА КОДА ===
// - Python: black, isort, flake8, docstrings Google-style
// - JS/TS: eslint, prettier, jsdoc
// - Покрытие тестами >80% (pytest)
// - Все тестовые логи — в logs/tests.log

// === ТЕСТИРОВАНИЕ ===
// - Unit тесты для SimpleScenarioEngine
// - Unit тесты для каждого плагина
// - Интеграционные тесты движка + плагины
// - E2E тесты реальных сценариев

// === ЗАПРЕЩЕНО ===
// - Создавать новые движки (только SimpleScenarioEngine)
// - Усложнять систему зависимостей
// - Создавать циклические зависимости  
// - Смешивать ответственность компонентов
// - Использовать старые движки (UnifiedEngine, ExtensibleEngine)

// === ПЛАГИНЫ ===
// - Все плагины наследуют BasePlugin
// - Метод register_handlers() возвращает Dict[str, Callable]  
// - Метод healthcheck() для проверки состояния
// - Плагины НЕ зависят друг от друга
// - TelegramPlugin - сообщения и callback_query
// - MongoPlugin - работа с базой данных
// - LLMPlugin - интеграция с ИИ
// - OrchestratorPlugin - переключение сценариев

// === СЦЕНАРИИ ===
// - JSON формат с полями: scenario_id, steps, initial_context
// - Шаги: {id, type, params, next_step}
// - Типы шагов: start, end, action, input, telegram_send_message
// - Переключение сценариев через switch_scenario шаг
// - Контекст сохраняется между переключениями

// === API ENDPOINTS (Порт: 8085) ===
// ОСНОВНОЙ ENDPOINT:
// POST /api/v1/simple/channels/{channel_id}/execute
// - Payload: {"user_id"?: string, "chat_id"?: string, "scenario_id"?: string, "context"?: object}
// - Response: {"success": boolean, "scenario_id": string, "final_context": object, "message"?: string, "error"?: string}

// СИСТЕМНЫЕ ENDPOINTS:
// GET /health - быстрая проверка здоровья
// GET /api/v1/simple/health - полная проверка здоровья
// GET /api/v1/simple/info - информация о системе и плагинах
// GET / - корневая страница

// MONGODB ENDPOINTS:
// POST /api/v1/simple/mongo/find
// - Payload: {"collection": string, "filter"?: object}
// - Response: {"success": boolean, "data": array, "error"?: string}

// POST /api/v1/simple/mongo/insert  
// - Payload: {"collection": string, "document": object}
// - Response: {"success": boolean, "data": object, "error"?: string}

// POST /api/v1/simple/mongo/update
// - Payload: {"collection": string, "filter": object, "document": object}
// - Response: {"success": boolean, "data": object, "error"?: string}

// POST /api/v1/simple/mongo/delete
// - Payload: {"collection": string, "filter": object}
// - Response: {"success": boolean, "data": object, "error"?: string}

// POST /api/v1/simple/mongo/save-scenario
// - Payload: {"collection": string, "scenario_id": string, "document": object}
// - Response: {"success": boolean, "data": object, "error"?: string}

// ВЫПОЛНЕНИЕ ШАГОВ:
// POST /api/v1/simple/execute
// - Payload: {"step": object, "context": object}
// - Response: {"success": boolean, "context": object, "error"?: string}

// === ЗАРЕГИСТРИРОВАННЫЕ ПЛАГИНЫ ===
// - mongo: MongoDB операции
// - simple_telegram: Telegram бот
// - simple_llm: LLM интеграция
// - simple_rag: RAG поиск
// - simple_scheduler: Планировщик задач
// - simple_http: HTTP запросы
// - simple_amocrm: AmoCRM интеграция

// === ДОСТУПНЫЕ HANDLERS ===
// Базовые: start, end, action, input, conditional_execute, switch_scenario, log_message, branch
// MongoDB: mongo_insert_document, mongo_upsert_document, mongo_find_documents, mongo_find_one_document, mongo_update_document, mongo_delete_document
// Telegram: telegram_send_message, telegram_edit_message, telegram_send_buttons, telegram_update_token, telegram_load_token, telegram_start_polling
// LLM: llm_query, llm_chat
// RAG: rag_search, rag_answer
// HTTP: http_get, http_post, http_put, http_delete, http_request
// AmoCRM (простой плагин): 
//   amocrm_find_contact - поиск контакта по query
//   amocrm_create_contact - создание контакта (name, phone, email)
//   amocrm_find_lead - поиск сделки по query
//   amocrm_create_lead - создание сделки (name, price, contact_id)
//   amocrm_add_note - добавление заметки к сущности
//   amocrm_search - универсальный поиск (contacts, leads)
// Scheduler: scheduler_create_task, scheduler_list_tasks, scheduler_get_task, scheduler_cancel_task, scheduler_get_stats

// === ДИНАМИЧЕСКАЯ ЗАГРУЗКА НАСТРОЕК ===
// - Все плагины ДОЛЖНЫ загружать настройки динамически из БД
// - Метод _ensure_fresh_settings() вызывается перед каждым запросом
// - НЕ кешировать настройки в памяти плагина
// - Настройки обновляются без перезапуска контейнера

// === БЕЗОПАСНОСТЬ ===
// - Все секреты только в .env
// - Валидация входных данных через Pydantic
// - Логирование подозрительной активности

// Всегда следуй этим правилам для создания простой и надежной системы! 