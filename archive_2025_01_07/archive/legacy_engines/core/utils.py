import re
import json # –î–æ–±–∞–≤–∏–ª, —Ç.–∫. –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –ª–æ–≥–æ–≤ –∏–ª–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
from typing import Dict, Any, List # List –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è resolve_string_template –∏ _resolve_value_from_context
from loguru import logger # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–π

# –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ app.core.scenario_executor
def _resolve_value_from_context(value: Any, context: Dict[str, Any], depth=0, max_depth=10) -> Any:
    if depth > max_depth:
        logger.warning(f"Max recursion depth reached in _resolve_value_from_context for value: {value}")
        return value

    if isinstance(value, str):
        if value.startswith("{") and value.endswith("}"):
            key_path = value[1:-1]
            parts = key_path.split('.')
            current_value = context
            resolved_successfully = True
            for part in parts:
                if isinstance(current_value, dict) and part in current_value:
                    current_value = current_value[part]
                elif isinstance(current_value, list): 
                    try:
                        idx = int(part)
                        if 0 <= idx < len(current_value):
                            current_value = current_value[idx]
                        else:
                            resolved_successfully = False
                            break
                    except ValueError:
                        resolved_successfully = False
                        break
                else:
                    resolved_successfully = False
                    break
            
            if resolved_successfully:
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–∞–º–æ —è–≤–ª—è–µ—Ç—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º
                if isinstance(current_value, str) and current_value.startswith("{") and current_value.endswith("}") and current_value != value:
                    return _resolve_value_from_context(current_value, context, depth + 1, max_depth)
                return current_value
            else: # –ï—Å–ª–∏ –ø—Ä—è–º–æ–π —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ –ø–æ –∫–ª—é—á—É –Ω–µ —É–¥–∞–ª—Å—è, –ø—ã—Ç–∞–µ–º—Å—è –∫–∞–∫ —à–∞–±–ª–æ–Ω —Å—Ç—Ä–æ–∫–∏
                return resolve_string_template(value, context) # –ò—Å–ø–æ–ª—å–∑—É–µ–º resolve_string_template –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º –≤–æ–∫—Ä—É–≥
        else:
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä {key.path}, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–µ –∫–∞–∫ —à–∞–±–ª–æ–Ω
            return resolve_string_template(value, context)

    elif isinstance(value, dict):
        return {k: _resolve_value_from_context(v, context, depth + 1, max_depth) for k, v in value.items()}
    elif isinstance(value, list):
        return [_resolve_value_from_context(item, context, depth + 1, max_depth) for item in value]
    return value

# –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ app.core.scenario_executor
def resolve_string_template(template_str: str, ctx: Dict[str, Any]) -> str:
    """–†–∞–∑—Ä–µ—à–∞–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ, –≤–∫–ª—é—á–∞—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    if not isinstance(template_str, str):
        return str(template_str)
        
    placeholders = re.findall(r"\{([^{}]+)\}", template_str)
    resolved_str = template_str
    
    for placeholder in placeholders:
        key_path = placeholder.strip()
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            if key_path in ctx:
                replacement_value = str(ctx[key_path])
                resolved_str = resolved_str.replace(f"{{{placeholder}}}", replacement_value)
                continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä—è–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –ø—Ä–æ–±—É–µ–º –ø—É—Ç—å —á–µ—Ä–µ–∑ —Ç–æ—á–∫–∏
            parts = key_path.split('.')
            current_value = ctx
            resolved_successfully = True
            
            for part in parts:
                if isinstance(current_value, dict) and part in current_value:
                    current_value = current_value[part]
                elif isinstance(current_value, list):
                    try:
                        idx = int(part)
                        if 0 <= idx < len(current_value):
                            current_value = current_value[idx]
                        else:
                            resolved_successfully = False
                            break
                    except ValueError:
                        resolved_successfully = False
                        break
                else:
                    resolved_successfully = False
                    break
            
            if resolved_successfully:
                replacement_value = str(current_value)
                resolved_str = resolved_str.replace(f"{{{placeholder}}}", replacement_value)
                continue
            
            # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –≤—ã—á–∏—Å–ª–∏—Ç—å –∫–∞–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            safe_context = {}
            for key, value in ctx.items():
                if not key.startswith("__"):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    safe_context[key] = value
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π
            result = eval(key_path, {"__builtins__": {}}, safe_context)
            replacement_value = str(result)
            resolved_str = resolved_str.replace(f"{{{placeholder}}}", replacement_value)
            logger.debug(f"üßÆ –í—ã—á–∏—Å–ª–µ–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ '{key_path}' = {result}")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä '{key_path}' –≤ —Å—Ç—Ä–æ–∫–µ: {e}")
            # –ï—Å–ª–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∫–∞–∫ –µ—Å—Ç—å
            
    return resolved_str 