#!/usr/bin/env python3
"""
üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Ä–∞–±–æ—á–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ KittyCore 3.0

–í—Å–µ 4 –Ω–µ—Ä–∞–±–æ—á–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!
"""

import asyncio

async def test_all_fixed_tools():
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 80)
    
    results = {}
    
    # 1. SmartFunctionTool
    print("\nüß† –¢–ï–°–¢ 1: SmartFunctionTool")
    print("-" * 40)
    try:
        from kittycore.tools.smart_function_tool import SmartFunctionTool
        tool1 = SmartFunctionTool()
        result1 = await tool1.execute(
            action="create_function",
            function_code="def hello(): return 'Fixed!'",
            function_name="hello"
        )
        results["smart_function"] = result1.success
        print(f"‚úÖ SmartFunctionTool: {'–†–ê–ë–û–¢–ê–ï–¢' if result1.success else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        if result1.success:
            print(f"üìä –î–∞–Ω–Ω—ã–µ: {len(str(result1.data))} —Å–∏–º–≤–æ–ª–æ–≤")
    except Exception as e:
        results["smart_function"] = False
        print(f"‚ùå SmartFunctionTool: –û–®–ò–ë–ö–ê - {e}")
    
    # 2. NetworkTool
    print("\nüåê –¢–ï–°–¢ 2: NetworkTool")
    print("-" * 40)
    try:
        from kittycore.tools.network_tool import NetworkTool
        tool2 = NetworkTool()
        result2 = await tool2.execute(
            action="scan_port",
            host="8.8.8.8",
            port=53
        )
        results["network"] = result2.success
        print(f"‚úÖ NetworkTool: {'–†–ê–ë–û–¢–ê–ï–¢' if result2.success else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        if result2.success:
            print(f"üìä –î–∞–Ω–Ω—ã–µ: {len(str(result2.data))} —Å–∏–º–≤–æ–ª–æ–≤")
    except Exception as e:
        results["network"] = False
        print(f"‚ùå NetworkTool: –û–®–ò–ë–ö–ê - {e}")
    
    # 3. EnhancedWebScrapingTool
    print("\nüåê –¢–ï–°–¢ 3: EnhancedWebScrapingTool")
    print("-" * 40)
    try:
        from kittycore.tools.enhanced_web_scraping_tool import EnhancedWebScrapingTool
        tool3 = EnhancedWebScrapingTool()
        result3 = await tool3.execute(
            urls=["https://httpbin.org/html"]
        )
        results["enhanced_web_scraping"] = result3.success
        print(f"‚úÖ EnhancedWebScrapingTool: {'–†–ê–ë–û–¢–ê–ï–¢' if result3.success else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        if result3.success:
            print(f"üìä –î–∞–Ω–Ω—ã–µ: {len(str(result3.data))} —Å–∏–º–≤–æ–ª–æ–≤")
    except Exception as e:
        results["enhanced_web_scraping"] = False
        print(f"‚ùå EnhancedWebScrapingTool: –û–®–ò–ë–ö–ê - {e}")
    
    # 4. DatabaseTool
    print("\nüóÑÔ∏è –¢–ï–°–¢ 4: DatabaseTool")
    print("-" * 40)
    try:
        from kittycore.tools.database_tool import DatabaseTool, DatabaseConnection
        sqlite_config = DatabaseConnection(db_type='sqlite', database='final_test.db')
        tool4 = DatabaseTool(default_connection=sqlite_config)
        result4 = await tool4.execute(
            query="SELECT 1 as test_value"
        )
        results["database"] = result4.success
        print(f"‚úÖ DatabaseTool: {'–†–ê–ë–û–¢–ê–ï–¢' if result4.success else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        if result4.success:
            print(f"üìä –î–∞–Ω–Ω—ã–µ: {len(str(result4.data))} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û—á–∏—Å—Ç–∫–∞
        try:
            import os
            if os.path.exists('final_test.db'):
                os.remove('final_test.db')
        except:
            pass
    except Exception as e:
        results["database"] = False
        print(f"‚ùå DatabaseTool: –û–®–ò–ë–ö–ê - {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 80)
    
    working_tools = sum(results.values())
    total_tools = len(results)
    success_rate = (working_tools / total_tools) * 100 if total_tools > 0 else 0
    
    print(f"‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´: {working_tools}/{total_tools} ({success_rate:.1f}%)")
    print(f"‚ùå –ù–ï–†–ê–ë–û–ß–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´: {total_tools - working_tools}/{total_tools}")
    
    for tool_name, is_working in results.items():
        status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if is_working else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        print(f"  - {tool_name}: {status}")
    
    print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´:")
    print("  1. SmartFunctionTool: action='create_function' + function_code –ø–∞—Ä–∞–º–µ—Ç—Ä")
    print("  2. NetworkTool: action='scan_port', 'get_request', 'ping_host'")
    print("  3. EnhancedWebScrapingTool: urls=[—Å–ø–∏—Å–æ–∫] –≤–º–µ—Å—Ç–æ url=—Å—Ç—Ä–æ–∫–∞")
    print("  4. DatabaseTool: default_connection —Å SQLite –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
    
    if working_tools == total_tools:
        print("\nüéâ –í–°–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –£–°–ü–ï–®–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        print("üöÄ KittyCore 3.0 –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É —Å 100% —Ä–∞–±–æ—á–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏!")
    else:
        print(f"\n‚ö†Ô∏è {total_tools - working_tools} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
    
    return results

if __name__ == "__main__":
    asyncio.run(test_all_fixed_tools()) 