"""
üß† SmartValidator - –£–º–Ω—ã–π LLM-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–Ω–µ—á–Ω–æ–π –ø–æ–ª—å–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- "–†–∞–±–æ—Ç–∞—é—â–∏–π –∫–æ–¥, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É"
- "–§–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, —Ä–µ—à–∞—é—â–∏–º –ø—Ä–æ–±–ª–µ–º—É" 
- "–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"
"""

import json
import logging
import os
from typing import Dict, Any, List, Optional
from dataclasses import dataclass

from kittycore.llm import get_llm_provider

logger = logging.getLogger(__name__)


@dataclass
class ValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    is_valid: bool
    score: float  # 0.0 - 1.0
    user_benefit: str  # –ü–æ–ª—å–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    issues: List[str]  # –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    recommendations: List[str]  # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    verdict: str  # –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç


class SmartValidator:
    """
    –£–º–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π LLM –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—à—ë–≤—ã–π Ministral 8B –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ($0.20/M vs $2.00/M)
        self.llm_provider = get_llm_provider("mistralai/ministral-8b")
        logger.info("üß† SmartValidator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –¥–µ—à—ë–≤—ã–º Ministral 8B")
    
    async def validate_result(self, 
                            original_task: str, 
                            result: Dict[str, Any],
                            created_files: List[str] = None) -> ValidationResult:
        """
        –£–º–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–Ω–µ—á–Ω–æ–π –ø–æ–ª—å–∑—ã
        """
        try:
            created_files = created_files or []
            
            # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            files_content = {}
            for file_path in created_files:
                if os.path.exists(file_path):
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è LLM
                            files_content[file_path] = content[:2000] + ("..." if len(content) > 2000 else "")
                    except Exception as e:
                        files_content[file_path] = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"
            
            # 2. –£–≥–∞–¥—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞
            task_to_validate = original_task
            if not original_task or original_task in ["–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "unknown", ""]:
                logger.info("üîÆ –ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å...")
                task_to_validate = await self._guess_original_task(files_content)
            
            # 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            validation_prompt = self._create_validation_prompt(
                task_to_validate, result, files_content
            )
            
            # 4. –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –æ—Ç LLM
            llm_response = self.llm_provider.complete(validation_prompt)
            
            # 5. –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç LLM
            validation_result = self._parse_llm_response(llm_response)
            
            logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {validation_result.verdict}")
            return validation_result
            
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê SmartValidator: {e}")
            # –ë–µ–∑ fallback - –µ—Å–ª–∏ LLM –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º
            raise Exception(f"‚ùå SmartValidator –ù–ï –ú–û–ñ–ï–¢ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ LLM: {e}")
    
    def _create_validation_prompt(self, 
                                original_task: str, 
                                result: Dict[str, Any], 
                                files_content: Dict[str, str]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        
        prompt = f"""–¢—ã —É–º–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ü–µ–Ω–∏—Ç—å, –ø–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –†–ï–ê–õ–¨–ù–£–Æ –ü–û–õ–¨–ó–£ –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

–ò–°–•–û–î–ù–ê–Ø –ó–ê–î–ê–ß–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{original_task}

–†–ï–ó–£–õ–¨–¢–ê–¢ –°–ò–°–¢–ï–ú–´:
{json.dumps(result, ensure_ascii=False, indent=2)}

–°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:
"""
        
        if files_content:
            for file_path, content in files_content.items():
                prompt += f"\n=== {file_path} ===\n{content}\n"
        else:
            prompt += "–§–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.\n"
        
        prompt += """
–ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò:
1. –ö–û–ù–ï–ß–ù–ê–Ø –ü–û–õ–¨–ó–ê: –ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°?
2. –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ó–ê–î–ê–ß–ï: –†–µ—à–∞–µ—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–µ–Ω–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É?
3. –†–ê–ë–û–ß–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –≠—Ç–æ –≥–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ –∑–∞–≥–æ—Ç–æ–≤–∫–∞/–ø–ª–∞–Ω?

–ü–†–ò–ú–ï–†–´ –û–¶–ï–ù–ö–ò:
- –ó–∞–¥–∞—á–∞ "–°–æ–∑–¥–∞–π —Å–∞–π—Ç" + –§–∞–π–ª —Å –ø–ª–∞–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏—è = ‚ùå –ù–ï –í–ê–õ–ò–î–ù–û (–ø–ª–∞–Ω ‚â† —Å–∞–π—Ç)
- –ó–∞–¥–∞—á–∞ "–°–æ–∑–¥–∞–π —Å–∞–π—Ç" + –†–∞–±–æ—á–∏–π HTML —Ñ–∞–π–ª = ‚úÖ –í–ê–õ–ò–î–ù–û (–≥–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç)
- –ó–∞–¥–∞—á–∞ "–ü–æ—Å—á–∏—Ç–∞–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å" + –§–∞–π–ª —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ —á–∏—Å–ª–∞–º–∏ = ‚úÖ –í–ê–õ–ò–î–ù–û (—Ä–∞—Å—á–µ—Ç –≥–æ—Ç–æ–≤)
- –ó–∞–¥–∞—á–∞ "–ü–æ—Å—á–∏—Ç–∞–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å" + –§–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–∫ —Å—á–∏—Ç–∞—Ç—å = ‚ùå –ù–ï –í–ê–õ–ò–î–ù–û (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚â† —Ä–∞—Å—á–µ—Ç)

–û–¢–í–ï–ß–ê–ô –í JSON –§–û–†–ú–ê–¢–ï:
{
    "is_valid": true/false,
    "score": 0.8,
    "user_benefit": "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–ª—å–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    "issues": ["–°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"],
    "recommendations": ["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"],
    "verdict": "–ö—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç"
}

JSON –û–¢–í–ï–¢:"""
        
        return prompt
    
    def _parse_llm_response(self, llm_response: str) -> ValidationResult:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç LLM –≤ ValidationResult"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_start = llm_response.find('{')
            json_end = llm_response.rfind('}') + 1
            
            if json_start != -1 and json_end > json_start:
                json_str = llm_response[json_start:json_end]
                parsed = json.loads(json_str)
                
                return ValidationResult(
                    is_valid=parsed.get('is_valid', False),
                    score=float(parsed.get('score', 0.0)),
                    user_benefit=parsed.get('user_benefit', '–ü–æ–ª—å–∑–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'),
                    issues=parsed.get('issues', []),
                    recommendations=parsed.get('recommendations', []),
                    verdict=parsed.get('verdict', '–í–µ—Ä–¥–∏–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
                )
            else:
                # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–∞—Ä—Å–∏–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
                return self._parse_text_response(llm_response)
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ LLM: {e}")
            return self._parse_text_response(llm_response)
    
    def _parse_text_response(self, response: str) -> ValidationResult:
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç LLM"""
        response_lower = response.lower()
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        is_valid = any(word in response_lower for word in [
            '–≤–∞–ª–∏–¥–Ω–æ', '–≥–æ—Ç–æ–≤', '—Ä–∞–±–æ—á–∏–π', '–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å', '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
        ]) and not any(word in response_lower for word in [
            '–Ω–µ –≤–∞–ª–∏–¥–Ω–æ', '–ø–ª–∞–Ω', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', '–æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫', '–Ω–µ –≥–æ—Ç–æ–≤'
        ])
        
        score = 0.8 if is_valid else 0.2
        
        return ValidationResult(
            is_valid=is_valid,
            score=score,
            user_benefit=f"–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑: {'–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–≥–æ–¥–µ–Ω –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é' if is_valid else '–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}",
            issues=[] if is_valid else ["LLM –Ω–µ —Å–º–æ–≥ —á–µ—Ç–∫–æ –æ—Ü–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"],
            recommendations=["–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"] if not is_valid else [],
            verdict=f"{'‚úÖ –í–ê–õ–ò–î–ù–û' if is_valid else '‚ùå –ù–ï –í–ê–õ–ò–î–ù–û'} (–∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑)"
        )

    async def _guess_original_task(self, files_content: Dict[str, str]) -> str:
        """–£–≥–∞–¥—ã–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–æ–≤"""
        try:
            if not files_content:
                return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞"
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            combined_content = ""
            for file_path, content in files_content.items():
                combined_content += f"\n=== {file_path} ===\n{content}\n"
            
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            guess_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –∏ —É–≥–∞–¥–∞–π –∫–∞–∫—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

–°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–û–í:
{combined_content[:1500]}

–û—Ç–≤–µ—á–∞–π –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π - –∫–∞–∫—É—é –∑–∞–¥–∞—á—É —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:

–ü–†–ò–ú–ï–†–´ –û–¢–í–ï–¢–û–í:
- "—Å–æ–∑–¥–∞–π —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏"
- "–ø–æ—Å—á–∏—Ç–∞–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —á–µ—Ä–Ω–æ–π –¥—ã—Ä—ã"  
- "—Å–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å"
- "–Ω–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞"
- "—Å–æ–∑–¥–∞–π –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"

–£–ì–ê–î–ê–ù–ù–ê–Ø –ó–ê–î–ê–ß–ê:"""

            # –ó–∞–ø—Ä–æ—Å –∫ LLM
            llm_response = self.llm_provider.complete(guess_prompt)
            guessed_task = llm_response.strip().strip('"').lower()
            
            logger.info(f"üîÆ –£–≥–∞–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {guessed_task}")
            return guessed_task
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≥–∞–¥–∞—Ç—å –∑–∞–¥–∞—á—É: {e}")
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞"





async def validate_task_result(task: str, 
                             result: Dict[str, Any], 
                             files: List[str] = None) -> ValidationResult:
    """
    –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏
    """
    validator = SmartValidator()
    return await validator.validate_result(task, result, files)