#!/usr/bin/env python3
"""
üß™ ONTOBOT TEST RUNNER
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ –¥–ª—è OntoBot —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º Telegram API
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
"""

import asyncio
import json
import time
from datetime import datetime
from typing import Dict, List, Any, Optional
import aiohttp
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add(
    "logs/ontobot_tests.log",
    rotation="10 MB",
    retention="7 days",
    compression="gz",
    format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | TEST | {message}",
    level="INFO"
)

class OntoTestRunner:
    """
    –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ OntoBot —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
    
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å:
    - Telegram Mock Server
    - User Simulator
    - KittyCore API
    """
    
    def __init__(self, 
                 kittycore_url: str = "http://localhost:8085",
                 mock_server_url: str = "http://localhost:8082"):
        self.kittycore_url = kittycore_url
        self.mock_server_url = mock_server_url
        self.test_results: List[Dict[str, Any]] = []
        
        logger.info("üß™ OntoBot Test Runner –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def test_mr_ontobot_welcome(self, user_id: int = 12345) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è Mr OntoBot."""
        
        test_name = "mr_ontobot_welcome"
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        
        start_time = time.time()
        
        try:
            # 1. –û—á–∏—â–∞–µ–º –º–æ–∫ —Å–µ—Ä–≤–µ—Ä
            await self._clear_mock_server()
            
            # 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ KittyCore API
            response = await self._execute_scenario(
                scenario_id="mr_ontobot_main_router",
                user_id=user_id,
                context={
                    "test_mode": True,
                    "telegram_api_url": self.mock_server_url
                }
            )
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            success = response.get("success", False)
            
            # 4. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
            messages = await self._get_mock_messages(user_id)
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            welcome_found = False
            for msg in messages.get("messages", []):
                if "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äì –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç" in msg.get("text", ""):
                    welcome_found = True
                    break
            
            duration = time.time() - start_time
            
            result = {
                "test_name": test_name,
                "success": success and welcome_found,
                "duration": duration,
                "messages_count": len(messages.get("messages", [])),
                "welcome_message_found": welcome_found,
                "response": response,
                "timestamp": datetime.now().isoformat()
            }
            
            self.test_results.append(result)
            
            if result["success"]:
                logger.info(f"‚úÖ –¢–µ—Å—Ç {test_name} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.2f}—Å")
            else:
                logger.error(f"‚ùå –¢–µ—Å—Ç {test_name} –ø—Ä–æ–≤–∞–ª–µ–Ω")
            
            return result
            
        except Exception as e:
            duration = time.time() - start_time
            
            result = {
                "test_name": test_name,
                "success": False,
                "duration": duration,
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
            
            self.test_results.append(result)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            
            return result
    
    async def test_user_interaction(self, user_id: int = 12346) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º."""
        
        test_name = "user_interaction"
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        
        start_time = time.time()
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º User Simulator
            from .user_simulator import UserSimulator
            
            simulator = UserSimulator(self.mock_server_url)
            
            # 1. –û—á–∏—â–∞–µ–º –º–æ–∫ —Å–µ—Ä–≤–µ—Ä
            await self._clear_mock_server()
            
            # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = simulator.create_user(user_id, "–∞–∫—Ç–∏–≤–Ω—ã–π")
            
            # 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç /start
            await simulator.send_message(user_id, "/start")
            
            # 4. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
            await asyncio.sleep(2)
            
            # 5. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self._get_mock_messages(user_id)
            
            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª
            bot_messages = [
                msg for msg in messages.get("messages", [])
                if msg.get("from", {}).get("is_bot", False)
            ]
            
            duration = time.time() - start_time
            
            result = {
                "test_name": test_name,
                "success": len(bot_messages) > 0,
                "duration": duration,
                "user_messages": len(messages.get("messages", [])) - len(bot_messages),
                "bot_messages": len(bot_messages),
                "timestamp": datetime.now().isoformat()
            }
            
            self.test_results.append(result)
            
            if result["success"]:
                logger.info(f"‚úÖ –¢–µ—Å—Ç {test_name} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.2f}—Å")
            else:
                logger.error(f"‚ùå –¢–µ—Å—Ç {test_name} –ø—Ä–æ–≤–∞–ª–µ–Ω")
            
            return result
            
        except Exception as e:
            duration = time.time() - start_time
            
            result = {
                "test_name": test_name,
                "success": False,
                "duration": duration,
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
            
            self.test_results.append(result)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            
            return result
    
    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã OntoBot."""
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ OntoBot")
        
        start_time = time.time()
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        tests = [
            self.test_mr_ontobot_welcome,
            self.test_user_interaction
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for test_func in tests:
            try:
                await test_func()
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
                await asyncio.sleep(1)
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        
        duration = time.time() - start_time
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r["success"]])
        failed_tests = total_tests - passed_tests
        
        summary = {
            "total_tests": total_tests,
            "passed": passed_tests,
            "failed": failed_tests,
            "success_rate": (passed_tests / total_tests * 100) if total_tests > 0 else 0,
            "total_duration": duration,
            "timestamp": datetime.now().isoformat(),
            "results": self.test_results
        }
        
        logger.info(f"üìä –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã: {passed_tests}/{total_tests} –ø—Ä–æ—à–ª–∏ –∑–∞ {duration:.2f}—Å")
        
        return summary
    
    async def _execute_scenario(self, scenario_id: str, user_id: int, context: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ KittyCore API."""
        
        payload = {
            "user_id": str(user_id),
            "chat_id": str(user_id),
            "scenario_id": scenario_id,
            "context": context
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.kittycore_url}/api/v1/simple/channels/test_channel/execute",
                    json=payload,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    return await response.json()
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
            return {"success": False, "error": str(e)}
    
    async def _clear_mock_server(self):
        """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞."""
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.delete(
                    f"{self.mock_server_url}/mock/clear"
                ) as response:
                    result = await response.json()
                    logger.debug("üßπ –ú–æ–∫ —Å–µ—Ä–≤–µ—Ä –æ—á–∏—â–µ–Ω")
                    return result
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –º–æ–∫ —Å–µ—Ä–≤–µ—Ä: {e}")
    
    async def _get_mock_messages(self, chat_id: int = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞."""
        
        try:
            url = f"{self.mock_server_url}/mock/messages"
            if chat_id:
                url += f"?chat_id={chat_id}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    return await response.json()
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return {"messages": [], "count": 0}
    
    def save_report(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∞—Ö –≤ —Ñ–∞–π–ª."""
        
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"logs/ontobot_test_report_{timestamp}.json"
        
        summary = {
            "test_run": {
                "timestamp": datetime.now().isoformat(),
                "total_tests": len(self.test_results),
                "passed": len([r for r in self.test_results if r["success"]]),
                "failed": len([r for r in self.test_results if not r["success"]])
            },
            "results": self.test_results
        }
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(summary, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

# === –ü–†–û–°–¢–û–ô –ó–ê–ü–£–°–ö ===

async def main():
    """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤."""
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ OntoBot")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç —Ä–∞–Ω–Ω–µ—Ä
    runner = OntoTestRunner()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    summary = await runner.run_all_tests()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    runner.save_report()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í ONTOBOT")
    print("="*50)
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_tests']}")
    print(f"–ü—Ä–æ—à–ª–∏: {summary['passed']}")
    print(f"–ü—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {summary['failed']}")
    print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate']:.1f}%")
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary['total_duration']:.2f}—Å")
    print("="*50)
    
    if summary['failed'] > 0:
        print("\n‚ùå –ü–†–û–í–ê–õ–ò–í–®–ò–ï–°–Ø –¢–ï–°–¢–´:")
        for result in summary['results']:
            if not result['success']:
                print(f"  - {result['test_name']}: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    logger.info("‚úÖ –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

if __name__ == "__main__":
    asyncio.run(main()) 