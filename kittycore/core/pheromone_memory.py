#!/usr/bin/env python3
"""
üêú Pheromone Memory System - –§–µ—Ä–æ–º–æ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –∫–∞–∫ —É –º—É—Ä–∞–≤—å—ë–≤

–ê–≥–µ–Ω—Ç—ã –æ—Å—Ç–∞–≤–ª—è—é—Ç "—Ñ–µ—Ä–æ–º–æ–Ω–Ω—ã–µ —Å–ª–µ–¥—ã" —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.
–°–∏—Å—Ç–µ–º–∞ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π –æ–ø—ã—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥–æ–≤.

–ü—Ä–∏–Ω—Ü–∏–ø: "–£—Å–ø–µ—à–Ω—ã–µ –ø—É—Ç–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å–∏–ª—å–Ω–µ–µ, –Ω–µ—É–¥–∞—á–Ω—ã–µ - —Å–ª–∞–±–µ—é—Ç" üêú
"""

import json
import time
import logging
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from pathlib import Path

logger = logging.getLogger(__name__)

@dataclass
class PheromoneTrail:
    """–§–µ—Ä–æ–º–æ–Ω–Ω—ã–π —Å–ª–µ–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
    
    trail_id: str
    task_type: str          # —Ç–∏–ø –∑–∞–¥–∞—á–∏ (coding, analysis, design, etc.)
    solution_pattern: str   # –ø–∞—Ç—Ç–µ—Ä–Ω —Ä–µ—à–µ–Ω–∏—è
    strength: float         # —Å–∏–ª–∞ —Ñ–µ—Ä–æ–º–æ–Ω–∞ (0.0 - 1.0)
    success_count: int      # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    failure_count: int      # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    last_used: datetime     # –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
    created_at: datetime    # –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞–Ω
    
    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏"""
        total = self.success_count + self.failure_count
        return self.success_count / total if total > 0 else 0.0
    
    @property
    def is_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏–µ (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è > 7 –¥–Ω–µ–π)"""
        return (datetime.now() - self.last_used).days > 7

@dataclass 
class TaskPheromones:
    """–§–µ—Ä–æ–º–æ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á"""
    
    task_type: str
    trails: Dict[str, PheromoneTrail]  # solution_pattern -> trail
    total_attempts: int = 0
    successful_attempts: int = 0
    
    @property
    def overall_success_rate(self) -> float:
        """–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á"""
        return self.successful_attempts / self.total_attempts if self.total_attempts > 0 else 0.0
    
    def get_strongest_trails(self, limit: int = 3) -> List[PheromoneTrail]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–µ —Å–∏–ª—å–Ω—ã–µ —Ñ–µ—Ä–æ–º–æ–Ω–Ω—ã–µ —Å–ª–µ–¥—ã"""
        sorted_trails = sorted(
            self.trails.values(),
            key=lambda t: t.strength * t.success_rate,
            reverse=True
        )
        return sorted_trails[:limit]

@dataclass
class AgentPheromones:
    """–§–µ—Ä–æ–º–æ–Ω—ã –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∞–≥–µ–Ω—Ç–æ–≤"""
    
    agent_combination: str  # –Ω–∞–ø—Ä–∏–º–µ—Ä "CodeAgent+AnalysisAgent"
    task_types: List[str]   # —Ç–∏–ø—ã –∑–∞–¥–∞—á –≥–¥–µ —ç—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
    strength: float
    usage_count: int
    success_rate: float
    last_used: datetime

class PheromoneMemorySystem:
    """–§–µ—Ä–æ–º–æ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã - –∫–∞–∫ —É –º—É—Ä–∞–≤—å—ë–≤"""
    
    def __init__(self, storage_path: str = "pheromone_storage"):
        self.storage_path = Path(storage_path)
        self.storage_path.mkdir(exist_ok=True)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Ñ–µ—Ä–æ–º–æ–Ω–æ–≤
        self.task_pheromones: Dict[str, TaskPheromones] = {}
        self.agent_pheromones: Dict[str, AgentPheromones] = {}
        self.tool_pheromones: Dict[str, Dict[str, float]] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        self.evaporation_rate = 0.1  # —Å–∫–æ—Ä–æ—Å—Ç—å –∏—Å–ø–∞—Ä–µ–Ω–∏—è —Ñ–µ—Ä–æ–º–æ–Ω–æ–≤
        self.reinforcement_factor = 1.5  # —É—Å–∏–ª–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        self.min_strength = 0.1  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Ñ–µ—Ä–æ–º–æ–Ω–∞
        
        logger.info("üêú PheromoneMemorySystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self._load_pheromones()
    
    def record_solution_success(self, task_type: str, solution_pattern: str, 
                              agent_combination: str, tools_used: List[str], 
                              success: bool) -> None:
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è"""
        
        try:
            # 1. –û–±–Ω–æ–≤–∏—Ç—å —Ñ–µ—Ä–æ–º–æ–Ω—ã –∑–∞–¥–∞—á
            self._update_task_pheromones(task_type, solution_pattern, success)
            
            # 2. –û–±–Ω–æ–≤–∏—Ç—å —Ñ–µ—Ä–æ–º–æ–Ω—ã –∞–≥–µ–Ω—Ç–æ–≤
            self._update_agent_pheromones(agent_combination, task_type, success)
            
            # 3. –û–±–Ω–æ–≤–∏—Ç—å —Ñ–µ—Ä–æ–º–æ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            self._update_tool_pheromones(tools_used, task_type, success)
            
            logger.info(f"üêú –ó–∞–ø–∏—Å–∞–Ω —Ñ–µ—Ä–æ–º–æ–Ω–Ω—ã–π —Å–ª–µ–¥: {task_type} -> {solution_pattern} (success={success})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–µ—Ä–æ–º–æ–Ω–Ω–æ–≥–æ —Å–ª–µ–¥–∞: {e}")
    
    def get_best_solution_patterns(self, task_type: str, limit: int = 3) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á"""
        
        if task_type not in self.task_pheromones:
            logger.info(f"‚ö†Ô∏è –ù–µ—Ç —Ñ–µ—Ä–æ–º–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á: {task_type}")
            return []
        
        strongest_trails = self.task_pheromones[task_type].get_strongest_trails(limit)
        patterns = [trail.solution_pattern for trail in strongest_trails]
        
        logger.debug(f"üéØ –õ—É—á—à–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è {task_type}: {patterns}")
        return patterns
    
    def _update_task_pheromones(self, task_type: str, solution_pattern: str, success: bool) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ñ–µ—Ä–æ–º–æ–Ω—ã –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á"""
        
        # –°–æ–∑–¥–∞—Ç—å TaskPheromones –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if task_type not in self.task_pheromones:
            self.task_pheromones[task_type] = TaskPheromones(
                task_type=task_type,
                trails={}
            )
        
        task_pheromones = self.task_pheromones[task_type]
        task_pheromones.total_attempts += 1
        
        if success:
            task_pheromones.successful_attempts += 1
        
        # –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ª–µ–¥
        if solution_pattern not in task_pheromones.trails:
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ª–µ–¥
            trail_id = f"{task_type}_{solution_pattern}_{int(time.time())}"
            task_pheromones.trails[solution_pattern] = PheromoneTrail(
                trail_id=trail_id,
                task_type=task_type,
                solution_pattern=solution_pattern,
                strength=0.5,  # –Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∏–ª–∞
                success_count=1 if success else 0,
                failure_count=0 if success else 1,
                last_used=datetime.now(),
                created_at=datetime.now()
            )
        else:
            # –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ª–µ–¥
            trail = task_pheromones.trails[solution_pattern]
            trail.last_used = datetime.now()
            
            if success:
                trail.success_count += 1
                # –£—Å–∏–ª–∏—Ç—å —Ñ–µ—Ä–æ–º–æ–Ω –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                trail.strength = min(1.0, trail.strength * self.reinforcement_factor)
            else:
                trail.failure_count += 1
                # –û—Å–ª–∞–±–∏—Ç—å —Ñ–µ—Ä–æ–º–æ–Ω –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
                trail.strength = max(self.min_strength, trail.strength * (1 - self.evaporation_rate))
    
    def _update_agent_pheromones(self, agent_combination: str, task_type: str, success: bool) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ñ–µ—Ä–æ–º–æ–Ω—ã –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
        
        if agent_combination not in self.agent_pheromones:
            self.agent_pheromones[agent_combination] = AgentPheromones(
                agent_combination=agent_combination,
                task_types=[task_type],
                strength=0.5,
                usage_count=1,
                success_rate=1.0 if success else 0.0,
                last_used=datetime.now()
            )
        else:
            agent_pheromone = self.agent_pheromones[agent_combination]
            agent_pheromone.usage_count += 1
            agent_pheromone.last_used = datetime.now()
            
            # –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –∑–∞–¥–∞—á –µ—Å–ª–∏ –Ω–æ–≤—ã–π
            if task_type not in agent_pheromone.task_types:
                agent_pheromone.task_types.append(task_type)
            
            # –û–±–Ω–æ–≤–∏—Ç—å success_rate
            if success:
                agent_pheromone.success_rate = (
                    agent_pheromone.success_rate * (agent_pheromone.usage_count - 1) + 1.0
                ) / agent_pheromone.usage_count
                agent_pheromone.strength = min(1.0, agent_pheromone.strength * self.reinforcement_factor)
            else:
                agent_pheromone.success_rate = (
                    agent_pheromone.success_rate * (agent_pheromone.usage_count - 1)
                ) / agent_pheromone.usage_count
                agent_pheromone.strength = max(self.min_strength, agent_pheromone.strength * (1 - self.evaporation_rate))
    
    def _update_tool_pheromones(self, tools_used: List[str], task_type: str, success: bool) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ñ–µ—Ä–æ–º–æ–Ω—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        
        if task_type not in self.tool_pheromones:
            self.tool_pheromones[task_type] = {}
        
        for tool in tools_used:
            if tool not in self.tool_pheromones[task_type]:
                self.tool_pheromones[task_type][tool] = 0.5
            
            if success:
                # –£—Å–∏–ª–∏—Ç—å —Ñ–µ—Ä–æ–º–æ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                self.tool_pheromones[task_type][tool] = min(
                    1.0, 
                    self.tool_pheromones[task_type][tool] * self.reinforcement_factor
                )
            else:
                # –û—Å–ª–∞–±–∏—Ç—å —Ñ–µ—Ä–æ–º–æ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
                self.tool_pheromones[task_type][tool] = max(
                    self.min_strength,
                    self.tool_pheromones[task_type][tool] * (1 - self.evaporation_rate)
                )
    
    def get_best_agent_combination(self, task_type: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á"""
        
        best_combination = None
        best_score = 0.0
        
        for combination, pheromone in self.agent_pheromones.items():
            if task_type in pheromone.task_types:
                score = pheromone.strength * pheromone.success_rate
                if score > best_score:
                    best_score = score
                    best_combination = combination
        
        logger.debug(f"üéØ –õ—É—á—à–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è {task_type}: {best_combination} (score={best_score:.2f})")
        return best_combination
    
    def get_best_tools(self, task_type: str, limit: int = 5) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á"""
        
        if task_type not in self.tool_pheromones:
            logger.info(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á: {task_type}")
            return []
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ —Å–∏–ª–µ —Ñ–µ—Ä–æ–º–æ–Ω–∞
        sorted_tools = sorted(
            self.tool_pheromones[task_type].items(),
            key=lambda x: x[1],  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å–∏–ª–µ —Ñ–µ—Ä–æ–º–æ–Ω–∞
            reverse=True
        )
        
        best_tools = [tool for tool, strength in sorted_tools[:limit]]
        logger.debug(f"üéØ –õ—É—á—à–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è {task_type}: {best_tools}")
        return best_tools
    
    def evaporate_pheromones(self) -> None:
        """–ò—Å–ø–∞—Ä–µ–Ω–∏–µ —Ñ–µ—Ä–æ–º–æ–Ω–æ–≤ (–≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)"""
        
        try:
            evaporated_count = 0
            
            # –ò—Å–ø–∞—Ä–µ–Ω–∏–µ —Ñ–µ—Ä–æ–º–æ–Ω–æ–≤ –∑–∞–¥–∞—á
            for task_type, task_pheromones in self.task_pheromones.items():
                trails_to_remove = []
                
                for pattern, trail in task_pheromones.trails.items():
                    # –ò—Å–ø–∞—Ä–∏—Ç—å —Ñ–µ—Ä–æ–º–æ–Ω
                    trail.strength *= (1 - self.evaporation_rate)
                    
                    # –£–¥–∞–ª–∏—Ç—å —Å–ª–∞–±—ã–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–ª–µ–¥—ã
                    if trail.strength < self.min_strength or trail.is_expired:
                        trails_to_remove.append(pattern)
                        evaporated_count += 1
                
                for pattern in trails_to_remove:
                    del task_pheromones.trails[pattern]
            
            # –ò—Å–ø–∞—Ä–µ–Ω–∏–µ —Ñ–µ—Ä–æ–º–æ–Ω–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
            agents_to_remove = []
            for combination, pheromone in self.agent_pheromones.items():
                pheromone.strength *= (1 - self.evaporation_rate)
                
                # –£–¥–∞–ª–∏—Ç—å —Å–ª–∞–±—ã–µ –∞–≥–µ–Ω—Ç–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
                if pheromone.strength < self.min_strength:
                    agents_to_remove.append(combination)
                    evaporated_count += 1
            
            for combination in agents_to_remove:
                del self.agent_pheromones[combination]
            
            # –ò—Å–ø–∞—Ä–µ–Ω–∏–µ —Ñ–µ—Ä–æ–º–æ–Ω–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            for task_type, tools in self.tool_pheromones.items():
                tools_to_remove = []
                for tool, strength in tools.items():
                    new_strength = strength * (1 - self.evaporation_rate)
                    if new_strength < self.min_strength:
                        tools_to_remove.append(tool)
                        evaporated_count += 1
                    else:
                        tools[tool] = new_strength
                
                for tool in tools_to_remove:
                    del tools[tool]
            
            if evaporated_count > 0:
                logger.info(f"üí® –ò—Å–ø–∞—Ä–µ–Ω–æ {evaporated_count} —Å–ª–∞–±—ã—Ö —Ñ–µ—Ä–æ–º–æ–Ω–Ω—ã—Ö —Å–ª–µ–¥–æ–≤")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–∞—Ä–µ–Ω–∏—è —Ñ–µ—Ä–æ–º–æ–Ω–æ–≤: {e}")
    
    def _save_pheromones(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–µ—Ä–æ–º–æ–Ω—ã –≤ —Ñ–∞–π–ª"""
        
        try:
            data = {
                'task_pheromones': {},
                'agent_pheromones': {},
                'tool_pheromones': self.tool_pheromones,
                'saved_at': datetime.now().isoformat()
            }
            
            # –°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–Ω—ã–µ —Ñ–µ—Ä–æ–º–æ–Ω—ã
            for task_type, task_pheromones in self.task_pheromones.items():
                data['task_pheromones'][task_type] = {
                    'task_type': task_pheromones.task_type,
                    'total_attempts': task_pheromones.total_attempts,
                    'successful_attempts': task_pheromones.successful_attempts,
                    'trails': {}
                }
                
                for pattern, trail in task_pheromones.trails.items():
                    data['task_pheromones'][task_type]['trails'][pattern] = {
                        'trail_id': trail.trail_id,
                        'task_type': trail.task_type,
                        'solution_pattern': trail.solution_pattern,
                        'strength': trail.strength,
                        'success_count': trail.success_count,
                        'failure_count': trail.failure_count,
                        'last_used': trail.last_used.isoformat(),
                        'created_at': trail.created_at.isoformat()
                    }
            
            # –°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–Ω—ã–µ —Ñ–µ—Ä–æ–º–æ–Ω—ã
            for combination, pheromone in self.agent_pheromones.items():
                data['agent_pheromones'][combination] = {
                    'agent_combination': pheromone.agent_combination,
                    'task_types': pheromone.task_types,
                    'strength': pheromone.strength,
                    'usage_count': pheromone.usage_count,
                    'success_rate': pheromone.success_rate,
                    'last_used': pheromone.last_used.isoformat()
                }
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
            save_path = self.storage_path / "pheromones.json"
            with open(save_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logger.debug(f"üíæ –§–µ—Ä–æ–º–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {save_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–µ—Ä–æ–º–æ–Ω–æ–≤: {e}")
    
    def _load_pheromones(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–µ—Ä–æ–º–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        
        try:
            load_path = self.storage_path / "pheromones.json"
            
            if not load_path.exists():
                logger.info("üìÇ –§–∞–π–ª —Ñ–µ—Ä–æ–º–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–π –ø–∞–º—è—Ç–∏")
                return
            
            with open(load_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–Ω—ã–µ —Ñ–µ—Ä–æ–º–æ–Ω—ã
            for task_type, task_data in data.get('task_pheromones', {}).items():
                trails = {}
                for pattern, trail_data in task_data.get('trails', {}).items():
                    trails[pattern] = PheromoneTrail(
                        trail_id=trail_data['trail_id'],
                        task_type=trail_data['task_type'],
                        solution_pattern=trail_data['solution_pattern'],
                        strength=trail_data['strength'],
                        success_count=trail_data['success_count'],
                        failure_count=trail_data['failure_count'],
                        last_used=datetime.fromisoformat(trail_data['last_used']),
                        created_at=datetime.fromisoformat(trail_data['created_at'])
                    )
                
                self.task_pheromones[task_type] = TaskPheromones(
                    task_type=task_data['task_type'],
                    trails=trails,
                    total_attempts=task_data['total_attempts'],
                    successful_attempts=task_data['successful_attempts']
                )
            
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–≥–µ–Ω—Ç–Ω—ã–µ —Ñ–µ—Ä–æ–º–æ–Ω—ã
            for combination, pheromone_data in data.get('agent_pheromones', {}).items():
                self.agent_pheromones[combination] = AgentPheromones(
                    agent_combination=pheromone_data['agent_combination'],
                    task_types=pheromone_data['task_types'],
                    strength=pheromone_data['strength'],
                    usage_count=pheromone_data['usage_count'],
                    success_rate=pheromone_data['success_rate'],
                    last_used=datetime.fromisoformat(pheromone_data['last_used'])
                )
            
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ–µ—Ä–æ–º–æ–Ω—ã
            self.tool_pheromones = data.get('tool_pheromones', {})
            
            logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–µ—Ä–æ–º–æ–Ω—ã: {len(self.task_pheromones)} —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á, {len(self.agent_pheromones)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∞–≥–µ–Ω—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–µ—Ä–æ–º–æ–Ω–æ–≤: {e}")
    
    def get_pheromone_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–µ—Ä–æ–º–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        
        stats = {
            'task_types': len(self.task_pheromones),
            'agent_combinations': len(self.agent_pheromones),
            'total_trails': sum(len(tp.trails) for tp in self.task_pheromones.values()),
            'strongest_trails': [],
            'best_agents': [],
            'system_health': 0.0
        }
        
        # –ù–∞–π—Ç–∏ —Å–∞–º—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å–ª–µ–¥—ã
        all_trails = []
        for task_pheromones in self.task_pheromones.values():
            all_trails.extend(task_pheromones.trails.values())
        
        strongest_trails = sorted(all_trails, key=lambda t: t.strength * t.success_rate, reverse=True)[:5]
        stats['strongest_trails'] = [
            {
                'task_type': trail.task_type,
                'solution_pattern': trail.solution_pattern,
                'strength': trail.strength,
                'success_rate': trail.success_rate,
                'usage_count': trail.success_count + trail.failure_count
            }
            for trail in strongest_trails
        ]
        
        # –ù–∞–π—Ç–∏ –ª—É—á—à–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
        best_agents = sorted(
            self.agent_pheromones.values(),
            key=lambda a: a.strength * a.success_rate,
            reverse=True
        )[:5]
        
        stats['best_agents'] = [
            {
                'combination': agent.agent_combination,
                'strength': agent.strength,
                'success_rate': agent.success_rate,
                'usage_count': agent.usage_count,
                'task_types': agent.task_types
            }
            for agent in best_agents
        ]
        
        # –û—Ü–µ–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        if stats['total_trails'] > 0:
            avg_strength = sum(trail.strength for trails in self.task_pheromones.values() for trail in trails.trails.values()) / stats['total_trails']
            stats['system_health'] = min(1.0, avg_strength * (stats['total_trails'] / 10))  # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        
        return stats
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–µ—Ä–æ–º–æ–Ω—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        try:
            self._save_pheromones()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏


# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –§–ï–†–û–ú–û–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ ===
_global_pheromone_system: Optional[PheromoneMemorySystem] = None

def get_pheromone_system() -> PheromoneMemorySystem:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–µ—Ä–æ–º–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    global _global_pheromone_system
    
    if _global_pheromone_system is None:
        _global_pheromone_system = PheromoneMemorySystem()
        logger.info("üêú –°–æ–∑–¥–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä PheromoneMemorySystem")
    
    return _global_pheromone_system

def record_agent_success(task_type: str, solution_pattern: str, 
                        agent_combination: str, tools_used: List[str], 
                        success: bool) -> None:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—Ö–∞ –∞–≥–µ–Ω—Ç–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ–µ—Ä–æ–º–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    
    pheromone_system = get_pheromone_system()
    pheromone_system.record_solution_success(
        task_type=task_type,
        solution_pattern=solution_pattern,
        agent_combination=agent_combination,
        tools_used=tools_used,
        success=success
    )

def get_optimal_approach(task_type: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–µ—Ä–æ–º–æ–Ω–æ–≤"""
    
    pheromone_system = get_pheromone_system()
    
    return {
        'task_type': task_type,
        'best_solution_patterns': pheromone_system.get_best_solution_patterns(task_type),
        'best_agent_combination': pheromone_system.get_best_agent_combination(task_type),
        'best_tools': pheromone_system.get_best_tools(task_type),
        'confidence': _calculate_confidence(task_type, pheromone_system)
    }

def _calculate_confidence(task_type: str, pheromone_system: PheromoneMemorySystem) -> float:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á"""
    
    if task_type not in pheromone_system.task_pheromones:
        return 0.0
    
    task_pheromones = pheromone_system.task_pheromones[task_type]
    
    # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–ø—ã—Ç–æ–∫ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–µ —É—Å–ø–µ—Ö–∞
    if task_pheromones.total_attempts == 0:
        return 0.0
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ = –±–æ–ª—å—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)
    attempt_confidence = min(1.0, task_pheromones.total_attempts / 10)
    success_confidence = task_pheromones.overall_success_rate
    
    return (attempt_confidence + success_confidence) / 2


if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
    logging.basicConfig(level=logging.INFO)
    
    print("üêú –¢–µ—Å—Ç PheromoneMemorySystem")
    
    # –°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É
    pheromone_system = PheromoneMemorySystem("test_pheromone_storage")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
    test_scenarios = [
        ("coding", "python_script", "CodeAgent", ["code_generator", "file_manager"], True),
        ("coding", "python_script", "CodeAgent", ["code_generator", "file_manager"], True),
        ("coding", "web_scraping", "CodeAgent+WebAgent", ["web_scraping", "data_analysis"], False),
        ("analysis", "data_analysis", "AnalysisAgent", ["data_analysis", "visualization"], True),
        ("coding", "python_script", "CodeAgent", ["code_generator", "file_manager"], True),
    ]
    
    print("\nüìä –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤...")
    for task_type, pattern, agents, tools, success in test_scenarios:
        pheromone_system.record_solution_success(task_type, pattern, agents, tools, success)
        print(f"  {task_type} -> {pattern} ({'‚úÖ' if success else '‚ùå'})")
    
    print("\nüéØ –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è coding
    coding_approach = get_optimal_approach("coding")
    print(f"Coding: {coding_approach}")
    
    # –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è analysis  
    analysis_approach = get_optimal_approach("analysis")
    print(f"Analysis: {analysis_approach}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    stats = pheromone_system.get_pheromone_statistics()
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    print(f"  –¢–∏–ø–æ–≤ –∑–∞–¥–∞—á: {stats['task_types']}")
    print(f"  –ö–æ–º–±–∏–Ω–∞—Ü–∏–π –∞–≥–µ–Ω—Ç–æ–≤: {stats['agent_combinations']}")
    print(f"  –í—Å–µ–≥–æ —Å–ª–µ–¥–æ–≤: {stats['total_trails']}")
    print(f"  –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {stats['system_health']:.2f}")
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!") 