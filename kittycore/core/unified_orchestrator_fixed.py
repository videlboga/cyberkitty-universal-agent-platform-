#!/usr/bin/env python3
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø UNIFIED_ORCHESTRATOR

–ü–†–û–ë–õ–ï–ú–ê: –í–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ—Ç –∑–∞ –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã, –¥–∞–≤–∞—è –≤—ã—Å–æ–∫–∏–µ –æ—Ü–µ–Ω–∫–∏
–†–ï–®–ï–ù–ò–ï: –ñ—ë—Å—Ç–∫–∏–µ —à—Ç—Ä–∞—Ñ—ã –∑–∞ –ø–æ–¥–¥–µ–ª–∫–∏, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–ª –ø—Ä–∏ 50%+ –ø–æ–¥–¥–µ–ª–æ–∫

–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ _validate_file_contents:
1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ–ª–æ–∫ –ü–ï–†–ï–î –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
2. –ñ—ë—Å—Ç–∫–∏–π —à—Ç—Ä–∞—Ñ -0.25 –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–¥–¥–µ–ª–∫—É
3. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–ª –ø—Ä–∏ 50%+ –ø–æ–¥–¥–µ–ª–æ–∫ (-0.5 –±–∞–ª–ª–∞)
4. –ü–æ–¥–¥–µ–ª–∫–∏ –ù–ï –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å—ã –∑–∞ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
"""

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
import sys
import os
sys.path.append(os.path.dirname(__file__))

from unified_orchestrator import *

class FixedUnifiedOrchestrator(UnifiedOrchestrator):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∂—ë—Å—Ç–∫–∏–º–∏ —à—Ç—Ä–∞—Ñ–∞–º–∏ –∑–∞ –ø–æ–¥–¥–µ–ª–∫–∏"""
    
    async def _validate_file_contents(self, created_files: List[str], task: str, expected_outcome: Dict) -> Dict[str, Any]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤ - –ñ–Å–°–¢–ö–ò–ï –®–¢–†–ê–§–´ –ó–ê –ü–û–î–î–ï–õ–ö–ò!
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –†–ï–ê–õ–¨–ù–´–ô –∫–æ–Ω—Ç–µ–Ω—Ç, –∞ –Ω–µ –æ—Ç—á—ë—Ç—ã –ø–æ–¥ –Ω—É–∂–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏.
        –ù–û–í–ò–ù–ö–ê: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–í–ê–õ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–æ–¥–¥–µ–ª–æ–∫!
        """
        score_bonus = 0.0
        details = []
        issues = []
        fake_files_count = 0
        total_files_count = 0
        
        for file_path in created_files:
            try:
                # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                if os.path.exists(file_path):
                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                        content = f.read()
                else:
                    issues.append(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                    continue
                
                total_files_count += 1
                
                # –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–¥–µ–ª–∫–∏ - –≠–¢–û –ü–†–ò–û–†–ò–¢–ï–¢!
                fake_report_check = self._detect_fake_reports(content, file_path, task)
                if fake_report_check['is_fake']:
                    fake_files_count += 1
                    issues.append(f"üö® –ü–û–î–î–ï–õ–ö–ê: {file_path}: {fake_report_check['reason']}")
                    # –ñ–Å–°–¢–ö–ò–ô –®–¢–†–ê–§ –∑–∞ –ø–æ–¥–¥–µ–ª–∫—É - –º–∏–Ω—É—Å –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –±–∞–ª–ª–∞!
                    score_bonus -= 0.25  # –ö–∞–∂–¥–∞—è –ø–æ–¥–¥–µ–ª–∫–∞ = -25% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –±–∞–ª–ª–∞
                    continue  # –ù–µ –¥–∞—ë–º –±–æ–Ω—É—Å—ã –∑–∞ –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã!
                
                # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –ù–ï –ø–æ–¥–¥–µ–ª–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                file_ext = os.path.splitext(file_path)[1].lower()
                content_check = self._check_content_by_extension(file_path, content, file_ext, task)
                
                if content_check['is_valid']:
                    score_bonus += content_check['bonus']
                    details.append(f"‚úÖ {file_path}: {content_check['reason']}")
                else:
                    issues.append(f"‚ùå {file_path}: {content_check['reason']}")
                    score_bonus -= 0.05  # –ú–∞–ª—ã–π —à—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                
                details.append(f"‚úÖ {file_path}: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ")
                
            except Exception as e:
                issues.append(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø–æ–¥–¥–µ–ª–æ–∫ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω!
        fake_ratio = fake_files_count / max(total_files_count, 1)
        
        if fake_ratio >= 0.5:  # 50%+ –ø–æ–¥–¥–µ–ª–æ–∫ = –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–ª
            score_bonus = -0.5  # –û–≥—Ä–æ–º–Ω—ã–π —à—Ç—Ä–∞—Ñ
            issues.append(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–í–ê–õ: {fake_files_count}/{total_files_count} —Ñ–∞–π–ª–æ–≤ - –ø–æ–¥–¥–µ–ª–∫–∏!")
        elif fake_ratio >= 0.3:  # 30%+ –ø–æ–¥–¥–µ–ª–æ–∫ = —Å–µ—Ä—å—ë–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            score_bonus -= 0.2  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ
            issues.append(f"‚ö†Ô∏è –°–ï–†–¨–Å–ó–ù–´–ï –ü–†–û–ë–õ–ï–ú–´: {fake_files_count}/{total_files_count} —Ñ–∞–π–ª–æ–≤ - –ø–æ–¥–¥–µ–ª–∫–∏!")
        elif fake_ratio > 0:  # –õ—é–±—ã–µ –ø–æ–¥–¥–µ–ª–∫–∏ = –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            issues.append(f"‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–û–î–î–ï–õ–ö–ò: {fake_files_count}/{total_files_count} —Ñ–∞–π–ª–æ–≤")
        
        logger.info(f"üìä –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤: {total_files_count} –≤—Å–µ–≥–æ, {fake_files_count} –ø–æ–¥–¥–µ–ª–æ–∫ ({fake_ratio*100:.1f}%), –±–æ–Ω—É—Å: {score_bonus:.3f}")
        
        return {
            'score_bonus': score_bonus,  # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ max() - —à—Ç—Ä–∞—Ñ—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å!
            'details': details,
            'issues': issues,
            'fake_files_count': fake_files_count,
            'total_files_count': total_files_count,
            'fake_ratio': fake_ratio
        }

def create_fixed_orchestrator(config: UnifiedConfig = None) -> FixedUnifiedOrchestrator:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if config is None:
        config = UnifiedConfig()
    return FixedUnifiedOrchestrator(config)

async def solve_with_fixed_orchestrator(task: str, **kwargs) -> Dict[str, Any]:
    """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä"""
    orchestrator = create_fixed_orchestrator()
    return await orchestrator.solve_task(task, **kwargs) 