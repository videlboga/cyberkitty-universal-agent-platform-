#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –¢–û–õ–¨–ö–û CHROMADB 
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ChromaDB —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ embedding –º–æ–¥–µ–ª–µ–π
"""

import asyncio
import sys
import time
from pathlib import Path

try:
    import chromadb
    print("‚úÖ ChromaDB –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
except ImportError:
    print("‚ùå ChromaDB –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sys.exit(1)

async def test_chromadb_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç ChromaDB"""
    print("üöÄ –¢–ï–°–¢ CHROMADB –ë–ï–ó EMBEDDING –ú–û–î–ï–õ–ï–ô")
    
    start_time = time.time()
    
    # –°–æ–∑–¥–∞—ë–º ChromaDB –∫–ª–∏–µ–Ω—Ç
    client = chromadb.Client()
    print("‚úÖ ChromaDB –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
    collection = client.create_collection(
        name="test_collection",
        get_or_create=True
    )
    print(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {collection.name}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ü–†–û–°–¢–´–ú–ò —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ (—Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞)
    import random
    
    documents = [
        "–°–æ–∑–¥–∞–ª Python —Å–∫—Ä–∏–ø—Ç",
        "–ù–∞–ø–∏—Å–∞–ª HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É", 
        "–ù–∞—Å—Ç—Ä–æ–∏–ª –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    ]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ (384 —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –∫–∞–∫ —É MiniLM)
    simple_embeddings = []
    for doc in documents:
        # –ü—Ä–æ—Å—Ç–æ–π —ç–º–±–µ–¥–¥–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ —Ç–µ–∫—Å—Ç–∞
        hash_val = hash(doc)
        embedding = [float((hash_val + i) % 1000) / 1000.0 for i in range(384)]
        simple_embeddings.append(embedding)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ ChromaDB
    collection.add(
        documents=documents,
        embeddings=simple_embeddings,
        metadatas=[
            {"category": "programming", "type": "script"},
            {"category": "web", "type": "page"},
            {"category": "database", "type": "config"}
        ],
        ids=[f"doc_{i}" for i in range(len(documents))]
    )
    
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    query_embedding = [float(i % 1000) / 1000.0 for i in range(384)]
    
    results = collection.query(
        query_embeddings=[query_embedding],
        n_results=2
    )
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results['documents'][0])}")
    
    for i, doc in enumerate(results['documents'][0]):
        distance = results['distances'][0][i]
        print(f"  üìã {doc} (distance: {distance:.3f})")
    
    total_time = time.time() - start_time
    print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f}—Å")
    
    print("üéâ CHROMADB –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
    return True

async def test_amem_fallback():
    """–¢–µ—Å—Ç fallback —Ä–µ–∂–∏–º–∞ A-MEM"""
    print("\nüîÑ –¢–ï–°–¢ FALLBACK –†–ï–ñ–ò–ú–ê A-MEM")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
    sys.path.append(str(Path(__file__).parent))
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –ª–æ–º–∞–µ–º –∏–º–ø–æ—Ä—Ç sentence_transformers
    import builtins
    real_import = builtins.__import__
    
    def mock_import(name, *args, **kwargs):
        if name == 'sentence_transformers':
            raise ImportError("Mock error")
        return real_import(name, *args, **kwargs)
    
    builtins.__import__ = mock_import
    
    try:
        from kittycore.memory.amem_integration import AgenticMemorySystem
        
        # –°–æ–∑–¥–∞—ë–º A-MEM (–¥–æ–ª–∂–µ–Ω —É–ø–∞—Å—Ç—å –≤ fallback)
        amem = AgenticMemorySystem()
        
        if hasattr(amem, 'simple_memory'):
            print("‚úÖ Fallback —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –ø–∞–º—è—Ç—å
            memory_id = await amem.add_note(
                content="–¢–µ—Å—Ç fallback –ø–∞–º—è—Ç–∏",
                tags=["test"],
                category="fallback"
            )
            print(f"‚úÖ –ü–∞–º—è—Ç—å —Å–æ–∑–¥–∞–Ω–∞: {memory_id}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
            results = await amem.search_agentic("—Ç–µ—Å—Ç", k=5)
            print(f"‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            return True
        else:
            print("‚ùå Fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
            return False
            
    finally:
        builtins.__import__ = real_import

if __name__ == "__main__":
    async def main():
        success1 = await test_chromadb_basic()
        success2 = await test_amem_fallback()
        
        if success1 and success2:
            print("\nüéâ –í–°–Å –†–ê–ë–û–¢–ê–ï–¢! A-MEM –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏!")
        else:
            print("\nüòû –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã...")
    
    asyncio.run(main()) 