"""
üîß SystemTools - –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è KittyCore 3.0

–†–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ 
- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
- –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
"""

import os
import subprocess
import shutil
import platform
from pathlib import Path
from typing import Dict, Any, List, Optional
from .base_tool import Tool, ToolResult

try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False


class FileManager(Tool):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏"""
    
    def __init__(self):
        super().__init__(
            name="file_manager",
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏"
        )
    
    def execute(self, operation: str, path: str = None, content: str = None, 
               destination: str = None, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–π–ª–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
        try:
            if operation == "create_file":
                return self._create_file(path, content or "")
            elif operation == "read_file":
                return self._read_file(path)
            elif operation == "delete_file":
                return self._delete_file(path)
            elif operation == "copy_file":
                return self._copy_file(path, destination)
            elif operation == "move_file":
                return self._move_file(path, destination)
            elif operation == "create_directory":
                return self._create_directory(path)
            elif operation == "list_directory":
                return self._list_directory(path or ".")
            elif operation == "get_file_info":
                return self._get_file_info(path)
            else:
                return ToolResult(
                    success=False,
                    error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}"
                )
                
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
            )
    
    def _create_file(self, path: str, content: str) -> ToolResult:
        """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª"""
        file_path = Path(path)
        file_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return ToolResult(
            success=True,
            data={
                "operation": "create_file",
                "path": str(file_path.absolute()),
                "size": len(content),
                "encoding": "utf-8"
            }
        )
    
    def _read_file(self, path: str) -> ToolResult:
        """–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª"""
        file_path = Path(path)
        
        if not file_path.exists():
            return ToolResult(
                success=False,
                error=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}"
            )
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        return ToolResult(
            success=True,
            data={
                "operation": "read_file",
                "path": str(file_path.absolute()),
                "content": content,
                "size": len(content),
                "lines": len(content.split('\n'))
            }
        )
    
    def _delete_file(self, path: str) -> ToolResult:
        """–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"""
        file_path = Path(path)
        
        if not file_path.exists():
            return ToolResult(
                success=False,
                error=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}"
            )
        
        file_path.unlink()
        
        return ToolResult(
            success=True,
            data={
                "operation": "delete_file",
                "path": str(file_path.absolute()),
                "deleted": True
            }
        )
    
    def _copy_file(self, source: str, destination: str) -> ToolResult:
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"""
        source_path = Path(source)
        dest_path = Path(destination)
        
        if not source_path.exists():
            return ToolResult(
                success=False,
                error=f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source}"
            )
        
        dest_path.parent.mkdir(parents=True, exist_ok=True)
        shutil.copy2(source_path, dest_path)
        
        return ToolResult(
            success=True,
            data={
                "operation": "copy_file",
                "source": str(source_path.absolute()),
                "destination": str(dest_path.absolute()),
                "size": dest_path.stat().st_size
            }
        )
    
    def _move_file(self, source: str, destination: str) -> ToolResult:
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª"""
        source_path = Path(source)
        dest_path = Path(destination)
        
        if not source_path.exists():
            return ToolResult(
                success=False,
                error=f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source}"
            )
        
        dest_path.parent.mkdir(parents=True, exist_ok=True)
        shutil.move(str(source_path), str(dest_path))
        
        return ToolResult(
            success=True,
            data={
                "operation": "move_file",
                "source": str(source_path.absolute()),
                "destination": str(dest_path.absolute())
            }
        )
    
    def _create_directory(self, path: str) -> ToolResult:
        """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        dir_path = Path(path)
        dir_path.mkdir(parents=True, exist_ok=True)
        
        return ToolResult(
            success=True,
            data={
                "operation": "create_directory",
                "path": str(dir_path.absolute()),
                "created": True
            }
        )
    
    def _list_directory(self, path: str) -> ToolResult:
        """–°–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        dir_path = Path(path)
        
        if not dir_path.exists():
            return ToolResult(
                success=False,
                error=f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {path}"
            )
        
        if not dir_path.is_dir():
            return ToolResult(
                success=False,
                error=f"–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {path}"
            )
        
        items = []
        for item in dir_path.iterdir():
            try:
                stat = item.stat()
                items.append({
                    "name": item.name,
                    "path": str(item.absolute()),
                    "type": "directory" if item.is_dir() else "file",
                    "size": stat.st_size if item.is_file() else None,
                    "modified": stat.st_mtime
                })
            except (OSError, PermissionError):
                items.append({
                    "name": item.name,
                    "path": str(item.absolute()),
                    "type": "unknown",
                    "error": "Permission denied"
                })
        
        return ToolResult(
            success=True,
            data={
                "operation": "list_directory",
                "path": str(dir_path.absolute()),
                "items": items,
                "total_items": len(items),
                "files": len([i for i in items if i.get("type") == "file"]),
                "directories": len([i for i in items if i.get("type") == "directory"])
            }
        )
    
    def _get_file_info(self, path: str) -> ToolResult:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
        file_path = Path(path)
        
        if not file_path.exists():
            return ToolResult(
                success=False,
                error=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}"
            )
        
        stat = file_path.stat()
        
        return ToolResult(
            success=True,
            data={
                "operation": "get_file_info",
                "path": str(file_path.absolute()),
                "name": file_path.name,
                "type": "directory" if file_path.is_dir() else "file",
                "size": stat.st_size,
                "created": stat.st_ctime,
                "modified": stat.st_mtime,
                "permissions": oct(stat.st_mode)[-3:],
                "owner_readable": os.access(file_path, os.R_OK),
                "owner_writable": os.access(file_path, os.W_OK),
                "owner_executable": os.access(file_path, os.X_OK)
            }
        )
    
    def get_schema(self) -> Dict[str, Any]:
        return {
            "type": "object",
            "properties": {
                "operation": {
                    "type": "string",
                    "enum": [
                        "create_file", "read_file", "delete_file", 
                        "copy_file", "move_file", "create_directory",
                        "list_directory", "get_file_info"
                    ],
                    "description": "–§–∞–π–ª–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"
                },
                "path": {
                    "type": "string",
                    "description": "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
                },
                "content": {
                    "type": "string",
                    "description": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (–¥–ª—è create_file)"
                },
                "destination": {
                    "type": "string",
                    "description": "–ü—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–¥–ª—è copy_file, move_file)"
                }
            },
            "required": ["operation"]
        }


class SystemTools(Tool):
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    
    def __init__(self):
        super().__init__(
            name="system_tools",
            description="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"
        )
    
    def execute(self, operation: str, command: str = None, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
        try:
            if operation == "run_command":
                return self._run_command(command, **kwargs)
            elif operation == "get_system_info":
                return self._get_system_info()
            elif operation == "get_process_info":
                return self._get_process_info(**kwargs)
            elif operation == "get_disk_usage":
                return self._get_disk_usage(kwargs.get("path", "."))
            elif operation == "get_memory_info":
                return self._get_memory_info()
            else:
                return ToolResult(
                    success=False,
                    error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}"
                )
                
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}"
            )
    
    def _run_command(self, command: str, timeout: int = 30, shell: bool = False) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É"""
        if not command:
            return ToolResult(
                success=False,
                error="–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            )
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        dangerous_commands = ['rm -rf', 'del /f', 'format', 'mkfs', 'dd if=']
        if any(danger in command.lower() for danger in dangerous_commands):
            return ToolResult(
                success=False,
                error="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ"
            )
        
        try:
            if shell:
                result = subprocess.run(
                    command,
                    shell=True,
                    capture_output=True,
                    text=True,
                    timeout=timeout
                )
            else:
                result = subprocess.run(
                    command.split(),
                    capture_output=True,
                    text=True,
                    timeout=timeout
                )
            
            return ToolResult(
                success=True,
                data={
                    "operation": "run_command",
                    "command": command,
                    "returncode": result.returncode,
                    "stdout": result.stdout,
                    "stderr": result.stderr,
                    "success": result.returncode == 0
                }
            )
            
        except subprocess.TimeoutExpired:
            return ToolResult(
                success=False,
                error=f"–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç {timeout} —Å–µ–∫—É–Ω–¥"
            )
    
    def _get_system_info(self) -> ToolResult:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            info = {
                "platform": platform.system(),
                "platform_release": platform.release(),
                "platform_version": platform.version(),
                "architecture": platform.machine(),
                "processor": platform.processor(),
                "hostname": platform.node(),
                "python_version": platform.python_version(),
                "current_directory": os.getcwd(),
                "environment_variables": len(os.environ),
                "cpu_count": os.cpu_count(),
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ psutil –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if PSUTIL_AVAILABLE:
                import psutil
                info.update({
                    "boot_time": psutil.boot_time(),
                    "cpu_percent": psutil.cpu_percent(interval=1),
                    "memory": {
                        "total": psutil.virtual_memory().total,
                        "available": psutil.virtual_memory().available,
                        "percent": psutil.virtual_memory().percent
                    },
                    "disk": {
                        "total": psutil.disk_usage('/').total,
                        "used": psutil.disk_usage('/').used,
                        "free": psutil.disk_usage('/').free
                    }
                })
            else:
                info["psutil_available"] = False
            
            return ToolResult(
                success=True,
                data={
                    "operation": "get_system_info",
                    "system_info": info
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"
            )
    
    def _get_process_info(self, pid: int = None) -> ToolResult:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö"""
        if not PSUTIL_AVAILABLE:
            return ToolResult(
                success=False,
                error="psutil –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psutil"
            )
            
        try:
            import psutil
            
            if pid:
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
                try:
                    process = psutil.Process(pid)
                    info = {
                        "pid": process.pid,
                        "name": process.name(),
                        "status": process.status(),
                        "cpu_percent": process.cpu_percent(),
                        "memory_percent": process.memory_percent(),
                        "create_time": process.create_time(),
                        "cmdline": process.cmdline()
                    }
                    
                    return ToolResult(
                        success=True,
                        data={
                            "operation": "get_process_info",
                            "process": info
                        }
                    )
                except psutil.NoSuchProcess:
                    return ToolResult(
                        success=False,
                        error=f"–ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    )
            else:
                # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (—Ç–æ–ø 10 –ø–æ CPU)
                processes = []
                for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
                    try:
                        processes.append(proc.info)
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        pass
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ CPU
                processes.sort(key=lambda x: x.get('cpu_percent', 0), reverse=True)
                
                return ToolResult(
                    success=True,
                    data={
                        "operation": "get_process_info",
                        "processes": processes[:10],
                        "total_processes": len(processes)
                    }
                )
                
        except ImportError:
            return ToolResult(
                success=False,
                error="psutil –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psutil"
            )
    
    def _get_disk_usage(self, path: str) -> ToolResult:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∏—Å–∫–∞"""
        try:
            usage = shutil.disk_usage(path)
            
            return ToolResult(
                success=True,
                data={
                    "operation": "get_disk_usage",
                    "path": path,
                    "total": usage.total,
                    "used": usage.used,
                    "free": usage.free,
                    "percent_used": (usage.used / usage.total) * 100
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ: {str(e)}"
            )
    
    def _get_memory_info(self) -> ToolResult:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏"""
        if not PSUTIL_AVAILABLE:
            return ToolResult(
                success=False,
                error="psutil –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psutil"
            )
            
        try:
            import psutil
            
            virtual = psutil.virtual_memory()
            swap = psutil.swap_memory()
            
            return ToolResult(
                success=True,
                data={
                    "operation": "get_memory_info",
                    "virtual_memory": {
                        "total": virtual.total,
                        "available": virtual.available,
                        "used": virtual.used,
                        "percent": virtual.percent
                    },
                    "swap_memory": {
                        "total": swap.total,
                        "used": swap.used,
                        "free": swap.free,
                        "percent": swap.percent
                    }
                }
            )
            
        except ImportError:
            return ToolResult(
                success=False,
                error="psutil –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psutil"
            )
    
    def get_schema(self) -> Dict[str, Any]:
        return {
            "type": "object",
            "properties": {
                "operation": {
                    "type": "string",
                    "enum": [
                        "run_command", "get_system_info", "get_process_info",
                        "get_disk_usage", "get_memory_info"
                    ],
                    "description": "–°–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"
                },
                "command": {
                    "type": "string",
                    "description": "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–ª—è run_command)"
                },
                "timeout": {
                    "type": "integer",
                    "description": "–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
                    "default": 30
                },
                "shell": {
                    "type": "boolean",
                    "description": "–í—ã–ø–æ–ª–Ω—è—Ç—å —á–µ—Ä–µ–∑ shell",
                    "default": False
                },
                "pid": {
                    "type": "integer",
                    "description": "PID –ø—Ä–æ—Ü–µ—Å—Å–∞ (–¥–ª—è get_process_info)"
                },
                "path": {
                    "type": "string",
                    "description": "–ü—É—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–∞",
                    "default": "."
                }
            },
            "required": ["operation"]
        } 