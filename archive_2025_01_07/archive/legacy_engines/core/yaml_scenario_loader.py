"""
YAML Scenario Loader –¥–ª—è Universal Agent Platform

–ü—Ä–∏–Ω—Ü–∏–ø—ã:
- –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û
- –ú–∏–Ω–∏–º—É–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π 
- –ü—Ä—è–º–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å SimpleScenarioEngine
- –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞
"""

import yaml
from typing import Dict, Any, List, Optional
from loguru import logger
from pathlib import Path


class YAMLScenarioLoader:
    """
    –ü—Ä–æ—Å—Ç–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫ YAML —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
    
    –ü—Ä–∏–Ω—Ü–∏–ø: –û–î–ò–ù –∫–ª–∞—Å—Å –¥–ª—è –û–î–ù–û–ô –∑–∞–¥–∞—á–∏ - –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è YAML.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
        self.supported_step_types = {
            # –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã
            'start', 'end', 'action', 'input', 'conditional_execute', 
            'switch_scenario', 'log_message', 'branch',
            
            # MongoDB
            'mongo_insert_document', 'mongo_upsert_document', 
            'mongo_find_documents', 'mongo_find_one_document',
            'mongo_update_document', 'mongo_delete_document',
            
            # ChannelManager (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞!)
            'channel_action',
            
            # LLM & RAG
            'llm_query', 'llm_chat', 'rag_search', 'rag_answer',
            
            # HTTP
            'http_get', 'http_post', 'http_put', 'http_delete', 'http_request',
            
            # AmoCRM
            'amocrm_find_contact', 'amocrm_create_contact',
            'amocrm_find_lead', 'amocrm_create_lead', 'amocrm_add_note',
            'amocrm_search',
            
            # Scheduler
            'scheduler_create_task', 'scheduler_list_tasks',
            'scheduler_get_task', 'scheduler_cancel_task', 'scheduler_get_stats'
        }
        
        logger.info("üîß YAMLScenarioLoader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_from_string(self, yaml_content: str) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ YAML —Å—Ç—Ä–æ–∫–∏.
        
        Args:
            yaml_content: YAML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            
        Returns:
            Dict —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º, –≥–æ—Ç–æ–≤—ã–º –¥–ª—è SimpleScenarioEngine
            
        Raises:
            ValueError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º YAML —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º
            scenario = yaml.safe_load(yaml_content)
            
            if not scenario:
                raise ValueError("YAML —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            self._validate_scenario(scenario)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –¥–≤–∏–∂–∫–æ–º
            converted = self._convert_to_engine_format(scenario)
            
            logger.info(f"‚úÖ YAML —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω: {converted.get('scenario_id', 'unknown')}")
            return converted
            
        except yaml.YAMLError as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {e}"
            logger.error(error_msg)
            raise ValueError(error_msg)
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YAML —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}"
            logger.error(error_msg)
            raise ValueError(error_msg)
    
    def load_from_file(self, file_path: str) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ YAML —Ñ–∞–π–ª–∞.
        
        Args:
            file_path: –ü—É—Ç—å –∫ YAML —Ñ–∞–π–ª—É
            
        Returns:
            Dict —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
        """
        try:
            path = Path(file_path)
            if not path.exists():
                raise FileNotFoundError(f"YAML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            
            with open(path, 'r', encoding='utf-8') as f:
                yaml_content = f.read()
            
            return self.load_from_string(yaml_content)
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è YAML —Ñ–∞–π–ª–∞ {file_path}: {e}"
            logger.error(error_msg)
            raise ValueError(error_msg)
    
    def convert_json_to_yaml(self, json_scenario: Dict[str, Any]) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç JSON —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ YAML —Ñ–æ—Ä–º–∞—Ç.
        
        Args:
            json_scenario: –°—Ü–µ–Ω–∞—Ä–∏–π –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
            
        Returns:
            YAML —Å—Ç—Ä–æ–∫–∞
        """
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ YAML-friendly —Ñ–æ—Ä–º–∞—Ç
            yaml_scenario = self._convert_from_json_format(json_scenario)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º YAML —Å —á–∏—Ç–∞–µ–º—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            yaml_content = yaml.dump(
                yaml_scenario,
                default_flow_style=False,
                allow_unicode=True,
                indent=2,
                sort_keys=False
            )
            
            logger.info(f"‚úÖ JSON —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ YAML: {json_scenario.get('scenario_id', 'unknown')}")
            return yaml_content
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ JSON –≤ YAML: {e}"
            logger.error(error_msg)
            raise ValueError(error_msg)
    
    def _validate_scenario(self, scenario: Dict[str, Any]) -> None:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É YAML —Å—Ü–µ–Ω–∞—Ä–∏—è."""
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['scenario_id', 'steps']
        for field in required_fields:
            if field not in scenario:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–≥–∏
        steps = scenario['steps']
        if not isinstance(steps, list) or len(steps) == 0:
            raise ValueError("–ü–æ–ª–µ 'steps' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥
        step_ids = set()
        for i, step in enumerate(steps):
            self._validate_step(step, i)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
            step_id = step['id']
            if step_id in step_ids:
                raise ValueError(f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —à–∞–≥–∞: {step_id}")
            step_ids.add(step_id)
        
        logger.debug(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è YAML —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario['scenario_id']} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    
    def _validate_step(self, step: Dict[str, Any], index: int) -> None:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —à–∞–≥."""
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —à–∞–≥–∞
        required_step_fields = ['id', 'type']
        for field in required_step_fields:
            if field not in step:
                raise ValueError(f"–í —à–∞–≥–µ {index} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —à–∞–≥–∞
        step_type = step['type']
        if step_type not in self.supported_step_types:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —à–∞–≥–∞: {step_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ params –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if step_type not in ['start', 'end'] and 'params' not in step:
            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —à–∞–≥–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ params
            if step_type not in ['action', 'log_message']:
                logger.warning(f"‚ö†Ô∏è –®–∞–≥ {step['id']} —Ç–∏–ø–∞ {step_type} –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    def _convert_to_engine_format(self, yaml_scenario: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç YAML —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è SimpleScenarioEngine.
        
        –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:
        - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å –¥–≤–∏–∂–∫–æ–º
        - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ${var} -> {var} –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        """
        converted = {
            'scenario_id': yaml_scenario['scenario_id'],
            'steps': []
        }
        
        # –ö–æ–ø–∏—Ä—É–µ–º initial_context –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'initial_context' in yaml_scenario:
            converted['initial_context'] = yaml_scenario['initial_context']
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥–∏
        for step in yaml_scenario['steps']:
            converted_step = {
                'id': step['id'],
                'type': step['type']
            }
            
            # –ö–æ–ø–∏—Ä—É–µ–º params –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'params' in step:
                converted_step['params'] = self._process_template_variables(step['params'])
            
            # –ö–æ–ø–∏—Ä—É–µ–º next_step –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'next_step' in step:
                converted_step['next_step'] = step['next_step']
            
            converted['steps'].append(converted_step)
        
        return converted
    
    def _convert_from_json_format(self, json_scenario: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSON —Ñ–æ—Ä–º–∞—Ç –≤ YAML-friendly —Ñ–æ—Ä–º–∞—Ç."""
        yaml_scenario = {
            'scenario_id': json_scenario['scenario_id']
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º initial_context –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'initial_context' in json_scenario:
            yaml_scenario['initial_context'] = json_scenario['initial_context']
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥–∏
        yaml_scenario['steps'] = []
        for step in json_scenario['steps']:
            yaml_step = {
                'id': step['id'],
                'type': step['type']
            }
            
            if 'params' in step:
                yaml_step['params'] = self._process_template_variables_reverse(step['params'])
            
            if 'next_step' in step:
                yaml_step['next_step'] = step['next_step']
            
            yaml_scenario['steps'].append(yaml_step)
        
        return yaml_scenario
    
    def _process_template_variables(self, obj: Any) -> Any:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç–µ: ${var} -> {var}
        –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–∏–º –¥–≤–∏–∂–∫–æ–º.
        """
        if isinstance(obj, str):
            # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –¥–≤–∏–∂–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å {var}
            return obj
        elif isinstance(obj, dict):
            return {k: self._process_template_variables(v) for k, v in obj.items()}
        elif isinstance(obj, list):
            return [self._process_template_variables(item) for item in obj]
        else:
            return obj
    
    def _process_template_variables_reverse(self, obj: Any) -> Any:
        """
        –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {var} -> ${var} –¥–ª—è YAML
        """
        if isinstance(obj, str):
            # –ó–∞–º–µ–Ω—è–µ–º {var} –Ω–∞ ${var} –¥–ª—è YAML
            import re
            return re.sub(r'\{([^}]+)\}', r'${\1}', obj)
        elif isinstance(obj, dict):
            return {k: self._process_template_variables_reverse(v) for k, v in obj.items()}
        elif isinstance(obj, list):
            return [self._process_template_variables_reverse(item) for item in obj]
        else:
            return obj


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
yaml_loader = YAMLScenarioLoader() 