#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ KittyCore

–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É FileSystemTool, ManifestValidatorTool, HumanRequestTool
–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LLM.
"""

import os
import sys
import json
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é kittycore
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from kittycore.browser_tools.browser_tools import FileSystemTool, ManifestValidatorTool, HumanRequestTool


def test_filesystem_tool():
    """–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üóÇÔ∏è === –¢–ï–°–¢ FILESYSTEM TOOL ===\n")
    
    tool = FileSystemTool()
    
    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    with tempfile.TemporaryDirectory() as temp_dir:
        test_dir = Path(temp_dir)
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        print("1. üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏...")
        result = tool.execute(action="mkdir", path=str(test_dir / "test_extension"))
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.success}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.data['message']}")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        print("\n2. üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ manifest.json...")
        manifest_content = {
            "manifest_version": 3,
            "name": "Test Extension",
            "version": "1.0.0",
            "description": "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ"
        }
        
        result = tool.execute(
            action="create",
            path=str(test_dir / "test_extension" / "manifest.json"),
            content=json.dumps(manifest_content, indent=2)
        )
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.success}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.data['message']}")
        
        # 3. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        print("\n3. üëÄ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
        result = tool.execute(
            action="read",
            path=str(test_dir / "test_extension" / "manifest.json")
        )
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.success}")
        print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {result.data['content'][:100]}...")
        
        # 4. –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        print("\n4. üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ...")
        result = tool.execute(
            action="list",
            path=str(test_dir / "test_extension")
        )
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.success}")
        print(f"   –§–∞–π–ª—ã: {result.data['items']}")
        
        # 5. –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        print("\n5. üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
        result = tool.execute(
            action="delete",
            path=str(test_dir / "test_extension" / "manifest.json")
        )
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.success}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.data['message']}")
    
    print("\n‚úÖ FileSystemTool —Ä–∞–±–æ—Ç–∞–µ—Ç!")


def test_manifest_validator():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ manifest.json"""
    print("\nüîç === –¢–ï–°–¢ MANIFEST VALIDATOR ===\n")
    
    tool = ManifestValidatorTool()
    
    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ manifest'—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    with tempfile.TemporaryDirectory() as temp_dir:
        test_dir = Path(temp_dir)
        
        # 1. –í–∞–ª–∏–¥–Ω—ã–π manifest V3
        print("1. ‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ manifest V3...")
        valid_manifest = {
            "manifest_version": 3,
            "name": "Test Extension",
            "version": "1.0.0",
            "description": "Valid test extension",
            "action": {
                "default_popup": "popup.html"
            }
        }
        
        manifest_path = test_dir / "valid_manifest.json"
        manifest_path.write_text(json.dumps(valid_manifest, indent=2))
        
        result = tool.execute(manifest_path=str(manifest_path))
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.success}")
        print(f"   –í–∞–ª–∏–¥–Ω—ã–π: {result.data['valid']}")
        print(f"   –û—Ç—á—ë—Ç: {result.data['report']}")
        
        # 2. –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π manifest (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è)
        print("\n2. ‚ùå –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ manifest...")
        invalid_manifest = {
            "manifest_version": 3,
            "name": "Incomplete Extension"
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç version
        }
        
        invalid_path = test_dir / "invalid_manifest.json"
        invalid_path.write_text(json.dumps(invalid_manifest, indent=2))
        
        result = tool.execute(manifest_path=str(invalid_path))
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.success}")
        print(f"   –í–∞–ª–∏–¥–Ω—ã–π: {result.data['valid']}")
        print(f"   –ü—Ä–æ–±–ª–µ–º—ã: {result.data['issues']}")
        
        # 3. Manifest V2 (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π)
        print("\n3. ‚ö†Ô∏è –¢–µ—Å—Ç —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ manifest V2...")
        v2_manifest = {
            "manifest_version": 2,
            "name": "Legacy Extension",
            "version": "1.0.0",
            "description": "Old style extension"
        }
        
        v2_path = test_dir / "v2_manifest.json"
        v2_path.write_text(json.dumps(v2_manifest, indent=2))
        
        result = tool.execute(manifest_path=str(v2_path))
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.success}")
        print(f"   –í–∞–ª–∏–¥–Ω—ã–π: {result.data['valid']}")
        print(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {result.data['warnings']}")
    
    print("\n‚úÖ ManifestValidatorTool —Ä–∞–±–æ—Ç–∞–µ—Ç!")


def test_human_request_tool():
    """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    print("\nü§ù === –¢–ï–°–¢ HUMAN REQUEST TOOL ===\n")
    
    tool = HumanRequestTool()
    
    # 1. –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    print("1. üîë –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    result = tool.execute(
        request_type="auth",
        message="–ù—É–∂–µ–Ω API –∫–ª—é—á –¥–ª—è Chrome Web Store",
        context={"service": "chrome_webstore", "reason": "publishing"}
    )
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.success}")
    print(f"   –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {result.data['request_type']}")
    print(f"   –û–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞: {result.data['awaiting_user_input']}")
    print(f"   –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:\n{result.data['formatted_request']}")
    
    # 2. –ó–∞–ø—Ä–æ—Å —Ä–µ—à–µ–Ω–∏—è
    print("\n2. ü§î –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è...")
    result = tool.execute(
        request_type="decision",
        message="–ö–∞–∫–æ–π —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: —Å–∏–Ω–∏–π –∏–ª–∏ –∑–µ–ª—ë–Ω—ã–π?",
        context={"component": "export_button", "options": ["blue", "green"]}
    )
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.success}")
    print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: {result.data['context']}")
    
    # 3. –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n3. ‚öôÔ∏è –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    result = tool.execute(
        request_type="config",
        message="–ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å permissions –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è",
        context={"required_permissions": ["activeTab", "storage"]}
    )
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.success}")
    
    print("\n‚úÖ HumanRequestTool —Ä–∞–±–æ—Ç–∞–µ—Ç!")


def test_agent_factory():
    """–¢–µ—Å—Ç —Ñ–∞–±—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nüè≠ === –¢–ï–°–¢ AGENT FACTORY ===\n")
    
    from kittycore.agent_factory import agent_factory
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    print("1. üßë‚Äçüíª –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞...")
    dev_agent = agent_factory.create_browser_dev_agent("Create a Chrome extension manifest")
    print(f"   –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {dev_agent.created_at}")
    print(f"   –ü—Ä–æ–º–ø—Ç: {dev_agent.prompt[:100]}...")
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤
    print("\n2. üë• –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤...")
    team = agent_factory.create_collaborative_team("Build productivity browser extension")
    print(f"   –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(team)} –∞–≥–µ–Ω—Ç–æ–≤")
    
    for i, agent in enumerate(team, 1):
        print(f"   ü§ñ –ê–≥–µ–Ω—Ç {i}: {agent.prompt.split('\n')[0]}")
    
    # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏
    print("\n3. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏...")
    agents_list = agent_factory.list_created_agents()
    print(f"   –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {len(agents_list)} –∞–≥–µ–Ω—Ç–æ–≤")
    
    for agent_id in agents_list:
        info = agent_factory.get_agent_info(agent_id)
        print(f"   üî∏ {agent_id}: {info.get('created_at', 'unknown')}")
    
    print("\n‚úÖ AgentFactory —Ä–∞–±–æ—Ç–∞–µ—Ç!")


def test_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
    print("\nüöÄ === –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ ===\n")
    
    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
    with tempfile.TemporaryDirectory() as temp_dir:
        project_dir = Path(temp_dir) / "test_extension"
        
        print("1. üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º FileSystemTool –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        fs_tool = FileSystemTool()
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
        result = fs_tool.execute(action="mkdir", path=str(project_dir))
        print(f"   –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {result.success}")
        
        # –°–æ–∑–¥–∞—ë–º manifest.json
        manifest = {
            "manifest_version": 3,
            "name": "Test Time Tracker",
            "version": "1.0.0",
            "description": "Simple time tracking extension",
            "action": {
                "default_popup": "popup.html",
                "default_title": "Time Tracker"
            },
            "permissions": ["activeTab", "storage"],
            "content_scripts": [{
                "matches": ["<all_urls>"],
                "js": ["content.js"]
            }]
        }
        
        result = fs_tool.execute(
            action="create",
            path=str(project_dir / "manifest.json"),
            content=json.dumps(manifest, indent=2)
        )
        print(f"   Manifest.json: {result.success}")
        
        # –°–æ–∑–¥–∞—ë–º popup.html
        popup_html = """<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body { width: 300px; padding: 10px; }
        .time-display { font-size: 24px; text-align: center; }
    </style>
</head>
<body>
    <h1>Time Tracker</h1>
    <div class="time-display">00:00:00</div>
    <button id="start">Start</button>
    <button id="stop">Stop</button>
    <script src="popup.js"></script>
</body>
</html>"""
        
        result = fs_tool.execute(
            action="create",
            path=str(project_dir / "popup.html"),
            content=popup_html
        )
        print(f"   Popup.html: {result.success}")
        
        # –°–æ–∑–¥–∞—ë–º popup.js
        popup_js = """document.addEventListener('DOMContentLoaded', function() {
    const timeDisplay = document.querySelector('.time-display');
    const startBtn = document.getElementById('start');
    const stopBtn = document.getElementById('stop');
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ time tracking
    let startTime = 0;
    let isRunning = false;
    
    startBtn.addEventListener('click', function() {
        if (!isRunning) {
            startTime = Date.now();
            isRunning = true;
            updateDisplay();
        }
    });
    
    stopBtn.addEventListener('click', function() {
        isRunning = false;
    });
    
    function updateDisplay() {
        if (isRunning) {
            const elapsed = Date.now() - startTime;
            const seconds = Math.floor(elapsed / 1000) % 60;
            const minutes = Math.floor(elapsed / 60000) % 60;
            const hours = Math.floor(elapsed / 3600000);
            
            timeDisplay.textContent = 
                `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            
            setTimeout(updateDisplay, 1000);
        }
    }
});"""
        
        result = fs_tool.execute(
            action="create",
            path=str(project_dir / "popup.js"),
            content=popup_js
        )
        print(f"   Popup.js: {result.success}")
        
        # –°–æ–∑–¥–∞—ë–º content.js
        content_js = """// Content script –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–∞–π—Ç–µ
console.log('Time Tracker extension loaded on:', window.location.hostname);

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–∞–π—Ç–µ –≤ background
chrome.runtime.sendMessage({
    action: 'track_time',
    hostname: window.location.hostname,
    url: window.location.href
});"""
        
        result = fs_tool.execute(
            action="create",
            path=str(project_dir / "content.js"),
            content=content_js
        )
        print(f"   Content.js: {result.success}")
        
        print("\n2. üîç –í–∞–ª–∏–¥–∞—Ü–∏—è manifest...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º manifest —Å –ø–æ–º–æ—â—å—é –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        validator = ManifestValidatorTool()
        result = validator.execute(manifest_path=str(project_dir / "manifest.json"))
        
        print(f"   –í–∞–ª–∏–¥–∞—Ü–∏—è: {result.success}")
        print(f"   Manifest –≤–∞–ª–∏–¥–Ω—ã–π: {result.data['valid']}")
        if result.data['issues']:
            print(f"   –ü—Ä–æ–±–ª–µ–º—ã: {result.data['issues']}")
        if result.data['warnings']:
            print(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {result.data['warnings']}")
        
        print("\n3. üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        result = fs_tool.execute(action="list", path=str(project_dir))
        print(f"   –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã: {result.data['items']}")
        
        print(f"\n‚úÖ –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤: {project_dir}")
        print("   üéØ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Chrome –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ KittyCore Browser Tools - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        test_filesystem_tool()
        test_manifest_validator()
        test_human_request_tool()
        test_agent_factory()
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        test_integration()
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        print(f"\nüí• –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main() 