#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –°–¶–ï–ù–ê–†–ò–ï–í
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
"""

import asyncio
import json
from datetime import datetime
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
logger.add(
    "logs/test_scenario_logging.log",
    rotation="10 MB",
    retention="7 days",
    compression="gz",
    format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | TEST | {message}",
    level="DEBUG"
)

async def test_scenario_logging():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
    
    logger.info("üß™ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        from app.simple_dependencies import initialize_global_engine, get_global_engine
        from app.core.scenario_logger import get_scenario_logger, LogLevel
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        await initialize_global_engine()
        
        engine = await get_global_engine()
        scenario_logger = get_scenario_logger()
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        test_scenario = {
            "scenario_id": "test_logging_scenario",
            "name": "–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            "description": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞",
            "steps": [
                {
                    "id": "start",
                    "type": "start",
                    "next_step": "log_hello"
                },
                {
                    "id": "log_hello",
                    "type": "log_message",
                    "params": {
                        "message": "–ü—Ä–∏–≤–µ—Ç –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}",
                        "level": "INFO"
                    },
                    "next_step": "increment_counter"
                },
                {
                    "id": "increment_counter",
                    "type": "increment",
                    "params": {
                        "variable": "test_counter",
                        "output_var": "new_counter_value"
                    },
                    "next_step": "log_counter"
                },
                {
                    "id": "log_counter",
                    "type": "log_message",
                    "params": {
                        "message": "–°—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ: {new_counter_value}",
                        "level": "INFO"
                    },
                    "next_step": "end"
                },
                {
                    "id": "end",
                    "type": "end",
                    "params": {
                        "message": "–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
                    }
                }
            ]
        }
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        test_context = {
            "user_id": "test_user_123",
            "chat_id": "test_chat_456",
            "channel_id": "test_channel",
            "user_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "test_counter": 5,
            "test_mode": True
        }
        
        logger.info("üìã –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π...")
        logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {test_context}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        start_time = datetime.now()
        result_context = await engine.execute_scenario(test_scenario, test_context)
        end_time = datetime.now()
        
        execution_duration = (end_time - start_time).total_seconds() * 1000
        
        logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_duration:.1f}ms")
        logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {result_context}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        active_scenarios = scenario_logger.get_active_scenarios()
        logger.info(f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(active_scenarios)}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if result_context.get("execution_id"):
            execution_id = result_context["execution_id"]
            status = scenario_logger.get_scenario_status(execution_id)
            if status:
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {json.dumps(status, indent=2, ensure_ascii=False)}")
        
        logger.info("üéâ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def test_error_scenario():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö."""
    
    logger.info("üß™ –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫...")
    
    try:
        from app.simple_dependencies import get_global_engine
        
        engine = await get_global_engine()
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π —Å –æ—à–∏–±–∫–æ–π
        error_scenario = {
            "scenario_id": "test_error_scenario",
            "steps": [
                {
                    "id": "start",
                    "type": "start",
                    "next_step": "invalid_step"
                },
                {
                    "id": "invalid_step",
                    "type": "non_existent_type",  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø —à–∞–≥–∞
                    "next_step": "end"
                },
                {
                    "id": "end",
                    "type": "end"
                }
            ]
        }
        
        test_context = {
            "user_id": "error_test_user",
            "test_mode": True
        }
        
        logger.info("üìã –ó–∞–ø—É—Å–∫–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –æ—à–∏–±–∫–æ–π...")
        
        try:
            await engine.execute_scenario(error_scenario, test_context)
        except Exception as e:
            logger.info(f"‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {e}")
        
        logger.info("üéâ –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ—à–∏–±–æ–∫: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞."""
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    
    # –¢–µ—Å—Ç 1: –û–±—ã—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    success1 = await test_scenario_logging()
    
    # –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    await test_error_scenario()
    
    if success1:
        logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–≥–∞—Ö
        logger.info("üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:")
        logger.info("   - logs/scenario_execution.log - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        logger.info("   - logs/test_scenario_logging.log - –ª–æ–≥–∏ —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞")
        logger.info("   - MongoDB –∫–æ–ª–ª–µ–∫—Ü–∏—è 'scenario_execution_logs' - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        logger.info("üåê API endpoints –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤:")
        logger.info("   - GET /api/v1/simple/scenario-logs/active - –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        logger.info("   - GET /api/v1/simple/scenario-logs/{execution_id} - –¥–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        logger.info("   - GET /api/v1/simple/scenario-logs/history - –∏—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π")
        
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

if __name__ == "__main__":
    asyncio.run(main()) 