"""
üîß ToolAdapterAgent - –ê–≥–µ–Ω—Ç –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤":
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
- –ò—â–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
- –°–æ–∑–¥–∞—ë—Ç –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤  
- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
"""

import asyncio
from typing import Dict, Any, List, Optional, Tuple
from loguru import logger
from .base_agent import Agent
from ..tools.base_tool import default_tool_manager, Tool, ToolResult, FunctionTool
from ..llm import LLMProvider


class ToolAdapterAgent(Agent):
    """–ê–≥–µ–Ω—Ç-–∞–¥–∞–ø—Ç–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, llm_provider: LLMProvider):
        # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞ —Å –±–∞–∑–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        super().__init__(
            prompt="You are a tool adapter agent that helps find and create appropriate tools for tasks",
            model="auto",
            tools=[]
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        self.name = "ToolAdapter"
        self.role = "–ê–¥–∞–ø—Ç–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
        self.goal = "–ù–∞–π—Ç–∏/—Å–æ–∑–¥–∞—Ç—å/–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
        self.llm_provider = llm_provider
        self.tool_manager = default_tool_manager
        self.created_tools: Dict[str, Tool] = {}
        
    async def execute_task(self, task: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        try:
            logger.info(f"ToolAdapterAgent –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å: {task}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–∑ –∑–∞–¥–∞—á–∏
            tool_request = await self._parse_tool_request(task)
            
            if not tool_request:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç',
                    'task': task
                }
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            adaptation_result = await self._find_or_create_tool(tool_request)
            
            return {
                'success': True,
                'tool_request': tool_request,
                'adaptation_result': adaptation_result,
                'available_tool': adaptation_result.get('tool_name'),
                'task': task
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ ToolAdapterAgent: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'task': task
            }
    
    async def _parse_tool_request(self, task: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        
        # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
        common_missing_tools = {
            'design': '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –¥–∏–∑–∞–π–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–∫–µ—Ç–æ–≤',
            'marketing': '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π',
            'business-model': '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è',
            'code_generator': '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞',
            'data_analyzer': '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
            'content_creator': '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
            'project_manager': '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏'
        }
        
        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–¥–∞—á–µ
        for tool_name, description in common_missing_tools.items():
            if tool_name.lower() in task.lower() or tool_name.replace('_', ' ').lower() in task.lower():
                return {
                    'requested_tool': tool_name,
                    'description': description,
                    'context': task
                }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        prompt = f"""
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –∫–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω—É–∂–µ–Ω:
        
        –ó–∞–ø—Ä–æ—Å: {task}
        
        –û—Ç–≤–µ—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
        {{
            "requested_tool": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
            "description": "—á—Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å",
            "category": "web/data/communication/system/creative/business"
        }}
        """
        
        try:
            response = await self.llm_provider.generate(prompt)
            import json
            tool_request = json.loads(response)
            tool_request['context'] = task
            return tool_request
        except Exception as e:
            logger.warning(f"LLM –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∑–∞–ø—Ä–æ—Å: {e}")
            return None
    
    async def _find_or_create_tool(self, tool_request: Dict[str, Any]) -> Dict[str, Any]:
        """–ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        
        requested_tool = tool_request['requested_tool']
        description = tool_request['description']
        category = tool_request.get('category', 'general')
        
        # 1. –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        existing_tool = self.tool_manager.get_tool(requested_tool)
        if existing_tool:
            return {
                'status': 'found_exact',
                'tool_name': requested_tool,
                'tool_type': 'existing',
                'message': f'–ù–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {requested_tool}'
            }
        
        # 2. –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        similar_tools = await self._find_similar_tools(requested_tool, description)
        if similar_tools:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π –ø–æ—Ö–æ–∂–∏–π
            best_match = similar_tools[0]
            return {
                'status': 'found_similar',
                'tool_name': best_match['name'],
                'tool_type': 'existing',
                'similarity': best_match['similarity'],
                'message': f'–ù–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {best_match["name"]} (—Å—Ö–æ–∂–µ—Å—Ç—å: {best_match["similarity"]:.2f})'
            }
        
        # 3. –°–æ–∑–¥–∞—ë–º –∞–¥–∞–ø—Ç–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        adapter_result = await self._create_adapter(tool_request)
        if adapter_result['success']:
            return {
                'status': 'created_adapter',
                'tool_name': adapter_result['tool_name'],
                'tool_type': 'adapter',
                'base_tools': adapter_result['base_tools'],
                'message': f'–°–æ–∑–¥–∞–Ω –∞–¥–∞–ø—Ç–µ—Ä: {adapter_result["tool_name"]}'
            }
        
        # 4. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        new_tool_result = await self._create_new_tool(tool_request)
        if new_tool_result['success']:
            return {
                'status': 'created_new',
                'tool_name': new_tool_result['tool_name'],
                'tool_type': 'new',
                'message': f'–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {new_tool_result["tool_name"]}'
            }
        
        # 5. Fallback - —Å–æ–∑–¥–∞—ë–º –∑–∞–≥–ª—É—à–∫—É
        return await self._create_placeholder_tool(tool_request)
    
    async def _find_similar_tools(self, requested_tool: str, description: str) -> List[Dict[str, Any]]:
        """–ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        similar_tools = []
        available_tools = self.tool_manager.list_tools()
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        requested_words = set(requested_tool.lower().replace('_', ' ').split())
        description_words = set(description.lower().split())
        search_words = requested_words.union(description_words)
        
        for tool_info in available_tools:
            tool_name = tool_info['name'].lower()
            tool_desc = tool_info['description'].lower()
            
            # –°—á–∏—Ç–∞–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
            tool_words = set(tool_name.replace('_', ' ').split())
            desc_words = set(tool_desc.split())
            all_tool_words = tool_words.union(desc_words)
            
            intersection = search_words.intersection(all_tool_words)
            similarity = len(intersection) / len(search_words) if search_words else 0
            
            if similarity > 0.3:  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
                similar_tools.append({
                    'name': tool_info['name'],
                    'description': tool_info['description'],
                    'similarity': similarity
                })
        
        return sorted(similar_tools, key=lambda x: x['similarity'], reverse=True)
    
    async def _create_adapter(self, tool_request: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –∞–¥–∞–ø—Ç–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        
        requested_tool = tool_request['requested_tool']
        description = tool_request['description']
        category = tool_request.get('category', 'general')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–¥–∞–ø—Ç–µ—Ä–∞
        base_tools = []
        
        if 'design' in requested_tool.lower():
            # –î–∏–∑–∞–π–Ω = web_search + file_manager + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è HTML
            base_tools = ['web_search', 'file_manager']
        elif 'marketing' in requested_tool.lower():
            # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ = web_search + –∞–Ω–∞–ª–∏–∑ + —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            base_tools = ['web_search', 'file_manager']
        elif 'business' in requested_tool.lower():
            # –ë–∏–∑–Ω–µ—Å = –∞–Ω–∞–ª–∏–∑ + —Ä–∞—Å—á—ë—Ç—ã + —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            base_tools = ['system_tools', 'file_manager']
        elif 'code' in requested_tool.lower():
            # –ö–æ–¥ = —Ñ–∞–π–ª—ã + —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            base_tools = ['file_manager', 'system_tools']
        elif 'data' in requested_tool.lower():
            # –î–∞–Ω–Ω—ã–µ = —Ä–∞—Å—á—ë—Ç—ã + –∞–Ω–∞–ª–∏–∑
            base_tools = ['system_tools', 'database']
        else:
            # –û–±—â–∏–π —Å–ª—É—á–∞–π
            base_tools = ['file_manager', 'system_tools']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –µ—Å—Ç—å
        available_bases = []
        for base_tool in base_tools:
            if self.tool_manager.get_tool(base_tool):
                available_bases.append(base_tool)
        
        if not available_bases:
            return {'success': False, 'error': '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤'}
        
        # –°–æ–∑–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é-–∞–¥–∞–ø—Ç–µ—Ä
        async def adapter_function(**kwargs):
            """–ê–¥–∞–ø—Ç–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
            results = {}
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
            main_tool = available_bases[0]
            
            if main_tool == 'file_manager':
                # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                content = f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã {requested_tool}:\n\n"
                content += f"–ó–∞–ø—Ä–æ—Å: {kwargs.get('input', '–ù–µ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')}\n"
                content += f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º: {main_tool}\n"
                
                result = self.tool_manager.execute_tool(
                    'file_manager',
                    operation='create_file',
                    path=f"output/{requested_tool}_result.txt",
                    content=content
                )
                return result.data
                
            elif main_tool == 'system_tools':
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ —Ä–∞—Å—á—ë—Ç
                result = self.tool_manager.execute_tool(
                    'system_tools',
                    operation='get_system_info'
                )
                return {
                    'tool': requested_tool,
                    'system_info': result.data,
                    'input': kwargs
                }
            
            elif main_tool == 'web_search':
                # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                query = kwargs.get('query', requested_tool)
                result = self.tool_manager.execute_tool(
                    'web_search',
                    query=query
                )
                return result.data
            
            return {'message': f'{requested_tool} –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ {main_tool}', 'input': kwargs}
        
        # –°–æ–∑–¥–∞—ë–º —Å—Ö–µ–º—É
        schema = {
            "type": "object",
            "properties": {
                "input": {
                    "type": "string",
                    "description": f"–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {requested_tool}"
                },
                "query": {
                    "type": "string", 
                    "description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)"
                }
            },
            "required": ["input"]
        }
        
        # –°–æ–∑–¥–∞—ë–º –∞–¥–∞–ø—Ç–µ—Ä –∫–∞–∫ FunctionTool
        adapter_tool = FunctionTool(
            name=requested_tool,
            description=f"–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è {description}",
            func=adapter_function,
            schema=schema
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        self.tool_manager.register(adapter_tool, category)
        self.created_tools[requested_tool] = adapter_tool
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –∞–¥–∞–ø—Ç–µ—Ä {requested_tool} –Ω–∞ –±–∞–∑–µ {available_bases}")
        
        return {
            'success': True,
            'tool_name': requested_tool,
            'base_tools': available_bases,
            'registered': True
        }
    
    async def _create_new_tool(self, tool_request: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é LLM"""
        
        requested_tool = tool_request['requested_tool']
        description = tool_request['description']
        
        # –ü–æ–∫–∞ —á—Ç–æ —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ LLM
        
        def new_tool_function(**kwargs):
            return {
                'tool': requested_tool,
                'description': description,
                'input': kwargs,
                'status': 'executed',
                'note': '–≠—Ç–æ –Ω–æ–≤—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'
            }
        
        schema = {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "description": f"–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è {requested_tool}"
                },
                "data": {
                    "type": "object",
                    "description": "–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                }
            },
            "required": ["action"]
        }
        
        new_tool = FunctionTool(
            name=requested_tool,
            description=description,
            func=new_tool_function,
            schema=schema
        )
        
        self.tool_manager.register(new_tool, 'generated')
        self.created_tools[requested_tool] = new_tool
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {requested_tool}")
        
        return {
            'success': True,
            'tool_name': requested_tool,
            'type': 'generated'
        }
    
    async def _create_placeholder_tool(self, tool_request: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç-–∑–∞–≥–ª—É—à–∫—É"""
        
        requested_tool = tool_request['requested_tool']
        description = tool_request['description']
        
        def placeholder_function(**kwargs):
            return {
                'tool': requested_tool,
                'status': 'placeholder',
                'message': f'–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è {description}',
                'input': kwargs,
                'note': '–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é'
            }
        
        schema = {
            "type": "object", 
            "properties": {
                "input": {
                    "type": "string",
                    "description": "–õ—é–±—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
                }
            }
        }
        
        placeholder_tool = FunctionTool(
            name=requested_tool,
            description=f"–ó–∞–≥–ª—É—à–∫–∞: {description}",
            func=placeholder_function,
            schema=schema
        )
        
        self.tool_manager.register(placeholder_tool, 'placeholder')
        self.created_tools[requested_tool] = placeholder_tool
        
        logger.warning(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {requested_tool}")
        
        return {
            'status': 'created_placeholder',
            'tool_name': requested_tool,
            'tool_type': 'placeholder',
            'message': f'–°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞: {requested_tool}'
        }
    
    def get_created_tools(self) -> Dict[str, Tool]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        return self.created_tools
    
    def get_adaptation_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        return {
            'total_created': len(self.created_tools),
            'created_tools': list(self.created_tools.keys()),
            'available_tools': len(self.tool_manager.tools),
            'tool_categories': list(self.tool_manager.categories.keys())
        } 