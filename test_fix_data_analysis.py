#!/usr/bin/env python3
"""
üìä –û–¢–õ–ê–î–ö–ê: data_analysis_tool
"""

import time
import json
import tempfile
import os
import csv

try:
    from kittycore.tools.data_analysis_tool import DataAnalysisTool
    IMPORT_OK = True
    print("‚úÖ –ò–º–ø–æ—Ä—Ç data_analysis_tool —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ –û–®–ò–ë–ö–ê: {e}")
    IMPORT_OK = False

def test_dataset_list():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤...")
    tool = DataAnalysisTool()
    
    # –í–ê–ñ–ù–û: DataAnalysisTool –°–ò–ù–•–†–û–ù–ù–´–ô —á–µ—Ä–µ–∑ _execute_async_method
    result = tool.execute("list_datasets")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            if isinstance(data, dict):
                datasets = data.get('datasets', [])
                print(f"üìã –î–∞—Ç–∞—Å–µ—Ç–æ–≤ –≤ –∫–µ—à–µ: {len(datasets)}")
    
    return result

def test_load_csv_data():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ CSV –¥–∞–Ω–Ω—ã—Ö"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É CSV –¥–∞–Ω–Ω—ã—Ö...")
    tool = DataAnalysisTool()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π CSV —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    test_data = [
        ['name', 'age', 'salary', 'department'],
        ['–ê–Ω–¥—Ä–µ–π', 28, 50000, 'IT'],
        ['–ú–∞—Ä–∏—è', 32, 60000, 'Marketing'],
        ['–ü–µ—Ç—Ä', 25, 45000, 'IT'],
        ['–ê–Ω–Ω–∞', 30, 55000, 'Sales'],
        ['–ò–≤–∞–Ω', 35, 70000, 'IT']
    ]
    
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.csv', encoding='utf-8') as f:
        temp_path = f.name
        writer = csv.writer(f)
        writer.writerows(test_data)
    
    try:
        result = tool.execute("load_data", file_path=temp_path, dataset_name="test_employees")
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
        if hasattr(result, 'success'):
            print(f"‚úÖ Success: {result.success}")
            if result.success and hasattr(result, 'data'):
                data = result.data
                if isinstance(data, dict):
                    rows = data.get('rows', 0)
                    columns = data.get('columns', 0)
                    print(f"üìÑ CSV –∑–∞–≥—Ä—É–∂–µ–Ω: {rows} —Å—Ç—Ä–æ–∫, {columns} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        return result
        
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(temp_path)
        except:
            pass

def test_basic_analysis():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüìà –¢–µ—Å—Ç–∏—Ä—É—é –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑...")
    tool = DataAnalysisTool()
    
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    test_data = [
        ['product', 'price', 'quantity', 'category'],
        ['Laptop', 1000, 50, 'Electronics'],
        ['Mouse', 25, 200, 'Electronics'],
        ['Chair', 150, 100, 'Furniture'],
        ['Desk', 300, 75, 'Furniture'],
        ['Phone', 800, 120, 'Electronics']
    ]
    
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.csv', encoding='utf-8') as f:
        temp_path = f.name
        writer = csv.writer(f)
        writer.writerows(test_data)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        load_result = tool.execute("load_data", file_path=temp_path, dataset_name="test_products")
        
        if hasattr(load_result, 'success') and load_result.success:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            result = tool.execute("analyze_basic", dataset_name="test_products")
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
            if hasattr(result, 'success'):
                print(f"‚úÖ Success: {result.success}")
                if result.success and hasattr(result, 'data'):
                    data = result.data
                    if isinstance(data, dict):
                        statistics = data.get('statistics', {})
                        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {list(statistics.keys()) if isinstance(statistics, dict) else '–Ω–µ dict'}")
            
            return result
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return load_result
        
    finally:
        try:
            os.unlink(temp_path)
        except:
            pass

def test_report_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüìù –¢–µ—Å—Ç–∏—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á—ë—Ç–∞...")
    tool = DataAnalysisTool()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = [
        ['region', 'sales', 'profit'],
        ['North', 10000, 2000],
        ['South', 15000, 3000],
        ['East', 12000, 2400],
        ['West', 8000, 1600]
    ]
    
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.csv', encoding='utf-8') as f:
        temp_path = f.name
        writer = csv.writer(f)
        writer.writerows(test_data)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        load_result = tool.execute("load_data", file_path=temp_path, dataset_name="test_sales")
        
        if hasattr(load_result, 'success') and load_result.success:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            result = tool.execute("generate_report", dataset_name="test_sales", report_type="basic")
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
            if hasattr(result, 'success'):
                print(f"‚úÖ Success: {result.success}")
                if result.success and hasattr(result, 'data'):
                    data = result.data
                    if isinstance(data, dict):
                        report = data.get('report', '')
                        print(f"üìù –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(report)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return result
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á—ë—Ç–∞")
            return load_result
        
    finally:
        try:
            os.unlink(temp_path)
        except:
            pass

def is_result_honest(result, test_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if not result:
        print(f"‚ùå {test_name}: –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É ToolResult
    if not hasattr(result, 'success'):
        print(f"‚ùå {test_name}: –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ ToolResult")
        return False
    
    success = result.success
    if not success:
        print(f"‚ùå {test_name}: success=False")
        if hasattr(result, 'error'):
            print(f"   –û—à–∏–±–∫–∞: {result.error}")
        return False
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    data_str = str(result.data) if hasattr(result, 'data') else str(result)
    data_size = len(data_str)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–µ–π–∫–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    fake_patterns = [
        "data_analysis: —É—Å–ø–µ—à–Ω–æ",
        "–¥–µ–º–æ –∞–Ω–∞–ª–∏–∑",
        "–∑–∞–≥–ª—É—à–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
    ]
    
    for pattern in fake_patterns:
        if pattern.lower() in data_str.lower():
            print(f"‚ùå {test_name}: –ù–∞–π–¥–µ–Ω —Ñ–µ–π–∫–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    data_indicators = [
        "data", "rows", "columns", "statistics", "analysis", "report", 
        "dataset", "csv", "mean", "median", "count", "–∑–∞–≥—Ä—É–∂–µ–Ω", "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
    ]
    
    has_data_analysis = any(indicator.lower() in data_str.lower() for indicator in data_indicators)
    
    if not has_data_analysis:
        print(f"‚ùå {test_name}: –ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    if data_size < 30:
        print(f"‚ùå {test_name}: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
        return False
    
    print(f"‚úÖ {test_name}: –ß–ï–°–¢–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
    return True

def main():
    print("üìä –û–¢–õ–ê–î–ö–ê: data_analysis_tool")
    
    if not IMPORT_OK:
        return
    
    results = {}
    
    # –¢–µ—Å—Ç—ã (–≤—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ execute)
    tests = [
        ("dataset_list", test_dataset_list),
        ("load_csv_data", test_load_csv_data),
        ("basic_analysis", test_basic_analysis),
        ("report_generation", test_report_generation)
    ]
    
    for test_name, test_func in tests:
        print(f"\n{'='*30}")
        print(f"–¢–ï–°–¢: {test_name}")
        try:
            result = test_func()
            results[test_name] = is_result_honest(result, test_name)
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ –û–®–ò–ë–ö–ê: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*50}")
    print("üìä –ò–¢–û–ì–ò:")
    
    total_tests = len(results)
    passed_tests = sum(1 for success in results.values() if success)
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
    
    print(f"\nüìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if success_rate >= 75 else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")

if __name__ == "__main__":
    main() 