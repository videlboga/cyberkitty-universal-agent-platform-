"""
üß™ –¢–µ—Å—Ç—ã –¥–ª—è SuperSystemTool - –ú–æ—â–Ω–µ–π—à–µ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ KittyCore 3.0

–ü—Ä–æ–≤–µ—Ä—è–µ–º:
- –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤—Å–µ –≤ –æ–¥–Ω–æ–º)
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π  
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
- Health check
- –í–∞–ª–∏–¥–∞—Ü–∏—é –∏ error handling
"""

import pytest
import tempfile
import os
from pathlib import Path
from unittest.mock import patch, MagicMock

from kittycore.tools.super_system_tool import SuperSystemTool


class TestSuperSystemTool:
    """–¢–µ—Å—Ç—ã SuperSystemTool - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.tool = SuperSystemTool()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤–º–µ—Å—Ç–æ /tmp
        self.temp_dir = os.path.join(os.getcwd(), "test_temp")
        os.makedirs(self.temp_dir, exist_ok=True)
        self.temp_file = os.path.join(self.temp_dir, "test.txt")
    
    def teardown_method(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞"""
        import shutil
        if os.path.exists(self.temp_dir):
            shutil.rmtree(self.temp_dir)
    
    # ========================================
    # üñ•Ô∏è –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
    # ========================================
    
    def test_get_system_info(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        result = self.tool.execute("get_system_info")
        
        assert result.success is True
        assert "system_info" in result.data
        
        data = result.data["system_info"]
        assert "platform" in data
        assert "hostname" in data
        assert "cpu_count" in data
        assert "memory_total_gb" in data
        assert isinstance(data["cpu_count"], int)
        assert data["cpu_count"] > 0
    
    def test_get_resource_usage(self):
        """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        result = self.tool.execute("get_resource_usage")
        
        assert result.success is True
        assert "resource_usage" in result.data
        
        data = result.data["resource_usage"]
        assert "cpu_percent" in data
        assert "memory_percent" in data
        assert "disk_usage_percent" in data
        assert "top_processes" in data
        
        assert 0 <= data["cpu_percent"] <= 100
        assert 0 <= data["memory_percent"] <= 100
        assert isinstance(data["top_processes"], list)
    
    def test_health_check(self):
        """–¢–µ—Å—Ç health check —Å–∏—Å—Ç–µ–º—ã"""
        result = self.tool.execute("health_check")
        
        assert result.success is True
        data = result.data
        
        assert "overall_status" in data
        assert data["overall_status"] in ["good", "warning", "critical"]
        
        assert "cpu" in data
        assert "memory" in data
        assert "disk" in data
        
        assert "status" in data["cpu"]
        assert "usage_percent" in data["cpu"]
    
    # ========================================
    # üìÇ –ü–†–û–¶–ï–°–°–´
    # ========================================
    
    def test_get_processes(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        result = self.tool.execute("get_processes", limit=5)
        
        assert result.success is True
        assert "processes" in result.data
        
        processes = result.data["processes"]
        assert isinstance(processes, list)
        assert len(processes) <= 5
        
        if processes:
            proc = processes[0]
            assert "pid" in proc
            assert "name" in proc
            assert "cpu_percent" in proc
    
    @patch('subprocess.run')
    def test_run_command_safe(self, mock_run):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        mock_run.return_value = MagicMock(
            returncode=0,
            stdout="Hello World",
            stderr="",
            args=["echo", "Hello World"]
        )
        
        result = self.tool.execute("run_command", command="echo Hello World")
        
        assert result.success is True
        assert "stdout" in result.data
        assert result.data["stdout"] == "Hello World"
    
    def test_run_command_blocked(self):
        """–¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–ø–∞—Å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        result = self.tool.execute("run_command", command="rm -rf /")
        
        assert result.success is False
        assert "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–µ—â–µ–Ω–æ" in result.error.lower()
    
    # ========================================
    # üìÅ –§–ê–ô–õ–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò (–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ)
    # ========================================
    
    def test_safe_file_create_and_read(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ safe_file –º–µ—Ç–æ–¥—ã"""
        content = "Hello, KittyCore SuperSystem!"
        
        # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª
        result = self.tool.execute("safe_file_create", path=self.temp_file, content=content)
        assert result.success is True
        assert os.path.exists(self.temp_file)
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        result = self.tool.execute("safe_file_read", path=self.temp_file)
        assert result.success is True
        assert result.data["content"] == content
    
    def test_file_exists(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        result = self.tool.execute("file_exists", path="/nonexistent/file.txt")
        assert result.success is True
        assert result.data["exists"] is False
        
        # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª
        with open(self.temp_file, 'w') as f:
            f.write("test")
        
        # –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        result = self.tool.execute("file_exists", path=self.temp_file)
        assert result.success is True
        assert result.data["exists"] is True
    
    def test_safe_file_list(self):
        """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        test_files = ["file1.txt", "file2.py", "file3.json"]
        for filename in test_files:
            filepath = os.path.join(self.temp_dir, filename)
            with open(filepath, 'w') as f:
                f.write("test")
        
        result = self.tool.execute("safe_file_list", path=self.temp_dir)
        
        assert result.success is True
        assert "files" in result.data
        
        files = result.data["files"]
        found_files = [f["name"] for f in files if f.get("is_file")]
        
        for test_file in test_files:
            assert test_file in found_files
    
    def test_copy_file(self):
        """–¢–µ—Å—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        content = "Test content"
        destination = os.path.join(self.temp_dir, "copied.txt")
        
        # –°–æ–∑–¥–∞—ë–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        with open(self.temp_file, 'w') as f:
            f.write(content)
        
        # –ö–æ–ø–∏—Ä—É–µ–º
        result = self.tool.execute("copy_file", path=self.temp_file, destination=destination)
        
        assert result.success is True
        assert os.path.exists(destination)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with open(destination, 'r') as f:
            assert f.read() == content
    
    def test_delete_file(self):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª
        with open(self.temp_file, 'w') as f:
            f.write("test")
        
        assert os.path.exists(self.temp_file)
        
        # –£–¥–∞–ª—è–µ–º
        result = self.tool.execute("delete_file", path=self.temp_file)
        
        assert result.success is True
        assert not os.path.exists(self.temp_file)
    
    # ========================================
    # üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨
    # ========================================
    
    def test_validate_file_path_safe(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—É—Ç–∏"""
        safe_path = os.path.join(self.temp_dir, "safe.txt")
        
        result = self.tool.execute("validate_file_path", path=safe_path)
        
        assert result.success is True
        assert result.data["validation_passed"] is True
        assert result.data["is_safe_extension"] is True
    
    def test_validate_file_path_unsafe_extension(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
        unsafe_path = os.path.join(self.temp_dir, "malware.exe")
        
        result = self.tool.execute("validate_file_path", path=unsafe_path)
        
        assert result.success is True
        assert result.data["validation_passed"] is False
        assert result.data["is_safe_extension"] is False
    
    def test_validate_file_path_system_directory(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        result = self.tool.execute("validate_file_path", path="/etc/passwd")
        
        assert result.success is True
        assert result.data["validation_passed"] is False
        assert result.data["is_safe_path"] is False
    
    def test_check_file_safety(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞"""
        # –°–æ–∑–¥–∞—ë–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–∞–π–ª
        with open(self.temp_file, 'w') as f:
            f.write("safe content")
        
        result = self.tool.execute("check_file_safety", path=self.temp_file)
        
        assert result.success is True
        assert result.data["overall_safe"] is True
        assert result.data["extension_safe"] is True
        assert result.data["size_safe"] is True
    
    # ========================================
    # üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì
    # ========================================
    
    def test_monitoring_lifecycle(self):
        """–¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        result = self.tool.execute("start_monitoring", interval=0.1)
        assert result.success is True
        
        # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ
        import time
        time.sleep(0.3)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        result = self.tool.execute("get_monitoring_data")
        assert result.success is True
        assert result.data["monitoring_active"] is True
        assert result.data["data_points_count"] > 0
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        result = self.tool.execute("stop_monitoring")
        assert result.success is True
        assert result.data["monitoring_stopped"] is True
    
    # ========================================
    # ‚ùå ERROR HANDLING
    # ========================================
    
    def test_invalid_action(self):
        """–¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        result = self.tool.execute("invalid_action")
        
        assert result.success is False
        assert "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ" in result.error.lower()
    
    def test_file_not_found(self):
        """–¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
        nonexistent_file = os.path.join(self.temp_dir, "nonexistent.txt")
        result = self.tool.execute("read_file", path=nonexistent_file)
        
        assert result.success is False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in result.error.lower()
    
    def test_invalid_pid(self):
        """–¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        result = self.tool.execute("get_process_info", pid=999999)
        
        assert result.success is False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in result.error.lower()
    
    # ========================================
    # üß† –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
    # ========================================
    
    def test_tool_name_and_description(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        assert self.tool.name == "super_system_tool"
        assert "–º–æ—â–Ω–µ–π—à–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç" in self.tool.description.lower()
    
    def test_schema_validation(self):
        """–¢–µ—Å—Ç JSON —Å—Ö–µ–º—ã"""
        schema = self.tool.get_schema()
        
        assert "type" in schema
        assert schema["type"] == "object"
        assert "properties" in schema
        assert "action" in schema["properties"]
        
        actions = schema["properties"]["action"]["enum"]
        expected_actions = [
            "get_system_info", "get_resource_usage", "health_check",
            "get_processes", "run_command", "safe_file_create", "safe_file_read",
            "validate_file_path", "start_monitoring"
        ]
        
        for action in expected_actions:
            assert action in actions


# ========================================
# üèÉ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´
# ========================================

class TestSuperSystemToolIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã SuperSystemTool"""
    
    def setup_method(self):
        self.tool = SuperSystemTool()
    
    def test_system_info_and_monitoring_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ñ–ª–æ—É: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ + health check"""
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        sys_info = self.tool.execute("get_system_info")
        assert sys_info.success is True
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        resources = self.tool.execute("get_resource_usage")
        assert resources.success is True
        
        # 3. Health check
        health = self.tool.execute("health_check")
        assert health.success is True
        
        # –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω—ã
        assert all([sys_info.success, resources.success, health.success])
    
    def test_file_operations_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ñ–ª–æ—É —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = os.path.join(os.getcwd(), "test_integration_temp")
        os.makedirs(temp_dir, exist_ok=True)
        test_file = os.path.join(temp_dir, "flow_test.txt")
        test_content = "SuperSystemTool Flow Test"
        
        try:
            # 1. –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª
            create_result = self.tool.execute("safe_file_create", path=test_file, content=test_content)
            assert create_result.success is True
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            exists_result = self.tool.execute("file_exists", path=test_file)
            assert exists_result.success is True
            assert exists_result.data["exists"] is True
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            info_result = self.tool.execute("file_info", path=test_file)
            assert info_result.success is True
            
            # 4. –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            read_result = self.tool.execute("safe_file_read", path=test_file)
            assert read_result.success is True
            assert read_result.data["content"] == test_content
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            safety_result = self.tool.execute("check_file_safety", path=test_file)
            assert safety_result.success is True
            assert safety_result.data["overall_safe"] is True
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            import shutil
            if os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)


if __name__ == "__main__":
    pytest.main([__file__, "-v"]) 