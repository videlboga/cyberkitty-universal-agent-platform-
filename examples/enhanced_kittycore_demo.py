#!/usr/bin/env python3
"""
üöÄ KittyCore 2.1 Enhanced Demo

–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏:
- Structured Outputs (–∫–∞–∫ MetaGPT)
- Advanced Memory (–∫–∞–∫ LangGraph) 
- Enhanced Roles (–∫–∞–∫ CrewAI)
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from kittycore import quick_agent, create_master_agent
from kittycore.structured_outputs import SOPTemplates, apply_sop_to_agent, StructuredOutputParser
from kittycore.advanced_memory import create_enhanced_memory_agent, CrossAgentMemory
from kittycore.enhanced_roles import (
    AgentRole, 
    RoleBasedAgentFactory, 
    PersonaLibrary,
    TeamComposition
)


def demo_structured_outputs():
    """–î–µ–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤ (–∫–∞–∫ MetaGPT)"""
    print("üéØ === DEMO: Structured Outputs (inspired by MetaGPT) ===")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å SOP –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    analyst = quick_agent("–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
    analyst = apply_sop_to_agent(analyst, SOPTemplates.REQUIREMENTS_SOP)
    
    task = "–°–æ–∑–¥–∞–π –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ –µ–¥—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π"
    print(f"üìù –ó–∞–¥–∞—á–∞: {task}")
    print("\nüí≠ –ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SOP...")
    
    result = analyst.run(task)
    print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{result}")
    
    # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    parsed = StructuredOutputParser.parse_requirements(result, "analyst")
    print(f"\nüìä Parsed data: {parsed.to_dict()}")


def demo_advanced_memory():
    """–î–µ–º–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –ø–∞–º—è—Ç–∏ (–∫–∞–∫ LangGraph)"""
    print("\nüß† === DEMO: Advanced Memory (inspired by LangGraph) ===")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é
    assistant = quick_agent("–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞")
    assistant = create_enhanced_memory_agent(assistant)
    
    print("üí¨ –°–µ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ø–∞–º—è—Ç—å...")
    
    # –°–µ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    interactions = [
        "–ü–æ–º–æ–≥–∏ —Å–æ–∑–¥–∞—Ç—å Python –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "–î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email",
        "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å unit —Ç–µ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞",
        "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"
    ]
    
    for i, interaction in enumerate(interactions):
        print(f"\nüë§ User [{i+1}]: {interaction}")
        response = assistant.run(interaction)
        print(f"ü§ñ Assistant: {response[:200]}...")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏
    print(f"\nüìä Memory Stats: {assistant.get_memory_stats()}")
    
    # Time travel - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ 2-–º—É —Ö–æ–¥—É
    print("\n‚è∞ Time Travel - replay from turn 2:")
    replay = assistant.replay_from_turn(2)
    for snapshot in replay:
        print(f"Turn {snapshot.conversation_turn}: {snapshot.input_message[:50]}...")


def demo_enhanced_roles():
    """–î–µ–º–æ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π (–∫–∞–∫ CrewAI)"""
    print("\nüé≠ === DEMO: Enhanced Roles (inspired by CrewAI) ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å —Ä–æ–ª—è–º–∏
    print("üë• –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
    
    pm = RoleBasedAgentFactory.create_agent_with_role(
        quick_agent, 
        AgentRole.PRODUCT_MANAGER
    )
    
    architect = RoleBasedAgentFactory.create_agent_with_role(
        quick_agent, 
        AgentRole.ARCHITECT
    )
    
    developer = RoleBasedAgentFactory.create_agent_with_role(
        quick_agent, 
        AgentRole.DEVELOPER
    )
    
    print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞:")
    print(f"  - {pm.persona.role}")
    print(f"  - {architect.persona.role}")  
    print(f"  - {developer.persona.role}")
    
    # –ó–∞–¥–∞—á–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    task = "–°–æ–∑–¥–∞—Ç—å API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"
    
    print(f"\nüìù –ó–∞–¥–∞—á–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: {task}")
    print("\nüèÉ‚Äç‚ôÇÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    
    # PM –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    print("\n1Ô∏è‚É£ Product Manager –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:")
    pm_result = pm.run(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è: {task}")
    print(f"üìã PM Result: {pm_result[:300]}...")
    
    # Architect –ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç
    print("\n2Ô∏è‚É£ Architect –ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç:")
    arch_result = architect.run(f"–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ: {pm_result[:200]}...")
    print(f"üèóÔ∏è Architect Result: {arch_result[:300]}...")
    
    # Developer —Ä–µ–∞–ª–∏–∑—É–µ—Ç
    print("\n3Ô∏è‚É£ Developer —Ä–µ–∞–ª–∏–∑—É–µ—Ç:")
    dev_result = developer.run(f"–†–µ–∞–ª–∏–∑—É–π API –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {arch_result[:200]}...")
    print(f"üíª Developer Result: {dev_result[:300]}...")


def demo_master_agent_with_enhancements():
    """–î–µ–º–æ MasterAgent —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
    print("\nüéØ === DEMO: Enhanced MasterAgent (our unique feature) ===")
    
    # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä-–∞–≥–µ–Ω—Ç–∞
    master = create_master_agent()
    
    # –ó–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É—é—â–∞—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    complex_task = """
    –°–æ–∑–¥–∞–π —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π, –æ–ø–ª–∞—Ç–æ–π –∏ –¥–æ—Å—Ç–∞–≤–∫–æ–π.
    –ù—É–∂–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –∫–æ–¥ –∏ —Ç–µ—Å—Ç—ã.
    """
    
    print(f"üéØ –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞: {complex_task}")
    print("\nüîÆ MasterAgent —Å–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É...")
    
    result = master.solve_task(complex_task, {
        "use_structured_outputs": True,
        "enable_memory": True,
        "assign_roles": True
    })
    
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:500]}...")


def show_comparison_with_competitors():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏"""
    print("\nüìä === KITTYCORE VS COMPETITORS ===")
    
    comparison = """
üèÜ KittyCore 2.1 –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:

‚úÖ –ü–†–û–°–¢–û–¢–ê (–Ω–∞—à–∞ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è):
   - quick_agent("–¢—ã –ø–æ–º–æ—â–Ω–∏–∫") # 1 —Å—Ç—Ä–æ–∫–∞!
   - VS CrewAI: 10+ —Å—Ç—Ä–æ–∫ —Å role, goal, backstory
   - VS LangGraph: 20+ —Å—Ç—Ä–æ–∫ —Å nodes, edges, state
   - VS AutoGen: 15+ —Å—Ç—Ä–æ–∫ —Å agents, chat patterns

‚úÖ –ê–ì–ï–ù–¢–´ –°–û–ó–î–ê–Æ–¢ –ê–ì–ï–ù–¢–û–í (—É–Ω–∏–∫–∞–ª—å–Ω–æ):
   - MasterAgent –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
   - –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã: —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

‚úÖ –õ–£–ß–®–ï–ï –ò–ó –í–°–ï–• –ú–ò–†–û–í:
   - Structured Outputs (–æ—Ç MetaGPT) ‚úì
   - Advanced Memory + Time Travel (–æ—Ç LangGraph) ‚úì  
   - Role-based Teams (–æ—Ç CrewAI) ‚úì
   - Enterprise Ready (–æ—Ç AutoGen) ‚úì

‚úÖ –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ê –ë–†–ê–£–ó–ï–†–ê–•:
   - –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ browser extension tools
   - FileSystemTool, ManifestValidator, HumanRequest
   
üéØ –ò–¢–û–ì: "–ê–≥–µ–Ω—Ç –∑–∞ 5 –º–∏–Ω—É—Ç, —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é!"
    """
    
    print(comparison)


def main():
    """–ì–ª–∞–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"""
    print("üöÄ KittyCore 2.1 Enhanced Demo")
    print("=" * 50)
    
    try:
        # –î–µ–º–æ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π
        demo_structured_outputs()
        demo_advanced_memory()
        demo_enhanced_roles()
        demo_master_agent_with_enhancements()
        show_comparison_with_competitors()
        
        print("\nüéâ –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! KittyCore –≥–æ—Ç–æ–≤ –∫–æ–Ω–∫—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –ª–∏–¥–µ—Ä–∞–º–∏!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Mock LLM –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞")
        print("üîß –î–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä")


if __name__ == "__main__":
    main() 