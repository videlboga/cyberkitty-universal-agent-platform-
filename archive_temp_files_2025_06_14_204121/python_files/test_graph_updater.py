#!/usr/bin/env python3
"""
–¢–µ—Å—Ç GraphUpdater - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
from pathlib import Path
from kittycore.obsidian_integration import GraphUpdater


async def test_graph_updater():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã GraphUpdater"""
    
    print("üìä –¢–µ—Å—Ç GraphUpdater - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("=" * 55)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π vault
    vault_path = Path("./test_obsidian_vault")
    
    if not vault_path.exists():
        print(f"‚ùå Vault –Ω–µ –Ω–∞–π–¥–µ–Ω: {vault_path}")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ GraphUpdater
    graph_updater = GraphUpdater(vault_path)
    
    print(f"‚úÖ GraphUpdater –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è: {vault_path}")
    
    # –ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    print("\n1Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞...")
    
    await graph_updater.update_graph(force=True)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = graph_updater.get_graph_stats()
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞—Ñ–∞:")
    print(f"  - –£–∑–ª–æ–≤: {stats['nodes_total']}")
    print(f"  - –°–≤—è–∑–µ–π: {stats['edges_total']}")
    print(f"  - –¢–∏–ø—ã —É–∑–ª–æ–≤: {stats['node_types']}")
    print(f"  - –¢–∏–ø—ã —Å–≤—è–∑–µ–π: {stats['edge_types']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π JSON
    graph_file = vault_path / "graph_data.json"
    if graph_file.exists():
        print(f"\n‚úÖ –ì—Ä–∞—Ñ–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {graph_file}")
        print(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {graph_file.stat().st_size} –±–∞–π—Ç")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–µ–≤—å—é
        import json
        with open(graph_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"üîç –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö:")
        print(f"  - –£–∑–ª–æ–≤ –≤ JSON: {len(data.get('nodes', []))}")
        print(f"  - –°–≤—è–∑–µ–π –≤ JSON: {len(data.get('edges', []))}")
        print(f"  - –û–±–Ω–æ–≤–ª–µ–Ω–æ: {data.get('metadata', {}).get('updated_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    print(f"\nüéâ GraphUpdater —Ä–∞–±–æ—Ç–∞–µ—Ç! –ì—Ä–∞—Ñ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è ‚ú®")


if __name__ == "__main__":
    asyncio.run(test_graph_updater()) 