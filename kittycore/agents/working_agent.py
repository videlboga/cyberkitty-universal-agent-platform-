"""
ü§ñ WorkingAgent - –ê–≥–µ–Ω—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏

–ê–≥–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å –ø–æ–º–æ—â—å—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import asyncio
from typing import Dict, Any, List
from ..tools.real_tools import REAL_TOOLS

class WorkingAgent:
    """–ê–≥–µ–Ω—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self, role: str, subtask: Dict[str, Any]):
        self.role = role
        self.subtask = subtask
        self.tools = REAL_TOOLS
        self.results = []
    
    async def execute_task(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        task_description = self.subtask.get("description", "")
        task_type = self.subtask.get("type", "general")
        
        print(f"ü§ñ {self.role} –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É: {task_description}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        if "python" in task_description.lower() or "—Å–∫—Ä–∏–ø—Ç" in task_description.lower():
            return await self._create_python_script(task_description)
        elif ("—Å–∞–π—Ç" in task_description.lower() or "html" in task_description.lower() or 
              "–≤–µ–±" in task_description.lower()) and any(word in task_description.lower() 
              for word in ["—Å–æ–∑–¥–∞–π", "—Å–¥–µ–ª–∞–π", "–Ω–∞–ø–∏—à–∏", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π"]):
            return await self._create_website_with_content(task_description)
        elif "—Ñ–∞–π–ª" in task_description.lower() or "—Å–æ–∑–¥–∞—Ç—å" in task_description.lower():
            return await self._create_file(task_description)
        elif "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å" in task_description.lower() and "—Å–∞–π—Ç" in task_description.lower():
            return await self._check_website(task_description)
        else:
            return await self._general_task(task_description)
    
    async def _create_python_script(self, description: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å Python —Å–∫—Ä–∏–ø—Ç"""
        filename = f"generated_script_{id(self)}.py"
        
        result = self.tools["code_generator"].generate_python_script(
            description, filename
        )
        
        if result["success"]:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω Python —Å–∫—Ä–∏–ø—Ç: {filename}")
            return {
                "status": "completed",
                "output": f"–°–æ–∑–¥–∞–Ω –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π Python —Å–∫—Ä–∏–ø—Ç: {filename}",
                "files_created": [filename],
                "executable": True
            }
        else:
            return {
                "status": "failed", 
                "error": result["error"]
            }
    
    async def _create_html_page(self, description: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        filename = f"generated_page_{id(self)}.html"
        title = "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        content = f"<p>–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è: {description}</p>"
        
        result = self.tools["code_generator"].generate_html_page(
            title, content, filename
        )
        
        if result["success"]:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {filename}")
            return {
                "status": "completed",
                "output": f"–°–æ–∑–¥–∞–Ω–∞ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {filename}",
                "files_created": [filename]
            }
        else:
            return {
                "status": "failed",
                "error": result["error"]
            }
    
    async def _create_file(self, description: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª"""
        filename = f"output_{id(self)}.txt"
        content = f"# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã\n\n–ó–∞–¥–∞—á–∞: {description}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–º: {self.role}\n"
        
        result = self.tools["file_manager"].create_file(filename, content)
        
        if result["success"]:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {filename}")
            return {
                "status": "completed",
                "output": f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {filename}",
                "files_created": [filename]
            }
        else:
            return {
                "status": "failed",
                "error": result["error"]
            }
    
    async def _check_website(self, description: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ–±-—Å–∞–π—Ç"""
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å URL –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π
        url = "https://httpbin.org/status/200"  # –¢–µ—Å—Ç–æ–≤—ã–π URL
        
        result = self.tools["web_client"].check_website(url)
        
        if result["success"]:
            print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω —Å–∞–π—Ç: {url}")
            return {
                "status": "completed", 
                "output": f"–°–∞–π—Ç {url} –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {result.get('status_code', 'N/A')})",
                "website_status": result
            }
        else:
            return {
                "status": "failed",
                "error": result["error"]
            }
    
    async def _general_task(self, description: str) -> Dict[str, Any]:
        """–û–±—â–∞—è –∑–∞–¥–∞—á–∞"""
        # –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        filename = f"task_report_{id(self)}.txt"
        content = f"""# –û—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏

–ê–≥–µ–Ω—Ç: {self.role}
–ó–∞–¥–∞—á–∞: {description}
–í—Ä–µ–º—è: {asyncio.get_event_loop().time()}

## –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –∑–∞–¥–∞—á—É
2. –û–ø—Ä–µ–¥–µ–ª–∏–ª –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
3. –°–æ–∑–¥–∞–ª –¥–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç

## –†–µ–∑—É–ª—å—Ç–∞—Ç:
–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∞–≥–µ–Ω—Ç–æ–º {self.role}
"""
        
        result = self.tools["file_manager"].create_file(filename, content)
        
        if result["success"]:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç—á—ë—Ç: {filename}")
            return {
                "status": "completed",
                "output": f"–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Å–æ–∑–¥–∞–Ω –æ—Ç—á—ë—Ç: {filename}",
                "files_created": [filename]
            }
        else:
            return {
                "status": "failed", 
                "error": result["error"]
            } 