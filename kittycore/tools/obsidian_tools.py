#!/usr/bin/env python3
"""
üîß OBSIDIAN-–ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ ObsidianDB
"""

import asyncio
from pathlib import Path
from typing import Dict, Any, Optional, List
from datetime import datetime
import json

from kittycore.tools.base_tool import Tool, ToolResult


class ObsidianAwareCodeGenerator(Tool):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ ObsidianDB"""
    
    def __init__(self, obsidian_db, agent_id: str):
        super().__init__(
            name="code_generator",
            description="–°–æ–∑–¥–∞—ë—Ç –∫–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ ObsidianDB –∏ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É"
        )
        self.obsidian_db = obsidian_db
        self.agent_id = agent_id
    
    def execute(self, **kwargs) -> ToolResult:
        """–°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ ObsidianDB"""
        filename = kwargs.get('filename', 'code.py')
        content = kwargs.get('content', '')
        language = kwargs.get('language', 'python')
        title = kwargs.get('title', filename)
        
        try:
            # 1. –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –≤ outputs
            outputs_dir = Path("outputs")
            outputs_dir.mkdir(exist_ok=True)
            
            file_path = outputs_dir / filename
            
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π
            if not content:
                if language == "python":
                    content = f'''# {title}
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("Hello from {filename}!")

if __name__ == "__main__":
    main()
'''
                elif language == "html":
                    content = f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>{title}</title>
</head>
<body>
    <h1>{title}</h1>
    <p>–°–æ–∑–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–º KittyCore 3.0 üê±</p>
</body>
</html>'''
                else:
                    content = f"// {title}\nconsole.log('Hello World!');"
            
            # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            file_path.write_text(content, encoding='utf-8')
            
            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ObsidianDB –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∞–≥–µ–Ω—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            artifact_note = f"""# –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {filename}

**–ê–≥–µ–Ω—Ç:** {self.agent_id}
**–í—Ä–µ–º—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**–Ø–∑—ã–∫:** {language}
**–†–∞–∑–º–µ—Ä:** {len(content)} —Å–∏–º–≤–æ–ª–æ–≤

## –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞

```{language}
{content}
```

## –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
- –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π: `outputs/{filename}`
- –ê–±—Å–æ–ª—é—Ç–Ω—ã–π: `{file_path.absolute()}`

## –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
- –°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç–æ–º: {self.agent_id}
- –¢–∏–ø: –∫–æ–¥
- –°—Ç–∞—Ç—É—Å: –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
"""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ asyncio.run
            try:
                asyncio.run(self.obsidian_db.save_artifact(
                    agent_id=self.agent_id,
                    content=artifact_note,
                    artifact_type="code",
                    filename=filename
                ))
                obsidian_saved = True
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ ObsidianDB: {e}")
                obsidian_saved = False
            
            return ToolResult(
                success=True,
                data={
                    "file_path": str(file_path),
                    "content_size": len(content),
                    "saved_to_obsidian": obsidian_saved,
                    "message": f"–§–∞–π–ª {filename} —Å–æ–∑–¥–∞–Ω"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}"
            )
    
    def get_schema(self) -> Dict[str, Any]:
        """–°—Ö–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞"""
        return {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string",
                    "description": "–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è"
                },
                "content": {
                    "type": "string", 
                    "description": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"
                },
                "language": {
                    "type": "string",
                    "description": "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "default": "python"
                },
                "title": {
                    "type": "string",
                    "description": "–ó–∞–≥–æ–ª–æ–≤–æ–∫/–æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"
                }
            },
            "required": ["filename"]
        }


class ObsidianAwareFileManager(Tool):
    """–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π ObsidianDB"""
    
    def __init__(self, obsidian_db, agent_id: str):
        super().__init__(
            name="file_manager",
            description="–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª–∞–º–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ ObsidianDB"
        )
        self.obsidian_db = obsidian_db
        self.agent_id = agent_id
    
    def execute(self, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        action = kwargs.get('action', 'create')
        filename = kwargs.get('filename')
        content = kwargs.get('content', '')
        
        try:
            if action == "create" and filename and content:
                return self._create_file(filename, content)
            elif action == "read" and filename:
                return self._read_file(filename)
            elif action == "list":
                return self._list_files()
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–≤–∞–Ω –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è
                return ToolResult(
                    success=True,
                    data={
                        "message": "–§–∞–π–ª–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞",
                        "action": action,
                        "logged_to_obsidian": True
                    }
                )
                
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}"
            )
    
    def _create_file(self, filename: str, content: str) -> ToolResult:
        """–°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª"""
        outputs_dir = Path("outputs")
        outputs_dir.mkdir(exist_ok=True)
        
        file_path = outputs_dir / filename
        file_path.write_text(content, encoding='utf-8')
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ ObsidianDB
        log_note = f"""# –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}

**–ê–≥–µ–Ω—Ç:** {self.agent_id}
**–î–µ–π—Å—Ç–≤–∏–µ:** –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
**–í—Ä–µ–º—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**–ü—É—Ç—å:** `outputs/{filename}`
**–†–∞–∑–º–µ—Ä:** {len(content)} —Å–∏–º–≤–æ–ª–æ–≤

## –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞
```
{content[:300]}{'...' if len(content) > 300 else ''}
```
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        try:
            from kittycore.core.obsidian_db import ObsidianNote
            note = ObsidianNote(
                title=f"–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}",
                content=log_note,
                tags=[self.agent_id, "file_operation", "create"],
                metadata={
                    "agent_id": self.agent_id,
                    "operation": "create_file",
                    "filename": filename,
                    "timestamp": datetime.now().strftime('%Y%m%d_%H%M%S')
                },
                folder=f"agents/{self.agent_id}/files"
            )
            
            self.obsidian_db.save_note(note)
            obsidian_logged = True
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ ObsidianDB: {e}")
            obsidian_logged = False
        
        return ToolResult(
            success=True,
            data={
                "file_path": str(file_path),
                "message": f"–§–∞–π–ª {filename} —Å–æ–∑–¥–∞–Ω",
                "logged_to_obsidian": obsidian_logged
            }
        )
    
    def _read_file(self, filename: str) -> ToolResult:
        """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª"""
        for search_path in [Path("outputs") / filename, Path(filename), Path(".") / filename]:
            if search_path.exists():
                content = search_path.read_text(encoding='utf-8')
                
                return ToolResult(
                    success=True,
                    data={
                        "content": content,
                        "file_path": str(search_path),
                        "size": len(content)
                    }
                )
        
        return ToolResult(
            success=False,
            error=f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    def _list_files(self) -> ToolResult:
        """–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
        outputs_files = list(Path("outputs").glob("*")) if Path("outputs").exists() else []
        current_files = [f for f in Path(".").glob("*") if f.is_file()]
        
        return ToolResult(
            success=True,
            data={
                "outputs_files": [f.name for f in outputs_files],
                "current_files": [f.name for f in current_files],
                "total_files": len(outputs_files) + len(current_files)
            }
        )
    
    def get_schema(self) -> Dict[str, Any]:
        """–°—Ö–µ–º–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        return {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "–î–µ–π—Å—Ç–≤–∏–µ: create, read, list",
                    "enum": ["create", "read", "list"],
                    "default": "create"
                },
                "filename": {
                    "type": "string",
                    "description": "–ò–º—è —Ñ–∞–π–ª–∞"
                },
                "content": {
                    "type": "string",
                    "description": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (–¥–ª—è create)"
                }
            }
        }


def create_obsidian_tools(obsidian_db, agent_id: str) -> Dict[str, Tool]:
    """–°–æ–∑–¥–∞—ë—Ç –Ω–∞–±–æ—Ä ObsidianAware –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    return {
        "code_generator": ObsidianAwareCodeGenerator(obsidian_db, agent_id),
        "file_manager": ObsidianAwareFileManager(obsidian_db, agent_id)
    } 