#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ MongoDB
"""

import asyncio
import pytest
from datetime import datetime
from typing import Dict, Any

from app.core.simple_engine import SimpleScenarioEngine
from app.plugins.mongo_plugin import MongoPlugin
from app.plugins.simple_amocrm_plugin import SimpleAmoCRMPlugin
from app.plugins.simple_telegram_plugin import SimpleTelegramPlugin
from app.plugins.simple_llm_plugin import SimpleLLMPlugin


class TestPluginSettingsDirect:
    """–¢–µ—Å—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –º–µ—Ç–æ–¥—ã"""
    
    @pytest.fixture
    async def engine_with_plugins(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–≤–∏–∂–æ–∫ —Å–æ –≤—Å–µ–º–∏ –ø–ª–∞–≥–∏–Ω–∞–º–∏"""
        engine = SimpleScenarioEngine()
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã
        mongo_plugin = MongoPlugin()
        amocrm_plugin = SimpleAmoCRMPlugin()
        telegram_plugin = SimpleTelegramPlugin()
        llm_plugin = SimpleLLMPlugin()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MongoDB –ø–µ—Ä–≤—ã–º
        await mongo_plugin.initialize()
        engine.register_plugin(mongo_plugin)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã
        await amocrm_plugin.initialize()
        await telegram_plugin.initialize()
        await llm_plugin.initialize()
        
        engine.register_plugin(amocrm_plugin)
        engine.register_plugin(telegram_plugin)
        engine.register_plugin(llm_plugin)
        
        return engine, {
            'mongo': mongo_plugin,
            'amocrm': amocrm_plugin,
            'telegram': telegram_plugin,
            'llm': llm_plugin
        }
    
    @pytest.mark.asyncio
    async def test_amocrm_settings_cycle(self, engine_with_plugins):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AmoCRM –ø–ª–∞–≥–∏–Ω–∞"""
        engine, plugins = engine_with_plugins
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MongoDB
        mongo_health = await plugins['mongo'].healthcheck()
        if not mongo_health:
            pytest.skip("MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        amocrm_plugin = plugins['amocrm']
        
        try:
            print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM –ø–ª–∞–≥–∏–Ω–∞...")
            
            # === 1. –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ===
            print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")
            
            initial_settings = amocrm_plugin.get_current_settings()
            print(f"–ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {initial_settings}")
            
            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            assert initial_settings.get("configured") == False, "–ü–ª–∞–≥–∏–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ"
            assert initial_settings.get("base_url") is None, "base_url –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
            assert initial_settings.get("access_token_set") == False, "–¢–æ–∫–µ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            print("‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ")
            
            # === 2. –°–û–•–†–ê–ù–Ø–ï–ú –¢–ï–°–¢–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
            print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
            
            test_base_url = "https://test-domain.amocrm.ru"
            test_access_token = f"test_token_{datetime.now().timestamp()}"
            
            save_result = await amocrm_plugin.save_settings_to_db(test_base_url, test_access_token)
            
            assert save_result.get("success") == True, f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {save_result}"
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {save_result['message']}")
            
            # === 3. –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–ú–ï–ù–ò–õ–ò–°–¨ ===
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ get_current_settings
            current_settings = amocrm_plugin.get_current_settings()
            print(f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {current_settings}")
            
            assert current_settings.get("configured") == True, "–ü–ª–∞–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            assert current_settings.get("base_url") == test_base_url, f"base_url –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {current_settings.get('base_url')} != {test_base_url}"
            assert current_settings.get("access_token_set") == True, "–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –≤ –ø–ª–∞–≥–∏–Ω–µ
            assert amocrm_plugin.base_url == test_base_url, "base_url –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è –≤ –ø–ª–∞–≥–∏–Ω–µ"
            assert amocrm_plugin.access_token == test_access_token, "access_token –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è –≤ –ø–ª–∞–≥–∏–Ω–µ"
            assert len(amocrm_plugin.headers) > 0, "HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏—Å—å"
            assert "Authorization" in amocrm_plugin.headers, "Authorization –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # === 4. –ü–ï–†–ï–ó–ê–ì–†–£–ñ–ê–ï–ú –ü–õ–ê–ì–ò–ù –ò –ü–†–û–í–ï–†–Ø–ï–ú –ó–ê–ì–†–£–ó–ö–£ ===
            print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–≥–∏–Ω–∞
            new_amocrm_plugin = SimpleAmoCRMPlugin()
            new_amocrm_plugin.engine = engine  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–≤–∏–∂–æ–∫
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º (–¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î)
            await new_amocrm_plugin.initialize()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
            assert new_amocrm_plugin.base_url == test_base_url, "base_url –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
            assert new_amocrm_plugin.access_token == test_access_token, "access_token –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
            
            reloaded_settings = new_amocrm_plugin.get_current_settings()
            assert reloaded_settings.get("configured") == True, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ"
            
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ")
            
            # === 5. –¢–ï–°–¢–ò–†–£–ï–ú –ö–ê–†–¢–£ –ü–û–õ–ï–ô ===
            print("üó∫Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π...")
            
            test_fields_map = {
                "telegram_id": {
                    "id": 951775,
                    "name": "TG username",
                    "type": "text"
                },
                "phone": {
                    "id": 881883,
                    "name": "–¢–µ–ª–µ—Ñ–æ–Ω",
                    "type": "multiphonemail",
                    "enums": [{"id": 881885, "value": "WORK", "sort": 1}]
                },
                "email": {
                    "id": 881887,
                    "name": "Email",
                    "type": "multiphonemail",
                    "enums": [{"id": 881889, "value": "WORK", "sort": 1}]
                }
            }
            
            fields_result = await amocrm_plugin.save_fields_to_db(test_fields_map)
            assert fields_result.get("success") == True, f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –Ω–µ —É–¥–∞–ª–æ—Å—å: {fields_result}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
            assert len(amocrm_plugin.fields_map) == 3, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {len(amocrm_plugin.fields_map)}"
            assert "telegram_id" in amocrm_plugin.fields_map, "–ü–æ–ª–µ telegram_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            assert amocrm_plugin.fields_map["phone"]["id"] == 881883, "ID –ø–æ–ª—è phone –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ª–µ–π –≤ –Ω–æ–≤–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
            await new_amocrm_plugin._load_fields_from_db()
            assert len(new_amocrm_plugin.fields_map) == 3, "–ü–æ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –≤ –Ω–æ–≤–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ"
            
            print("‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # === 6. –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• ===
            print("üßπ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            
            mongo_plugin = plugins['mongo']
            
            # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await mongo_plugin._delete_one("plugin_settings", {"plugin_name": "amocrm"})
            await mongo_plugin._delete_one("plugin_settings", {"plugin_name": "amocrm_fields"})
            
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ AmoCRM: {e}")
            raise
    
    @pytest.mark.asyncio
    async def test_telegram_settings_cycle(self, engine_with_plugins):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram –ø–ª–∞–≥–∏–Ω–∞"""
        engine, plugins = engine_with_plugins
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MongoDB
        mongo_health = await plugins['mongo'].healthcheck()
        if not mongo_health:
            pytest.skip("MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        telegram_plugin = plugins['telegram']
        
        try:
            print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –ø–ª–∞–≥–∏–Ω–∞...")
            
            # === 1. –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ===
            print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")
            
            initial_settings = telegram_plugin.get_current_settings()
            print(f"–ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {initial_settings}")
            
            assert initial_settings.get("configured") == False, "–ü–ª–∞–≥–∏–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ"
            assert initial_settings.get("bot_token_set") == False, "–¢–æ–∫–µ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            print("‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ")
            
            # === 2. –°–û–•–†–ê–ù–Ø–ï–ú –¢–ï–°–¢–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
            print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
            
            test_bot_token = f"1234567890:TEST_TOKEN_{datetime.now().timestamp()}"
            test_webhook_url = "https://example.com/webhook"
            test_webhook_secret = "test_secret"
            
            save_result = await telegram_plugin.save_settings_to_db(
                test_bot_token, 
                test_webhook_url, 
                test_webhook_secret
            )
            
            assert save_result.get("success") == True, f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {save_result}"
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {save_result['message']}")
            
            # === 3. –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–ú–ï–ù–ò–õ–ò–°–¨ ===
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
            
            current_settings = telegram_plugin.get_current_settings()
            print(f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {current_settings}")
            
            assert current_settings.get("configured") == True, "–ü–ª–∞–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            assert current_settings.get("bot_token_set") == True, "–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –≤ –ø–ª–∞–≥–∏–Ω–µ
            assert telegram_plugin.bot_token == test_bot_token, "bot_token –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è –≤ –ø–ª–∞–≥–∏–Ω–µ"
            
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # === 4. –ü–ï–†–ï–ó–ê–ì–†–£–ñ–ê–ï–ú –ü–õ–ê–ì–ò–ù ===
            print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
            
            new_telegram_plugin = SimpleTelegramPlugin()
            new_telegram_plugin.engine = engine
            
            await new_telegram_plugin.initialize()
            
            assert new_telegram_plugin.bot_token == test_bot_token, "bot_token –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
            
            reloaded_settings = new_telegram_plugin.get_current_settings()
            assert reloaded_settings.get("configured") == True, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ"
            
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ")
            
            # === 5. –û–ß–ò–°–¢–ö–ê ===
            print("üßπ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            
            mongo_plugin = plugins['mongo']
            await mongo_plugin._delete_one("plugin_settings", {"plugin_name": "telegram"})
            
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Telegram: {e}")
            raise


if __name__ == "__main__":
    async def run_tests():
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤...")
        
        test_instance = TestPluginSettingsDirect()
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏
        engine = SimpleScenarioEngine()
        
        mongo_plugin = MongoPlugin()
        amocrm_plugin = SimpleAmoCRMPlugin()
        telegram_plugin = SimpleTelegramPlugin()
        llm_plugin = SimpleLLMPlugin()
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
            await mongo_plugin.initialize()
            engine.register_plugin(mongo_plugin)
            
            await amocrm_plugin.initialize()
            await telegram_plugin.initialize()
            await llm_plugin.initialize()
            
            engine.register_plugin(amocrm_plugin)
            engine.register_plugin(telegram_plugin)
            engine.register_plugin(llm_plugin)
            
            plugins = {
                'mongo': mongo_plugin,
                'amocrm': amocrm_plugin,
                'telegram': telegram_plugin,
                'llm': llm_plugin
            }
            
            print("\n=== –¢–ï–°–¢ –ù–ê–°–¢–†–û–ï–ö AMOCRM ===")
            await test_instance.test_amocrm_settings_cycle((engine, plugins))
            
            print("\n=== –¢–ï–°–¢ –ù–ê–°–¢–†–û–ï–ö TELEGRAM ===")
            await test_instance.test_telegram_settings_cycle((engine, plugins))
            
            print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏: {e}")
            raise
    
    asyncio.run(run_tests()) 