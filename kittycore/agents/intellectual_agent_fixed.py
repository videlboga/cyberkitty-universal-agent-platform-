# –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—É—é —á–∞—Å—Ç—å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–æ–≤
# –°—Ç—Ä–æ–∫–∏ 950-984 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ:

    def _format_plan_for_memory(self, execution_plan: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å"""
        formatted_steps = []
        for step in execution_plan.get('steps', []):
            step_text = f"–®–∞–≥ {step.get('step', '?')}: {step.get('action', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')}"
            step_text += f" (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {step.get('tool', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})"
            formatted_steps.append(step_text)
        
        return '\n'.join(formatted_steps)
    
    def _extract_failure_reasons(self, result: Dict) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –Ω–µ—É–¥–∞—á –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        failures = []
        for step_result in result.get('step_results', []):
            if not step_result.get('success', True):
                error = step_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                failures.append(f"- {error}")
        
        return '\n'.join(failures) if failures else "- –ù–µ—Ç —è–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ —à–∞–≥–∞—Ö"
    
    def _generate_fallback_insights(self, task_description: str, analysis: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ –±–µ–∑ A-MEM"""
        insights = "üß† –ë–ê–ó–û–í–´–ï –ò–ù–°–ê–ô–¢–´ (A-MEM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω):\n\n"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –∏ –¥–∞—ë–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if "–∞–Ω–∞–ª–∏–∑" in task_description.lower():
            insights += "üìä –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß:\n"
            insights += "- –ù–∞—á–∏–Ω–∞–π —Å –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (web_client)\n"
            insights += "- –°–æ–∑–¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (.json –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, .md –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤)\n"
            insights += "- –í–∫–ª—é—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, –Ω–∞–∑–≤–∞–Ω–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        
        if "–ø—Ä–æ—Ç–æ—Ç–∏–ø" in task_description.lower() or "—Å–æ–∑–¥–∞–π" in task_description.lower():
            insights += "üé® –°–û–ó–î–ê–ù–ò–ï –ü–†–û–¢–û–¢–ò–ü–û–í:\n"
            insights += "- –û–ø–∏—Å—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏\n"
            insights += "- –í–∫–ª—é—á–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏\n"
            insights += "- –°–æ–∑–¥–∞–≤–∞–π —Ä–∞–±–æ—Ç–∞—é—â–∏–π –∫–æ–¥, –∞ –Ω–µ –æ–ø–∏—Å–∞–Ω–∏—è\n\n"
        
        if len(task_description.split()) > 15:  # –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞
            insights += "‚ö° –°–õ–û–ñ–ù–´–ï –ó–ê–î–ê–ß–ò:\n"
            insights += "- –†–∞–∑–±–∏–≤–∞–π –Ω–∞ 4-8 —à–∞–≥–æ–≤\n"
            insights += "- –ö–∞–∂–¥—ã–π —à–∞–≥ = –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
            insights += "- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö\n\n"
        
        return insights 