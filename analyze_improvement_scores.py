#!/usr/bin/env python3
"""
üìä –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –æ—Ü–µ–Ω–æ–∫ –≤ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–º —É–ª—É—á—à–µ–Ω–∏–∏
"""

import re
import subprocess
from typing import List, Dict, Tuple
from dataclasses import dataclass

@dataclass
class ScoreChange:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏"""
    step: str
    initial_score: float
    final_score: float
    change: float
    attempts: int
    success: bool

def extract_scores_from_logs() -> List[ScoreChange]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –∏–∑ –ª–æ–≥–æ–≤"""
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
    result = subprocess.run(
        ["python", "test_iterative_improvement.py"],
        capture_output=True,
        text=True
    )
    
    # –õ–æ–≥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ stdout –∏–ª–∏ stderr
    logs = result.stdout + result.stderr
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ü–µ–Ω–æ–∫
    validation_pattern = r"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è:.*?\(–æ—Ü–µ–Ω–∫–∞: ([\d.]+)/1\.0\)"
    improvement_pattern = r"üîÑ –ü–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è #(\d+) \(—Ç–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞: ([\d.]+)\)"
    final_pattern = r"(üìà –£–ª—É—á—à–µ–Ω–∏–µ|üìâ –£—Ö—É–¥—à–µ–Ω–∏–µ): ([\d.]+) \(([+-][\d.]+)\)"
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏
    validations = re.findall(validation_pattern, logs)
    improvements = re.findall(improvement_pattern, logs)
    finals = re.findall(final_pattern, logs)
    
    print("üîç –ù–ê–ô–î–ï–ù–ù–´–ï –û–¶–ï–ù–ö–ò:")
    print(f"–í–∞–ª–∏–¥–∞—Ü–∏–∏: {len(validations)}")
    print(f"–ü–æ–ø—ã—Ç–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è: {len(improvements)}")
    print(f"–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(finals)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∑–∞–¥–∞—á–∞–º
    changes = []
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ - –±–µ—Ä—ë–º –∫–∞–∂–¥—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–∞–∫ –Ω–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ —É–ª—É—á—à–µ–Ω–∏—è
    for i, validation_score in enumerate(validations):
        initial_score = float(validation_score)
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è
        task_improvements = []
        for attempt, current_score in improvements:
            if abs(float(current_score) - initial_score) < 0.1:  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                task_improvements.append((int(attempt), float(current_score)))
        
        # –ò—â–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_score = initial_score
        change = 0.0
        success = False
        
        if i < len(finals):
            final_type, final_val, change_val = finals[i]
            final_score = float(final_val)
            change = float(change_val)
            success = "–£–ª—É—á—à–µ–Ω–∏–µ" in final_type
        
        changes.append(ScoreChange(
            step=f"–ó–∞–¥–∞—á–∞ {i+1}",
            initial_score=initial_score,
            final_score=final_score,
            change=change,
            attempts=len(task_improvements),
            success=success
        ))
    
    return changes

def analyze_improvement_patterns(changes: List[ScoreChange]) -> Dict[str, any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è"""
    
    total_tasks = len(changes)
    successful_improvements = sum(1 for c in changes if c.success and c.change > 0)
    total_improvement = sum(c.change for c in changes if c.change > 0)
    total_degradation = sum(abs(c.change) for c in changes if c.change < 0)
    
    avg_initial_score = sum(c.initial_score for c in changes) / total_tasks if total_tasks > 0 else 0
    avg_final_score = sum(c.final_score for c in changes) / total_tasks if total_tasks > 0 else 0
    
    return {
        "total_tasks": total_tasks,
        "successful_improvements": successful_improvements,
        "success_rate": successful_improvements / total_tasks if total_tasks > 0 else 0,
        "total_improvement": total_improvement,
        "total_degradation": total_degradation,
        "net_improvement": total_improvement - total_degradation,
        "avg_initial_score": avg_initial_score,
        "avg_final_score": avg_final_score,
        "avg_improvement": avg_final_score - avg_initial_score
    }

def print_detailed_analysis():
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    
    print("üìä –ê–ù–ê–õ–ò–ó –î–ò–ù–ê–ú–ò–ö–ò –û–¶–ï–ù–û–ö –í –ò–¢–ï–†–ê–¢–ò–í–ù–û–ú –£–õ–£–ß–®–ï–ù–ò–ò")
    print("=" * 60)
    
    changes = extract_scores_from_logs()
    
    if not changes:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ü–µ–Ω–∫–∞—Ö")
        return
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    print("\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô:")
    print("-" * 60)
    print(f"{'–ó–∞–¥–∞—á–∞':<12} {'–ù–∞—á–∞–ª—å–Ω–∞—è':<10} {'–§–∏–Ω–∞–ª—å–Ω–∞—è':<10} {'–ò–∑–º–µ–Ω–µ–Ω–∏–µ':<12} {'–ü–æ–ø—ã—Ç–∫–∏':<8} {'–£—Å–ø–µ—Ö':<6}")
    print("-" * 60)
    
    for change in changes:
        success_icon = "‚úÖ" if change.success else "‚ùå"
        change_str = f"{change.change:+.1f}" if change.change != 0 else "0.0"
        
        print(f"{change.step:<12} {change.initial_score:<10.1f} {change.final_score:<10.1f} "
              f"{change_str:<12} {change.attempts:<8} {success_icon:<6}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    stats = analyze_improvement_patterns(changes)
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:")
    print("-" * 40)
    print(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total_tasks']}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π: {stats['successful_improvements']}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1%}")
    print(f"–û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: +{stats['total_improvement']:.1f}")
    print(f"–û–±—â–µ–µ —É—Ö—É–¥—à–µ–Ω–∏–µ: -{stats['total_degradation']:.1f}")
    print(f"–ß–∏—Å—Ç–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {stats['net_improvement']:+.1f}")
    print(f"–°—Ä–µ–¥–Ω—è—è –Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {stats['avg_initial_score']:.1f}")
    print(f"–°—Ä–µ–¥–Ω—è—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {stats['avg_final_score']:.1f}")
    print(f"–°—Ä–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {stats['avg_improvement']:+.1f}")
    
    # –í—ã–≤–æ–¥—ã
    print(f"\nüéØ –í–´–í–û–î–´:")
    print("-" * 30)
    
    if stats['success_rate'] > 0.5:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")
    else:
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
    
    if stats['avg_improvement'] > 0:
        print(f"‚úÖ –í —Å—Ä–µ–¥–Ω–µ–º –æ—Ü–µ–Ω–∫–∏ —É–ª—É—á—à–∞—é—Ç—Å—è –Ω–∞ {stats['avg_improvement']:.1f}")
    else:
        print(f"‚ùå –í —Å—Ä–µ–¥–Ω–µ–º –æ—Ü–µ–Ω–∫–∏ —É—Ö—É–¥—à–∞—é—Ç—Å—è –Ω–∞ {abs(stats['avg_improvement']):.1f}")
    
    if stats['net_improvement'] > 0:
        print(f"‚úÖ –û–±—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π: +{stats['net_improvement']:.1f}")
    else:
        print(f"‚ùå –û–±—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π: {stats['net_improvement']:.1f}")

if __name__ == "__main__":
    print_detailed_analysis() 