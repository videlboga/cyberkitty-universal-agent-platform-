#!/usr/bin/env python3
"""
üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò OBSIDIANORCHESTRATOR

–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ObsidianAware –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:
1. –ê–≥–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ ObsidianDB
3. –§–∞–π–ª—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –ò –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ vault
4. –ù–ï–¢ –ø—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import asyncio
import shutil
from pathlib import Path
from kittycore.core.obsidian_orchestrator import create_obsidian_orchestrator

async def test_integration_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò OBSIDIANORCHESTRATOR")
    print("=" * 60)
    
    vault_path = "./integration_fix_vault"
    if Path(vault_path).exists():
        shutil.rmtree(vault_path)
    
    orchestrator = create_obsidian_orchestrator(vault_path)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞
    print("üìù –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ Python —Å–∫—Ä–∏–ø—Ç–∞")
    print("-" * 40)
    
    task = "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª calculator.py —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö —á–∏—Å–µ–ª"
    result = await orchestrator.solve_task(task, user_id="integration_test")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   –°—Ç–∞—Ç—É—Å: {result['status']}")
    print(f"   –ê–≥–µ–Ω—Ç–æ–≤: {result['agents_created']}")
    print(f"   Task ID: {result['task_id']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏—Å—å –†–ï–ê–õ–¨–ù–´–ï —Ñ–∞–π–ª—ã
    calculator_files = list(Path(".").glob("**/calculator.py"))
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ calculator.py: {len(calculator_files)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ vault –µ—Å—Ç—å –°–û–î–ï–†–ñ–ê–¢–ï–õ–¨–ù–´–ï –∑–∞–º–µ—Ç–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
    task_id = result['task_id']
    agent_results = list(Path(vault_path).glob("agents/*result*.md"))
    print(f"üìù –ó–∞–º–µ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤: {len(agent_results)}")
    
    obsidian_has_real_content = False
    for result_file in agent_results:
        content = result_file.read_text()
        if 'def ' in content or 'calculator' in content or 'function' in content:
            obsidian_has_real_content = True
            print(f"   ‚úÖ –ù–ê–ô–î–ï–ù –†–ï–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ù–¢ –≤ {result_file.name}")
            print(f"   üìÑ –§—Ä–∞–≥–º–µ–Ω—Ç: {content[200:400]}...")
            break
        else:
            print(f"   ‚ö†Ô∏è –ü—É—Å—Ç–æ–π/–æ—Ç—á—ë—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ {result_file.name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã (–Ω–æ–≤—ã–µ!)
    artifact_files = list(Path(vault_path).glob("agents/*/artifacts/*.md"))
    print(f"üíé –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤: {len(artifact_files)}")
    
    obsidian_has_artifacts = False
    for artifact_file in artifact_files:
        content = artifact_file.read_text()
        if 'def ' in content or 'calculator' in content:
            obsidian_has_artifacts = True
            print(f"   ‚úÖ –ù–ê–ô–î–ï–ù –ê–†–¢–ï–§–ê–ö–¢ —Å –∫–æ–¥–æ–º –≤ {artifact_file.name}")
            print(f"   üìÑ –§—Ä–∞–≥–º–µ–Ω—Ç: {content[400:600]}...")
            break
    
    # –¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
    code_works = False
    if calculator_files:
        try:
            calc_file = calculator_files[0]
            code = calc_file.read_text()
            
            if 'def ' in code:
                exec_globals = {}
                exec(code, exec_globals)
                
                # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–ª–æ–∂–µ–Ω–∏—è
                for func_name, func_obj in exec_globals.items():
                    if callable(func_obj) and func_name != '__builtins__':
                        try:
                            # –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å —Å –¥–≤—É–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
                            test_result = func_obj(5, 3)
                            if test_result == 8:
                                code_works = True
                                print(f"   ‚úÖ –§–£–ù–ö–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢! {func_name}(5, 3) = {test_result}")
                                break
                        except:
                            continue
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞: {e}")
    
    # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ —É—Å–ø–µ—Ö–∞
    test1_success = sum([
        len(calculator_files) > 0,        # –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã
        obsidian_has_real_content,        # –ö–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        obsidian_has_artifacts,           # –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –µ—Å—Ç—å
        code_works                        # –ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç
    ]) / 4 * 100
    
    print(f"\nüéØ –¢–ï–°–¢ 1 –†–ï–ó–£–õ–¨–¢–ê–¢: {test1_success:.1f}%")
    print(f"   üìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã: {len(calculator_files) > 0}")
    print(f"   üìù –ö–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: {obsidian_has_real_content}")
    print(f"   üíé –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {obsidian_has_artifacts}")
    print(f"   ‚ö° –ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç: {code_works}")
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
    print(f"\nüìù –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    print("-" * 40)
    
    task2 = "–°–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"
    result2 = await orchestrator.solve_task(task2, user_id="integration_test")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   –°—Ç–∞—Ç—É—Å: {result2['status']}")
    print(f"   –ê–≥–µ–Ω—Ç–æ–≤: {result2['agents_created']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML —Ñ–∞–π–ª—ã
    html_files = list(Path("outputs").glob("*.html")) if Path("outputs").exists() else []
    print(f"üìÅ HTML —Ñ–∞–π–ª—ã –≤ outputs/: {len(html_files)}")
    
    real_form_found = False
    for html_file in html_files:
        content = html_file.read_text()
        if '<form' in content and 'input' in content:
            real_form_found = True
            print(f"   ‚úÖ –ù–ê–ô–î–ï–ù–ê –†–ï–ê–õ–¨–ù–ê–Ø –§–û–†–ú–ê –≤ {html_file.name}")
            break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ vault
    web_artifacts = list(Path(vault_path).glob("agents/*/artifacts/*webpage*.md"))
    print(f"üíé –í–µ–±-–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: {len(web_artifacts)}")
    
    web_artifacts_real = False
    for web_artifact in web_artifacts:
        content = web_artifact.read_text()
        if '<form' in content and 'input' in content:
            web_artifacts_real = True
            print(f"   ‚úÖ –ù–ê–ô–î–ï–ù –í–ï–ë-–ê–†–¢–ï–§–ê–ö–¢ —Å —Ñ–æ—Ä–º–æ–π –≤ {web_artifact.name}")
            break
    
    test2_success = sum([
        len(html_files) > 0,
        real_form_found,
        web_artifacts_real
    ]) / 3 * 100
    
    print(f"\nüéØ –¢–ï–°–¢ 2 –†–ï–ó–£–õ–¨–¢–ê–¢: {test2_success:.1f}%")
    print(f"   üìÅ HTML —Ñ–∞–π–ª—ã: {len(html_files) > 0}")
    print(f"   üìù –†–µ–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞: {real_form_found}")
    print(f"   üíé –í–µ–±-–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: {web_artifacts_real}")
    
    # –û–ë–©–ò–ô –ò–¢–û–ì
    overall_success = (test1_success + test2_success) / 2
    
    print(f"\n" + "=" * 60)
    print(f"üéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: {overall_success:.1f}%")
    print(f"=" * 60)
    
    if overall_success >= 80:
        print("‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
        print("   ObsidianAware –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ vault –ò —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É")
    elif overall_success >= 60:
        print("üîß –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ß–ê–°–¢–ò–ß–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ê")
        print("   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å")
    else:
        print("‚ùå –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í–°–Å –ï–©–Å –°–õ–û–ú–ê–ù–ê")
        print("   –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É vault
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê VAULT:")
    all_notes = list(Path(vault_path).rglob("*.md"))
    print(f"   –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {len(all_notes)}")
    
    by_folder = {}
    for note in all_notes:
        folder = str(note.parent.relative_to(vault_path))
        by_folder[folder] = by_folder.get(folder, 0) + 1
    
    for folder, count in sorted(by_folder.items()):
        print(f"   {folder}: {count} –∑–∞–º–µ—Ç–æ–∫")
    
    return overall_success

if __name__ == "__main__":
    asyncio.run(test_integration_fix()) 