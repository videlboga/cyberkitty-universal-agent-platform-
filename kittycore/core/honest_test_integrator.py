#!/usr/bin/env python3
"""
üõ°Ô∏è –ò–ù–¢–ï–ì–†–ê–¢–û–† –ß–ï–°–¢–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø KITTYCORE 3.0

–¶–µ–ª—å: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ–¥–¥–µ–ª–æ–∫ –≤–æ –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã
–ü—Ä–∏–Ω—Ü–∏–ø: "–ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å"

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è FakeDetector
- –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
- –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤ –æ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ—á–µ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import os
import json
from pathlib import Path
from typing import Dict, List, Any, Tuple
import logging
from datetime import datetime

from kittycore.core.fake_detector import FakeDetector, FakeIndicator

logger = logging.getLogger(__name__)

class HonestTestIntegrator:
    """
    üõ°Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —á–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥–¥–µ–ª–æ–∫ –≤ —Ç–µ—Å—Ç—ã
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–µ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤ –æ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self, honesty_threshold: float = 0.7):
        self.fake_detector = FakeDetector()
        self.honesty_threshold = honesty_threshold
        self.honest_tools = set()  # –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —á–µ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.dishonest_tools = set()  # –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ—á–µ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.test_results = []  # –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
        
        logger.info(f"üõ°Ô∏è HonestTestIntegrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø–æ—Ä–æ–≥ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏: {honesty_threshold})")
    
    def wrap_test_result(self, tool_name: str, action: str, original_result: Any) -> Dict[str, Any]:
        """
        –û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —á–µ—Å—Ç–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        """
        # –î–µ—Ç–µ–∫—Ç–∏–º –ø–æ–¥–¥–µ–ª–∫–∏
        is_fake, indicators = self.fake_detector.detect_fake_result(tool_name, action, original_result)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
        honesty_score = self.fake_detector.get_honesty_score(indicators)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
        if honesty_score >= self.honesty_threshold:
            honesty_status = "–ß–ï–°–¢–ù–´–ô"
            self.honest_tools.add(tool_name)
        elif honesty_score >= 0.3:
            honesty_status = "–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô"
        else:
            honesty_status = "–ù–ï–ß–ï–°–¢–ù–´–ô"
            self.dishonest_tools.add(tool_name)
        
        # –°–æ–∑–¥–∞—ë–º —á–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        honest_result = {
            'tool_name': tool_name,
            'action': action,
            'original_success': getattr(original_result, 'success', False),
            'honest_success': honesty_score >= self.honesty_threshold,
            'honesty_score': honesty_score,
            'honesty_status': honesty_status,
            'is_fake': is_fake,
            'fake_indicators': [
                {
                    'type': ind.type,
                    'severity': ind.severity, 
                    'description': ind.description,
                    'confidence': ind.confidence
                } for ind in indicators
            ],
            'data_size': len(str(getattr(original_result, 'data', ''))),
            'timestamp': datetime.now().isoformat(),
            'original_data': str(original_result)[:200] + '...' if len(str(original_result)) > 200 else str(original_result)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.test_results.append(honest_result)
        
        return honest_result
    
    def generate_honesty_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        if not self.test_results:
            return "üìù –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tests = len(self.test_results)
        honest_tests = len([r for r in self.test_results if r['honesty_status'] == '–ß–ï–°–¢–ù–´–ô'])
        dishonest_tests = len([r for r in self.test_results if r['honesty_status'] == '–ù–ï–ß–ï–°–¢–ù–´–ô'])
        suspicious_tests = len([r for r in self.test_results if r['honesty_status'] == '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô'])
        
        average_honesty = sum(r['honesty_score'] for r in self.test_results) / total_tests
        
        report = [
            "üõ°Ô∏è –û–¢–ß–Å–¢ –û –ß–ï–°–¢–ù–û–°–¢–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø KITTYCORE 3.0",
            "=" * 60,
            f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:",
            f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}",
            f"   ‚úÖ –ß–µ—Å—Ç–Ω—ã—Ö: {honest_tests} ({honest_tests/total_tests*100:.1f}%)",
            f"   ‚ùå –ù–µ—á–µ—Å—Ç–Ω—ã—Ö: {dishonest_tests} ({dishonest_tests/total_tests*100:.1f}%)",
            f"   ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {suspicious_tests} ({suspicious_tests/total_tests*100:.1f}%)",
            f"   üìà –°—Ä–µ–¥–Ω—è—è —á–µ—Å—Ç–Ω–æ—Å—Ç—å: {average_honesty:.2f}/1.00",
            "",
            "üèÜ –ë–ï–õ–´–ô –°–ü–ò–°–û–ö (—á–µ—Å—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã):",
        ]
        
        for tool in sorted(self.honest_tools):
            tool_results = [r for r in self.test_results if r['tool_name'] == tool and r['honesty_status'] == '–ß–ï–°–¢–ù–´–ô']
            avg_score = sum(r['honesty_score'] for r in tool_results) / len(tool_results) if tool_results else 0
            report.append(f"   ‚úÖ {tool} (—á–µ—Å—Ç–Ω–æ—Å—Ç—å: {avg_score:.2f})")
        
        if self.dishonest_tools:
            report.extend([
                "",
                "üö´ –ß–Å–†–ù–´–ô –°–ü–ò–°–û–ö (–Ω–µ—á–µ—Å—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã):",
            ])
            for tool in sorted(self.dishonest_tools):
                tool_results = [r for r in self.test_results if r['tool_name'] == tool and r['honesty_status'] == '–ù–ï–ß–ï–°–¢–ù–´–ô']
                avg_score = sum(r['honesty_score'] for r in tool_results) / len(tool_results) if tool_results else 0
                report.append(f"   ‚ùå {tool} (—á–µ—Å—Ç–Ω–æ—Å—Ç—å: {avg_score:.2f})")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—á–µ—Å—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        dishonest_results = [r for r in self.test_results if r['honesty_status'] == '–ù–ï–ß–ï–°–¢–ù–´–ô']
        if dishonest_results:
            report.extend([
                "",
                "üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ù–ï–ß–ï–°–¢–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:",
                "-" * 50,
            ])
            
            for result in dishonest_results[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                report.append(f"‚ùå {result['tool_name']}.{result['action']} (—á–µ—Å—Ç–Ω–æ—Å—Ç—å: {result['honesty_score']:.2f})")
                for indicator in result['fake_indicators'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                    severity_emoji = {
                        "critical": "üî¥", "high": "üü†", "medium": "üü°", "low": "üîµ"
                    }.get(indicator['severity'], "‚ö™")
                    report.append(f"   {severity_emoji} {indicator['description']}")
                report.append("")
        
        return "\n".join(report)
    
    def save_honesty_results(self, filepath: str = "honesty_results.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª"""
        data = {
            'honest_tools': list(self.honest_tools),
            'dishonest_tools': list(self.dishonest_tools),
            'test_results': self.test_results,
            'honesty_threshold': self.honesty_threshold,
            'generated_at': datetime.now().isoformat()
        }
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filepath}")
    
    def load_honesty_results(self, filepath: str = "honesty_results.json"):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not Path(filepath).exists():
            logger.warning(f"üìÇ –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        self.honest_tools = set(data.get('honest_tools', []))
        self.dishonest_tools = set(data.get('dishonest_tools', []))
        self.test_results = data.get('test_results', [])
        
        logger.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {filepath}")
    
    def is_tool_honest(self, tool_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ"""
        return tool_name in self.honest_tools
    
    def is_tool_dishonest(self, tool_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"""
        return tool_name in self.dishonest_tools
    
    def get_tool_reputation(self, tool_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        tool_results = [r for r in self.test_results if r['tool_name'] == tool_name]
        
        if not tool_results:
            return {
                'tool_name': tool_name,
                'status': '–ù–ï–ò–ó–í–ï–°–¢–ù–´–ô',
                'tests_count': 0,
                'average_honesty': 0.0,
                'reputation': '–ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª—Å—è'
            }
        
        honest_count = len([r for r in tool_results if r['honesty_status'] == '–ß–ï–°–¢–ù–´–ô'])
        dishonest_count = len([r for r in tool_results if r['honesty_status'] == '–ù–ï–ß–ï–°–¢–ù–´–ô'])
        average_honesty = sum(r['honesty_score'] for r in tool_results) / len(tool_results)
        
        if average_honesty >= self.honesty_threshold:
            status = '–ß–ï–°–¢–ù–´–ô'
            reputation = f"‚úÖ –ù–∞–¥—ë–∂–Ω—ã–π ({honest_count}/{len(tool_results)} —á–µ—Å—Ç–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤)"
        elif average_honesty >= 0.3:
            status = '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô'
            reputation = f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è (—á–µ—Å—Ç–Ω–æ—Å—Ç—å {average_honesty:.2f})"
        else:
            status = '–ù–ï–ß–ï–°–¢–ù–´–ô'
            reputation = f"‚ùå –ù–µ–Ω–∞–¥—ë–∂–Ω—ã–π ({dishonest_count}/{len(tool_results)} –Ω–µ—á–µ—Å—Ç–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤)"
        
        return {
            'tool_name': tool_name,
            'status': status,
            'tests_count': len(tool_results),
            'average_honesty': average_honesty,
            'reputation': reputation,
            'honest_tests': honest_count,
            'dishonest_tests': dishonest_count
        }

def demo_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    integrator = HonestTestIntegrator()
    
    print("üõ°Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ê–¢–û–†–ê –ß–ï–°–¢–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    print("\nüß™ –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    
    # –ß–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    honest_result = type('Result', (), {'success': True, 'data': {'file_size': 1024, 'path': '/tmp/real.txt'}})()
    result1 = integrator.wrap_test_result('media_tool', 'analyze_file', honest_result)
    print(f"‚úÖ {result1['tool_name']}: {result1['honesty_status']} (—á–µ—Å—Ç–Ω–æ—Å—Ç—å: {result1['honesty_score']:.2f})")
    
    # –ù–µ—á–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    fake_result = type('Result', (), {'success': True, 'data': 'This is example demo data'})()
    result2 = integrator.wrap_test_result('email_tool', 'send_email', fake_result)
    print(f"‚ùå {result2['tool_name']}: {result2['honesty_status']} (—á–µ—Å—Ç–Ω–æ—Å—Ç—å: {result2['honesty_score']:.2f})")
    
    # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    suspicious_result = type('Result', (), {'success': True, 'data': 'OK'})()
    result3 = integrator.wrap_test_result('network_tool', 'ping', suspicious_result)
    print(f"‚ö†Ô∏è {result3['tool_name']}: {result3['honesty_status']} (—á–µ—Å—Ç–Ω–æ—Å—Ç—å: {result3['honesty_score']:.2f})")
    
    print("\nüìä –û–¢–ß–Å–¢ –û –ß–ï–°–¢–ù–û–°–¢–ò:")
    print(integrator.generate_honesty_report())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    integrator.save_honesty_results("demo_honesty_results.json")
    print("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ demo_honesty_results.json")

if __name__ == "__main__":
    demo_integration() 