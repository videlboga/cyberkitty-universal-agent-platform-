"""
Telegram Ecosystem Plugin –¥–ª—è KittyCore
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–∞–º–∏ –∏ —é–∑–µ—Ä–±–æ—Ç–∞–º–∏

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ @BotFather  
- TON –∫–æ—à–µ–ª—å–∫–∏ –∏ –ø–ª–∞—Ç–µ–∂–∏
- Stars –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
- –Æ–∑–µ—Ä–±–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø
"""

import asyncio
import json
import re
import random
import string
from datetime import datetime
from typing import Dict, List, Optional, Any, Callable
import logging
from loguru import logger

from app.core.base_plugin import BasePlugin

try:
    import pyrogram
    from pyrogram import Client, filters
    from pyrogram.types import Message, User, Chat
    from pyrogram.errors import FloodWait, SessionPasswordNeeded
    PYROGRAM_AVAILABLE = True
except ImportError:
    PYROGRAM_AVAILABLE = False
    logger.warning("Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, Telegram —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

try:
    import aiohttp
    import aiofiles
    ASYNC_LIBS_AVAILABLE = True
except ImportError:
    ASYNC_LIBS_AVAILABLE = False
    logger.warning("Async –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


class TelegramEcosystemPlugin(BasePlugin):
    """
    Telegram Ecosystem Plugin - –ø–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è Telegram
    """
    
    def __init__(self):
        super().__init__()
        self.name = "telegram_ecosystem"
        self.version = "1.0.0"
        self.description = "–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è Telegram: –±–æ—Ç—ã, —é–∑–µ—Ä–±–æ—Ç—ã, –ø–ª–∞—Ç–µ–∂–∏"
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞
        self.userbot_sessions: Dict[str, Client] = {}
        self.bot_tokens: Dict[str, str] = {}
        self.active_conversations: Dict[str, Any] = {}
        self.payment_monitors: Dict[str, Any] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_settings = {
            "api_id": None,
            "api_hash": None,
            "default_bot_token": None,
            "ton_wallet_address": None,
            "stars_enabled": True,
            "userbot_phone": None,
            "log_chat_id": None,
            "auto_create_bots": False,
            "max_concurrent_sessions": 5
        }

    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
        try:
            if not PYROGRAM_AVAILABLE:
                logger.error("Pyrogram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–ª–∞–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
                return False
                
            await self._ensure_fresh_settings()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = self.settings
            if not settings.get("api_id") or not settings.get("api_hash"):
                logger.warning("API ID/Hash –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
            logger.info(f"ü§ñ Telegram Ecosystem Plugin v{self.version} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Ecosystem Plugin: {e}")
            return False

    # =====================================================
    # –°–ò–°–¢–ï–ú–ê –°–û–ó–î–ê–ù–ò–Ø –ë–û–¢–û–í –ß–ï–†–ï–ó @BOTFATHER
    # =====================================================
    
    async def create_bot_via_botfather(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –∏—Å–ø–æ–ª—å–∑—É—è —é–∑–µ—Ä–±–æ—Ç
        """
        try:
            bot_name = context.get("bot_name", f"AutoBot_{random.randint(1000, 9999)}")
            bot_username = context.get("bot_username", f"autobot_{self._generate_random_string(8)}_bot")
            session_name = context.get("session_name", "default_userbot")
            
            logger.info(f"ü§ñ –°–æ–∑–¥–∞—é –±–æ—Ç–∞: {bot_name} (@{bot_username})")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —é–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—é
            userbot = await self._get_userbot_session(session_name)
            if not userbot:
                return {"success": False, "error": "–Æ–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å @BotFather
            bot_token = await self._automate_botfather_dialogue(userbot, bot_name, bot_username)
            
            if bot_token:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
                self.bot_tokens[bot_username] = bot_token
                await self._save_bot_token(bot_username, bot_token, bot_name)
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
                await self._setup_new_bot(bot_token, bot_name, bot_username)
                
                logger.success(f"‚úÖ –ë–æ—Ç @{bot_username} —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
                return {
                    "success": True,
                    "bot_username": bot_username,
                    "bot_token": bot_token,
                    "bot_name": bot_name
                }
            else:
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –æ—Ç @BotFather"}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
            return {"success": False, "error": str(e)}

    async def _automate_botfather_dialogue(self, userbot: Client, bot_name: str, bot_username: str) -> Optional[str]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å @BotFather"""
        try:
            # –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º /newbot
            await userbot.send_message("@BotFather", "/newbot")
            await asyncio.sleep(2)
            
            # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞
            await userbot.send_message("@BotFather", bot_name)
            await asyncio.sleep(2)
            
            # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º username
            await userbot.send_message("@BotFather", bot_username)
            await asyncio.sleep(3)
            
            # –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–º —Ç–æ–∫–µ–Ω
            async for message in userbot.get_chat_history("@BotFather", limit=1):
                if "congratulations" in message.text.lower() or "–ø–æ–∑–¥—Ä–∞–≤–ª—è—é" in message.text.lower():
                    # –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    token_match = re.search(r'(\d+:[A-Za-z0-9_-]+)', message.text)
                    if token_match:
                        return token_match.group(1)
                elif "sorry" in message.text.lower() or "–∏–∑–≤–∏–Ω–∏—Ç–µ" in message.text.lower():
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç BotFather: {message.text}")
                    return None
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å BotFather: {e}")
            return None

    async def _setup_new_bot(self, token: str, name: str, username: str) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –±–æ—Ç–∞
            bot_client = Client(
                f"bot_{username}",
                bot_token=token,
                api_id=self.settings.get("api_id"),
                api_hash=self.settings.get("api_hash")
            )
            
            async with bot_client:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                await self._set_bot_commands(bot_client)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                await self._set_bot_description(bot_client, name)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–æ–≥ —á–∞—Ç
                await self._notify_bot_created(username, name, token)
            
            logger.info(f"‚úÖ –ë–æ—Ç @{username} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {e}")
            return False

    async def _generate_random_string(self, length: int = 8) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))

    # =====================================================
    # –°–ò–°–¢–ï–ú–ê TON –ü–õ–ê–¢–ï–ñ–ï–ô –ò –ö–û–®–ï–õ–¨–ö–û–í
    # =====================================================
    
    async def create_ton_wallet(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ TON –∫–æ—à–µ–ª—å–∫–∞
        """
        try:
            wallet_name = context.get("wallet_name", f"wallet_{self._generate_random_string(8)}")
            
            logger.info(f"üíé –°–æ–∑–¥–∞—é TON –∫–æ—à–µ–ª–µ–∫: {wallet_name}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º seed —Ñ—Ä–∞–∑—É (24 —Å–ª–æ–≤–∞)
            seed_phrase = self._generate_ton_seed()
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (—Å–∏–º—É–ª—è—Ü–∏—è, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ TON SDK)
            wallet_address = self._generate_ton_address()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            wallet_data = {
                "wallet_name": wallet_name,
                "address": wallet_address,
                "seed_phrase": seed_phrase,  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å!
                "balance": 0.0,
                "created_at": datetime.now().isoformat(),
                "transactions": []
            }
            
            await self._save_wallet_data(wallet_name, wallet_data)
            
            logger.success(f"‚úÖ TON –∫–æ—à–µ–ª–µ–∫ {wallet_name} —Å–æ–∑–¥–∞–Ω: {wallet_address}")
            
            return {
                "success": True,
                "wallet_name": wallet_name,
                "address": wallet_address,
                "seed_phrase": seed_phrase  # –í –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ - –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å!
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TON –∫–æ—à–µ–ª—å–∫–∞: {e}")
            return {"success": False, "error": str(e)}

    async def send_ton_payment(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ TON –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            from_wallet = context.get("from_wallet")
            to_address = context.get("to_address") 
            amount = context.get("amount", 0.0)
            memo = context.get("memo", "")
            
            logger.info(f"üí∏ –û—Ç–ø—Ä–∞–≤–ª—è—é {amount} TON —Å {from_wallet} –Ω–∞ {to_address}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞
            wallet_data = await self._load_wallet_data(from_wallet)
            if not wallet_data:
                return {"success": False, "error": "–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (—Å–∏–º—É–ª—è—Ü–∏—è)
            if wallet_data.get("balance", 0) < amount:
                return {"success": False, "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"}
            
            # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - TON SDK)
            transaction_hash = f"tx_{self._generate_random_string(32)}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            wallet_data["balance"] -= amount
            wallet_data["transactions"].append({
                "type": "send",
                "amount": amount,
                "to_address": to_address,
                "memo": memo,
                "hash": transaction_hash,
                "timestamp": datetime.now().isoformat()
            })
            
            await self._save_wallet_data(from_wallet, wallet_data)
            
            logger.success(f"‚úÖ TON –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {transaction_hash}")
            
            return {
                "success": True,
                "transaction_hash": transaction_hash,
                "amount": amount,
                "to_address": to_address
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TON: {e}")
            return {"success": False, "error": str(e)}

    # =====================================================
    # –°–ò–°–¢–ï–ú–ê TELEGRAM STARS
    # =====================================================
    
    async def create_stars_invoice(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ Stars –∏–Ω–≤–æ–π—Å–∞
        """
        try:
            bot_token = context.get("bot_token")
            chat_id = context.get("chat_id")
            amount = context.get("amount", 1)  # –í Stars
            title = context.get("title", "–ü–ª–∞—Ç–µ–∂")
            description = context.get("description", "–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥")
            
            logger.info(f"‚≠ê –°–æ–∑–¥–∞—é Stars –∏–Ω–≤–æ–π—Å: {amount} stars –¥–ª—è {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç –∫–ª–∏–µ–Ω—Ç
            bot_client = await self._get_bot_client(bot_token)
            if not bot_client:
                return {"success": False, "error": "–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
            
            # –°–æ–∑–¥–∞–µ–º Stars –∏–Ω–≤–æ–π—Å (—Å–∏–º—É–ª—è—Ü–∏—è Telegram Bot API)
            invoice_data = {
                "chat_id": chat_id,
                "title": title,
                "description": description,
                "payload": f"stars_payment_{self._generate_random_string(16)}",
                "currency": "XTR",  # Telegram Stars
                "prices": [{"label": title, "amount": amount}]
            }
            
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º bot.send_invoice()
            invoice_id = f"inv_{self._generate_random_string(16)}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–æ–π—Å
            await self._save_invoice_data(invoice_id, invoice_data)
            
            logger.success(f"‚úÖ Stars –∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω: {invoice_id}")
            
            return {
                "success": True,
                "invoice_id": invoice_id,
                "amount": amount,
                "title": title
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Stars –∏–Ω–≤–æ–π—Å–∞: {e}")
            return {"success": False, "error": str(e)}

    async def handle_stars_payment(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ Stars –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            payment_data = context.get("payment_data", {})
            invoice_id = payment_data.get("invoice_payload")
            
            logger.info(f"‚≠ê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Stars –ø–ª–∞—Ç–µ–∂: {invoice_id}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞
            invoice_data = await self._load_invoice_data(invoice_id)
            if not invoice_data:
                return {"success": False, "error": "–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
            invoice_data["status"] = "paid"
            invoice_data["paid_at"] = datetime.now().isoformat()
            invoice_data["payment_data"] = payment_data
            
            await self._save_invoice_data(invoice_id, invoice_data)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å—Ç-–ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            await self._execute_post_payment_actions(invoice_data)
            
            logger.success(f"‚úÖ Stars –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {invoice_id}")
            
            return {
                "success": True,
                "invoice_id": invoice_id,
                "status": "paid"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stars –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {"success": False, "error": str(e)}

    # =====================================================
    # –Æ–ó–ï–†–ë–û–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ –ò –ö–û–ù–¢–ï–ö–°–¢
    # =====================================================
    
    async def create_userbot_session(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        """
        try:
            session_name = context.get("session_name", "default_userbot")
            phone_number = context.get("phone_number")
            
            if not phone_number:
                return {"success": False, "error": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}
            
            logger.info(f"üë§ –°–æ–∑–¥–∞—é —é–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—é: {session_name}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            userbot = Client(
                session_name,
                api_id=self.settings.get("api_id"),
                api_hash=self.settings.get("api_hash"),
                phone_number=phone_number
            )
            
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –∫–æ–¥ –∏–∑ SMS)
            # await userbot.start()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            self.userbot_sessions[session_name] = userbot
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            session_data = {
                "session_name": session_name,
                "phone_number": phone_number,
                "created_at": datetime.now().isoformat(),
                "status": "active",
                "conversations": {},
                "contacts": {}
            }
            
            await self._save_session_data(session_name, session_data)
            
            logger.success(f"‚úÖ –Æ–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—è {session_name} —Å–æ–∑–¥–∞–Ω–∞")
            
            return {
                "success": True,
                "session_name": session_name,
                "phone_number": phone_number
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏–∏: {e}")
            return {"success": False, "error": str(e)}

    async def userbot_send_message(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —é–∑–µ—Ä–±–æ—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        """
        try:
            session_name = context.get("session_name", "default_userbot")
            chat_id = context.get("chat_id")
            text = context.get("text", "")
            save_context = context.get("save_context", True)
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {session_name} –≤ {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—é
            userbot = await self._get_userbot_session(session_name)
            if not userbot:
                return {"success": False, "error": "–Æ–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await userbot.send_message(chat_id, text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if save_context:
                await self._save_message_context(session_name, chat_id, {
                    "type": "outgoing",
                    "text": text,
                    "message_id": message.id,
                    "timestamp": datetime.now().isoformat(),
                    "chat_info": await self._get_chat_info(userbot, chat_id)
                })
            
            logger.success(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message.id}")
            
            return {
                "success": True,
                "message_id": message.id,
                "chat_id": chat_id,
                "text": text
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {"success": False, "error": str(e)}

    async def userbot_get_messages(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        """
        try:
            session_name = context.get("session_name", "default_userbot")
            chat_id = context.get("chat_id")
            limit = context.get("limit", 10)
            save_context = context.get("save_context", True)
            
            logger.info(f"üì• –ü–æ–ª—É—á–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {chat_id} —á–µ—Ä–µ–∑ {session_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—é
            userbot = await self._get_userbot_session(session_name)
            if not userbot:
                return {"success": False, "error": "–Æ–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
            
            messages = []
            async for message in userbot.get_chat_history(chat_id, limit=limit):
                msg_data = {
                    "message_id": message.id,
                    "text": message.text or "",
                    "from_user": {
                        "id": message.from_user.id if message.from_user else None,
                        "username": message.from_user.username if message.from_user else None,
                        "first_name": message.from_user.first_name if message.from_user else None
                    },
                    "date": message.date.isoformat() if message.date else None,
                    "reply_to": message.reply_to_message_id
                }
                messages.append(msg_data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if save_context:
                    await self._save_message_context(session_name, chat_id, {
                        "type": "incoming",
                        "message_data": msg_data,
                        "timestamp": datetime.now().isoformat()
                    })
            
            logger.success(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            return {
                "success": True,
                "messages": messages,
                "count": len(messages),
                "chat_id": chat_id
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return {"success": False, "error": str(e)}

    async def userbot_create_channel(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ —é–∑–µ—Ä–±–æ—Ç
        """
        try:
            session_name = context.get("session_name", "default_userbot")
            title = context.get("title", f"AutoChannel_{random.randint(1000, 9999)}")
            description = context.get("description", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª")
            
            logger.info(f"üì¢ –°–æ–∑–¥–∞—é –∫–∞–Ω–∞–ª '{title}' —á–µ—Ä–µ–∑ {session_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—é
            userbot = await self._get_userbot_session(session_name)
            if not userbot:
                return {"success": False, "error": "–Æ–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª
            channel = await userbot.create_channel(title, description)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel_data = {
                "channel_id": channel.id,
                "title": title,
                "description": description,
                "username": channel.username,
                "created_at": datetime.now().isoformat(),
                "creator_session": session_name,
                "members_count": 1,
                "posts": []
            }
            
            await self._save_channel_data(channel.id, channel_data)
            
            logger.success(f"‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω: @{channel.username} (ID: {channel.id})")
            
            return {
                "success": True,
                "channel_id": channel.id,
                "title": title,
                "username": channel.username,
                "invite_link": f"https://t.me/{channel.username}"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            return {"success": False, "error": str(e)}

    async def userbot_monitor_chats(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        """
        try:
            session_name = context.get("session_name", "default_userbot")
            chat_ids = context.get("chat_ids", [])
            keywords = context.get("keywords", [])
            
            logger.info(f"üëÅÔ∏è –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ {session_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—é
            userbot = await self._get_userbot_session(session_name)
            if not userbot:
                return {"success": False, "error": "–Æ–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π)
            monitor_id = f"monitor_{self._generate_random_string(16)}"
            
            monitor_data = {
                "monitor_id": monitor_id,
                "session_name": session_name,
                "chat_ids": chat_ids,
                "keywords": keywords,
                "started_at": datetime.now().isoformat(),
                "status": "active",
                "messages_caught": 0
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.active_conversations[monitor_id] = monitor_data
            
            logger.success(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω: {monitor_id}")
            
            return {
                "success": True,
                "monitor_id": monitor_id,
                "chat_ids": chat_ids,
                "keywords": keywords
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Ç–æ–≤: {e}")
            return {"success": False, "error": str(e)}

    # =====================================================
    # –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø HANDLERS
    # =====================================================
    
    def register_handlers(self) -> Dict[str, Callable]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö handlers –ø–ª–∞–≥–∏–Ω–∞"""
        return {
            # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤
            "telegram_create_bot": self.create_bot_via_botfather,
            "telegram_setup_bot": self._setup_new_bot_handler,
            "telegram_delete_bot": self._delete_bot_handler,
            
            # TON –∫–æ—à–µ–ª—å–∫–∏
            "ton_create_wallet": self.create_ton_wallet,
            "ton_send_payment": self.send_ton_payment,
            "ton_check_balance": self._check_ton_balance,
            "ton_get_transactions": self._get_ton_transactions,
            
            # Stars –ø–ª–∞—Ç–µ–∂–∏
            "stars_create_invoice": self.create_stars_invoice,
            "stars_handle_payment": self.handle_stars_payment,
            "stars_check_status": self._check_stars_status,
            
            # –Æ–∑–µ—Ä–±–æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏
            "userbot_create_session": self.create_userbot_session,
            "userbot_send_message": self.userbot_send_message,
            "userbot_get_messages": self.userbot_get_messages,
            "userbot_create_channel": self.userbot_create_channel,
            "userbot_monitor_chats": self.userbot_monitor_chats,
            "userbot_join_chat": self._userbot_join_chat,
            "userbot_leave_chat": self._userbot_leave_chat,
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            "telegram_save_context": self._save_context_handler,
            "telegram_get_context": self._get_context_handler,
            "telegram_clear_context": self._clear_context_handler,
            
            # –£—Ç–∏–ª–∏—Ç—ã
            "telegram_get_stats": self._get_telegram_stats,
            "telegram_health_check": self.healthcheck,
        }

    # =====================================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # =====================================================
    
    async def _get_userbot_session(self, session_name: str) -> Optional[Client]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏–∏"""
        try:
            if session_name in self.userbot_sessions:
                return self.userbot_sessions[session_name]
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
            session_data = await self._load_session_data(session_name)
            if session_data:
                userbot = Client(
                    session_name,
                    api_id=self.settings.get("api_id"),
                    api_hash=self.settings.get("api_hash"),
                    phone_number=session_data.get("phone_number")
                )
                self.userbot_sessions[session_name] = userbot
                return userbot
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç —Å–µ—Å—Å–∏–∏: {e}")
            return None

    async def _get_bot_client(self, token: str) -> Optional[Client]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            bot_client = Client(
                f"bot_{token[:10]}",
                bot_token=token,
                api_id=self.settings.get("api_id"),
                api_hash=self.settings.get("api_hash")
            )
            return bot_client
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return None

    # =====================================================
    # –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
    # =====================================================
    
    async def _save_bot_token(self, username: str, token: str, name: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –≤ –ë–î"""
        try:
            bot_data = {
                "username": username,
                "token": token,
                "name": name,
                "created_at": datetime.now().isoformat(),
                "status": "active"
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º MongoDB –ø–ª–∞–≥–∏–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if hasattr(self, 'mongo_collection'):
                await self.mongo_collection.update_one(
                    {"type": "bot_token", "username": username},
                    {"$set": bot_data},
                    upsert=True
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞: {e}")

    async def _save_wallet_data(self, wallet_name: str, wallet_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞"""
        try:
            wallet_data["type"] = "ton_wallet"
            wallet_data["wallet_name"] = wallet_name
            
            if hasattr(self, 'mongo_collection'):
                await self.mongo_collection.update_one(
                    {"type": "ton_wallet", "wallet_name": wallet_name},
                    {"$set": wallet_data},
                    upsert=True
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {e}")

    async def _load_wallet_data(self, wallet_name: str) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞"""
        try:
            if hasattr(self, 'mongo_collection'):
                result = await self.mongo_collection.find_one({
                    "type": "ton_wallet",
                    "wallet_name": wallet_name
                })
                return result
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞: {e}")
            return None

    async def _save_session_data(self, session_name: str, session_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏"""
        try:
            session_data["type"] = "userbot_session"
            session_data["session_name"] = session_name
            
            if hasattr(self, 'mongo_collection'):
                await self.mongo_collection.update_one(
                    {"type": "userbot_session", "session_name": session_name},
                    {"$set": session_data},
                    upsert=True
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")

    async def _load_session_data(self, session_name: str) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏"""
        try:
            if hasattr(self, 'mongo_collection'):
                result = await self.mongo_collection.find_one({
                    "type": "userbot_session",
                    "session_name": session_name
                })
                return result
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
            return None

    async def _save_message_context(self, session_name: str, chat_id: str, context_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            context_data["type"] = "message_context"
            context_data["session_name"] = session_name
            context_data["chat_id"] = str(chat_id)
            context_data["id"] = f"{session_name}_{chat_id}_{context_data.get('message_id', '')}"
            
            if hasattr(self, 'mongo_collection'):
                await self.mongo_collection.insert_one(context_data)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")

    def _generate_ton_seed(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è TON seed —Ñ—Ä–∞–∑—ã (24 —Å–ª–æ–≤–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        words = ["abandon", "ability", "able", "about", "above", "absent", "absorb", "abstract", 
                "absurd", "abuse", "access", "accident", "account", "accuse", "achieve", "acid",
                "acoustic", "acquire", "across", "act", "action", "actor", "actress", "actual"]
        return " ".join(random.choices(words, k=24))

    def _generate_ton_address(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è TON –∞–¥—Ä–µ—Å–∞"""
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TON SDK
        return f"EQ{self._generate_random_string(48)}"

    async def healthcheck(self, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
        try:
            status = {
                "plugin_name": self.name,
                "version": self.version,
                "pyrogram_available": PYROGRAM_AVAILABLE,
                "active_sessions": len(self.userbot_sessions),
                "stored_bot_tokens": len(self.bot_tokens),
                "active_monitors": len(self.active_conversations),
                "settings_configured": bool(
                    self.settings.get("api_id") and self.settings.get("api_hash")
                )
            }
            
            return {"success": True, "status": status}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ healthcheck: {e}")
            return {"success": False, "error": str(e)} 