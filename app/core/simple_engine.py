#!/usr/bin/env python3
"""
üöÄ SIMPLE SCENARIO ENGINE - –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ KittyCore

–ü—Ä–∏–Ω—Ü–∏–ø—ã:
- –ü—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ
- –û–¥–∏–Ω –¥–≤–∏–∂–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤  
- –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–≥–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ BasePlugin
- –Ø–≤–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ human-in-the-loop
"""

import asyncio
import json
import time
from datetime import datetime
from typing import Dict, Any, List, Optional, Union, Callable
from loguru import logger

from .base_plugin import BasePlugin

# === –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø ===

class StopExecution(Exception):
    """
    –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è.
    –ù–ï —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π!
    """
    
    def __init__(self, message: str, reason: str = "user_input_required", wait_for: str = None):
        super().__init__(message)
        self.reason = reason
        self.wait_for = wait_for
        self.timestamp = datetime.now().isoformat()

# === –û–°–ù–û–í–ù–û–ô –î–í–ò–ñ–û–ö ===

class SimpleScenarioEngine:
    """
    üöÄ –ü–†–û–°–¢–û–ô –ò –ú–û–©–ù–´–ô –î–í–ò–ñ–û–ö –°–¶–ï–ù–ê–†–ò–ï–í
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –í—ã–ø–æ–ª–Ω—è–µ—Ç JSON —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å —à–∞–≥–∞–º–∏
    - –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–≥–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ BasePlugin
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    - Human-in-the-loop —á–µ—Ä–µ–∑ StopExecution
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏
    """
    
    def __init__(self):
        self.step_handlers: Dict[str, Callable] = {}
        self.plugins: Dict[str, BasePlugin] = {}
        self.logger = logger.bind(component="SimpleScenarioEngine")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_core_handlers()
        
        self.logger.info("üöÄ SimpleScenarioEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _register_core_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —à–∞–≥–æ–≤"""
        self.step_handlers.update({
            # === –ë–ê–ó–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
            "start": self._handle_start,
            "end": self._handle_end,
            "action": self._handle_action,
            "input": self._handle_input,
            "branch": self._handle_branch,
            "conditional_execute": self._handle_conditional_execute,
            "switch_scenario": self._handle_switch_scenario,
            "log_message": self._handle_log_message,
            
            # === TELEGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ===
            "channel_action": self._handle_channel_action,
            "extract_telegram_context": self._handle_extract_telegram_context,
            
            # === –£–¢–ò–õ–ò–¢–´ ===
            "validate_field": self._handle_validate_field,
            "increment": self._handle_increment,
            "save_to_object": self._handle_save_to_object,
        })
        
        self.logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", 
                        handlers=list(self.step_handlers.keys()))
    
    def register_plugin(self, plugin: BasePlugin):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–≥–∏–Ω –∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        
        Args:
            plugin: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–≥–∏–Ω–∞ –Ω–∞—Å–ª–µ–¥—É—é—â–µ–≥–æ BasePlugin
        """
        # –ü–µ—Ä–µ–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–≤–∏–∂–æ–∫ –ø–ª–∞–≥–∏–Ω—É
        plugin.set_engine(self)
        
        self.plugins[plugin.name] = plugin
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞–≥–∏–Ω–∞
        plugin_handlers = plugin.register_handlers()
        self.step_handlers.update(plugin_handlers)
        
        self.logger.info(f"üîå –ü–ª–∞–≥–∏–Ω {plugin.name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
                        plugin=plugin.name,
                        new_handlers=list(plugin_handlers.keys()))
    
    async def healthcheck(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –¥–≤–∏–∂–∫–∞ –∏ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤"""
        health = {"engine": True}
        
        for plugin_name, plugin in self.plugins.items():
            try:
                health[plugin_name] = await plugin.healthcheck()
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ healthcheck –ø–ª–∞–≥–∏–Ω–∞ {plugin_name}: {e}")
                health[plugin_name] = False
        
        self.logger.info("üîç Healthcheck –∑–∞–≤–µ—Ä—à—ë–Ω", health=health)
        return health
    
    async def execute_scenario(self, scenario: Union[str, Dict[str, Any]], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞
        
        Args:
            scenario: –î–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏—è (–æ–±—ä–µ–∫—Ç) –∏–ª–∏ scenario_id (—Å—Ç—Ä–æ–∫–∞)
            context: –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω scenario_id –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ MongoDB
        if isinstance(scenario, str):
            scenario_id = scenario
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ MongoDB –ø–ª–∞–≥–∏–Ω
            get_scenario_step = {
                "id": "load_scenario",
                "type": "mongo_find_one_document",
                "params": {
                    "collection": "scenarios",
                    "filter": {"scenario_id": scenario_id}
                }
            }
            
            temp_context = {}
            await self.execute_step(get_scenario_step, temp_context)
            
            if not temp_context.get("document"):
                raise ValueError(f"–°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            
            scenario = temp_context["document"]
        
        scenario_id = scenario.get("scenario_id", "unknown")
        steps_data = scenario.get("steps", [])
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç, —Ç–∞–∫ –∏ –º–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤
        if isinstance(steps_data, dict):
            steps = list(steps_data.values())
        else:
            steps = steps_data
        
        self.logger.info(f"üéØ –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}",
                        scenario_id=scenario_id,
                        steps_count=len(steps),
                        initial_context=context)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_context = {
            **context,
            "scenario_id": scenario_id,
            "execution_started": True,
            "start_time": datetime.now().isoformat()
        }
        
        # –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º current_step –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å (–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è)
        if "current_step" not in execution_context:
            execution_context["current_step"] = None
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —à–∞–≥
            if execution_context.get("current_step"):
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —à–∞–≥–∞
                target_step_id = execution_context["current_step"]
                current_step = self._find_step_by_id(steps, target_step_id)
                
                if not current_step:
                    self.logger.warning(f"‚ö†Ô∏è –®–∞–≥ {target_step_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞—é —Å –ø–µ—Ä–≤–æ–≥–æ")
                    current_step = self._find_first_step(steps)
                else:
                    self.logger.info(f"üìç –ü—Ä–æ–¥–æ–ª–∂–∞—é —Å —à–∞–≥–∞: {target_step_id}")
            else:
                # –ò—â–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ (–æ–±—ã—á–Ω–æ type="start")
                current_step = self._find_first_step(steps)
            
            if not current_step:
                raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —à–∞–≥ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ {scenario_id}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            while current_step:
                execution_context["current_step"] = current_step.get("id")
                
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
                    step_result = await self.execute_step(current_step, execution_context)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    execution_context.update(step_result)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
                    if execution_context.get("scenario_switched"):
                        new_scenario_id = execution_context.get("switched_to")
                        if new_scenario_id and new_scenario_id != scenario_id:
                            self.logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario_id} ‚Üí {new_scenario_id}")
                            
                            try:
                                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
                                return await self.execute_scenario(new_scenario_id, execution_context)
                            except StopExecution as stop_e:
                                self.logger.info(f"‚è±Ô∏è –ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥: {stop_e}")
                                execution_context["execution_stopped"] = True
                                execution_context["stop_reason"] = str(stop_e)
                                execution_context["waiting_for_input"] = True
                                return execution_context
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                    current_step = self._find_next_step(steps, current_step, execution_context)
                    
                except StopExecution as e:
                    # –ù–û–†–ú–ê–õ–¨–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ - –ù–ï –æ—à–∏–±–∫–∞!
                    self.logger.info(f"‚è±Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {e.reason}")
                    execution_context["execution_stopped"] = True
                    execution_context["stop_reason"] = str(e)
                    execution_context["waiting_for_input"] = True
                    execution_context["wait_for"] = e.wait_for
                    return execution_context
            
            # –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ
            execution_context["execution_completed"] = True
            execution_context["end_time"] = datetime.now().isoformat()
            
            self.logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
                           scenario_id=scenario_id)
            
            return execution_context
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}: {e}",
                            scenario_id=scenario_id,
                            current_step=execution_context.get("current_step"),
                            error=str(e))
            
            execution_context["execution_error"] = True
            execution_context["error"] = str(e)
            execution_context["error_time"] = datetime.now().isoformat()
            
            raise
    
    async def execute_step(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —à–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è
        
        Args:
            step: –î–∞–Ω–Ω—ã–µ —à–∞–≥–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
        """
        step_id = step.get("id", "unknown")
        step_type = step.get("type", "unknown")
        
        self.logger.debug(f"üîß –í—ã–ø–æ–ª–Ω—è—é —à–∞–≥ {step_id} (type: {step_type})")
        
        # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ —à–∞–≥–∞
        if step_type not in self.step_handlers:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —à–∞–≥–∞: {step_type}")
        
        handler = self.step_handlers[step_type]
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            start_time = time.time()
            result = await handler(step, context)
            execution_time = int((time.time() - start_time) * 1000)
            
            self.logger.debug(f"‚úÖ –®–∞–≥ {step_id} –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_time}–º—Å")
            
            return result or {}
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ {step_id}: {e}")
            raise
    
    # === –ü–û–ò–°–ö –®–ê–ì–û–í ===
    
    def _find_first_step(self, steps: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        # –ò—â–µ–º —à–∞–≥ —Å type="start"
        for step in steps:
            if step.get("type") == "start":
                return step
        
        # –ï—Å–ª–∏ –Ω–µ—Ç start, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —à–∞–≥
        return steps[0] if steps else None
    
    def _find_step_by_id(self, steps: List[Dict[str, Any]], step_id: str) -> Optional[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç —à–∞–≥ –ø–æ ID"""
        for step in steps:
            if step.get("id") == step_id:
                return step
        return None
    
    def _find_next_step(self, steps: List[Dict[str, Any]], current_step: Dict[str, Any], context: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ (–¥–ª—è —É—Å–ª–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤)
        next_step_id = context.get("next_step_override") or current_step.get("next_step")
        
        # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if "next_step_override" in context:
            del context["next_step_override"]
        
        if not next_step_id:
            return None  # –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω
        
        return self._find_step_by_id(steps, next_step_id)
    
    # === –£–¢–ò–õ–ò–¢–´ ===
    
    def _resolve_template(self, template: str, context: Dict[str, Any]) -> str:
        """–ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö {var} –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not isinstance(template, str):
            return str(template)
        
        result = template
        for key, value in context.items():
            placeholder = f"{{{key}}}"
            if placeholder in result:
                result = result.replace(placeholder, str(value))
        
        return result
    
    def get_registered_handlers(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        return list(self.step_handlers.keys())
    
    def get_registered_plugins(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤"""
        return list(self.plugins.keys())
    
    # === –ë–ê–ó–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    async def _handle_start(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ 'start'"""
        message = step.get("params", {}).get("message", "–°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω")
        self.logger.info(f"üöÄ START: {message}")
        return {"start_message": message}
    
    async def _handle_end(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ 'end'"""
        message = step.get("params", {}).get("message", "–°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω")
        self.logger.info(f"üèÅ END: {message}")
        return {"end_message": message, "scenario_completed": True}
    
    async def _handle_action(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ 'action' - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        params = step.get("params", {})
        action_type = params.get("action", "unknown")
        
        self.logger.info(f"‚ö° ACTION: {action_type}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
        result = {"action_executed": action_type, "action_params": params}
        
        return result
    
    async def _handle_input(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ 'input' - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        params = step.get("params", {})
        input_type = params.get("type", "text")
        prompt = params.get("prompt", "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–≤–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if context.get("user_input") is not None:
            user_input = context["user_input"]
            self.logger.info(f"üìù INPUT –ø–æ–ª—É—á–µ–Ω: {user_input}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            var_name = params.get("save_to", "user_input")
            return {var_name: user_input, "input_received": True}
        else:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            self.logger.info(f"‚è≥ INPUT –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥: {prompt}")
            raise StopExecution(
                message=prompt,
                reason="user_input_required",
                wait_for=input_type
            )
    
    async def _handle_branch(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ 'branch' - —É—Å–ª–æ–≤–Ω–æ–µ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ"""
        params = step.get("params", {})
        condition = params.get("condition", "true")
        true_step = params.get("true_step")
        false_step = params.get("false_step")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ
        condition_result = self._evaluate_condition(condition, context)
        
        self.logger.info(f"üîÄ BRANCH: {condition} = {condition_result}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        next_step = true_step if condition_result else false_step
        
        if next_step:
            return {"next_step_override": next_step, "branch_result": condition_result}
        else:
            return {"branch_result": condition_result}
    
    def _evaluate_condition(self, condition: str, context: Dict[str, Any]) -> bool:
        """–ü—Ä–æ—Å—Ç–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π"""
        # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —É—Å–ª–æ–≤–∏–∏
        resolved_condition = self._resolve_template(condition, context)
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if resolved_condition in ["true", "True", "1"]:
            return True
        elif resolved_condition in ["false", "False", "0"]:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if resolved_condition.startswith("exists:"):
            var_name = resolved_condition[7:]
            return var_name in context
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é false
        return False
    
    async def _handle_conditional_execute(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        params = step.get("params", {})
        condition = params.get("condition", "true")
        
        if self._evaluate_condition(condition, context):
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —à–∞–≥–∏ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ
            nested_steps = params.get("steps", [])
            for nested_step in nested_steps:
                await self.execute_step(nested_step, context)
        
        return {"conditional_executed": True}
    
    async def _handle_switch_scenario(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        params = step.get("params", {})
        target_scenario = params.get("scenario_id")
        
        if not target_scenario:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω scenario_id –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º —à–∞–±–ª–æ–Ω—ã –≤ ID —Å—Ü–µ–Ω–∞—Ä–∏—è
        target_scenario = self._resolve_template(target_scenario, context)
        
        self.logger.info(f"üîÑ SWITCH_SCENARIO: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ {target_scenario}")
        
        return {
            "scenario_switched": True,
            "switched_to": target_scenario,
            "switch_reason": params.get("reason", "manual_switch")
        }
    
    async def _handle_log_message(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        params = step.get("params", {})
        level = params.get("level", "info")
        message = params.get("message", "Log message")
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º —à–∞–±–ª–æ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        resolved_message = self._resolve_template(message, context)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å –Ω—É–∂–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
        if level == "debug":
            self.logger.debug(resolved_message)
        elif level == "warning":
            self.logger.warning(resolved_message)
        elif level == "error":
            self.logger.error(resolved_message)
        else:
            self.logger.info(resolved_message)
        
        return {"logged": True, "log_level": level, "log_message": resolved_message}
    
    # === TELEGRAM/CHANNEL –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    async def _handle_channel_action(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞–Ω–∞–ª–∞–º–∏ (Telegram –∏ –¥—Ä.)"""
        params = step.get("params", {})
        action = params.get("action", "send_message")
        
        self.logger.info(f"üì° CHANNEL_ACTION: {action}")
        
        # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –ø–ª–∞–≥–∏–Ω—É
        if "simple_telegram" in self.plugins:
            telegram_plugin = self.plugins["simple_telegram"]
            return await telegram_plugin.handle_channel_action(action, params, context)
        else:
            self.logger.warning("Telegram –ø–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {"channel_action_skipped": True, "reason": "no_telegram_plugin"}
    
    async def _handle_extract_telegram_context(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Telegram –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        telegram_data = context.get("telegram_data", {})
        
        extracted = {
            "chat_id": telegram_data.get("chat_id"),
            "user_id": telegram_data.get("user_id"),
            "message_id": telegram_data.get("message_id"),
            "username": telegram_data.get("username"),
        }
        
        self.logger.debug("üì± –ò–∑–≤–ª–µ—á—ë–Ω Telegram –∫–æ–Ω—Ç–µ–∫—Å—Ç", extracted=extracted)
        
        return {"telegram_context": extracted, **extracted}
    
    # === –£–¢–ò–õ–ò–¢–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    async def _handle_validate_field(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π"""
        params = step.get("params", {})
        field_name = params.get("field")
        validation_type = params.get("type", "required")
        
        field_value = context.get(field_name)
        is_valid = True
        error_message = None
        
        if validation_type == "required":
            is_valid = field_value is not None and str(field_value).strip() != ""
            if not is_valid:
                error_message = f"–ü–æ–ª–µ {field_name} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
        
        elif validation_type == "email":
            import re
            email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            is_valid = bool(re.match(email_pattern, str(field_value or "")))
            if not is_valid:
                error_message = f"–ü–æ–ª–µ {field_name} –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π email"
        
        return {
            "validation_result": is_valid,
            "field_name": field_name,
            "error_message": error_message
        }
    
    async def _handle_increment(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"""
        params = step.get("params", {})
        var_name = params.get("variable", "counter")
        increment = params.get("increment", 1)
        
        current_value = context.get(var_name, 0)
        new_value = current_value + increment
        
        return {var_name: new_value, "incremented": True}
    
    async def _handle_save_to_object(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—ä–µ–∫—Ç"""
        params = step.get("params", {})
        object_name = params.get("object", "data")
        field_mappings = params.get("fields", {})
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç
        obj = context.get(object_name, {})
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—è
        for field_name, source_var in field_mappings.items():
            if source_var in context:
                obj[field_name] = context[source_var]
        
        return {object_name: obj, "saved_to_object": True} 