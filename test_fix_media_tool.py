#!/usr/bin/env python3
"""
üé® –û–¢–õ–ê–î–ö–ê: media_tool
"""

import time
import json
import tempfile
import os
from PIL import Image

try:
    from kittycore.tools.media_tool import MediaTool
    IMPORT_OK = True
    print("‚úÖ –ò–º–ø–æ—Ä—Ç media_tool —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ –û–®–ò–ë–ö–ê: {e}")
    IMPORT_OK = False

def test_get_info():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ...")
    tool = MediaTool()
    
    result = tool.execute("get_info")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            if isinstance(data, dict):
                capabilities = data.get('capabilities', {})
                print(f"üõ†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {list(capabilities.keys()) if isinstance(capabilities, dict) else '–Ω–µ dict'}")
    
    return result

def test_list_formats():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤...")
    tool = MediaTool()
    
    result = tool.execute("list_formats")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            if isinstance(data, dict):
                image_formats = data.get('image_formats', [])
                print(f"üñºÔ∏è –§–æ—Ä–º–∞—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_formats)}")
    
    return result

def test_analyze_image():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüñºÔ∏è –¢–µ—Å—Ç–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    tool = MediaTool()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as f:
        temp_path = f.name
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 100x50 –ø–∏–∫—Å–µ–ª–µ–π
        img = Image.new('RGB', (100, 50), color='red')
        img.save(temp_path, 'PNG')
    
    try:
        result = tool.execute("analyze_file", file_path=temp_path)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
        if hasattr(result, 'success'):
            print(f"‚úÖ Success: {result.success}")
            if result.success and hasattr(result, 'data'):
                data = result.data
                if isinstance(data, dict):
                    file_info = data.get('file_info', {})
                    if isinstance(file_info, dict):
                        size_bytes = file_info.get('size_bytes', 0)
                        file_type = file_info.get('type', 'UNKNOWN')
                        print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {size_bytes} –±–∞–π—Ç, —Ç–∏–ø: {file_type}")
        
        return result
        
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(temp_path)
        except:
            pass

def test_extract_metadata():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É—é –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
    tool = MediaTool()
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as f:
        temp_path = f.name
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPEG
        img = Image.new('RGB', (200, 100), color='blue')
        img.save(temp_path, 'JPEG', quality=85)
    
    try:
        result = tool.execute("extract_metadata", file_path=temp_path)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
        if hasattr(result, 'success'):
            print(f"‚úÖ Success: {result.success}")
            if result.success and hasattr(result, 'data'):
                data = result.data
                if isinstance(data, dict):
                    metadata = data.get('metadata', {})
                    print(f"üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {list(metadata.keys()) if isinstance(metadata, dict) else '–Ω–µ dict'}")
        
        return result
        
    finally:
        try:
            os.unlink(temp_path)
        except:
            pass

def is_result_honest(result, test_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if not result:
        print(f"‚ùå {test_name}: –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É ToolResult
    if not hasattr(result, 'success'):
        print(f"‚ùå {test_name}: –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ ToolResult")
        return False
    
    success = result.success
    if not success:
        print(f"‚ùå {test_name}: success=False")
        if hasattr(result, 'error'):
            print(f"   –û—à–∏–±–∫–∞: {result.error}")
        return False
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    data_str = str(result.data) if hasattr(result, 'data') else str(result)
    data_size = len(data_str)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–µ–π–∫–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    fake_patterns = [
        "media_tool: —É—Å–ø–µ—à–Ω–æ",
        "–¥–µ–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        "–∑–∞–≥–ª—É—à–∫–∞ –º–µ–¥–∏–∞"
    ]
    
    for pattern in fake_patterns:
        if pattern.lower() in data_str.lower():
            print(f"‚ùå {test_name}: –ù–∞–π–¥–µ–Ω —Ñ–µ–π–∫–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞
    media_indicators = [
        "image", "video", "audio", "metadata", "size", "format", "width", "height",
        "capabilities", "PIL", "bytes", "formats", "type", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    ]
    
    has_media_data = any(indicator.lower() in data_str.lower() for indicator in media_indicators)
    
    if not has_media_data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞")
        return False
    
    if data_size < 40:
        print(f"‚ùå {test_name}: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
        return False
    
    print(f"‚úÖ {test_name}: –ß–ï–°–¢–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
    return True

def main():
    print("üé® –û–¢–õ–ê–î–ö–ê: media_tool")
    
    if not IMPORT_OK:
        return
    
    results = {}
    
    # –¢–µ—Å—Ç—ã (–≤—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ)
    tests = [
        ("get_info", test_get_info),
        ("list_formats", test_list_formats),
        ("analyze_image", test_analyze_image),
        ("extract_metadata", test_extract_metadata)
    ]
    
    for test_name, test_func in tests:
        print(f"\n{'='*30}")
        print(f"–¢–ï–°–¢: {test_name}")
        try:
            result = test_func()
            results[test_name] = is_result_honest(result, test_name)
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ –û–®–ò–ë–ö–ê: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*50}")
    print("üìä –ò–¢–û–ì–ò:")
    
    total_tests = len(results)
    passed_tests = sum(1 for success in results.values() if success)
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
    
    print(f"\nüìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if success_rate >= 75 else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")

if __name__ == "__main__":
    main() 