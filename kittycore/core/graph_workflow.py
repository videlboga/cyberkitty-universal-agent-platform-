"""
üìä WorkflowGraph - –ì—Ä–∞—Ñ-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ KittyCore 3.0

–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –≤ –≤–∏–¥–µ –≥—Ä–∞—Ñ–∞
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Mermaid –¥–∏–∞–≥—Ä–∞–º–º –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

–ü—Ä–∏–Ω—Ü–∏–ø: "–í–∏–¥–∏–º –∫–∞–∫ –∞–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ" üéØ
"""

import asyncio
from dataclasses import dataclass, field
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime
from enum import Enum
import json
import logging
logger = logging.getLogger(__name__)


class NodeType(Enum):
    """–¢–∏–ø—ã —É–∑–ª–æ–≤ –≤ –≥—Ä–∞—Ñ–µ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    START = "start"
    END = "end"
    ACTION = "action"
    INPUT = "input"
    CONDITION = "condition"
    BRANCH = "branch"
    KITTEN_ACTION = "kitten_action"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –∫–æ—Ç—è—á—å–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π!
    LLM_CALL = "llm_call"
    SWITCH_SCENARIO = "switch_scenario"


class NodeStyle(Enum):
    """–°—Ç–∏–ª–∏ —É–∑–ª–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    DEFAULT = "default"
    SUCCESS = "success"
    WARNING = "warning"
    ERROR = "error"
    KITTEN = "kitten"  # –û—Å–æ–±—ã–π –∫–æ—Ç—è—á–∏–π —Å—Ç–∏–ª—å! üê±
    PREMIUM = "premium"


class NodeStatus(Enum):
    """–°—Ç–∞—Ç—É—Å —É–∑–ª–∞ –≤ –≥—Ä–∞—Ñ–µ"""
    PENDING = "pending"
    RUNNING = "running" 
    COMPLETED = "completed"
    FAILED = "failed"
    BLOCKED = "blocked"


@dataclass
class GraphNode:
    """–£–∑–µ–ª –≤ –≥—Ä–∞—Ñ–µ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    id: str
    type: NodeType
    label: str
    description: str = ""
    style: NodeStyle = NodeStyle.DEFAULT
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    # –ö–æ—Ç—è—á—å–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ! üê±
    kitten_assigned: Optional[str] = None
    kitten_mood_required: Optional[str] = None
    difficulty_level: int = 1  # 1-10


@dataclass 
class GraphEdge:
    """–†–µ–±—Ä–æ –≤ –≥—Ä–∞—Ñ–µ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    from_node: str
    to_node: str
    label: str = ""
    condition: Optional[str] = None
    probability: float = 1.0  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ (0.0-1.0)
    style: str = "solid"  # solid, dashed, dotted
    
    # –ö–æ—Ç—è—á—å–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—ë–±–µ—Ä! üê±
    kitten_confidence: float = 1.0  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–æ—Ç—ë–Ω–∫–∞ –≤ –ø–µ—Ä–µ—Ö–æ–¥–µ
    emotional_weight: str = "neutral"  # positive, negative, neutral


@dataclass
class ScenarioGraph:
    """–ì—Ä–∞—Ñ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    scenario_id: str
    name: str
    nodes: Dict[str, GraphNode] = field(default_factory=dict)
    edges: List[GraphEdge] = field(default_factory=list)
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    # –ö–æ—Ç—è—á—å–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ–≥–æ –≥—Ä–∞—Ñ–∞! üê±
    recommended_team: List[str] = field(default_factory=list)
    complexity_score: int = 1  # 1-10
    estimated_duration: str = "5-10 –º–∏–Ω—É—Ç"


@dataclass
class WorkflowNode:
    """–£–∑–µ–ª —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    id: str
    title: str
    description: str
    assigned_agent: str
    status: NodeStatus = NodeStatus.PENDING
    dependencies: List[str] = None
    estimated_duration: int = 5  # –º–∏–Ω—É—Ç—ã
    progress: float = 0.0


@dataclass  
class WorkflowEdge:
    """–†–µ–±—Ä–æ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ (–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å)"""
    from_node: str
    to_node: str
    dependency_type: str = "sequential"  # sequential, parallel, conditional


class WorkflowGraph:
    """–ì—Ä–∞—Ñ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    
    def __init__(self, workflow_id: str):
        self.workflow_id = workflow_id
        self.nodes: Dict[str, WorkflowNode] = {}
        self.edges: List[WorkflowEdge] = []
        self.created_at = datetime.now()

    def add_node(self, node: WorkflowNode) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —É–∑–µ–ª –≤ –≥—Ä–∞—Ñ"""
        if node.dependencies is None:
            node.dependencies = []
        self.nodes[node.id] = node
        return True
    
    def add_edge(self, from_node: str, to_node: str, dependency_type: str = "sequential") -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É —É–∑–ª–∞–º–∏"""
        if from_node in self.nodes and to_node in self.nodes:
            edge = WorkflowEdge(from_node, to_node, dependency_type)
            self.edges.append(edge)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞
            if to_node in self.nodes:
                if from_node not in self.nodes[to_node].dependencies:
                    self.nodes[to_node].dependencies.append(from_node)
            return True
        return False

    def get_ready_nodes(self) -> List[WorkflowNode]:
        """–ü–æ–ª—É—á–∏—Ç—å —É–∑–ª—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é"""
        ready_nodes = []
        
        for node in self.nodes.values():
            if node.status == NodeStatus.PENDING:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                dependencies_completed = True
                for dep_id in node.dependencies:
                    if dep_id in self.nodes:
                        if self.nodes[dep_id].status != NodeStatus.COMPLETED:
                            dependencies_completed = False
                            break
                
                if dependencies_completed:
                    ready_nodes.append(node)
        
        return ready_nodes

    def generate_mermaid(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Mermaid –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        mermaid = ["graph TD"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã —Å –∏–∫–æ–Ω–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–∞
        status_icons = {
            NodeStatus.PENDING: "‚è≥",
            NodeStatus.RUNNING: "üîÑ", 
            NodeStatus.COMPLETED: "‚úÖ",
            NodeStatus.FAILED: "‚ùå",
            NodeStatus.BLOCKED: "üö´"
        }
        
        for node in self.nodes.values():
            icon = status_icons.get(node.status, "‚ùì")
            label = f"{icon} {node.title}<br/>{node.assigned_agent}"
            mermaid.append(f'    {node.id}["{label}"]')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ë–±—Ä–∞
        for edge in self.edges:
            mermaid.append(f"    {edge.from_node} --> {edge.to_node}")
        
        return "\n".join(mermaid)


class GraphVisualizationEngine:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–≤–∏–∂–æ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–æ–≤ - –ü–†–ï–í–û–°–•–û–î–ò–¢ LANGRAPH!
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - ‚úÖ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö Mermaid –¥–∏–∞–≥—Ä–∞–º–º
    - ‚úÖ –ö–æ—Ç—è—á—å–∏ —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    - ‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    - ‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    - ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –∫–æ—Ç—è—Ç
    """
    
    def __init__(self):
        self.logger = logger
        self.themes = self._init_themes()
        
    def _init_themes(self) -> Dict[str, Dict[str, str]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ç—è—á—å–∏—Ö —Ç–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
        return {
            "cyber_kittens": {
                "start": "#FF6B9D",      # –†–æ–∑–æ–≤—ã–π
                "end": "#4ECDC4",        # –ë–∏—Ä—é–∑–æ–≤—ã–π  
                "action": "#45B7D1",     # –ì–æ–ª—É–±–æ–π
                "condition": "#FFA07A",  # –õ–æ—Å–æ—Å–µ–≤—ã–π
                "kitten_action": "#FFD93D",  # –ñ—ë–ª—Ç—ã–π (–∫–æ—Ç—è—á–∏–π!)
                "background": "#2C3E50", # –¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π
                "text": "#FFFFFF"        # –ë–µ–ª—ã–π
            },
            "professional": {
                "start": "#28A745",      # –ó–µ–ª—ë–Ω—ã–π
                "end": "#DC3545",        # –ö—Ä–∞—Å–Ω—ã–π
                "action": "#007BFF",     # –°–∏–Ω–∏–π
                "condition": "#FFC107",  # –ñ—ë–ª—Ç—ã–π
                "kitten_action": "#6F42C1",  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
                "background": "#F8F9FA", # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
                "text": "#212529"        # –¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π
            },
            "pastel_cats": {
                "start": "#FFB3BA",      # –ù–µ–∂–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
                "end": "#BAFFC9",        # –ù–µ–∂–Ω–æ-–∑–µ–ª—ë–Ω—ã–π
                "action": "#BAE1FF",     # –ù–µ–∂–Ω–æ-–≥–æ–ª—É–±–æ–π
                "condition": "#FFFFBA",  # –ù–µ–∂–Ω–æ-–∂—ë–ª—Ç—ã–π
                "kitten_action": "#FFDFBA",  # –ù–µ–∂–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
                "background": "#FFFFFF", # –ë–µ–ª—ã–π
                "text": "#555555"        # –°–µ—Ä—ã–π
            }
        }
    
    def scenario_to_graph(self, scenario: Dict[str, Any]) -> ScenarioGraph:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç JSON —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ –≥—Ä–∞—Ñ
        
        Args:
            scenario: –î–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
            
        Returns:
            ScenarioGraph: –ì—Ä–∞—Ñ —Å—Ü–µ–Ω–∞—Ä–∏—è
        """
        scenario_id = scenario.get("scenario_id", "unknown")
        name = scenario.get("name", scenario_id)
        steps = scenario.get("steps", {})
        
        self.logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –≤ –≥—Ä–∞—Ñ")
        
        graph = ScenarioGraph(
            scenario_id=scenario_id,
            name=name
        )
        
        # –°–æ–∑–¥–∞—ë–º —É–∑–ª—ã –∏–∑ —à–∞–≥–æ–≤
        for step_id, step_data in steps.items():
            node = self._create_node_from_step(step_id, step_data)
            graph.nodes[step_id] = node
            
        # –°–æ–∑–¥–∞—ë–º —Ä—ë–±—Ä–∞ –∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        for step_id, step_data in steps.items():
            edges = self._create_edges_from_step(step_id, step_data)
            graph.edges.extend(edges)
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        self._analyze_graph(graph)
        
        self.logger.info(f"‚úÖ –ì—Ä–∞—Ñ —Å–æ–∑–¥–∞–Ω: {len(graph.nodes)} —É–∑–ª–æ–≤, {len(graph.edges)} —Ä—ë–±–µ—Ä")
        return graph
    
    def _create_node_from_step(self, step_id: str, step_data: Dict[str, Any]) -> GraphNode:
        """–°–æ–∑–¥–∞—ë—Ç —É–∑–µ–ª –≥—Ä–∞—Ñ–∞ –∏–∑ —à–∞–≥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        step_type = step_data.get("type", "action")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–∑–ª–∞
        if step_type == "start":
            node_type = NodeType.START
            style = NodeStyle.SUCCESS
        elif step_type == "end":
            node_type = NodeType.END  
            style = NodeStyle.ERROR
        elif step_type in ["input", "input_text", "input_button"]:
            node_type = NodeType.INPUT
            style = NodeStyle.WARNING
        elif step_type in ["conditional_execute", "branch"]:
            node_type = NodeType.CONDITION
            style = NodeStyle.WARNING
        elif step_type == "switch_scenario":
            node_type = NodeType.SWITCH_SCENARIO
            style = NodeStyle.PREMIUM
        elif step_type == "llm_query":
            node_type = NodeType.LLM_CALL
            style = NodeStyle.PREMIUM
        else:
            node_type = NodeType.ACTION
            style = NodeStyle.DEFAULT
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ç—è—á—å–∏ –¥–µ–π—Å—Ç–≤–∏—è! üê±
        params = step_data.get("params", {})
        if "kitten" in str(params).lower() or "–∫–æ—Ç—ë–Ω–æ–∫" in str(params).lower():
            node_type = NodeType.KITTEN_ACTION
            style = NodeStyle.KITTEN
            
        # –°–æ–∑–¥–∞—ë–º —É–∑–µ–ª
        label = step_data.get("text", step_data.get("description", step_id))
        if len(label) > 50:
            label = label[:47] + "..."
            
        return GraphNode(
            id=step_id,
            type=node_type,
            label=label,
            description=step_data.get("description", ""),
            style=style,
            metadata=step_data
        )
    
    def _create_edges_from_step(self, step_id: str, step_data: Dict[str, Any]) -> List[GraphEdge]:
        """–°–æ–∑–¥–∞—ë—Ç —Ä—ë–±—Ä–∞ –∏–∑ —à–∞–≥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        edges = []
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ—Ö–æ–¥ next_step
        next_step = step_data.get("next_step")
        if next_step:
            edges.append(GraphEdge(
                from_node=step_id,
                to_node=next_step,
                label="–¥–∞–ª–µ–µ"
            ))
        
        # –£—Å–ª–æ–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
        if step_data.get("type") == "branch":
            branches = step_data.get("params", {}).get("branches", [])
            for branch in branches:
                condition = branch.get("condition", "")
                target = branch.get("next_step", "")
                if target:
                    edges.append(GraphEdge(
                        from_node=step_id,
                        to_node=target,
                        label=condition,
                        condition=condition,
                        style="dashed"
                    ))
        
        # –ö–Ω–æ–ø–∫–∏ –∏ –≤—ã–±–æ—Ä—ã
        choices = step_data.get("choices", {})
        for choice_id, choice_data in choices.items():
            target = choice_data.get("next_step", "")
            if target:
                edges.append(GraphEdge(
                    from_node=step_id,
                    to_node=target,
                    label=choice_data.get("text", choice_id)
                ))
                
        return edges
    
    def _analyze_graph(self, graph: ScenarioGraph):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"""
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        complexity = len(graph.nodes) + len(graph.edges)
        if complexity > 20:
            graph.complexity_score = 8
        elif complexity > 10:
            graph.complexity_score = 5
        else:
            graph.complexity_score = 2
            
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∫–æ–º–∞–Ω–¥—É –∫–æ—Ç—è—Ç
        kitten_actions = sum(1 for node in graph.nodes.values() 
                           if node.type == NodeType.KITTEN_ACTION)
        
        if kitten_actions > 0 or graph.complexity_score > 6:
            graph.recommended_team = ["Nova", "Artemis", "Cypher"]
        elif graph.complexity_score > 3:
            graph.recommended_team = ["Nova", "Sherlock"]
        else:
            graph.recommended_team = ["Nova"]
            
        self.logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∞: —Å–ª–æ–∂–Ω–æ—Å—Ç—å {graph.complexity_score}, –∫–æ–º–∞–Ω–¥–∞ {graph.recommended_team}")
    
    def analyze_scenario_graph(self, nodes: List[GraphNode], edges: List = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if edges is None:
            edges = []
        
        analysis = {
            "node_count": len(nodes),
            "edge_count": len(edges),
            "complexity_score": 0,
            "node_types": {},
            "has_loops": False,
            "max_depth": 0
        }
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤
        for node in nodes:
            node_type = node.type.value if hasattr(node.type, 'value') else str(node.type)
            if node_type not in analysis["node_types"]:
                analysis["node_types"][node_type] = 0
            analysis["node_types"][node_type] += 1
        
        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        analysis["complexity_score"] = min(len(nodes) * 0.1, 1.0)
        
        return analysis


class WorkflowPlanner:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    
    def create_workflow_from_subtasks(self, subtasks: List[Dict], agents: Dict) -> WorkflowGraph:
        """–°–æ–∑–¥–∞—ë—Ç –≥—Ä–∞—Ñ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑ –ø–æ–¥–∑–∞–¥–∞—á"""
        workflow_id = f"workflow_{int(datetime.now().timestamp())}"
        graph = WorkflowGraph(workflow_id)
        
        # –°–æ–∑–¥–∞—ë–º —É–∑–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–∑–∞–¥–∞—á–∏
        for i, subtask in enumerate(subtasks):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
            agent_id = list(agents.keys())[i % len(agents)] if agents else f"agent_{i}"
            
            node = WorkflowNode(
                id=subtask["id"],
                title=subtask.get("type", "task").title(),
                description=subtask["description"],
                assigned_agent=agent_id,
                dependencies=[]
            )
            
            # –î–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π
            if i > 0:
                prev_id = subtasks[i-1]["id"]
                node.dependencies = [prev_id]
            
            graph.add_node(node)
        
        # –°–æ–∑–¥–∞—ë–º —Ä—ë–±—Ä–∞ –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
        for i in range(1, len(subtasks)):
            graph.add_edge(subtasks[i-1]["id"], subtasks[i]["id"])
        
        return graph


# === –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ===

def demo_graph_visualization():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Graph Visualization Engine"""
    engine = GraphVisualizationEngine()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    test_scenario = {
        "scenario_id": "demo_graph",
        "name": "–î–µ–º–æ –≥—Ä–∞—Ñ —Å –∫–æ—Ç—è—Ç–∞–º–∏",
        "steps": {
            "start": {
                "type": "start",
                "text": "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                "next_step": "choose_kitten"
            },
            "choose_kitten": {
                "type": "input_button",
                "text": "üê± –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ç—ë–Ω–∫–∞:",
                "choices": {
                    "nova": {"text": "Nova - –ê–Ω–∞–ª–∏—Ç–∏–∫", "next_step": "nova_action"},
                    "artemis": {"text": "Artemis - –ö—Ä–µ–∞—Ç–∏–≤—â–∏–∫", "next_step": "artemis_action"}
                }
            },
            "nova_action": {
                "type": "kitten_action",
                "text": "üß† Nova –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ...",
                "params": {"kitten": "Nova", "action": "analyze"},
                "next_step": "result"
            },
            "artemis_action": {
                "type": "kitten_action", 
                "text": "üé® Artemis —Å–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ç–µ–Ω—Ç...",
                "params": {"kitten": "Artemis", "action": "create"},
                "next_step": "result"
            },
            "result": {
                "type": "end",
                "text": "‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
            }
        }
    }
    
    print("üß™ –î–µ–º–æ Graph Visualization Engine:")
    print(f"üìä –°—Ü–µ–Ω–∞—Ä–∏–π: {test_scenario['name']}")
    print()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞—Ñ
    graph = engine.scenario_to_graph(test_scenario)
    
    print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
    print(f"   –£–∑–ª–æ–≤: {len(graph.nodes)}")
    print(f"   –†—ë–±–µ—Ä: {len(graph.edges)}")
    print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {graph.complexity_score}/10")
    print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞: {', '.join(graph.recommended_team)}")
    print()
    
    print("üîç –£–∑–ª—ã –≥—Ä–∞—Ñ–∞:")
    for node_id, node in graph.nodes.items():
        print(f"   {node_id}: {node.type.value} ({node.style.value}) - {node.label}")
        
    print()
    print("üîó –†—ë–±—Ä–∞ –≥—Ä–∞—Ñ–∞:")
    for edge in graph.edges:
        print(f"   {edge.from_node} ‚Üí {edge.to_node}: {edge.label}")
    
    print()
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: Graph Visualization Engine –≥–æ—Ç–æ–≤!")
    print("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ—Ç—è—á—å–∏—Ö —É–∑–ª–æ–≤")
    print("   ‚úÖ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
    print("   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥")
    print("   üöÄ –ì–æ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Mermaid –¥–∏–∞–≥—Ä–∞–º–º!")


if __name__ == "__main__":
    demo_graph_visualization() 