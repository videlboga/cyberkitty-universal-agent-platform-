#!/usr/bin/env python3
"""
ü§ñ –°–û–ó–î–ê–ù–ò–ï –ö–ê–ù–ê–õ–ê ONTOBOT –ò –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–û–ì–û –ë–û–¢–ê
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ —Å —Ç–æ–∫–µ–Ω–æ–º 7907324843:AAFjN2H4ud2X6rm7XShrmS3G1l1JnCo4feM
–∏ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è mr_ontobot_main_router
"""

import asyncio
import json
import aiohttp
from datetime import datetime
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("logs/ontobot_channel.log", 
          format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | ONTOBOT | {message}",
          level="INFO", rotation="10 MB", compression="zip")

class OntoBotChannelCreator:
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–∞–ª OntoBot –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –±–æ—Ç."""
    
    def __init__(self):
        self.kittycore_url = "http://localhost:8085"
        self.bot_token = "7907324843:AAFjN2H4ud2X6rm7XShrmS3G1l1JnCo4feM"
        self.channel_id = "ontobot_main"
        self.scenario_id = "mr_ontobot_main_router"
        
        logger.info("ü§ñ OntoBot Channel Creator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def check_kittycore_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å KittyCore API."""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.kittycore_url}/health") as response:
                    if response.status == 200:
                        logger.info("‚úÖ KittyCore API –¥–æ—Å—Ç—É–ø–µ–Ω")
                        return True
                    else:
                        logger.error(f"‚ùå KittyCore API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KittyCore: {e}")
            return False
    
    async def check_bot_token(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞."""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"https://api.telegram.org/bot{self.bot_token}/getMe"
                async with session.get(url) as response:
                    result = await response.json()
                    
                    if result.get("ok"):
                        bot_info = result["result"]
                        logger.info(f"‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @{bot_info.get('username')} ({bot_info.get('first_name')})")
                        return {"success": True, "bot_info": bot_info}
                    else:
                        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: {result.get('description')}")
                        return {"success": False, "error": result.get('description')}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return {"success": False, "error": str(e)}
    
    async def create_channel(self) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–∞–ª OntoBot –≤ KittyCore."""
        try:
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
            channel_data = {
                "step": {
                    "type": "mongo_create_channel_mapping",
                    "params": {
                        "channel_id": self.channel_id,
                        "scenario_id": self.scenario_id,
                        "channel_type": "telegram",
                        "channel_config": {
                            "bot_token": self.bot_token,
                            "description": "OntoBot - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º—ã—Å–ª–µ–≤–∏—Ä—É—Å–æ–≤",
                            "created_by": "create_ontobot_channel.py"
                        },
                        "output_var": "channel_result"
                    }
                },
                "context": {
                    "created_at": datetime.now().isoformat(),
                    "creator": "ontobot_setup"
                }
            }
            
            async with aiohttp.ClientSession() as session:
                url = f"{self.kittycore_url}/api/v1/simple/execute"
                async with session.post(url, json=channel_data) as response:
                    result = await response.json()
                    
                    if result.get("success"):
                        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {self.channel_id} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                        return {"success": True, "result": result}
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {result.get('error')}")
                        return {"success": False, "error": result.get('error')}
                        
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            return {"success": False, "error": str(e)}
    
    async def check_scenario_exists(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ –ë–î."""
        try:
            find_data = {
                "collection": "scenarios",
                "filter": {"scenario_id": self.scenario_id}
            }
            
            async with aiohttp.ClientSession() as session:
                url = f"{self.kittycore_url}/api/v1/simple/mongo/find"
                async with session.post(url, json=find_data) as response:
                    result = await response.json()
                    
                    if result.get("success") and result.get("data"):
                        logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {self.scenario_id} –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π {self.scenario_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
            return False
    
    async def start_user_scenario(self, user_id: str, chat_id: str, first_name: str = "–¢–µ—Å—Ç–µ—Ä") -> dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π."""
        try:
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
            scenario_data = {
                "scenario_id": self.scenario_id,
                "context": {
                    "user_id": user_id,
                    "chat_id": chat_id,
                    "telegram_user_id": int(user_id),
                    "telegram_chat_id": int(chat_id),
                    "telegram_first_name": first_name,
                    "telegram_username": f"user_{user_id}",
                    "current_timestamp": datetime.now().isoformat(),
                    "test_mode": False,
                    "real_bot": True
                }
            }
            
            async with aiohttp.ClientSession() as session:
                url = f"{self.kittycore_url}/api/v1/simple/channels/{self.channel_id}/execute"
                async with session.post(url, json=scenario_data) as response:
                    result = await response.json()
                    
                    if result.get("success"):
                        logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        return {"success": True, "result": result}
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: {result.get('error')}")
                        return {"success": False, "error": result.get('error')}
                        
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
            return {"success": False, "error": str(e)}
    
    async def get_channel_info(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ."""
        try:
            find_data = {
                "collection": "channel_mappings",
                "filter": {"channel_id": self.channel_id}
            }
            
            async with aiohttp.ClientSession() as session:
                url = f"{self.kittycore_url}/api/v1/simple/mongo/find"
                async with session.post(url, json=find_data) as response:
                    result = await response.json()
                    
                    if result.get("success") and result.get("data"):
                        channel_info = result["data"][0]
                        logger.info(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ –ø–æ–ª—É—á–µ–Ω–∞")
                        return {"success": True, "channel": channel_info}
                    else:
                        logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {self.channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return {"success": False, "error": "Channel not found"}
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
            return {"success": False, "error": str(e)}
    
    async def send_test_message(self, chat_id: str, text: str = "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç OntoBot") -> dict:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API."""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
                data = {
                    "chat_id": chat_id,
                    "text": text,
                    "parse_mode": "HTML"
                }
                
                async with session.post(url, json=data) as response:
                    result = await response.json()
                    
                    if result.get("ok"):
                        message_id = result["result"]["message_id"]
                        logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ID {message_id}")
                        return {"success": True, "message_id": message_id}
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('description')}")
                        return {"success": False, "error": result.get('description')}
                        
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {"success": False, "error": str(e)}

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    
    print("ü§ñ –°–û–ó–î–ê–ù–ò–ï –ö–ê–ù–ê–õ–ê ONTOBOT –ò –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–û–ì–û –ë–û–¢–ê")
    print("="*60)
    
    creator = OntoBotChannelCreator()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å KittyCore
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ KittyCore API...")
    if not await creator.check_kittycore_health():
        print("‚ùå KittyCore –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8085")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    print("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...")
    bot_check = await creator.check_bot_token()
    if not bot_check["success"]:
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞: {bot_check['error']}")
        return
    
    bot_info = bot_check["bot_info"]
    print(f"‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @{bot_info.get('username')} ({bot_info.get('first_name')})")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
    print(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è {creator.scenario_id}...")
    if not await creator.check_scenario_exists():
        print("‚ö†Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ load_scenarios.py –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
        load_choice = input("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è? (y/n): ").strip().lower()
        if load_choice != 'y':
            return
    
    # 4. –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª
    print(f"\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ {creator.channel_id}...")
    channel_result = await creator.create_channel()
    if not channel_result["success"]:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {channel_result['error']}")
        return
    
    # 5. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ...")
    channel_info = await creator.get_channel_info()
    if channel_info["success"]:
        channel = channel_info["channel"]
        print(f"‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω:")
        print(f"   - ID: {channel.get('channel_id')}")
        print(f"   - –¢–∏–ø: {channel.get('channel_type')}")
        print(f"   - –°—Ü–µ–Ω–∞—Ä–∏–π: {channel.get('scenario_id')}")
        print(f"   - –°–æ–∑–¥–∞–Ω: {channel.get('created_at')}")
    
    # 6. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\nüë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    user_id = input("–í–≤–µ–¥–∏—Ç–µ user_id (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è 123456789): ").strip() or "123456789"
    chat_id = input("–í–≤–µ–¥–∏—Ç–µ chat_id (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Ç–æ–≥–æ –∂–µ ID): ").strip() or user_id
    first_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è '–¢–µ—Å—Ç–µ—Ä'): ").strip() or "–¢–µ—Å—Ç–µ—Ä"
    
    # 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}...")
    test_msg = await creator.send_test_message(chat_id, f"ü§ñ –ü—Ä–∏–≤–µ—Ç, {first_name}! OntoBot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    if test_msg["success"]:
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: {test_msg['message_id']})")
    else:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {test_msg['error']}")
        print("–í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –∏–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # 8. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
    scenario_result = await creator.start_user_scenario(user_id, chat_id, first_name)
    
    if scenario_result["success"]:
        result = scenario_result["result"]
        print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   - –°—Ü–µ–Ω–∞—Ä–∏–π: {result.get('scenario_id')}")
        print(f"   - –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {len(str(result.get('final_context', {})))} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        final_context = result.get('final_context', {})
        if final_context:
            print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:")
            for key, value in final_context.items():
                if isinstance(value, str) and len(value) > 100:
                    print(f"   - {key}: {value[:100]}...")
                else:
                    print(f"   - {key}: {value}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario_result['error']}")
    
    # 9. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        "timestamp": datetime.now().isoformat(),
        "bot_info": bot_info,
        "channel_info": channel_info.get("channel") if channel_info["success"] else None,
        "test_message": test_msg,
        "scenario_result": scenario_result,
        "user_data": {
            "user_id": user_id,
            "chat_id": chat_id,
            "first_name": first_name
        }
    }
    
    with open("logs/ontobot_channel_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ logs/ontobot_channel_results.json")
    
    # 10. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"\nüéØ –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @{bot_info.get('username')}")
    print(f"2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    print(f"3. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º—ã—Å–ª–µ–≤–∏—Ä—É—Å–æ–≤")
    print(f"4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:")
    print(f"   - Channel ID: {creator.channel_id}")
    print(f"   - Scenario ID: {creator.scenario_id}")
    print(f"   - Bot Token: {creator.bot_token[:20]}...")
    
    print(f"\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! OntoBot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ")

if __name__ == "__main__":
    asyncio.run(main()) 