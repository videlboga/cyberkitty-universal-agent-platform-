"""
üß† IntellectualAgent - –ê–≥–µ–Ω—Ç —Å LLM-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º

–ê–≥–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è:
- –ê–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –í—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
- –°–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- –ü—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã
"""

import asyncio
import json
from typing import Dict, Any, List
from ..tools.real_tools import REAL_TOOLS
from ..llm import get_llm_provider, LLMProvider

class IntellectualAgent:
    """üß† –ê–≥–µ–Ω—Ç —Å LLM-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º"""
    
    def __init__(self, role: str, subtask: Dict[str, Any]):
        self.role = role
        self.subtask = subtask
        self.tools = REAL_TOOLS
        self.llm = get_llm_provider()
        self.results = []
        
    async def execute_task(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª—å–∑—É—è LLM-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"""
        task_description = self.subtask.get("description", "")
        
        print(f"üß† {self.role} –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É: {task_description}")
        
        try:
            # –§–ê–ó–ê 1: LLM –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            analysis = await self._analyze_task_with_llm(task_description)
            
            # –§–ê–ó–ê 2: LLM —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_plan = await self._create_execution_plan(task_description, analysis)
            
            # –§–ê–ó–ê 3: –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            result = await self._execute_plan(execution_plan, task_description)
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ IntellectualAgent: {e}")
            return {
                "status": "failed",
                "error": str(e)
            }
    
    async def _analyze_task_with_llm(self, task_description: str) -> Dict[str, Any]:
        """LLM –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è LLM
        available_tools = {
            "file_manager": "–°–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤",
            "code_generator": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ HTML —Å—Ç—Ä–∞–Ω–∏—Ü",
            "web_client": "HTTP –∑–∞–ø—Ä–æ—Å—ã, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–∞–π—Ç–æ–≤",
            "system_tools": "–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥"
        }
        
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –∏ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

–ó–ê–î–ê–ß–ê: "{task_description}"

–î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
{json.dumps(available_tools, ensure_ascii=False, indent=2)}

–í–µ—Ä–Ω–∏ JSON –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "task_type": "creation/analysis/web_check/calculation/other",
    "intent": "—á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å",
    "chosen_tools": ["—Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"],
    "reasoning": "–ø–æ—á–µ–º—É –≤—ã–±—Ä–∞–Ω—ã –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
    "expected_outputs": ["—á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ/–ø–æ–ª—É—á–µ–Ω–æ"]
}}

–í–ê–ñ–ù–û: 
- –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "—Å–æ–∑–¥–∞–π —Å–∞–π—Ç/–≤–µ–±/html" - —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π "code_generator" –∏ "file_manager"
- –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "–ø—Ä–æ–≤–µ—Ä—å —Å–∞–π—Ç" - –∏—Å–ø–æ–ª—å–∑—É–π "web_client"  
- –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Ä–∞—Å—á–µ—Ç—ã/–∞–Ω–∞–ª–∏–∑ - —Å–æ–∑–¥–∞–≤–∞–π —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π "web_client" –¥–ª—è –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–∏—è!
"""
        
        try:
            response = self.llm.complete(prompt)
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            if "```json" in response:
                json_start = response.find("```json") + 7
                json_end = response.find("```", json_start)
                json_str = response[json_start:json_end].strip()
            else:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
                start = response.find("{")
                end = response.rfind("}") + 1
                json_str = response[start:end]
            
            analysis = json.loads(json_str)
            print(f"üéØ LLM –∞–Ω–∞–ª–∏–∑: {analysis['intent']}")
            print(f"üîß –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {analysis['chosen_tools']}")
            
            return analysis
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}")
            # Fallback –∞–Ω–∞–ª–∏–∑
            return self._fallback_analysis(task_description)
    
    def _fallback_analysis(self, task_description: str) -> Dict[str, Any]:
        """Fallback –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        task_lower = task_description.lower()
        
        if any(word in task_lower for word in ["—Å–∞–π—Ç", "html", "–≤–µ–±"]) and any(word in task_lower for word in ["—Å–æ–∑–¥–∞–π", "—Å–¥–µ–ª–∞–π"]):
            return {
                "task_type": "creation",
                "intent": "—Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞",
                "chosen_tools": ["code_generator", "file_manager"],
                "reasoning": "fallback: –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞",
                "expected_outputs": ["HTML —Ñ–∞–π–ª—ã"]
            }
        elif "–ø–ª–∞–Ω" in task_lower:
            return {
                "task_type": "creation", 
                "intent": "—Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞",
                "chosen_tools": ["file_manager"],
                "reasoning": "fallback: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞",
                "expected_outputs": ["—Ñ–∞–π–ª —Å –ø–ª–∞–Ω–æ–º"]
            }
        else:
            return {
                "task_type": "analysis",
                "intent": "–∞–Ω–∞–ª–∏–∑ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞",
                "chosen_tools": ["file_manager"],
                "reasoning": "fallback: –æ–±—â–∞—è –∑–∞–¥–∞—á–∞",
                "expected_outputs": ["–æ—Ç—á–µ—Ç"]
            }
    
    async def _create_execution_plan(self, task_description: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """LLM —Å–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        
        prompt = f"""
–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.

–ó–ê–î–ê–ß–ê: "{task_description}"
–ê–ù–ê–õ–ò–ó: {json.dumps(analysis, ensure_ascii=False)}

–°–æ–∑–¥–∞–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "steps": [
        {{
            "step": 1,
            "action": "—á—Ç–æ –¥–µ–ª–∞—Ç—å",
            "tool": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
            "params": {{
                "filename": "–∏–º—è —Ñ–∞–π–ª–∞",
                "content": "—á—Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª",
                "title": "–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
            }}
        }}
    ]
}}

–ü–†–ò–ú–ï–†–´:
- –î–ª—è —Å–∞–π—Ç–∞ —Å –∫–æ—Ç—è—Ç–∞–º–∏: —Å–æ–∑–¥–∞–π index.html —Å –∫–æ—Ç—è—á—å–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º + styles.css
- –î–ª—è –ø–ª–∞–Ω–∞: —Å–æ–∑–¥–∞–π –ø–ª–∞–Ω.txt —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏
- –î–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤: —Å–æ–∑–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.txt —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ —á–∏—Å–ª–∞–º–∏

–í–ê–ñ–ù–û: –§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –†–ï–õ–ï–í–ê–ù–¢–ù–´–ô –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç–µ–º–µ –∑–∞–¥–∞—á–∏!
"""
        
        try:
            response = self.llm.complete(prompt)
            
            # –ü–∞—Ä—Å–∏–º –ø–ª–∞–Ω
            if "```json" in response:
                json_start = response.find("```json") + 7
                json_end = response.find("```", json_start)
                json_str = response[json_start:json_end].strip()
            else:
                start = response.find("{")
                end = response.rfind("}") + 1
                json_str = response[start:end]
                
            plan = json.loads(json_str)
            return plan
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω: {e}")
            return self._create_simple_plan(task_description, analysis)
    
    def _create_simple_plan(self, task_description: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ —Å–æ–∑–¥–∞—ë–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞–Ω
        task_lower = task_description.lower()
        
        if "python" in task_lower and ("—Å–∫—Ä–∏–ø—Ç" in task_lower or "–∫–æ–¥" in task_lower):
            # Python –∫–æ–¥
            if "—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª" in task_lower:
                return {
                    "steps": [
                        {
                            "step": 1,
                            "action": "–°–æ–∑–¥–∞—Ç—å Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞",
                            "tool": "code_generator",
                            "params": {
                                "filename": "factorial.py",
                                "content": """def factorial(n):
    \"\"\"–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ n\"\"\"
    if n < 0:
        return None  # –§–∞–∫—Ç–æ—Ä–∏–∞–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
    elif n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

def main():
    try:
        num = int(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞: "))
        if num < 0:
            print("–û—à–∏–±–∫–∞: –§–∞–∫—Ç–æ—Ä–∏–∞–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª")
        else:
            result = factorial(num)
            print(f"–§–∞–∫—Ç–æ—Ä–∏–∞–ª {num} = {result}")
    except ValueError:
        print("–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")

if __name__ == "__main__":
    main()""",
                                "language": "python",
                                "title": "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞"
                            }
                        }
                    ]
                }
            elif "—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫" in task_lower and "–±—ã—Å—Ç—Ä" in task_lower:
                return {
                    "steps": [
                        {
                            "step": 1,
                            "action": "–°–æ–∑–¥–∞—Ç—å Python —Å–∫—Ä–∏–ø—Ç —Å –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π",
                            "tool": "code_generator", 
                            "params": {
                                "filename": "quicksort.py",
                                "content": """def quicksort(arr):
    \"\"\"–ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞\"\"\"
    if len(arr) <= 1:
        return arr
    
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    
    return quicksort(left) + middle + quicksort(right)

def main():
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    test_array = [64, 34, 25, 12, 22, 11, 90]
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: {test_array}")
    
    sorted_array = quicksort(test_array.copy())
    print(f"–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: {sorted_array}")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥
    try:
        user_input = input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ")
        user_array = [int(x) for x in user_input.split()]
        sorted_user = quicksort(user_array)
        print(f"–í–∞—à –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: {sorted_user}")
    except ValueError:
        print("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")

if __name__ == "__main__":
    main()""",
                                "language": "python",
                                "title": "–ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"
                            }
                        }
                    ]
                }
            else:
                # –û–±—â–∏–π Python —Å–∫—Ä–∏–ø—Ç
                return {
                    "steps": [
                        {
                            "step": 1,
                            "action": "–°–æ–∑–¥–∞—Ç—å Python —Å–∫—Ä–∏–ø—Ç",
                            "tool": "code_generator",
                            "params": {
                                "filename": "script.py",
                                "content": f"""# {task_description}

def main():
    print("–°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–¥–∞—á–∏: {task_description}")
    # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –≤–∞—à—É –ª–æ–≥–∏–∫—É

if __name__ == "__main__":
    main()""",
                                "language": "python",
                                "title": "Python —Å–∫—Ä–∏–ø—Ç"
                            }
                        }
                    ]
                }
        
        elif "html" in task_lower or "–≤–µ–±" in task_lower or "—Å—Ç—Ä–∞–Ω–∏—Ü" in task_lower:
            # HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü" in task_lower or "—Ñ–æ—Ä–º" in task_lower:
                return {
                    "steps": [
                        {
                            "step": 1,
                            "action": "–°–æ–∑–¥–∞—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                            "tool": "code_generator",
                            "params": {
                                "filename": "registration.html",
                                "content": """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .form-container { max-width: 400px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; text-align: center; }
        .form-group { margin-bottom: 20px; }
        label { display: block; margin-bottom: 5px; color: #555; }
        input { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 16px; }
        button { width: 100%; padding: 12px; background: #007bff; color: white; border: none; border-radius: 4px; font-size: 16px; cursor: pointer; }
        button:hover { background: #0056b3; }
    </style>
</head>
<body>
    <div class="form-container">
        <h1>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h1>
        <form action="#" method="post">
            <div class="form-group">
                <label for="name">–ò–º—è:</label>
                <input type="text" id="name" name="name" required>
            </div>
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" name="email" required>
            </div>
            <div class="form-group">
                <label for="password">–ü–∞—Ä–æ–ª—å:</label>
                <input type="password" id="password" name="password" required>
            </div>
            <button type="submit">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
        </form>
    </div>
</body>
</html>""",
                                "language": "html",
                                "title": "–§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                            }
                        }
                    ]
                }
            else:
                # –û–±—â–∞—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                return {
                    "steps": [
                        {
                            "step": 1,
                            "action": "–°–æ–∑–¥–∞—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É",
                            "tool": "code_generator",
                            "params": {
                                "filename": "page.html",
                                "content": f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        .header {{ color: #333; border-bottom: 2px solid #eee; }}
        .content {{ margin-top: 20px; line-height: 1.6; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞</h1>
    </div>
    <div class="content">
        <p>–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏: {task_description}</p>
    </div>
</body>
</html>""",
                                "language": "html",
                                "title": "–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞"
                            }
                        }
                    ]
                }
        
        elif "json" in task_lower and "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü" in task_lower:
            # JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            return {
                "steps": [
                    {
                        "step": 1,
                        "action": "–°–æ–∑–¥–∞—Ç—å JSON —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                        "tool": "file_manager",
                        "params": {
                            "filename": "config.json",
                            "content": """{
    "server": {
        "host": "localhost",
        "port": 8080,
        "ssl": false
    },
    "logging": {
        "level": "info",
        "file": "server.log",
        "max_size": "10MB",
        "rotate": true
    },
    "database": {
        "type": "sqlite",
        "path": "data.db"
    },
    "features": {
        "debug": false,
        "cors": true,
        "rate_limiting": true
    }
}"""
                        }
                    }
                ]
            }
        
        elif "readme" in task_lower:
            # README —Ñ–∞–π–ª
            return {
                "steps": [
                    {
                        "step": 1,
                        "action": "–°–æ–∑–¥–∞—Ç—å README.md —Ñ–∞–π–ª",
                        "tool": "file_manager",
                        "params": {
                            "filename": "README.md",
                            "content": """# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä

–ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.

## –û–ø–∏—Å–∞–Ω–∏–µ

–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞

1. –ö–ª–æ–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:
   ```bash
   git clone https://github.com/username/calculator.git
   cd calculator
   ```

2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
   ```bash
   pip install -r requirements.txt
   ```

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

### –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
```python
from calculator import Calculator

calc = Calculator()
result = calc.add(5, 3)
print(f"5 + 3 = {result}")
```

### –ü—Ä–∏–º–µ—Ä 2: –°–ª–æ–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
```python
result = calc.multiply(calc.add(2, 3), 4)
print(f"(2 + 3) * 4 = {result}")
```

## –§—É–Ω–∫—Ü–∏–∏

- ‚úÖ –°–ª–æ–∂–µ–Ω–∏–µ
- ‚úÖ –í—ã—á–∏—Ç–∞–Ω–∏–µ  
- ‚úÖ –£–º–Ω–æ–∂–µ–Ω–∏–µ
- ‚úÖ –î–µ–ª–µ–Ω–∏–µ
- ‚úÖ –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å

## –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è

- Python 3.7+
- NumPy (–¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π)

## –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License
"""
                        }
                    }
                ]
            }
        
        else:
            # –°–æ–∑–¥–∞—ë–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ –æ—Ç—á—ë—Ç–∞
            if "–ø–ª–æ—â–∞–¥" in task_lower and ("–∫—Ä—É–≥" in task_lower or "–∫–æ—Ç" in task_lower):
                return {
                    "steps": [
                        {
                            "step": 1,
                            "action": "–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å —Ä–∞—Å—á—ë—Ç–æ–º –ø–ª–æ—â–∞–¥–∏",
                            "tool": "file_manager",
                            "params": {
                                "filename": "area_calculation.py",
                                "content": """import math

def calculate_circle_area(radius):
    \"\"\"–†–∞—Å—á—ë—Ç –ø–ª–æ—â–∞–¥–∏ –∫—Ä—É–≥–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ A = œÄ * r¬≤\"\"\"
    return math.pi * radius ** 2

def calculate_cat_area(length, width):
    \"\"\"–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–ª–æ—â–∞–¥–∏ –∫–æ—Ç–∞ (–∫–∞–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞)\"\"\"
    return length * width

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ü–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞
    radius = 5
    circle_area = calculate_circle_area(radius)
    print(f"–ü–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Å —Ä–∞–¥–∏—É—Å–æ–º {radius} = {circle_area:.2f}")
    
    # –ü–ª–æ—â–∞–¥—å –∫–æ—Ç–∞ (—à—É—Ç–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç)
    cat_length = 0.5  # –º–µ—Ç—Ä—ã
    cat_width = 0.3   # –º–µ—Ç—Ä—ã
    cat_area = calculate_cat_area(cat_length, cat_width)
    print(f"–ü–ª–æ—â–∞–¥—å –∫–æ—Ç–∞ {cat_length}x{cat_width}–º = {cat_area:.2f} –º¬≤")
"""
                            }
                        }
                    ]
                }
            else:
                # –û–±—â–∏–π —Å–ª—É—á–∞–π - —Å–æ–∑–¥–∞—ë–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ñ–∞–π–ª
                return {
                    "steps": [
                        {
                            "step": 1,
                            "action": "–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
                            "tool": "file_manager",
                            "params": {
                                "filename": "result.txt",
                                "content": f"""–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {task_description}

–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º KittyCore 3.0.
–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {analysis.get('timestamp', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

–û–ø–∏—Å–∞–Ω–∏–µ: –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏.
"""
                            }
                        }
                    ]
                }
    
    async def _execute_plan(self, plan: Dict[str, Any], task_description: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        
        results = []
        created_files = []
        
        for step in plan.get("steps", []):
            step_num = step.get("step", 0)
            action = step.get("action", "")
            tool_name = step.get("tool", "")
            params = step.get("params", {})
            
            print(f"üìã –®–∞–≥ {step_num}: {action}")
            print(f"üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}, –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            
            try:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å LLM –≤—ã–≤–æ–¥–æ–º
                normalized_tool = tool_name.lower().replace(" ", "_").replace("-", "_")
                
                if normalized_tool in ["code_generator", "codegenerator"]:
                    result = await self._use_code_generator(params, task_description)
                elif normalized_tool in ["file_manager", "filemanager"]:
                    result = await self._use_file_manager(params, task_description)
                elif normalized_tool in ["web_client", "webclient"]:
                    result = await self._use_web_client(params)
                elif normalized_tool in ["system_tools", "systemtools"]:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π system_tools
                    result = await self._use_system_tools(params, task_description)
                else:
                    result = {"success": False, "error": f"Unknown tool: {tool_name}"}
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {result.get('success', False)}")
                if result.get("filename"):
                    print(f"üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {result['filename']}")
                if result.get("content"):
                    content_preview = result["content"][:100] + "..." if len(result["content"]) > 100 else result["content"]
                    print(f"üíé –ö–æ–Ω—Ç–µ–Ω—Ç: {content_preview}")
                
                if result.get("success"):
                    print(f"‚úÖ –®–∞–≥ {step_num} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    if result.get("filename"):
                        created_files.append(result["filename"])
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ {step_num}: {result.get('error')}")
                
                results.append(result)
                
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —à–∞–≥–µ {step_num}: {e}")
                results.append({"success": False, "error": str(e)})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        success_count = sum(1 for r in results if r.get("success"))
        
        print(f"üìä –ò—Ç–æ–≥–æ: {success_count}/{len(results)} —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        if success_count > 0:
            output = f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {success_count} –∏–∑ {len(results)} —à–∞–≥–æ–≤"
            if created_files:
                output += f". –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(created_files)}"
                print(f"üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {created_files}")
                
            return {
                "status": "completed",
                "output": output,
                "files_created": created_files,
                "step_results": results
            }
        else:
            return {
                "status": "failed", 
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞",
                "step_results": results
            }
    
    async def _use_code_generator(self, params: Dict[str, Any], task_description: str) -> Dict[str, Any]:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ code_generator"""
        filename = params.get("filename", f"generated_{id(self)}.html")
        title = params.get("title", "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞—á–∏
        if "–∫–æ—Ç—è—Ç" in task_description.lower() or "cat" in task_description.lower():
            content = f"""
            <div class="header">
                <h1>üê± {title}</h1>
                <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç –æ –∫–æ—Ç—è—Ç–∞—Ö!</p>
            </div>
            <div class="content">
                <h2>–ù–∞—à–∏ –º–∏–ª—ã–µ –∫–æ—Ç—è—Ç–∫–∏</h2>
                <p>–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å–∞–º—ã—Ö –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ç—è—Ç! üêæ</p>
                <ul>
                    <li>üê± –ü—É—à–∏—Å—Ç—ã–µ –∫–æ—Ç—è—Ç–∞</li>
                    <li>üêà –ò–≥—Ä–∏–≤—ã–µ –º–∞–ª—ã—à–∏</li>
                    <li>üò∫ –õ–∞—Å–∫–æ–≤—ã–µ –ø–∏—Ç–æ–º—Ü—ã</li>
                </ul>
                <p>–ö–æ—Ç—è—Ç–∞ –ø—Ä–∏–Ω–æ—Å—è—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ —É—é—Ç –≤ –Ω–∞—à –¥–æ–º!</p>
            </div>
            """
        else:
            content = f"<p>–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è: {task_description}</p>"
        
        return self.tools["code_generator"].generate_html_page(title, content, filename)
    
    async def _use_file_manager(self, params: Dict[str, Any], task_description: str) -> Dict[str, Any]:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ file_manager"""
        filename = params.get("filename", f"—Ñ–∞–π–ª_{id(self)}.txt")
        content = params.get("content", "")
        
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π
        if not content:
            if "–ø–ª–∞–Ω" in task_description.lower():
                content = f"""# –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞

## üåÖ –£—Ç—Ä–æ (8:00-12:00)
- ‚òï –ó–∞–≤—Ç—Ä–∞–∫ –∏ –∫–æ—Ñ–µ
- üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã
- üéØ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏

## üåû –î–µ–Ω—å (12:00-17:00)  
- üçΩÔ∏è –û–±–µ–¥
- üìû –í—Å—Ç—Ä–µ—á–∏ –∏ –∑–≤–æ–Ω–∫–∏
- üìù –î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç

## üåÜ –í–µ—á–µ—Ä (17:00-22:00)
- üè† –î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞
- üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í—Ä–µ–º—è —Å —Å–µ–º—å–µ–π
- üìö –ß—Ç–µ–Ω–∏–µ –∏ –æ—Ç–¥—ã—Ö

–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏: {task_description}
"""
            else:
                content = f"""# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã

–ó–∞–¥–∞—á–∞: {task_description}
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º: {self.role}

## –†–µ–∑—É–ª—å—Ç–∞—Ç
–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.
"""
        
        return self.tools["file_manager"].create_file(filename, content)
    
    async def _use_web_client(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ web_client"""
        url = params.get("url", "https://httpbin.org/status/200")
        return self.tools["web_client"].check_website(url)
    
    async def _use_system_tools(self, params: Dict[str, Any], task_description: str) -> Dict[str, Any]:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ system_tools"""
        try:
            from ..tools.system_tools import SystemTools
            system_tool = SystemTools()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            operation = params.get("operation", "run_command")
            command = params.get("command", "echo 'System tools working'")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            result = system_tool.execute(operation=operation, command=command)
            
            if result.success:
                return {
                    "success": True,
                    "filename": f"system_output_{id(self)}.txt",
                    "content": str(result.data),
                    "operation": operation
                }
            else:
                return {
                    "success": False,
                    "error": result.error
                }
                
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ system_tools: {str(e)}"
            } 