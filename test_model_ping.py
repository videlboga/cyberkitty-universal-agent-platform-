#!/usr/bin/env python3
"""
üöÄ –¢–ï–°–¢ –°–ö–û–†–û–°–¢–ò –ú–û–î–ï–õ–ï–ô - –Ω–∞–π–¥–µ–º —Å–∞–º—É—é –±—ã—Å—Ç—Ä—É—é

–¶–µ–ª—å: –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
"""

import time
import os
from typing import Dict, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["MAX_TOKENS"] = "50"  # –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
os.environ["TEMPERATURE"] = "0.1"
os.environ["TIMEOUT"] = "10"  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç

# –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TEST_MODELS = [
    # –ë—ã—Å—Ç—Ä—ã–µ –º–æ–¥–µ–ª–∏
    "deepseek/deepseek-chat",
    "google/gemini-2.0-flash-exp",
    "google/gemini-flash-1.5",
    "anthropic/claude-3-haiku",
    "meta-llama/llama-3.1-8b-instruct:free",
    "microsoft/phi-3-mini-128k-instruct:free",
    "huggingface/zephyr-7b-beta:free",
    "mistralai/mistral-7b-instruct:free",
    
    # Groq –º–æ–¥–µ–ª–∏ (–æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–µ)
    "groq/llama-3.1-8b-instant",
    "groq/gemma-7b-it",
    "groq/mixtral-8x7b-32768",
]

SIMPLE_PROMPT = "–°–∫–∞–∂–∏ '—Ç–µ—Å—Ç' –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º"

def test_model_speed(model_name: str) -> Dict:
    """üèÉ –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –º–æ–¥–µ–ª–∏"""
    
    print(f"   üîç –¢–µ—Å—Ç–∏—Ä—É—é {model_name}...")
    
    try:
        from kittycore.llm import get_llm_provider
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å –º–æ–¥–µ–ª—å—é
        llm = get_llm_provider(model=model_name)
        init_time = time.time() - start_time
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        request_start = time.time()
        response = llm.complete(SIMPLE_PROMPT)
        request_time = time.time() - request_start
        
        total_time = time.time() - start_time
        
        result = {
            'model': model_name,
            'success': True,
            'init_time': round(init_time, 2),
            'request_time': round(request_time, 2),
            'total_time': round(total_time, 2),
            'response_length': len(response),
            'response': response[:50],
            'error': None
        }
        
        print(f"   ‚úÖ {model_name}: {request_time:.2f}—Å (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {init_time:.2f}—Å)")
        return result
        
    except Exception as e:
        error_time = time.time() - start_time
        
        result = {
            'model': model_name,
            'success': False,
            'init_time': 0,
            'request_time': 999,
            'total_time': round(error_time, 2),
            'response_length': 0,
            'response': '',
            'error': str(e)
        }
        
        print(f"   ‚ùå {model_name}: –û–®–ò–ë–ö–ê - {str(e)[:100]}")
        return result

def ping_models():
    """üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏"""
    
    print("üöÄ" + "="*70)
    print("üöÄ –¢–ï–°–¢ –°–ö–û–†–û–°–¢–ò –ú–û–î–ï–õ–ï–ô")
    print("üöÄ" + "="*70)
    
    if not os.getenv("OPENROUTER_API_KEY"):
        print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    results = []
    
    for model in TEST_MODELS:
        result = test_model_speed(model)
        results.append(result)
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
    successful = [r for r in results if r['success']]
    failed = [r for r in results if not r['success']]
    
    successful.sort(key=lambda x: x['request_time'])
    
    print(f"\nüèÜ" + "="*70)
    print(f"üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏)")
    print(f"üèÜ" + "="*70)
    
    print(f"\n‚úÖ –†–ê–ë–û–ß–ò–ï –ú–û–î–ï–õ–ò ({len(successful)}):")
    for i, result in enumerate(successful[:10]):  # –¢–æ–ø 10
        speed_emoji = "üöÄ" if result['request_time'] < 2 else "‚ö°" if result['request_time'] < 5 else "üêå"
        print(f"{i+1:2d}. {speed_emoji} {result['model']:<40} {result['request_time']:>6.2f}—Å")
    
    if failed:
        print(f"\n‚ùå –ù–ï –†–ê–ë–û–¢–ê–Æ–¢ ({len(failed)}):")
        for result in failed:
            print(f"   üí• {result['model']:<40} {result['error'][:50]}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if successful:
        fastest = successful[0]
        print(f"\nüèÜ –°–ê–ú–ê–Ø –ë–´–°–¢–†–ê–Ø: {fastest['model']} ({fastest['request_time']:.2f}—Å)")
        
        # –¢–æ–ø 3 –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"   üöÄ –î–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful[0]['model']}")
        if len(successful) > 1:
            print(f"   ‚ö° –î–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {successful[1]['model']}")
        if len(successful) > 2:
            print(f"   üéØ –î–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏: {successful[2]['model']}")
    
    return results

if __name__ == "__main__":
    ping_models() 