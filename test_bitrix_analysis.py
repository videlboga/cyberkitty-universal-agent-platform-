#!/usr/bin/env python3
"""
üöÄ –¢–ï–°–¢ KITTYCORE 3.0 + A-MEM –ù–ê –†–ï–ê–õ–¨–ù–û–ô –ó–ê–î–ê–ß–ï
–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ë–∏—Ç—Ä–∏–∫—Å24 —Å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É—é—â–µ–π –ø–∞–º—è—Ç—å—é
"""

import asyncio
import sys
import time
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig
from loguru import logger

async def test_bitrix_market_analysis():
    """üß† –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24 —Å A-MEM"""
    print("üöÄ === –¢–ï–°–¢ KITTYCORE 3.0 + A-MEM –ù–ê –ê–ù–ê–õ–ò–ó–ï –ë–ò–¢–†–ò–ö–°24 ===")
    print("üß† –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É—é—â–∞—è –ø–∞–º—è—Ç—å –ø–æ–º–æ–≥–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö")
    
    start_time = time.time()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å A-MEM
    config = UnifiedConfig(
        orchestrator_id="bitrix_market_analyzer",
        enable_amem_memory=True,
        amem_memory_path="./vault/system/amem_bitrix",
        vault_path="./vault_bitrix_test",
        enable_shared_chat=True,
        enable_smart_validation=True,
        enable_vector_memory=False,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ A-MEM
        timeout=300
    )
    
    try:
        print("\nüéØ === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø UNIFIED ORCHESTRATOR ===")
        orchestrator = UnifiedOrchestrator(config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º A-MEM
        amem_type = type(orchestrator.amem_system.amem).__name__
        print(f"üß† A-MEM —Ç–∏–ø: {amem_type}")
        
        from kittycore.memory.amem_integration import AMEM_AVAILABLE
        print(f"üîç AMEM_AVAILABLE: {AMEM_AVAILABLE}")
        
        if amem_type == "SimpleAgenticMemory":
            print("‚ö†Ô∏è A-MEM –≤ fallback —Ä–µ–∂–∏–º–µ")
        else:
            print("‚úÖ A-MEM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–Ω–∞!")
        
        print("\nüìã === –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–î–ê–ß–ò –ê–ù–ê–õ–ò–ó–ê –ë–ò–¢–†–ò–ö–°24 ===")
        
        task = """–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∞ –±–∏—Ç—Ä–∏–∫—Å 24, –Ω–∞–π–¥–∏ —Ç–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö, —Å–æ—Å—Ç–∞–≤—å –æ—Ç—á—ë—Ç –æ —Ç–æ–º, –∫–∞–∫–∏–µ —Ç–∞–º –µ—Å—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ —Å–ª–æ–∂–Ω—ã –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–º–µ—é—Ç. –ü–æ—Å–ª–µ —Å–¥–µ–ª–∞–π 3 –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±—ã—Å—Ç—Ä–æ —Å —É–ª—É—á—à–µ–Ω–∏–µ–º UX"""
        
        print(f"üìù –ó–∞–¥–∞—á–∞: {task[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ –ø–∞–º—è—Ç–∏ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        print("\nüîç === –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –ü–ê–ú–Ø–¢–ò ===")
        
        try:
            existing_memories = await orchestrator.amem_system.search_memories("–±–∏—Ç—Ä–∏–∫—Å –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ–∫", limit=5)
            print(f"üíæ –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(existing_memories)}")
            
            for i, memory in enumerate(existing_memories[:2], 1):
                content_preview = memory.get('content', '')[:80].replace('\n', ' ')
                tags = memory.get('tags', [])
                print(f"   {i}. {content_preview}... (—Ç–µ–≥–∏: {', '.join(tags[:2])})")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
        print(f"\n‚ö° === –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–î–ê–ß–ò ===")
        result = await orchestrator.solve_task(task)
        
        execution_time = time.time() - start_time
        
        print(f"\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result.get('success', False)}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å")
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(result.get('created_files', []))}")
        print(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {result.get('quality_score', 'N/A')}")
        
        if result.get('created_files'):
            print(f"\nüìÅ === –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´ ===")
            for file_path in result.get('created_files', []):
                print(f"   üìÑ {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –≤ –ø–∞–º—è—Ç—å
        print(f"\nüß† === –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –í–û–°–ü–û–ú–ò–ù–ê–ù–ò–ô ===")
        
        try:
            all_memories = await orchestrator.amem_system.search_memories("–±–∏—Ç—Ä–∏–∫—Å –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", limit=10)
            new_memories_count = len(all_memories) - len(existing_memories)
            
            print(f"üíæ –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(all_memories)}")
            print(f"‚ú® –ù–æ–≤—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {new_memories_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if new_memories_count > 0:
                print(f"\nüÜï === –ü–û–°–õ–ï–î–ù–ò–ï –í–û–°–ü–û–ú–ò–ù–ê–ù–ò–Ø ===")
                for i, memory in enumerate(all_memories[:3], 1):
                    content_preview = memory.get('content', '')[:100].replace('\n', ' ')
                    tags = memory.get('tags', [])
                    print(f"   {i}. {content_preview}... (—Ç–µ–≥–∏: {', '.join(tags[:3])})")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
        print(f"\nüîç === –¢–ï–°–¢ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê ===")
        
        search_queries = [
            "–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–∏—Ç—Ä–∏–∫—Å24",
            "—Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ CRM", 
            "–ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–∏—Ç—Ä–∏–∫—Å",
            "–ø—Ä–æ—Ç–æ—Ç–∏–ø—ã —É–ª—É—á—à–µ–Ω–∏—è UX",
            "–±—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
        ]
        
        search_results = {}
        total_found = 0
        
        for query in search_queries:
            try:
                results = await orchestrator.amem_system.search_memories(query, limit=3)
                found_count = len(results)
                search_results[query] = found_count
                total_found += found_count
                
                print(f"   üîç '{query}': {found_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                if results:
                    best = results[0]
                    content_preview = best.get('content', '')[:60].replace('\n', ' ')
                    print(f"      ‚ú® –õ—É—á—à–∏–π: {content_preview}...")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ '{query}': {e}")
                search_results[query] = 0
        
        avg_search_effectiveness = total_found / len(search_queries)
        
        print(f"\nüìà === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {execution_time:.2f}—Å")
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result.get('success', False)}")
        print(f"üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(result.get('created_files', []))}")
        print(f"üíæ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: {len(all_memories) if 'all_memories' in locals() else 'N/A'}")
        print(f"üîç –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞: {avg_search_effectiveness:.1f}")
        print(f"üß† A-MEM —Ä–µ–∂–∏–º: {'Offline ChromaDB' if amem_type == 'AgenticMemorySystem' else 'Fallback'}")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        if result.get('success') and len(result.get('created_files', [])) >= 3:
            print(f"\nüéâ === –¢–ï–°–¢ –ü–†–û–®–Å–õ –£–°–ü–ï–®–ù–û ===")
            print(f"‚ú® KittyCore 3.0 —Å A-MEM —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ–π!")
            print(f"üß† –≠–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É—é—â–∞—è –ø–∞–º—è—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –æ–ø—ã—Ç!")
            print(f"üìä –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        else:
            print(f"\n‚ö†Ô∏è === –¢–ï–°–¢ –ß–ê–°–¢–ò–ß–ù–û –£–°–ü–ï–®–ï–ù ===")
            print(f"üîß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        test_results = {
            "success": result.get('success', False),
            "execution_time": execution_time,
            "created_files": result.get('created_files', []),
            "quality_score": result.get('quality_score'),
            "amem_type": amem_type,
            "amem_available": AMEM_AVAILABLE,
            "memories_found": len(all_memories) if 'all_memories' in locals() else 0,
            "search_effectiveness": avg_search_effectiveness,
            "search_results": search_results,
            "timestamp": datetime.now().isoformat()
        }
        
        results_file = Path("bitrix_test_results.json")
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(test_results, f, indent=2, ensure_ascii=False)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
        
        return test_results
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return {"success": False, "error": str(e)}

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        print("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24 —Å KittyCore 3.0 + A-MEM...")
        result = await test_bitrix_market_analysis()
        
        if result.get("success"):
            print("\nüöÄ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û ===")
            print("‚ú® KittyCore 3.0 –≥–æ—Ç–æ–≤ –∫ —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–¥–∞—á–∞–º!")
        else:
            print("\nüí• === –¢–ï–°–¢ –ù–ï –ü–†–û–®–Å–õ ===")
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")
        
        return result
        
    except Exception as e:
        print(f"\nüí• === –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ===")
        print(f"‚ùå {e}")
        import traceback
        traceback.print_exc()
        return {"success": False, "error": str(e)}

if __name__ == "__main__":
    asyncio.run(main()) 