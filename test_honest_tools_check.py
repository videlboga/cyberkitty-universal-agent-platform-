#!/usr/bin/env python3
"""
üïµÔ∏è –ß–ï–°–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0

–¶–µ–ª—å: –í—ã—è–≤–∏—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –º–æ–∫-–æ—Ç–≤–µ—Ç—ã
–ü—Ä–∏–Ω—Ü–∏–ø: "–ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–µ–π - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞, –∞ –Ω–µ —É—Å–ø–µ—Ö!"

–ü—Ä–æ–≤–µ—Ä—è–µ–º:
- –†–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã vs —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ø–µ—Ö–∏  
- –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç —Ä–∞–±–æ—Ç—É
- –í–æ–∑–≤—Ä–∞—â–∞—é—Ç –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∏
"""

import asyncio
import time
import json
import tempfile
import os
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
from kittycore.tools.enhanced_web_search_tool import EnhancedWebSearchTool
from kittycore.tools.media_tool import MediaTool
from kittycore.tools.network_tool import NetworkTool
from kittycore.tools.api_request_tool import ApiRequestTool
from kittycore.tools.super_system_tool import SuperSystemTool
from kittycore.tools.computer_use_tool import ComputerUseTool
from kittycore.tools.communication_tools import EmailTool
from kittycore.tools.code_execution_tools import CodeExecutionTool
from kittycore.tools.data_analysis_tool import DataAnalysisTool

class HonestToolsChecker:
    """–ß–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    
    def __init__(self):
        self.results = {}
        self.fake_patterns = [
            "–¥–µ–º–æ —Ä–µ–∂–∏–º", "demo mode", "–∑–∞–≥–ª—É—à–∫–∞", "mock", "fake", "test data",
            "–ø—Ä–∏–º–µ—Ä", "example", "sample", "placeholder", "dummy"
        ]
        
    def detect_fake_result(self, result_data: str, tool_name: str) -> tuple:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        result_str = str(result_data).lower()
        fake_indicators = []
        
        # –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∑–∞–≥–ª—É—à–µ–∫
        for pattern in self.fake_patterns:
            if pattern in result_str:
                fake_indicators.append(f"–ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω '{pattern}'")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
        if tool_name == "media_tool":
            if "image_processing" in result_str and "PIL" not in result_str:
                fake_indicators.append("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ PIL")
                
        elif tool_name == "email_tool":
            if "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" in result_str and len(result_str) < 100:
                fake_indicators.append("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
                
        elif tool_name == "enhanced_web_search":
            if "—Ä–µ–∑—É–ª—å—Ç–∞—Ç" in result_str and "http" not in result_str:
                fake_indicators.append("–ü–æ–∏—Å–∫ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö URL")
        
        is_fake = len(fake_indicators) > 0
        return is_fake, fake_indicators
        
    def test_enhanced_web_search(self):
        """üåê –ß–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
        print("üåê –ß–ï–°–¢–ù–´–ô –¢–ï–°–¢ enhanced_web_search")
        
        tool = EnhancedWebSearchTool()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
        result = tool.execute(
            action="search",
            query="Python programming tutorial 2024",
            max_results=3
        )
        
        success = result.success
        data_size = len(str(result.data)) if result.data else 0
        is_fake, fake_indicators = self.detect_fake_result(result.data, "enhanced_web_search")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        real_indicators = []
        if result.data and isinstance(result.data, dict):
            if "results" in result.data:
                results = result.data["results"]
                if isinstance(results, list) and len(results) > 0:
                    for res in results[:2]:
                        if isinstance(res, dict) and "url" in res:
                            if res["url"].startswith("http"):
                                real_indicators.append("–ù–∞–π–¥–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ URL")
                                break
        
        verdict = "‚ùå –§–ò–ö–¢–ò–í–ù–´–ô" if is_fake else "‚úÖ –†–ï–ê–õ–¨–ù–´–ô" if real_indicators else "‚ö†Ô∏è –°–û–ú–ù–ò–¢–ï–õ–¨–ù–´–ô"
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {verdict}")
        print(f"   –£—Å–ø–µ—Ö: {success}, –†–∞–∑–º–µ—Ä: {data_size} –±–∞–π—Ç")
        if fake_indicators:
            print(f"   üö® –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–¥–¥–µ–ª–∫–∏: {fake_indicators}")
        if real_indicators:
            print(f"   ‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: {real_indicators}")
            
        return {"tool": "enhanced_web_search", "success": success, "fake": is_fake, "size": data_size}
    
    def test_media_tool(self):
        """üé® –ß–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç –º–µ–¥–∏–∞-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        print("üé® –ß–ï–°–¢–ù–´–ô –¢–ï–°–¢ media_tool")
        
        tool = MediaTool()
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_image = self._create_test_image()
        
        try:
            # –ü—Ä–æ–±—É–µ–º –†–ï–ê–õ–¨–ù–û –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            result = tool.execute(
                action="analyze_file",
                file_path=str(test_image)
            )
            
            success = result.success
            data_size = len(str(result.data)) if result.data else 0
            is_fake, fake_indicators = self.detect_fake_result(result.data, "media_tool")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            real_indicators = []
            if result.data and isinstance(result.data, dict):
                if "file_info" in result.data:
                    file_info = result.data["file_info"]
                    if isinstance(file_info, dict) and "size_bytes" in file_info:
                        actual_size = test_image.stat().st_size
                        reported_size = file_info.get("size_bytes", 0)
                        if actual_size == reported_size:
                            real_indicators.append("–†–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞")
                            
                if "specific_info" in result.data:
                    specific = result.data["specific_info"]
                    if isinstance(specific, dict) and "dimensions" in specific:
                        real_indicators.append("–†–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
        except Exception as e:
            success = False
            data_size = 0
            is_fake = False
            fake_indicators = [f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:50]}"]
            real_indicators = []
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            if test_image.exists():
                test_image.unlink()
        
        verdict = "‚ùå –§–ò–ö–¢–ò–í–ù–´–ô" if is_fake else "‚úÖ –†–ï–ê–õ–¨–ù–´–ô" if real_indicators else "‚ö†Ô∏è –°–û–ú–ù–ò–¢–ï–õ–¨–ù–´–ô"
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {verdict}")
        print(f"   –£—Å–ø–µ—Ö: {success}, –†–∞–∑–º–µ—Ä: {data_size} –±–∞–π—Ç")
        if fake_indicators:
            print(f"   üö® –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–¥–¥–µ–ª–∫–∏: {fake_indicators}")
        if real_indicators:
            print(f"   ‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: {real_indicators}")
            
        return {"tool": "media_tool", "success": success, "fake": is_fake, "size": data_size}
    
    def test_email_tool(self):
        """üìß –ß–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç email –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        print("üìß –ß–ï–°–¢–ù–´–ô –¢–ï–°–¢ email_tool")
        
        tool = EmailTool()
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –ë–ï–ó –Ω–∞—Å—Ç—Ä–æ–µ–∫ SMTP
        result = tool.execute(
            action="send_email",
            to="test@example.com",
            subject="Test",
            body="Test message"
        )
        
        success = result.success
        data_size = len(str(result.data)) if result.data else 0
        is_fake, fake_indicators = self.detect_fake_result(result.data, "email_tool")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –±–µ–∑ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ù–ï –î–û–õ–ñ–ù–û –±—ã—Ç—å —É—Å–ø–µ—Ö–∞!
        if success and not os.getenv("SMTP_SERVER"):
            is_fake = True
            fake_indicators.append("–£—Å–ø–µ—Ö –±–µ–∑ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –ø–æ–¥–¥–µ–ª–∫–∞!")
        
        verdict = "‚ùå –§–ò–ö–¢–ò–í–ù–´–ô" if is_fake else "‚úÖ –†–ï–ê–õ–¨–ù–´–ô"
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {verdict}")
        print(f"   –£—Å–ø–µ—Ö: {success}, –†–∞–∑–º–µ—Ä: {data_size} –±–∞–π—Ç")
        if fake_indicators:
            print(f"   üö® –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–¥–¥–µ–ª–∫–∏: {fake_indicators}")
            
        return {"tool": "email_tool", "success": success, "fake": is_fake, "size": data_size}
    
    def test_network_tool(self):
        """üåê –ß–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""  
        print("üåê –ß–ï–°–¢–ù–´–ô –¢–ï–°–¢ network_tool")
        
        tool = NetworkTool()
        
        # –†–µ–∞–ª—å–Ω—ã–π ping –∫ Google
        result = tool.execute(
            action="ping_host",
            host="google.com",
            count=1
        )
        
        success = result.success
        data_size = len(str(result.data)) if result.data else 0
        is_fake, fake_indicators = self.detect_fake_result(result.data, "network_tool")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ping
        real_indicators = []
        if result.data:
            data_str = str(result.data).lower()
            if any(indicator in data_str for indicator in ["ms", "time=", "bytes=", "ping", "ttl="]):
                real_indicators.append("–†–µ–∞–ª—å–Ω—ã–µ ping –º–µ—Ç—Ä–∏–∫–∏")
                
        verdict = "‚ùå –§–ò–ö–¢–ò–í–ù–´–ô" if is_fake else "‚úÖ –†–ï–ê–õ–¨–ù–´–ô" if real_indicators else "‚ö†Ô∏è –°–û–ú–ù–ò–¢–ï–õ–¨–ù–´–ô"
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {verdict}")
        print(f"   –£—Å–ø–µ—Ö: {success}, –†–∞–∑–º–µ—Ä: {data_size} –±–∞–π—Ç")
        if fake_indicators:
            print(f"   üö® –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–¥–¥–µ–ª–∫–∏: {fake_indicators}")
        if real_indicators:
            print(f"   ‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: {real_indicators}")
            
        return {"tool": "network_tool", "success": success, "fake": is_fake, "size": data_size}
    
    def test_computer_use_tool(self):
        """üíª –ß–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç GUI –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        print("üíª –ß–ï–°–¢–ù–´–ô –¢–ï–°–¢ computer_use_tool")
        
        tool = ComputerUseTool()
        
        # –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç (–¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ Linux)
        result = tool.execute(action="screenshot")
        
        success = result.success  
        data_size = len(str(result.data)) if result.data else 0
        is_fake, fake_indicators = self.detect_fake_result(result.data, "computer_use_tool")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        real_indicators = []
        if result.data and isinstance(result.data, dict):
            if "screenshot_path" in result.data or "image_data" in result.data:
                real_indicators.append("–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
                
        verdict = "‚ùå –§–ò–ö–¢–ò–í–ù–´–ô" if is_fake else "‚úÖ –†–ï–ê–õ–¨–ù–´–ô" if real_indicators else "‚ö†Ô∏è –°–û–ú–ù–ò–¢–ï–õ–¨–ù–´–ô"
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {verdict}")
        print(f"   –£—Å–ø–µ—Ö: {success}, –†–∞–∑–º–µ—Ä: {data_size} –±–∞–π—Ç")
        if fake_indicators:
            print(f"   üö® –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–¥–¥–µ–ª–∫–∏: {fake_indicators}")
        if real_indicators:
            print(f"   ‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: {real_indicators}")
            
        return {"tool": "computer_use_tool", "success": success, "fake": is_fake, "size": data_size}
    
    def _create_test_image(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            from PIL import Image
            
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 100x100 –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
            img = Image.new('RGB', (100, 100), color='red')
            
            temp_dir = Path(tempfile.gettempdir())
            img_path = temp_dir / 'kittycore_test_image.png'
            img.save(img_path)
            
            return img_path
        except ImportError:
            # –ï—Å–ª–∏ PIL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
            temp_dir = Path(tempfile.gettempdir()) 
            img_path = temp_dir / 'kittycore_test_fake.txt'
            img_path.write_text("Fake image for testing")
            return img_path
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —á–µ—Å—Ç–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üïµÔ∏è –ß–ï–°–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0")
        print("–¶–µ–ª—å: –í—ã—è–≤–∏—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –º–æ–∫-–æ—Ç–≤–µ—Ç—ã")
        print("=" * 70)
        
        tests = [
            self.test_enhanced_web_search,
            self.test_media_tool,
            self.test_email_tool,
            self.test_network_tool,
            self.test_computer_use_tool
        ]
        
        start_time = time.time()
        results = []
        
        for test in tests:
            print()
            try:
                result = test()
                results.append(result)
            except Exception as e:
                print(f"   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                results.append({"tool": test.__name__, "success": False, "fake": True, "size": 0})
                
        total_time = time.time() - start_time
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "=" * 70)
        print("üéØ –ê–ù–ê–õ–ò–ó –ß–ï–°–¢–ù–û–°–¢–ò –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
        print("-" * 50)
        
        real_tools = 0
        fake_tools = 0
        suspicious_tools = 0
        
        for result in results:
            tool_name = result['tool']
            if result.get('fake', False):
                status = "‚ùå –§–ò–ö–¢–ò–í–ù–´–ô"
                fake_tools += 1
            elif result.get('success', False):
                status = "‚úÖ –†–ï–ê–õ–¨–ù–´–ô"
                real_tools += 1
            else:
                status = "‚ö†Ô∏è –°–û–ú–ù–ò–¢–ï–õ–¨–ù–´–ô"
                suspicious_tools += 1
                
            size = result.get('size', 0)
            print(f"{tool_name:25} {status} ({size} –±–∞–π—Ç)")
        
        total_tools = len(results)
        print("-" * 50)
        print(f"‚úÖ –†–ï–ê–õ–¨–ù–´–ï:      {real_tools}/{total_tools} ({real_tools/total_tools*100:.1f}%)")
        print(f"‚ùå –§–ò–ö–¢–ò–í–ù–´–ï:     {fake_tools}/{total_tools} ({fake_tools/total_tools*100:.1f}%)")
        print(f"‚ö†Ô∏è –°–û–ú–ù–ò–¢–ï–õ–¨–ù–´–ï:  {suspicious_tools}/{total_tools} ({suspicious_tools/total_tools*100:.1f}%)")
        print(f"‚è±Ô∏è –í–†–ï–ú–Ø:         {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        if fake_tools > 0:
            print(f"\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –§–ò–ö–¢–ò–í–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´: {fake_tools} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤!")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.")
        else:
            print("\nüéâ –í–°–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ß–ï–°–¢–ù–´–ï!")
        
        return results

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = HonestToolsChecker()
    results = checker.run_all_tests()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    fake_count = sum(1 for r in results if r.get('fake', False))
    
    if fake_count == 0:
        print("\n‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å!")
        exit(0)
    else:
        print(f"\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ {fake_count} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö")
        exit(1)

if __name__ == "__main__":
    main() 