"""
SecurityTool - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è KittyCore 3.0

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
- –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∫–æ–¥–∞
- –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π –∏ —Ö–µ—à–µ–π
- –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –î–µ—Ç–µ–∫—Ü–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –ê—É–¥–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import hashlib
import hmac
import secrets
import re
import json
import time
import base64
import urllib.parse
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
from typing import Dict, Any, List, Optional, Union, Set, Tuple
from pathlib import Path
import subprocess

from loguru import logger

from kittycore.tools.base_tool import Tool, ToolResult


@dataclass
class SecurityVulnerability:
    """–£—è–∑–≤–∏–º–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    id: str
    title: str
    description: str
    severity: str  # critical, high, medium, low, info
    category: str  # injection, xss, auth, crypto, etc.
    location: str
    code_snippet: Optional[str] = None
    recommendation: Optional[str] = None
    cwe_id: Optional[str] = None
    cvss_score: Optional[float] = None


@dataclass
class PasswordAnalysis:
    """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–æ–ª—è"""
    password: str
    strength: str  # very_weak, weak, medium, strong, very_strong
    score: int  # 0-100
    length: int
    has_lowercase: bool
    has_uppercase: bool
    has_digits: bool
    has_special: bool
    entropy: float
    estimated_crack_time: str
    suggestions: List[str]


@dataclass
class HashAnalysis:
    """–ê–Ω–∞–ª–∏–∑ —Ö–µ—à–∞"""
    hash_value: str
    possible_algorithms: List[str]
    hash_length: int
    format_type: str
    is_salted: bool
    confidence: float


@dataclass
class SecurityAudit:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    target: str
    scan_type: str
    vulnerabilities: List[SecurityVulnerability]
    security_score: int  # 0-100
    risk_level: str  # low, medium, high, critical
    scan_duration: float
    recommendations: List[str]
    compliance_checks: Dict[str, bool]


class SecurityTool(Tool):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        super().__init__(
            name="security_tool",
            description="–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π, –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–æ–ª–µ–π, –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        )
        
        # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        self._vulnerability_patterns = self._load_vulnerability_patterns()
        self._password_patterns = self._load_password_patterns()
        self._hash_signatures = self._load_hash_signatures()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self._default_timeout = 30.0
        self._max_file_size = 10 * 1024 * 1024  # 10MB
        
        logger.info("üîí SecurityTool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_available_actions(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        return [
            "scan_code_vulnerabilities",
            "scan_web_vulnerabilities", 
            "analyze_password",
            "generate_secure_password",
            "analyze_hash",
            "crack_hash",
            "check_data_breach",
            "audit_file_permissions",
            "scan_network_vulnerabilities",
            "analyze_ssl_certificate",
            "check_security_headers",
            "validate_input",
            "encrypt_data",
            "decrypt_data",
            "generate_keys",
            "security_audit"
        ]
    
    def _load_vulnerability_patterns(self) -> Dict[str, List[Dict]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        return {
            "sql_injection": [
                {
                    "pattern": r"(\bSELECT\b.*?\bFROM\b.*?\bWHERE\b.*?['\"]?\s*\+\s*['\"]?)",
                    "severity": "high",
                    "cwe": "CWE-89",
                    "description": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è SQL –∏–Ω—ä–µ–∫—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é —Å—Ç—Ä–æ–∫"
                },
                {
                    "pattern": r"(execute\s*\(\s*['\"].*?['\"].*?\+.*?\))",
                    "severity": "high", 
                    "cwe": "CWE-89",
                    "description": "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤"
                }
            ],
            "xss": [
                {
                    "pattern": r"(innerHTML\s*=\s*.*?\+.*?)",
                    "severity": "medium",
                    "cwe": "CWE-79",
                    "description": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è XSS —á–µ—Ä–µ–∑ innerHTML"
                },
                {
                    "pattern": r"(document\.write\s*\(.*?\+.*?\))",
                    "severity": "medium",
                    "cwe": "CWE-79", 
                    "description": "–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ document.write"
                }
            ],
            "path_traversal": [
                {
                    "pattern": r"(\.\.\/|\.\.\\)",
                    "severity": "medium",
                    "cwe": "CWE-22",
                    "description": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å path traversal"
                }
            ],
            "hardcoded_secrets": [
                {
                    "pattern": r"(password\s*=\s*['\"][^'\"]{6,}['\"])",
                    "severity": "high",
                    "cwe": "CWE-798",
                    "description": "Hardcoded –ø–∞—Ä–æ–ª—å –≤ –∫–æ–¥–µ"
                },
                {
                    "pattern": r"(api_key\s*=\s*['\"][^'\"]{10,}['\"])",
                    "severity": "high",
                    "cwe": "CWE-798",
                    "description": "Hardcoded API –∫–ª—é—á"
                }
            ],
            "weak_crypto": [
                {
                    "pattern": r"(md5|sha1)\.new\(",
                    "severity": "medium",
                    "cwe": "CWE-327",
                    "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–∞–±–æ–π –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"
                }
            ]
        }
    
    def _load_password_patterns(self) -> Dict[str, int]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä–æ–ª–µ–π"""
        return {
            "common_passwords": [
                "password", "123456", "password123", "admin", "qwerty",
                "letmein", "welcome", "monkey", "dragon", "master"
            ],
            "keyboard_patterns": [
                "qwerty", "asdf", "zxcv", "1234", "abcd"
            ]
        }
    
    def _load_hash_signatures(self) -> Dict[int, List[str]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä —Ö–µ—à–µ–π –ø–æ –¥–ª–∏–Ω–µ"""
        return {
            32: ["MD5", "NTLM"],
            40: ["SHA1", "MySQL"],
            56: ["SHA224"],
            64: ["SHA256", "Blake2s"],
            96: ["SHA384"],
            128: ["SHA512", "Blake2b", "Whirlpool"]
        }
    
    async def scan_code_vulnerabilities(self, 
                                      code: str = None,
                                      file_path: str = None,
                                      language: str = "auto") -> ToolResult:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        try:
            if not code and not file_path:
                return ToolResult(
                    success=False,
                    error="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–¥ –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
                )
            
            # –ß–∏—Ç–∞–µ–º –∫–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if file_path:
                path = Path(file_path)
                if not path.exists():
                    return ToolResult(
                        success=False,
                        error=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
                    )
                
                if path.stat().st_size > self._max_file_size:
                    return ToolResult(
                        success=False,
                        error=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {path.stat().st_size} –±–∞–π—Ç"
                    )
                
                code = path.read_text(encoding='utf-8')
            
            # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
            if language == "auto":
                language = self._detect_language(code, file_path)
            
            vulnerabilities = []
            scan_start = time.time()
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            for category, patterns in self._vulnerability_patterns.items():
                for pattern_data in patterns:
                    pattern = pattern_data["pattern"]
                    matches = re.finditer(pattern, code, re.IGNORECASE | re.MULTILINE)
                    
                    for match in matches:
                        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                        line_num = code[:match.start()].count('\n') + 1
                        
                        vulnerability = SecurityVulnerability(
                            id=f"{category}_{len(vulnerabilities) + 1}",
                            title=f"{category.replace('_', ' ').title()} Vulnerability",
                            description=pattern_data["description"],
                            severity=pattern_data["severity"],
                            category=category,
                            location=f"Line {line_num}" + (f" in {file_path}" if file_path else ""),
                            code_snippet=match.group(0),
                            cwe_id=pattern_data.get("cwe"),
                            recommendation=self._get_vulnerability_recommendation(category)
                        )
                        vulnerabilities.append(vulnerability)
            
            scan_duration = time.time() - scan_start
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            security_score = self._calculate_security_score(vulnerabilities, len(code.split('\n')))
            risk_level = self._get_risk_level(vulnerabilities)
            
            audit = SecurityAudit(
                target=file_path or "code_snippet",
                scan_type="static_code_analysis",
                vulnerabilities=vulnerabilities,
                security_score=security_score,
                risk_level=risk_level,
                scan_duration=scan_duration,
                recommendations=self._generate_code_recommendations(vulnerabilities),
                compliance_checks=self._check_code_compliance(code)
            )
            
            return ToolResult(
                success=True,
                data={
                    "audit": asdict(audit),
                    "summary": {
                        "total_vulnerabilities": len(vulnerabilities),
                        "critical": len([v for v in vulnerabilities if v.severity == "critical"]),
                        "high": len([v for v in vulnerabilities if v.severity == "high"]),
                        "medium": len([v for v in vulnerabilities if v.severity == "medium"]),
                        "low": len([v for v in vulnerabilities if v.severity == "low"])
                    }
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞: {str(e)}"
            )
    
    async def analyze_password(self, password: str) -> ToolResult:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–æ–ª—è –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"""
        try:
            analysis_start = time.time()
            
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            length = len(password)
            has_lowercase = bool(re.search(r'[a-z]', password))
            has_uppercase = bool(re.search(r'[A-Z]', password))
            has_digits = bool(re.search(r'\d', password))
            has_special = bool(re.search(r'[!@#$%^&*(),.?":{}|<>]', password))
            
            # –í—ã—á–∏—Å–ª—è–µ–º —ç–Ω—Ç—Ä–æ–ø–∏—é
            entropy = self._calculate_password_entropy(password)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Å–∏–ª—ã
            score = self._calculate_password_score(
                length, has_lowercase, has_uppercase, 
                has_digits, has_special, entropy, password
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã
            if score >= 90:
                strength = "very_strong"
            elif score >= 70:
                strength = "strong"
            elif score >= 50:
                strength = "medium"
            elif score >= 30:
                strength = "weak"
            else:
                strength = "very_weak"
            
            # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–∑–ª–æ–º–∞
            crack_time = self._estimate_crack_time(entropy)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            suggestions = self._generate_password_suggestions(
                length, has_lowercase, has_uppercase, 
                has_digits, has_special, password
            )
            
            analysis = PasswordAnalysis(
                password="*" * len(password),  # –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                strength=strength,
                score=score,
                length=length,
                has_lowercase=has_lowercase,
                has_uppercase=has_uppercase,
                has_digits=has_digits,
                has_special=has_special,
                entropy=entropy,
                estimated_crack_time=crack_time,
                suggestions=suggestions
            )
            
            return ToolResult(
                success=True,
                data=asdict(analysis)
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä–æ–ª—è: {str(e)}"
            )
    
    async def generate_secure_password(self, 
                                     length: int = 16,
                                     include_uppercase: bool = True,
                                     include_lowercase: bool = True,
                                     include_digits: bool = True,
                                     include_special: bool = True,
                                     exclude_ambiguous: bool = True) -> ToolResult:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
        try:
            if length < 8:
                return ToolResult(
                    success=False,
                    error="–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤"
                )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–ª—Ñ–∞–≤–∏—Ç
            charset = ""
            if include_lowercase:
                charset += "abcdefghijklmnopqrstuvwxyz"
            if include_uppercase:
                charset += "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            if include_digits:
                charset += "0123456789"
            if include_special:
                charset += "!@#$%^&*()_+-=[]{}|;:,.<>?"
            
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            if exclude_ambiguous:
                ambiguous = "il1Lo0O"
                charset = "".join(c for c in charset if c not in ambiguous)
            
            if not charset:
                return ToolResult(
                    success=False,
                    error="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è"
                )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
            password = ''.join(secrets.choice(charset) for _ in range(length))
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
            analysis_result = await self.analyze_password(password)
            
            return ToolResult(
                success=True,
                data={
                    "password": password,
                    "charset_size": len(charset),
                    "total_combinations": len(charset) ** length,
                    "analysis": analysis_result.data if analysis_result.success else None,
                    "generation_method": "cryptographically_secure"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è: {str(e)}"
            )
    
    async def analyze_hash(self, hash_value: str) -> ToolResult:
        """–ê–Ω–∞–ª–∏–∑ —Ö–µ—à–∞"""
        try:
            hash_value = hash_value.strip()
            hash_length = len(hash_value)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ –¥–ª–∏–Ω–µ
            possible_algorithms = self._hash_signatures.get(hash_length, ["Unknown"])
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç
            format_type = "hex"
            if re.match(r'^[a-fA-F0-9]+$', hash_value):
                format_type = "hex"
            elif re.match(r'^[A-Za-z0-9+/=]+$', hash_value):
                format_type = "base64"
            else:
                format_type = "unknown"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–ª–∏
            is_salted = self._detect_salt(hash_value)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
            confidence = self._calculate_hash_confidence(hash_value, possible_algorithms)
            
            analysis = HashAnalysis(
                hash_value=hash_value[:32] + "..." if len(hash_value) > 32 else hash_value,
                possible_algorithms=possible_algorithms,
                hash_length=hash_length,
                format_type=format_type,
                is_salted=is_salted,
                confidence=confidence
            )
            
            return ToolResult(
                success=True,
                data=asdict(analysis)
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ö–µ—à–∞: {str(e)}"
            )
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _detect_language(self, code: str, file_path: str = None) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if file_path:
            ext = Path(file_path).suffix.lower()
            lang_map = {
                '.py': 'python',
                '.js': 'javascript', 
                '.php': 'php',
                '.java': 'java',
                '.cpp': 'cpp',
                '.c': 'c',
                '.cs': 'csharp',
                '.rb': 'ruby',
                '.go': 'go'
            }
            if ext in lang_map:
                return lang_map[ext]
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        if 'def ' in code and 'import ' in code:
            return 'python'
        elif 'function' in code and ('var ' in code or 'let ' in code):
            return 'javascript'
        elif '<?php' in code:
            return 'php'
        elif 'public class' in code and 'public static void main' in code:
            return 'java'
        
        return 'unknown'
    
    def _get_vulnerability_recommendation(self, category: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        recommendations = {
            "sql_injection": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ ORM",
            "xss": "–≠–∫—Ä–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSP –∑–∞–≥–æ–ª–æ–≤–∫–∏",
            "path_traversal": "–í–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ whitelist",
            "hardcoded_secrets": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞–º–∏",
            "weak_crypto": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã (SHA-256+)"
        }
        return recommendations.get(category, "–ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    def _calculate_security_score(self, vulnerabilities: List[SecurityVulnerability], lines_count: int) -> int:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        if not vulnerabilities:
            return 100
        
        # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç–∏
        severity_weights = {
            "critical": 40,
            "high": 25,
            "medium": 15,
            "low": 5,
            "info": 1
        }
        
        total_penalty = 0
        for vuln in vulnerabilities:
            penalty = severity_weights.get(vuln.severity, 10)
            total_penalty += penalty
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–æ–∫
        normalized_penalty = total_penalty / max(lines_count / 100, 1)
        
        score = max(0, 100 - normalized_penalty)
        return int(score)
    
    def _get_risk_level(self, vulnerabilities: List[SecurityVulnerability]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
        critical_count = len([v for v in vulnerabilities if v.severity == "critical"])
        high_count = len([v for v in vulnerabilities if v.severity == "high"])
        
        if critical_count > 0:
            return "critical"
        elif high_count >= 3:
            return "high"
        elif high_count > 0 or len(vulnerabilities) >= 5:
            return "medium"
        else:
            return "low"
    
    def _generate_code_recommendations(self, vulnerabilities: List[SecurityVulnerability]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–¥—É"""
        recommendations = []
        categories = set(v.category for v in vulnerabilities)
        
        for category in categories:
            recommendations.append(self._get_vulnerability_recommendation(category))
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if vulnerabilities:
            recommendations.extend([
                "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "–û–±—É—á–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
            ])
        
        return recommendations
    
    def _check_code_compliance(self, code: str) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return {
            "has_input_validation": "validate" in code.lower() or "sanitize" in code.lower(),
            "has_error_handling": "try:" in code or "catch" in code or "except" in code,
            "has_logging": "log" in code.lower() or "logger" in code.lower(),
            "no_hardcoded_secrets": not bool(re.search(r'password\s*=\s*[\'"][^\'"]{6,}[\'"]', code, re.IGNORECASE)),
            "uses_https": "https://" in code,
            "has_authentication": "auth" in code.lower() or "login" in code.lower()
        }
    
    def _calculate_password_entropy(self, password: str) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —ç–Ω—Ç—Ä–æ–ø–∏–∏ –ø–∞—Ä–æ–ª—è"""
        charset_size = 0
        
        if re.search(r'[a-z]', password):
            charset_size += 26
        if re.search(r'[A-Z]', password):
            charset_size += 26
        if re.search(r'\d', password):
            charset_size += 10
        if re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
            charset_size += 32
        
        if charset_size == 0:
            return 0.0
        
        import math
        return len(password) * math.log2(charset_size)
    
    def _calculate_password_score(self, length: int, has_lower: bool, has_upper: bool, 
                                has_digits: bool, has_special: bool, entropy: float, password: str) -> int:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è"""
        score = 0
        
        # –î–ª–∏–Ω–∞
        if length >= 12:
            score += 25
        elif length >= 8:
            score += 15
        elif length >= 6:
            score += 5
        
        # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
        if has_lower:
            score += 10
        if has_upper:
            score += 10
        if has_digits:
            score += 10
        if has_special:
            score += 15
        
        # –≠–Ω—Ç—Ä–æ–ø–∏—è
        if entropy >= 60:
            score += 20
        elif entropy >= 40:
            score += 10
        elif entropy >= 25:
            score += 5
        
        # –®—Ç—Ä–∞—Ñ—ã
        common_passwords = self._password_patterns["common_passwords"]
        if password.lower() in common_passwords:
            score -= 30
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        keyboard_patterns = self._password_patterns["keyboard_patterns"]
        for pattern in keyboard_patterns:
            if pattern in password.lower():
                score -= 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        if len(set(password)) < len(password) * 0.7:
            score -= 10
        
        return max(0, min(100, score))
    
    def _estimate_crack_time(self, entropy: float) -> str:
        """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–∑–ª–æ–º–∞ –ø–æ —ç–Ω—Ç—Ä–æ–ø–∏–∏"""
        if entropy < 20:
            return "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ"
        elif entropy < 30:
            return "–ù–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
        elif entropy < 40:
            return "–ù–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
        elif entropy < 50:
            return "–ù–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤"
        elif entropy < 60:
            return "–ù–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π"
        elif entropy < 70:
            return "–ù–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç"
        else:
            return "–°—Ç–æ–ª–µ—Ç–∏—è"
    
    def _generate_password_suggestions(self, length: int, has_lower: bool, has_upper: bool,
                                     has_digits: bool, has_special: bool, password: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–∞—Ä–æ–ª—è"""
        suggestions = []
        
        if length < 12:
            suggestions.append("–£–≤–µ–ª–∏—á—å—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è –¥–æ 12+ —Å–∏–º–≤–æ–ª–æ–≤")
        
        if not has_lower:
            suggestions.append("–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã")
        if not has_upper:
            suggestions.append("–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã")
        if not has_digits:
            suggestions.append("–î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã")
        if not has_special:
            suggestions.append("–î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (!@#$%^&*)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—â–∏–µ –ø–∞—Ä–æ–ª–∏
        if password.lower() in self._password_patterns["common_passwords"]:
            suggestions.append("–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        if len(set(password)) < len(password) * 0.7:
            suggestions.append("–ò–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤")
        
        if not suggestions:
            suggestions.append("–ü–∞—Ä–æ–ª—å —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
        
        return suggestions
    
    def _detect_salt(self, hash_value: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è —Å–æ–ª–∏ –≤ —Ö–µ—à–µ"""
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ - –∏—â–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏–ª–∏ –Ω–µ–æ–±—ã—á–Ω—É—é –¥–ª–∏–Ω—É
        separators = ['$', ':', '.', '_']
        for sep in separators:
            if sep in hash_value:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—ã—á–Ω—É—é –¥–ª–∏–Ω—É –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
        standard_lengths = [32, 40, 56, 64, 96, 128]
        return len(hash_value) not in standard_lengths
    
    def _calculate_hash_confidence(self, hash_value: str, algorithms: List[str]) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
        if "Unknown" in algorithms:
            return 0.1
        
        confidence = 0.5  # –±–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        if re.match(r'^[a-fA-F0-9]+$', hash_value):
            confidence += 0.3
        
        # –£–º–µ–Ω—å—à–∞–µ–º –µ—Å–ª–∏ –º–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
        if len(algorithms) > 2:
            confidence -= 0.2
        
        return max(0.1, min(1.0, confidence))
    
    # –†–µ–∞–ª–∏–∑—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async def execute(self, action: str, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        if action == "scan_code_vulnerabilities":
            return await self.scan_code_vulnerabilities(**kwargs)
        elif action == "analyze_password":
            return await self.analyze_password(**kwargs)
        elif action == "generate_secure_password":
            return await self.generate_secure_password(**kwargs)
        elif action == "analyze_hash":
            return await self.analyze_hash(**kwargs)
        else:
            return ToolResult(
                success=False,
                error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
            )
    
    def get_schema(self) -> Dict[str, Any]:
        return {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "enum": self.get_available_actions(),
                    "description": "–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                },
                "code": {
                    "type": "string",
                    "description": "–ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"
                },
                "file_path": {
                    "type": "string",
                    "description": "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                },
                "language": {
                    "type": "string",
                    "description": "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (auto –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)"
                },
                "password": {
                    "type": "string",
                    "description": "–ü–∞—Ä–æ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                },
                "hash_value": {
                    "type": "string",
                    "description": "–•–µ—à –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                },
                "length": {
                    "type": "integer",
                    "description": "–î–ª–∏–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –ø–∞—Ä–æ–ª—è"
                },
                "include_uppercase": {
                    "type": "boolean",
                    "description": "–í–∫–ª—é—á–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã"
                },
                "include_lowercase": {
                    "type": "boolean", 
                    "description": "–í–∫–ª—é—á–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã"
                },
                "include_digits": {
                    "type": "boolean",
                    "description": "–í–∫–ª—é—á–∞—Ç—å —Ü–∏—Ñ—Ä—ã"
                },
                "include_special": {
                    "type": "boolean",
                    "description": "–í–∫–ª—é—á–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"
                },
                "exclude_ambiguous": {
                    "type": "boolean",
                    "description": "–ò—Å–∫–ª—é—á–∞—Ç—å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"
                }
            },
            "required": ["action"]
        } 