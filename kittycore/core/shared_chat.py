"""
üí¨ SharedChat - –°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –æ–±—â–∏–π —á–∞—Ç:
- –û–±—â–∏–π –∫–∞–Ω–∞–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
- –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import asyncio
from datetime import datetime
from typing import Dict, Any, List, Optional, Set
from dataclasses import dataclass, field
from loguru import logger
from ..memory.collective_memory import CollectiveMemory


@dataclass
class ChatMessage:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–µ–º —á–∞—Ç–µ"""
    id: str
    sender: str  # ID –∞–≥–µ–Ω—Ç–∞
    sender_role: str  # –†–æ–ª—å –∞–≥–µ–Ω—Ç–∞
    content: str
    message_type: str  # 'info', 'question', 'result', 'coordination', 'request'
    timestamp: datetime = field(default_factory=datetime.now)
    metadata: Dict[str, Any] = field(default_factory=dict)
    addressed_to: Optional[str] = None  # –ö–æ–º—É –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ (–∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö)
    requires_response: bool = False


@dataclass 
class AgentPresence:
    """–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∞–≥–µ–Ω—Ç–∞ –≤ —á–∞—Ç–µ"""
    agent_id: str
    agent_role: str
    status: str  # 'active', 'busy', 'idle', 'offline'
    last_seen: datetime = field(default_factory=datetime.now)
    current_task: Optional[str] = None


class SharedChat:
    """–û–±—â–∏–π —á–∞—Ç –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, team_id: str = "default", collective_memory: Optional[CollectiveMemory] = None):
        self.team_id = team_id
        self.messages: List[ChatMessage] = []
        self.agents: Dict[str, AgentPresence] = {}
        self.subscribers: Dict[str, Set[callable]] = {}  # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        self.coordinator_id: Optional[str] = None
        self.collective_memory = collective_memory
        self._message_counter = 0
        
        logger.info(f"–°–æ–∑–¥–∞–Ω SharedChat –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: {team_id}")
    
    def register_agent(self, agent_id: str, agent_role: str, is_coordinator: bool = False) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –≤ —á–∞—Ç–µ"""
        self.agents[agent_id] = AgentPresence(
            agent_id=agent_id,
            agent_role=agent_role,
            status='active'
        )
        
        if is_coordinator:
            self.coordinator_id = agent_id
            logger.info(f"–ê–≥–µ–Ω—Ç {agent_id} ({agent_role}) –Ω–∞–∑–Ω–∞—á–µ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_msg = ChatMessage(
            id=self._generate_message_id(),
            sender="system",
            sender_role="system",
            content=f"–ê–≥–µ–Ω—Ç {agent_role} ({agent_id}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ",
            message_type="info"
        )
        self.messages.append(welcome_msg)
        
        logger.info(f"–ê–≥–µ–Ω—Ç {agent_id} ({agent_role}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ")
    
    def unregister_agent(self, agent_id: str) -> None:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –æ—Ç —á–∞—Ç–∞"""
        if agent_id in self.agents:
            agent_role = self.agents[agent_id].agent_role
            del self.agents[agent_id]
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Ö–æ–¥–µ
            goodbye_msg = ChatMessage(
                id=self._generate_message_id(),
                sender="system",
                sender_role="system", 
                content=f"–ê–≥–µ–Ω—Ç {agent_role} ({agent_id}) –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–∞–Ω–¥—É",
                message_type="info"
            )
            self.messages.append(goodbye_msg)
            
            logger.info(f"–ê–≥–µ–Ω—Ç {agent_id} –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç —á–∞—Ç–∞")
    
    async def send_message(self, sender_id: str, content: str, message_type: str = "info", 
                          addressed_to: Optional[str] = None, metadata: Dict[str, Any] = None,
                          requires_response: bool = False) -> str:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        
        if sender_id not in self.agents and sender_id != "system":
            raise ValueError(f"–ê–≥–µ–Ω—Ç {sender_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ")
        
        message = ChatMessage(
            id=self._generate_message_id(),
            sender=sender_id,
            sender_role=self.agents.get(sender_id, AgentPresence("system", "system", "active")).agent_role,
            content=content,
            message_type=message_type,
            addressed_to=addressed_to,
            metadata=metadata or {},
            requires_response=requires_response
        )
        
        self.messages.append(message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if sender_id in self.agents:
            self.agents[sender_id].last_seen = datetime.now()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        await self._notify_subscribers('message', message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å
        if self.collective_memory:
            await self.collective_memory.add_memory(
                agent_id=sender_id,
                content=f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç: {content}",
                memory_type="communication",
                metadata={
                    'chat_message_id': message.id,
                    'message_type': message_type,
                    'addressed_to': addressed_to
                }
            )
        
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_id}: {content[:50]}...")
        return message.id
    
    async def broadcast_update(self, sender_id: str, update: str, task_info: Dict[str, Any] = None) -> None:
        """–†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º"""
        await self.send_message(
            sender_id=sender_id,
            content=f"üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}",
            message_type="coordination",
            metadata={'task_info': task_info or {}}
        )
    
    async def request_help(self, sender_id: str, problem: str, expertise_needed: str = None) -> str:
        """–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã"""
        content = f"üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å: {problem}"
        if expertise_needed:
            content += f"\n–¢—Ä–µ–±—É–µ—Ç—Å—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞: {expertise_needed}"
        
        return await self.send_message(
            sender_id=sender_id,
            content=content,
            message_type="request",
            requires_response=True,
            metadata={'problem': problem, 'expertise_needed': expertise_needed}
        )
    
    async def coordinate_task(self, coordinator_id: str, task: str, assignments: Dict[str, str]) -> List[str]:
        """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        message_ids = []
        
        # –û–±—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        general_msg_id = await self.send_message(
            sender_id=coordinator_id,
            content=f"üéØ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {task}",
            message_type="coordination"
        )
        message_ids.append(general_msg_id)
        
        # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        for agent_id, assignment in assignments.items():
            if agent_id in self.agents:
                msg_id = await self.send_message(
                    sender_id=coordinator_id,
                    content=f"üìã –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ: {assignment}",
                    message_type="coordination",
                    addressed_to=agent_id,
                    metadata={'task': task, 'assignment': assignment}
                )
                message_ids.append(msg_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç–∞
                self.agents[agent_id].current_task = assignment
        
        return message_ids
    
    async def report_result(self, sender_id: str, task: str, result: Dict[str, Any], 
                           success: bool = True) -> str:
        """–û—Ç—á—ë—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        
        status_emoji = "‚úÖ" if success else "‚ùå"
        content = f"{status_emoji} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏: {task}"
        
        if success:
            content += f"\nüìä –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        else:
            error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            content += f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞: {error}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if 'summary' in result:
            content += f"\nüìù –°–≤–æ–¥–∫–∞: {result['summary']}"
        
        msg_id = await self.send_message(
            sender_id=sender_id,
            content=content,
            message_type="result",
            metadata={'task': task, 'result': result, 'success': success}
        )
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç–∞
        if sender_id in self.agents:
            self.agents[sender_id].current_task = None
        
        return msg_id
    
    def update_agent_status(self, agent_id: str, status: str, current_task: str = None) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
        if agent_id in self.agents:
            self.agents[agent_id].status = status
            self.agents[agent_id].last_seen = datetime.now()
            if current_task is not None:
                self.agents[agent_id].current_task = current_task
            
            logger.debug(f"–°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ {agent_id}: {status}")
    
    def get_recent_messages(self, limit: int = 20, message_type: str = None,
                           since: datetime = None) -> List[ChatMessage]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        messages = self.messages
        
        if message_type:
            messages = [msg for msg in messages if msg.message_type == message_type]
        
        if since:
            messages = [msg for msg in messages if msg.timestamp > since]
        
        return messages[-limit:] if limit else messages
    
    def get_messages_for_agent(self, agent_id: str, limit: int = 10) -> List[ChatMessage]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É"""
        agent_messages = [
            msg for msg in self.messages
            if msg.addressed_to == agent_id or msg.addressed_to is None
        ]
        return agent_messages[-limit:] if limit else agent_messages
    
    def get_team_status(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã"""
        active_agents = [a for a in self.agents.values() if a.status == 'active']
        busy_agents = [a for a in self.agents.values() if a.status == 'busy']
        
        return {
            'team_id': self.team_id,
            'total_agents': len(self.agents),
            'active_agents': len(active_agents),
            'busy_agents': len(busy_agents),
            'coordinator': self.coordinator_id,
            'total_messages': len(self.messages),
            'agents': {
                agent_id: {
                    'role': agent.agent_role,
                    'status': agent.status,
                    'last_seen': agent.last_seen.isoformat(),
                    'current_task': agent.current_task
                }
                for agent_id, agent in self.agents.items()
            }
        }
    
    def get_conversation_summary(self, last_n_messages: int = 50) -> str:
        """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        recent_messages = self.get_recent_messages(last_n_messages)
        
        summary_parts = []
        summary_parts.append(f"–ö–æ–º–∞–Ω–¥–∞: {len(self.agents)} –∞–≥–µ–Ω—Ç–æ–≤")
        
        if recent_messages:
            summary_parts.append("–ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
            for msg in recent_messages[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
                sender_role = msg.sender_role
                content_preview = msg.content[:100] + "..." if len(msg.content) > 100 else msg.content
                summary_parts.append(f"- {sender_role}: {content_preview}")
        
        return "\n".join(summary_parts)
    
    async def subscribe_to_events(self, agent_id: str, callback: callable, event_types: List[str] = None) -> None:
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —á–∞—Ç–∞"""
        if agent_id not in self.subscribers:
            self.subscribers[agent_id] = set()
        
        self.subscribers[agent_id].add(callback)
        logger.debug(f"–ê–≥–µ–Ω—Ç {agent_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–æ–±—ã—Ç–∏—è —á–∞—Ç–∞")
    
    async def _notify_subscribers(self, event_type: str, data: Any) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        for agent_id, callbacks in self.subscribers.items():
            for callback in callbacks:
                try:
                    if asyncio.iscoroutinefunction(callback):
                        await callback(event_type, data)
                    else:
                        callback(event_type, data)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ {agent_id}: {e}")
    
    def _generate_message_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self._message_counter += 1
        return f"{self.team_id}_msg_{self._message_counter}_{int(datetime.now().timestamp())}"
    
    def clear_history(self, keep_last: int = 100) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if len(self.messages) > keep_last:
            removed_count = len(self.messages) - keep_last
            self.messages = self.messages[-keep_last:]
            logger.info(f"–û—á–∏—â–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞")
    
    def export_conversation(self) -> Dict[str, Any]:
        """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        return {
            'team_id': self.team_id,
            'agents': {
                agent_id: {
                    'role': agent.agent_role,
                    'status': agent.status,
                    'last_seen': agent.last_seen.isoformat()
                }
                for agent_id, agent in self.agents.items()
            },
            'messages': [
                {
                    'id': msg.id,
                    'sender': msg.sender,
                    'sender_role': msg.sender_role,
                    'content': msg.content,
                    'type': msg.message_type,
                    'timestamp': msg.timestamp.isoformat(),
                    'addressed_to': msg.addressed_to,
                    'metadata': msg.metadata
                }
                for msg in self.messages
            ],
            'total_messages': len(self.messages),
            'coordinator': self.coordinator_id
        } 