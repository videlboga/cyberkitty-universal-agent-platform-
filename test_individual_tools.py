#!/usr/bin/env python3
"""
–ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ö–ê–ñ–î–û–ì–û –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê
–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
"""

import sys
import time
sys.path.append('.')

def test_media_tool():
    """–¢–µ—Å—Ç MediaTool"""
    print("üé® –¢–ï–°–¢ MEDIA TOOL")
    print("-" * 30)
    
    try:
        from kittycore.tools.media_tool import MediaTool
        tool = MediaTool()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤
        result = tool.execute("list_formats")
        
        if result.success:
            formats = result.data
            print(f"‚úÖ MediaTool —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {len(formats.get('image_formats', []))} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            print(f"   –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {list(formats.get('capabilities', {}).keys())}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.error}")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
    
    print()

def test_super_system_tool():
    """–¢–µ—Å—Ç SuperSystemTool"""
    print("üöÄ –¢–ï–°–¢ SUPER SYSTEM TOOL")
    print("-" * 30)
    
    try:
        from kittycore.tools.super_system_tool import SuperSystemTool
        tool = SuperSystemTool()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        result = tool.execute("execute_command", command="echo 'KittyCore —Ç–µ—Å—Ç'")
        
        if result.success:
            output = result.data.get("stdout", "").strip()
            print(f"‚úÖ SuperSystemTool —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"   –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {output}")
            print(f"   –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.data.get('returncode', 'unknown')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.error}")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
    
    print()

def test_api_request_tool():
    """–¢–µ—Å—Ç ApiRequestTool"""
    print("üåê –¢–ï–°–¢ API REQUEST TOOL")
    print("-" * 30)
    
    try:
        from kittycore.tools.api_request_tool import ApiRequestTool
        tool = ApiRequestTool()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - GET –∑–∞–ø—Ä–æ—Å
        result = tool.execute("get", url="https://httpbin.org/uuid")
        
        if result.success:
            status = result.data.get("status_code", "unknown")
            print(f"‚úÖ ApiRequestTool —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"   HTTP —Å—Ç–∞—Ç—É—Å: {status}")
            print(f"   –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(str(result.data))} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º UUID –∏–∑ –æ—Ç–≤–µ—Ç–∞
            response = result.data.get("response", {})
            if "uuid" in response:
                print(f"   UUID: {response['uuid'][:8]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.error}")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
    
    print()

def test_network_tool():
    """–¢–µ—Å—Ç NetworkTool"""
    print("üåê –¢–ï–°–¢ NETWORK TOOL")
    print("-" * 30)
    
    try:
        from kittycore.tools.network_tool import NetworkTool
        tool = NetworkTool()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - ping
        result = tool.execute("ping_host", host="8.8.8.8", count=2)
        
        if result.success:
            ping_data = result.data
            print(f"‚úÖ NetworkTool —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"   Ping 8.8.8.8: {ping_data.get('success', False)}")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {ping_data.get('avg_time', 0):.1f}–º—Å")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.error}")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
    
    print()

def test_security_tool():
    """–¢–µ—Å—Ç SecurityTool"""
    print("üîí –¢–ï–°–¢ SECURITY TOOL")
    print("-" * 30)
    
    try:
        from kittycore.tools.security_tool import SecurityTool
        tool = SecurityTool()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–æ–ª—è
        result = tool.execute("analyze_password", password="TestPassword123!")
        
        if result.success:
            analysis = result.data
            print(f"‚úÖ SecurityTool —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"   –°–∏–ª–∞ –ø–∞—Ä–æ–ª—è: {analysis.get('strength', 'unknown')}")
            print(f"   –û—Ü–µ–Ω–∫–∞: {analysis.get('score', 0)}/100")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.error}")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
    
    print()

if __name__ == "__main__":
    print("üß™ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0")
    print("=" * 55)
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
    test_media_tool()
    test_super_system_tool()
    test_api_request_tool()
    test_network_tool()
    test_security_tool()
    
    print("=" * 55)
    print("‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
