"""
Channel Manager –¥–ª—è Universal Agent Platform.
–ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!

–£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª–∞–º–∏:
1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
2. –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
3. –ü—Ä–∏ —Å–æ–±—ã—Ç–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–∞–Ω–∞–ª–∞
4. –°—Ü–µ–Ω–∞—Ä–∏–∏ –¢–û–õ–¨–ö–û –∏–∑ –ë–î
"""

import asyncio
from typing import Dict, List, Optional
from loguru import logger

from app.core.simple_engine import SimpleScenarioEngine
from app.plugins.simple_telegram_plugin import SimpleTelegramPlugin


class ChannelManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
    
    –ü—Ä–∏–Ω—Ü–∏–ø—ã:
    1. –ö–∞–Ω–∞–ª—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–≤–æ–π Telegram –ø–ª–∞–≥–∏–Ω —Å –ø–æ–ª–ª–∏–Ω–≥–æ–º
    3. –ü—Ä–∏ —Å–æ–±—ã—Ç–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–∞–Ω–∞–ª–∞ –∏–∑ –ë–î
    4. –ù–∏–∫–∞–∫–∏—Ö fallback —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ - —Ç–æ–ª—å–∫–æ –ë–î
    """
    
    def __init__(self, engine: SimpleScenarioEngine):
        self.engine = engine
        self.channels: Dict[str, Dict] = {}  # channel_id -> channel_data
        self.telegram_plugins: Dict[str, SimpleTelegramPlugin] = {}  # channel_id -> plugin
        self.polling_tasks: Dict[str, asyncio.Task] = {}  # channel_id -> task
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤."""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Channel Manager...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î
        await self._load_channels_from_db()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        await self._start_all_polling()
        
        logger.info(f"‚úÖ Channel Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(self.channels)}")
        
    async def _load_channels_from_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞–ø–ø–∏–Ω–≥–∏ –∫–∞–Ω–∞–ª–æ–≤
            step = {
                "id": "find_channels",
                "type": "mongo_find_documents",
                "params": {
                    "collection": "channel_mappings",
                    "filter": {},
                    "output_var": "find_result"
                }
            }
            context = {}
            result_context = await self.engine.execute_step(step, context)
            result = result_context.get("find_result", {})
            
            if result.get("success") and result.get("documents"):
                for channel_doc in result["documents"]:
                    channel_id = channel_doc.get("channel_id")
                    if channel_id:
                        self.channels[channel_id] = channel_doc
                        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω –∫–∞–Ω–∞–ª: {channel_id}")
                        
                logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ë–î: {len(self.channels)}")
            else:
                logger.warning("‚ö†Ô∏è –ö–∞–Ω–∞–ª—ã –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ë–î: {e}")
            
    async def _start_all_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤."""
        for channel_id, channel_data in self.channels.items():
            await self._start_channel_polling(channel_id, channel_data)
            
    async def _start_channel_polling(self, channel_id: str, channel_data: Dict):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞
            channel_config = channel_data.get("channel_config", {})
            bot_token = channel_config.get("telegram_bot_token")
            
            if not bot_token:
                logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                return
                
            # –°–æ–∑–¥–∞–µ–º Telegram –ø–ª–∞–≥–∏–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞
            telegram_plugin = SimpleTelegramPlugin(bot_token=bot_token, channel_id=channel_id)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            telegram_plugin.set_command_callback(
                lambda update, context: self._handle_channel_event(channel_id, "command", update, context)
            )
            telegram_plugin.set_message_callback(
                lambda update, context: self._handle_channel_event(channel_id, "message", update, context)
            )
            telegram_plugin.set_callback_query_callback(
                lambda update, context: self._handle_channel_event(channel_id, "callback_query", update, context)
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
            await telegram_plugin._do_initialize()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
            polling_task = asyncio.create_task(telegram_plugin.start_polling())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–≥–∏–Ω –∏ –∑–∞–¥–∞—á—É
            self.telegram_plugins[channel_id] = telegram_plugin
            self.polling_tasks[channel_id] = polling_task
            
            logger.info(f"üöÄ –ü–æ–ª–ª–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            
    async def _handle_channel_event(self, channel_id: str, event_type: str, update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞ - –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –ë–î."""
        try:
            logger.info(f"üì® –°–æ–±—ã—Ç–∏–µ {event_type} –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
            channel_data = self.channels.get(channel_id)
            if not channel_data:
                logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º scenario_id –∫–∞–Ω–∞–ª–∞
            scenario_id = channel_data.get("scenario_id")
            if not scenario_id:
                logger.error(f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                return
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –ë–î
            scenario = await self._load_scenario_from_db(scenario_id)
            if not scenario:
                logger.error(f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return
                
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–±—ã—Ç–∏—è
            event_context = self._extract_context_from_event(update, context, event_type)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            event_context.update({
                "channel_id": channel_id,
                "scenario_id": scenario_id,
                "event_type": event_type
            })
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
            logger.info(f"üé≠ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            final_context = await self.engine.execute_scenario(scenario, event_context)
            
            logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event_type} –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
            
    async def _load_scenario_from_db(self, scenario_id: str) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –ë–î. –¢–û–õ–¨–ö–û –ë–î, –Ω–∏–∫–∞–∫–∏—Ö fallback!"""
        try:
            step = {
                "id": "get_scenario",
                "type": "mongo_get_scenario",
                "params": {
                    "scenario_id": scenario_id,
                    "output_var": "scenario_result"
                }
            }
            context = {}
            result_context = await self.engine.execute_step(step, context)
            
            if result_context.get("scenario_result", {}).get("success"):
                return result_context["scenario_result"]["scenario"]
            else:
                logger.error(f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id} –∏–∑ –ë–î: {e}")
            return None
            
    def _extract_context_from_event(self, update, context, event_type: str) -> Dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Telegram —Å–æ–±—ã—Ç–∏—è."""
        event_context = {}
        
        if update.effective_user:
            event_context.update({
                "user_id": str(update.effective_user.id),
                "user_name": update.effective_user.username or update.effective_user.first_name,
                "telegram_user_id": update.effective_user.id,
                "telegram_username": update.effective_user.username,
                "telegram_first_name": update.effective_user.first_name,
                "telegram_last_name": update.effective_user.last_name,
            })
            
        if update.effective_chat:
            event_context.update({
                "chat_id": str(update.effective_chat.id),
                "telegram_chat_id": update.effective_chat.id,
            })
            
        if event_type == "command" and update.message:
            event_context.update({
                "command": update.message.text,
                "message_text": update.message.text,
            })
        elif event_type == "message" and update.message:
            event_context.update({
                "message_text": update.message.text,
            })
        elif event_type == "callback_query" and update.callback_query:
            event_context.update({
                "callback_data": update.callback_query.data,
                "message_id": update.callback_query.message.message_id if update.callback_query.message else None,
            })
            
        return event_context
        
    async def stop_all_polling(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤."""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤...")
        
        for channel_id, task in self.polling_tasks.items():
            try:
                task.cancel()
                await task
            except asyncio.CancelledError:
                pass
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª–ª–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
                
        for channel_id, plugin in self.telegram_plugins.items():
            try:
                await plugin.stop_polling()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
                
        logger.info("üõë –í—Å–µ –∫–∞–Ω–∞–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    async def reload_channels(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î."""
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã
        await self.stop_all_polling()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.channels.clear()
        self.telegram_plugins.clear()
        self.polling_tasks.clear()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
        await self._load_channels_from_db()
        await self._start_all_polling()
        
        logger.info(f"üîÑ –ö–∞–Ω–∞–ª—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(self.channels)}") 