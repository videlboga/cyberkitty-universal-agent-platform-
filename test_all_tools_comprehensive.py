#!/usr/bin/env python3
"""
üß™ COMPREHENSIVE –†–ï–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0
–ë–µ–∑ –º–æ–∫–æ–≤! –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

–¶–ï–õ–¨: –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ 18 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã API –∫–ª—é—á–µ–π, 
–∑–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–º—è—Ç—å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
"""

import sys
import asyncio
import json
import time
from pathlib import Path
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.append(str(Path(__file__).parent / 'kittycore'))

from kittycore.tools import (
    # –£–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
    # EnhancedWebSearchTool, MediaTool, NetworkTool, CodeExecutionTool, DataAnalysisTool,
    
    # –ù–û–í–´–ï –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    EnhancedWebScrapingTool,  # 1. –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥
    ApiRequestTool,           # 2. API –∑–∞–ø—Ä–æ—Å—ã  
    WebClient,                # 3. –í–µ–±-–∫–ª–∏–µ–Ω—Ç
    SuperSystemTool,          # 4. –°–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    DocumentTool,             # 5. –î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç
    ComputerUseTool,          # 6. GUI –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
    AIIntegrationTool,        # 7. AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    SecurityTool,             # 8. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    ImageGenerationTool,      # 9. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    SmartFunctionTool,        # 10. –£–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    DatabaseTool,             # 11. –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    VectorSearchTool,         # 12. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
    EmailTool,                # 13. Email
    TelegramTool              # 14. Telegram
)

class ComprehensiveToolsTester:
    def __init__(self):
        self.results = []
        self.memory_records = []
        self.total_tests = 0
        self.successful_tests = 0
        self.missing_keys = []
        
    async def test_tool_async(self, tool, tool_name: str, test_config: dict) -> dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        start_time = time.time()
        
        try:
            result = await tool.execute(**test_config.get("params", {}))
            execution_time = time.time() - start_time
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if hasattr(result, 'success') and result.success:
                response_data = getattr(result, 'data', {})
                response_size = len(str(response_data))
                
                if response_size > 50:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    success = True
                    notes = f"‚úÖ –í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä: {response_size} –±–∞–π—Ç"
                else:
                    success = False
                    notes = f"‚ùå –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π –æ—Ç–≤–µ—Ç: {response_size} –±–∞–π—Ç"
            else:
                success = False
                error_msg = getattr(result, 'error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                notes = f"‚ùå –û—à–∏–±–∫–∞: {error_msg}"
                
        except Exception as e:
            execution_time = time.time() - start_time
            success = False
            notes = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ API –∫–ª—é—á–µ–π
            error_str = str(e).lower()
            if any(key_hint in error_str for key_hint in ['api', 'key', 'token', 'auth']):
                if tool_name not in [record["tool"] for record in self.missing_keys]:
                    self.missing_keys.append({
                        "tool": tool_name,
                        "error": str(e),
                        "likely_missing_key": self._extract_key_requirement(str(e))
                    })
        
        return {
            "tool": tool_name,
            "success": success,
            "execution_time": execution_time,
            "notes": notes,
            "test_config": test_config
        }
    
    def test_tool_sync(self, tool, tool_name: str, test_config: dict) -> dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        start_time = time.time()
        
        try:
            result = tool.execute(**test_config.get("params", {}))
            execution_time = time.time() - start_time
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if hasattr(result, 'success') and result.success:
                response_data = getattr(result, 'data', {})
                response_size = len(str(response_data))
                
                if response_size > 50:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    success = True
                    notes = f"‚úÖ –í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä: {response_size} –±–∞–π—Ç"
                else:
                    success = False
                    notes = f"‚ùå –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π –æ—Ç–≤–µ—Ç: {response_size} –±–∞–π—Ç"
            else:
                success = False
                error_msg = getattr(result, 'error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                notes = f"‚ùå –û—à–∏–±–∫–∞: {error_msg}"
                
        except Exception as e:
            execution_time = time.time() - start_time
            success = False
            notes = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ API –∫–ª—é—á–µ–π
            error_str = str(e).lower()
            if any(key_hint in error_str for key_hint in ['api', 'key', 'token', 'auth']):
                if tool_name not in [record["tool"] for record in self.missing_keys]:
                    self.missing_keys.append({
                        "tool": tool_name,
                        "error": str(e),
                        "likely_missing_key": self._extract_key_requirement(str(e))
                    })
        
        return {
            "tool": tool_name,
            "success": success,
            "execution_time": execution_time,
            "notes": notes,
            "test_config": test_config
        }
    
    def _extract_key_requirement(self, error_msg: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ API –∫–ª—é—á–∞ –∏–∑ –æ—à–∏–±–∫–∏"""
        error_lower = error_msg.lower()
        
        key_patterns = {
            "openrouter": "OPENROUTER_API_KEY",
            "replicate": "REPLICATE_API_TOKEN", 
            "telegram": "TELEGRAM_BOT_TOKEN",
            "email": "EMAIL_PASSWORD –∏–ª–∏ SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            "database": "DATABASE_URL –∏–ª–∏ DB_CONNECTION",
            "openai": "OPENAI_API_KEY",
            "anthropic": "ANTHROPIC_API_KEY"
        }
        
        for pattern, key_name in key_patterns.items():
            if pattern in error_lower:
                return key_name
                
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π API –∫–ª—é—á (—Å–º. –æ—à–∏–±–∫—É)"
    
    async def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        
        print("üß™ COMPREHENSIVE –†–ï–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0")
        print("=" * 80)
        print("üö´ –ë–ï–ó –ú–û–ö–û–í! –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã")
        print("üîç –¶–µ–ª—å: –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∑–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–º—è—Ç—å")
        print()
        
        # === –¢–ï–°–¢–û–í–´–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===
        test_configs = {
            # 1. –í–ï–ë-–ò–ù–°–¢–†–£–ú–ï–ù–¢–´
            "enhanced_web_scraping": {
                "tool_class": EnhancedWebScrapingTool,
                "is_async": True,
                "params": {"url": "https://httpbin.org/json", "extract_text": True}
            },
            "api_request": {
                "tool_class": ApiRequestTool,
                "is_async": False,
                "params": {"url": "https://httpbin.org/get", "method": "GET"}
            },
            "web_client": {
                "tool_class": WebClient,
                "is_async": False,
                "params": {"action": "get", "url": "https://httpbin.org/user-agent"}
            },
            
            # 2. –°–ò–°–¢–ï–ú–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´
            "super_system": {
                "tool_class": SuperSystemTool,
                "is_async": False,
                "params": {"action": "list_processes", "limit": 5}
            },
            "document": {
                "tool_class": DocumentTool,
                "is_async": False,
                "params": {"action": "get_info"}
            },
            "computer_use": {
                "tool_class": ComputerUseTool,
                "is_async": False,
                "params": {"action": "screenshot"}
            },
            
            # 3. AI –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨
            "ai_integration": {
                "tool_class": AIIntegrationTool,
                "is_async": True,
                "params": {"action": "list_models"}
            },
            "security": {
                "tool_class": SecurityTool,
                "is_async": False,
                "params": {"action": "system_scan"}
            },
            
            # 4. –ö–†–ï–ê–¢–ò–í–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´
            "image_generation": {
                "tool_class": ImageGenerationTool,
                "is_async": True,
                "params": {"action": "get_info"}
            },
            "smart_function": {
                "tool_class": SmartFunctionTool,
                "is_async": False,
                "params": {"action": "get_info"}
            },
            
            # 5. –î–ê–ù–ù–´–ï –ò –ü–û–ò–°–ö
            "database": {
                "tool_class": DatabaseTool,
                "is_async": False,
                "params": {"action": "get_info"}
            },
            "vector_search": {
                "tool_class": VectorSearchTool,
                "is_async": False,
                "params": {"action": "get_info"}
            },
            
            # 6. –ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–Ø
            "email": {
                "tool_class": EmailTool,
                "is_async": False,
                "params": {"action": "get_info"}
            },
            "telegram": {
                "tool_class": TelegramTool,
                "is_async": False,
                "params": {"action": "get_info"}
            }
        }
        
        # === –í–´–ü–û–õ–ù–ï–ù–ò–ï –¢–ï–°–¢–û–í ===
        for tool_name, config in test_configs.items():
            print(f"üîß –¢–µ—Å—Ç–∏—Ä—É—é {tool_name}...")
            
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                tool = config["tool_class"]()
                self.total_tests += 1
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
                if config["is_async"]:
                    result = await self.test_tool_async(tool, tool_name, config)
                else:
                    result = self.test_tool_sync(tool, tool_name, config)
                
                self.results.append(result)
                
                if result["success"]:
                    self.successful_tests += 1
                    print(f"   ‚úÖ {result['notes']}")
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–∞–º—è—Ç–∏
                    self.memory_records.append({
                        "tool": tool_name,
                        "working_action": config["params"].get("action", "default"),
                        "correct_params": config["params"],
                        "notes": result["notes"],
                        "success": True,
                        "response_size": len(result["notes"])
                    })
                else:
                    print(f"   ‚ùå {result['notes']}")
                    
            except Exception as e:
                print(f"   üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)[:100]}")
                self.results.append({
                    "tool": tool_name,
                    "success": False,
                    "execution_time": 0,
                    "notes": f"üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)[:100]}",
                    "test_config": config
                })
        
        # === –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===
        self._print_results()
        self._save_results()
    
    def _print_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ COMPREHENSIVE –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        success_rate = (self.successful_tests / self.total_tests * 100) if self.total_tests > 0 else 0
        print(f"üéØ –û–±—â–∏–π —É—Å–ø–µ—Ö: {self.successful_tests}/{self.total_tests} = {success_rate:.1f}%")
        
        # –£—Å–ø–µ—à–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        successful = [r for r in self.results if r["success"]]
        if successful:
            print(f"\n‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ({len(successful)}):")
            for result in successful:
                print(f"   üîß {result['tool']}: {result['notes']}")
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        failed = [r for r in self.results if not r["success"]]
        if failed:
            print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ({len(failed)}):")
            for result in failed:
                print(f"   üîß {result['tool']}: {result['notes']}")
        
        # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ API –∫–ª—é—á–∏
        if self.missing_keys:
            print(f"\nüîë –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï API –ö–õ–Æ–ß–ò ({len(self.missing_keys)}):")
            for missing in self.missing_keys:
                print(f"   üîß {missing['tool']}: {missing['likely_missing_key']}")
                print(f"      –û—à–∏–±–∫–∞: {missing['error'][:100]}...")
    
    def _save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = "test_all_tools_comprehensive/detailed_results.json"
        Path("test_all_tools_comprehensive").mkdir(exist_ok=True)
        
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump({
                "summary": {
                    "total_tests": self.total_tests,
                    "successful_tests": self.successful_tests,
                    "success_rate": (self.successful_tests / self.total_tests * 100) if self.total_tests > 0 else 0
                },
                "results": self.results,
                "missing_keys": self.missing_keys
            }, f, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–∞–º—è—Ç–∏
        memory_file = "test_all_tools_comprehensive/memory_records.json"
        with open(memory_file, 'w', encoding='utf-8') as f:
            json.dump(self.memory_records, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print(f"   üìÑ –î–µ—Ç–∞–ª–∏: {results_file}")
        print(f"   üß† –ü–∞–º—è—Ç—å: {memory_file}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ComprehensiveToolsTester()
    await tester.run_comprehensive_test()

if __name__ == "__main__":
    asyncio.run(main()) 