#!/usr/bin/env python3
"""
üîß –£–ü–†–û–©–ï–ù–ù–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò - –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
–ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!

–£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º create_engine –∏–∑ simple_engine.py
"""

import os
import asyncio
from typing import Optional
from loguru import logger

from app.core.simple_engine import SimpleScenarioEngine, create_engine

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logger.add(
    "logs/dependencies.log",
    rotation="10 MB",
    retention="7 days",
    compression="gz",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {name}:{function}:{line} | {message}",
    level="INFO"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
_engine: Optional[SimpleScenarioEngine] = None
_lock = asyncio.Lock()


async def get_simple_engine() -> SimpleScenarioEngine:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π SimpleScenarioEngine.
    
    Singleton pattern - —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç create_engine() –∏–∑ simple_engine.py –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    global _engine
    
    async with _lock:
        if _engine is None:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SimpleScenarioEngine —á–µ—Ä–µ–∑ create_engine()...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º create_engine –∏–∑ simple_engine.py
            _engine = await create_engine()
            
            logger.info("üéØ SimpleScenarioEngine –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ create_engine()")
            
        return _engine


async def cleanup_engine():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–≤–∏–∂–∫–∞."""
    global _engine
    
    if _engine:
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ SimpleScenarioEngine...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞–≥–∏–Ω–æ–≤
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
        
        _engine = None
        logger.info("‚úÖ SimpleScenarioEngine –æ—á–∏—â–µ–Ω")


# === –£–¢–ò–õ–ò–¢–´ ===

def is_initialized() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞."""
    return _engine is not None


async def healthcheck() -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã.
    
    Returns:
        dict: –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    """
    if not _engine:
        return {
            "healthy": False,
            "reason": "System not initialized"
        }
    
    try:
        engine_healthy = await _engine.healthcheck()
        
        if engine_healthy:
            return {
                "healthy": True,
                "engine": "SimpleScenarioEngine",
                "plugins": _engine.get_registered_plugins(),
                "handlers": _engine.get_registered_handlers()
            }
        else:
            return {
                "healthy": False,
                "reason": "Engine healthcheck failed"
            }
            
    except Exception as e:
        logger.error(f"Healthcheck error: {e}")
        return {
            "healthy": False,
            "reason": f"Healthcheck exception: {e}"
        }


# === ENVIRONMENT VALIDATION ===

def validate_environment():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    –í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
    """
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    optional_vars = {
        "TELEGRAM_BOT_TOKEN": "Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        "MONGODB_URI": "MongoDB –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 
        "OPENROUTER_API_KEY": "LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        "RAG_URL": "RAG –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://rag.cyberkitty.tech)"
    }
    
    for var_name, warning_msg in optional_vars.items():
        value = os.getenv(var_name)
        if value:
            # –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —á–∞—Å—Ç–∏
            if "KEY" in var_name or "TOKEN" in var_name:
                masked = value[:8] + "..." if len(value) > 8 else "***"
                logger.info(f"‚úÖ {var_name}: {masked}")
            else:
                logger.info(f"‚úÖ {var_name}: {value}")
        else:
            logger.warning(f"‚ö†Ô∏è {var_name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {warning_msg}")
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ò–ú–ü–û–†–¢–ï ===

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
validate_environment()

logger.info("üì¶ –ú–æ–¥—É–ª—å simple_dependencies –∑–∞–≥—Ä—É–∂–µ–Ω")
logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_simple_engine() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–≤–∏–∂–∫–∞") 