#!/usr/bin/env python3
"""
üöÄ –ü–†–ò–ú–ï–† API –ó–ê–ü–†–û–°–ê –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ë–ò–¢–†–ò–ö–°24
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞—Ç–∏–≤–Ω–æ
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è KittyCore API
KITTYCORE_API_URL = "http://localhost:8085"
CHANNEL_ID = "telegram_channel_1"

def send_bitrix_analysis_request():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24"""
    
    print("üöÄ –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê –ù–ê –ê–ù–ê–õ–ò–ó –ë–ò–¢–†–ò–ö–°24")
    print("=" * 50)
    
    # Payload –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∞–Ω–∞–ª–∏–∑–∞
    payload = {
        "user_id": "user_bitrix_analyst",
        "chat_id": "chat_bitrix_project", 
        "scenario_id": "bitrix_market_analysis",
        "context": {
            "user_message": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä—ã–Ω–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ë–∏—Ç—Ä–∏–∫—Å24 –∏ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX",
            "project_type": "market_analysis",
            "target_platform": "bitrix24",
            "analysis_depth": "comprehensive",
            "deliverables": [
                "market_research",
                "competitor_analysis", 
                "ux_audit",
                "prototypes",
                "technical_specs"
            ]
        }
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {KITTYCORE_API_URL}")
    print(f"üéØ –°—Ü–µ–Ω–∞—Ä–∏–π: {payload['scenario_id']}")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payload['user_id']}")
    print(f"üí¨ –ó–∞–ø—Ä–æ—Å: {payload['context']['user_message']}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ KittyCore API
        response = requests.post(
            f"{KITTYCORE_API_URL}/api/v1/simple/channels/{CHANNEL_ID}/execute",
            json=payload,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        print(f"\nüì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
        print(f"   Status Code: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ –£—Å–ø–µ—Ö: {result.get('success', False)}")
            print(f"   üéØ –°—Ü–µ–Ω–∞—Ä–∏–π: {result.get('scenario_id', 'unknown')}")
            print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
            
            if result.get('final_context'):
                context = result['final_context']
                print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–ò:")
                
                if 'selected_agent' in context:
                    print(f"   ü§ñ –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç: {context['selected_agent']}")
                    print(f"   üéØ –°—Ü–µ–Ω–∞—Ä–∏–π –∞–≥–µ–Ω—Ç–∞: {context.get('agent_scenario', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                    print(f"   üîß –ú–µ—Ç–æ–¥: {context.get('routing_method', 'unknown')}")
                
                if 'request_type' in context:
                    print(f"   üìã –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {context['request_type']}")
            
            return result
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return None

def monitor_scenario_execution(scenario_id: str, timeout: int = 60):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    
    print(f"\nüîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –í–´–ü–û–õ–ù–ï–ù–ò–Ø –°–¶–ï–ù–ê–†–ò–Ø: {scenario_id}")
    print("-" * 50)
    
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            response = requests.get(
                f"{KITTYCORE_API_URL}/api/v1/simple/info",
                timeout=10
            )
            
            if response.status_code == 200:
                info = response.json()
                print(f"üîÑ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞: {info.get('status', 'unknown')}")
                
                # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
                # –ù–∞–ø—Ä–∏–º–µ—Ä: /api/v1/simple/scenarios/{scenario_id}/status
                
            time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            break
    
    print(f"‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω (—Ç–∞–π–º–∞—É—Ç: {timeout}—Å)")

def demonstrate_native_requests():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–∏—Å—Ç–µ–º–µ"""
    
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ù–ê–¢–ò–í–ù–û–ô –†–ê–ë–û–¢–´ –° KITTYCORE")
    print("=" * 60)
    
    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑
    result = send_bitrix_analysis_request()
    
    if result and result.get('success'):
        scenario_id = result.get('scenario_id')
        
        print(f"\n‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç —Å–∏—Å—Ç–µ–º–æ–π!")
        print(f"üéØ ID —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario_id}")
        
        # 2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        if scenario_id:
            monitor_scenario_execution(scenario_id, timeout=30)
        
        # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        demonstrate_additional_requests()
    else:
        print(f"\n‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç —Å–∏—Å—Ç–µ–º–æ–π")

def demonstrate_additional_requests():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    print(f"\nüß™ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ò–ü–´ –ó–ê–ü–†–û–°–û–í")
    print("-" * 40)
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å
    additional_requests = [
        {
            "name": "–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞",
            "payload": {
                "scenario_id": "quick_competitor_analysis",
                "context": {
                    "user_message": "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ 'CRM Analytics' –≤ –ë–∏—Ç—Ä–∏–∫—Å24 –º–∞—Ä–∫–µ—Ç–µ",
                    "analysis_type": "competitor_single"
                }
            }
        },
        {
            "name": "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞",
            "payload": {
                "scenario_id": "prototype_creation",
                "context": {
                    "user_message": "–°–æ–∑–¥–∞–π wireframes –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ CRM –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    "design_type": "wireframes",
                    "platform": "mobile"
                }
            }
        },
        {
            "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "payload": {
                "scenario_id": "technical_specification",
                "context": {
                    "user_message": "–ù–∞–ø–∏—à–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–∏—Ç—Ä–∏–∫—Å24",
                    "doc_type": "technical_spec",
                    "integration_target": "bitrix24_api"
                }
            }
        }
    ]
    
    for req in additional_requests:
        print(f"\nüìã {req['name']}:")
        print(f"   üéØ –°—Ü–µ–Ω–∞—Ä–∏–π: {req['payload']['scenario_id']}")
        print(f"   üí¨ –ó–∞–ø—Ä–æ—Å: {req['payload']['context']['user_message']}")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã
        print(f"   üì§ [–°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞...]")

def show_system_architecture():
    """–ü–æ–∫–∞–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    print(f"\nüèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ü–†–û–°–û–í")
    print("=" * 50)
    
    architecture_flow = [
        "1. üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å ‚Üí API endpoint (/api/v1/simple/channels/{channel_id}/execute)",
        "2. üß† LLM Router Plugin ‚Üí –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ (llm_classify_request)",
        "3. üéØ –£–º–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è ‚Üí –í—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞ (llm_route_task)", 
        "4. üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è ‚Üí –ê–≥–µ–Ω—Ç-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π",
        "5. ü§ñ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º ‚Üí –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        "6. üìä –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Üí –ö–æ–º–ø–∏–ª—è—Ü–∏—è –æ—Ç—á–µ—Ç–∞",
        "7. üì§ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Üí channel_action (send_message)"
    ]
    
    for step in architecture_flow:
        print(f"   {step}")
    
    print(f"\nüîß –ö–õ–Æ–ß–ï–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
    print(f"   ‚Ä¢ SimpleScenarioEngine - –æ—Å–Ω–æ–≤–Ω–æ–π –¥–≤–∏–∂–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    print(f"   ‚Ä¢ SimpleLLMRouterPlugin - –ø–ª–∞–≥–∏–Ω —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏")
    print(f"   ‚Ä¢ Agent Scenarios - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤")
    print(f"   ‚Ä¢ Channel Plugins - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞")

if __name__ == "__main__":
    print("üöÄ KITTYCORE NATIVE REQUEST DEMONSTRATION")
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
    show_system_architecture()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É (—Å–∏–º—É–ª—è—Ü–∏—è, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–ø—É—â–µ–Ω)
    print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    print(f"   –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π KittyCore —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8085")
    
    # demonstrate_native_requests()  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ 