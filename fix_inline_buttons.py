#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã inline –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö OntoBot.
–ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å Array of Arrays –¥–ª—è Telegram API.
"""

import requests
import json
import sys

API_BASE = "http://localhost:8085/api/v1/simple"

def get_scenarios():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ OntoBot"""
    response = requests.post(f"{API_BASE}/mongo/find", json={
        "collection": "scenarios",
        "filter": {"scenario_id": {"$regex": "^mr_ontobot"}}
    })
    
    if response.status_code == 200:
        data = response.json()
        if data["success"]:
            return data["data"]
    
    print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    return []

def fix_buttons_structure(buttons):
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–Ω–æ–ø–æ–∫ - –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ"""
    if not buttons:
        return buttons
    
    # –ï—Å–ª–∏ —É–∂–µ –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    if isinstance(buttons[0], list):
        return buttons
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
    return [[button] for button in buttons]

def update_scenario(scenario):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    scenario_id = scenario.get("scenario_id", "unknown")
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario_id}")
    
    updated = False
    steps = scenario.get("steps", [])
    
    for step in steps:
        # –ò—â–µ–º —à–∞–≥–∏ —Å channel_action –∏ send_buttons
        if (step.get("type") == "channel_action" and 
            step.get("params", {}).get("action") == "send_buttons"):
            
            buttons = step["params"].get("buttons", [])
            if buttons:
                # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è request_contact - –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å reply
                step_id = step.get("id", "")
                if "request_contact" in step_id or "contact" in step.get("params", {}).get("text", "").lower():
                    print(f"  ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é {step_id} - —ç—Ç–æ reply –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞")
                    continue
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º inline –∫–Ω–æ–ø–∫–∏
                original_structure = json.dumps(buttons, ensure_ascii=False)
                fixed_buttons = fix_buttons_structure(buttons)
                new_structure = json.dumps(fixed_buttons, ensure_ascii=False)
                
                if original_structure != new_structure:
                    step["params"]["buttons"] = fixed_buttons
                    updated = True
                    print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —à–∞–≥ {step_id}")
                    print(f"     –ë—ã–ª–æ: {original_structure}")
                    print(f"     –°—Ç–∞–ª–æ: {new_structure}")
    
    if updated:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        response = requests.post(f"{API_BASE}/mongo/update", json={
            "collection": "scenarios",
            "filter": {"scenario_id": scenario_id},
            "document": {"steps": steps}
        })
        
        if response.status_code == 200:
            data = response.json()
            if data["success"]:
                print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {scenario_id}: {data.get('error')}")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {scenario_id}: {response.status_code}")
    else:
        print(f"  ‚ÑπÔ∏è –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    return updated

def main():
    print("üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã inline –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö OntoBot")
    print("=" * 60)
    
    scenarios = get_scenarios()
    if not scenarios:
        print("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        sys.exit(1)
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenarios)}")
    
    updated_count = 0
    for scenario in scenarios:
        if update_scenario(scenario):
            updated_count += 1
        print()
    
    print("=" * 60)
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {updated_count}")
    
    if updated_count > 0:
        print("\nüîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")

if __name__ == "__main__":
    main() 