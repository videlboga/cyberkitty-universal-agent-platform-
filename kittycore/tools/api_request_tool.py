"""
üåê API Request Tool - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP API –∫–ª–∏–µ–Ω—Ç

–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –í—Å–µ HTTP –º–µ—Ç–æ–¥—ã (GET, POST, PUT, DELETE, PATCH)
- –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
- JSON –¥–∞–Ω–Ω—ã–µ
- URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
- –¢–∞–π–º–∞—É—Ç—ã
"""

import time
from typing import Dict, Any, List

from .web_common import (
    Tool, ToolResult, requests,
    create_headers, ApiResponse
)


class ApiRequestTool(Tool):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è HTTP API –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        super().__init__(
            name="api_request",
            description="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"
        )
    
    def execute(self, url: str, method: str = "GET", headers: Dict = None, 
               data: Dict = None, params: Dict = None, timeout: int = 30) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å API –∑–∞–ø—Ä–æ—Å"""
        start_time = time.time()
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            request_headers = create_headers()
            request_headers.update({
                'Accept': 'application/json'
            })
            
            if headers:
                request_headers.update(headers)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.request(
                method=method.upper(),
                url=url,
                headers=request_headers,
                json=data if data else None,
                params=params,
                timeout=timeout
            )
            
            response_time = time.time() - start_time
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            try:
                response_data = response.json()
            except:
                response_data = {
                    "content": response.text[:1000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                    "content_type": response.headers.get('content-type', 'unknown'),
                    "is_text": True
                }
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            api_response = ApiResponse(
                url=url,
                status_code=response.status_code,
                success=200 <= response.status_code < 300,
                data=response_data,
                headers=dict(response.headers),
                response_time=response_time
            )
            
            return ToolResult(
                success=True,
                data={
                    "request": {
                        "url": url,
                        "method": method.upper(),
                        "headers": request_headers,
                        "data": data,
                        "params": params,
                        "timeout": timeout
                    },
                    "response": {
                        "status_code": api_response.status_code,
                        "success": api_response.success,
                        "data": api_response.data,
                        "headers": api_response.headers,
                        "response_time": api_response.response_time,
                        "content_length": len(response.content),
                        "encoding": response.encoding
                    },
                    "metadata": {
                        "url_final": response.url,
                        "redirected": str(response.url) != url,
                        "cookies": dict(response.cookies),
                        "reason": response.reason,
                        "elapsed_seconds": response.elapsed.total_seconds()
                    }
                }
            )
            
        except requests.exceptions.Timeout:
            return ToolResult(
                success=False,
                error=f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ {url} (–ª–∏–º–∏—Ç: {timeout}—Å)"
            )
        except requests.exceptions.ConnectionError:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {url}"
            )
        except requests.exceptions.RequestException as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
    
    def get_schema(self) -> Dict[str, Any]:
        return {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞",
                    "format": "uri"
                },
                "method": {
                    "type": "string",
                    "enum": ["GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS"],
                    "description": "HTTP –º–µ—Ç–æ–¥",
                    "default": "GET"
                },
                "headers": {
                    "type": "object",
                    "description": "HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ)",
                    "additionalProperties": {"type": "string"}
                },
                "data": {
                    "type": "object",
                    "description": "–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ (JSON)"
                },
                "params": {
                    "type": "object", 
                    "description": "URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞",
                    "additionalProperties": {"type": "string"}
                },
                "timeout": {
                    "type": "integer",
                    "description": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
                    "default": 30,
                    "minimum": 1,
                    "maximum": 300
                }
            },
            "required": ["url"]
        }

    def get_available_actions(self) -> List[str]:
        """–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        return [
            "get",      # GET –∑–∞–ø—Ä–æ—Å
            "post",     # POST –∑–∞–ø—Ä–æ—Å  
            "put",      # PUT –∑–∞–ø—Ä–æ—Å
            "delete",   # DELETE –∑–∞–ø—Ä–æ—Å
            "patch",    # PATCH –∑–∞–ø—Ä–æ—Å
            "head",     # HEAD –∑–∞–ø—Ä–æ—Å
            "options"   # OPTIONS –∑–∞–ø—Ä–æ—Å
        ]

    def execute_action(self, action: str, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∏–º–µ–Ω–∏"""
        action = action.lower()
        
        if action in self.get_available_actions():
            kwargs['method'] = action.upper()
            return self.execute(**kwargs)
        else:
            return ToolResult(
                success=False,
                error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(self.get_available_actions())}"
            )


# –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def create_api_request_tool() -> ApiRequestTool:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ API Request"""
    return ApiRequestTool() 