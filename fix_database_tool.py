#!/usr/bin/env python3
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: DatabaseTool

–ü–†–û–ë–õ–ï–ú–ê: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ default –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
"""

import asyncio

async def test_database_tool_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è DatabaseTool"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: DatabaseTool")
    print("=" * 50)
    
    from kittycore.tools.database_tool import DatabaseTool, DatabaseConnection
    
    # –°–æ–∑–¥–∞—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
    sqlite_config = DatabaseConnection(
        db_type='sqlite',
        database='test_kittycore.db'
    )
    
    tool = DatabaseTool(default_connection=sqlite_config)
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    print("\nüìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")
    result1 = await tool.execute(
        query="CREATE TABLE IF NOT EXISTS test_table (id INTEGER PRIMARY KEY, name TEXT, value INTEGER)"
    )
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: success={result1.success}")
    if result1.data:
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {len(str(result1.data))} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìã –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {result1.data.get('affected_rows')}")
    if result1.error:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result1.error}")
    
    # –¢–µ—Å—Ç 2: –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüì• –¢–µ—Å—Ç 2: –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    result2 = await tool.execute(
        query="INSERT INTO test_table (name, value) VALUES ('test', 42)"
    )
    print(f"‚úÖ –í—Å—Ç–∞–≤–∫–∞: success={result2.success}")
    if result2.data:
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {len(str(result2.data))} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìã –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {result2.data.get('affected_rows')}")
    if result2.error:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result2.error}")
    
    # –¢–µ—Å—Ç 3: –í—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüì§ –¢–µ—Å—Ç 3: –í—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    result3 = await tool.execute(
        query="SELECT * FROM test_table"
    )
    print(f"‚úÖ –í—ã–±–æ—Ä–∫–∞: success={result3.success}")
    if result3.data:
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {len(str(result3.data))} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {result3.data.get('affected_rows')}")
        if result3.data.get('data'):
            print(f"üìã –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {result3.data['data'][0] if result3.data['data'] else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
    if result3.error:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result3.error}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —É—Å–ø–µ—Ö
    successful_tests = sum([result1.success, result2.success, result3.success])
    if successful_tests >= 2:
        print(f"\nüéâ DatabaseTool –ò–°–ü–†–ê–í–õ–ï–ù!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {successful_tests}/3 —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
        
        # –û—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
        try:
            import os
            if os.path.exists('test_kittycore.db'):
                os.remove('test_kittycore.db')
                print("üßπ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
        except:
            pass
        
        return True
    else:
        print(f"\n‚ö†Ô∏è DatabaseTool —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {successful_tests}/3 —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
        return False

if __name__ == "__main__":
    asyncio.run(test_database_tool_fix()) 