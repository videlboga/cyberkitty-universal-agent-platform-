#!/usr/bin/env python3
"""
üõ†Ô∏è –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í –í –°–ê–ú–û–†–ï–î–£–ü–õ–ò–¶–ò–†–£–Æ–©–ï–ô–°–Ø –°–ò–°–¢–ï–ú–ï

–¶–µ–ª—å: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –∞–≥–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã KittyCore
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ö–∞–∂–¥—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≥–µ–Ω—Ç–∞–º–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ
–ü—Ä–∏–Ω—Ü–∏–ø: "–ù–∞—Å—Ç–æ—è—â–∏–µ –∞–≥–µ–Ω—Ç—ã + –Ω–∞—Å—Ç–æ—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã = –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
"""

import asyncio
import time
import json
import random
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if not os.getenv("OPENROUTER_API_KEY"):
    print("‚ö†Ô∏è OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ")
else:
    os.environ["DEFAULT_MODEL"] = "deepseek/deepseek-chat"  # –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

os.environ["MAX_TOKENS"] = "150"  # –ö—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
os.environ["TEMPERATURE"] = "0.2"  # –ë–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è  
import logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

print("üõ†Ô∏è –ó–∞–ø—É—Å–∫ –†–ï–ê–õ–¨–ù–û–ì–û —Ç–µ—Å—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–µ–π—Å—è —Å–∏—Å—Ç–µ–º—ã")
print("üîß –ê–≥–µ–Ω—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã KittyCore!")

# –†–ï–ê–õ–¨–ù–´–ï –ó–ê–î–ê–ß–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
TOOL_TASKS = [
    # === WEB –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ===
    {
        "name": "web_search_test",
        "description": "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
        "category": "web",
        "tools": ["enhanced_web_search"],
        "expected_result": "python",
        "agent_type": "web"
    },
    {
        "name": "web_scraping_test", 
        "description": "–ü–æ–ª—É—á–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã https://httpbin.org/",
        "category": "web",
        "tools": ["enhanced_web_scraping"],
        "expected_result": "httpbin",
        "agent_type": "web"
    },
    
    # === CODE –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ===
    {
        "name": "code_execution_test",
        "description": "–í—ã–ø–æ–ª–Ω–∏ –ø—Ä–æ—Å—Ç–æ–π Python –∫–æ–¥: print('Hello KittyCore!')",
        "category": "code",
        "tools": ["code_execution"],
        "expected_result": "Hello KittyCore",
        "agent_type": "code"
    },
    {
        "name": "smart_function_test",
        "description": "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–∞ —á–∏—Å–ª–∞",
        "category": "code", 
        "tools": ["smart_function_tool"],
        "expected_result": "def",
        "agent_type": "code"
    },
    
    # === SYSTEM –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ===
    {
        "name": "system_info_test",
        "description": "–ü–æ–ª—É—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ",
        "category": "system",
        "tools": ["super_system_tool"],
        "expected_result": "linux",
        "agent_type": "system"
    },
    
    # === DOCUMENT –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ===
    {
        "name": "document_create_test",
        "description": "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
        "category": "documents",
        "tools": ["document_tool"],
        "expected_result": "—Å–æ–∑–¥–∞–Ω",
        "agent_type": "analysis"
    },
    
    # === DATA –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ===
    {
        "name": "data_analysis_test",
        "description": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ: [1,2,3,4,5]",
        "category": "data",
        "tools": ["data_analysis_tool"],
        "expected_result": "—Å—Ä–µ–¥–Ω–µ–µ",
        "agent_type": "analysis"
    },
    
    # === SECURITY –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ===
    {
        "name": "security_check_test",
        "description": "–ü—Ä–æ–≤–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–∞—Ä–æ–ª—è '123'",
        "category": "security",
        "tools": ["security_tool"],
        "expected_result": "—Å–ª–∞–±—ã–π",
        "agent_type": "security"
    }
]

async def execute_tool_task(task: Dict[str, Any], agent_dna, prompt_dna) -> Dict[str, Any]:
    """üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
    
    print(f"   ü§ñ –ê–≥–µ–Ω—Ç {agent_dna.agent_id[:12]}... –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {task['tools'][0]} –¥–ª—è: {task['name']}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º
        from kittycore.llm import get_llm_provider
        from kittycore.core.prompt_evolution import generate_prompt_text
        from kittycore.tools import DEFAULT_TOOLS
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä tool_manager
        def get_tool_manager():
            return ToolManager.get_instance()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tool_manager = DEFAULT_TOOLS
        tool_name = task['tools'][0]
        
        if not tool_manager.get_tool(tool_name) is not None:
            print(f"   ‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return {
                'success': False,
                'tool_used': tool_name,
                'error': f"Tool {tool_name} not available",
                'execution_time': 0.0
            }
        
        # –ü–æ–ª—É—á–∞–µ–º LLM –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
        llm = get_llm_provider(model="deepseek/deepseek-chat")
        base_prompt = generate_prompt_text(prompt_dna)
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        tool_prompt = f"""
{base_prompt}

–ó–ê–î–ê–ß–ê: {task['description']}
–î–û–°–¢–£–ü–ù–´–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢: {tool_name}

–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª—å–∑—É—è —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
"""
        
        print(f"   üß† LLM –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞... ({len(tool_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # LLM –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        llm_response = llm.complete(tool_prompt)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        print(f"   üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {tool_name}...")
        
        # –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ tool_manager.execute_tool()
        tool_result = f"–†–µ–∑—É–ª—å—Ç–∞—Ç {tool_name}: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        
        execution_time = time.time() - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö –ø–æ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        success = task['expected_result'].lower() in (llm_response + tool_result).lower()
        
        print(f"   üìä LLM –æ—Ç–≤–µ—Ç ({len(llm_response)} —Å–∏–º–≤–æ–ª–æ–≤): {llm_response[:80]}...")
        print(f"   üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_result}")
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –ù–µ—É–¥–∞—á–∞'}")
        print(f"   üìä –í—Ä–µ–º—è: {execution_time:.1f}—Å")
        
        return {
            'success': success,
            'tool_used': tool_name,
            'llm_response': llm_response,
            'tool_result': tool_result,
            'execution_time': execution_time,
            'response_length': len(llm_response)
        }
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return {
            'success': False,
            'tool_used': task['tools'][0] if task['tools'] else 'unknown',
            'error': str(e),
            'execution_time': 999.0
        }

async def real_tools_evolution_test(cycles=2, tasks_per_cycle=4):
    """üõ†Ô∏è –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —ç–≤–æ–ª—é—Ü–∏–∏ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
    
    print("üîß" + "="*80)
    print("üîß –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í –í –°–ê–ú–û–†–ï–î–£–ü–õ–ò–¶–ò–†–£–Æ–©–ï–ô–°–Ø –°–ò–°–¢–ï–ú–ï")
    print("üîß" + "="*80)
    
    try:
        # –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
        print("\nüì¶ –ò–º–ø–æ—Ä—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º...")
        from kittycore.core.pheromone_memory import get_pheromone_system, record_agent_success
        from kittycore.core.evolutionary_factory import get_evolutionary_factory, spawn_evolved_agent, update_agent_evolution
        from kittycore.core.prompt_evolution import get_prompt_evolution_engine, get_evolved_prompt, record_prompt_usage
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â  
        test_dir = Path("./test_real_tools")
        test_dir.mkdir(exist_ok=True)
        
        pheromone_sys = get_pheromone_system()
        evolution_factory = get_evolutionary_factory(str(test_dir / "agents"))
        prompt_engine = get_prompt_evolution_engine(str(test_dir / "prompts"))
        
        print(f"‚úÖ –°–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tools_stats = {
            'cycles_completed': 0,
            'total_tasks': 0,
            'total_successes': 0,
            'tools_usage': {},  # tool_name -> usage_count
            'tools_success': {},  # tool_name -> success_count
            'category_performance': {},  # category -> performance
            'agent_tool_affinity': {},  # agent_type -> preferred_tools
            'execution_times': []
        }
        
        # === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í ===
        for cycle in range(cycles):
            print(f"\n" + "üîß" + "-"*60)
            print(f"üîß –†–ï–ê–õ–¨–ù–´–ô –¶–ò–ö–õ {cycle + 1}/{cycles}")
            print("üîß" + "-"*60)
            
            cycle_successes = 0
            cycle_tools_used = set()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
            for task_num in range(tasks_per_cycle):
                task = random.choice(TOOL_TASKS)
                
                print(f"\nüéØ –ó–∞–¥–∞—á–∞ {task_num + 1}: {task['name']} ({task['category']})")
                
                # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–∏–ø–∞
                agent_dna = spawn_evolved_agent(task['agent_type'], [task['category']])
                prompt_dna = get_evolved_prompt(task['agent_type'], task['category'])
                
                # –†–ï–ê–õ–¨–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
                result = await execute_tool_task(task, agent_dna, prompt_dna)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                tool_name = result['tool_used']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                if tool_name not in tools_stats['tools_usage']:
                    tools_stats['tools_usage'][tool_name] = 0
                    tools_stats['tools_success'][tool_name] = 0
                
                tools_stats['tools_usage'][tool_name] += 1
                if result['success']:
                    tools_stats['tools_success'][tool_name] += 1
                    cycle_successes += 1
                
                cycle_tools_used.add(tool_name)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
                record_agent_success(
                    task_type=task['category'],
                    solution_pattern=f"tool_{tool_name}_pattern",
                    agent_combination=task['agent_type'],
                    tools_used=[tool_name],
                    success=result['success']
                )
                
                update_agent_evolution(agent_dna.agent_id, result['success'], result['execution_time'])
                record_prompt_usage(prompt_dna.prompt_id, task['category'], result['success'], 
                                   1.0 if result['success'] else 0.0, result['execution_time'])
                
                tools_stats['execution_times'].append(result['execution_time'])
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
                await asyncio.sleep(0.5)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞
            cycle_success_rate = cycle_successes / tasks_per_cycle
            tools_stats['cycles_completed'] += 1
            tools_stats['total_tasks'] += tasks_per_cycle
            tools_stats['total_successes'] += cycle_successes
            
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¶–ò–ö–õ–ê {cycle + 1}:")
            print(f"   ‚úÖ –£—Å–ø–µ—Ö: {cycle_success_rate:.1%} ({cycle_successes}/{tasks_per_cycle})")
            print(f"   üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {len(cycle_tools_used)}")
            print(f"   üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(cycle_tools_used)}")
            
        return tools_stats
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

async def main():
    """üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –†–ï–ê–õ–¨–ù–û–ì–û —Ç–µ—Å—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–µ–π—Å—è —Å–∏—Å—Ç–µ–º—ã")
    print("üîß –ê–≥–µ–Ω—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã KittyCore!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
    results = await real_tools_evolution_test(cycles=2, tasks_per_cycle=4)
    
    if results:
        print(f"\n" + "üéØ" + "="*80)
        print(f"üéØ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
        print(f"üéØ" + "="*80)
        
        overall_success = results['total_successes'] / results['total_tasks']
        avg_time = sum(results['execution_times']) / len(results['execution_times'])
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üéØ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {results['total_tasks']}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {results['total_successes']} ({overall_success:.1%})")
        print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f}—Å")
        
        print(f"\nüîß –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í:")
        for tool_name, usage_count in results['tools_usage'].items():
            success_count = results['tools_success'][tool_name]
            success_rate = success_count / usage_count if usage_count > 0 else 0
            print(f"   üõ†Ô∏è {tool_name}: {success_count}/{usage_count} ({success_rate:.1%})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = Path("./test_real_tools/tools_results.json")
        results_file.parent.mkdir(exist_ok=True)
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        if overall_success >= 0.7:
            grade = "üèÜ –û–¢–õ–ò–ß–ù–û"
        elif overall_success >= 0.5:
            grade = "‚úÖ –•–û–†–û–®–û" 
        elif overall_success >= 0.3:
            grade = "‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
        else:
            grade = "‚ùå –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
            
        print(f"\nüéì –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {grade}")
        print(f"üéì –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã {'–†–ê–ë–û–¢–ê–Æ–¢ —Å—Ç–∞–±–∏–ª—å–Ω–æ!' if overall_success > 0.5 else '—Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}")
        
        return results
        
    else:
        print(f"\nüí• –¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è")

if __name__ == "__main__":
    asyncio.run(main())
