"""
Browser Tools - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π

–í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –±—Ä–∞—É–∑–µ—Ä–∞, —Ä–∞–±–æ—Ç—É —Å —Ñ–∞–π–ª–∞–º–∏, –≤–∞–ª–∏–¥–∞—Ü–∏—é manifest –∏ —É–ø–∞–∫–æ–≤–∫—É.
"""

import os
import json
import zipfile
import subprocess
import tempfile
import shutil
from pathlib import Path
from typing import Dict, Any, Optional, List
import logging

# –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ Tool –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from tools import Tool
from config import get_config

logger = logging.getLogger(__name__)


class FileSystemTool(Tool):
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self):
        super().__init__(
            name="filesystem",
            description="–°–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞"
        )
    
    def execute(self, action: str, path: str, content: str = None, **kwargs):
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        
        Args:
            action: –î–µ–π—Å—Ç–≤–∏–µ (create, read, write, delete, mkdir, list)
            path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –ø–∞–ø–∫–µ
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        """
        from tools import ToolResult
        
        try:
            path = Path(path).resolve()
            
            if action == "read":
                if path.exists() and path.is_file():
                    content = path.read_text(encoding='utf-8')
                    return ToolResult(success=True, data={"content": content, "path": str(path)})
                return ToolResult(success=False, error=f"–§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            elif action == "write":
                path.parent.mkdir(parents=True, exist_ok=True)
                path.write_text(content or "", encoding='utf-8')
                return ToolResult(success=True, data={"message": f"–§–∞–π–ª {path} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω", "path": str(path)})
            
            elif action == "create":
                path.parent.mkdir(parents=True, exist_ok=True)
                path.touch()
                if content:
                    path.write_text(content, encoding='utf-8')
                return ToolResult(success=True, data={"message": f"–§–∞–π–ª {path} —Å–æ–∑–¥–∞–Ω", "path": str(path)})
            
            elif action == "delete":
                if path.exists():
                    if path.is_file():
                        path.unlink()
                        return ToolResult(success=True, data={"message": f"–§–∞–π–ª {path} —É–¥–∞–ª—ë–Ω", "path": str(path)})
                    elif path.is_dir():
                        shutil.rmtree(path)
                        return ToolResult(success=True, data={"message": f"–ü–∞–ø–∫–∞ {path} —É–¥–∞–ª–µ–Ω–∞", "path": str(path)})
                return ToolResult(success=False, error=f"–ü—É—Ç—å {path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            elif action == "mkdir":
                path.mkdir(parents=True, exist_ok=True)
                return ToolResult(success=True, data={"message": f"–ü–∞–ø–∫–∞ {path} —Å–æ–∑–¥–∞–Ω–∞", "path": str(path)})
            
            elif action == "list":
                if path.exists() and path.is_dir():
                    items = []
                    for item in path.iterdir():
                        item_type = "üìÅ" if item.is_dir() else "üìÑ"
                        items.append(f"{item_type} {item.name}")
                    return ToolResult(success=True, data={"items": items, "path": str(path)})
                return ToolResult(success=False, error=f"–ü–∞–ø–∫–∞ {path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            else:
                return ToolResult(success=False, error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ FileSystemTool: {e}")
            return ToolResult(success=False, error=str(e))
    
    def get_schema(self):
        """–°—Ö–µ–º–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        return {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "enum": ["read", "write", "create", "delete", "mkdir", "list"],
                    "description": "–î–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π"
                },
                "path": {
                    "type": "string",
                    "description": "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –ø–∞–ø–∫–µ"
                },
                "content": {
                    "type": "string",
                    "description": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                }
            },
            "required": ["action", "path"]
        }


class ManifestValidatorTool(Tool):
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ manifest.json —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__(
            name="manifest_validator",
            description="–í–∞–ª–∏–¥–∞—Ü–∏—è manifest.json —Ñ–∞–π–ª–æ–≤ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"
        )
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Manifest V3
        self.required_fields_v3 = {
            "manifest_version": int,
            "name": str,
            "version": str
        }
        
        # –î–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ–ª—è
        self.valid_fields = {
            "manifest_version", "name", "version", "description", "icons",
            "action", "background", "content_scripts", "permissions",
            "host_permissions", "web_accessible_resources", "content_security_policy",
            "options_page", "options_ui", "devtools_page", "minimum_chrome_version"
        }
    
    def execute(self, manifest_path: str, **kwargs):
        """
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å manifest.json —Ñ–∞–π–ª
        
        Args:
            manifest_path: –ü—É—Ç—å –∫ manifest.json
        """
        from tools import ToolResult
        
        try:
            path = Path(manifest_path)
            
            if not path.exists():
                return ToolResult(success=False, error=f"–§–∞–π–ª {manifest_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ß—Ç–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ JSON
            try:
                manifest = json.loads(path.read_text(encoding='utf-8'))
            except json.JSONDecodeError as e:
                return ToolResult(success=False, error=f"–û—à–∏–±–∫–∞ JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")
            
            issues = []
            warnings = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
            manifest_version = manifest.get("manifest_version")
            if manifest_version not in [2, 3]:
                issues.append("‚ùå manifest_version –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 2 –∏–ª–∏ 3")
            elif manifest_version == 2:
                warnings.append("‚ö†Ô∏è Manifest V2 —É—Å—Ç–∞—Ä–µ–ª, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è V3")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            for field, field_type in self.required_fields_v3.items():
                if field not in manifest:
                    issues.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                elif not isinstance(manifest[field], field_type):
                    issues.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–ª—è {field}, –æ–∂–∏–¥–∞–µ—Ç—Å—è {field_type.__name__}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
            version = manifest.get("version", "")
            if version and not self._is_valid_version(version):
                issues.append("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ (–æ–∂–∏–¥–∞–µ—Ç—Å—è x.y.z)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ permissions –¥–ª—è V3
            if manifest_version == 3:
                if "permissions" in manifest:
                    self._validate_permissions_v3(manifest["permissions"], issues, warnings)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
            for field in manifest:
                if field not in self.valid_fields:
                    warnings.append(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ: {field}")
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
            result = []
            
            if not issues and not warnings:
                result.append("‚úÖ Manifest.json –≤–∞–ª–∏–¥–µ–Ω")
            
            if issues:
                result.append("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:")
                result.extend(issues)
            
            if warnings:
                result.append("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
                result.extend(warnings)
            
            is_valid = len(issues) == 0
            
            return ToolResult(
                success=True,
                data={
                    "valid": is_valid,
                    "issues": issues,
                    "warnings": warnings,
                    "report": "\n".join(result),
                    "manifest": manifest
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ ManifestValidatorTool: {e}")
            return ToolResult(success=False, error=str(e))
    
    def get_schema(self):
        """–°—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ manifest"""
        return {
            "type": "object",
            "properties": {
                "manifest_path": {
                    "type": "string",
                    "description": "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É manifest.json"
                }
            },
            "required": ["manifest_path"]
        }
    
    def _is_valid_version(self, version: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏"""
        parts = version.split(".")
        if len(parts) < 2 or len(parts) > 4:
            return False
        
        for part in parts:
            if not part.isdigit():
                return False
        
        return True
    
    def _validate_permissions_v3(self, permissions: List[str], issues: List[str], warnings: List[str]):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è permissions –¥–ª—è Manifest V3"""
        deprecated_permissions = {
            "background": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ service_worker –≤ background",
            "tabs": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ activeTab –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–ª—É—á–∞–µ–≤"
        }
        
        for permission in permissions:
            if permission in deprecated_permissions:
                warnings.append(f"‚ö†Ô∏è {permission}: {deprecated_permissions[permission]}")


class HumanRequestTool(Tool):
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self):
        super().__init__(
            name="human_request",
            description="–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–≥–¥–∞ –∞–≥–µ–Ω—Ç—É –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å"
        )
    
    def execute(self, request_type: str, message: str, context: Dict[str, Any] = None, **kwargs):
        """
        –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            request_type: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (auth, decision, config, approval)
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        from tools import ToolResult
        
        try:
            context = context or {}
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫—Ä–∞—Å–∏–≤–æ
            request_emoji = {
                "auth": "üîë",
                "decision": "ü§î", 
                "config": "‚öôÔ∏è",
                "approval": "‚úÖ",
                "help": "üÜò"
            }
            
            emoji = request_emoji.get(request_type, "‚ùì")
            
            formatted_request = f"""
{emoji} –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–ú–û–©–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø

–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {request_type.upper()}
–°–æ–æ–±—â–µ–Ω–∏–µ: {message}

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
{json.dumps(context, indent=2, ensure_ascii=False)}

---
ü§ñ –ê–≥–µ–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...
"""
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –º–µ—Ö–∞–Ω–∏–∑–º –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            return ToolResult(
                success=True,
                data={
                    "request_type": request_type,
                    "message": message,
                    "context": context,
                    "formatted_request": formatted_request,
                    "awaiting_user_input": True
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ HumanRequestTool: {e}")
            return ToolResult(success=False, error=str(e))
    
    def get_schema(self):
        """–°—Ö–µ–º–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        return {
            "type": "object",
            "properties": {
                "request_type": {
                    "type": "string",
                    "enum": ["auth", "decision", "config", "approval", "help"],
                    "description": "–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                },
                "message": {
                    "type": "string",
                    "description": "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                },
                "context": {
                    "type": "object",
                    "description": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                }
            },
            "required": ["request_type", "message"]
        }


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
BROWSER_TOOLS = [
    FileSystemTool(),
    ManifestValidatorTool(), 
    HumanRequestTool()
]

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = [
    "FileSystemTool",
    "ManifestValidatorTool", 
    "HumanRequestTool",
    "BROWSER_TOOLS"
] 