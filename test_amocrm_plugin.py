#!/usr/bin/env python3
"""
–¢–µ—Å—Ç AmoCRM –ø–ª–∞–≥–∏–Ω–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç—ã
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/app')
sys.path.append('.')

from loguru import logger
from app.core.simple_engine import SimpleScenarioEngine

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.remove()
logger.add(
    "logs/test_amocrm.log",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {name}:{function}:{line} | {message}",
    level="DEBUG",
    rotation="10 MB"
)
logger.add(
    sys.stdout,
    format="<green>{time:HH:mm:ss}</green> | <level>{level}</level> | <cyan>{name}</cyan> | <level>{message}</level>",
    level="INFO"
)

async def test_amocrm_plugin():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AmoCRM –ø–ª–∞–≥–∏–Ω"""
    
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç AmoCRM –ø–ª–∞–≥–∏–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    engine = SimpleScenarioEngine()
    logger.info("‚úÖ SimpleScenarioEngine —Å–æ–∑–¥–∞–Ω")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å MongoDB –ø–ª–∞–≥–∏–Ω –ø–µ—Ä–≤—ã–º
    try:
        logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è MongoDB Plugin...")
        from app.plugins.mongo_plugin import MongoPlugin
        mongo_plugin = MongoPlugin()
        engine.register_plugin(mongo_plugin)
        await mongo_plugin.initialize()
        logger.info("‚úÖ MongoDB Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ MongoDB Plugin: {e}")
        return False
    
    # –¢–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º AmoCRM –ø–ª–∞–≥–∏–Ω
    try:
        logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è AmoCRM Plugin...")
        from app.plugins.simple_amocrm_plugin import SimpleAmoCRMPlugin
        amocrm_plugin = SimpleAmoCRMPlugin()
        engine.register_plugin(amocrm_plugin)
        logger.info("‚úÖ AmoCRM Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AmoCRM Plugin...")
        await amocrm_plugin.initialize()
        logger.info("‚úÖ AmoCRM Plugin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º healthcheck
        logger.info("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ healthcheck AmoCRM Plugin...")
        health = await amocrm_plugin.healthcheck()
        logger.info(f"üè• Healthcheck —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {health}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        logger.info("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        settings = amocrm_plugin.get_current_settings()
        logger.info(f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {settings}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        handlers = amocrm_plugin.register_handlers()
        logger.info(f"üîß –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {list(handlers.keys())}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ AmoCRM Plugin: {e}")
        import traceback
        logger.error(f"üìã Traceback: {traceback.format_exc()}")
        return False

async def test_amocrm_settings():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ AmoCRM"""
    
    logger.info("üß™ –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ AmoCRM")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏
    engine = SimpleScenarioEngine()
    
    # MongoDB –ø–ª–∞–≥–∏–Ω
    from app.plugins.mongo_plugin import MongoPlugin
    mongo_plugin = MongoPlugin()
    engine.register_plugin(mongo_plugin)
    await mongo_plugin.initialize()
    
    # AmoCRM –ø–ª–∞–≥–∏–Ω
    from app.plugins.simple_amocrm_plugin import SimpleAmoCRMPlugin
    amocrm_plugin = SimpleAmoCRMPlugin()
    engine.register_plugin(amocrm_plugin)
    await amocrm_plugin.initialize()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    test_settings = {
        "base_url": "https://test.amocrm.ru",
        "access_token": "test_token_12345"
    }
    
    logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    result = await amocrm_plugin.save_settings_to_db(
        test_settings["base_url"], 
        test_settings["access_token"]
    )
    logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {result}")
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    await amocrm_plugin._load_settings_from_db()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    current_settings = amocrm_plugin.get_current_settings()
    logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {current_settings}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
    if (amocrm_plugin.base_url == test_settings["base_url"] and 
        amocrm_plugin.access_token == test_settings["access_token"]):
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return True
    else:
        logger.error("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ AmoCRM –ø–ª–∞–≥–∏–Ω–∞")
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    logger.info("\n" + "="*50)
    logger.info("–¢–ï–°–¢ 1: –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AmoCRM –ø–ª–∞–≥–∏–Ω–∞")
    logger.info("="*50)
    
    test1_result = await test_amocrm_plugin()
    
    # –¢–µ—Å—Ç 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    logger.info("\n" + "="*50)
    logger.info("–¢–ï–°–¢ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    logger.info("="*50)
    
    test2_result = await test_amocrm_settings()
    
    # –ò—Ç–æ–≥–∏
    logger.info("\n" + "="*50)
    logger.info("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("="*50)
    logger.info(f"‚úÖ –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {'–ü–†–û–ô–î–ï–ù' if test1_result else '–ü–†–û–í–ê–õ–ï–ù'}")
    logger.info(f"‚úÖ –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫: {'–ü–†–û–ô–î–ï–ù' if test2_result else '–ü–†–û–í–ê–õ–ï–ù'}")
    
    if test1_result and test2_result:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! AmoCRM –ø–ª–∞–≥–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        logger.error("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å AmoCRM –ø–ª–∞–≥–∏–Ω–æ–º.")

if __name__ == "__main__":
    asyncio.run(main()) 