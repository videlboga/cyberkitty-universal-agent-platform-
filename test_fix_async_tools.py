#!/usr/bin/env python3
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Async/Sync –ø—Ä–æ–±–ª–µ–º—ã –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö

–ü–†–û–ë–õ–ï–ú–ê: –ú–Ω–æ–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç async def execute(), –Ω–æ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
–†–ï–®–ï–ù–ò–ï: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ + —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import asyncio
import time
import json
import tempfile
import os

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
def sync_execute(async_tool, *args, **kwargs):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è async execute"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop
        loop = asyncio.get_running_loop()
        # –ï—Å–ª–∏ –¥–∞ - –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import concurrent.futures
        with concurrent.futures.ThreadPoolExecutor() as executor:
            future = executor.submit(asyncio.run, async_tool.execute(*args, **kwargs))
            return future.result(timeout=30)  # 30 —Å–µ–∫ —Ç–∞–π–º–∞—É—Ç
    except RuntimeError:
        # –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ loop - –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å asyncio.run
        return asyncio.run(async_tool.execute(*args, **kwargs))

# –ò–º–ø–æ—Ä—Ç—ã –∏—Å–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
fixed_tools = {}

try:
    from kittycore.tools.enhanced_web_search_tool import EnhancedWebSearchTool
    fixed_tools['web_search'] = EnhancedWebSearchTool()
    print("‚úÖ web_search –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ùå web_search: {e}")

try:
    from kittycore.tools.enhanced_web_scraping_tool import EnhancedWebScrapingTool
    fixed_tools['web_scraping'] = EnhancedWebScrapingTool()
    print("‚úÖ web_scraping –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ùå web_scraping: {e}")

try:
    from kittycore.tools.security_tool import SecurityTool
    fixed_tools['security'] = SecurityTool()
    print("‚úÖ security –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ùå security: {e}")

try:
    from kittycore.tools.api_request_tool import ApiRequestTool
    fixed_tools['api_request'] = ApiRequestTool()
    print("‚úÖ api_request –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ùå api_request: {e}")

def test_fixed_web_search():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ web_search"""
    if 'web_search' not in fixed_tools:
        return "IMPORT_ERROR"
    
    print("\nüîç –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û: enhanced_web_search_tool")
    tool = fixed_tools['web_search']
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±–µ—Ä—Ç–∫—É
        result = sync_execute(tool, query="Python programming", limit=3)
        
        if hasattr(result, 'success') and result.success:
            data_str = str(result.data)
            size = len(data_str)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å
            has_urls = any(indicator in data_str.lower() for indicator in ['http', 'www', '.com'])
            has_query = 'python' in data_str.lower()
            
            if has_urls and has_query and size > 100:
                return f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù: {size} –±–∞–π—Ç, –µ—Å—Ç—å URL –∏ –∑–∞–ø—Ä–æ—Å"
            else:
                return f"‚ùå –§–ï–ô–ö: {size} –±–∞–π—Ç, URL={has_urls}, query={has_query}"
        else:
            error = getattr(result, 'error', 'Unknown error')
            return f"‚ùå –ü–†–û–í–ê–õ: {error}"
    
    except Exception as e:
        return f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}"

def test_fixed_web_scraping():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ web_scraping"""
    if 'web_scraping' not in fixed_tools:
        return "IMPORT_ERROR"
    
    print("\nüï∑Ô∏è –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û: enhanced_web_scraping_tool")
    tool = fixed_tools['web_scraping']
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±–µ—Ä—Ç–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        result = sync_execute(tool, urls=["https://httpbin.org/html"])
        
        if hasattr(result, 'success') and result.success:
            data_str = str(result.data)
            size = len(data_str)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –¢–ï–ö–°–¢–ê (–Ω–µ HTML —Ç–µ–≥–æ–≤!)
            has_content = 'herman melville' in data_str.lower()
            has_results = 'results' in data_str and 'text_preview' in data_str
            has_real_size = size > 500  # –†–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º
            
            if has_content and has_results and has_real_size:
                return f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù: {size} –±–∞–π—Ç, content={has_content}, results={has_results}"
            else:
                return f"‚ùå –§–ï–ô–ö: {size} –±–∞–π—Ç, content={has_content}, results={has_results}"
        else:
            error = getattr(result, 'error', 'Unknown error')
            return f"‚ùå –ü–†–û–í–ê–õ: {error}"
    
    except Exception as e:
        return f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}"

def test_fixed_security_tool():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ security_tool"""
    if 'security' not in fixed_tools:
        return "IMPORT_ERROR"
    
    print("\nüîí –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û: security_tool")
    tool = fixed_tools['security']
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±–µ—Ä—Ç–∫—É
        result = sync_execute(tool, "analyze_password", password="TestPassword123!")
        
        if hasattr(result, 'success') and result.success:
            data_str = str(result.data)
            size = len(data_str)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            has_security = any(term in data_str.lower() for term in ['strength', 'score', 'password'])
            has_details = size > 200  # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–º
            
            if has_security and has_details:
                return f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù: {size} –±–∞–π—Ç, security terms found"
            else:
                return f"‚ùå –§–ï–ô–ö: {size} –±–∞–π—Ç, security={has_security}"
        else:
            error = getattr(result, 'error', 'Unknown error')
            return f"‚ùå –ü–†–û–í–ê–õ: {error}"
    
    except Exception as e:
        return f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}"

def test_fixed_api_request():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ api_request_tool"""
    if 'api_request' not in fixed_tools:
        return "IMPORT_ERROR"
    
    print("\nüåê –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û: api_request_tool")
    tool = fixed_tools['api_request']
    
    try:
        # api_request_tool –æ–±—ã—á–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º
        result = tool.execute(url="https://httpbin.org/get", method="GET", timeout=10)
        
        if hasattr(result, 'success') and result.success:
            data_str = str(result.data)
            size = len(data_str)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å HTTP –æ—Ç–≤–µ—Ç–∞
            has_http = any(term in data_str.lower() for term in ['status', '200', 'headers'])
            has_url = 'httpbin' in data_str.lower()
            
            if has_http and has_url and size > 100:
                return f"‚úÖ –†–ê–ë–û–¢–ê–ï–¢: {size} –±–∞–π—Ç, HTTP response"
            else:
                return f"‚ùå –§–ï–ô–ö: {size} –±–∞–π—Ç, HTTP={has_http}, URL={has_url}"
        else:
            error = getattr(result, 'error', 'Unknown error')
            return f"‚ùå –ü–†–û–í–ê–õ: {error}"
    
    except Exception as e:
        return f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}"

def main():
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ASYNC/SYNC –ü–†–û–ë–õ–ï–ú –í –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–•")
    print("=" * 60)
    
    # –¢–µ—Å—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    tests = {
        "WebSearch": test_fixed_web_search,
        "WebScraping": test_fixed_web_scraping,
        "SecurityTool": test_fixed_security_tool,
        "ApiRequest": test_fixed_api_request
    }
    
    results = {}
    
    for tool_name, test_func in tests.items():
        try:
            start_time = time.time()
            result = test_func()
            end_time = time.time()
            
            test_time = (end_time - start_time) * 1000
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            is_fixed = result.startswith("‚úÖ")
            status = "‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù" if is_fixed else "‚ùå –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù"
            
            print(f"{tool_name}: {result} ({test_time:.1f}–º—Å)")
            results[tool_name] = is_fixed
            
        except Exception as e:
            print(f"{tool_name}: ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
            results[tool_name] = False
    
    # –ò—Ç–æ–≥–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
    
    total_tests = len(results)
    fixed_tools_count = sum(1 for is_fixed in results.values() if is_fixed)
    fix_rate = (fixed_tools_count / total_tests * 100) if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {total_tests}")
    print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {fixed_tools_count}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {fix_rate:.1f}%")
    
    print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for tool_name, is_fixed in results.items():
        status = "‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù" if is_fixed else "‚ùå –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù"
        print(f"  {tool_name}: {status}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    broken_tools = [name for name, is_fixed in results.items() if not is_fixed]
    if broken_tools:
        print(f"\nüîß –¢–†–ï–ë–£–Æ–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô: {', '.join(broken_tools)}")
    else:
        print(f"\nüéâ –í–°–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –£–°–ü–ï–®–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–´!")

if __name__ == "__main__":
    main() 