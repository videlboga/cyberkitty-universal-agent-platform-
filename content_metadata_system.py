#!/usr/bin/env python3
"""
üéØ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –ö–æ–Ω—Ç–µ–Ω—Ç + –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

–ö–æ–Ω—Ç–µ–Ω—Ç - –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å—Ç—ã–π, –ø–æ–ª–µ–∑–Ω—ã–π)
–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ - –¥–ª—è —Å–∏—Å—Ç–µ–º—ã (–±–æ–≥–∞—Ç—ã–µ, –ø–æ–¥—Ä–æ–±–Ω—ã–µ)
"""

import json
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List
from dataclasses import dataclass, asdict

@dataclass
class TaskMetadata:
    """–ë–æ–≥–∞—Ç—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    task_id: str
    original_task: str
    agent_id: str
    agent_type: str
    execution_time: float
    start_time: str
    end_time: str
    
    # LLM –∞–Ω–∞–ª–∏–∑
    llm_analysis: Dict[str, Any]
    complexity_score: float
    estimated_difficulty: str
    
    # –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    steps_planned: List[str]
    steps_executed: List[Dict[str, Any]]
    tools_used: List[str]
    errors_encountered: List[str]
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –∏ –∫—Ä–∏—Ç–∏–∫–∞
    critiques: List[Dict[str, Any]]
    quality_score: float
    improvement_suggestions: List[str]
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    rate_limiting_applied: bool
    cache_hit: bool
    memory_usage: Dict[str, Any]
    system_health: float
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    content_file: str
    content_type: str
    content_size: int
    success: bool
    user_satisfaction_predicted: float

class ContentMetadataSystem:
    """–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, output_dir: str = "./outputs"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        self.metadata_dir = self.output_dir / "metadata"
        self.metadata_dir.mkdir(exist_ok=True)
        
    def create_content_with_metadata(
        self, 
        task: str, 
        content: str, 
        filename: str,
        metadata: TaskMetadata
    ) -> Dict[str, str]:
        """–°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º + –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        
        # 1. –°–û–•–†–ê–ù–Ø–ï–ú –ß–ò–°–¢–´–ô –ö–û–ù–¢–ï–ù–¢ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        content_path = self.output_dir / filename
        with open(content_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        # 2. –°–û–•–†–ê–ù–Ø–ï–ú –ë–û–ì–ê–¢–´–ï –ú–ï–¢–ê–î–ê–ù–ù–´–ï –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
        metadata_filename = f"{filename}.meta.json"
        metadata_path = self.metadata_dir / metadata_filename
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata.content_file = str(content_path)
        metadata.content_size = len(content.encode('utf-8'))
        
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(asdict(metadata), f, indent=2, ensure_ascii=False)
        
        # 3. –°–û–ó–î–ê–Å–ú –ß–ï–õ–û–í–ï–ö–û–ß–ò–¢–ê–ï–ú–´–ô –û–¢–ß–Å–¢
        report_filename = f"{filename}.report.md"
        report_path = self.metadata_dir / report_filename
        
        report_content = self._generate_human_report(metadata, content)
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        return {
            "content_file": str(content_path),
            "metadata_file": str(metadata_path),
            "report_file": str(report_path)
        }
    
    def _generate_human_report(self, metadata: TaskMetadata, content: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –æ—Ç—á—ë—Ç"""
        
        report = f"""# üìä –û—Ç—á—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

## üéØ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **–ó–∞–¥–∞—á–∞:** {metadata.original_task}
- **ID:** {metadata.task_id}
- **–ê–≥–µ–Ω—Ç:** {metadata.agent_id} ({metadata.agent_type})
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {metadata.execution_time:.2f}—Å
- **–£—Å–ø–µ—Ö:** {'‚úÖ –î–∞' if metadata.success else '‚ùå –ù–µ—Ç'}

## üß† LLM –ê–Ω–∞–ª–∏–∑
- **–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {metadata.complexity_score:.2f} ({metadata.estimated_difficulty})
- **–ê–Ω–∞–ª–∏–∑:** {metadata.llm_analysis.get('summary', '–ù–µ —É–∫–∞–∑–∞–Ω')}

## üîß –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
### –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–≥–∏:
{chr(10).join(f"- {step}" for step in metadata.steps_planned)}

### –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏:
{chr(10).join(f"- {step.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥')}: {'‚úÖ' if step.get('success') else '‚ùå'}" for step in metadata.steps_executed)}

### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
{', '.join(metadata.tools_used) if metadata.tools_used else '–ù–µ—Ç'}

## üé≠ –ö—Ä–∏—Ç–∏–∫–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–æ
- **–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:** {metadata.quality_score:.2f}/1.0
- **–ü—Ä–æ–≥–Ω–æ–∑ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {metadata.user_satisfaction_predicted:.2f}/1.0

### –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è:
{chr(10).join(f"- {critique.get('summary', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}" for critique in metadata.critiques)}

### –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:
{chr(10).join(f"- {suggestion}" for suggestion in metadata.improvement_suggestions)}

## üîç –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **Rate limiting:** {'–ü—Ä–∏–º–µ–Ω—ë–Ω' if metadata.rate_limiting_applied else '–ù–µ –ø—Ä–∏–º–µ–Ω—ë–Ω'}
- **–ö–µ—à:** {'–ü–æ–ø–∞–¥–∞–Ω–∏–µ' if metadata.cache_hit else '–ü—Ä–æ–º–∞—Ö'}
- **–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã:** {metadata.system_health:.2f}/1.0
- **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:** {metadata.memory_usage.get('peak_mb', 0):.1f} MB

## üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç
- **–§–∞–π–ª –∫–æ–Ω—Ç–µ–Ω—Ç–∞:** {metadata.content_file}
- **–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:** {metadata.content_type}
- **–†–∞–∑–º–µ—Ä:** {metadata.content_size} –±–∞–π—Ç

### –ü—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
```
{content[:200]}{'...' if len(content) > 200 else ''}
```

---
*–û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω KittyCore 3.0 –≤ {metadata.end_time}*
"""
        return report

def demonstrate_correct_approach():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞"""
    print("üéØ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–î–•–û–î: –ö–æ–Ω—Ç–µ–Ω—Ç + –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
    print("=" * 60)
    
    system = ContentMetadataSystem()
    
    # –ü—Ä–∏–º–µ—Ä 1: Python —Ñ–∞–π–ª
    task1 = "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello_world.py —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π Hello World"
    content1 = 'print("Hello, World!")'
    
    metadata1 = TaskMetadata(
        task_id="task_001",
        original_task=task1,
        agent_id="python_agent",
        agent_type="CodeGenerator",
        execution_time=2.34,
        start_time="2025-01-13 14:30:00",
        end_time="2025-01-13 14:30:02",
        llm_analysis={
            "summary": "–ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è Hello World –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            "complexity": "low",
            "estimated_time": 1.5
        },
        complexity_score=0.2,
        estimated_difficulty="easy",
        steps_planned=[
            "–°–æ–∑–¥–∞—Ç—å Python –∫–æ–¥ —Å print —Ñ—É–Ω–∫—Ü–∏–µ–π",
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª hello_world.py"
        ],
        steps_executed=[
            {"description": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python –∫–æ–¥–∞", "success": True, "time": 1.2},
            {"description": "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", "success": True, "time": 0.1}
        ],
        tools_used=["code_generator", "file_manager"],
        errors_encountered=[],
        critiques=[
            {
                "type": "quality",
                "score": 1.0,
                "summary": "–ö–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º",
                "details": "–ü—Ä–æ—Å—Ç–æ–π –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Hello World"
            }
        ],
        quality_score=1.0,
        improvement_suggestions=[],
        rate_limiting_applied=False,
        cache_hit=False,
        memory_usage={"peak_mb": 12.5, "avg_mb": 8.2},
        system_health=0.85,
        content_file="",
        content_type="python",
        content_size=0,
        success=True,
        user_satisfaction_predicted=0.95
    )
    
    files1 = system.create_content_with_metadata(
        task1, content1, "hello_world.py", metadata1
    )
    
    print("‚úÖ –°–û–ó–î–ê–ù PYTHON –§–ê–ô–õ:")
    print(f"   üìÅ –ö–æ–Ω—Ç–µ–Ω—Ç: {files1['content_file']}")
    print(f"   üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {files1['metadata_file']}")
    print(f"   üìã –û—Ç—á—ë—Ç: {files1['report_file']}")
    
    # –ü—Ä–∏–º–µ—Ä 2: HTML —Ñ–∞–π–ª
    task2 = "–°–æ–∑–¥–∞–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
    content2 = '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        form { max-width: 400px; }
        input { width: 100%; padding: 10px; margin: 10px 0; }
        button { background: #007bff; color: white; padding: 12px 20px; border: none; }
    </style>
</head>
<body>
    <h1>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h1>
    <form>
        <input type="text" placeholder="–ò–º—è" required>
        <input type="email" placeholder="Email" required>
        <input type="password" placeholder="–ü–∞—Ä–æ–ª—å" required>
        <button type="submit">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
    </form>
</body>
</html>'''
    
    metadata2 = TaskMetadata(
        task_id="task_002",
        original_task=task2,
        agent_id="web_agent",
        agent_type="WebDeveloper",
        execution_time=5.67,
        start_time="2025-01-13 14:31:00",
        end_time="2025-01-13 14:31:06",
        llm_analysis={
            "summary": "–°–æ–∑–¥–∞–Ω–∏–µ HTML —Ñ–æ—Ä–º—ã —Å –±–∞–∑–æ–≤–æ–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–µ–π",
            "complexity": "medium",
            "estimated_time": 4.0
        },
        complexity_score=0.6,
        estimated_difficulty="medium",
        steps_planned=[
            "–°–æ–∑–¥–∞—Ç—å HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É",
            "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            "–ü—Ä–∏–º–µ–Ω–∏—Ç—å CSS —Å—Ç–∏–ª–∏",
            "–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å HTML"
        ],
        steps_executed=[
            {"description": "HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "success": True, "time": 1.5},
            {"description": "–§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "success": True, "time": 2.0},
            {"description": "CSS —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è", "success": True, "time": 1.8},
            {"description": "–í–∞–ª–∏–¥–∞—Ü–∏—è", "success": True, "time": 0.37}
        ],
        tools_used=["html_generator", "css_generator", "validator"],
        errors_encountered=["–ú–∏–Ω–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ CSS –æ—Ç—Å—Ç—É–ø–∞—Ö (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞)"],
        critiques=[
            {
                "type": "design",
                "score": 0.8,
                "summary": "–•–æ—Ä–æ—à–∏–π –¥–∏–∑–∞–π–Ω, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å",
                "details": "–§–æ—Ä–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞, —Å—Ç–∏–ª–∏ –±–∞–∑–æ–≤—ã–µ –Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ"
            }
        ],
        quality_score=0.85,
        improvement_suggestions=[
            "–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ",
            "–£–ª—É—á—à–∏—Ç—å responsive –¥–∏–∑–∞–π–Ω",
            "–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏"
        ],
        rate_limiting_applied=True,
        cache_hit=False,
        memory_usage={"peak_mb": 18.3, "avg_mb": 14.7},
        system_health=0.78,
        content_file="",
        content_type="html",
        content_size=0,
        success=True,
        user_satisfaction_predicted=0.82
    )
    
    files2 = system.create_content_with_metadata(
        task2, content2, "registration_form.html", metadata2
    )
    
    print("\n‚úÖ –°–û–ó–î–ê–ù HTML –§–ê–ô–õ:")
    print(f"   üìÅ –ö–æ–Ω—Ç–µ–Ω—Ç: {files2['content_file']}")
    print(f"   üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {files2['metadata_file']}")
    print(f"   üìã –û—Ç—á—ë—Ç: {files2['report_file']}")
    
    return files1, files2

def show_file_contents(files):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–û–í:")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    content_file = files['content_file']
    print(f"\nüíé –ö–û–ù–¢–ï–ù–¢ ({content_file}):")
    try:
        with open(content_file, 'r', encoding='utf-8') as f:
            content = f.read()
        print(content[:300] + ("..." if len(content) > 300 else ""))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á—ë—Ç
    report_file = files['report_file']
    print(f"\nüìã –û–¢–ß–Å–¢ ({report_file}):")
    try:
        with open(report_file, 'r', encoding='utf-8') as f:
            report = f.read()
        print(report[:500] + ("..." if len(report) > 500 else ""))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–ï–ù–¢ + –ú–ï–¢–ê–î–ê–ù–ù–´–ï")
    print("=" * 80)
    
    print("üí° –ü–†–ò–ù–¶–ò–ü:")
    print("‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ß–ò–°–¢–´–ô –ö–û–ù–¢–ï–ù–¢")
    print("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—É—á–∞–µ—Ç –ë–û–ì–ê–¢–´–ï –ú–ï–¢–ê–î–ê–ù–ù–´–ï")
    print("‚Ä¢ –û—Ç—á—ë—Ç–Ω–æ—Å—Ç—å –ù–ï –ú–ï–®–ê–ï–¢ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É")
    print("‚Ä¢ –í—Å—ë —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ")
    
    files1, files2 = demonstrate_correct_approach()
    
    print("\n" + "="*60)
    show_file_contents(files1)
    
    print("\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Ä–∞–±–æ—Ç–∞—é—â–∏–π –∫–æ–¥")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—É—á–∏–ª–∞ –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
    print("‚úÖ –û—Ç—á—ë—Ç–Ω–æ—Å—Ç—å –Ω–µ –º–µ—à–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É")
    print("‚úÖ –í—Å—ë —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —É–¥–æ–±–Ω–æ")

if __name__ == "__main__":
    main() 