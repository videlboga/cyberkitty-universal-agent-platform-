#!/usr/bin/env python3
"""
üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KittyCore 3.0

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
- code_execution_tool (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã asyncio –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã)
- data_analysis_tool (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã sync/async –ø—Ä–æ–±–ª–µ–º—ã)

–ü—Ä–∏–Ω—Ü–∏–ø: "–†–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã, –Ω–∏–∫–∞–∫–∏—Ö –º–æ–∫–æ–≤!" 
"""

import asyncio
import time
import json
import tempfile
import os
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
from kittycore.tools.code_execution_tools import CodeExecutionTool
from kittycore.tools.data_analysis_tool import DataAnalysisTool

class FixedToolsTester:
    """–¢–µ—Å—Ç–µ—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.code_tool = CodeExecutionTool()
        self.data_tool = DataAnalysisTool()
        self.results = {}
        
    def test_code_execution_tool(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CodeExecutionTool"""
        print("üêç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CODE_EXECUTION_TOOL")
        
        tests = [
            {
                'name': '–ü—Ä–æ—Å—Ç–æ–π Python –∫–æ–¥',
                'action': 'execute_python',
                'code': 'print("Hello from KittyCore!")\nresult = 2 + 2\nprint(f"2 + 2 = {result}")'
            },
            {
                'name': 'Python —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π',
                'action': 'execute_python', 
                'code': 'import math\nprint(f"œÄ = {math.pi:.6f}")\nprint(f"e = {math.e:.6f}")',
                'libraries': ['math']
            },
            {
                'name': '–í–∞–ª–∏–¥–∞—Ü–∏—è Python –∫–æ–¥–∞',
                'action': 'validate_python',
                'code': 'print("Valid code")'
            },
            {
                'name': 'Shell –∫–æ–º–∞–Ω–¥–∞',
                'action': 'execute_shell',
                'code': 'echo "Hello from shell!"'
            },
            {
                'name': '–°–ø–∏—Å–æ–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫',
                'action': 'list_libraries'
            }
        ]
        
        results = []
        for test in tests:
            print(f"\n   üìù {test['name']}")
            start_time = time.time()
            
            try:
                result = self.code_tool.execute(**test)
                execution_time = time.time() - start_time
                
                if result.success:
                    data_size = len(str(result.data)) if result.data else 0
                    print(f"   ‚úÖ –£—Å–ø–µ—Ö ({execution_time:.1f}—Å, {data_size} –±–∞–π—Ç)")
                    if result.data and 'output' in result.data:
                        output = result.data['output'][:100] + '...' if len(result.data['output']) > 100 else result.data['output']
                        print(f"      üìÑ –í—ã–≤–æ–¥: {output}")
                    results.append(True)
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.error}")
                    results.append(False)
                    
            except Exception as e:
                execution_time = time.time() - start_time
                print(f"   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ ({execution_time:.1f}—Å): {e}")
                results.append(False)
        
        success_rate = sum(results) / len(results) * 100
        print(f"\nüèÜ CODE_EXECUTION_TOOL: {sum(results)}/{len(results)} —É—Å–ø–µ—à–Ω–æ ({success_rate:.1f}%)")
        
        self.results['code_execution_tool'] = {
            'success_count': sum(results),
            'total_count': len(results),
            'success_rate': success_rate,
            'working': success_rate > 50
        }
        
        return success_rate > 50
    
    def test_data_analysis_tool(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DataAnalysisTool"""
        print("\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DATA_ANALYSIS_TOOL")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π CSV —Ñ–∞–π–ª
        test_csv_path = self._create_test_csv()
        
        tests = [
            {
                'name': '–ó–∞–≥—Ä—É–∑–∫–∞ CSV –¥–∞–Ω–Ω—ã—Ö',
                'action': 'load_data',
                'file_path': str(test_csv_path),
                'dataset_name': 'test_data'
            },
            {
                'name': '–°–ø–∏—Å–æ–∫ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤',
                'action': 'list_datasets'
            },
            {
                'name': '–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑',
                'action': 'analyze_basic',
                'dataset_name': 'test_data'
            },
            {
                'name': '–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
                'action': 'clean_data',
                'dataset_name': 'test_data',
                'operations': ['remove_duplicates', 'fill_missing']
            },
            {
                'name': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞',
                'action': 'generate_report',
                'dataset_name': 'test_data',
                'report_type': 'basic'
            }
        ]
        
        results = []
        for test in tests:
            print(f"\n   üìù {test['name']}")
            start_time = time.time()
            
            try:
                result = self.data_tool.execute(**test)
                execution_time = time.time() - start_time
                
                if result.success:
                    data_size = len(str(result.data)) if result.data else 0
                    print(f"   ‚úÖ –£—Å–ø–µ—Ö ({execution_time:.1f}—Å, {data_size} –±–∞–π—Ç)")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if result.data:
                        if 'dataset_name' in result.data:
                            print(f"      üìä –î–∞—Ç–∞—Å–µ—Ç: {result.data['dataset_name']}")
                        if 'shape' in result.data:
                            print(f"      üìê –†–∞–∑–º–µ—Ä: {result.data['shape']}")
                        if 'message' in result.data:
                            msg = result.data['message'][:100] + '...' if len(result.data['message']) > 100 else result.data['message']
                            print(f"      üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {msg}")
                    
                    results.append(True)
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.error}")
                    results.append(False)
                    
            except Exception as e:
                execution_time = time.time() - start_time
                print(f"   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ ({execution_time:.1f}—Å): {e}")
                results.append(False)
        
        success_rate = sum(results) / len(results) * 100
        print(f"\nüèÜ DATA_ANALYSIS_TOOL: {sum(results)}/{len(results)} —É—Å–ø–µ—à–Ω–æ ({success_rate:.1f}%)")
        
        self.results['data_analysis_tool'] = {
            'success_count': sum(results),
            'total_count': len(results), 
            'success_rate': success_rate,
            'working': success_rate > 50
        }
        
        # –û—á–∏—Å—Ç–∫–∞
        if test_csv_path.exists():
            test_csv_path.unlink()
        
        return success_rate > 50
    
    def _create_test_csv(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ CSV —Ñ–∞–π–ª–∞"""
        test_data = [
            ['name', 'age', 'city', 'salary'],
            ['Alice', '25', 'Moscow', '50000'],
            ['Bob', '30', 'St.Petersburg', '60000'], 
            ['Charlie', '35', 'Moscow', '70000'],
            ['Diana', '28', 'Novosibirsk', '55000'],
            ['Eve', '', 'Moscow', '65000']  # –ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        ]
        
        temp_dir = Path(tempfile.gettempdir())
        csv_path = temp_dir / 'kittycore_test_data.csv'
        
        with open(csv_path, 'w', newline='', encoding='utf-8') as f:
            import csv
            writer = csv.writer(f)
            writer.writerows(test_data)
        
        return csv_path
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0")
        print("=" * 60)
        
        start_time = time.time()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        code_working = self.test_code_execution_tool()
        data_working = self.test_data_analysis_tool()
        
        total_time = time.time() - start_time
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
        print("\n" + "=" * 60)
        print("üéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("-" * 40)
        
        total_tools = len(self.results)
        working_tools = sum(1 for r in self.results.values() if r['working'])
        
        for tool_name, result in self.results.items():
            status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if result['working'] else "‚ùå –ü–†–û–ë–õ–ï–ú–´"
            print(f"{tool_name:25} {status} ({result['success_count']}/{result['total_count']})")
        
        print("-" * 40)
        print(f"–ò–°–ü–†–ê–í–õ–ï–ù–û: {working_tools}/{total_tools} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ({working_tools/total_tools*100:.1f}%)")
        print(f"–í–†–ï–ú–Ø: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        if working_tools == total_tools:
            print("\nüéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        else:
            print(f"\n‚ö†Ô∏è –ï—â—ë –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã: {total_tools - working_tools} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        
        return working_tools == total_tools

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FixedToolsTester()
    success = tester.run_all_tests()
    
    if success:
        print("\n‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        exit(0)
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
        exit(1)

if __name__ == "__main__":
    main() 