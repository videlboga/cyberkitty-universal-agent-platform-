"""
ü§ñüë§ Human Intervention Engine - –°–∏—Å—Ç–µ–º–∞ human-in-the-loop –¥–ª—è KittyCore

–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:
- ‚úÖ –£—Å–ª–æ–≤–Ω—ã–µ breakpoints (–ª—É—á—à–µ —á–µ–º AutoGen)
- ‚úÖ Async –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π (–ª—É—á—à–µ —á–µ–º CrewAI)  
- ‚úÖ –£–º–Ω—ã–µ –ø–∞—É–∑—ã –ø–æ confidence (–ª—É—á—à–µ —á–µ–º LangGraph)
- ‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ approvals (–ª—É—á—à–µ —á–µ–º –≤—Å–µ—Ö)
- ‚úÖ –ò—Å—Ç–æ—Ä–∏—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤ (—É–Ω–∏–∫–∞–ª—å–Ω–æ!)
- ‚úÖ –¢–∞–π–º–∞—É—Ç—ã –∏ fallback (–Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å)

Inspiration: AutoGen + CrewAI + –Ω–∞—à–∏ –∏–¥–µ–∏! üöÄ
"""

import asyncio
import json
import time
import uuid
from abc import ABC, abstractmethod
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
from enum import Enum
from typing import Dict, List, Any, Optional, Callable, Union, Awaitable
import logging

logger = logging.getLogger(__name__)

# === –¢–ò–ü–´ –ò –°–û–°–¢–û–Ø–ù–ò–Ø ===

class InterventionType(Enum):
    """–¢–∏–ø—ã —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
    APPROVAL = "approval"           # –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ
    INPUT = "input"                # –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    CHOICE = "choice"              # –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±–æ—Ä –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    CONFIRMATION = "confirmation"   # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    EMERGENCY = "emergency"        # –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞


class InterventionStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
    PENDING = "pending"             # –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞
    APPROVED = "approved"           # –û–¥–æ–±—Ä–µ–Ω–æ
    REJECTED = "rejected"           # –û—Ç–∫–ª–æ–Ω–µ–Ω–æ
    TIMEOUT = "timeout"             # –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
    CANCELLED = "cancelled"         # –û—Ç–º–µ–Ω–µ–Ω–æ


class InterventionUrgency(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
    LOW = "low"                     # –ù–∏–∑–∫–∞—è (–º–æ–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å)
    MEDIUM = "medium"               # –°—Ä–µ–¥–Ω—è—è (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ)
    HIGH = "high"                   # –í—ã—Å–æ–∫–∞—è (—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è)
    CRITICAL = "critical"           # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ)


@dataclass
class InterventionRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"""
    id: str
    type: InterventionType
    urgency: InterventionUrgency
    title: str
    description: str
    context: Dict[str, Any]
    options: Optional[List[str]] = None
    default_action: Optional[str] = None
    timeout_seconds: int = 300  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    created_at: datetime = None
    agent_id: str = "unknown"
    scenario_id: str = "unknown"
    
    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now()
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            **asdict(self),
            "type": self.type.value,
            "urgency": self.urgency.value,
            "created_at": self.created_at.isoformat()
        }


@dataclass
class InterventionResponse:
    """–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
    request_id: str
    status: InterventionStatus
    response_data: Any = None
    response_text: str = ""
    responded_by: str = "system"
    responded_at: datetime = None
    execution_time_ms: int = 0
    
    def __post_init__(self):
        if self.responded_at is None:
            self.responded_at = datetime.now()
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            **asdict(self),
            "status": self.status.value,
            "responded_at": self.responded_at.isoformat()
        }


# === –ò–ù–¢–ï–†–§–ï–ô–°–´ ===

class InterventionHandler(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤"""
    
    @abstractmethod
    async def handle_intervention(self, request: InterventionRequest) -> InterventionResponse:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"""
        pass
    
    @abstractmethod
    async def cancel_intervention(self, request_id: str) -> bool:
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"""
        pass


class InterventionCondition(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É—Å–ª–æ–≤–∏–π –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
    
    @abstractmethod
    async def should_intervene(self, context: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"""
        pass


# === –ü–†–û–°–¢–´–ï –£–°–õ–û–í–ò–Ø ===

class ConfidenceCondition(InterventionCondition):
    """–£—Å–ª–æ–≤–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, threshold: float = 0.7, field: str = "confidence"):
        self.threshold = threshold
        self.field = field
    
    async def should_intervene(self, context: Dict[str, Any]) -> bool:
        confidence = context.get(self.field, 1.0)
        return confidence < self.threshold


class ErrorCondition(InterventionCondition):
    """–£—Å–ª–æ–≤–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    
    def __init__(self, error_types: List[str] = None):
        self.error_types = error_types or ["error", "exception", "failure"]
    
    async def should_intervene(self, context: Dict[str, Any]) -> bool:
        if "error" in context or "exception" in context:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        error_type = context.get("error_type", "").lower()
        return any(et in error_type for et in self.error_types)


class CostCondition(InterventionCondition):
    """–£—Å–ª–æ–≤–∏–µ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, max_cost: float = 10.0, cost_field: str = "estimated_cost"):
        self.max_cost = max_cost
        self.cost_field = cost_field
    
    async def should_intervene(self, context: Dict[str, Any]) -> bool:
        cost = context.get(self.cost_field, 0.0)
        return cost > self.max_cost


class TimeCondition(InterventionCondition):
    """–£—Å–ª–æ–≤–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    
    def __init__(self, max_time_seconds: int = 60):
        self.max_time_seconds = max_time_seconds
    
    async def should_intervene(self, context: Dict[str, Any]) -> bool:
        start_time = context.get("start_time")
        if not start_time:
            return False
        
        if isinstance(start_time, str):
            start_time = datetime.fromisoformat(start_time)
        
        elapsed = (datetime.now() - start_time).total_seconds()
        return elapsed > self.max_time_seconds


# === –ë–ê–ó–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

class ConsoleInterventionHandler(InterventionHandler):
    """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    
    async def handle_intervention(self, request: InterventionRequest) -> InterventionResponse:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å"""
        start_time = time.time()
        
        print(f"\nü§ñüë§ –¢–†–ï–ë–£–ï–¢–°–Ø –ß–ï–õ–û–í–ï–ß–ï–°–ö–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û")
        print(f"üìã –¢–∏–ø: {request.type.value}")
        print(f"‚ö° –°—Ä–æ—á–Ω–æ—Å—Ç—å: {request.urgency.value}")
        print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {request.title}")
        print(f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {request.description}")
        
        if request.context:
            print(f"üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç: {json.dumps(request.context, indent=2, ensure_ascii=False)}")
        
        if request.type == InterventionType.APPROVAL:
            response_data = await self._handle_approval(request)
        elif request.type == InterventionType.CHOICE:
            response_data = await self._handle_choice(request)
        elif request.type == InterventionType.INPUT:
            response_data = await self._handle_input(request)
        elif request.type == InterventionType.CONFIRMATION:
            response_data = await self._handle_confirmation(request)
        else:
            response_data = False
        
        execution_time = int((time.time() - start_time) * 1000)
        
        status = InterventionStatus.APPROVED if response_data else InterventionStatus.REJECTED
        
        return InterventionResponse(
            request_id=request.id,
            status=status,
            response_data=response_data,
            response_text=str(response_data),
            responded_by="console_user",
            execution_time_ms=execution_time
        )
    
    async def _handle_approval(self, request: InterventionRequest) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ"""
        while True:
            answer = input(f"\n‚ùì –û–¥–æ–±—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é? (y/n): ").strip().lower()
            if answer in ['y', 'yes', '–¥–∞', '–¥']:
                return True
            elif answer in ['n', 'no', '–Ω–µ—Ç', '–Ω']:
                return False
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ y/n")
    
    async def _handle_choice(self, request: InterventionRequest) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        if not request.options:
            return None
        
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
        for i, option in enumerate(request.options, 1):
            print(f"  {i}. {option}")
        
        while True:
            try:
                answer = input(f"\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-{len(request.options)}): ").strip()
                choice_num = int(answer)
                if 1 <= choice_num <= len(request.options):
                    return request.options[choice_num - 1]
                print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(request.options)}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞")
    
    async def _handle_input(self, request: InterventionRequest) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–≤–æ–¥"""
        return input(f"\n‚ùì {request.title}: ").strip()
    
    async def _handle_confirmation(self, request: InterventionRequest) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        return await self._handle_approval(request)
    
    async def cancel_intervention(self, request_id: str) -> bool:
        """–û—Ç–º–µ–Ω–∞ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (–¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)"""
        print(f"‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ {request_id} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        return False
    
    async def handle_request(self, request: InterventionRequest) -> InterventionResponse:
        """–ê–ª–∏–∞—Å –¥–ª—è handle_intervention –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return await self.handle_intervention(request)


# === –£–¢–ò–õ–ò–¢–´ ===

class InterventionLogger:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤"""
    
    def __init__(self, agent_id: str = "default"):
        self.agent_id = agent_id
        self.logger = logging.getLogger(f"intervention.{agent_id}")
    
    def request_created(self, request: InterventionRequest):
        self.logger.info(
            f"INTERVENTION_REQUEST: {request.id} | {request.type.value} | {request.urgency.value} | {request.title}"
        )
    
    def response_received(self, response: InterventionResponse):
        self.logger.info(
            f"INTERVENTION_RESPONSE: {response.request_id} | {response.status.value} | {response.execution_time_ms}ms"
        )
    
    def timeout_occurred(self, request_id: str, timeout_seconds: int):
        self.logger.warning(f"INTERVENTION_TIMEOUT: {request_id} | {timeout_seconds}s")
    
    def error_occurred(self, request_id: str, error: str):
        self.logger.error(f"INTERVENTION_ERROR: {request_id} | {error}")


def create_approval_request(
    title: str,
    description: str,
    context: Dict[str, Any] = None,
    urgency: InterventionUrgency = InterventionUrgency.MEDIUM,
    timeout_seconds: int = 300
) -> InterventionRequest:
    """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ"""
    return InterventionRequest(
        id=str(uuid.uuid4()),
        type=InterventionType.APPROVAL,
        urgency=urgency,
        title=title,
        description=description,
        context=context or {},
        timeout_seconds=timeout_seconds
    )


def create_choice_request(
    title: str,
    description: str,
    options: List[str],
    context: Dict[str, Any] = None,
    urgency: InterventionUrgency = InterventionUrgency.MEDIUM,
    default_action: str = None
) -> InterventionRequest:
    """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä"""
    return InterventionRequest(
        id=str(uuid.uuid4()),
        type=InterventionType.CHOICE,
        urgency=urgency,
        title=title,
        description=description,
        options=options,
        default_action=default_action,
        context=context or {}
    )


class MockInterventionHandler(InterventionHandler):
    """–ú–æ–∫-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    async def handle_intervention(self, request: InterventionRequest) -> InterventionResponse:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return InterventionResponse(
            request_id=request.id,
            status=InterventionStatus.APPROVED,
            response_data=True,  
            response_text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–æ (–º–æ–∫)",
            responded_by="mock_handler",
            execution_time_ms=10
        )
    
    async def cancel_intervention(self, request_id: str) -> bool:
        """–ú–æ–∫ –æ—Ç–º–µ–Ω—ã"""
        return True


# === –≠–ö–°–ü–û–†–¢ ===

__all__ = [
    'InterventionType', 'InterventionStatus', 'InterventionUrgency',
    'InterventionRequest', 'InterventionResponse', 
    'InterventionHandler', 'InterventionCondition',
    'ConfidenceCondition', 'ErrorCondition', 'CostCondition', 'TimeCondition',
    'ConsoleInterventionHandler', 'MockInterventionHandler',
    'InterventionLogger',
    'create_approval_request', 'create_choice_request'
] 