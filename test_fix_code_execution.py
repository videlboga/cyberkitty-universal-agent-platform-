#!/usr/bin/env python3
"""
üíª –û–¢–õ–ê–î–ö–ê: code_execution_tool
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∏ shell –∫–æ–¥–∞

–û–°–û–ë–ï–ù–ù–û–°–¢–ò:
- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –°–ò–ù–•–†–û–ù–ù–´–ô —Å –ê–°–ò–ù–•–†–û–ù–ù–´–ú–ò –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: action (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π), code, language, timeout
- –î–µ–π—Å—Ç–≤–∏—è: execute_python, execute_shell, validate_python, validate_shell
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: sandbox, —Ç–∞–π–º–∞—É—Ç—ã, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

–ü–õ–ê–ù –û–¢–õ–ê–î–ö–ò:
1. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ execute()
2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (action + code)
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
4. –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ sandbox
"""

import time
import json

# –ò–º–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
try:
    from kittycore.tools.code_execution_tools import CodeExecutionTool
    IMPORT_OK = True
    print("‚úÖ –ò–º–ø–æ—Ä—Ç code_execution_tool —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ –û–®–ò–ë–ö–ê: {e}")
    IMPORT_OK = False

def test_python_execution():
    """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python –∫–æ–¥–∞"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüêç –¢–µ—Å—Ç–∏—Ä—É—é Python –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...")
    tool = CodeExecutionTool()
    
    python_code = """
import math
result = math.sqrt(16)
print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
numbers = [1, 2, 3]
print(f"–°—É–º–º–∞: {sum(numbers)}")
"""
    
    result = tool.execute(
        action="execute_python",
        code=python_code,
        timeout=10
    )
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            print(f"üì¶ –†–∞–∑–º–µ—Ä: {len(str(data))} –±–∞–π—Ç")
            print(f"üîë –ö–ª—é—á–∏: {list(data.keys()) if isinstance(data, dict) else '–Ω–µ dict'}")
    
    return result

def test_shell_execution():
    """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è shell –∫–æ–º–∞–Ω–¥"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüêö –¢–µ—Å—Ç–∏—Ä—É—é code_execution —Å shell –∫–æ–º–∞–Ω–¥–∞–º–∏...")
    
    tool = CodeExecutionTool()
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è shell –∫–æ–º–∞–Ω–¥–∞
    shell_code = """
echo "–ü—Ä–∏–≤–µ—Ç –æ—Ç shell!"
echo "–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: $(date)"
echo "–§–∞–π–ª—ã –≤ /tmp:"
ls -la /tmp | head -5
echo "–ü—Ä–æ—Ü–µ—Å—Å—ã Python:"
ps aux | grep python | head -3
"""
    
    result = tool.execute(
        action="execute_shell",
        code=shell_code,
        timeout=10
    )
    
    print(f"üìä Shell —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            output = data.get('output', '') if isinstance(data, dict) else str(data)
            print(f"üì∫ Shell –≤—ã–≤–æ–¥: {len(output)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            expected_shell = ["–ü—Ä–∏–≤–µ—Ç –æ—Ç shell", "–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞", "–§–∞–π–ª—ã –≤ /tmp"]
            for expected in expected_shell:
                if expected in output:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π shell —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected}")
                else:
                    print(f"‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω shell —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected}")
        else:
            print(f"‚ùå Shell –æ—à–∏–±–∫–∞: {getattr(result, 'error', '–ù–ï–ò–ó–í–ï–°–¢–ù–û')}")
    
    return result

def test_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∞"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–¥–∞...")
    
    tool = CodeExecutionTool()
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–¥–∞
    safe_code = "print('Hello World')\nresult = 2 + 2"
    
    result = tool.execute(
        action="validate_python",
        code=safe_code
    )
    
    print(f"üìä –í–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–¥–∞: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–¥–∞
        dangerous_code = "import os\nos.system('rm -rf /')"
        
        dangerous_result = tool.execute(
            action="validate_python",
            code=dangerous_code
        )
        
        print(f"üìä –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–¥–∞: {type(dangerous_result)}")
        if hasattr(dangerous_result, 'success'):
            print(f"üö´ Dangerous Success (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False): {dangerous_result.success}")
            if not dangerous_result.success:
                print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç - –æ–ø–∞—Å–Ω—ã–π –∫–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    
    return result

def test_list_actions():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è...")
    
    tool = CodeExecutionTool()
    
    # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
    result1 = tool.execute(action="list_libraries")
    print(f"üìä –°–ø–∏—Å–æ–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫: {type(result1)}")
    if hasattr(result1, 'success') and result1.success:
        data = result1.data
        if isinstance(data, dict) and 'libraries' in data:
            libs = data['libraries']
            print(f"üìö –î–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫: {len(libs)}")
            print(f"   –ü–µ—Ä–≤—ã–µ 5: {list(libs)[:5]}")
    
    # –¢–µ—Å—Ç –ª–∏–º–∏—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    result2 = tool.execute(action="get_execution_limits")
    print(f"üìä –õ–∏–º–∏—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {type(result2)}")
    if hasattr(result2, 'success') and result2.success:
        data = result2.data
        if isinstance(data, dict):
            print(f"‚è±Ô∏è Python timeout: {data.get('python_timeout', '–ù–ï–¢')}")
            print(f"‚è±Ô∏è Shell timeout: {data.get('shell_timeout', '–ù–ï–¢')}")
            print(f"üì¶ Max output: {data.get('max_output_size', '–ù–ï–¢')}")
    
    return result1

def is_result_honest(result, test_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if not result:
        print(f"‚ùå {test_name}: –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return False
    
    if not hasattr(result, 'success'):
        print(f"‚ùå {test_name}: –ù–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ success")
        return False
    
    if not result.success:
        print(f"‚ùå {test_name}: success=False")
        if hasattr(result, 'error'):
            print(f"   –û—à–∏–±–∫–∞: {result.error}")
        return False
    
    if not hasattr(result, 'data') or not result.data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    data = result.data
    data_str = str(data)
    data_size = len(data_str)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–µ–π–∫–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    fake_patterns = [
        "code_execution: —É—Å–ø–µ—à–Ω–æ",
        "–¥–µ–º–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
        "–∑–∞–≥–ª—É—à–∫–∞ –∫–æ–¥–∞",
        "—Ç–µ—Å—Ç–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
    ]
    
    for pattern in fake_patterns:
        if pattern.lower() in data_str.lower():
            print(f"‚ùå {test_name}: –ù–∞–π–¥–µ–Ω —Ñ–µ–π–∫–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
    code_indicators = [
        "output", "stdout", "stderr", "execution_time", "return_code", 
        "–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å", "—Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤", "–ø—Ä–∏–≤–µ—Ç –æ—Ç shell", "—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞"
    ]
    
    has_code_data = any(indicator.lower() in data_str.lower() for indicator in code_indicators)
    
    if not has_code_data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞")
        return False
    
    if data_size < 50:
        print(f"‚ùå {test_name}: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
        return False
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    if "python" in test_name.lower():
        # –î–ª—è Python –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        python_results = ["4.0", "55", "[1, 4, 9, 16, 25]"]
        has_python_result = any(result in data_str for result in python_results)
        if not has_python_result:
            print(f"‚ùå {test_name}: –ù–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Python")
            return False
    
    if "shell" in test_name.lower():
        # –î–ª—è shell –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        shell_results = ["–ø—Ä–∏–≤–µ—Ç –æ—Ç shell", "—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞", "—Ñ–∞–π–ª—ã –≤ /tmp"]
        has_shell_result = any(result.lower() in data_str.lower() for result in shell_results)
        if not has_shell_result:
            print(f"‚ùå {test_name}: –ù–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ shell")
            return False
    
    print(f"‚úÖ {test_name}: –ß–ï–°–¢–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("üíª –û–¢–õ–ê–î–ö–ê: code_execution_tool")
    print("=" * 50)
    
    if not IMPORT_OK:
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞")
        return
    
    results = {}
    
    # –¢–µ—Å—Ç 1: Python –∫–æ–¥
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 1: Python –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    try:
        result1 = test_python_execution()
        results["python_execution"] = is_result_honest(result1, "Python –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 1 –û–®–ò–ë–ö–ê: {e}")
        results["python_execution"] = False
    
    # –¢–µ—Å—Ç 2: Shell –∫–æ–º–∞–Ω–¥—ã
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 2: Shell –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    try:
        result2 = test_shell_execution()
        results["shell_execution"] = is_result_honest(result2, "Shell –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 2 –û–®–ò–ë–ö–ê: {e}")
        results["shell_execution"] = False
    
    # –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞")
    try:
        result3 = test_validation()
        results["code_validation"] = is_result_honest(result3, "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 3 –û–®–ò–ë–ö–ê: {e}")
        results["code_validation"] = False
    
    # –¢–µ—Å—Ç 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
    try:
        result4 = test_list_actions()
        results["info_actions"] = is_result_honest(result4, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 4 –û–®–ò–ë–ö–ê: {e}")
        results["info_actions"] = False
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –û–¢–õ–ê–î–ö–ò:")
    
    total_tests = len(results)
    passed_tests = sum(1 for success in results.values() if success)
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    print("\n–î–µ—Ç–∞–ª–∏:")
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("code_execution_fix_results.json", "w", encoding="utf-8") as f:
        json.dump({
            "tool": "code_execution_tool",
            "tests": results,
            "summary": {
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "success_rate": success_rate
            },
            "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ code_execution_fix_results.json")
    
    # –í–µ—Ä–¥–∏–∫—Ç
    if success_rate >= 75:
        print("\nüéâ CODE_EXECUTION_TOOL –ò–°–ü–†–ê–í–õ–ï–ù!")
        print("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–¥–∞")
        return True
    elif success_rate >= 50:
        print("\n‚ö†Ô∏è CODE_EXECUTION_TOOL –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
        return False
    else:
        print("\n‚ùå CODE_EXECUTION_TOOL –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        return False

if __name__ == "__main__":
    main() 