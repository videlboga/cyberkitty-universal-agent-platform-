"""
üîç Sphinx Search Integration - –ë—É–¥—É—â–µ–µ KittyCore 3.0 Memory System

–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Sphinx Search –¥–ª—è —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:
‚úÖ –ü–µ—Ä–∫–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∞–≥–µ–Ω—Ç–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
‚úÖ HNSW –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞  
‚úÖ SQL joins –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–≤—è–∑–µ–π –ø–∞–º—è—Ç–∏
‚úÖ Full-text –ø–æ–∏—Å–∫ —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º–∏ WHERE —É—Å–ª–æ–≤–∏—è–º–∏

–ü—Ä–∏–Ω—Ü–∏–ø: "Sphinx + A-MEM = –ù–µ–ø—Ä–µ–≤–∑–æ–π–¥—ë–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–æ–≤" üöÄ
"""

import asyncio
import json
import logging
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path

logger = logging.getLogger(__name__)

@dataclass
class SphinxMemoryEntry:
    """–ó–∞–ø–∏—Å—å –ø–∞–º—è—Ç–∏ –¥–ª—è Sphinx Search"""
    memory_id: str
    agent_id: str
    content: str
    tags: List[str]
    category: str
    timestamp: datetime
    vector_embedding: Optional[List[float]] = None
    percolation_queries: List[str] = None  # –ó–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–µ—Ä–∫–æ–ª—è—Ü–∏–∏
    
class SphinxAgentMemory:
    """
    –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Sphinx Search –≤ KittyCore 3.0
    
    –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    üîç –ü–µ—Ä–∫–æ–ª—è—Ü–∏—è: "–∫–∞–∫–∏–µ –∞–≥–µ–Ω—Ç—ã —Ä–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ —Å–æ–±—ã—Ç–∏–µ X?"
    üß† –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫: —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
    üìä SQL joins: —Å–ª–æ–∂–Ω—ã–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    ‚ö° Full-text: –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    """
    
    def __init__(self, sphinx_config_path: str = "sphinx_config"):
        self.config_path = Path(sphinx_config_path)
        self.config_path.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Sphinx
        self.sphinx_host = "localhost"
        self.sphinx_port = 9312
        self.index_name = "kittycore_memory"
        
        self.memory_storage = {}
        self.percolation_rules = {}  # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–µ—Ä–∫–æ–ª—è—Ü–∏–∏
        
        logger.info("üîç SphinxAgentMemory –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)")
    
    async def create_sphinx_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Sphinx –¥–ª—è KittyCore"""
        
        config_content = f"""
# === KITTYCORE 3.0 SPHINX CONFIGURATION ===
# –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤
index {self.index_name}
{{
    # –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö - JSON —Ñ–∞–π–ª—ã –ø–∞–º—è—Ç–∏
    type = rt
    path = {self.config_path}/memory_index
    
    # –ü–æ–ª—è –¥–ª—è –∞–≥–µ–Ω—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏
    rt_field = content        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    rt_field = agent_id       # ID –∞–≥–µ–Ω—Ç–∞  
    rt_field = category       # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∞–º—è—Ç–∏
    rt_field = tags          # –¢–µ–≥–∏ (JSON –º–∞—Å—Å–∏–≤)
    
    # –ê—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    rt_attr_uint = timestamp  # Unix timestamp
    rt_attr_string = agent_id # ID –∞–≥–µ–Ω—Ç–∞
    rt_attr_string = category # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    rt_attr_json = metadata   # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (JSON)
    
    # –í–ï–ö–¢–û–†–ù–´–ï –ò–ù–î–ï–ö–°–´ (Sphinx 3.8.1+)
    rt_attr_float_vector = embedding[384]  # –í–µ–∫—Ç–æ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
    morphology = stem_ru, stem_en
    min_word_len = 2
    charset_table = 0..9, A..Z->a..z, a..z, _, U+410..U+42F->U+430..U+44F, U+430..U+44F
}}

# –ü–ï–†–ö–û–õ–Ø–¶–ò–û–ù–ù–´–ô –ò–ù–î–ï–ö–° –¥–ª—è –∞–≥–µ–Ω—Ç–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
index {self.index_name}_percolate
{{
    type = percolate
    path = {self.config_path}/percolate_index
    
    # –ü–æ–ª—è –¥–ª—è –ø–µ—Ä–∫–æ–ª—è—Ü–∏–∏
    rt_field = trigger_query    # –ó–∞–ø—Ä–æ—Å-—Ç—Ä–∏–≥–≥–µ—Ä
    rt_field = agent_patterns   # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∞–≥–µ–Ω—Ç–∞
    
    # –ê—Ç—Ä–∏–±—É—Ç—ã
    rt_attr_string = agent_id   # –ö–∞–∫–æ–π –∞–≥–µ–Ω—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç
    rt_attr_string = action     # –ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
    rt_attr_uint = priority     # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
}}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
searchd
{{
    listen = {self.sphinx_port}
    log = {self.config_path}/searchd.log
    query_log = {self.config_path}/query.log
    pid_file = {self.config_path}/searchd.pid
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    max_matches = 10000
    max_packet_size = 32M
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ JSON –∏ –≤–µ–∫—Ç–æ—Ä–æ–≤
    workers = threads
    dist_threads = 8
}}

# –ò–Ω–¥–µ–∫—Å–µ—Ä
indexer
{{
    mem_limit = 256M
}}
"""
        
        config_file = self.config_path / "sphinx.conf"
        with open(config_file, 'w', encoding='utf-8') as f:
            f.write(config_content.strip())
            
        logger.info(f"üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Sphinx —Å–æ–∑–¥–∞–Ω–∞: {config_file}")
        return config_file
    
    async def add_agent_memory(self, agent_id: str, content: str, 
                              tags: List[str] = None, 
                              category: str = "general",
                              embedding: List[float] = None) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Sphinx"""
        
        memory_id = f"sphinx_{agent_id}_{int(datetime.now().timestamp())}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏
        memory_entry = SphinxMemoryEntry(
            memory_id=memory_id,
            agent_id=agent_id,
            content=content,
            tags=tags or [],
            category=category,
            timestamp=datetime.now(),
            vector_embedding=embedding
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self.memory_storage[memory_id] = memory_entry
        
        # TODO: –†–µ–∞–ª—å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤ Sphinx RT –∏–Ω–¥–µ–∫—Å
        # INSERT INTO kittycore_memory (content, agent_id, category, tags, timestamp, embedding)
        # VALUES (?, ?, ?, ?, ?, ?)
        
        logger.info(f"üß† Sphinx –ø–∞–º—è—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {memory_id} (–∞–≥–µ–Ω—Ç: {agent_id})")
        return memory_id
    
    async def create_percolation_rule(self, agent_id: str, trigger_pattern: str,
                                    action: str, priority: int = 100):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–∫–æ–ª—è—Ü–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        
        rule_id = f"percolate_{agent_id}_{len(self.percolation_rules)}"
        
        self.percolation_rules[rule_id] = {
            'agent_id': agent_id,
            'pattern': trigger_pattern,
            'action': action,
            'priority': priority
        }
        
        # TODO: –†–µ–∞–ª—å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤ –ø–µ—Ä–∫–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        # INSERT INTO kittycore_memory_percolate (trigger_query, agent_id, action, priority)
        # VALUES (?, ?, ?, ?)
        
        logger.info(f"üéØ –ü—Ä–∞–≤–∏–ª–æ –ø–µ—Ä–∫–æ–ª—è—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–æ: {rule_id}")
        return rule_id
    
    async def vector_search(self, query_embedding: List[float], 
                           agent_filter: str = None, k: int = 5) -> List[Dict]:
        """–í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Sphinx HNSW"""
        
        # TODO: –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Sphinx —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
        # SELECT *, DOT(embedding, ?) as similarity 
        # FROM kittycore_memory 
        # WHERE agent_id = ? 
        # ORDER BY similarity DESC 
        # LIMIT ?
        
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = []
        for memory_id, entry in list(self.memory_storage.items())[:k]:
            if not agent_filter or entry.agent_id == agent_filter:
                results.append({
                    'memory_id': memory_id,
                    'content': entry.content,
                    'agent_id': entry.agent_id,
                    'similarity': 0.85,  # –ú–æ–∫ —Å–∏–º–∏–ª—è—Ä–∏—Ç–µ—Ç–∞
                    'tags': entry.tags
                })
                
        logger.info(f"üîç –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return results
    
    async def percolate_event(self, event_content: str) -> List[Dict]:
        """–ü–µ—Ä–∫–æ–ª—è—Ü–∏—è: –∫–∞–∫–∏–µ –∞–≥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"""
        
        # TODO: –†–µ–∞–ª—å–Ω—ã–π –ø–µ—Ä–∫–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Sphinx
        # CALL PQ('kittycore_memory_percolate', ?, 0 as docs)
        
        triggered_agents = []
        for rule_id, rule in self.percolation_rules.items():
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - —á–µ—Ä–µ–∑ Sphinx)
            if rule['pattern'].lower() in event_content.lower():
                triggered_agents.append({
                    'agent_id': rule['agent_id'],
                    'action': rule['action'],
                    'priority': rule['priority'],
                    'rule_id': rule_id
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        triggered_agents.sort(key=lambda x: x['priority'], reverse=True)
        
        logger.info(f"‚ö° –ü–µ—Ä–∫–æ–ª—è—Ü–∏—è: —Å—Ä–∞–±–æ—Ç–∞–ª–æ {len(triggered_agents)} –ø—Ä–∞–≤–∏–ª")
        return triggered_agents
    
    async def full_text_search(self, query: str, filters: Dict = None, 
                              limit: int = 10) -> List[Dict]:
        """Full-text –ø–æ–∏—Å–∫ —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º–∏ WHERE —É—Å–ª–æ–≤–∏—è–º–∏"""
        
        # TODO: –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Sphinx
        # SELECT * FROM kittycore_memory 
        # WHERE MATCH(?) AND category = ? AND timestamp > ?
        # ORDER BY @weight DESC, timestamp DESC 
        # LIMIT ?
        
        results = []
        for memory_id, entry in self.memory_storage.items():
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            if query.lower() in entry.content.lower():
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                if filters:
                    if filters.get('category') and entry.category != filters['category']:
                        continue
                    if filters.get('agent_id') and entry.agent_id != filters['agent_id']:
                        continue
                
                results.append({
                    'memory_id': memory_id,
                    'content': entry.content,
                    'agent_id': entry.agent_id,
                    'category': entry.category,
                    'weight': 100,  # –ú–æ–∫ –≤–µ—Å–∞
                    'timestamp': entry.timestamp.isoformat()
                })
                
                if len(results) >= limit:
                    break
        
        logger.info(f"üìù Full-text –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return results
    
    async def complex_join_search(self, query: str) -> List[Dict]:
        """–°–ª–æ–∂–Ω—ã–π –ø–æ–∏—Å–∫ —Å JOIN –º–µ–∂–¥—É –∏–Ω–¥–µ–∫—Å–∞–º–∏"""
        
        # TODO: –†–µ–∞–ª—å–Ω—ã–π JOIN –∑–∞–ø—Ä–æ—Å –∫ Sphinx
        # SELECT m.*, p.action, p.priority
        # FROM kittycore_memory m
        # LEFT JOIN kittycore_memory_percolate p ON m.agent_id = p.agent_id
        # WHERE MATCH(?) AND p.priority > 50
        # ORDER BY p.priority DESC, m.timestamp DESC
        
        logger.info("üîó –°–ª–æ–∂–Ω—ã–π JOIN –ø–æ–∏—Å–∫ (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)")
        return []
    
    def get_sphinx_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Sphinx –ø–∞–º—è—Ç–∏"""
        return {
            'total_memories': len(self.memory_storage),
            'percolation_rules': len(self.percolation_rules),
            'agents_count': len(set(entry.agent_id for entry in self.memory_storage.values())),
            'categories': list(set(entry.category for entry in self.memory_storage.values())),
            'sphinx_version': '3.8.1',
            'features': [
                'HNSW Vector Search',
                'Percolation Indexes', 
                'Full-text Search',
                'SQL Joins',
                'Real-time Updates'
            ]
        }

# === INTEGRATION EXAMPLES ===

async def demo_sphinx_capabilities():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Sphinx –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤"""
    
    sphinx_memory = SphinxAgentMemory()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    await sphinx_memory.create_sphinx_config()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤
    await sphinx_memory.add_agent_memory(
        agent_id="data_analyst",
        content="–ü—Ä–æ–≤–µ–ª –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24, –≤—ã—è–≤–∏–ª 10 —Ç–æ–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
        tags=["market_analysis", "bitrix24", "success"],
        category="analysis_result"
    )
    
    await sphinx_memory.add_agent_memory(
        agent_id="code_generator", 
        content="–°–æ–∑–¥–∞–ª HTML –ø—Ä–æ—Ç–æ—Ç–∏–ø —Å —Ñ–æ—Ä–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        tags=["html", "prototype", "frontend"],
        category="code_result"
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø–µ—Ä–∫–æ–ª—è—Ü–∏–∏
    await sphinx_memory.create_percolation_rule(
        agent_id="security_agent",
        trigger_pattern="–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å OR —É—è–∑–≤–∏–º–æ—Å—Ç—å OR hack",
        action="analyze_security_threat",
        priority=200
    )
    
    await sphinx_memory.create_percolation_rule(
        agent_id="optimization_agent", 
        trigger_pattern="–º–µ–¥–ª–µ–Ω–Ω–æ OR performance OR –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
        action="optimize_performance",
        priority=150
    )
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∫–æ–ª—è—Ü–∏–∏
    triggered = await sphinx_memory.percolate_event(
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    )
    
    print("üéØ –ü–ï–†–ö–û–õ–Ø–¶–ò–Ø - –ê–≥–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å:")
    for agent in triggered:
        print(f"  Agent: {agent['agent_id']} -> Action: {agent['action']}")
    
    # Full-text –ø–æ–∏—Å–∫
    search_results = await sphinx_memory.full_text_search(
        "–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞",
        filters={'category': 'analysis_result'}
    )
    
    print(f"\nüìù FULL-TEXT –ü–û–ò–°–ö: –Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = sphinx_memory.get_sphinx_stats()
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê SPHINX:")
    print(f"  –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats['total_memories']}")
    print(f"  –ü—Ä–∞–≤–∏–ª –ø–µ—Ä–∫–æ–ª—è—Ü–∏–∏: {stats['percolation_rules']}")
    print(f"  –ê–≥–µ–Ω—Ç–æ–≤: {stats['agents_count']}")
    print(f"  –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {', '.join(stats['features'])}")

if __name__ == "__main__":
    asyncio.run(demo_sphinx_capabilities()) 