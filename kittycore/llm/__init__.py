"""
üß† LLM –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è KittyCore 3.0

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:
- OpenRouter (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏)
- OpenAI 
- Anthropic
- Local models
"""

import os
import json
import httpx
import asyncio
from typing import Dict, Any, Optional, Iterator
from dataclasses import dataclass

@dataclass
class LLMConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM"""
    provider: str = "openrouter"
    model: str = "meta-llama/llama-3.2-3b-instruct:free"  # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
    api_key: Optional[str] = None
    base_url: Optional[str] = None
    temperature: float = 0.7
    max_tokens: int = 1000
    timeout: int = 30

class LLMProvider:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    def __init__(self, config: LLMConfig):
        self.config = config
        
    def complete(self, prompt: str, **kwargs) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM"""
        raise NotImplementedError
        
    def stream(self, prompt: str, **kwargs) -> Iterator[str]:
        """–°—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤"""
        raise NotImplementedError

class OpenRouterProvider(LLMProvider):
    """OpenRouter –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ + rate limiting"""
    
    def __init__(self, config: LLMConfig):
        super().__init__(config)
        self.api_key = config.api_key or os.getenv("OPENROUTER_API_KEY")
        self.base_url = "https://openrouter.ai/api/v1"
        self.last_request_time = 0
        self.min_request_interval = 3.5  # –ú–∏–Ω–∏–º—É–º 3.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è 20/–º–∏–Ω –ª–∏–º–∏—Ç–∞)
        
        if not self.api_key:
            raise ValueError("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–∏—Å—Ç–µ–º–∞ –ù–ï –ú–û–ñ–ï–¢ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ LLM!")
            
    def complete(self, prompt: str, **kwargs) -> str:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ OpenRouter —Å rate limiting - –ë–ï–ó FALLBACK"""
        if not self.api_key:
            raise ValueError("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç API –∫–ª—é—á–∞ –¥–ª—è LLM!")
        
        # Rate limiting - –∂–¥—ë–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        import time
        current_time = time.time()
        time_since_last = current_time - self.last_request_time
        if time_since_last < self.min_request_interval:
            sleep_time = self.min_request_interval - time_since_last
            print(f"üõ°Ô∏è Rate limiting: –∂–¥—ë–º {sleep_time:.1f}—Å...")
            time.sleep(sleep_time)
        
        self.last_request_time = time.time()
            
        try:
            response = httpx.post(
                f"{self.base_url}/chat/completions",
                headers={
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": self.config.model,
                    "messages": [
                        {"role": "user", "content": prompt}
                    ],
                    "temperature": kwargs.get("temperature", self.config.temperature),
                    "max_tokens": kwargs.get("max_tokens", self.config.max_tokens)
                },
                timeout=self.config.timeout
            )
            
            if response.status_code == 200:
                data = response.json()
                return data["choices"][0]["message"]["content"]
            else:
                raise Exception(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê LLM API: {response.status_code} - {response.text}")
                
        except Exception as e:
            raise Exception(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê LLM: {e} - –°–ò–°–¢–ï–ú–ê –ù–ï –ú–û–ñ–ï–¢ –†–ê–ë–û–¢–ê–¢–¨ –ë–ï–ó LLM!")

class SimpleLocalProvider(LLMProvider):
    """–£–î–ê–õ–ï–ù - –ù–ï–¢ –ú–û–ö–û–í!"""
    
    def complete(self, prompt: str, **kwargs) -> str:
        """–ù–ï–¢ –õ–û–ö–ê–õ–¨–ù–´–• –ú–û–ö–û–í!"""
        raise Exception("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã! –ù—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π LLM!")

def get_llm_provider(model: str = None, config: LLMConfig = None) -> LLMProvider:
    """–ü–æ–ª—É—á–∏—Ç—å LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä - –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï LLM"""
    if config is None:
        config = LLMConfig()
        
    if model:
        config.model = model
        
    # –¢–û–õ–¨–ö–û OpenRouter - –Ω–∏–∫–∞–∫–∏—Ö fallback
    if "openrouter" in config.provider or any(provider in config.model for provider in ["meta-llama", "google", "anthropic"]):
        return OpenRouterProvider(config)
    else:
        # –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö fallback - –µ—Å–ª–∏ –Ω–µ OpenRouter, —Ç–æ –æ—à–∏–±–∫–∞
        raise Exception(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä {config.provider}! –¢–æ–ª—å–∫–æ OpenRouter!")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
_default_provider = None

def get_default_provider() -> LLMProvider:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    global _default_provider
    if _default_provider is None:
        _default_provider = get_llm_provider()
    return _default_provider

def set_default_provider(provider: LLMProvider):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    global _default_provider
    _default_provider = provider 