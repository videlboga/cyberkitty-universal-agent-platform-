#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò OBSIDIAN
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ObsidianOrchestrator —Å–æ–∑–¥–∞—ë—Ç –†–ï–ê–õ–¨–ù–´–ï —Ñ–∞–π–ª—ã –ò —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ vault
"""

import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ kittycore
sys.path.insert(0, str(Path(__file__).parent))

from kittycore.core.obsidian_orchestrator import solve_with_obsidian_orchestrator


async def test_obsidian_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é ObsidianOrchestrator"""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò OBSIDIAN")
    print("=" * 60)
    
    # –ó–∞–¥–∞—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_task = "–°–æ–∑–¥–∞–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –∫—Ä—É–≥–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ A = œÄ * r¬≤"
    
    print(f"üìã –ó–∞–¥–∞—á–∞: {test_task}")
    print()
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ ObsidianOrchestrator
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º ObsidianOrchestrator...")
        result = await solve_with_obsidian_orchestrator(test_task)
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result['status']}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result['duration']:.2f}—Å")
        print(f"ü§ñ –ê–≥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {result['agents_created']}")
        print(f"üìÅ Vault: {result['vault_path']}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        print("üìÇ –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–´–• –§–ê–ô–õ–û–í:")
        outputs_dir = Path("outputs")
        if outputs_dir.exists():
            files = list(outputs_dir.glob("*.py"))
            print(f"   üêç Python —Ñ–∞–π–ª–æ–≤: {len(files)}")
            
            for py_file in files[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ñ–∞–π–ª–∞
                content = py_file.read_text(encoding='utf-8')
                print(f"   üìÑ {py_file.name} ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥, –∞ –Ω–µ –æ—Ç—á—ë—Ç
                if "import" in content or "def " in content or "print(" in content:
                    print(f"      ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π Python –∫–æ–¥")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É–ª—É –ø–ª–æ—â–∞–¥–∏ –∫—Ä—É–≥–∞
                    if "œÄ" in content or "pi" in content or "3.14" in content:
                        print(f"      ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º—É–ª—É –ø–ª–æ—â–∞–¥–∏ –∫—Ä—É–≥–∞")
                    else:
                        print(f"      ‚ö†Ô∏è –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º—É–ª—É –ø–ª–æ—â–∞–¥–∏ –∫—Ä—É–≥–∞")
                else:
                    print(f"      ‚ùå –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥")
        else:
            print("   ‚ùå –ü–∞–ø–∫–∞ outputs/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ObsidianDB vault
        print("üóÑÔ∏è –ü–†–û–í–ï–†–ö–ê OBSIDIAN VAULT:")
        vault_path = Path(result['vault_path'])
        if vault_path.exists():
            # –ó–∞–º–µ—Ç–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
            agent_notes = list(vault_path.glob("agents/**/*.md"))
            print(f"   üìù –ó–∞–º–µ—Ç–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤: {len(agent_notes)}")
            
            # –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            artifact_notes = list(vault_path.glob("system/*artifact*.md"))
            print(f"   üíé –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {len(artifact_notes)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
            if artifact_notes:
                latest_artifact = max(artifact_notes, key=lambda x: x.stat().st_mtime)
                content = latest_artifact.read_text(encoding='utf-8')
                print(f"   üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: {latest_artifact.name}")
                
                if "```python" in content and ("œÄ" in content or "pi" in content):
                    print(f"      ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç Python –∫–æ–¥ —Å —Ñ–æ—Ä–º—É–ª–æ–π")
                else:
                    print(f"      ‚ö†Ô∏è –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ–¥")
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
            system_notes = list(vault_path.glob("system/*.md"))
            print(f"   üîß –°–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫: {len(system_notes)}")
            
        else:
            print(f"   ‚ùå Vault –Ω–µ –Ω–∞–π–¥–µ–Ω: {vault_path}")
        
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
        print("ü§ñ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ì–ï–ù–¢–û–í:")
        obsidian_results = result.get('obsidian_results', {})
        agent_results = obsidian_results.get('agent_results', [])
        
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤: {len(agent_results)}")
        
        for i, agent_result in enumerate(agent_results[-2:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2
            agent_id = agent_result.get('agent_id', 'unknown')
            result_type = agent_result.get('result_type', 'unknown')
            content = agent_result.get('content', '')
            
            print(f"   {i}. –ê–≥–µ–Ω—Ç {agent_id} ({result_type})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–ª —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if len(content) > 100:
                print(f"      ‚úÖ –°–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                if "```python" in content or "def " in content:
                    print(f"      ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç Python –∫–æ–¥")
                else:
                    print(f"      ‚ö†Ô∏è –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Python –∫–æ–¥")
            else:
                print(f"      ‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        print()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        print("üéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
        real_files_created = len(list(Path("outputs").glob("*.py"))) > 0 if Path("outputs").exists() else False
        vault_has_artifacts = len(list(vault_path.glob("system/*artifact*.md"))) > 0 if vault_path.exists() else False
        agents_produced_results = len(agent_results) > 0
        
        success_score = sum([real_files_created, vault_has_artifacts, agents_produced_results])
        
        print(f"   üìÑ –†–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã: {'‚úÖ' if real_files_created else '‚ùå'}")
        print(f"   üóÑÔ∏è –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ vault: {'‚úÖ' if vault_has_artifacts else '‚ùå'}")
        print(f"   ü§ñ –ê–≥–µ–Ω—Ç—ã –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {'‚úÖ' if agents_produced_results else '‚ùå'}")
        print()
        print(f"   üèÜ –û–¶–ï–ù–ö–ê: {success_score}/3 ({success_score/3*100:.0f}%)")
        
        if success_score == 3:
            print("   üéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!")
        elif success_score == 2:
            print("   ‚úÖ –•–û–†–û–®–û! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
        elif success_score == 1:
            print("   ‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print("   ‚ùå –ü–†–û–í–ê–õ! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return success_score == 3
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(test_obsidian_integration())
    exit(0 if success else 1) 