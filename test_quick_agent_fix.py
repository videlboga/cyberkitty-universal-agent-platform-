#!/usr/bin/env python3
"""
‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig

async def test_quick_fix():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —á—Ç–æ –∞–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç"""
    
    print("‚ö° === –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ê–ì–ï–ù–¢–û–í ===")
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = UnifiedConfig(
        vault_path="./vault_quick_test",
        enable_amem_memory=True,
        enable_smart_validation=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        max_agents=1
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = UnifiedOrchestrator(config)
    print(f"üß† A-MEM –≥–æ—Ç–æ–≤: {type(orchestrator.amem_system).__name__}")
    
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞
    task = "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello.py —Å print('Hello, World!')"
    
    print(f"\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º: {task}")
    start_time = datetime.now()
    
    try:
        result = await orchestrator.solve_task(task)
        execution_time = (datetime.now() - start_time).total_seconds()
        
        print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"   üéØ –£—Å–ø–µ—Ö: {result.get('success', False)}")
        print(f"   üìÅ –§–∞–π–ª–æ–≤: {len(result.get('files_created', []))}")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {execution_time:.1f}—Å")
        print(f"   üìù –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
        
        if result.get('files_created'):
            print(f"   üìÇ –°–æ–∑–¥–∞–Ω–æ: {result['files_created']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º A-MEM
        if orchestrator.amem_system:
            try:
                memories = await orchestrator.amem_system.search_memories("–ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", limit=5)
                print(f"   üß† A-MEM –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(memories)}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è A-MEM –æ—à–∏–±–∫–∞: {e}")
        
        if result.get('success'):
            print("\nüéâ –ê–ì–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢! –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            print("\n‚ö†Ô∏è –ê–≥–µ–Ω—Ç—ã —Å—Ç–∞—Ä—Ç—É—é—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("–ù—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

if __name__ == "__main__":
    asyncio.run(test_quick_fix()) 