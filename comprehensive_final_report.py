#!/usr/bin/env python3
"""
üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ COMPREHENSIVE –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø KITTYCORE 3.0
"""

import json
import glob
from pathlib import Path

def load_results():
    """üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    results = {
        'part1': None,
        'part2': None, 
        'part3': None
    }
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    part1_files = glob.glob("comprehensive_part1_results_*.json")
    part2_files = glob.glob("comprehensive_part2_results_*.json")
    part3_files = glob.glob("comprehensive_part3_results_*.json")
    
    if part1_files:
        with open(part1_files[-1], 'r', encoding='utf-8') as f:
            results['part1'] = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {part1_files[-1]}")
    
    if part2_files:
        with open(part2_files[-1], 'r', encoding='utf-8') as f:
            results['part2'] = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {part2_files[-1]}")
    
    if part3_files:
        with open(part3_files[-1], 'r', encoding='utf-8') as f:
            results['part3'] = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {part3_files[-1]}")
    
    return results

def generate_comprehensive_report(results):
    """üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è comprehensive –æ—Ç—á—ë—Ç–∞"""
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_tools = 0
    successful_tools = 0
    honest_tools = set()
    dishonest_tools = set()
    all_results = []
    total_time = 0
    
    for part_name, part_data in results.items():
        if part_data:
            total_tools += len(part_data['results'])
            successful_tools += len([r for r in part_data['results'] if r['success']])
            honest_tools.update(part_data['honest_tools'])
            dishonest_tools.update(part_data['dishonest_tools'])
            all_results.extend(part_data['results'])
            total_time += part_data['total_time']
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å—Ç—è–º
    part_stats = {}
    for part_name, part_data in results.items():
        if part_data:
            part_stats[part_name] = {
                'total': len(part_data['results']),
                'successful': len([r for r in part_data['results'] if r['success']]),
                'honest': len(part_data['honest_tools']),
                'time': part_data['total_time']
            }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    report = f"""
üéØ COMPREHENSIVE –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï KITTYCORE 3.0 - –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢
{'='*80}

üìã –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
--------------------
üîß –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {total_tools}
‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ: {successful_tools} ({(successful_tools/total_tools*100):.1f}%)
üõ°Ô∏è –ß–µ—Å—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç: {len(honest_tools)} ({(len(honest_tools)/total_tools*100):.1f}%)
‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ: {len(dishonest_tools)} ({(len(dishonest_tools)/total_tools*100):.1f}%)
‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.1f}—Å

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ß–ê–°–¢–Ø–ú:
------------------------"""
    
    for part_name, stats in part_stats.items():
        if stats:
            success_rate = (stats['successful']/stats['total']*100) if stats['total'] > 0 else 0
            honesty_rate = (stats['honest']/stats['total']*100) if stats['total'] > 0 else 0
            part_title = {
                'part1': '–ß–ê–°–¢–¨ 1 (–ë–ê–ó–û–í–´–ï)',
                'part2': '–ß–ê–°–¢–¨ 2 (–í–ï–ë)', 
                'part3': '–ß–ê–°–¢–¨ 3 (–û–°–¢–ê–õ–¨–ù–´–ï)'
            }.get(part_name, part_name.upper())
            
            report += f"""
{part_title}:
  üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {stats['total']}
  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {stats['successful']} ({success_rate:.1f}%)
  üõ°Ô∏è –ß–µ—Å—Ç–Ω–æ: {stats['honest']} ({honesty_rate:.1f}%)
  ‚è±Ô∏è –í—Ä–µ–º—è: {stats['time']:.1f}—Å"""
    
    report += f"""

üõ°Ô∏è –ß–ï–°–¢–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ({len(honest_tools)}):
{'-'*50}
{', '.join(sorted(honest_tools)) if honest_tools else '–ù–ï–¢'}

‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ({len(dishonest_tools)}):
{'-'*50}
{', '.join(sorted(dishonest_tools)) if dishonest_tools else '–ù–ï–¢'}

üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
------------------------"""
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {
        '–ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': ['media_tool', 'super_system_tool', 'network_tool'],
        '–í–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': ['enhanced_web_search', 'api_request', 'enhanced_web_scraping'],
        '–û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': ['code_execution', 'security_tool', 'email_tool', 'data_analysis']
    }
    
    for category, tools in categories.items():
        honest_in_category = [t for t in tools if t in honest_tools]
        dishonest_in_category = [t for t in tools if t in dishonest_tools]
        
        report += f"""
{category}:
  ‚úÖ –ß–µ—Å—Ç–Ω—ã–µ: {len(honest_in_category)}/{len(tools)} - {', '.join(honest_in_category) if honest_in_category else '–ù–ï–¢'}
  ‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ: {len(dishonest_in_category)}/{len(tools)} - {', '.join(dishonest_in_category) if dishonest_in_category else '–ù–ï–¢'}"""
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    honesty_percentage = (len(honest_tools)/total_tools*100) if total_tools > 0 else 0
    
    report += f"""

üéØ –û–¶–ï–ù–ö–ê –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
-------------------------"""
    
    if honesty_percentage >= 70:
        report += f"""
üéâ –û–¢–õ–ò–ß–ù–û! {honesty_percentage:.1f}% –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Å—Ç–Ω–æ!
‚ú® KittyCore 3.0 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞–º–∏"""
    elif honesty_percentage >= 50:
        report += f"""
üëç –•–û–†–û–®–û! {honesty_percentage:.1f}% –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Å—Ç–Ω–æ
üîß –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
üìà –°–∏—Å—Ç–µ–º–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è"""
    else:
        report += f"""
‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê! –¢–æ–ª—å–∫–æ {honesty_percentage:.1f}% –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Å—Ç–Ω—ã–µ
üõ†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
üîç –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    
    report += f"""

üîß –ü–†–ò–û–†–ò–¢–ï–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
--------------------------
1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å async/sync –ø—Ä–æ–±–ª–µ–º—ã (network_tool, security_tool)
2. –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–æ–¥—É–ª–∏ (code_execution_tool, email_tool)
3. –£–ª—É—á—à–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (enhanced_web_search)
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å data_analysis_tool —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

üí° –ü–†–ò–ù–¶–ò–ü –ü–û–î–¢–í–ï–†–ñ–î–Å–ù:
-----------------------
"–ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—è–≤–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã!"
–°–∏—Å—Ç–µ–º–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç - —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã.

üéØ –ò–¢–û–ì: KittyCore 3.0 –∏–º–µ–µ—Ç {len(honest_tools)} –∏–∑ {total_tools} —á–µ—Å—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤!
"""
    
    return report

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    print("üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–ß–Å–¢–ê COMPREHENSIVE –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = load_results()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    report = generate_comprehensive_report(results)
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á—ë—Ç
    print(report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    report_file = "COMPREHENSIVE_FINAL_REPORT.md"
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"\nüíæ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {report_file}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ JSON —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    json_file = "comprehensive_final_data.json"
    with open(json_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {json_file}")

if __name__ == "__main__":
    main() 