"""
Channel Manager –¥–ª—è Universal Agent Platform.
–ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!

–ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
1. ChannelManager - –û–¢–î–ï–õ–¨–ù–´–ô —Å–µ—Ä–≤–∏—Å
2. –û–î–ò–ù –ì–õ–û–ë–ê–õ–¨–ù–´–ô –¥–≤–∏–∂–æ–∫ –¥–ª—è –í–°–ï–• –∫–∞–Ω–∞–ª–æ–≤
3. –ö–∞–Ω–∞–ª—ã –¥–µ–ª—è—Ç –æ–¥–∏–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
4. ChannelManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∫–∞–Ω–∞–ª–æ–≤

–°–ê–ú–û–î–û–°–¢–ê–¢–û–ß–ù–´–ô - —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —Å API –∫–∞–Ω–∞–ª–æ–≤!
"""

import asyncio
import aiohttp
import json
from typing import Dict, List, Optional, Any
from loguru import logger


class ChannelManager:
    """
    –°–ê–ú–û–î–û–°–¢–ê–¢–û–ß–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–Ω–∞–ª–æ–≤.
    
    –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
    1. –û–î–ò–ù –ì–õ–û–ë–ê–õ–¨–ù–´–ô –¥–≤–∏–∂–æ–∫ –¥–ª—è –í–°–ï–• –∫–∞–Ω–∞–ª–æ–≤
    2. –ö–∞–Ω–∞–ª—ã SHARED —Ä–µ—Å—É—Ä—Å—ã
    3. –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –¥–æ —Ç—ã—Å—è—á –∫–∞–Ω–∞–ª–æ–≤
    4. ChannelManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∫–∞–Ω–∞–ª–æ–≤
    """
    
    def __init__(self, global_engine=None):
        # –ü–†–ò–ù–ò–ú–ê–ï–ú –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫!
        self.global_engine = global_engine
        self.channels: Dict[str, Dict] = {}  # channel_id -> channel_data
        self.telegram_sessions: Dict[str, aiohttp.ClientSession] = {}  # channel_id -> session
        self.polling_tasks: Dict[str, asyncio.Task] = {}  # channel_id -> task
        self.last_update_ids: Dict[str, int] = {}  # channel_id -> last_update_id
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤."""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–ì–û Channel Manager...")
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫
        if not self.global_engine:
            logger.error("‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ ChannelManager!")
            raise RuntimeError("Global engine required for ChannelManager")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î
        await self._load_channels_from_db()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ (–ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–≤–∏–∂–∫–æ–≤!)
        await self._start_all_polling()
        
        logger.info(f"‚úÖ –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–´–ô Channel Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(self.channels)}")
        
    async def _load_channels_from_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î –∏—Å–ø–æ–ª—å–∑—É—è –ì–õ–û–ë–ê–õ–¨–ù–´–ô –¥–≤–∏–∂–æ–∫."""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ì–õ–û–ë–ê–õ–¨–ù–´–ô –¥–≤–∏–∂–æ–∫
            if not self.global_engine:
                logger.error("‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞–ø–ø–∏–Ω–≥–∏ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ MongoDB –ø–ª–∞–≥–∏–Ω
            step = {
                "id": "find_channels",
                "type": "mongo_find_documents",
                "params": {
                    "collection": "channels",
                    "filter": {},
                    "output_var": "find_result"
                }
            }
            context = {}
            result_context = await self.global_engine.execute_step(step, context)
            result = result_context.get("find_result", {})
            
            if result.get("success") and result.get("documents"):
                for channel_doc in result["documents"]:
                    channel_id = channel_doc.get("channel_id")
                    if channel_id:
                        self.channels[channel_id] = channel_doc
                        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω –∫–∞–Ω–∞–ª: {channel_id} (—Ç–∏–ø: {channel_doc.get('channel_type', 'unknown')})")
                        
                logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ë–î: {len(self.channels)}")
            else:
                logger.warning("‚ö†Ô∏è –ö–∞–Ω–∞–ª—ã –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ë–î: {e}")
            
    async def _start_all_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤."""
        for channel_id, channel_data in self.channels.items():
            await self._start_channel_polling(channel_id, channel_data)
            
    async def _start_channel_polling(self, channel_id: str, channel_data: Dict):
        """
        –°–ê–ú–û–î–û–°–¢–ê–¢–û–ß–ù–´–ô –∑–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
        
        –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–∞–Ω–∞–ª–∞!
        """
        try:
            channel_type = channel_data.get("channel_type", "unknown")
            
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} (—Ç–∏–ø: {channel_type})")
            
            if channel_type == "telegram":
                # –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ø–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –∫–∞–Ω–∞–ª, –∞ –Ω–µ –ø—É—Å—Ç—ã–µ config/settings
                await self._start_telegram_polling_direct(channel_id, channel_data)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–∞–Ω–∞–ª–∞: {channel_type}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
    
    async def _start_telegram_polling_direct(self, channel_id: str, channel_data: Dict):
        """
        –ü–†–Ø–ú–û–ô –∑–∞–ø—É—Å–∫ Telegram –ø–æ–ª–ª–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Bot API.
        
        –ë–ï–ó –ü–õ–ê–ì–ò–ù–û–í! –ë–ï–ó –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–• –•–ï–ù–î–õ–ï–†–û–í!
        """
        try:
            # –û–¢–õ–ê–î–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ {channel_id}: {channel_data}")
            
            # –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Ç–æ–∫–µ–Ω –±–µ—Ä–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–∞–Ω–∞–ª–∞
            bot_token = channel_data.get("telegram_bot_token")
            
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è {channel_id}: {bot_token}")
            
            if not bot_token:
                logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω telegram_bot_token –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                return
            
            # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–Ω–∞–ª–∞
            session = aiohttp.ClientSession()
            self.telegram_sessions[channel_id] = session
            self.last_update_ids[channel_id] = 0
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
            polling_task = asyncio.create_task(
                self._telegram_polling_loop(channel_id, bot_token, session)
            )
            self.polling_tasks[channel_id] = polling_task
            
            logger.info(f"‚úÖ –ü—Ä—è–º–æ–π Telegram –ø–æ–ª–ª–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} —Å —Ç–æ–∫–µ–Ω–æ–º {bot_token[:20]}...")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _start_telegram_polling_direct –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
    
    async def _telegram_polling_loop(self, channel_id: str, bot_token: str, session: aiohttp.ClientSession):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª–ª–∏–Ω–≥–∞ Telegram Bot API.
        
        –ü–†–Ø–ú–ê–Ø —Ä–∞–±–æ—Ç–∞ —Å API –±–µ–∑ –ø–ª–∞–≥–∏–Ω–æ–≤!
        """
        base_url = f"https://api.telegram.org/bot{bot_token}"
        
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                params = {
                    "offset": self.last_update_ids[channel_id] + 1,
                    "timeout": 30,
                    "allowed_updates": ["message", "callback_query"]
                }
                
                async with session.get(f"{base_url}/getUpdates", params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get("ok") and data.get("result"):
                            for update in data["result"]:
                                # –û–±–Ω–æ–≤–ª—è–µ–º last_update_id
                                self.last_update_ids[channel_id] = update["update_id"]
                                
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                                await self._handle_telegram_update(channel_id, update)
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                        await asyncio.sleep(5)
                        
            except asyncio.CancelledError:
                logger.info(f"‚èπÔ∏è –ü–æ–ª–ª–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–æ–ª–ª–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
                await asyncio.sleep(5)
    
    async def _handle_telegram_update(self, channel_id: str, update: Dict):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.
        
        –ü–†–Ø–ú–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –ø–ª–∞–≥–∏–Ω–æ–≤!
        """
        try:
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {update.get('update_id')}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            event_type = "unknown"
            event_data = {}
            
            if "message" in update:
                event_type = "message"
                message = update["message"]
                event_data = {
                    "user_id": str(message.get("from", {}).get("id", "")),
                    "chat_id": str(message.get("chat", {}).get("id", "")),
                    "message_text": message.get("text", ""),
                    "telegram_user_id": message.get("from", {}).get("id"),
                    "telegram_username": message.get("from", {}).get("username"),
                    "telegram_first_name": message.get("from", {}).get("first_name"),
                    "telegram_last_name": message.get("from", {}).get("last_name"),
                    "telegram_chat_id": message.get("chat", {}).get("id"),
                }
                
            elif "callback_query" in update:
                event_type = "callback_query"
                callback = update["callback_query"]
                event_data = {
                    "user_id": str(callback.get("from", {}).get("id", "")),
                    "chat_id": str(callback.get("message", {}).get("chat", {}).get("id", "")),
                    "callback_data": callback.get("data", ""),
                    "message_id": callback.get("message", {}).get("message_id"),
                    "telegram_user_id": callback.get("from", {}).get("id"),
                    "telegram_username": callback.get("from", {}).get("username"),
                    "telegram_first_name": callback.get("from", {}).get("first_name"),
                    "telegram_last_name": callback.get("from", {}).get("last_name"),
                    "telegram_chat_id": callback.get("message", {}).get("chat", {}).get("id"),
                }
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–∞–Ω–∞–ª–∞
            await self._execute_channel_scenario(channel_id, event_type, event_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
    
    async def _execute_channel_scenario(self, channel_id: str, event_type: str, event_data: Dict):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ —Å–æ–±—ã—Ç–∏–∏.
        
        –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
            channel_data = self.channels.get(channel_id)
            if not channel_data:
                logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
                
            user_id = event_data.get("user_id")
            chat_id = event_data.get("chat_id")
            
            if not user_id or not chat_id:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –∏–ª–∏ chat_id –∏–∑ —Å–æ–±—ã—Ç–∏—è")
                return
            
            # –ù–û–í–ò–ù–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            saved_state = await self._load_user_state(channel_id, user_id)
            
            if saved_state and saved_state.get("waiting_for_input"):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
                logger.info(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å —à–∞–≥–∞ {saved_state.get('current_step')}")
                await self._continue_user_scenario(channel_id, event_type, event_data, saved_state)
            else:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π - –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
                start_scenario_id = channel_data.get("start_scenario_id")
                if not start_scenario_id:
                    logger.error(f"‚ùå –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π start_scenario_id –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                    return
                    
                logger.info(f"üé≠ –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è {start_scenario_id} –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self._start_new_user_scenario(channel_id, event_type, event_data, start_scenario_id)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
    
    async def _load_user_state(self, channel_id: str, user_id: str) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–≤–∏–∂–æ–∫ –∫–∞–Ω–∞–ª–∞!
            if not self.global_engine:
                logger.error("‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return None
            
            # –ò—â–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            step = {
                "id": "load_user_state",
                "type": "mongo_find_documents",
                "params": {
                    "collection": "user_states",
                    "filter": {
                        "channel_id": channel_id,
                        "user_id": user_id
                    },
                    "output_var": "find_result"
                }
            }
            
            context = {}
            result_context = await self.global_engine.execute_step(step, context)
            result = result_context.get("find_result", {})
            
            if result.get("success") and result.get("documents"):
                user_state = result["documents"][0]
                logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: —Å—Ü–µ–Ω–∞—Ä–∏–π {user_state.get('scenario_id')}, —à–∞–≥ {user_state.get('current_step')}")
                return user_state
            else:
                logger.info(f"üìã –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    async def _save_user_state(self, channel_id: str, user_id: str, context: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–≤–∏–∂–æ–∫ –∫–∞–Ω–∞–ª–∞!
            if not self.global_engine:
                logger.error("‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            state_data = {
                "channel_id": channel_id,
                "user_id": user_id,
                "scenario_id": context.get("scenario_id"),
                "current_step": context.get("current_step"),
                "waiting_for_input": context.get("waiting_for_input", False),
                "input_step_id": context.get("input_step_id"),
                "context": context,
                "updated_at": "2024-12-29T16:00:00Z"
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (upsert)
            step = {
                "id": "save_user_state",
                "type": "mongo_upsert_document",
                "params": {
                    "collection": "user_states",
                    "filter": {
                        "channel_id": channel_id,
                        "user_id": user_id
                    },
                    "document": state_data,
                    "output_var": "save_result"
                }
            }
            
            save_context = {}
            await self.global_engine.execute_step(step, save_context)
            
            logger.info(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: —Å—Ü–µ–Ω–∞—Ä–∏–π {state_data['scenario_id']}, —à–∞–≥ {state_data['current_step']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def _continue_user_scenario(self, channel_id: str, event_type: str, event_data: Dict, saved_state: Dict):
        """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞."""
        try:
            user_id = event_data.get("user_id")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            context = saved_state.get("context", {})
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            context.update({
                "channel_id": channel_id,
                "event_type": event_type,
                "telegram_update": {
                    "message" if event_type == "message" else "callback_query": event_data
                },
                **event_data
            })
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º—ã –∂–¥–∞–ª–∏ –≤–≤–æ–¥ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
            if event_type == "message" and saved_state.get("waiting_for_input"):
                input_var = saved_state.get("input_step_id", "user_input")
                context[input_var] = event_data.get("message_text", "")
                context["user_input"] = event_data.get("message_text", "")
                
                # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
                context["waiting_for_input"] = False
                context.pop("input_step_id", None)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –ø–æ—Å–ª–µ input —à–∞–≥–∞
            scenario_id = saved_state.get("scenario_id")
            current_step_id = saved_state.get("current_step")
            
            logger.info(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –ø–æ—Å–ª–µ input —à–∞–≥–∞ {current_step_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
            scenario_result = await self.global_engine.execute_step({
                "id": "load_scenario",
                "type": "mongo_find_documents",
                "params": {
                    "collection": "scenarios",
                    "filter": {"scenario_id": scenario_id},
                    "output_var": "find_result"
                }
            }, context)
            
            next_step_id = None
            if scenario_result.get("find_result", {}).get("success") and scenario_result.get("find_result", {}).get("documents"):
                scenario_data = scenario_result["find_result"]["documents"][0]
                scenario_steps = scenario_data.get("steps", [])
                logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ {len(scenario_steps)} —à–∞–≥–æ–≤ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ {scenario_id}")
                
                # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π input —à–∞–≥ –∏ –±–µ—Ä–µ–º –µ–≥–æ next_step
                for step in scenario_steps:
                    if step.get("id") == current_step_id:
                        next_step_id = step.get("next_step")
                        logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω —à–∞–≥ {current_step_id}, next_step = {next_step_id}")
                        break
                else:
                    logger.warning(f"üîç –û–¢–õ–ê–î–ö–ê: –®–∞–≥ {current_step_id} –ù–ï –ù–ê–ô–î–ï–ù –≤ {len(scenario_steps)} —à–∞–≥–∞—Ö!")
                    for step in scenario_steps:
                        logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ—Å—Ç—É–ø–Ω—ã–π —à–∞–≥: {step.get('id')}")
                        
                if next_step_id:
                    logger.info(f"üìç –ü—Ä–æ–¥–æ–ª–∂–∞—é —Å –°–õ–ï–î–£–Æ–©–ò–ú —à–∞–≥–æ–º –ø–æ—Å–ª–µ input: {next_step_id}")
                    # –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∫–∞–∫ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å–ª–µ input
                    context["current_step"] = next_step_id
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω next_step –¥–ª—è —à–∞–≥–∞ {current_step_id}")
                    context["current_step"] = None
            else:
                logger.error(f"‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            final_context = await self.global_engine.execute_scenario(scenario_id, context)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await self._save_user_state(channel_id, user_id, final_context)
            
            logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –ø—Ä–æ–¥–æ–ª–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event_data.get('user_id')}: {e}")
    
    async def _start_new_user_scenario(self, channel_id: str, event_type: str, event_data: Dict, start_scenario_id: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            user_id = event_data.get("user_id")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ Telegram
            context = {
                "channel_id": channel_id,
                "scenario_id": start_scenario_id,
                "event_type": event_type,
                "telegram_update": {
                    "message" if event_type == "message" else "callback_query": event_data
                },
                **event_data
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            final_context = await self.global_engine.execute_scenario(start_scenario_id, context)
            
            # –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if final_context.get("waiting_for_input"):
                logger.info(f"üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∂–¥–µ—Ç –≤–≤–æ–¥–∞ - —Å–æ—Ö—Ä–∞–Ω—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            else:
                logger.info(f"üíæ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - —Å–æ—Ö—Ä–∞–Ω—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            
            await self._save_user_state(channel_id, user_id, final_context)
            
            logger.info(f"‚úÖ –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π {start_scenario_id} –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event_data.get('user_id')}: {e}")
    
    async def stop_all_polling(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤."""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª–ª–∏–Ω–≥–∞
        for channel_id, task in self.polling_tasks.items():
            try:
                task.cancel()
                await task
            except asyncio.CancelledError:
                pass
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª–ª–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏–∏
        for channel_id, session in self.telegram_sessions.items():
            try:
                await session.close()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
                
        logger.info("üõë –í—Å–µ –∫–∞–Ω–∞–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    async def reload_channels(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î."""
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã
        await self.stop_all_polling()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.channels.clear()
        self.telegram_sessions.clear()
        self.polling_tasks.clear()
        self.last_update_ids.clear()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
        await self._load_channels_from_db()
        await self._start_all_polling()
        
        logger.info(f"üîÑ –ö–∞–Ω–∞–ª—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(self.channels)}")
        
    # ===== –ü–†–Ø–ú–´–ï –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° TELEGRAM API =====
    
    async def send_message(self, channel_id: str, chat_id: str, text: str, **kwargs) -> Dict[str, Any]:
        """
        –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API.
        
        –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Ç–æ–∫–µ–Ω –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–∞–Ω–∞–ª–∞!
        """
        try:
            channel_data = self.channels.get(channel_id)
            if not channel_data:
                return {"success": False, "error": f"Channel {channel_id} not found"}
            
            # –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–∞–Ω–∞–ª–∞
            bot_token = channel_data.get("telegram_bot_token")
            
            if not bot_token:
                return {"success": False, "error": f"Bot token not found for channel {channel_id}"}
            
            session = self.telegram_sessions.get(channel_id)
            if not session:
                return {"success": False, "error": f"Session not found for channel {channel_id}"}
            
            # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Telegram Bot API
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                **kwargs
            }
            
            async with session.post(url, json=data) as response:
                result = await response.json()
                
                if result.get("ok"):
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {channel_id}")
                    return {"success": True, "result": result["result"]}
                else:
                    error_msg = result.get("description", "Unknown error")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {error_msg}")
                    return {"success": False, "error": error_msg}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            return {"success": False, "error": str(e)}
    
    async def send_buttons(self, channel_id: str, chat_id: str, text: str, buttons: List[List[Dict[str, str]]], **kwargs) -> Dict[str, Any]:
        """
        –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ —á–µ—Ä–µ–∑ Telegram Bot API.
        """
        reply_markup = {
            "inline_keyboard": buttons
        }
        
        return await self.send_message(
            channel_id=channel_id,
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            **kwargs
        )
    
    async def edit_message(self, channel_id: str, chat_id: str, message_id: int, text: str, **kwargs) -> Dict[str, Any]:
        """
        –ü—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API.
        
        –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Ç–æ–∫–µ–Ω –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–∞–Ω–∞–ª–∞!
        """
        try:
            channel_data = self.channels.get(channel_id)
            if not channel_data:
                return {"success": False, "error": f"Channel {channel_id} not found"}
            
            # –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–∞–Ω–∞–ª–∞
            bot_token = channel_data.get("telegram_bot_token")
            
            if not bot_token:
                return {"success": False, "error": f"Bot token not found for channel {channel_id}"}
            
            session = self.telegram_sessions.get(channel_id)
            if not session:
                return {"success": False, "error": f"Session not found for channel {channel_id}"}
            
            # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Telegram Bot API
            url = f"https://api.telegram.org/bot{bot_token}/editMessageText"
            data = {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": text,
                **kwargs
            }
            
            async with session.post(url, json=data) as response:
                result = await response.json()
                
                if result.get("ok"):
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {channel_id}")
                    return {"success": True, "result": result["result"]}
                else:
                    error_msg = result.get("description", "Unknown error")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {error_msg}")
                    return {"success": False, "error": error_msg}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            return {"success": False, "error": str(e)}
    
    def get_active_channels(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        return list(self.channels.keys())
    
    def get_channel_info(self, channel_id: str) -> Optional[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        return self.channels.get(channel_id)
    
    async def _load_specific_channel(self, channel_id: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –∏–∑ –ë–î."""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ –ë–î
            if not self.global_engine:
                logger.error("‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–∞")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ MongoDB –ø–ª–∞–≥–∏–Ω
            step = {
                "id": "find_channel",
                "type": "mongo_find_documents",
                "params": {
                    "collection": "channels",
                    "filter": {"channel_id": channel_id},
                    "output_var": "find_result"
                }
            }
            context = {}
            result_context = await self.global_engine.execute_step(step, context)
            result = result_context.get("find_result", {})
            
            if result.get("success") and result.get("documents"):
                channel_doc = result["documents"][0]
                self.channels[channel_id] = channel_doc
                logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω –∫–∞–Ω–∞–ª: {channel_id} (—Ç–∏–ø: {channel_doc.get('channel_type', 'unknown')})")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id} –∏–∑ –ë–î: {e}")
            return False
            
    async def _create_channel_engine(self, channel_id: str):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–≤–∏–∂–∫–æ–º."""
        try:
            if channel_id in self.channels:
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É–∂–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–≤–∏–∂–∫–æ–º")
                return True
                
            logger.info(f"üîß –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∫–∞–Ω–∞–ª {channel_id} –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–≤–∏–∂–∫–æ–º")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–≤–∏–∂–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π!
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            success = await self._load_specific_channel(channel_id)
            
            if success:
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–≤–∏–∂–∫–æ–º")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª {channel_id}")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            return False
            
    async def _stop_channel_polling(self, channel_id: str):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ–ª–ª–∏–Ω–≥–∞
            if channel_id in self.polling_tasks:
                task = self.polling_tasks[channel_id]
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
                del self.polling_tasks[channel_id]
                logger.info(f"‚èπÔ∏è –ü–æ–ª–ª–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏—é
            if channel_id in self.telegram_sessions:
                session = self.telegram_sessions[channel_id]
                await session.close()
                del self.telegram_sessions[channel_id]
                logger.info(f"üîå –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
            # –û—á–∏—â–∞–µ–º last_update_id –¥–ª—è –∫–∞–Ω–∞–ª–∞
            if channel_id in self.last_update_ids:
                del self.last_update_ids[channel_id]
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —É–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ channels - –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–µ–Ω
            # –ö–∞–Ω–∞–ª –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}") 