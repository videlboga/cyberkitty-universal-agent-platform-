"""
üöÄ SuperSystemTool - –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ KittyCore 3.0

–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –ª—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- SystemTool (1946 —Å—Ç—Ä–æ–∫): –ø–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è + —Ñ–∞–π–ª—ã + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
- SystemMonitoringTool (823 —Å—Ç—Ä–æ–∫–∏): –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ + network
- system_tools.py (594 —Å—Ç—Ä–æ–∫–∏): FileManager + SystemTools
- enhanced_system_tools.py (460 —Å—Ç—Ä–æ–∫): –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

–ò–¢–û–ì–û: 3823 —Å—Ç—Ä–æ–∫–∏ ‚Üí 2500 —Å—Ç—Ä–æ–∫ SuperSystemTool
–≠–∫–æ–Ω–æ–º–∏—è: 1323 —Å—Ç—Ä–æ–∫–∏ (35% –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
"""

import os
import subprocess
import shutil
import platform
import time
import threading
import psutil
from pathlib import Path
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
from typing import Dict, Any, List, Optional, Union
from loguru import logger

from .base_tool import Tool, ToolResult

# ========================================
# üìä DATACLASSES - –û–ë–™–ï–î–ò–ù–Å–ù–ù–´–ï –°–¢–†–£–ö–¢–£–†–´
# ========================================

@dataclass
class SystemInfo:
    """–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ (–ª—É—á—à–µ–µ –∏–∑ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)"""
    platform: str
    platform_release: str  
    platform_version: str
    architecture: str
    hostname: str
    username: str
    processor: str
    python_version: str
    cpu_count: int
    memory_total_gb: float
    disk_total_gb: float
    uptime_hours: float
    boot_time: str
    load_average: List[float]

@dataclass
class ResourceUsage:
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ SystemTool + SystemMonitoringTool)"""
    cpu_percent: float
    cpu_per_core: List[float]
    memory_percent: float
    memory_available_gb: float
    memory_used_gb: float
    disk_usage_percent: float
    disk_free_gb: float
    network_io: Dict[str, int]
    top_processes: List[Dict[str, Any]]
    load_average: List[float]

@dataclass
class ProcessInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ (–ª—É—á—à–∞—è –≤–µ—Ä—Å–∏—è)"""
    pid: int
    name: str
    status: str
    cpu_percent: float
    memory_percent: float
    memory_mb: float
    create_time: float
    cmdline: List[str]
    username: str
    num_threads: int
    parent_pid: int

@dataclass
class FileInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    path: str
    size: int
    modified_time: str
    is_directory: bool
    permissions: str
    owner: str
    extension: str
    is_safe: bool
    encoding: Optional[str] = None

# ========================================
# üöÄ SUPERSYSTEMTOOL - –û–ë–™–ï–î–ò–ù–Å–ù–ù–´–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢
# ========================================

class SuperSystemTool(Tool):
    """
    üöÄ SuperSystemTool - –ú–æ—â–Ω–µ–π—à–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç KittyCore 3.0
    
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –í–°–ï –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:
    - üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (CPU, –ø–∞–º—è—Ç—å, –¥–∏—Å–∫–∏, —Å–µ—Ç—å)
    - üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ (—Å–ø–∏—Å–æ–∫, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
    - üìÅ –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ + —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)
    - üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–≤–∞–ª–∏–¥–∞—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä–∫–∏)
    - üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (—Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ + –º–µ—Ç—Ä–∏–∫–∏)
    - ‚ö° –ö–æ–º–∞–Ω–¥—ã (–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ + —Å–µ—Ä–≤–∏—Å—ã)
    """
    
    def __init__(self):
        super().__init__(
            name="super_system_tool",
            description="–ú–æ—â–Ω–µ–π—à–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
        )
        
        # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._cache = {}
        self._cache_timeout = 5.0
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self._monitoring_active = False
        self._monitoring_thread = None
        self._monitoring_data = []
        self._max_monitoring_records = 1000
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤
        self.allowed_extensions = {
            '.txt', '.md', '.py', '.js', '.html', '.css', '.json', '.yaml', '.yml',
            '.xml', '.csv', '.log', '.sh', '.bat', '.ps1', '.cfg', '.conf', '.ini'
        }
        self.max_file_size_mb = 100
        self.max_output_size = 50000
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.safe_directories = {'/tmp', '/var/tmp', os.path.expanduser('~')}
        
        logger.info("üöÄ SuperSystemTool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")

    def get_schema(self) -> Dict[str, Any]:
        """–°—Ö–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –í–°–ï–ú–ò –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        return {
            "name": self.name,
            "description": self.description,
            "actions": {
                # üñ•Ô∏è –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
                "get_system_info": {"description": "–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"},
                "get_resource_usage": {"description": "–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"},
                "get_cpu_info": {"description": "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CPU"},
                "get_memory_info": {"description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏"},
                "get_disk_info": {"description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö", "parameters": {"path": "str"}},
                "get_network_info": {"description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö"},
                "health_check": {"description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"},
                
                # üìÇ –ü–†–û–¶–ï–°–°–´
                "get_processes": {"description": "–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", "parameters": {"limit": "int", "process_name": "str"}},
                "get_process_info": {"description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ", "parameters": {"pid": "int"}},
                "kill_process": {"description": "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", "parameters": {"pid": "int", "force": "bool"}},
                "run_command": {"description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", "parameters": {"command": "str", "timeout": "int"}},
                "check_service_status": {"description": "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞", "parameters": {"service_name": "str"}},
                
                # üìÅ –§–ê–ô–õ–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò (–ë–ï–ó–û–ü–ê–°–ù–´–ï)
                "safe_file_create": {"description": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞", "parameters": {"path": "str", "content": "str", "encoding": "str"}},
                "safe_file_read": {"description": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", "parameters": {"path": "str", "encoding": "str", "max_size": "int"}},
                "safe_file_write": {"description": "–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞", "parameters": {"path": "str", "content": "str", "encoding": "str"}},
                "safe_file_delete": {"description": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", "parameters": {"path": "str", "force": "bool"}},
                "safe_file_list": {"description": "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", "parameters": {"path": "str", "recursive": "bool"}},
                
                # üìÅ –†–ê–°–®–ò–†–ï–ù–ù–´–ï –§–ê–ô–õ–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò
                "file_info": {"description": "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ", "parameters": {"path": "str"}},
                "file_exists": {"description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞", "parameters": {"path": "str"}},
                "copy_file": {"description": "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞", "parameters": {"path": "str", "destination": "str"}},
                "move_file": {"description": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", "parameters": {"path": "str", "destination": "str"}},
                "create_directory": {"description": "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", "parameters": {"path": "str"}},
                "delete_directory": {"description": "–£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", "parameters": {"path": "str", "force": "bool"}},
                
                # üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ò –í–ê–õ–ò–î–ê–¶–ò–Ø  
                "validate_file_path": {"description": "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–∏ —Ñ–∞–π–ª–∞", "parameters": {"path": "str"}},
                "check_file_safety": {"description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞", "parameters": {"path": "str"}},
                "scan_directory_safety": {"description": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", "parameters": {"path": "str", "recursive": "bool"}},
                
                # üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì
                "start_monitoring": {"description": "–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", "parameters": {"interval": "float", "max_records": "int"}},
                "stop_monitoring": {"description": "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"},
                "get_monitoring_data": {"description": "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"},
                "get_system_metrics": {"description": "–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"},
                "check_system_health": {"description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"}
            }
        }

    def execute(self, action: str, **kwargs) -> ToolResult:
        """üöÄ –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            # üñ•Ô∏è –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
            if action == "get_system_info":
                return self._get_system_info()
            elif action == "get_resource_usage":
                return self._get_resource_usage()
            elif action == "get_cpu_info":
                return self._get_cpu_info()
            elif action == "get_memory_info":
                return self._get_memory_info()
            elif action == "get_disk_info":
                return self._get_disk_info(**kwargs)
            elif action == "get_network_info":
                return self._get_network_info()
            elif action == "health_check":
                return self._health_check()
                
            # üìÇ –ü–†–û–¶–ï–°–°–´
            elif action == "get_processes":
                return self._get_processes(**kwargs)
            elif action == "get_process_info":
                return self._get_process_info(**kwargs)
            elif action == "kill_process":
                return self._kill_process(**kwargs)
            elif action == "run_command":
                return self._run_command(**kwargs)
            elif action == "check_service_status":
                return self._check_service_status(**kwargs)
                
            # üìÅ –ë–ï–ó–û–ü–ê–°–ù–´–ï –§–ê–ô–õ–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò
            elif action == "safe_file_create":
                return self._safe_file_create(**kwargs)
            elif action == "safe_file_read":
                return self._safe_file_read(**kwargs)
            elif action == "safe_file_write":
                return self._safe_file_write(**kwargs)
            elif action == "safe_file_delete":
                return self._safe_file_delete(**kwargs)
            elif action == "safe_file_list":
                return self._safe_file_list(**kwargs)
                
            # üìÅ –†–ê–°–®–ò–†–ï–ù–ù–´–ï –§–ê–ô–õ–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò
            elif action == "file_info":
                return self._get_file_info(**kwargs)
            elif action == "file_exists":
                return self._file_exists(**kwargs)
            elif action == "copy_file":
                return self._copy_file(**kwargs)
            elif action == "move_file":
                return self._move_file(**kwargs)
            elif action == "create_directory":
                return self._create_directory(**kwargs)
            elif action == "delete_directory":
                return self._delete_directory(**kwargs)
                
            # üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨
            elif action == "validate_file_path":
                return self._validate_file_path(**kwargs)
            elif action == "check_file_safety":
                return self._check_file_safety(**kwargs)
            elif action == "scan_directory_safety":
                return self._scan_directory_safety(**kwargs)
                
            # üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì
            elif action == "start_monitoring":
                return self._start_monitoring(**kwargs)
            elif action == "stop_monitoring":
                return self._stop_monitoring()
            elif action == "get_monitoring_data":
                return self._get_monitoring_data()
            elif action == "get_system_metrics":
                return self._get_system_metrics()
            elif action == "check_system_health":
                return self._check_system_health()
            else:
                return ToolResult(
                    success=False,
                    error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}. –î–æ—Å—Ç—É–ø–Ω–æ {len(self.get_schema()['actions'])} –¥–µ–π—Å—Ç–≤–∏–π"
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SuperSystemTool {action}: {e}")
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {action}: {str(e)}"
            )

    # ========================================
    # üñ•Ô∏è –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø (–õ–£–ß–®–ò–ï –ú–ï–¢–û–î–´)
    # ========================================
    
    def _get_cached_or_compute(self, key: str, compute_func, ttl: float = None) -> Any:
        """–£–º–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        now = time.time()
        ttl = ttl or self._cache_timeout
        
        if key in self._cache:
            data, timestamp = self._cache[key]
            if now - timestamp < ttl:
                return data
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = compute_func()
        self._cache[key] = (data, now)
        return data

    def _get_system_info(self) -> ToolResult:
        """üñ•Ô∏è –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ (–ª—É—á—à–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            def compute_system_info():
                boot_time = psutil.boot_time()
                uptime_seconds = time.time() - boot_time
                memory = psutil.virtual_memory()
                disk = psutil.disk_usage('/')
                
                # Load average (—Ç–æ–ª—å–∫–æ –¥–ª—è Unix)
                try:
                    load_avg = list(os.getloadavg())
                except (OSError, AttributeError):
                    load_avg = [0.0, 0.0, 0.0]
                
                return SystemInfo(
                    platform=platform.system(),
                    platform_release=platform.release(),
                    platform_version=platform.version(),
                    architecture=platform.machine(),
                    hostname=platform.node(),
                    username=os.getenv('USER', os.getenv('USERNAME', 'unknown')),
                    processor=platform.processor() or "Unknown",
                    python_version=platform.python_version(),
                    cpu_count=psutil.cpu_count(),
                    memory_total_gb=round(memory.total / (1024**3), 2),
                    disk_total_gb=round(disk.total / (1024**3), 2),
                    uptime_hours=round(uptime_seconds / 3600, 2),
                    boot_time=datetime.fromtimestamp(boot_time).isoformat(),
                    load_average=load_avg
                )
            
            system_info = self._get_cached_or_compute("system_info", compute_system_info, ttl=60.0)
            
            return ToolResult(
                success=True,
                data={
                    "system_info": asdict(system_info),
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {str(e)}"
            )

    def _get_resource_usage(self) -> ToolResult:
        """üìä –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            def compute_resource_usage():
                # CPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                cpu_percent = psutil.cpu_percent(interval=1)
                cpu_per_core = psutil.cpu_percent(interval=0.1, percpu=True)
                
                # –ü–∞–º—è—Ç—å
                memory = psutil.virtual_memory()
                
                # –î–∏—Å–∫
                disk = psutil.disk_usage('/')
                
                # –°–µ—Ç—å
                net_io = psutil.net_io_counters()
                network_io = {
                    "bytes_sent": net_io.bytes_sent,
                    "bytes_recv": net_io.bytes_recv,
                    "packets_sent": net_io.packets_sent,
                    "packets_recv": net_io.packets_recv,
                    "bytes_sent_mb": round(net_io.bytes_sent / (1024**2), 2),
                    "bytes_recv_mb": round(net_io.bytes_recv / (1024**2), 2)
                }
                
                # Load average
                try:
                    load_avg = list(os.getloadavg())
                except (OSError, AttributeError):
                    load_avg = [0.0, 0.0, 0.0]
                
                # –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU
                processes = []
                for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
                    try:
                        pinfo = proc.info
                        if pinfo['cpu_percent'] and pinfo['cpu_percent'] > 0:
                            processes.append({
                                'pid': pinfo['pid'],
                                'name': pinfo['name'],
                                'cpu_percent': pinfo['cpu_percent'],
                                'memory_percent': round(pinfo['memory_percent'], 2)
                            })
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        continue
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ CPU
                processes.sort(key=lambda x: x['cpu_percent'], reverse=True)
                
                return ResourceUsage(
                    cpu_percent=cpu_percent,
                    cpu_per_core=cpu_per_core,
                    memory_percent=memory.percent,
                    memory_available_gb=round(memory.available / (1024**3), 2),
                    memory_used_gb=round(memory.used / (1024**3), 2),
                    disk_usage_percent=round(disk.used / disk.total * 100, 2),
                    disk_free_gb=round(disk.free / (1024**3), 2),
                    network_io=network_io,
                    top_processes=processes[:10],
                    load_average=load_avg
                )
            
            resource_usage = self._get_cached_or_compute("resource_usage", compute_resource_usage, ttl=2.0)
            
            return ToolResult(
                success=True,
                data={
                    "resource_usage": asdict(resource_usage),
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: {str(e)}"
            )

    def _get_cpu_info(self) -> ToolResult:
        """üñ•Ô∏è –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CPU"""
        try:
            def compute_cpu_info():
                cpu_freq = psutil.cpu_freq()
                cpu_percent = psutil.cpu_percent(interval=1, percpu=True)
                
                # Load average
                try:
                    load_avg = list(os.getloadavg())
                except (OSError, AttributeError):
                    load_avg = [0.0, 0.0, 0.0]
                
                return {
                    "physical_cores": psutil.cpu_count(logical=False),
                    "logical_cores": psutil.cpu_count(logical=True),
                    "max_frequency": round(cpu_freq.max, 2) if cpu_freq else 0,
                    "min_frequency": round(cpu_freq.min, 2) if cpu_freq else 0,
                    "current_frequency": round(cpu_freq.current, 2) if cpu_freq else 0,
                    "usage_percent": round(psutil.cpu_percent(interval=1), 2),
                    "usage_per_core": [round(p, 2) for p in cpu_percent],
                    "load_average": load_avg
                }
            
            cpu_info = self._get_cached_or_compute("cpu_info", compute_cpu_info, ttl=10.0)
            
            return ToolResult(
                success=True,
                data={
                    "cpu_info": cpu_info,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CPU: {str(e)}"
            )

    def _get_memory_info(self) -> ToolResult:
        """üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏"""
        try:
            memory = psutil.virtual_memory()
            swap = psutil.swap_memory()
            
            memory_info = {
                "total_gb": round(memory.total / (1024**3), 2),
                "available_gb": round(memory.available / (1024**3), 2),
                "used_gb": round(memory.used / (1024**3), 2),
                "percent": memory.percent,
                "swap_total_gb": round(swap.total / (1024**3), 2),
                "swap_used_gb": round(swap.used / (1024**3), 2),
                "swap_free_gb": round(swap.free / (1024**3), 2),
                "swap_percent": swap.percent
            }
            
            return ToolResult(
                success=True,
                data={
                    "memory_info": memory_info,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: {str(e)}"
            )

    def _get_disk_info(self, path: str = "/") -> ToolResult:
        """üíø –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö"""
        try:
            disk_usage = psutil.disk_usage(path)
            disk_partitions = psutil.disk_partitions()
            
            disk_info = {
                "path": path,
                "total_gb": round(disk_usage.total / (1024**3), 2),
                "used_gb": round(disk_usage.used / (1024**3), 2),
                "free_gb": round(disk_usage.free / (1024**3), 2),
                "percent": round(disk_usage.used / disk_usage.total * 100, 2),
                "partitions": []
            }
            
            for partition in disk_partitions:
                try:
                    partition_usage = psutil.disk_usage(partition.mountpoint)
                    disk_info["partitions"].append({
                        "device": partition.device,
                        "mountpoint": partition.mountpoint,
                        "fstype": partition.fstype,
                        "total_gb": round(partition_usage.total / (1024**3), 2),
                        "used_gb": round(partition_usage.used / (1024**3), 2),
                        "free_gb": round(partition_usage.free / (1024**3), 2),
                        "percent": round(partition_usage.used / partition_usage.total * 100, 2)
                    })
                except (PermissionError, OSError):
                    continue
            
            return ToolResult(
                success=True,
                data={
                    "disk_info": disk_info,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö: {str(e)}"
            )

    def _get_network_info(self) -> ToolResult:
        """üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö"""
        try:
            net_interfaces = psutil.net_if_addrs()
            net_stats = psutil.net_if_stats()
            net_io = psutil.net_io_counters(pernic=True)
            
            interfaces = []
            
            for interface, addrs in net_interfaces.items():
                interface_info = {
                    "interface": interface,
                    "addresses": [],
                    "is_up": False,
                    "speed": 0,
                    "bytes_sent": 0,
                    "bytes_recv": 0,
                    "packets_sent": 0,
                    "packets_recv": 0
                }
                
                # –ê–¥—Ä–µ—Å–∞
                for addr in addrs:
                    interface_info["addresses"].append({
                        "family": str(addr.family),
                        "address": addr.address,
                        "netmask": addr.netmask,
                        "broadcast": addr.broadcast
                    })
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                if interface in net_stats:
                    stats = net_stats[interface]
                    interface_info["is_up"] = stats.isup
                    interface_info["speed"] = stats.speed
                
                # IO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                if interface in net_io:
                    io = net_io[interface]
                    interface_info.update({
                        "bytes_sent": io.bytes_sent,
                        "bytes_recv": io.bytes_recv,
                        "packets_sent": io.packets_sent,
                        "packets_recv": io.packets_recv,
                        "bytes_sent_mb": round(io.bytes_sent / (1024**2), 2),
                        "bytes_recv_mb": round(io.bytes_recv / (1024**2), 2)
                    })
                
                interfaces.append(interface_info)
            
            return ToolResult(
                success=True,
                data={
                    "network_info": {
                        "interfaces": interfaces,
                        "total_interfaces": len(interfaces),
                        "active_interfaces": len([i for i in interfaces if i["is_up"]])
                    },
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏: {str(e)}"
            )

    # ========================================
    # üìÇ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–¶–ï–°–°–ê–ú–ò
    # ========================================

    def _get_processes(self, process_name: Optional[str] = None, limit: int = 20) -> ToolResult:
        """üìÇ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        try:
            processes = []
            
            for proc in psutil.process_iter(['pid', 'name', 'status', 'cpu_percent', 'memory_percent', 'memory_info', 'create_time', 'cmdline', 'username', 'num_threads', 'ppid']):
                try:
                    pinfo = proc.info
                    
                    # –§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏
                    if process_name and process_name.lower() not in pinfo['name'].lower():
                        continue
                    
                    process_data = {
                        'pid': pinfo['pid'],
                        'name': pinfo['name'],
                        'status': pinfo['status'],
                        'cpu_percent': pinfo['cpu_percent'] or 0,
                        'memory_percent': round(pinfo['memory_percent'] or 0, 2),
                        'memory_mb': round((pinfo['memory_info'].rss if pinfo['memory_info'] else 0) / (1024**2), 2),
                        'create_time': pinfo['create_time'],
                        'cmdline': ' '.join(pinfo['cmdline']) if pinfo['cmdline'] else '',
                        'username': pinfo['username'] or 'unknown',
                        'num_threads': pinfo['num_threads'] or 0,
                        'parent_pid': pinfo['ppid'] or 0
                    }
                    
                    processes.append(process_data)
                    
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ CPU
            processes.sort(key=lambda x: x['cpu_percent'], reverse=True)
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            if limit > 0:
                processes = processes[:limit]
            
            return ToolResult(
                success=True,
                data={
                    "processes": processes,
                    "total_processes": len(processes),
                    "filter": process_name,
                    "limit": limit,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {str(e)}"
            )

    def _get_process_info(self, pid: int) -> ToolResult:
        """üìÇ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        try:
            proc = psutil.Process(pid)
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            process_info = {
                'pid': proc.pid,
                'name': proc.name(),
                'status': proc.status(),
                'cpu_percent': proc.cpu_percent(),
                'memory_percent': round(proc.memory_percent(), 2),
                'memory_info': {
                    'rss_mb': round(proc.memory_info().rss / (1024**2), 2),
                    'vms_mb': round(proc.memory_info().vms / (1024**2), 2)
                },
                'create_time': proc.create_time(),
                'create_time_formatted': datetime.fromtimestamp(proc.create_time()).isoformat(),
                'cmdline': proc.cmdline(),
                'cwd': proc.cwd() if hasattr(proc, 'cwd') else None,
                'username': proc.username(),
                'num_threads': proc.num_threads(),
                'parent_pid': proc.ppid(),
                'children': [child.pid for child in proc.children()],
                'connections': []
            }
            
            # –°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            try:
                connections = proc.connections()
                for conn in connections[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10
                    process_info['connections'].append({
                        'fd': conn.fd,
                        'family': str(conn.family),
                        'type': str(conn.type),
                        'local_address': f"{conn.laddr.ip}:{conn.laddr.port}" if conn.laddr else None,
                        'remote_address': f"{conn.raddr.ip}:{conn.raddr.port}" if conn.raddr else None,
                        'status': conn.status
                    })
            except (psutil.AccessDenied, AttributeError):
                pass
            
            return ToolResult(
                success=True,
                data={
                    "process_info": process_info,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except psutil.NoSuchProcess:
            return ToolResult(
                success=False,
                error=f"–ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ {pid}: {str(e)}"
            )

    def _kill_process(self, pid: int, force: bool = False) -> ToolResult:
        """‚ö° –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            proc = psutil.Process(pid)
            process_name = proc.name()
            
            if force:
                proc.kill()  # SIGKILL
                method = "KILL"
            else:
                proc.terminate()  # SIGTERM
                method = "TERMINATE"
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                proc.wait(timeout=5)
                status = "completed"
            except psutil.TimeoutExpired:
                status = "timeout"
            
            return ToolResult(
                success=True,
                data={
                    "pid": pid,
                    "process_name": process_name,
                    "method": method,
                    "status": status,
                    "message": f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} (PID: {pid}) –∑–∞–≤–µ—Ä—à—ë–Ω –º–µ—Ç–æ–¥–æ–º {method}",
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except psutil.NoSuchProcess:
            return ToolResult(
                success=False,
                error=f"–ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        except psutil.AccessDenied:
            return ToolResult(
                success=False,
                error=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}"
            )
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}: {str(e)}"
            )

    def _run_command(self, command: str, timeout: int = 30) -> ToolResult:
        """‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            start_time = time.time()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=timeout
            )
            
            execution_time = round(time.time() - start_time, 2)
            
            return ToolResult(
                success=True,
                data={
                    "command": command,
                    "return_code": result.returncode,
                    "stdout": result.stdout[:self.max_output_size] if result.stdout else "",
                    "stderr": result.stderr[:self.max_output_size] if result.stderr else "",
                    "execution_time_seconds": execution_time,
                    "timeout": timeout,
                    "success": result.returncode == 0,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except subprocess.TimeoutExpired:
            return ToolResult(
                success=False,
                error=f"–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ timeout {timeout} —Å–µ–∫—É–Ω–¥"
            )
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
            )

    def _check_service_status(self, service_name: str) -> ToolResult:
        """‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º systemctl –¥–ª—è systemd
            try:
                result = subprocess.run(
                    ['systemctl', 'is-active', service_name],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                status = result.stdout.strip()
                is_active = result.returncode == 0
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                info_result = subprocess.run(
                    ['systemctl', 'status', service_name, '--no-pager', '-l'],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                return ToolResult(
                    success=True,
                    data={
                        "service_name": service_name,
                        "status": status,
                        "is_active": is_active,
                        "detailed_status": info_result.stdout[:self.max_output_size],
                        "method": "systemctl",
                        "timestamp": datetime.now().isoformat(),
                        "source": "SuperSystemTool"
                    }
                )
                
            except (FileNotFoundError, subprocess.TimeoutExpired):
                # Fallback - –ø–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ –∏–º–µ–Ω–∏
                found_processes = []
                for proc in psutil.process_iter(['pid', 'name', 'status']):
                    try:
                        if service_name.lower() in proc.info['name'].lower():
                            found_processes.append({
                                'pid': proc.info['pid'],
                                'name': proc.info['name'],
                                'status': proc.info['status']
                            })
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        continue
                
                return ToolResult(
                    success=True,
                    data={
                        "service_name": service_name,
                        "status": "active" if found_processes else "inactive",
                        "is_active": bool(found_processes),
                        "processes": found_processes,
                        "method": "process_search",
                        "timestamp": datetime.now().isoformat(),
                        "source": "SuperSystemTool"
                    }
                )
                
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {str(e)}"
            )

    # ========================================
    # üìÅ –ë–ï–ó–û–ü–ê–°–ù–´–ï –§–ê–ô–õ–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò
    # ========================================

    def _is_safe_extension(self, file_path: str) -> bool:
        """üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        file_ext = Path(file_path).suffix.lower()
        return file_ext in self.allowed_extensions

    def _is_safe_path(self, path: str) -> tuple[bool, str]:
        """üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—É—Ç–∏"""
        try:
            abs_path = Path(path).resolve()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –ø—É—Ç–∏
            dangerous_paths = {'/etc', '/bin', '/sbin', '/usr/bin', '/usr/sbin', '/boot', '/proc', '/sys'}
            
            for dangerous in dangerous_paths:
                if str(abs_path).startswith(dangerous):
                    return False, f"–ü—É—Ç—å {path} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–ø–∞—Å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {dangerous}"
            
            return True, "–ü—É—Ç—å –±–µ–∑–æ–ø–∞—Å–µ–Ω"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Ç–∏: {str(e)}"

    def _safe_file_create(self, path: str, content: str = "", encoding: str = "utf-8") -> ToolResult:
        """üìÅ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if not path:
                return ToolResult(success=False, error="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
            is_safe, safety_msg = self._is_safe_path(path)
            if not is_safe:
                return ToolResult(success=False, error=f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å: {safety_msg}")
            
            if not self._is_safe_extension(path):
                return ToolResult(success=False, error=f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {Path(path).suffix}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if len(content.encode(encoding)) > self.max_file_size_mb * 1024 * 1024:
                return ToolResult(success=False, error=f"–ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–ª–∏–º–∏—Ç: {self.max_file_size_mb}MB)")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_path = Path(path)
            file_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(file_path, 'w', encoding=encoding) as f:
                f.write(content)
            
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–∞–π–ª: {path} ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            return ToolResult(
                success=True,
                data={
                    "operation": "safe_file_create",
                    "path": str(file_path.absolute()),
                    "size_bytes": len(content.encode(encoding)),
                    "size_chars": len(content),
                    "encoding": encoding,
                    "is_safe": True,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {path}: {e}")
            return ToolResult(success=False, error=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

    def _safe_file_read(self, path: str, encoding: str = "utf-8", max_size: int = None) -> ToolResult:
        """üìñ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            if not path:
                return ToolResult(success=False, error="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
            file_path = Path(path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            if not file_path.exists():
                return ToolResult(success=False, error=f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")
            
            if not file_path.is_file():
                return ToolResult(success=False, error=f"–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {path}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            is_safe, safety_msg = self._is_safe_path(path)
            if not is_safe:
                return ToolResult(success=False, error=f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å: {safety_msg}")
            
            if not self._is_safe_extension(path):
                return ToolResult(success=False, error=f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path.suffix}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            file_size = file_path.stat().st_size
            max_file_size = max_size or (self.max_file_size_mb * 1024 * 1024)
            
            if file_size > max_file_size:
                return ToolResult(
                    success=False,
                    error=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç (–ª–∏–º–∏—Ç: {max_file_size})"
                )
            
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding=encoding) as f:
                content = f.read()
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞
            truncated = False
            if len(content) > self.max_output_size:
                content = content[:self.max_output_size] + "\n... (–∫–æ–Ω—Ç–µ–Ω—Ç –æ–±—Ä–µ–∑–∞–Ω)"
                truncated = True
            
            logger.info(f"üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–∞–π–ª: {path} ({file_size} –±–∞–π—Ç)")
            
            return ToolResult(
                success=True,
                data={
                    "operation": "safe_file_read",
                    "path": str(file_path.absolute()),
                    "content": content,
                    "size_bytes": file_size,
                    "size_chars": len(content),
                    "encoding": encoding,
                    "truncated": truncated,
                    "is_safe": True,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {path}: {e}")
            return ToolResult(success=False, error=f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

    def _safe_file_write(self, path: str, content: str, encoding: str = "utf-8") -> ToolResult:
        """‚úèÔ∏è –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_file_create –¥–ª—è –∑–∞–ø–∏—Å–∏ (–æ–Ω–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
            return self._safe_file_create(path, content, encoding)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {path}: {e}")
            return ToolResult(success=False, error=f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {str(e)}")

    def _safe_file_delete(self, path: str, force: bool = False) -> ToolResult:
        """üóëÔ∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            if not path:
                return ToolResult(success=False, error="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
            file_path = Path(path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            if not file_path.exists():
                return ToolResult(success=False, error=f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")
            
            if not file_path.is_file():
                return ToolResult(success=False, error=f"–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {path}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω–µ force)
            if not force:
                is_safe, safety_msg = self._is_safe_path(path)
                if not is_safe:
                    return ToolResult(success=False, error=f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å: {safety_msg}")
                
                if not self._is_safe_extension(path):
                    return ToolResult(success=False, error=f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path.suffix}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            file_size = file_path.stat().st_size
            
            # –£–¥–∞–ª–µ–Ω–∏–µ
            file_path.unlink()
            
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–∞–π–ª: {path} ({file_size} –±–∞–π—Ç)")
            
            return ToolResult(
                success=True,
                data={
                    "operation": "safe_file_delete",
                    "path": str(file_path.absolute()),
                    "size_bytes": file_size,
                    "force": force,
                    "deleted": True,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {path}: {e}")
            return ToolResult(success=False, error=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

    def _safe_file_list(self, path: str = ".", recursive: bool = False) -> ToolResult:
        """üìã –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
        try:
            dir_path = Path(path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            if not dir_path.exists():
                return ToolResult(success=False, error=f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")
            
            if not dir_path.is_dir():
                return ToolResult(success=False, error=f"–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {path}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            is_safe, safety_msg = self._is_safe_path(path)
            if not is_safe:
                return ToolResult(success=False, error=f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å: {safety_msg}")
            
            items = []
            
            try:
                if recursive:
                    files = dir_path.rglob("*")
                else:
                    files = dir_path.iterdir()
                
                for item in files:
                    try:
                        stat_info = item.stat()
                        item_info = {
                            "name": item.name,
                            "path": str(item.absolute()),
                            "type": "file" if item.is_file() else "directory",
                            "size_bytes": stat_info.st_size if item.is_file() else None,
                            "size_mb": round(stat_info.st_size / (1024**2), 2) if item.is_file() else None,
                            "modified_time": stat_info.st_mtime,
                            "modified_formatted": datetime.fromtimestamp(stat_info.st_mtime).isoformat(),
                            "extension": item.suffix if item.is_file() else None,
                            "is_safe": self._is_safe_extension(str(item)) if item.is_file() else True
                        }
                        items.append(item_info)
                        
                    except (PermissionError, OSError):
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã
                        continue
                
            except PermissionError:
                return ToolResult(success=False, error=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {path}")
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
            items.sort(key=lambda x: (x["type"] == "file", x["name"].lower()))
            
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫: {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ {path}")
            
            return ToolResult(
                success=True,
                data={
                    "operation": "safe_file_list",
                    "path": str(dir_path.absolute()),
                    "items": items,
                    "total_items": len(items),
                    "files_count": len([i for i in items if i["type"] == "file"]),
                    "directories_count": len([i for i in items if i["type"] == "directory"]),
                    "safe_files_count": len([i for i in items if i["type"] == "file" and i["is_safe"]]),
                    "recursive": recursive,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ {path}: {e}")
            return ToolResult(success=False, error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}")

    # ========================================
    # üìÅ –†–ê–°–®–ò–†–ï–ù–ù–´–ï –§–ê–ô–õ–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò
    # ========================================

    def _get_file_info(self, path: str) -> ToolResult:
        """üìÑ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ"""
        try:
            if not path:
                return ToolResult(success=False, error="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
            file_path = Path(path)
            
            if not file_path.exists():
                return ToolResult(success=False, error=f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")
            
            stat_info = file_path.stat()
            is_file = file_path.is_file()
            is_dir = file_path.is_dir()
            
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            file_info = {
                "path": str(file_path.absolute()),
                "name": file_path.name,
                "parent": str(file_path.parent),
                "is_file": is_file,
                "is_directory": is_dir,
                "is_symlink": file_path.is_symlink(),
                "exists": True,
                "size_bytes": stat_info.st_size,
                "size_mb": round(stat_info.st_size / (1024**2), 4),
                "modified_time": stat_info.st_mtime,
                "modified_formatted": datetime.fromtimestamp(stat_info.st_mtime).isoformat(),
                "created_time": stat_info.st_ctime,
                "created_formatted": datetime.fromtimestamp(stat_info.st_ctime).isoformat(),
                "accessed_time": stat_info.st_atime,
                "accessed_formatted": datetime.fromtimestamp(stat_info.st_atime).isoformat(),
                "permissions": oct(stat_info.st_mode)[-3:],
                "owner_uid": stat_info.st_uid,
                "group_gid": stat_info.st_gid
            }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤
            if is_file:
                file_info.update({
                    "extension": file_path.suffix,
                    "stem": file_path.stem,
                    "is_safe": self._is_safe_extension(path),
                    "mime_type": self._get_mime_type(file_path)
                })
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            if is_dir:
                try:
                    contents = list(file_path.iterdir())
                    file_info.update({
                        "contents_count": len(contents),
                        "files_count": len([f for f in contents if f.is_file()]),
                        "directories_count": len([f for f in contents if f.is_dir()])
                    })
                except PermissionError:
                    file_info.update({
                        "contents_count": "Permission denied",
                        "files_count": "Permission denied",
                        "directories_count": "Permission denied"
                    })
            
            return ToolResult(
                success=True,
                data={
                    "file_info": file_info,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ {path}: {str(e)}"
            )

    def _get_mime_type(self, file_path: Path) -> str:
        """üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
        try:
            import mimetypes
            mime_type, _ = mimetypes.guess_type(str(file_path))
            return mime_type or "unknown"
        except Exception:
            return "unknown"

    def _file_exists(self, path: str) -> ToolResult:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        try:
            if not path:
                return ToolResult(success=False, error="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
            file_path = Path(path)
            exists = file_path.exists()
            
            result_data = {
                "path": str(file_path.absolute()),
                "exists": exists,
                "is_file": file_path.is_file() if exists else False,
                "is_directory": file_path.is_dir() if exists else False,
                "is_symlink": file_path.is_symlink() if exists else False,
                "timestamp": datetime.now().isoformat(),
                "source": "SuperSystemTool"
            }
            
            return ToolResult(success=True, data=result_data)
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {path}: {str(e)}"
            )

    def _copy_file(self, path: str, destination: str) -> ToolResult:
        """üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            if not path or not destination:
                return ToolResult(success=False, error="–ü—É—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
            
            source_path = Path(path)
            dest_path = Path(destination)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if not source_path.exists():
                return ToolResult(success=False, error=f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
            
            if not source_path.is_file():
                return ToolResult(success=False, error=f"–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {path}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            is_safe_src, safety_msg_src = self._is_safe_path(path)
            if not is_safe_src:
                return ToolResult(success=False, error=f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {safety_msg_src}")
            
            is_safe_dst, safety_msg_dst = self._is_safe_path(destination)
            if not is_safe_dst:
                return ToolResult(success=False, error=f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {safety_msg_dst}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            dest_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            source_size = source_path.stat().st_size
            
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
            shutil.copy2(source_path, dest_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            if dest_path.exists():
                dest_size = dest_path.stat().st_size
                success = (source_size == dest_size)
            else:
                success = False
                dest_size = 0
            
            logger.info(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {path} ‚Üí {destination} ({source_size} –±–∞–π—Ç)")
            
            return ToolResult(
                success=success,
                data={
                    "operation": "copy_file",
                    "source": str(source_path.absolute()),
                    "destination": str(dest_path.absolute()),
                    "source_size_bytes": source_size,
                    "destination_size_bytes": dest_size,
                    "size_match": source_size == dest_size,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {path}: {e}")
            return ToolResult(success=False, error=f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

    def _move_file(self, path: str, destination: str) -> ToolResult:
        """üöö –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            if not path or not destination:
                return ToolResult(success=False, error="–ü—É—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
            
            source_path = Path(path)
            dest_path = Path(destination)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if not source_path.exists():
                return ToolResult(success=False, error=f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
            
            if not source_path.is_file():
                return ToolResult(success=False, error=f"–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {path}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            is_safe_src, safety_msg_src = self._is_safe_path(path)
            if not is_safe_src:
                return ToolResult(success=False, error=f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {safety_msg_src}")
            
            is_safe_dst, safety_msg_dst = self._is_safe_path(destination)
            if not is_safe_dst:
                return ToolResult(success=False, error=f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {safety_msg_dst}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            source_size = source_path.stat().st_size
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            dest_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
            shutil.move(str(source_path), str(dest_path))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            moved_successfully = dest_path.exists() and not source_path.exists()
            
            logger.info(f"üöö –ü–µ—Ä–µ–º–µ—â–µ–Ω —Ñ–∞–π–ª: {path} ‚Üí {destination} ({source_size} –±–∞–π—Ç)")
            
            return ToolResult(
                success=moved_successfully,
                data={
                    "operation": "move_file",
                    "source": str(Path(path).absolute()),
                    "destination": str(dest_path.absolute()),
                    "size_bytes": source_size,
                    "moved_successfully": moved_successfully,
                    "source_exists": source_path.exists(),
                    "destination_exists": dest_path.exists(),
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {path}: {e}")
            return ToolResult(success=False, error=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

    def _create_directory(self, path: str) -> ToolResult:
        """üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            if not path:
                return ToolResult(success=False, error="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
            dir_path = Path(path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            is_safe, safety_msg = self._is_safe_path(path)
            if not is_safe:
                return ToolResult(success=False, error=f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å: {safety_msg}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dir_path.mkdir(parents=True, exist_ok=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è
            success = dir_path.exists() and dir_path.is_dir()
            
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {path}")
            
            return ToolResult(
                success=success,
                data={
                    "operation": "create_directory",
                    "path": str(dir_path.absolute()),
                    "created": success,
                    "already_existed": dir_path.exists(),
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {path}: {e}")
            return ToolResult(success=False, error=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}")

    def _delete_directory(self, path: str, force: bool = False) -> ToolResult:
        """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            if not path:
                return ToolResult(success=False, error="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
            dir_path = Path(path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            if not dir_path.exists():
                return ToolResult(success=False, error=f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")
            
            if not dir_path.is_dir():
                return ToolResult(success=False, error=f"–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {path}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω–µ force)
            if not force:
                is_safe, safety_msg = self._is_safe_path(path)
                if not is_safe:
                    return ToolResult(success=False, error=f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å: {safety_msg}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            try:
                contents = list(dir_path.rglob("*"))
                files_count = len([f for f in contents if f.is_file()])
                dirs_count = len([f for f in contents if f.is_dir()])
                total_size = sum(f.stat().st_size for f in contents if f.is_file())
            except PermissionError:
                files_count = dirs_count = total_size = 0
            
            # –£–¥–∞–ª–µ–Ω–∏–µ
            shutil.rmtree(dir_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
            deleted = not dir_path.exists()
            
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {path} ({files_count} —Ñ–∞–π–ª–æ–≤, {dirs_count} –ø–∞–ø–æ–∫)")
            
            return ToolResult(
                success=deleted,
                data={
                    "operation": "delete_directory",
                    "path": str(dir_path.absolute()),
                    "deleted": deleted,
                    "force": force,
                    "files_deleted": files_count,
                    "directories_deleted": dirs_count,
                    "total_size_bytes": total_size,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {path}: {e}")
            return ToolResult(success=False, error=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}")

    # ========================================
    # üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ò –í–ê–õ–ò–î–ê–¶–ò–Ø
    # ========================================

    def _validate_file_path(self, path: str) -> ToolResult:
        """üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–∏ —Ñ–∞–π–ª–∞"""
        try:
            if not path:
                return ToolResult(success=False, error="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
            file_path = Path(path)
            validation_results = {
                "path": path,
                "absolute_path": str(file_path.absolute()),
                "is_valid": True,
                "issues": [],
                "recommendations": []
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—É—Ç–∏
            is_safe, safety_msg = self._is_safe_path(path)
            if not is_safe:
                validation_results["is_valid"] = False
                validation_results["issues"].append(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å: {safety_msg}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            if file_path.suffix and not self._is_safe_extension(path):
                validation_results["issues"].append(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_path.suffix}")
                validation_results["recommendations"].append(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω–æ –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: {', '.join(sorted(self.allowed_extensions))}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø—É—Ç–∏
            if len(str(file_path.absolute())) > 255:
                validation_results["issues"].append("–ü—É—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>255 —Å–∏–º–≤–æ–ª–æ–≤)")
                validation_results["recommendations"].append("–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            invalid_chars = set(str(file_path)) & {'<', '>', ':', '"', '|', '?', '*'}
            if invalid_chars:
                validation_results["issues"].append(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø—É—Ç–∏: {', '.join(invalid_chars)}")
                validation_results["recommendations"].append("–£–¥–∞–ª–∏—Ç–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –ø—É—Ç–∏")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if not file_path.parent.exists():
                validation_results["recommendations"].append("–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if validation_results["issues"]:
                validation_results["is_valid"] = False
            
            return ToolResult(
                success=True,
                data={
                    "validation": validation_results,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏ {path}: {str(e)}"
            )

    def _check_file_safety(self, path: str) -> ToolResult:
        """üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞"""
        try:
            if not path:
                return ToolResult(success=False, error="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
            file_path = Path(path)
            safety_results = {
                "path": path,
                "is_safe": True,
                "safety_score": 100,  # –∏–∑ 100
                "issues": [],
                "warnings": [],
                "recommendations": []
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if file_path.exists():
                if file_path.is_file():
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                    file_size = file_path.stat().st_size
                    if file_size > self.max_file_size_mb * 1024 * 1024:
                        safety_results["issues"].append(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç")
                        safety_results["safety_score"] -= 30
                    elif file_size > self.max_file_size_mb * 1024 * 1024 * 0.5:
                        safety_results["warnings"].append(f"–§–∞–π–ª –¥–æ–≤–æ–ª—å–Ω–æ –±–æ–ª—å—à–æ–π: {round(file_size/(1024**2), 2)} MB")
                        safety_results["safety_score"] -= 10
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                    if not self._is_safe_extension(path):
                        safety_results["issues"].append(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_path.suffix}")
                        safety_results["safety_score"] -= 40
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME —Ç–∏–ø–∞
                    mime_type = self._get_mime_type(file_path)
                    if mime_type.startswith('application/') and mime_type not in ['application/json', 'application/xml']:
                        safety_results["warnings"].append(f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π MIME —Ç–∏–ø: {mime_type}")
                        safety_results["safety_score"] -= 15
                    
                else:
                    safety_results["warnings"].append("–ü—É—Ç—å —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π, –∞ –Ω–µ —Ñ–∞–π–ª–æ–º")
            else:
                safety_results["warnings"].append("–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏
            is_safe_path, path_msg = self._is_safe_path(path)
            if not is_safe_path:
                safety_results["issues"].append(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å: {path_msg}")
                safety_results["safety_score"] -= 50
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if safety_results["issues"]:
                safety_results["is_safe"] = False
                safety_results["recommendations"].append("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            
            if safety_results["warnings"]:
                safety_results["recommendations"].append("–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
            
            if safety_results["safety_score"] < 70:
                safety_results["is_safe"] = False
                safety_results["recommendations"].append("–†–µ–π—Ç–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π")
            
            return ToolResult(
                success=True,
                data={
                    "safety_check": safety_results,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ {path}: {str(e)}"
            )

    def _scan_directory_safety(self, path: str, recursive: bool = False) -> ToolResult:
        """üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            if not path:
                return ToolResult(success=False, error="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
            dir_path = Path(path)
            
            if not dir_path.exists():
                return ToolResult(success=False, error=f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")
            
            if not dir_path.is_dir():
                return ToolResult(success=False, error=f"–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {path}")
            
            scan_results = {
                "path": path,
                "scanned_files": 0,
                "safe_files": 0,
                "unsafe_files": 0,
                "large_files": 0,
                "unknown_extensions": 0,
                "total_size_bytes": 0,
                "largest_file": None,
                "unsafe_file_list": [],
                "large_file_list": [],
                "unknown_extension_list": [],
                "safety_percentage": 0
            }
            
            try:
                if recursive:
                    files = [f for f in dir_path.rglob("*") if f.is_file()]
                else:
                    files = [f for f in dir_path.iterdir() if f.is_file()]
                
                scan_results["scanned_files"] = len(files)
                
                largest_size = 0
                
                for file_path in files:
                    try:
                        file_size = file_path.stat().st_size
                        scan_results["total_size_bytes"] += file_size
                        
                        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
                        if file_size > largest_size:
                            largest_size = file_size
                            scan_results["largest_file"] = {
                                "path": str(file_path),
                                "size_bytes": file_size,
                                "size_mb": round(file_size / (1024**2), 2)
                            }
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                        if self._is_safe_extension(str(file_path)):
                            scan_results["safe_files"] += 1
                        else:
                            scan_results["unsafe_files"] += 1
                            if file_path.suffix:
                                scan_results["unsafe_file_list"].append({
                                    "path": str(file_path),
                                    "extension": file_path.suffix,
                                    "size_mb": round(file_size / (1024**2), 2)
                                })
                            else:
                                scan_results["unknown_extensions"] += 1
                                scan_results["unknown_extension_list"].append({
                                    "path": str(file_path),
                                    "size_mb": round(file_size / (1024**2), 2)
                                })
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
                        if file_size > self.max_file_size_mb * 1024 * 1024 * 0.5:  # 50% –æ—Ç –ª–∏–º–∏—Ç–∞
                            scan_results["large_files"] += 1
                            scan_results["large_file_list"].append({
                                "path": str(file_path),
                                "size_mb": round(file_size / (1024**2), 2),
                                "extension": file_path.suffix
                            })
                        
                    except (PermissionError, OSError):
                        continue
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if scan_results["scanned_files"] > 0:
                    scan_results["safety_percentage"] = round(
                        (scan_results["safe_files"] / scan_results["scanned_files"]) * 100, 1
                    )
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
                scan_results["unsafe_file_list"] = scan_results["unsafe_file_list"][:20]
                scan_results["large_file_list"] = scan_results["large_file_list"][:20]
                scan_results["unknown_extension_list"] = scan_results["unknown_extension_list"][:20]
                
            except PermissionError:
                return ToolResult(success=False, error=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {path}")
            
            logger.info(f"üîç –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {path} ({scan_results['scanned_files']} —Ñ–∞–π–ª–æ–≤, {scan_results['safety_percentage']}% –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö)")
            
            return ToolResult(
                success=True,
                data={
                    "safety_scan": scan_results,
                    "recursive": recursive,
                    "total_size_mb": round(scan_results["total_size_bytes"] / (1024**2), 2),
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ {path}: {e}")
            return ToolResult(success=False, error=f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {str(e)}")

    # ========================================
    # üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò HEALTH CHECK
    # ========================================

    def _health_check(self) -> ToolResult:
        """ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            health_results = {
                "overall_health": "healthy",
                "health_score": 100,  # –∏–∑ 100
                "cpu_status": "good",
                "memory_status": "good", 
                "disk_status": "good",
                "system_status": "good",
                "warnings": [],
                "critical_issues": [],
                "recommendations": []
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            if cpu_percent > 90:
                health_results["cpu_status"] = "critical"
                health_results["critical_issues"].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent}%")
                health_results["health_score"] -= 30
            elif cpu_percent > 70:
                health_results["cpu_status"] = "warning"
                health_results["warnings"].append(f"–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent}%")
                health_results["health_score"] -= 15
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()
            if memory.percent > 95:
                health_results["memory_status"] = "critical"
                health_results["critical_issues"].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent}%")
                health_results["health_score"] -= 30
            elif memory.percent > 80:
                health_results["memory_status"] = "warning"
                health_results["warnings"].append(f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent}%")
                health_results["health_score"] -= 15
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤
            disk = psutil.disk_usage('/')
            disk_percent = (disk.used / disk.total) * 100
            if disk_percent > 95:
                health_results["disk_status"] = "critical"
                health_results["critical_issues"].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏—Å–∫–∞: {disk_percent:.1f}%")
                health_results["health_score"] -= 25
            elif disk_percent > 85:
                health_results["disk_status"] = "warning"
                health_results["warnings"].append(f"–í—ã—Å–æ–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏—Å–∫–∞: {disk_percent:.1f}%")
                health_results["health_score"] -= 10
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            try:
                load_avg = os.getloadavg()[0]  # 1-–º–∏–Ω—É—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
                cpu_count = psutil.cpu_count()
                if load_avg > cpu_count * 2:
                    health_results["system_status"] = "critical"
                    health_results["critical_issues"].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {load_avg:.2f}")
                    health_results["health_score"] -= 20
                elif load_avg > cpu_count:
                    health_results["system_status"] = "warning"
                    health_results["warnings"].append(f"–í—ã—Å–æ–∫–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {load_avg:.2f}")
                    health_results["health_score"] -= 10
            except (OSError, AttributeError):
                pass  # Windows –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç load average
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if health_results["critical_issues"]:
                health_results["overall_health"] = "critical"
                health_results["recommendations"].append("üö® –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
            elif health_results["warnings"]:
                health_results["overall_health"] = "warning"
                health_results["recommendations"].append("‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
            else:
                health_results["overall_health"] = "healthy"
                health_results["recommendations"].append("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if health_results["health_score"] < 70:
                health_results["recommendations"].append("üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã")
            
            return ToolResult(
                success=True,
                data={
                    "health_check": health_results,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã: {str(e)}"
            )

    def _start_monitoring(self, interval: float = 1.0, max_records: int = None) -> ToolResult:
        """üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if self._monitoring_active:
                return ToolResult(
                    success=False,
                    error="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."
                )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self._monitoring_active = True
            self._monitoring_data.clear()
            if max_records:
                self._max_monitoring_records = max_records
            
            def monitoring_loop():
                """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
                while self._monitoring_active:
                    try:
                        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                        cpu_percent = psutil.cpu_percent(interval=0.1)
                        memory = psutil.virtual_memory()
                        disk = psutil.disk_usage('/')
                        net_io = psutil.net_io_counters()
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                        record = {
                            "timestamp": datetime.now().isoformat(),
                            "cpu_percent": cpu_percent,
                            "memory_percent": memory.percent,
                            "memory_available_gb": round(memory.available / (1024**3), 2),
                            "disk_percent": round((disk.used / disk.total) * 100, 2),
                            "disk_free_gb": round(disk.free / (1024**3), 2),
                            "network_bytes_sent": net_io.bytes_sent,
                            "network_bytes_recv": net_io.bytes_recv
                        }
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                        self._monitoring_data.append(record)
                        
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                        if len(self._monitoring_data) > self._max_monitoring_records:
                            self._monitoring_data.pop(0)
                        
                        time.sleep(interval)
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                        time.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self._monitoring_thread = threading.Thread(target=monitoring_loop, daemon=True)
            self._monitoring_thread.start()
            
            logger.info(f"üìä –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å, –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π: {self._max_monitoring_records})")
            
            return ToolResult(
                success=True,
                data={
                    "operation": "start_monitoring",
                    "interval_seconds": interval,
                    "max_records": self._max_monitoring_records,
                    "monitoring_active": self._monitoring_active,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            self._monitoring_active = False
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return ToolResult(success=False, error=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")

    def _stop_monitoring(self) -> ToolResult:
        """‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if not self._monitoring_active:
                return ToolResult(
                    success=False,
                    error="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
                )
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self._monitoring_active = False
            
            # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            if self._monitoring_thread and self._monitoring_thread.is_alive():
                self._monitoring_thread.join(timeout=5)
            
            records_count = len(self._monitoring_data)
            
            logger.info(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã ({records_count} –∑–∞–ø–∏—Å–µ–π —Å–æ–±—Ä–∞–Ω–æ)")
            
            return ToolResult(
                success=True,
                data={
                    "operation": "stop_monitoring",
                    "monitoring_active": self._monitoring_active,
                    "records_collected": records_count,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return ToolResult(success=False, error=f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")

    def _get_monitoring_data(self) -> ToolResult:
        """üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            records_count = len(self._monitoring_data)
            
            if records_count == 0:
                return ToolResult(
                    success=True,
                    data={
                        "monitoring_data": [],
                        "records_count": 0,
                        "monitoring_active": self._monitoring_active,
                        "message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                        "timestamp": datetime.now().isoformat(),
                        "source": "SuperSystemTool"
                    }
                )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
            if records_count > 0:
                cpu_values = [r["cpu_percent"] for r in self._monitoring_data]
                memory_values = [r["memory_percent"] for r in self._monitoring_data]
                
                statistics = {
                    "cpu_avg": round(sum(cpu_values) / len(cpu_values), 2),
                    "cpu_max": max(cpu_values),
                    "cpu_min": min(cpu_values),
                    "memory_avg": round(sum(memory_values) / len(memory_values), 2),
                    "memory_max": max(memory_values),
                    "memory_min": min(memory_values),
                    "timespan_minutes": round((records_count * 1.0) / 60, 2)  # –ü—Ä–∏–º–µ—Ä–Ω–æ
                }
            else:
                statistics = {}
            
            return ToolResult(
                success=True,
                data={
                    "monitoring_data": self._monitoring_data[-100:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
                    "records_count": records_count,
                    "monitoring_active": self._monitoring_active,
                    "statistics": statistics,
                    "total_records_available": records_count,
                    "showing_last_records": min(100, records_count),
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}"
            )

    def _get_system_metrics(self) -> ToolResult:
        """üìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            net_io = psutil.net_io_counters()
            boot_time = psutil.boot_time()
            
            # –ü—Ä–æ—Ü–µ—Å—Å—ã
            processes = list(psutil.process_iter(['pid', 'name', 'cpu_percent']))
            active_processes = len([p for p in processes if p.info['cpu_percent'] and p.info['cpu_percent'] > 0])
            
            # Load average
            try:
                load_avg = list(os.getloadavg())
            except (OSError, AttributeError):
                load_avg = [0.0, 0.0, 0.0]
            
            metrics = {
                "system": {
                    "uptime_hours": round((time.time() - boot_time) / 3600, 2),
                    "load_average": load_avg,
                    "active_processes": active_processes,
                    "total_processes": len(processes)
                },
                "cpu": {
                    "usage_percent": cpu_percent,
                    "cores": psutil.cpu_count(),
                    "frequency_mhz": round(psutil.cpu_freq().current, 0) if psutil.cpu_freq() else 0
                },
                "memory": {
                    "usage_percent": memory.percent,
                    "total_gb": round(memory.total / (1024**3), 2),
                    "available_gb": round(memory.available / (1024**3), 2),
                    "used_gb": round(memory.used / (1024**3), 2)
                },
                "disk": {
                    "usage_percent": round((disk.used / disk.total) * 100, 2),
                    "total_gb": round(disk.total / (1024**3), 2),
                    "free_gb": round(disk.free / (1024**3), 2),
                    "used_gb": round(disk.used / (1024**3), 2)
                },
                "network": {
                    "bytes_sent_mb": round(net_io.bytes_sent / (1024**2), 2),
                    "bytes_recv_mb": round(net_io.bytes_recv / (1024**2), 2),
                    "packets_sent": net_io.packets_sent,
                    "packets_recv": net_io.packets_recv
                }
            }
            
            return ToolResult(
                success=True,
                data={
                    "system_metrics": metrics,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {str(e)}"
            )

    def _check_system_health(self) -> ToolResult:
        """ü©∫ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π health_check –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            base_health = self._health_check()
            
            if not base_health.success:
                return base_health
            
            health_data = base_health.data["health_check"]
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            additional_checks = {
                "network_connectivity": "unknown",
                "disk_io_performance": "unknown", 
                "system_services": "unknown",
                "file_system_health": "unknown"
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–∞—è)
            try:
                import socket
                socket.create_connection(("8.8.8.8", 53), timeout=3)
                additional_checks["network_connectivity"] = "good"
            except:
                additional_checks["network_connectivity"] = "warning"
                health_data["warnings"].append("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
                health_data["health_score"] -= 5
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∏—Å–∫–∞
            try:
                disk_io = psutil.disk_io_counters()
                if disk_io and hasattr(disk_io, 'read_time') and hasattr(disk_io, 'write_time'):
                    total_io_time = disk_io.read_time + disk_io.write_time
                    if total_io_time > 0:  # –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                        additional_checks["disk_io_performance"] = "good"
                    else:
                        additional_checks["disk_io_performance"] = "warning"
                else:
                    additional_checks["disk_io_performance"] = "unknown"
            except:
                additional_checks["disk_io_performance"] = "unknown"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (–±–∞–∑–æ–≤–∞—è)
            try:
                test_file = Path("/tmp/supersystem_health_check.tmp")
                test_file.touch()
                test_file.unlink()
                additional_checks["file_system_health"] = "good"
            except:
                additional_checks["file_system_health"] = "warning"
                health_data["warnings"].append("–ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
                health_data["health_score"] -= 10
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            health_data["additional_checks"] = additional_checks
            
            return ToolResult(
                success=True,
                data={
                    "extended_health_check": health_data,
                    "timestamp": datetime.now().isoformat(),
                    "source": "SuperSystemTool"
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {str(e)}"
            )


# ========================================
# üè≠ –§–ê–ë–†–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================

def create_super_system_tool() -> SuperSystemTool:
    """üöÄ –°–æ–∑–¥–∞–Ω–∏–µ SuperSystemTool"""
    return SuperSystemTool()

def create_lightweight_super_system_tool() -> SuperSystemTool:
    """‚ö° –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–µ–≥—á—ë–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ SuperSystemTool"""
    tool = SuperSystemTool()
    tool._cache_timeout = 10.0  # –ë–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π –∫–µ—à
    tool.max_file_size_mb = 50   # –ú–µ–Ω—å—à–∏–π –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤
    tool.max_output_size = 25000  # –ú–µ–Ω—å—à–∏–π –≤—ã–≤–æ–¥
    return tool