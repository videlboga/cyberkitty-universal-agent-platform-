"""
Simple HTTP Plugin - –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤

–ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!
- –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ HTTP –º–µ—Ç–æ–¥—ã: GET, POST, PUT, DELETE
- –ú–∏–Ω–∏–º—É–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
- –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import os
import httpx
from typing import Dict, Any, Optional
from loguru import logger

from app.core.base_plugin import BasePlugin


class SimpleHTTPPlugin(BasePlugin):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–≥–∏–Ω –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        super().__init__("simple_http")
        self.default_timeout = 30.0
        self.default_headers = {
            "User-Agent": "Universal-Agent-Platform/1.0",
            "Content-Type": "application/json"
        }
        logger.info("SimpleHTTPPlugin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _do_initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
        logger.info("SimpleHTTPPlugin –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def register_handlers(self) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —à–∞–≥–æ–≤"""
        return {
            "http_get": self._handle_http_get,
            "http_post": self._handle_http_post,
            "http_put": self._handle_http_put,
            "http_delete": self._handle_http_delete,
            "http_request": self._handle_http_request  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
        }
    
    async def _handle_http_get(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET –∑–∞–ø—Ä–æ—Å–∞
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - url: URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        - headers: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - params: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - timeout: —Ç–∞–π–º-–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - output_var: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "http_response")
        """
        params = step_data.get("params", {})
        
        url = self._resolve_value(params.get("url", ""), context)
        headers = params.get("headers", {})
        query_params = params.get("params", {})
        timeout = params.get("timeout", self.default_timeout)
        output_var = params.get("output_var", "http_response")
        
        if not url:
            logger.error("SimpleHTTPPlugin: URL –Ω–µ —É–∫–∞–∑–∞–Ω")
            context[output_var] = {"success": False, "error": "URL –Ω–µ —É–∫–∞–∑–∞–Ω"}
            return context
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å
        response = await self._make_request("GET", url, headers=headers, params=query_params, timeout=timeout)
        context[output_var] = response
        
        return context
    
    async def _handle_http_post(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST –∑–∞–ø—Ä–æ—Å–∞
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - url: URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        - data: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - json: JSON –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - headers: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - timeout: —Ç–∞–π–º-–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - output_var: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "http_response")
        """
        params = step_data.get("params", {})
        
        url = self._resolve_value(params.get("url", ""), context)
        data = params.get("data")
        json_data = params.get("json")
        headers = params.get("headers", {})
        timeout = params.get("timeout", self.default_timeout)
        output_var = params.get("output_var", "http_response")
        
        if not url:
            logger.error("SimpleHTTPPlugin: URL –Ω–µ —É–∫–∞–∑–∞–Ω")
            context[output_var] = {"success": False, "error": "URL –Ω–µ —É–∫–∞–∑–∞–Ω"}
            return context
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º POST –∑–∞–ø—Ä–æ—Å
        response = await self._make_request("POST", url, headers=headers, data=data, json=json_data, timeout=timeout)
        context[output_var] = response
        
        return context
    
    async def _handle_http_put(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ PUT –∑–∞–ø—Ä–æ—Å–∞"""
        params = step_data.get("params", {})
        
        url = self._resolve_value(params.get("url", ""), context)
        data = params.get("data")
        json_data = params.get("json")
        headers = params.get("headers", {})
        timeout = params.get("timeout", self.default_timeout)
        output_var = params.get("output_var", "http_response")
        
        if not url:
            context[output_var] = {"success": False, "error": "URL –Ω–µ —É–∫–∞–∑–∞–Ω"}
            return context
        
        response = await self._make_request("PUT", url, headers=headers, data=data, json=json_data, timeout=timeout)
        context[output_var] = response
        
        return context
    
    async def _handle_http_delete(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ DELETE –∑–∞–ø—Ä–æ—Å–∞"""
        params = step_data.get("params", {})
        
        url = self._resolve_value(params.get("url", ""), context)
        headers = params.get("headers", {})
        timeout = params.get("timeout", self.default_timeout)
        output_var = params.get("output_var", "http_response")
        
        if not url:
            context[output_var] = {"success": False, "error": "URL –Ω–µ —É–∫–∞–∑–∞–Ω"}
            return context
        
        response = await self._make_request("DELETE", url, headers=headers, timeout=timeout)
        context[output_var] = response
        
        return context
    
    async def _handle_http_request(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–∞
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - method: HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE)
        - url: URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        - headers: –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - params: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è GET (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - data: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - json: JSON –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - timeout: —Ç–∞–π–º-–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - output_var: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "http_response")
        """
        params = step_data.get("params", {})
        
        method = params.get("method", "GET").upper()
        url = self._resolve_value(params.get("url", ""), context)
        headers = params.get("headers", {})
        query_params = params.get("params", {})
        data = params.get("data")
        json_data = params.get("json")
        timeout = params.get("timeout", self.default_timeout)
        output_var = params.get("output_var", "http_response")
        
        if not url:
            context[output_var] = {"success": False, "error": "URL –Ω–µ —É–∫–∞–∑–∞–Ω"}
            return context
        
        response = await self._make_request(
            method, url, 
            headers=headers, 
            params=query_params, 
            data=data, 
            json=json_data, 
            timeout=timeout
        )
        context[output_var] = response
        
        return context
    
    async def _make_request(self, method: str, url: str, **kwargs) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞"""
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {**self.default_headers}
        if "headers" in kwargs:
            headers.update(kwargs["headers"])
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        logger.info(f"üåê HTTP {method} –∑–∞–ø—Ä–æ—Å: {url}")
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.request(
                    method=method,
                    url=url,
                    headers=headers,
                    params=kwargs.get("params"),
                    data=kwargs.get("data"),
                    json=kwargs.get("json"),
                    timeout=kwargs.get("timeout", self.default_timeout)
                )
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
                try:
                    response_data = response.json()
                except:
                    response_data = response.text
                
                result = {
                    "success": response.status_code < 400,
                    "status_code": response.status_code,
                    "data": response_data,
                    "headers": dict(response.headers),
                    "url": str(response.url)
                }
                
                if response.status_code >= 400:
                    result["error"] = f"HTTP {response.status_code}: {response.reason_phrase}"
                    logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {response.status_code}: {url}")
                else:
                    logger.info(f"‚úÖ HTTP {method} —É—Å–ø–µ—à–Ω–æ: {url} -> {response.status_code}")
                
                return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {
                "success": False,
                "error": str(e),
                "status_code": 0,
                "data": None
            }
    
    def _resolve_value(self, value: Any, context: Dict[str, Any]) -> Any:
        """–ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if isinstance(value, str) and "{" in value and "}" in value:
            try:
                return value.format(**context)
            except (KeyError, ValueError) as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å '{value}': {e}")
                return value
        return value
    
    async def healthcheck(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–ª–∞–≥–∏–Ω–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ httpbin
            response = await self._make_request("GET", "https://httpbin.org/status/200", timeout=5.0)
            return response.get("success", False)
        except Exception:
            return False 