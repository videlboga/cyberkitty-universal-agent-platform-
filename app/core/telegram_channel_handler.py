"""
TelegramChannelHandler - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Telegram –∫–∞–Ω–∞–ª–∞
"""

import asyncio
from typing import Dict, Any, Optional, List
from loguru import logger
import aiohttp
import json


class TelegramChannelHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º Telegram –∫–∞–Ω–∞–ª–æ–º
    
    –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç:
    - Bot API —Ç–æ–∫–µ–Ω
    - –ú–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ polling/webhook
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
    """
    
    def __init__(self, channel_id: str, bot_token: str):
        """
        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
            bot_token: Telegram Bot API —Ç–æ–∫–µ–Ω
        """
        self.channel_id = channel_id
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.session: Optional[aiohttp.ClientSession] = None
        self.polling_task: Optional[asyncio.Task] = None
        self.last_update_id = 0
        
        logger.info(f"ü§ñ TelegramChannelHandler —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–∏"""
        if not self.session:
            self.session = aiohttp.ClientSession()
            logger.info(f"üîó HTTP —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {self.channel_id}")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.polling_task and not self.polling_task.done():
            self.polling_task.cancel()
            try:
                await self.polling_task
            except asyncio.CancelledError:
                pass
        
        if self.session:
            await self.session.close()
            self.session = None
        
        logger.info(f"üßπ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ {self.channel_id}")
    
    async def send_message(self, chat_id: str, text: str, **kwargs) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (parse_mode, reply_markup –∏ —Ç.–¥.)
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º API –≤—ã–∑–æ–≤–∞
        """
        await self.initialize()
        
        data = {
            "chat_id": chat_id,
            "text": text,
            **kwargs
        }
        
        try:
            async with self.session.post(f"{self.base_url}/sendMessage", json=data) as response:
                result = await response.json()
                
                if result.get("ok"):
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id} —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {self.channel_id}")
                    return {"success": True, "result": result["result"]}
                else:
                    error_msg = result.get("description", "Unknown error")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {error_msg}")
                    return {"success": False, "error": error_msg}
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {"success": False, "error": str(e)}
    
    async def send_buttons(self, chat_id: str, text: str, buttons: List[List[Dict[str, str]]], **kwargs) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            buttons: –ú–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ [[{"text": "–ö–Ω–æ–ø–∫–∞", "callback_data": "data"}]]
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º API –≤—ã–∑–æ–≤–∞
        """
        reply_markup = {
            "inline_keyboard": buttons
        }
        
        return await self.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            **kwargs
        )
    
    async def edit_message(self, chat_id: str, message_id: int, text: str, **kwargs) -> Dict[str, Any]:
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
            text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º API –≤—ã–∑–æ–≤–∞
        """
        await self.initialize()
        
        data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            **kwargs
        }
        
        try:
            async with self.session.post(f"{self.base_url}/editMessageText", json=data) as response:
                result = await response.json()
                
                if result.get("ok"):
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
                    return {"success": True, "result": result["result"]}
                else:
                    error_msg = result.get("description", "Unknown error")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {error_msg}")
                    return {"success": False, "error": error_msg}
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {"success": False, "error": str(e)}
    
    async def start_polling(self, update_handler=None):
        """
        –ó–∞–ø—É—Å–∫ polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        
        Args:
            update_handler: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        """
        if self.polling_task and not self.polling_task.done():
            logger.warning(f"‚ö†Ô∏è Polling —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {self.channel_id}")
            return
        
        self.polling_task = asyncio.create_task(self._polling_loop(update_handler))
        logger.info(f"üîÑ Polling –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {self.channel_id}")
    
    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling"""
        if self.polling_task and not self.polling_task.done():
            self.polling_task.cancel()
            try:
                await self.polling_task
            except asyncio.CancelledError:
                pass
            logger.info(f"‚èπÔ∏è Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {self.channel_id}")
    
    async def _polling_loop(self, update_handler):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª polling"""
        await self.initialize()
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                data = {
                    "offset": self.last_update_id + 1,
                    "timeout": 30,
                    "allowed_updates": ["message", "callback_query"]
                }
                
                async with self.session.post(f"{self.base_url}/getUpdates", json=data) as response:
                    result = await response.json()
                    
                    if result.get("ok"):
                        updates = result.get("result", [])
                        
                        for update in updates:
                            self.last_update_id = update["update_id"]
                            
                            if update_handler:
                                try:
                                    await update_handler(update, self.channel_id)
                                except Exception as e:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ update_handler: {e}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ getUpdates: {result.get('description')}")
                        await asyncio.sleep(5)
                        
            except asyncio.CancelledError:
                logger.info(f"üõë Polling –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {self.channel_id}")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ polling loop: {e}")
                await asyncio.sleep(5)
    
    async def get_me(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ
        """
        await self.initialize()
        
        try:
            async with self.session.get(f"{self.base_url}/getMe") as response:
                result = await response.json()
                
                if result.get("ok"):
                    return {"success": True, "result": result["result"]}
                else:
                    error_msg = result.get("description", "Unknown error")
                    return {"success": False, "error": error_msg}
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ getMe: {e}")
            return {"success": False, "error": str(e)}
    
    async def healthcheck(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –∫–∞–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            result = await self.get_me()
            if result.get("success"):
                logger.info(f"‚úÖ Healthcheck OK –¥–ª—è –∫–∞–Ω–∞–ª–∞ {self.channel_id}")
                return True
            else:
                logger.error(f"‚ùå Healthcheck FAIL –¥–ª—è –∫–∞–Ω–∞–ª–∞ {self.channel_id}: {result.get('error')}")
                return False
        except Exception as e:
            logger.error(f"‚ùå Healthcheck ERROR –¥–ª—è –∫–∞–Ω–∞–ª–∞ {self.channel_id}: {e}")
            return False 