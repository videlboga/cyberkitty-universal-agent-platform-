#!/usr/bin/env python3
"""
üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ô –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –ë–ò–¢–†–ò–ö–°24
–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
"""

import asyncio
import sys
import os
sys.path.append('.')

from kittycore.core.orchestrator import solve_with_orchestrator
from kittycore.core.agent_learning_system import AgentLearningSystem

async def attempt_bitrix_analysis(attempt_number: int):
    """–ü–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24"""
    
    print(f"\nüöÄ –ü–û–ü–´–¢–ö–ê #{attempt_number} - –ê–ù–ê–õ–ò–ó –ë–ò–¢–†–ò–ö–°24")
    print("=" * 60)
    
    # –ó–∞–¥–∞—á–∞ —Å —É—á—ë—Ç–æ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π
    task = f"""
    –ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å –†–ï–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ë–∏—Ç—Ä–∏–∫—Å24 (–ø–æ–ø—ã—Ç–∫–∞ #{attempt_number})

    –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
    1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å web_search –¥–ª—è –ø–æ–∏—Å–∫–∞ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö –æ –ë–∏—Ç—Ä–∏–∫—Å24 –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
    2. –ù–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ù–ï —à–∞–±–ª–æ–Ω—ã!)
    3. –°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ HTML –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã —Å JavaScript
    4. –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
    
    –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–õ–ñ–ï–ù –°–û–î–ï–†–ñ–ê–¢–¨:
    - –°–ø–∏—Å–æ–∫ –∏–∑ 15 –†–ï–ê–õ–¨–ù–´–• –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    - –ê–Ω–∞–ª–∏–∑ 5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ –∏—Ö UX –ø—Ä–æ–±–ª–µ–º
    - 3 HTML –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ —Å —Ä–∞–±–æ—á–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    - Markdown –æ—Ç—á—ë—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
    
    –ò–ó–ë–ï–ì–ê–¢–¨:
    - –®–∞–±–ª–æ–Ω–Ω—ã—Ö HTML —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    - –û–±—â–∏—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫"
    - –ü—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤ –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    
    –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
    - web_search –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ë–∏—Ç—Ä–∏–∫—Å24
    - code_generator –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤
    - file_manager –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    
    result = await solve_with_orchestrator(task)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–ü–´–¢–ö–ò #{attempt_number}:")
    print(f"‚úÖ –£—Å–ø–µ—Ö: {result.get('success', False)}")
    print(f"üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(result.get('generated_files', []))}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    quality_score = await analyze_result_quality(attempt_number)
    
    print(f"üéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_score:.1f}/5.0")
    
    if quality_score >= 4.0:
        print("üéâ –û–¢–õ–ò–ß–ù–û! –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω!")
        return True, quality_score
    else:
        print("‚ö†Ô∏è –ù—É–∂–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ, –∑–∞–ø—É—Å–∫–∞–µ–º –µ—â—ë —Ä–∞–∑...")
        return False, quality_score

async def analyze_result_quality(attempt_number: int) -> float:
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    files_to_check = [
        "—Ä—ã–Ω–æ–∫_–ø—Ä–æ–µ–∫—Ç–æ–≤.md",
        "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.md", 
        "–ø—Ä–æ—Ç–æ—Ç–∏–ø_1.html",
        "–ø—Ä–æ—Ç–æ—Ç–∏–ø_2.html",
        "–ø—Ä–æ—Ç–æ—Ç–∏–ø_3.html"
    ]
    
    total_score = 0
    files_found = 0
    
    for filename in files_to_check:
        if os.path.exists(filename):
            files_found += 1
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                score = 0
                
                # –ë–∞–∑–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (1 –±–∞–ª–ª)
                if len(content) > 500:
                    score += 1
                
                # –†–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (2 –±–∞–ª–ª–∞)
                if any(keyword in content.lower() for keyword in [
                    "–±–∏—Ç—Ä–∏–∫—Å24", "bitrix24", "crm", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", "api", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
                ]):
                    score += 2
                
                # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è HTML (1 –±–∞–ª–ª)
                if filename.endswith('.html') and any(keyword in content for keyword in [
                    "onclick", "function", "script", "input", "button"
                ]):
                    score += 1
                
                # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (1 –±–∞–ª–ª)
                if any(keyword in content.lower() for keyword in [
                    "—Ç—ã—Å. —Ä—É–±", "$", "–ø—Ä–æ—Ü–µ–Ω—Ç", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "—Å–∫–∞—á–∏–≤–∞–Ω–∏–π"
                ]):
                    score += 1
                
                total_score += min(score, 5)
                print(f"  üìÑ {filename}: {min(score, 5)}/5")
                
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename}: {e}")
    
    if files_found == 0:
        return 0.0
    
    return total_score / files_found

async def record_learning_after_attempt(attempt_number: int, success: bool, quality_score: float):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø—ã—Ç –æ–±—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏"""
    
    learning_system = AgentLearningSystem()
    
    if success:
        # –£—Å–ø–µ—à–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        lesson = await learning_system.record_learning(
            agent_id="bitrix_analyzer",
            task_description=f"–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24 - –ø–æ–ø—ã—Ç–∫–∞ {attempt_number}",
            attempt_number=attempt_number,
            score_before=max(0, quality_score - 1),
            score_after=quality_score,
            error_patterns=[],
            successful_actions=[
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª web_search –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                "–°–æ–∑–¥–∞–ª —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã",
                "–î–æ–±–∞–≤–∏–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ —Ü–∏—Ñ—Ä—ã"
            ],
            failed_actions=[],
            feedback_received=f"–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –û—Ü–µ–Ω–∫–∞ {quality_score}/5.0",
            tools_used=["web_search", "code_generator", "file_manager"]
        )
    else:
        # –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        lesson = await learning_system.record_learning(
            agent_id="bitrix_analyzer", 
            task_description=f"–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24 - –ø–æ–ø—ã—Ç–∫–∞ {attempt_number}",
            attempt_number=attempt_number,
            score_before=0,
            score_after=quality_score,
            error_patterns=[
                "–í—Å—ë –µ—â—ë —Å–æ–∑–¥–∞—ë—Ç —à–∞–±–ª–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            ],
            successful_actions=["–°–æ–∑–¥–∞–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤"],
            failed_actions=["–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª web_search —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ"],
            feedback_received=f"–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û—Ü–µ–Ω–∫–∞ {quality_score}/5.0",
            tools_used=["code_generator", "file_manager"]
        )
    
    print(f"üìö –£—Ä–æ–∫ –∑–∞–ø–∏—Å–∞–Ω: {lesson}")

async def main():
    print("üéØ –ò–¢–ï–†–ê–¢–ò–í–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê –ë–ò–¢–†–ò–ö–°24")
    print("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
    print("=" * 60)
    
    max_attempts = 5
    
    for attempt in range(1, max_attempts + 1):
        try:
            success, quality_score = await attempt_bitrix_analysis(attempt)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø—ã—Ç –æ–±—É—á–µ–Ω–∏—è
            await record_learning_after_attempt(attempt, success, quality_score)
            
            if success:
                print(f"\nüéâ –£–°–ü–ï–• –ù–ê –ü–û–ü–´–¢–ö–ï #{attempt}!")
                print(f"–ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.1f}/5.0")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                print(f"\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
                for filename in os.listdir('.'):
                    if any(name in filename for name in ['—Ä—ã–Ω–æ–∫', '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–ø—Ä–æ—Ç–æ—Ç–∏–ø', 'ux_–∞–Ω–∞–ª–∏–∑']):
                        size = os.path.getsize(filename)
                        print(f"  ‚Ä¢ {filename} ({size} –±–∞–π—Ç)")
                
                break
            else:
                print(f"\n‚è≥ –ü–æ–ø—ã—Ç–∫–∞ #{attempt} –Ω–µ—É–¥–∞—á–Ω–∞. –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–∞–µ—Ç—Å—è...")
                
                if attempt < max_attempts:
                    print(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ø—ã—Ç–∫—É #{attempt + 1} —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏...")
                    await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ #{attempt}: {e}")
            await asyncio.sleep(1)
    
    else:
        print(f"\nüòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        print("–ù–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–∫–æ–ø–∏–ª–∞ –æ–ø—ã—Ç –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤!")

if __name__ == "__main__":
    asyncio.run(main()) 