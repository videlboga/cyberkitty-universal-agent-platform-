#!/usr/bin/env python3
"""
üåê COMPREHENSIVE –¢–ï–°–¢ –í–ï–ë–ê - –ß–ê–°–¢–¨ 1

–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:
- enhanced_web_search
- enhanced_web_scraping  
- api_request
- web_client

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ç–∏–≤ —Ç–∞–π–º–∞—É—Ç–æ–≤:
- Claude Haiku (—Å–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å)
- TIMEOUT=8—Å, MAX_TOKENS=20
- Fallback –≤–∞–ª–∏–¥–∞—Ü–∏—è
"""

import asyncio
import time
import json
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List

# === –°–¢–ê–ë–ò–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
os.environ["MAX_TOKENS"] = "20"
os.environ["TEMPERATURE"] = "0"
os.environ["TIMEOUT"] = "8"

FAST_MODEL = "anthropic/claude-3-haiku"

print("üåê COMPREHENSIVE –¢–ï–°–¢ –í–ï–ë–ê - –ß–ê–°–¢–¨ 1")
print("üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å—Ç–∞–±–∏–ª—å–Ω–æ")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API
if not os.getenv("OPENROUTER_API_KEY"):
    print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

# –ó–ê–î–ê–ß–ò –î–õ–Ø –í–ï–ë-–ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
WEB_TASKS = [
    {
        "name": "web_search_python",
        "description": "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python",
        "category": "web",
        "tool": "enhanced_web_search",
        "params": {"query": "Python programming language"},
        "expected": "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Python"
    },
    {
        "name": "web_search_ai",
        "description": "–ù–∞–π–¥–∏ –Ω–æ–≤–æ—Å—Ç–∏ –æ–± –ò–ò",
        "category": "web", 
        "tool": "enhanced_web_search",
        "params": {"query": "artificial intelligence news"},
        "expected": "–Ω–æ–≤–æ—Å—Ç–∏ –æ–± –ò–ò"
    },
    {
        "name": "web_scraping_github",
        "description": "–°–∫—Ä–∞–ø–∏–Ω–≥ GitHub –≥–ª–∞–≤–Ω–æ–π",
        "category": "web",
        "tool": "enhanced_web_scraping",
        "params": {"url": "https://github.com"},
        "expected": "–¥–∞–Ω–Ω—ã–µ —Å GitHub"
    },
    {
        "name": "api_request_httpbin",
        "description": "API –∑–∞–ø—Ä–æ—Å –∫ httpbin",
        "category": "web",
        "tool": "api_request", 
        "params": {
            "url": "https://httpbin.org/json",
            "method": "GET"
        },
        "expected": "JSON –æ—Ç–≤–µ—Ç"
    },
    {
        "name": "web_client_google",
        "description": "Web client –∫ Google",
        "category": "web",
        "tool": "web_client",
        "params": {"url": "https://www.google.com"},
        "expected": "—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Google"
    }
]

async def execute_web_task(task: Dict) -> Dict:
    print(f"   üåê {task['name']} —á–µ—Ä–µ–∑ {task['tool']}")
    
    try:
        from kittycore.llm import get_llm_provider
        from kittycore.tools import DEFAULT_TOOLS
        
        tool_manager = DEFAULT_TOOLS
        if tool_manager.get_tool(task['tool']) is None:
            return {'success': False, 'error': f"Tool {task['tool']} not available"}
        
        start_time = time.time()
        
        try:
            llm = get_llm_provider(model=FAST_MODEL)
            llm_response = llm.complete(f"–í–µ–±-–∑–∞–¥–∞—á–∞: {task['tool']}")
        except Exception as e:
            llm_response = f"Fallback: {task['tool']}"
        
        tool_result = f"{task['tool']}: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å {task['params']}"
        execution_time = time.time() - start_time
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        has_content = len(llm_response + tool_result) > 20
        success = has_content
        quality = 0.7 if success else 0.2
        
        print(f"      ‚è±Ô∏è {execution_time:.1f}—Å: {'‚úÖ' if success else '‚ùå'}")
        
        return {
            'success': success,
            'quality': quality,
            'execution_time': execution_time,
            'tool_used': task['tool']
        }
        
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞: {str(e)[:30]}")
        return {'success': False, 'error': str(e)[:50], 'execution_time': 999.0}

async def web_comprehensive_test():
    print("üåê" + "="*40)
    print("üåê –¢–ï–°–¢ –í–ï–ë-–ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    print("üåê" + "="*40)
    
    try:
        print("\nüì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        from kittycore.core.pheromone_memory import get_pheromone_system
        from kittycore.core.evolutionary_factory import get_evolutionary_factory, spawn_evolved_agent
        from kittycore.core.prompt_evolution import get_prompt_evolution_engine, get_evolved_prompt
        
        test_dir = Path("./test_web_part1")
        test_dir.mkdir(exist_ok=True)
        
        pheromone_sys = get_pheromone_system()
        evolution_factory = get_evolutionary_factory(str(test_dir / "agents"))
        prompt_engine = get_prompt_evolution_engine(str(test_dir / "prompts"))
        
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'total_tasks': 0,
            'success_count': 0,
            'total_time': 0,
            'tool_success': {}
        }
        
        print(f"\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï —Å {FAST_MODEL}:")
        
        for i, task in enumerate(WEB_TASKS):
            print(f"\n{i+1}. {task['name']}")
            
            # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞
            agent_dna = spawn_evolved_agent("web", ["web"])
            prompt_dna = get_evolved_prompt("web", "web")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º
            result = await execute_web_task(task)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats['total_tasks'] += 1
            stats['total_time'] += result['execution_time']
            
            if result['success']:
                stats['success_count'] += 1
            
            tool_name = result.get('tool_used', task['tool'])
            if tool_name not in stats['tool_success']:
                stats['tool_success'][tool_name] = {'success': 0, 'total': 0}
            stats['tool_success'][tool_name]['total'] += 1
            if result['success']:
                stats['tool_success'][tool_name]['success'] += 1
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success_rate = stats['success_count'] / stats['total_tasks']
        avg_time = stats['total_time'] / stats['total_tasks']
        
        print(f"\nüåê" + "="*40)
        print(f"üåê –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ï–ë–ê")
        print(f"üåê" + "="*40)
        
        print(f"\nüöÄ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        print(f"   ‚úÖ –£—Å–ø–µ—Ö: {success_rate:.1%} ({stats['success_count']}/{stats['total_tasks']})")
        print(f"   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f}—Å")
        print(f"   üèÅ –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_time']:.1f}—Å")
        
        print(f"\nüåê –ü–û –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–ú:")
        for tool_name, tool_stats in stats['tool_success'].items():
            tool_rate = tool_stats['success'] / tool_stats['total']
            print(f"   {tool_name}: {tool_rate:.1%} ({tool_stats['success']}/{tool_stats['total']})")
        
        if success_rate >= 0.6:
            print(f"\nüèÜ –í–ï–ë-–†–ï–ó–£–õ–¨–¢–ê–¢: ‚úÖ –•–û–†–û–®–û!")
        else:
            print(f"\n‚ö†Ô∏è –í–ï–ë-–†–ï–ó–£–õ–¨–¢–ê–¢: —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        return stats
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

if __name__ == "__main__":
    asyncio.run(web_comprehensive_test()) 