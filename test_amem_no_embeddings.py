#!/usr/bin/env python3
"""
üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ A-MEM –ë–ï–ó EMBEDDING –ú–û–î–ï–õ–ï–ô
–ò—Å–ø–æ–ª—å–∑—É–µ–º ChromaDB —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –≤–µ–∫—Ç–æ—Ä–∞–º–∏ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
"""

import asyncio
import sys
import time
import json
import hashlib
from pathlib import Path
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

try:
    import chromadb
    print("‚úÖ ChromaDB –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
except ImportError:
    print("‚ùå ChromaDB –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sys.exit(1)

class SimpleVectorMemory:
    """–ü—Ä–æ—Å—Ç–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –ë–ï–ó embedding –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        self.client = chromadb.Client()
        
        # –°–æ–∑–¥–∞—ë–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ë–ï–ó embedding —Ñ—É–Ω–∫—Ü–∏–∏
        self.collection = self.client.create_collection(
            name="simple_vector_memory",
            get_or_create=True
        )
        print("‚úÖ –ü—Ä–æ—Å—Ç–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å —Å–æ–∑–¥–∞–Ω–∞")
    
    def _simple_embedding(self, text: str) -> List[float]:
        """–°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–π '—ç–º–±–µ–¥–¥–∏–Ω–≥' –∏–∑ —Ö–µ—à–∞ —Ç–µ–∫—Å—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º: –±–µ—Ä—ë–º —Ö–µ—à –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–∞
        hash_obj = hashlib.md5(text.lower().encode())
        hash_hex = hash_obj.hexdigest()
        
        # –°–æ–∑–¥–∞—ë–º –≤–µ–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ 128 –∏–∑ —Ö–µ—à–∞
        embedding = []
        for i in range(0, len(hash_hex), 2):
            hex_pair = hash_hex[i:i+2]
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ –æ—Ç -1 –¥–æ 1
            num = (int(hex_pair, 16) - 127.5) / 127.5
            embedding.append(num)
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ 128 –∏–∑–º–µ—Ä–µ–Ω–∏–π
        while len(embedding) < 128:
            embedding.append(0.0)
        
        return embedding[:128]
    
    async def add_memory(self, content: str, tags: List[str] = None, 
                        category: str = "general", **kwargs) -> str:
        """–î–æ–±–∞–≤–∏—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        memory_id = f"mem_{int(time.time() * 1000)}"
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–π —ç–º–±–µ–¥–¥–∏–Ω–≥
        embedding = self._simple_embedding(content)
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            "tags": json.dumps(tags or []),
            "category": category,
            "timestamp": time.time()
        }
        metadata.update(kwargs)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ ChromaDB
        self.collection.add(
            documents=[content],
            embeddings=[embedding],
            metadatas=[metadata],
            ids=[memory_id]
        )
        
        print(f"üìù –ü–∞–º—è—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {memory_id[:12]}...")
        return memory_id
    
    async def search_memory(self, query: str, limit: int = 5) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        # –°–æ–∑–¥–∞—ë–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
        query_embedding = self._simple_embedding(query)
        
        # –ü–æ–∏—Å–∫ –≤ ChromaDB
        results = self.collection.query(
            query_embeddings=[query_embedding],
            n_results=limit
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        memories = []
        for i, doc_id in enumerate(results['ids'][0]):
            metadata = results['metadatas'][0][i]
            memory = {
                'id': doc_id,
                'content': results['documents'][0][i],
                'tags': json.loads(metadata.get('tags', '[]')),
                'category': metadata.get('category', 'unknown'),
                'distance': results['distances'][0][i] if 'distances' in results else 0.0
            }
            memories.append(memory)
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(memories)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        return memories

async def test_simple_vector_memory():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ø–∞–º—è—Ç—å"""
    print("üöÄ –¢–ï–°–¢ –ü–†–û–°–¢–û–ô –í–ï–ö–¢–û–†–ù–û–ô –ü–ê–ú–Ø–¢–ò")
    start_time = time.time()
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞–º—è—Ç—å
    memory = SimpleVectorMemory()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
    memories_data = [
        ("–ò–∑—É—á–∞—é Python –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", ["python", "programming"], "learning"),
        ("–†–∞–±–æ—Ç–∞—é —Å Django –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–º", ["django", "web", "python"], "work"),
        ("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL", ["database", "postgresql"], "technical"),
        ("–°–æ–∑–¥–∞—é REST API —Å FastAPI", ["fastapi", "api", "python"], "development"),
        ("–¢–µ—Å—Ç–∏—Ä—É—é –∫–æ–¥ —Å pytest", ["testing", "pytest", "python"], "quality")
    ]
    
    print("\nüìù –î–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    for content, tags, category in memories_data:
        await memory.add_memory(content, tags, category)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫:")
    test_queries = [
        "python –≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
        "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
        "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞"
    ]
    
    for query in test_queries:
        print(f"\nüîé –ó–∞–ø—Ä–æ—Å: '{query}'")
        results = await memory.search_memory(query, limit=3)
        
        for i, result in enumerate(results[:3], 1):
            print(f"  {i}. {result['content']}")
            print(f"     üè∑Ô∏è –¢–µ–≥–∏: {result['tags']}")
            print(f"     üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {result['distance']:.3f}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    collection_count = memory.collection.count()
    total_time = time.time() - start_time
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  üìÑ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {collection_count}")
    print(f"  ‚è±Ô∏è –í—Ä–µ–º—è: {total_time:.2f}—Å")
    print(f"  üöÄ –ë–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π!")
    
    return True

async def test_amem_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å KittyCore"""
    print("\nüß† –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° KITTYCORE")
    
    try:
        from kittycore.memory.amem_integration import KittyCoreMemorySystem
        
        # –°–æ–∑–¥–∞—ë–º —Å–∏—Å—Ç–µ–º—É
        memory_system = KittyCoreMemorySystem(vault_path="test_simple_vault")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤
        agents_data = [
            ("backend_dev", "–ù–∞—Å—Ç—Ä–æ–∏–ª –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", {"task_type": "database"}),
            ("frontend_dev", "–°–æ–∑–¥–∞–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç React", {"task_type": "ui"}),
            ("qa_engineer", "–ù–∞–ø–∏—Å–∞–ª –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã", {"task_type": "testing"})
        ]
        
        print("üìù –ê–≥–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        for agent_id, memory_text, context in agents_data:
            memory_id = await memory_system.agent_remember(agent_id, memory_text, context)
            print(f"  ‚úÖ {agent_id}: {memory_id[:12]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        print("\nüîç –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫:")
        search_results = await memory_system.collective_search("–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        for result in search_results[:3]:
            print(f"  üìù {result['content']}")
            print(f"     ü§ñ –ê–≥–µ–Ω—Ç: {result.get('agent_id', 'unknown')}")
        
        print("‚úÖ KittyCore –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 70)
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ A-MEM –ë–ï–ó EMBEDDING –ú–û–î–ï–õ–ï–ô")
    print("=" * 70)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å
    success1 = await test_simple_vector_memory()
    
    # –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å KittyCore
    success2 = await test_amem_integration()
    
    print("\n" + "=" * 70)
    print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢:")
    print(f"  üîß –ü—Ä–æ—Å—Ç–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if success1 else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"  üß† KittyCore –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if success2 else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if success1 and success2:
        print("\nüéâ A-MEM –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï –ë–ï–ó EMBEDDING –ú–û–î–ï–õ–ï–ô!")
        print("üí° –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –≤–µ–∫—Ç–æ—Ä–∞–º–∏")
    else:
        print("\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

if __name__ == "__main__":
    asyncio.run(main()) 