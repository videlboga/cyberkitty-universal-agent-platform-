#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–´–ô E2E –¢–ï–°–¢ KITTYCORE 3.0
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ kittycore
sys.path.insert(0, str(Path(__file__).parent))

from kittycore.core.unified_orchestrator import UnifiedOrchestrator

async def test_real_task():
    """E2E —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ–π"""
    print('\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô E2E –¢–ï–°–¢ KITTYCORE 3.0')
    print('=' * 50)
    
    # –°–æ–∑–¥–∞—ë–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    from kittycore.core.unified_orchestrator import UnifiedConfig
    config = UnifiedConfig(vault_path='vault_integration_test')
    orchestrator = UnifiedOrchestrator(config)
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞
    task = '–°–æ–∑–¥–∞–π Python —Ñ–∞–π–ª calculator.py —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Å–ª–æ–∂–µ–Ω–∏—è, –≤—ã—á–∏—Ç–∞–Ω–∏—è, —É–º–Ω–æ–∂–µ–Ω–∏—è –∏ –¥–µ–ª–µ–Ω–∏—è'
    
    print(f'üìù –ó–∞–¥–∞—á–∞: {task}')
    print(f'‚è±Ô∏è –ó–∞–ø—É—Å–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...')
    print()
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
        result = await orchestrator.solve_task(task)
        
        print()
        print('‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–õ–£–ß–ï–ù!')
        print(f'üìä –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}')
        
        if hasattr(result, 'success'):
            print(f'üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result.success}')
        elif isinstance(result, dict) and 'success' in result:
            print(f'üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result["success"]}')
        
        if hasattr(result, 'quality_score'):
            print(f'‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {result.quality_score}')
        elif isinstance(result, dict) and 'quality_score' in result:
            print(f'‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {result["quality_score"]}')
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–ª–∏—Å—å –ª–∏ —Ñ–∞–π–ª—ã
        import os
        files = os.listdir('.')
        calculator_files = [f for f in files if 'calculator' in f.lower()]
        
        print(f'üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å "calculator": {calculator_files}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º outputs
        outputs_path = Path('outputs')
        if outputs_path.exists():
            output_files = list(outputs_path.glob('*calculator*'))
            print(f'üìÇ –§–∞–π–ª—ã –≤ outputs/: {[f.name for f in output_files]}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º vault
        vault_path = Path('vault_integration_test')
        if vault_path.exists():
            vault_files = []
            for subdir in ['results', 'agents', 'tasks']:
                if (vault_path / subdir).exists():
                    subdir_files = list((vault_path / subdir).glob('*'))
                    vault_files.extend([f"{subdir}/{f.name}" for f in subdir_files])
            print(f'üìã –§–∞–π–ª—ã –≤ vault: {vault_files}')
        
        success = (
            len(calculator_files) > 0 or 
            (outputs_path.exists() and len(list(outputs_path.glob('*calculator*'))) > 0) or
            (vault_path.exists() and len(vault_files) > 0)
        )
        
        print()
        print('üèÜ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:')
        if success:
            print('‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª—ã')
        else:
            print('‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å')
            
        return success
        
    except Exception as e:
        print(f'‚ùå –û–®–ò–ë–ö–ê: {e}')
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    result = asyncio.run(test_real_task())
    print(f'\nüéØ E2E –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù: {"–£–°–ü–ï–®–ù–û" if result else "–° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò"}') 