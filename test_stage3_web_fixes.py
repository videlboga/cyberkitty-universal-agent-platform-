#!/usr/bin/env python3
"""
üåê –≠–¢–ê–ü 3: –í–ï–ë-–ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

–ü–õ–ê–ù –≠–¢–ê–ü–ê 3:
- enhanced_web_search_tool: –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (max_results vs limit)
- enhanced_web_scraping_tool: –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
- –û—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: +2 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤—ã—Ö (1-2 –¥–Ω—è)

–ü–†–ò–ù–¶–ò–ü–´:
‚úÖ –†–ï–ê–õ–¨–ù–´–ï –≤–µ–±-–∑–∞–ø—Ä–æ—Å—ã
‚ùå –ù–ï–¢ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö URL
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API
‚úÖ –ó–∞–ø–∏—Å—å —Ä–∞–±–æ—á–∏—Ö –≤–µ–±-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –ø–∞–º—è—Ç—å
"""

import time
import json
import asyncio
import traceback
from pathlib import Path

# –ò–ú–ü–û–†–¢–´ –í–ï–ë-–ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
try:
    from kittycore.tools.enhanced_web_search_tool import EnhancedWebSearchTool
    IMPORT_WEB_SEARCH_OK = True
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ enhanced_web_search_tool: {e}")
    IMPORT_WEB_SEARCH_OK = False

try:
    from kittycore.tools.enhanced_web_scraping_tool import EnhancedWebScrapingTool
    IMPORT_WEB_SCRAPING_OK = True
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ enhanced_web_scraping_tool: {e}")
    IMPORT_WEB_SCRAPING_OK = False

class WebHonestTester:
    """–ß–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.results = []
        self.memory_records = []
        self.web_parameters_tested = []
    
    def test_web_tool_honest(self, tool_name, test_func):
        """–ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        print(f"\nüåê –¢–µ—Å—Ç–∏—Ä—É—é –≤–µ–± {tool_name}...")
        start_time = time.time()
        
        try:
            result = test_func()
            execution_time = time.time() - start_time
            
            # –ß–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            is_honest = self.is_web_result_honest(result, tool_name)
            
            test_result = {
                "tool": tool_name,
                "success": is_honest,
                "size_bytes": len(str(result)) if result else 0,
                "execution_time": round(execution_time, 2),
                "honest": is_honest,
                "result_sample": str(result)[:150] if result else "NO_DATA",
                "web_data": True
            }
            
            self.results.append(test_result)
            
            if is_honest:
                print(f"‚úÖ {tool_name}: {test_result['size_bytes']} –±–∞–π—Ç –∑–∞ {execution_time:.2f}—Å (–≤–µ–±)")
                self.record_working_web_params(tool_name, test_func.__name__)
            else:
                print(f"‚ùå {tool_name}: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
            return test_result
            
        except Exception as e:
            execution_time = time.time() - start_time
            error_msg = str(e)[:150]
            print(f"‚ùå {tool_name}: –í–ï–ë –û–®–ò–ë–ö–ê - {error_msg}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–µ–±-–æ—à–∏–±–æ–∫
            web_diagnostic = self.diagnose_web_error(e, tool_name)
            
            test_result = {
                "tool": tool_name,
                "success": False,
                "size_bytes": 0,
                "execution_time": round(execution_time, 2),
                "honest": False,
                "error": error_msg,
                "web_diagnostic": web_diagnostic
            }
            
            self.results.append(test_result)
            return test_result
    
    def diagnose_web_error(self, error, tool_name):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–µ–±-–æ—à–∏–±–æ–∫"""
        error_str = str(error).lower()
        
        if "unexpected keyword argument" in error_str:
            return f"PARAMETER_ERROR: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è {tool_name}"
        elif "max_results" in error_str:
            return f"MAX_RESULTS_ERROR: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å limit –≤–º–µ—Å—Ç–æ max_results"
        elif "connection" in error_str or "timeout" in error_str:
            return f"NETWORK_ERROR: –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é/—Ç–∞–π–º–∞—É—Ç"
        elif "api" in error_str or "key" in error_str:
            return f"API_ERROR: –ü—Ä–æ–±–ª–µ–º—ã —Å API –∫–ª—é—á–æ–º"
        else:
            return f"UNKNOWN_WEB: {error_str}"
    
    def is_web_result_honest(self, result, tool_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if not result:
            return False
        
        result_str = str(result)
        
        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤–µ–±-–ø–∞—Ç—Ç–µ—Ä–Ω—ã
        fake_patterns = [
            f"{tool_name}: –≤–µ–±-–ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω",
            "–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å —Å–∞–π—Ç–∞",
            "—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞",
            "–¥–µ–º–æ –≤–µ–±-–¥–∞–Ω–Ω—ã–µ",
            "–ø—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            "http://example.com",
            "https://fake-url.com"
        ]
        
        for pattern in fake_patterns:
            if pattern.lower() in result_str.lower():
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –≤–µ–±-–¥–∞–Ω–Ω—ã–µ
        real_indicators = [
            "http", "www.", ".com", ".org", ".net",
            "title", "content", "url", "snippet"
        ]
        
        has_real_data = any(indicator in result_str.lower() for indicator in real_indicators)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä + –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–µ–±-–¥–∞–Ω–Ω—ã—Ö
        return len(result_str) > 30 and has_real_data
    
    def record_working_web_params(self, tool_name, action_name):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞–±–æ—á–∏–µ –≤–µ–±-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø–∞–º—è—Ç—å"""
        memory_record = {
            "tool": tool_name,
            "working_action": action_name,
            "timestamp": time.time(),
            "status": "WEB_WORKING",
            "web_pattern": "real web requests success",
            "notes": f"Web test passed for {tool_name} with real data"
        }
        self.memory_records.append(memory_record)

def test_enhanced_web_search_limit():
    """–¢–µ—Å—Ç EnhancedWebSearchTool —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º limit"""
    if not IMPORT_WEB_SEARCH_OK:
        return "IMPORT_ERROR"
    
    tool = EnhancedWebSearchTool()
    
    # –†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º limit
    result = tool.execute(
        action="search",
        query="KittyCore –∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
        limit=3  # –ù–ï max_results!
    )
    
    return result

def test_enhanced_web_search_max_results():
    """–¢–µ—Å—Ç EnhancedWebSearchTool —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º max_results"""
    if not IMPORT_WEB_SEARCH_OK:
        return "IMPORT_ERROR"
    
    tool = EnhancedWebSearchTool()
    
    # –¢–µ—Å—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    try:
        result = tool.execute(
            action="search",
            query="Python programming",
            max_results=3  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç
        )
        return result
    except Exception as e:
        return f"EXPECTED_ERROR: {str(e)}"

def test_enhanced_web_scraping_real():
    """–¢–µ—Å—Ç EnhancedWebScrapingTool —Å —Ä–µ–∞–ª—å–Ω—ã–º URL"""
    if not IMPORT_WEB_SCRAPING_OK:
        return "IMPORT_ERROR"
    
    tool = EnhancedWebScrapingTool()
    
    # –†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º URL
    result = tool.execute(
        action="scrape_page",
        url="https://httpbin.org/html",
        extract_links=True,
        extract_text=True
    )
    
    return result

def test_enhanced_web_scraping_info():
    """–¢–µ—Å—Ç EnhancedWebScrapingTool –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    if not IMPORT_WEB_SCRAPING_OK:
        return "IMPORT_ERROR"
    
    tool = EnhancedWebScrapingTool()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
    result = tool.execute(
        action="get_scraping_options"
    )
    
    return result

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–∞–ø–∞ 3"""
    print("üåê –≠–¢–ê–ü 3: –í–ï–ë-–ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 50)
    
    tester = WebHonestTester()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    if IMPORT_WEB_SEARCH_OK:
        tester.test_web_tool_honest("web_search_limit", test_enhanced_web_search_limit)
        tester.test_web_tool_honest("web_search_max_results", test_enhanced_web_search_max_results)
    else:
        print("‚ùå enhanced_web_search_tool: –ò–ú–ü–û–†–¢ –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù")
    
    if IMPORT_WEB_SCRAPING_OK:
        tester.test_web_tool_honest("web_scraping_real", test_enhanced_web_scraping_real)
        tester.test_web_tool_honest("web_scraping_info", test_enhanced_web_scraping_info)
    else:
        print("‚ùå enhanced_web_scraping_tool: –ò–ú–ü–û–†–¢ –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–∞–ø–∞ 3
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–¢–ê–ü–ê 3:")
    
    total_tests = len(tester.results)
    honest_tests = sum(1 for r in tester.results if r["honest"])
    success_rate = (honest_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ –≤–µ–±-—Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ß–µ—Å—Ç–Ω—ã—Ö –≤–µ–±-—Ç–µ—Å—Ç–æ–≤: {honest_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    print("\nüéØ –î–ï–¢–ê–õ–ò:")
    for result in tester.results:
        status = "‚úÖ –ß–ï–°–¢–ù–´–ô" if result["honest"] else "‚ùå –ü–†–û–ë–õ–ï–ú–ê"
        web_info = " (–≤–µ–±)" if result.get("web_data") else ""
        print(f"{result['tool']}: {status} ({result['size_bytes']} –±–∞–π—Ç){web_info}")
        if "web_diagnostic" in result:
            print(f"   üîç –í–µ–±-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {result['web_diagnostic']}")
        elif result["honest"]:
            print(f"   üåê –û–±—Ä–∞–∑–µ—Ü: {result['result_sample'][:80]}...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("stage3_results.json", "w", encoding="utf-8") as f:
        json.dump({
            "stage": 3,
            "description": "Web tools parameter fixes",
            "results": tester.results,
            "memory_records": tester.memory_records,
            "summary": {
                "total_tests": total_tests,
                "honest_tests": honest_tests,
                "success_rate": success_rate,
                "web_tools_tested": 2
            }
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stage3_results.json")
    
    # –ü–æ–¥—Å—á—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    unique_web_tools = set()
    for result in tester.results:
        if result["honest"]:
            if "web_search" in result["tool"]:
                unique_web_tools.add("enhanced_web_search_tool")
            elif "web_scraping" in result["tool"]:
                unique_web_tools.add("enhanced_web_scraping_tool")
    
    new_honest_tools = len(unique_web_tools)
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏
    current_honest = 8  # –∏–∑ —ç—Ç–∞–ø–æ–≤ 1-2
    total_honest = current_honest + new_honest_tools
    total_target = 18
    
    print(f"\nüöÄ –ü–†–û–ì–†–ï–°–° –ö –¶–ï–õ–ò:")
    print(f"–ë—ã–ª–æ —á–µ—Å—Ç–Ω—ã—Ö: {current_honest}/18 (44.4%)")
    print(f"–°—Ç–∞–ª–æ —á–µ—Å—Ç–Ω—ã—Ö: {total_honest}/18 ({total_honest/total_target*100:.1f}%)")
    print(f"–£–ª—É—á—à–µ–Ω–∏–µ: +{new_honest_tools} –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    print(f"\nüîß –ê–ù–ê–õ–ò–ó –ü–ê–†–ê–ú–ï–¢–†–û–í:")
    working_params = []
    failing_params = []
    
    for result in tester.results:
        if result["honest"]:
            working_params.append(result["tool"])
        else:
            failing_params.append(result["tool"])
    
    if working_params:
        print(f"‚úÖ –†–∞–±–æ—á–∏–µ: {', '.join(working_params)}")
    if failing_params:
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ: {', '.join(failing_params)}")
    
    if success_rate >= 25:  # –•–æ—Ç—è –±—ã 1 –∏–∑ 4 —Ç–µ—Å—Ç–æ–≤
        print("\nüéâ –≠–¢–ê–ü 3 –£–°–ü–ï–®–ï–ù! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≠–¢–ê–ü–£ 4...")
        return True
    else:
        print("\n‚ö†Ô∏è –≠–¢–ê–ü 3 –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
        return False

if __name__ == "__main__":
    main() 