#!/usr/bin/env python3
"""
üß™ API –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Universal Agent Platform —á–µ—Ä–µ–∑ API —Å –ø–æ–¥–Ω—è—Ç—ã–º–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏.
–ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!
"""

import pytest
import requests
import json
import time
from typing import Dict, Any
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logger.add(
    "logs/api_tests.log",
    rotation="10 MB",
    retention="3 days", 
    compression="gz",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {name}:{function}:{line} | {message}",
    level="INFO"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_BASE_URL = "http://localhost:8080"
API_V1_URL = f"{API_BASE_URL}/api/v1/simple"

class TestAPIHealth:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
    
    def test_root_endpoint(self):
        """–¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ endpoint."""
        logger.info("üß™ –¢–µ—Å—Ç: –ö–æ—Ä–Ω–µ–≤–æ–π endpoint")
        
        response = requests.get(f"{API_BASE_URL}/")
        
        assert response.status_code == 200
        data = response.json()
        
        assert "platform" in data
        assert "Universal Agent Platform" in data["platform"]
        assert "version" in data
        assert "features" in data
        
        logger.info(f"‚úÖ –ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç: {data['platform']} v{data['version']}")
    
    def test_health_endpoint(self):
        """–¢–µ—Å—Ç health endpoint."""
        logger.info("üß™ –¢–µ—Å—Ç: Health endpoint")
        
        response = requests.get(f"{API_BASE_URL}/health")
        
        assert response.status_code == 200
        data = response.json()
        
        assert data["status"] == "healthy"
        assert "Universal Agent Platform" in data["platform"]
        
        logger.info("‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def test_api_health_endpoint(self):
        """–¢–µ—Å—Ç API health endpoint."""
        logger.info("üß™ –¢–µ—Å—Ç: API Health endpoint")
        
        response = requests.get(f"{API_V1_URL}/health")
        
        assert response.status_code == 200
        data = response.json()
        
        assert "engine" in data
        assert "plugins" in data
        
        logger.info(f"‚úÖ API Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(data['plugins'])} –ø–ª–∞–≥–∏–Ω–æ–≤")
    
    def test_api_info_endpoint(self):
        """–¢–µ—Å—Ç API info endpoint."""
        logger.info("üß™ –¢–µ—Å—Ç: API Info endpoint")
        
        response = requests.get(f"{API_V1_URL}/info")
        
        assert response.status_code == 200
        data = response.json()
        
        assert "handlers" in data
        assert "plugins" in data
        assert len(data["handlers"]) > 0
        
        logger.info(f"‚úÖ API Info endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(data['handlers'])} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")


class TestScenarioExecution:
    """–¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
    
    def test_execute_demo_scenario(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
        logger.info("üß™ –¢–µ—Å—Ç: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏—è")
        
        payload = {
            "user_id": "test_user_123",
            "chat_id": "test_chat_456", 
            "context": {
                "test_mode": True,
                "user_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            },
            "scenario_id": "demo"
        }
        
        response = requests.post(
            f"{API_V1_URL}/channels/demo/execute",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        assert response.status_code == 200
        data = response.json()
        
        assert data["success"] is True
        assert "scenario_id" in data
        assert "final_context" in data
        
        logger.info(f"‚úÖ –î–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω: {data['scenario_id']}")
    
    def test_execute_telegram_registration_scenario(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Telegram."""
        logger.info("üß™ –¢–µ—Å—Ç: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Telegram")
        
        payload = {
            "user_id": "telegram_user_789",
            "chat_id": "telegram_chat_101112",
            "context": {
                "test_mode": True,
                "user_name": "Telegram –¢–µ—Å—Ç–µ—Ä",
                "registration_started": True
            },
            "scenario_id": "telegram_registration"
        }
        
        response = requests.post(
            f"{API_V1_URL}/channels/telegram_test/execute",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        assert response.status_code == 200
        data = response.json()
        
        assert data["success"] is True
        assert "final_context" in data
        
        logger.info(f"‚úÖ Telegram —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {data['scenario_id']}")
    
    def test_execute_step_directly(self):
        """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞."""
        logger.info("üß™ –¢–µ—Å—Ç: –ü—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞")
        
        payload = {
            "step": {
                "id": "test_step",
                "type": "action",
                "params": {
                    "action": "log_message",
                    "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ API —Ç–µ—Å—Ç–∞"
                }
            },
            "context": {
                "test_mode": True,
                "api_test": True
            }
        }
        
        response = requests.post(
            f"{API_V1_URL}/execute",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        assert response.status_code == 200
        data = response.json()
        
        assert data["success"] is True
        assert "context" in data
        assert data["context"]["test_mode"] is True
        
        logger.info("‚úÖ –ü—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")


class TestMongoOperations:
    """–¢–µ—Å—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–π —Å MongoDB."""
    
    def test_mongo_save_scenario(self):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ MongoDB."""
        logger.info("üß™ –¢–µ—Å—Ç: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ MongoDB")
        
        test_scenario = {
            "scenario_id": "api_test_scenario",
            "name": "API Test Scenario",
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è API —Ç–µ—Å—Ç–æ–≤",
            "steps": [
                {
                    "id": "start",
                    "type": "start",
                    "next_step": "message"
                },
                {
                    "id": "message",
                    "type": "action",
                    "params": {
                        "action": "log_message",
                        "message": "API —Ç–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω"
                    },
                    "next_step": "end"
                },
                {
                    "id": "end",
                    "type": "end"
                }
            ]
        }
        
        payload = {
            "scenario_id": test_scenario["scenario_id"],
            "document": test_scenario
        }
        
        response = requests.post(
            f"{API_V1_URL}/mongo/save-scenario",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        # MongoDB –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if response.status_code == 200:
            data = response.json()
            assert data["success"] is True
            logger.info("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ MongoDB")
        else:
            logger.warning("‚ö†Ô∏è MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
    
    def test_mongo_find_scenarios(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ MongoDB."""
        logger.info("üß™ –¢–µ—Å—Ç: –ü–æ–∏—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ MongoDB")
        
        payload = {
            "collection": "scenarios",
            "filter": {}
        }
        
        response = requests.post(
            f"{API_V1_URL}/mongo/find",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        # MongoDB –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if response.status_code == 200:
            data = response.json()
            assert data["success"] is True
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ MongoDB: {len(data.get('data', []))}")
        else:
            logger.warning("‚ö†Ô∏è MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")


class TestErrorHandling:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    
    def test_invalid_channel_id(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ channel_id."""
        logger.info("üß™ –¢–µ—Å—Ç: –ù–µ–≤–µ—Ä–Ω—ã–π channel_id")
        
        payload = {
            "user_id": "test_user",
            "context": {}
        }
        
        response = requests.post(
            f"{API_V1_URL}/channels/nonexistent_channel/execute",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É 404
        assert response.status_code == 404
        
        data = response.json()
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in data["detail"]
        logger.info("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–µ—Ä–Ω—É–ª 404 –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ channel_id")
    
    def test_invalid_step_type(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ —à–∞–≥–∞."""
        logger.info("üß™ –¢–µ—Å—Ç: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —à–∞–≥–∞")
        
        payload = {
            "step": {
                "id": "invalid_step",
                "type": "nonexistent_step_type",
                "params": {}
            },
            "context": {}
        }
        
        response = requests.post(
            f"{API_V1_URL}/execute",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        assert response.status_code == 500
        data = response.json()
        assert data["success"] is False
        assert "error" in data
        
        logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ —à–∞–≥–∞")
    
    def test_malformed_request(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        logger.info("üß™ –¢–µ—Å—Ç: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON
        response = requests.post(
            f"{API_V1_URL}/execute",
            data="invalid json",
            headers={"Content-Type": "application/json"}
        )
        
        assert response.status_code == 422  # Validation error
        
        logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")


class TestPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    
    def test_concurrent_requests(self):
        """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
        logger.info("üß™ –¢–µ—Å—Ç: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        
        import concurrent.futures
        import threading
        
        def make_request(request_id: int) -> Dict[str, Any]:
            payload = {
                "user_id": f"concurrent_user_{request_id}",
                "chat_id": f"concurrent_chat_{request_id}",
                "context": {
                    "test_mode": True,
                    "request_id": request_id
                },
                "scenario_id": "demo"
            }
            
            start_time = time.time()
            response = requests.post(
                f"{API_V1_URL}/channels/demo/execute",
                json=payload,
                headers={"Content-Type": "application/json"}
            )
            end_time = time.time()
            
            return {
                "request_id": request_id,
                "status_code": response.status_code,
                "response_time": end_time - start_time,
                "success": response.status_code == 200
            }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            futures = [executor.submit(make_request, i) for i in range(5)]
            results = [future.result() for future in concurrent.futures.as_completed(futures)]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_requests = [r for r in results if r["success"]]
        avg_response_time = sum(r["response_time"] for r in successful_requests) / len(successful_requests)
        
        assert len(successful_requests) >= 4  # –ú–∏–Ω–∏–º—É–º 4 –∏–∑ 5 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
        assert avg_response_time < 5.0  # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
        
        logger.info(f"‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {len(successful_requests)}/5 —É—Å–ø–µ—à–Ω—ã—Ö, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_response_time:.2f}—Å")


@pytest.fixture(scope="session", autouse=True)
def setup_and_teardown():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º API —Ç–µ—Å—Ç—ã Universal Agent Platform")
    
    # –ñ–¥–µ–º, –ø–æ–∫–∞ API –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
    max_retries = 30
    for i in range(max_retries):
        try:
            response = requests.get(f"{API_BASE_URL}/health", timeout=5)
            if response.status_code == 200:
                logger.info("‚úÖ API –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
                break
        except requests.exceptions.RequestException:
            if i == max_retries - 1:
                pytest.fail("‚ùå API –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ—Å–ª–µ 30 –ø–æ–ø—ã—Ç–æ–∫")
            time.sleep(1)
    
    yield
    
    logger.info("üèÅ API —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    pytest.main([__file__, "-v", "--tb=short"]) 