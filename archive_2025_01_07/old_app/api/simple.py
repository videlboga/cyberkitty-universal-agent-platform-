"""
–ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è Universal Agent Platform.
–ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û! –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω endpoint.

–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π endpoint: POST /simple/channels/{channel_id}/execute
"""

import os
import asyncio
import json
from typing import Dict, Any, Optional, List
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel, Field
from loguru import logger
from datetime import datetime, timezone

from app.simple_dependencies import get_global_engine
from app.core.simple_engine import SimpleScenarioEngine
from app.core.scenario_logger import get_scenario_logger


def safe_serialize_context(context: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫.
    
    Args:
        context: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        Dict: –û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
    """
    def is_serializable(obj):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ–±—ä–µ–∫—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ JSON."""
        try:
            json.dumps(obj)
            return True
        except (TypeError, ValueError):
            return False
    
    safe_context = {}
    
    for key, value in context.items():
        if is_serializable(value):
            safe_context[key] = value
        else:
            # –î–ª—è –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            safe_context[key] = f"<non-serializable: {type(value).__name__}>"
    
    return safe_context


# === –°–•–ï–ú–´ –î–ê–ù–ù–´–• ===

class ExecuteRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –∫–∞–Ω–∞–ª–∞."""
    user_id: Optional[str] = Field(None, description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    chat_id: Optional[str] = Field(None, description="ID —á–∞—Ç–∞ –≤ Telegram")
    context: Optional[Dict[str, Any]] = Field(default_factory=dict, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    scenario_id: Optional[str] = Field(None, description="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    callback_data: Optional[str] = Field(None, description="–î–∞–Ω–Ω—ã–µ callback_query –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")


class ExecuteResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    success: bool = Field(description="–£—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π")
    scenario_id: str = Field(description="ID –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è")
    final_context: Dict[str, Any] = Field(description="–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    message: Optional[str] = Field(None, description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
    error: Optional[str] = Field(None, description="–û—à–∏–±–∫–∞, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞")


# === ROUTER ===

router = APIRouter(prefix="/simple", tags=["simple"])


# === –ó–ê–ì–†–£–ó–ö–ê –°–¶–ï–ù–ê–†–ò–ï–í ===

async def _load_scenario(channel_id: str, scenario_id: str = None) -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞.
    
    –ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏:
    1. MongoDB (–Ω–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏)
    2. YAML —Ñ–∞–π–ª—ã (scenarios/yaml/)
    3. –•–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (legacy)
    
    Args:
        channel_id: ID –∫–∞–Ω–∞–ª–∞
        scenario_id: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        Dict: –°—Ü–µ–Ω–∞—Ä–∏–π –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
        
    Raises:
        HTTPException: –ï—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ MongoDB
    try:
        engine = await get_global_engine()
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π scenario_id, –∏—â–µ–º –µ–≥–æ
        if scenario_id:
            step = {
                "id": "get_scenario",
                "type": "mongo_get_scenario",
                "params": {
                    "scenario_id": scenario_id,
                    "output_var": "scenario_result"
                }
            }
            context = {}
            result_context = await engine.execute_step(step, context)
            if result_context.get("scenario_result", {}).get("success"):
                return result_context["scenario_result"]["scenario"]
        
        # –ò–Ω–∞—á–µ –∏—â–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –∏ –µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–π
        step = {
            "id": "get_mapping",
            "type": "mongo_get_channel_mapping",
            "params": {
                "channel_id": channel_id,
                "output_var": "mapping_result"
            }
        }
        context = {}
        result_context = await engine.execute_step(step, context)
        
        if result_context.get("mapping_result", {}).get("success"):
            mapping = result_context["mapping_result"]["mapping"]
            mapping_scenario_id = mapping.get("scenario_id")
            
            if mapping_scenario_id:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
                scenario_step = {
                    "id": "get_scenario",
                    "type": "mongo_get_scenario_by_id",
                    "params": {
                        "scenario_id": mapping_scenario_id,
                        "output_var": "scenario_result"
                    }
                }
                scenario_context = {}
                scenario_result_context = await engine.execute_step(scenario_step, scenario_context)
                
                if scenario_result_context.get("scenario_result", {}).get("success"):
                    return scenario_result_context["scenario_result"]["scenario"]
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑ MongoDB: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ YAML —Ñ–∞–π–ª–∞—Ö
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ YAML —Ñ–∞–π–ª–æ–≤
    try:
        from app.core.yaml_scenario_loader import yaml_loader
        from pathlib import Path
        
        yaml_path = Path(f"scenarios/yaml/{scenario_id}.yaml")
        if yaml_path.exists():
            logger.info(f"üìÑ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ YAML: {yaml_path}")
            scenario = yaml_loader.load_from_file(str(yaml_path))
            return scenario
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YAML —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}: {e}")

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –æ—à–∏–±–∫–∞
    raise HTTPException(
        status_code=404, 
        detail=f"–°—Ü–µ–Ω–∞—Ä–∏–π '{scenario_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ MongoDB, –Ω–∏ –≤ YAML —Ñ–∞–π–ª–∞—Ö"
    )


async def _ensure_channel_ready(channel_id: str) -> bool:
    """
    –£–±–µ–∂–¥–∞–µ—Ç—Å—è —á—Ç–æ –∫–∞–Ω–∞–ª –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.
    
    –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞–Ω–∞–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ!
    
    Args:
        channel_id: ID –∫–∞–Ω–∞–ª–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –≥–æ—Ç–æ–≤
    """
    try:
        from app.simple_main import get_channel_manager
        channel_manager = get_channel_manager()
        
        if not channel_manager:
            logger.warning("ChannelManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∞–Ω–∞–ª –≤ –ø–∞–º—è—Ç–∏
        if channel_id not in channel_manager.channels:
            logger.info(f"üîÑ –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–≥—Ä—É–∂–∞—é...")
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª –∏–∑ –ë–î
            success = await channel_manager._load_specific_channel(channel_id)
            if not success:
                logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return False
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–∞–Ω–∞–ª –≥–æ—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫
        if not channel_manager.global_engine:
            logger.error("‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)
        channel_data = channel_manager.channels.get(channel_id)
        if channel_data and channel_data.get("channel_type") == "telegram":
            if channel_id not in channel_manager.polling_tasks:
                logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                await channel_manager._start_channel_polling(channel_id, channel_data)
        
        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–≤–∏–∂–∫–æ–º")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        return False


# === ENDPOINTS ===

@router.post("/channels/{channel_id}/execute", response_model=ExecuteResponse)
async def execute_channel_scenario(
    channel_id: str,
    request: ExecuteRequest,
    engine: SimpleScenarioEngine = Depends(get_global_engine)
):
    """
    –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô API ENDPOINT –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∫–∞–Ω–∞–ª–æ–≤.
    
    –ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!
    –û–¥–∏–Ω endpoint –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
    
    –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ë–ï–ó –∫–∞–Ω–∞–ª–∞ –≤ –ë–î –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω scenario_id!
    """
    try:
        logger.info(f"üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}", 
                   user_id=request.user_id, chat_id=request.chat_id, scenario_id=request.scenario_id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: scenario_id > –∫–∞–Ω–∞–ª)
        scenario = None
        
        if request.scenario_id:
            # –ü—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ scenario_id (–ë–ï–ó –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–∞–Ω–∞–ª—É)
            logger.info(f"üìÑ –ü—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è {request.scenario_id}")
            scenario = await _load_scenario_direct(request.scenario_id)
        else:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª (–Ω—É–∂–Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞)
            logger.info(f"üì° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª {channel_id}")
            channel_ready = await _ensure_channel_ready(channel_id)
            if not channel_ready:
                raise HTTPException(status_code=404, detail=f"–ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ scenario_id –Ω–µ —É–∫–∞–∑–∞–Ω")
            scenario = await _load_scenario(channel_id, None)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = {
            "channel_id": channel_id,
            "user_id": request.user_id,
            "chat_id": request.chat_id,
            "scenario_id": scenario["scenario_id"]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º callback_data –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if request.callback_data:
            context["callback_data"] = request.callback_data
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if request.context:
            context.update(request.context)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        final_context = await engine.execute_scenario(scenario, context)
        
        logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario['scenario_id']} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        safe_context = safe_serialize_context(final_context)
        
        return ExecuteResponse(
            success=True,
            scenario_id=scenario["scenario_id"],
            final_context=safe_context,
            message=f"–°—Ü–µ–Ω–∞—Ä–∏–π '{scenario['scenario_id']}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        )
        
    except HTTPException:
        # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –æ—à–∏–±–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
        raise
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        
        return ExecuteResponse(
            success=False,
            scenario_id=request.scenario_id or "unknown",
            final_context={},
            error=str(e)
        )


async def _load_scenario_direct(scenario_id: str) -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞–ø—Ä—è–º—É—é –ø–æ scenario_id.
    
    –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: —Ç–æ–ª—å–∫–æ scenario_id, –±–µ–∑ –∫–∞–Ω–∞–ª–∞!
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏:
    1. MongoDB (—Å—Ü–µ–Ω–∞—Ä–∏–∏)
    2. YAML —Ñ–∞–π–ª—ã (scenarios/yaml/)
    
    Args:
        scenario_id: ID —Å—Ü–µ–Ω–∞—Ä–∏—è
        
    Returns:
        Dict: –°—Ü–µ–Ω–∞—Ä–∏–π –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
        
    Raises:
        HTTPException: –ï—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    # 1. –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ MongoDB
    try:
        engine = await get_global_engine()
        
        step = {
            "id": "get_scenario",
            "type": "mongo_get_scenario",
            "params": {
                "scenario_id": scenario_id,
                "output_var": "scenario_result"
            }
        }
        context = {}
        result_context = await engine.execute_step(step, context)
        if result_context.get("scenario_result", {}).get("success"):
            logger.info(f"üìã –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ MongoDB")
            return result_context["scenario_result"]["scenario"]
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id} –∏–∑ MongoDB: {e}")
    
    # 2. –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ YAML —Ñ–∞–π–ª–æ–≤
    try:
        from app.core.yaml_scenario_loader import yaml_loader
        from pathlib import Path
        
        yaml_path = Path(f"scenarios/yaml/{scenario_id}.yaml")
        if yaml_path.exists():
            logger.info(f"üìÑ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ YAML: {yaml_path}")
            scenario = yaml_loader.load_from_file(str(yaml_path))
            return scenario
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YAML —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}: {e}")
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –æ—à–∏–±–∫–∞
    raise HTTPException(
        status_code=404, 
        detail=f"–°—Ü–µ–Ω–∞—Ä–∏–π '{scenario_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ MongoDB, –Ω–∏ –≤ YAML —Ñ–∞–π–ª–∞—Ö"
    )


@router.get("/health")
async def health_check(engine: SimpleScenarioEngine = Depends(get_global_engine)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
    try:
        is_healthy = await engine.healthcheck()
        
        if is_healthy:
            return {
                "status": "healthy",
                "registered_plugins": engine.get_registered_plugins(),
                "registered_handlers": engine.get_registered_handlers()
            }
        else:
            raise HTTPException(status_code=503, detail="Engine healthcheck failed")
            
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        raise HTTPException(status_code=503, detail=f"Health check failed: {e}")


@router.get("/info")
async def get_info(engine: SimpleScenarioEngine = Depends(get_global_engine)):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ."""
    return {
        "platform": "Universal Agent Platform - Simplified Architecture",
        "version": "2.0.0-simplified",
        "engine": "SimpleScenarioEngine",
        "registered_plugins": engine.get_registered_plugins(),
        "registered_handlers": engine.get_registered_handlers(),
        "principles": [
            "–ü—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ",
            "–û–¥–∏–Ω –¥–≤–∏–∂–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", 
            "–ú–∏–Ω–∏–º—É–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
            "–Ø–≤–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        ]
    }

# === MONGODB ENDPOINTS ===

class MongoRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è MongoDB –æ–ø–µ—Ä–∞—Ü–∏–π."""
    collection: str = Field(description="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    filter: Optional[Dict[str, Any]] = Field(default_factory=dict, description="–§–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞")
    document: Optional[Dict[str, Any]] = Field(None, description="–î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    scenario_id: Optional[str] = Field(None, description="ID —Å—Ü–µ–Ω–∞—Ä–∏—è")


class MongoResponse(BaseModel):
    """–û—Ç–≤–µ—Ç MongoDB –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    success: bool = Field(description="–£—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è")
    data: Optional[Any] = Field(None, description="–î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    error: Optional[str] = Field(None, description="–û—à–∏–±–∫–∞, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞")
    warnings: Optional[List[str]] = Field(None, description="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞")


@router.post("/mongo/find", response_model=MongoResponse)
async def mongo_find(
    request: MongoRequest,
    engine: SimpleScenarioEngine = Depends(get_global_engine)
):
    """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ MongoDB."""
    try:
        step = {
            "id": "find_docs",
            "type": "mongo_find_documents",
            "params": {
                "collection": request.collection,
                "filter": request.filter,
                "output_var": "find_result"
            }
        }
        context = {}
        result_context = await engine.execute_step(step, context)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π find_result
        result = result_context.get("find_result", {})
        
        return MongoResponse(
            success=result.get("success", False),
            data=result.get("documents", []),
            error=result.get("error"),
            warnings=result.get("warnings", [])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ mongo_find: {e}")
        return MongoResponse(success=False, error=str(e))


@router.post("/mongo/insert", response_model=MongoResponse)
async def mongo_insert(
    request: MongoRequest,
    engine: SimpleScenarioEngine = Depends(get_global_engine)
):
    """–í—Å—Ç–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ MongoDB."""
    try:
        step = {
            "id": "insert_doc",
            "type": "mongo_insert_document",
            "params": {
                "collection": request.collection,
                "document": request.document,
                "output_var": "insert_result"
            }
        }
        context = {}
        result_context = await engine.execute_step(step, context)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π insert_result
        result = result_context.get("insert_result", {})
        
        return MongoResponse(
            success=result.get("success", False),
            data=result.get("inserted_id"),
            error=result.get("error"),
            warnings=result.get("warnings", [])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ mongo_insert: {e}")
        return MongoResponse(success=False, error=str(e))


@router.post("/mongo/update", response_model=MongoResponse)
async def mongo_update(
    request: MongoRequest,
    engine: SimpleScenarioEngine = Depends(get_global_engine)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ MongoDB."""
    try:
        step = {
            "id": "update_doc",
            "type": "mongo_update_document",
            "params": {
                "collection": request.collection,
                "filter": request.filter,
                "update": request.document,
                "output_var": "update_result"
            }
        }
        context = {}
        result_context = await engine.execute_step(step, context)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π update_result
        result = result_context.get("update_result", {})
        
        return MongoResponse(
            success=result.get("success", False),
            data={
                "modified_count": result.get("modified_count", 0),
                "matched_count": result.get("matched_count", 0)
            },
            error=result.get("error"),
            warnings=result.get("warnings", [])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ mongo_update: {e}")
        return MongoResponse(success=False, error=str(e))


@router.post("/mongo/delete", response_model=MongoResponse)
async def mongo_delete(
    request: MongoRequest,
    engine: SimpleScenarioEngine = Depends(get_global_engine)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ MongoDB."""
    try:
        step = {
            "id": "delete_doc",
            "type": "mongo_delete_document",
            "params": {
                "collection": request.collection,
                "filter": request.filter,
                "output_var": "delete_result"
            }
        }
        context = {}
        result_context = await engine.execute_step(step, context)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π delete_result
        result = result_context.get("delete_result", {})
        
        return MongoResponse(
            success=result.get("success", False),
            data={"deleted_count": result.get("deleted_count", 0)},
            error=result.get("error"),
            warnings=result.get("warnings", [])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ mongo_delete: {e}")
        return MongoResponse(success=False, error=str(e))


@router.post("/mongo/save-scenario", response_model=MongoResponse)
async def mongo_save_scenario(
    request: MongoRequest,
    engine: SimpleScenarioEngine = Depends(get_global_engine)
):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ MongoDB –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
    try:
        if not request.document:
            raise ValueError("document —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
        scenario_data = request.document
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario_data.get('scenario_id', 'unknown')} –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        
        # –°–æ–∑–¥–∞–µ–º step –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        step = {
            "id": "save_scenario",
            "type": "mongo_save_scenario",
            "params": {
                "scenario": scenario_data
            }
        }
        context = {}
        result_context = await engine.execute_step(step, context)
        
        logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ, –µ—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏
        return MongoResponse(
            success=True,
            data={"scenario_id": scenario_data.get("scenario_id")},
            error=None,
            warnings=None
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ mongo_save_scenario: {e}")
        return MongoResponse(success=False, error=str(e))


# === EXECUTE ENDPOINT ===

class StepRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞."""
    step: Dict[str, Any] = Field(description="–î–∞–Ω–Ω—ã–µ —à–∞–≥–∞")
    context: Dict[str, Any] = Field(default_factory=dict, description="–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")


class StepResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞."""
    success: bool = Field(description="–£—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥")
    context: Dict[str, Any] = Field(description="–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    error: Optional[str] = Field(None, description="–û—à–∏–±–∫–∞, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞")


@router.post("/execute", response_model=StepResponse)
async def execute_step(
    request: StepRequest,
    engine: SimpleScenarioEngine = Depends(get_global_engine)
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    try:
        result_context = await engine.execute_step(request.step, request.context)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        safe_context = safe_serialize_context(result_context)
        
        return StepResponse(
            success=True,
            context=safe_context
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ execute_step: {e}")
        return StepResponse(
            success=False,
            context=request.context,
            error=str(e)
        )


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–ê–ú–ò ===

@router.post("/channels/{channel_id}/start")
async def start_channel(channel_id: str):
    """
    –Ø–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞–Ω–∞–ª.
    
    –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: execute endpoint —Ç–µ–ø–µ—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞–Ω–∞–ª—ã!
    –≠—Ç–æ—Ç endpoint –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.
    """
    try:
        logger.info(f"üì° –Ø–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        channel_ready = await _ensure_channel_ready(channel_id)
        
        if channel_ready:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            from app.simple_main import get_channel_manager
            channel_manager = get_channel_manager()
            channel_data = channel_manager.channels.get(channel_id, {})
            
            return {
                "success": True, 
                "message": f"–ö–∞–Ω–∞–ª {channel_id} –∑–∞–ø—É—â–µ–Ω",
                "channel_type": channel_data.get("channel_type"),
                "start_scenario_id": channel_data.get("start_scenario_id"),
                "auto_polling": channel_id in channel_manager.polling_tasks
            }
        else:
            return {"success": False, "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–Ω–∞–ª {channel_id}"}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        return {"success": False, "error": str(e)}

@router.post("/channels/{channel_id}/stop")
async def stop_channel(channel_id: str):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª."""
    try:
        from app.simple_main import get_channel_manager
        channel_manager = get_channel_manager()
        
        if not channel_manager:
            return {"success": False, "error": "ChannelManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        
        await channel_manager._stop_channel_polling(channel_id)
        
        return {"success": True, "message": f"–ö–∞–Ω–∞–ª {channel_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        return {"success": False, "error": str(e)}

@router.post("/channels/{channel_id}/restart")
async def restart_channel(channel_id: str):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª."""
    try:
        from app.simple_main import get_channel_manager
        channel_manager = get_channel_manager()
        
        if not channel_manager:
            return {"success": False, "error": "ChannelManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        await channel_manager._stop_channel_polling(channel_id)
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
        await channel_manager._load_specific_channel(channel_id)
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
        await channel_manager._create_channel_engine(channel_id)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
        channel_data = channel_manager.channels.get(channel_id)
        if channel_data:
            await channel_manager._start_channel_polling(channel_id, channel_data)
            return {
                "success": True, 
                "message": f"–ö–∞–Ω–∞–ª {channel_id} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω",
                "channel_type": channel_data.get("channel_type"),
                "start_scenario_id": channel_data.get("start_scenario_id")
            }
        else:
            return {"success": False, "error": f"–ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î"}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        return {"success": False, "error": str(e)}

@router.get("/channels")
async def list_channels():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤.
    
    Returns:
        Dict: –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏
    """
    try:
        from app.simple_main import get_channel_manager
        channel_manager = get_channel_manager()
        
        if not channel_manager:
            return {"success": False, "error": "ChannelManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        
        channels_info = []
        for channel_id, channel_data in channel_manager.channels.items():
            channels_info.append({
                "channel_id": channel_id,
                "type": channel_data.get("channel_type", "unknown"),
                "status": "active" if channel_id in channel_manager.active_channels else "inactive",
                "description": channel_data.get("description", ""),
                "config": channel_data.get("config", {})
            })
        
        return {
            "success": True,
            "channels": channels_info,
            "total": len(channels_info)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return {"success": False, "error": str(e)}

@router.post("/channels/reload")
async def reload_channels():
    """
    –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    """
    try:
        from app.simple_main import get_channel_manager
        channel_manager = get_channel_manager()
        
        if not channel_manager:
            return {"success": False, "error": "ChannelManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–∞–Ω–∞–ª–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        stopped_channels = []
        for channel_id in list(channel_manager.active_channels.keys()):
            try:
                await channel_manager.stop_channel(channel_id)
                stopped_channels.append(channel_id)
                logger.info(f"‚èπÔ∏è –ö–∞–Ω–∞–ª {channel_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –∫–∞–Ω–∞–ª–æ–≤
        channel_manager.channels.clear()
        channel_manager.active_channels.clear()
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î
        await channel_manager._load_channels_from_db()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        started_channels = []
        for channel_id, channel_data in channel_manager.channels.items():
            try:
                await channel_manager._start_channel_polling(channel_id, channel_data)
                started_channels.append(channel_id)
                logger.info(f"üöÄ –ö–∞–Ω–∞–ª {channel_id} –∑–∞–ø—É—â–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        
        logger.info(f"‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {len(stopped_channels)}, –ó–∞–ø—É—â–µ–Ω–æ: {len(started_channels)}")
        
        return {
            "success": True,
            "message": "–ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã",
            "stopped_channels": stopped_channels,
            "started_channels": started_channels,
            "total_channels": len(channel_manager.channels)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return {"success": False, "error": str(e)}

@router.post("/channels/{channel_id}/reload")
async def reload_specific_channel(channel_id: str):
    """
    –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        channel_id: ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–∞
    """
    try:
        from app.simple_main import get_channel_manager
        channel_manager = get_channel_manager()
        
        if not channel_manager:
            return {"success": False, "error": "ChannelManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–∞–Ω–∞–ª–∞ {channel_id}...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        if channel_id in channel_manager.active_channels:
            try:
                await channel_manager.stop_channel(channel_id)
                logger.info(f"‚èπÔ∏è –ö–∞–Ω–∞–ª {channel_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
        if channel_id in channel_manager.channels:
            del channel_manager.channels[channel_id]
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª –∏–∑ –ë–î
        success = await channel_manager._load_specific_channel(channel_id)
        
        if not success:
            return {
                "success": False, 
                "error": f"–ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª
        channel_data = channel_manager.channels.get(channel_id)
        if channel_data:
            try:
                await channel_manager._start_channel_polling(channel_id, channel_data)
                logger.info(f"üöÄ –ö–∞–Ω–∞–ª {channel_id} –∑–∞–ø—É—â–µ–Ω")
                
                return {
                    "success": True,
                    "message": f"–ö–∞–Ω–∞–ª {channel_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω",
                    "channel_data": {
                        "channel_id": channel_id,
                        "type": channel_data.get("channel_type", "unknown"),
                        "status": "active",
                        "description": channel_data.get("description", "")
                    }
                }
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
                return {
                    "success": False,
                    "error": f"–ö–∞–Ω–∞–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: {str(e)}"
                }
        else:
            return {
                "success": False,
                "error": f"–ö–∞–Ω–∞–ª {channel_id} –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        return {"success": False, "error": str(e)}

@router.post("/api/v1/simple/amocrm/setup")
async def setup_amocrm_plugin(
    settings_data: Dict[str, Any]
) -> Dict[str, Any]:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AmoCRM –ø–ª–∞–≥–∏–Ω–∞.
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
    1. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ MongoDB
    2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–≥–∏–Ω
    3. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π
    4. –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    
    Payload:
    {
        "domain": "example.amocrm.ru",
        "client_id": "your_client_id", 
        "client_secret": "your_client_secret",
        "redirect_uri": "your_redirect_uri",
        "access_token": "your_access_token",
        "refresh_token": "your_refresh_token"
    }
    """
    try:
        # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["domain", "client_id", "client_secret", "access_token"]
        missing_fields = [field for field in required_fields if not settings_data.get(field)]
        
        if missing_fields:
            return {
                "success": False,
                "error": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}"
            }
        
        # 2. –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
        engine = await get_global_engine()
        
        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ MongoDB
        save_settings_step = {
            "id": "save_amocrm_settings",
            "type": "mongo_upsert_document",
            "params": {
                "collection": "plugin_settings",
                "filter": {"plugin_name": "simple_amocrm"},
                "document": {
                    "plugin_name": "simple_amocrm",
                    "settings": settings_data,
                    "updated_at": datetime.now().isoformat(),
                    "enabled": True
                }
            }
        }
        
        context = {}
        await engine.execute_step(save_settings_step, context)
        
        # 4. –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–≥–∏–Ω–∞ –∏–∑ –¥–≤–∏–∂–∫–∞
        if "simple_amocrm" not in engine.plugins:
            return {
                "success": False,
                "error": "AmoCRM –ø–ª–∞–≥–∏–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –¥–≤–∏–∂–∫–µ"
            }
        
        amocrm_plugin = engine.plugins["simple_amocrm"]
        
        # 5. –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–≥–∏–Ω–∞
        await amocrm_plugin._ensure_fresh_settings()
        
        # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        healthcheck_result = await amocrm_plugin.healthcheck()
        
        if not healthcheck_result:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∏–∑ –ø–ª–∞–≥–∏–Ω–∞
            test_step = {
                "id": "test_connection",
                "type": "amocrm_get_account",
                "params": {}
            }
            
            test_context = {}
            try:
                await engine.execute_step(test_step, test_context)
                test_success = test_context.get("amocrm_get_account", {}).get("success", False)
                if not test_success:
                    return {
                        "success": False,
                        "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ AmoCRM. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                        "details": test_context.get("amocrm_get_account", {})
                    }
            except Exception as e:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
                }
        
        # 7. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
        field_mapping = {}
        entities = ["contacts", "leads", "companies"]
        
        for entity in entities:
            try:
                load_fields_step = {
                    "id": f"load_{entity}_fields",
                    "type": "amocrm_get_custom_fields",
                    "params": {
                        "entity_type": entity,
                        "output_var": f"{entity}_fields"
                    }
                }
                
                fields_context = {}
                await engine.execute_step(load_fields_step, fields_context)
                
                fields_result = fields_context.get(f"{entity}_fields", {})
                if fields_result.get("success"):
                    field_mapping[entity] = fields_result.get("data", [])
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—è –¥–ª—è {entity}: {fields_result.get('error')}")
                    field_mapping[entity] = []
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–µ–π –¥–ª—è {entity}: {e}")
                field_mapping[entity] = []
        
        # 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π –≤ MongoDB
        save_fields_step = {
            "id": "save_field_mapping",
            "type": "mongo_upsert_document", 
            "params": {
                "collection": "amocrm_field_mapping",
                "filter": {"domain": settings_data["domain"]},
                "document": {
                    "domain": settings_data["domain"],
                    "field_mapping": field_mapping,
                    "updated_at": datetime.now().isoformat()
                }
            }
        }
        
        await engine.execute_step(save_fields_step, context)
        
        # 9. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        final_healthcheck = await amocrm_plugin.healthcheck()
        
        return {
            "success": True,
            "message": "AmoCRM –ø–ª–∞–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
            "details": {
                "domain": settings_data["domain"],
                "healthcheck_passed": final_healthcheck,
                "field_mapping_loaded": len(field_mapping),
                "entities_mapped": list(field_mapping.keys()),
                "total_fields": sum(len(fields) for fields in field_mapping.values())
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM: {e}")
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM: {str(e)}"
        }

@router.get("/api/v1/simple/amocrm/status")
async def get_amocrm_status() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ AmoCRM –ø–ª–∞–≥–∏–Ω–∞.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    - –†–µ–∑—É–ª—å—Ç–∞—Ç healthcheck
    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –ø–æ–ª–µ–π
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
        engine = await get_global_engine()
        
        if "simple_amocrm" not in engine.plugins:
            return {
                "success": False,
                "error": "AmoCRM –ø–ª–∞–≥–∏–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
            }
        
        amocrm_plugin = engine.plugins["simple_amocrm"]
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ MongoDB
        get_settings_step = {
            "id": "get_amocrm_settings",
            "type": "mongo_find_one_document",
            "params": {
                "collection": "plugin_settings",
                "filter": {"plugin_name": "simple_amocrm"},
                "output_var": "settings_doc"
            }
        }
        
        context = {}
        await engine.execute_step(get_settings_step, context)
        
        settings_doc = context.get("settings_doc", {}).get("data")
        has_settings = bool(settings_doc)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º healthcheck
        healthcheck_result = await amocrm_plugin.healthcheck()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π
        get_fields_step = {
            "id": "get_field_mapping",
            "type": "mongo_find_one_document",
            "params": {
                "collection": "amocrm_field_mapping",
                "filter": {"domain": settings_doc.get("settings", {}).get("domain") if settings_doc else ""},
                "output_var": "fields_doc"
            }
        }
        
        await engine.execute_step(get_fields_step, context)
        
        fields_doc = context.get("fields_doc", {}).get("data")
        has_field_mapping = bool(fields_doc)
        
        field_stats = {}
        if fields_doc:
            field_mapping = fields_doc.get("field_mapping", {})
            field_stats = {
                entity: len(fields) 
                for entity, fields in field_mapping.items()
            }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        status = {
            "success": True,
            "plugin_registered": True,
            "has_settings": has_settings,
            "healthcheck_passed": healthcheck_result,
            "has_field_mapping": has_field_mapping,
            "domain": settings_doc.get("settings", {}).get("domain") if settings_doc else None,
            "settings_updated": settings_doc.get("updated_at") if settings_doc else None,
            "fields_updated": fields_doc.get("updated_at") if fields_doc else None,
            "field_stats": field_stats
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if not has_settings:
            recommendations.append("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ AmoCRM —á–µ—Ä–µ–∑ /api/v1/simple/amocrm/setup")
        elif not healthcheck_result:
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AmoCRM")
        elif not has_field_mapping:
            recommendations.append("–û–±–Ω–æ–≤–∏—Ç–µ –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ /api/v1/simple/amocrm/setup")
        
        status["recommendations"] = recommendations
        status["ready_for_use"] = has_settings and healthcheck_result and has_field_mapping
        
        return status
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ AmoCRM: {e}")
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        }

@router.get("/scenario-logs/active")
async def get_active_scenario_logs():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
    try:
        scenario_logger = get_scenario_logger()
        active_scenarios = scenario_logger.get_active_scenarios()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        result = []
        for scenario_log in active_scenarios:
            result.append({
                "execution_id": scenario_log.execution_id,
                "scenario_id": scenario_log.scenario_id,
                "user_id": scenario_log.user_id,
                "chat_id": scenario_log.chat_id,
                "channel_id": scenario_log.channel_id,
                "status": scenario_log.status,
                "started_at": scenario_log.started_at.isoformat(),
                "duration_ms": (datetime.now(timezone.utc) - scenario_log.started_at).total_seconds() * 1000,
                "total_steps": scenario_log.total_steps,
                "completed_steps": scenario_log.completed_steps,
                "current_step": scenario_log.steps[-1].step_id if scenario_log.steps else None
            })
        
        return {
            "success": True,
            "active_scenarios": result,
            "count": len(result)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–≥–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
        return {
            "success": False,
            "error": str(e),
            "active_scenarios": [],
            "count": 0
        }

@router.get("/scenario-logs/{execution_id}")
async def get_scenario_log_details(execution_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    try:
        scenario_logger = get_scenario_logger()
        status = scenario_logger.get_scenario_status(execution_id)
        
        if not status:
            return {
                "success": False,
                "error": f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {execution_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                "log": None
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ª–æ–≥ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        active_scenarios = scenario_logger.get_active_scenarios()
        scenario_log = None
        
        for log in active_scenarios:
            if log.execution_id == execution_id:
                scenario_log = log
                break
        
        if not scenario_log:
            return {
                "success": False,
                "error": f"–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {execution_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                "log": None
            }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        steps_data = []
        for step in scenario_log.steps:
            step_data = {
                "step_id": step.step_id,
                "step_type": step.step_type,
                "started_at": step.started_at.isoformat(),
                "finished_at": step.finished_at.isoformat() if step.finished_at else None,
                "duration_ms": step.duration_ms,
                "status": step.status,
                "error_message": step.error_message
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if step.step_params:
                step_data["params"] = step.step_params
            if step.context_changes:
                step_data["context_changes"] = step.context_changes
                
            steps_data.append(step_data)
        
        result = {
            "execution_id": scenario_log.execution_id,
            "scenario_id": scenario_log.scenario_id,
            "user_id": scenario_log.user_id,
            "chat_id": scenario_log.chat_id,
            "channel_id": scenario_log.channel_id,
            "status": scenario_log.status,
            "started_at": scenario_log.started_at.isoformat(),
            "finished_at": scenario_log.finished_at.isoformat() if scenario_log.finished_at else None,
            "duration_ms": scenario_log.duration_ms,
            "total_steps": scenario_log.total_steps,
            "completed_steps": scenario_log.completed_steps,
            "initial_context": scenario_log.initial_context,
            "final_context": scenario_log.final_context,
            "steps": steps_data,
            "performance_metrics": scenario_log.performance_metrics
        }
        
        return {
            "success": True,
            "log": result
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ª–æ–≥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        return {
            "success": False,
            "error": str(e),
            "log": None
        }

@router.get("/scenario-logs/history")
async def get_scenario_logs_history(
    limit: int = 50,
    scenario_id: Optional[str] = None,
    user_id: Optional[str] = None,
    engine: SimpleScenarioEngine = Depends(get_global_engine)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–∑ MongoDB."""
    try:
        mongo_plugin = engine.plugins.get("mongo")
        if not mongo_plugin:
            return {
                "success": False,
                "error": "MongoDB –ø–ª–∞–≥–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "logs": []
            }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä
        filter_query = {}
        if scenario_id:
            filter_query["scenario_id"] = scenario_id
        if user_id:
            filter_query["user_id"] = user_id
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–≥–∏ –∏–∑ MongoDB
        context = {
            "collection": "scenario_execution_logs",
            "filter": filter_query,
            "limit": limit,
            "sort": {"started_at": -1}  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–∞—Ç—ã
        }
        
        result = await mongo_plugin.find_documents(context)
        
        if result.get("success"):
            logs = result.get("documents", [])
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–≥–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            processed_logs = []
            for log in logs:
                processed_log = {
                    "execution_id": log.get("execution_id"),
                    "scenario_id": log.get("scenario_id"),
                    "user_id": log.get("user_id"),
                    "chat_id": log.get("chat_id"),
                    "channel_id": log.get("channel_id"),
                    "status": log.get("status"),
                    "started_at": log.get("started_at"),
                    "finished_at": log.get("finished_at"),
                    "duration_ms": log.get("duration_ms"),
                    "total_steps": log.get("total_steps"),
                    "completed_steps": log.get("completed_steps"),
                    "performance_metrics": log.get("performance_metrics", {})
                }
                processed_logs.append(processed_log)
            
            return {
                "success": True,
                "logs": processed_logs,
                "count": len(processed_logs),
                "filter": filter_query
            }
        else:
            return {
                "success": False,
                "error": result.get("error", "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ MongoDB"),
                "logs": []
            }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
        return {
            "success": False,
            "error": str(e),
            "logs": []
        } 