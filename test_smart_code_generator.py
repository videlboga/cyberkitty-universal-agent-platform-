#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ SMART CODE GENERATOR
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –Ω–æ–≤–æ–≥–æ —É–º–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞ –Ω–∞ –∑–∞–¥–∞—á–µ calculator.py
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ kittycore
sys.path.append('.')

from kittycore.tools.smart_code_generator import SmartCodeGenerator


async def test_calculator_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ SmartCodeGenerator"""
    
    print("üß™ –¢–ï–°–¢ SMART CODE GENERATOR")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = SmartCodeGenerator(agent_id="test_agent")
    
    # –ó–∞–¥–∞—á–∞ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
    task_description = "–°–æ–∑–¥–∞–π Python —Ñ–∞–π–ª calculator.py —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Å–ª–æ–∂–µ–Ω–∏—è, –≤—ã—á–∏—Ç–∞–Ω–∏—è, —É–º–Ω–æ–∂–µ–Ω–∏—è –∏ –¥–µ–ª–µ–Ω–∏—è"
    filename = "calculator_smart.py"
    
    print(f"üìù –ó–∞–¥–∞—á–∞: {task_description}")
    print(f"üìÅ –§–∞–π–ª: {filename}")
    print()
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        result = await generator.generate_python_script(task_description, filename)
        
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò:")
        print(f"‚úÖ –£—Å–ø–µ—Ö: {result.get('success', False)}")
        print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
        print(f"üìÅ –§–∞–π–ª: {result.get('filename', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"üìè –†–∞–∑–º–µ—Ä –∫–æ–¥–∞: {result.get('code_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üîß –§—É–Ω–∫—Ü–∏–π: {result.get('functions_count', 0)}")
        print(f"‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –≤–∞–ª–∏–¥–µ–Ω: {result.get('syntax_valid', False)}")
        print()
        
        if result.get('success'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            file_path = Path("outputs") / filename
            if file_path.exists():
                print("üìñ –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê:")
                print("-" * 30)
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                print(content)
                print("-" * 30)
                print()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                await analyze_generated_code(content, task_description)
            else:
                print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        return {"success": False, "error": str(e)}


async def analyze_generated_code(code: str, original_task: str):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê:")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    checks = {
        "has_add_function": "def add(" in code,
        "has_subtract_function": "def subtract(" in code,
        "has_multiply_function": "def multiply(" in code,
        "has_divide_function": "def divide(" in code,
        "has_main_function": "def main(" in code,
        "has_if_name_main": 'if __name__ == "__main__"' in code,
        "has_docstrings": '"""' in code or "'''" in code,
        "has_arithmetic_operations": any(op in code for op in ['+', '-', '*', '/']),
        "not_just_description": not any(word in code.lower() for word in ['–∑–∞–¥–∞—á–∞:', '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–º', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã']),
        "reasonable_length": len(code) > 200  # –ë–æ–ª—å—à–µ —á–µ–º –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ
    }
    
    # –ü–æ–¥—Å—á—ë—Ç –∫–∞—á–µ—Å—Ç–≤–∞
    passed = sum(checks.values())
    total = len(checks)
    quality_score = (passed / total) * 100
    
    print(f"üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê:")
    for check_name, passed in checks.items():
        status = "‚úÖ" if passed else "‚ùå"
        print(f"{status} {check_name}: {passed}")
    
    print()
    print(f"üéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {quality_score:.1f}/100")
    
    if quality_score >= 80:
        print("üèÜ –û–¢–õ–ò–ß–ù–û - –∫–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!")
    elif quality_score >= 60:
        print("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û - –µ—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∏—Ç—å")
    else:
        print("‚ùå –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    return quality_score


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    result = await test_calculator_generation()
    
    print("\nüèÅ –ò–¢–û–ì–ò –¢–ï–°–¢–ê:")
    print(f"‚úÖ SmartCodeGenerator —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.get('success', False)}")
    
    if result.get('success'):
        print(f"üöÄ SmartCodeGenerator –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏!")
    else:
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞: {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")


if __name__ == "__main__":
    asyncio.run(main()) 