#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ KittyCore 3.0
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞—ë—Ç –†–ï–ê–õ–¨–ù–´–ô –∫–æ–Ω—Ç–µ–Ω—Ç –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–µ–∫
"""

import asyncio
from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig

async def test_improved_prompts():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    print("üß™ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–´–• –ü–†–û–ú–ü–¢–û–í")
    print("=" * 50)
    
    config = UnifiedConfig()
    orchestrator = UnifiedOrchestrator(config)
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–∞
    print("üìã –¢–µ—Å—Ç: —Å–æ–∑–¥–∞–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ø-3 CRM —Å–∏—Å—Ç–µ–º")
    result = await orchestrator.solve_task('—Å–æ–∑–¥–∞–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ø-3 CRM —Å–∏—Å—Ç–µ–º —Å —Ü–µ–Ω–∞–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏')
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {result.get('final_result', {}).get('quality_score', 0):.2f}")
    print(f"üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(result.get('final_result', {}).get('created_files', []))}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    import os
    created_files = []
    for file_pattern in ['*.txt', '*.json', '*.py', '*.html']:
        import glob
        files = glob.glob(file_pattern)
        created_files.extend(files)
    
    print(f"\nüóÇÔ∏è  –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {created_files}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
    fake_indicators = [
        '–ø–µ—Ä–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–≤—Ç–æ—Ä–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '—Ç—Ä–µ—Ç—å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        'opis –ø–µ—Ä–≤–æ–≥–æ', 'opis –≤—Ç–æ—Ä–æ–≥–æ', '–ø–µ—Ä–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞', '–≤—Ç–æ—Ä–∞—è –ø—Ä–æ–±–ª–µ–º–∞'
    ]
    
    quality_indicators = [
        '–ë–∏—Ç—Ä–∏–∫—Å24', 'Salesforce', 'AmoCRM', 'HubSpot', 'Pipedrive',
        '—Ä—É–±/–º–µ—Å', '$/–º–µ—Å', '—Ä–µ–π—Ç–∏–Ω–≥', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', '—Ñ—É–Ω–∫—Ü–∏–∏'
    ]
    
    for file_path in created_files[-5:]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ñ–∞–π–ª–æ–≤
        if os.path.exists(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()[:200]  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏
                fake_count = sum(1 for indicator in fake_indicators if indicator in content)
                quality_count = sum(1 for indicator in quality_indicators if indicator in content)
                
                print(f"\nüìÑ {file_path}:")
                print(f"   –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   –ó–∞–≥–ª—É—à–∫–∏: {fake_count} –Ω–∞–π–¥–µ–Ω–æ")
                print(f"   –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {quality_count} –Ω–∞–π–¥–µ–Ω–æ")
                
                if fake_count > 0:
                    print(f"   ‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ó–ê–ì–õ–£–®–ö–ò!")
                elif quality_count > 0:
                    print(f"   ‚úÖ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –ö–û–ù–¢–ï–ù–¢!")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    asyncio.run(test_improved_prompts()) 