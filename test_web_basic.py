"""
–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ KittyCore 3.0
"""

import asyncio
import time
import requests
import json
from kittycore.web.server import WebServer, create_app
from kittycore.web.websocket_manager import websocket_manager

def test_web_interface():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KittyCore 3.0 Web Interface")
    print("=" * 50)
    
    # 1. –¢–µ—Å—Ç REST API
    print("\nüì° –¢–µ—Å—Ç REST API:")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        response = requests.get("http://localhost:8000/api/status", timeout=5)
        if response.status_code == 200:
            status_data = response.json()
            print(f"‚úÖ API —Å—Ç–∞—Ç—É—Å: {status_data['status']}")
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {status_data['active_connections']}")
            print(f"‚úÖ –í–µ—Ä—Å–∏—è: {status_data['version']}")
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
    
    # 2. –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    print("\nüè† –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
    try:
        response = requests.get("http://localhost:8000/", timeout=5)
        if response.status_code == 200:
            html = response.text
            if "KittyCore 3.0" in html:
                print("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
                print("‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ KittyCore 3.0")
            else:
                print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        else:
            print(f"‚ùå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
    
    # 3. –¢–µ—Å—Ç WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    print("\nüîå –¢–µ—Å—Ç WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    try:
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ WebSocket
        class MockWebSocket:
            def __init__(self, id_val):
                self.id = id_val
                self.messages = []
            
            async def accept(self):
                pass
            
            async def send_text(self, message):
                self.messages.append(message)
            
            def __hash__(self):
                return hash(self.id)
            
            def __eq__(self, other):
                return self.id == other.id
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        async def test_websocket_manager():
            manager = websocket_manager
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            mock_ws1 = MockWebSocket("test1")
            mock_ws2 = MockWebSocket("test2")
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            connected1 = await manager.connect(mock_ws1, "test_room")
            connected2 = await manager.connect(mock_ws2, "test_room")
            
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ 1: {connected1}")
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ 2: {connected2}")
            print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {manager.get_connection_count()}")
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ –∫–æ–º–Ω–∞—Ç–µ: {manager.get_connection_count('test_room')}")
            
            # –¢–µ—Å—Ç broadcast
            await manager.broadcast_to_room("test_room", {
                "type": "test_message",
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            })
            
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ mock_ws1: {len(mock_ws1.messages)}")
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ mock_ws2: {len(mock_ws2.messages)}")
            
            # –¢–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
            await manager.disconnect(mock_ws1)
            print(f"‚úÖ –ü–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {manager.get_connection_count()}")
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        asyncio.run(test_websocket_manager())
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
    
    # 4. –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ API
    print("\nüìã –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏:")
    try:
        task_data = {
            "prompt": "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª hello.txt",
            "options": {"test": True}
        }
        
        response = requests.post(
            "http://localhost:8000/api/task",
            json=task_data,
            timeout=5
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞: {result['status']}")
            print(f"‚úÖ Task ID: {result['task_id']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–¥–∞—á–∏: {e}")
    
    print("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("‚úÖ –ë–∞–∑–æ–≤—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    print("‚úÖ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
    print("‚úÖ REST API –æ—Ç–≤–µ—á–∞–µ—Ç")
    print("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
    print("\nüöÄ –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É —Ä–∞–∑–≤–∏—Ç–∏—è!")


if __name__ == "__main__":
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    time.sleep(3)
    
    test_web_interface() 