#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–ò–ó–£–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0 - –ß–ê–°–¢–¨ 1
–ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –Ω–∞–≥–ª—è–¥–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã)
"""

import sys
import asyncio
import time
import os
from pathlib import Path

sys.path.append('.')

async def test_part1_basic_tools_fixed():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏"""
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–ò–ó–£–ê–õ–¨–ù–´–ô –¢–ï–°–¢ - –ß–ê–°–¢–¨ 1")
    print("=" * 50)
    print("üìã –¢–ï–°–¢–ò–†–£–ï–ú: MediaTool, SuperSystemTool, APIRequest")
    print()
    
    # 1. MEDIA TOOL - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    print("üé® [1/3] MEDIA TOOL - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("-" * 40)
    
    try:
        from kittycore.tools.media_tool import MediaTool
        media_tool = MediaTool()
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_image_path = "/tmp/test_kittycore_image.png"
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL
        from PIL import Image, ImageDraw
        
        # –°–æ–∑–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 400x300 —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        img = Image.new('RGB', (400, 300), color='lightblue')
        draw = ImageDraw.Draw(img)
        
        # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∏–≥—É—Ä—ã
        draw.rectangle([50, 50, 150, 150], fill='red', outline='black', width=3)
        draw.ellipse([200, 50, 350, 200], fill='green', outline='blue', width=3)
        draw.text((50, 200), "KittyCore 3.0", fill='black')
        
        img.save(test_image_path)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image_path}")
        
        # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ (–ü–†–ê–í–ò–õ–¨–ù–´–ô –í–´–ó–û–í)
        result = media_tool.execute("analyze_file", file_path=test_image_path)
        
        if result.success:
            file_info = result.data.get("file_info", {})
            print(f"üìä –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø:")
            print(f"   –ò–º—è: {file_info.get('name', 'unknown')}")
            print(f"   –†–∞–∑–º–µ—Ä: {file_info.get('size_human', 'unknown')}")
            print(f"   –¢–∏–ø: {file_info.get('type', 'unknown')}")
            
            specific_info = result.data.get("specific_info", {})
            if specific_info:
                print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {specific_info.get('width', 0)}x{specific_info.get('height', 0)}")
                print(f"   –§–æ—Ä–º–∞—Ç: {specific_info.get('format', 'unknown')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.error}")
        
        # –¢–µ—Å—Ç 2: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        resized_path = "/tmp/test_kittycore_resized.png"
        result = media_tool.execute("resize_image", 
                                  file_path=test_image_path,
                                  output_path=resized_path,
                                  width=200, height=150)
        
        if result.success:
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ: {resized_path}")
            if os.path.exists(resized_path):
                size = os.path.getsize(resized_path)
                print(f"   –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size:,} –±–∞–π—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞: {result.error}")
        
        await asyncio.sleep(0.5)
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê MediaTool: {e}")
    
    print()
    
    # 2. SUPER SYSTEM TOOL - —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("üöÄ [2/3] SUPER SYSTEM TOOL - –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    print("-" * 40)
    
    try:
        from kittycore.tools.super_system_tool import SuperSystemTool
        system_tool = SuperSystemTool()
        
        # –¢–µ—Å—Ç 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ (–ü–†–ê–í–ò–õ–¨–ù–´–ô –í–´–ó–û–í)
        result = system_tool.execute("get_system_info")
        
        if result.success:
            info = result.data
            print(f"üíª –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï:")
            print(f"   –û–°: {info.get('platform', 'unknown')}")
            print(f"   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {info.get('architecture', 'unknown')}")
            print(f"   –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {info.get('processor', 'unknown')[:50]}...")
            
            memory = info.get('memory', {})
            if memory:
                total_gb = memory.get('total', 0) / (1024**3)
                available_gb = memory.get('available', 0) / (1024**3)
                print(f"   –ü–∞–º—è—Ç—å: {available_gb:.1f} –ì–ë –¥–æ—Å—Ç—É–ø–Ω–æ –∏–∑ {total_gb:.1f} –ì–ë")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {result.error}")
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        test_file_path = "/tmp/kittycore_system_test.txt"
        test_content = f"KittyCore 3.0 System Test\n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')}\n–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!"
        
        result = system_tool.execute("create_file", 
                                   file_path=test_file_path,
                                   content=test_content)
        
        if result.success:
            print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {test_file_path}")
            if os.path.exists(test_file_path):
                with open(test_file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤):")
                for line in content.split('\n')[:2]:
                    print(f"   > {line}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {result.error}")
        
        # –¢–µ—Å—Ç 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        result = system_tool.execute("execute_command", 
                                   command="echo 'KittyCore —Ç–µ—Å—Ç: $(date +%H:%M:%S)'")
        
        if result.success:
            output = result.data.get("stdout", "").strip()
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:")
            print(f"   –í—ã–≤–æ–¥: {output}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {result.error}")
        
        await asyncio.sleep(0.5)
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê SuperSystemTool: {e}")
    
    print()
    
    # 3. API REQUEST TOOL - –≤–µ–±-–∑–∞–ø—Ä–æ—Å—ã
    print("üåê [3/3] API REQUEST TOOL - –í–µ–±-–∑–∞–ø—Ä–æ—Å—ã")
    print("-" * 40)
    
    try:
        from kittycore.tools.api_request_tool import ApiRequestTool
        api_tool = ApiRequestTool()
        
        # –¢–µ—Å—Ç 1: GET –∑–∞–ø—Ä–æ—Å –∫ httpbin.org
        result = api_tool.execute("get", url="https://httpbin.org/json")
        
        if result.success:
            data = result.data
            print(f"‚úÖ GET –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω:")
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status_code', 'unknown')}")
            print(f"   –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(str(data.get('response', {})))} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            response_data = data.get("response", {})
            if isinstance(response_data, dict):
                keys = list(response_data.keys())[:3]
                print(f"   –ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞: {keys}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞: {result.error}")
        
        # –¢–µ—Å—Ç 2: POST –∑–∞–ø—Ä–æ—Å
        test_data = {
            "test": "KittyCore 3.0",
            "timestamp": str(int(time.time())),
            "message": "–¢–µ—Å—Ç POST –∑–∞–ø—Ä–æ—Å–∞"
        }
        
        result = api_tool.execute("post", 
                                url="https://httpbin.org/post",
                                json_data=test_data)
        
        if result.success:
            data = result.data
            print(f"‚úÖ POST –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω:")
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status_code', 'unknown')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            response = data.get("response", {})
            sent_json = response.get("json", {})
            if sent_json:
                print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_json.get('test', 'unknown')} –≤ {sent_json.get('timestamp', 'unknown')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞: {result.error}")
        
        await asyncio.sleep(0.5)
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê APIRequestTool: {e}")
    
    # –ò–¢–û–ì–ò –ß–ê–°–¢–ò 1
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –ß–ê–°–¢–ò 1 - –ë–ê–ó–û–í–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´")
    print("=" * 50)
    print("üé® MediaTool: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤")
    print("üöÄ SuperSystemTool: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏") 
    print("üåê ApiRequestTool: GET/POST –∑–∞–ø—Ä–æ—Å—ã –∏ –≤–µ–±-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    print()
    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print(f"   üì∏ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: /tmp/test_kittycore_image.png")
    print(f"   üì∏ –£–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: /tmp/test_kittycore_resized.png")
    print(f"   üìÑ –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ—Å—Ç-—Ñ–∞–π–ª: /tmp/kittycore_system_test.txt")
    print()
    print("üîÑ –ì–æ—Ç–æ–≤ –∫ —á–∞—Å—Ç–∏ 2 (–≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)...")

if __name__ == "__main__":
    asyncio.run(test_part1_basic_tools_fixed())
