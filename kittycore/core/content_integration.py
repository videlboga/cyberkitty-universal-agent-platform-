#!/usr/bin/env python3
"""
üéØ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ö–æ–Ω—Ç–µ–Ω—Ç + –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ KittyCore

–ó–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å –†–ï–ê–õ–¨–ù–´–ô –∫–æ–Ω—Ç–µ–Ω—Ç + –±–æ–≥–∞—Ç—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω–æ
"""

import json
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional

class ContentValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —Ñ–∞–π–ª—ã-–æ—Ç—á—ë—Ç—ã"""
    
    FORBIDDEN_PATTERNS = [
        "–ó–∞–¥–∞—á–∞:",
        "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã", 
        "–∞–≥–µ–Ω—Ç–æ–º",
        "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º",
        "## –†–µ–∑—É–ª—å—Ç–∞—Ç"
    ]
    
    def validate_content(self, content: str, task: str) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –æ—Ç—á—ë—Ç—ã"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–æ—Ç—á—ë—Ç—ã)
        forbidden_found = []
        for pattern in self.FORBIDDEN_PATTERNS:
            if pattern in content:
                forbidden_found.append(pattern)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–µ
        relevance_score = self._check_task_relevance(content, task)
        
        is_valid = len(forbidden_found) == 0 and relevance_score > 0.3
        
        return {
            "valid": is_valid,
            "score": 1.0 if is_valid else 0.0,
            "forbidden_found": forbidden_found,
            "relevance_score": relevance_score,
            "reason": "–í–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç" if is_valid else f"–ù–∞–π–¥–µ–Ω—ã –æ—Ç—á—ë—Ç—ã: {forbidden_found}"
        }
    
    def _check_task_relevance(self, content: str, task: str) -> float:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–¥–∞—á–µ"""
        task_lower = task.lower()
        content_lower = content.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–¥–∞—á–∏
        task_keywords = []
        
        if "hello world" in task_lower:
            task_keywords = ["hello", "world", "print"]
        elif "–∫–æ—Ç—è—Ç" in task_lower:
            task_keywords = ["–∫–æ—Ç", "–∫–æ—Ç—è—Ç", "cat"]
        elif "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü" in task_lower:
            task_keywords = ["—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü", "—Ñ–æ—Ä–º", "input"]
        elif "–ø–ª–æ—â–∞–¥" in task_lower:
            task_keywords = ["–ø–ª–æ—â–∞–¥", "—Ä–∞–¥–∏—É—Å", "œÄ", "math"]
        
        if not task_keywords:
            return 0.5
        
        matches = sum(1 for keyword in task_keywords if keyword in content_lower)
        return min(1.0, matches / len(task_keywords))

class ContentFixer:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    
    def fix_content(self, task: str, file_type: str = "auto") -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞—á–∏"""
        
        task_lower = task.lower()
        
        # Python —Ñ–∞–π–ª—ã
        if "hello world" in task_lower and ("python" in task_lower or file_type == "python"):
            return 'print("Hello, World!")'
        
        elif "–ø–ª–æ—â–∞–¥" in task_lower and "–∫—Ä—É–≥" in task_lower:
            return '''import math

radius = 5  # –º–µ—Ç—Ä–æ–≤
area = math.pi * radius ** 2
print(f"–ü–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Å —Ä–∞–¥–∏—É—Å–æ–º {radius}–º = {area:.2f} –∫–≤.–º")
# –†–µ–∑—É–ª—å—Ç–∞—Ç: 78.54 –∫–≤.–º'''
        
        # HTML —Ñ–∞–π–ª—ã
        elif "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü" in task_lower and ("html" in task_lower or "—Å—Ç—Ä–∞–Ω–∏—Ü" in task_lower):
            return '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        form { max-width: 400px; }
        input { width: 100%; padding: 10px; margin: 10px 0; }
        button { background: #007bff; color: white; padding: 12px 20px; border: none; }
    </style>
</head>
<body>
    <h1>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h1>
    <form>
        <input type="text" placeholder="–ò–º—è" required>
        <input type="email" placeholder="Email" required>
        <input type="password" placeholder="–ü–∞—Ä–æ–ª—å" required>
        <button type="submit">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
    </form>
</body>
</html>'''
        
        elif "–∫–æ—Ç—è—Ç" in task_lower and ("html" in task_lower or "—Å—Ç—Ä–∞–Ω–∏—Ü" in task_lower):
            return '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–ö–æ—Ç—è—Ç–∞</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; text-align: center; }
        .kitten { margin: 20px; padding: 20px; border: 2px solid #ff69b4; border-radius: 10px; }
    </style>
</head>
<body>
    <h1>üê± –ú–∏–ª—ã–µ –∫–æ—Ç—è—Ç–∞ üê±</h1>
    <div class="kitten">
        <h2>–ü—É—à–∏—Å—Ç–∏–∫</h2>
        <p>–°–∞–º—ã–π –º–∏–ª—ã–π –∫–æ—Ç—ë–Ω–æ–∫ –≤ –º–∏—Ä–µ!</p>
        <p>üêæ –õ—é–±–∏—Ç –∏–≥—Ä–∞—Ç—å —Å –º—è—á–∏–∫–æ–º</p>
    </div>
    <div class="kitten">
        <h2>–ú—É—Ä–∑–∏–∫</h2>
        <p>–û—á–µ–Ω—å –ª–∞—Å–∫–æ–≤—ã–π –∏ –¥–æ–±—Ä—ã–π</p>
        <p>üò∏ –û–±–æ–∂–∞–µ—Ç –º–æ–ª–æ–∫–æ –∏ —Ä—ã–±–∫—É</p>
    </div>
</body>
</html>'''
        
        # JSON —Ñ–∞–π–ª—ã
        elif "json" in task_lower and "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü" in task_lower:
            return '''{
    "server": {
        "host": "localhost",
        "port": 8080,
        "ssl": false
    },
    "database": {
        "host": "localhost",
        "port": 5432,
        "name": "webapp"
    },
    "logging": {
        "level": "INFO",
        "file": "server.log"
    }
}'''
        
        # –û–±—â–∏–π —Å–ª—É—á–∞–π
        else:
            return f"# –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏\n# {task}\n\nprint('–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')"

class EnhancedContentSystem:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    
    def __init__(self, output_dir: str = "./outputs"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        self.metadata_dir = self.output_dir / "metadata"
        self.metadata_dir.mkdir(exist_ok=True)
        
        self.validator = ContentValidator()
        self.fixer = ContentFixer()
    
    def create_validated_content(self, task: str, original_content: str, filename: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—ë—Ç –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç + –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"""
        
        print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è: {filename}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        validation = self.validator.validate_content(original_content, task)
        
        if validation["valid"]:
            # –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∞–ª–∏–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            final_content = original_content
            print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∞–ª–∏–¥–µ–Ω: {filename}")
        else:
            # –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
            print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç: {validation['reason']}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_type = self._detect_file_type(filename)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            final_content = self.fixer.fix_content(task, file_type)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            fixed_validation = self.validator.validate_content(final_content, task)
            validation["fixed"] = True
            validation["fixed_score"] = fixed_validation["score"]
            
            print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: {filename} (–æ—Ü–µ–Ω–∫–∞: {fixed_validation['score']:.2f})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content_path = self.output_dir / filename
        with open(content_path, 'w', encoding='utf-8') as f:
            f.write(final_content)
        
        # –°–æ–∑–¥–∞—ë–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            "task": task,
            "filename": filename,
            "content_size": len(final_content),
            "validation": validation,
            "created_at": datetime.now().isoformat(),
            "content_preview": final_content[:200] + ("..." if len(final_content) > 200 else "")
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata_path = self.metadata_dir / f"{filename}.meta.json"
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        
        # –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç
        report_content = self._generate_report(task, filename, final_content, validation)
        report_path = self.metadata_dir / f"{filename}.report.md"
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        return {
            "content_file": str(content_path),
            "metadata_file": str(metadata_path),
            "report_file": str(report_path),
            "validation": validation,
            "success": validation.get("fixed_score", validation["score"]) > 0.5
        }
    
    def _detect_file_type(self, filename: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
        extension = Path(filename).suffix.lower()
        
        type_map = {
            ".py": "python",
            ".html": "html",
            ".css": "css", 
            ".js": "javascript",
            ".json": "json",
            ".md": "markdown",
            ".txt": "text"
        }
        
        return type_map.get(extension, "text")
    
    def _generate_report(self, task: str, filename: str, content: str, validation: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞"""
        
        return f"""# üìä –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞

## üéØ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **–ó–∞–¥–∞—á–∞:** {task}
- **–§–∞–π–ª:** {filename}
- **–†–∞–∑–º–µ—Ä:** {len(content)} —Å–∏–º–≤–æ–ª–æ–≤
- **–°–æ–∑–¥–∞–Ω:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è
- **–í–∞–ª–∏–¥–Ω—ã–π:** {'–î–∞' if validation['valid'] else '–ù–µ—Ç'}
- **–û—Ü–µ–Ω–∫–∞:** {validation['score']:.2f}
- **–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:** {validation['relevance_score']:.2f}
{'- **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω:** –î–∞' if validation.get('fixed') else ''}
{'- **–û—Ü–µ–Ω–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:** ' + str(validation.get('fixed_score', 0)) if validation.get('fixed') else ''}

## üìã –ü—Ä–æ–±–ª–µ–º—ã
{validation['reason']}

## üíé –ü—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
```
{content[:300]}{'...' if len(content) > 300 else ''}
```

---
*–û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω KittyCore Content Integration System*
"""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–≥–µ–Ω—Ç—ã
def enhance_agent_with_content_system(agent_result: str, task: str, filename: str = None) -> Dict[str, Any]:
    """–£–ª—É—á—à–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≥–µ–Ω—Ç–∞ —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç+–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"""
    
    if not filename:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–¥–∞—á–∏
        task_lower = task.lower()
        if "hello_world" in task_lower or "hello world" in task_lower:
            filename = "hello_world.py"
        elif "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü" in task_lower:
            filename = "registration_form.html"
        elif "–∫–æ—Ç—è—Ç" in task_lower:
            filename = "kittens_page.html"
        elif "json" in task_lower:
            filename = "config.json"
        else:
            filename = "result.txt"
    
    # –°–æ–∑–¥–∞—ë–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    content_system = EnhancedContentSystem()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = content_system.create_validated_content(task, agent_result, filename)
    
    return result
