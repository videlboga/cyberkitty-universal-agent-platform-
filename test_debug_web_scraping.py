#!/usr/bin/env python3
"""
üêõ –û–¢–õ–ê–î–ö–ê: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ web_scraping_tool

–ü—Ä–æ–≤–µ—Ä—è–µ–º:
1. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç web_scraping
2. –°—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
3. –ü–æ—á–µ–º—É HTML —Ç–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
"""

import asyncio
import json

try:
    from kittycore.tools.enhanced_web_scraping_tool import EnhancedWebScrapingTool
    
    def sync_execute(async_tool, *args, **kwargs):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è async execute"""
        try:
            loop = asyncio.get_running_loop()
            import concurrent.futures
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(asyncio.run, async_tool.execute(*args, **kwargs))
                return future.result(timeout=30)
        except RuntimeError:
            return asyncio.run(async_tool.execute(*args, **kwargs))

    print("üêõ –û–¢–õ–ê–î–ö–ê ENHANCED_WEB_SCRAPING_TOOL")
    print("=" * 50)
    
    tool = EnhancedWebScrapingTool()
    result = sync_execute(tool, urls=["https://httpbin.org/html"])
    
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω: success={getattr(result, 'success', 'N/A')}")
    print(f"üìè –†–∞–∑–º–µ—Ä result.data: {len(str(result.data))} —Å–∏–º–≤–æ–ª–æ–≤")
    
    if hasattr(result, 'data') and result.data:
        print(f"\nüìã –°–¢–†–£–ö–¢–£–†–ê DATA:")
        data = result.data
        for key, value in data.items():
            if isinstance(value, list) and key == 'results':
                print(f"  {key}: —Å–ø–∏—Å–æ–∫ –∏–∑ {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                if value:
                    first_result = value[0]
                    print(f"    –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(first_result)}")
                    if isinstance(first_result, dict):
                        for subkey, subvalue in first_result.items():
                            if isinstance(subvalue, str):
                                length = len(subvalue)
                                preview = subvalue[:100] + "..." if length > 100 else subvalue
                                print(f"      {subkey}: '{preview}' ({length} —Å–∏–º–≤–æ–ª–æ–≤)")
                            else:
                                print(f"      {subkey}: {type(subvalue)} = {subvalue}")
            else:
                print(f"  {key}: {value}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if 'results' in data and data['results']:
            first_result = data['results'][0]
            if isinstance(first_result, dict):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ text_preview
                if 'text_preview' in first_result:
                    text_content = first_result['text_preview']
                    print(f"\nüîç –ê–ù–ê–õ–ò–ó TEXT_PREVIEW:")
                    print(f"  –†–∞–∑–º–µ—Ä: {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ü–æ–∏—Å–∫ HTML —Ç–µ–≥–æ–≤
                    html_tags = ['<html>', '<body>', '<h1>', '<title>', '<div>', '<p>']
                    found_tags = []
                    for tag in html_tags:
                        if tag.lower() in text_content.lower():
                            found_tags.append(tag)
                    
                    print(f"  –ù–∞–π–¥–µ–Ω–Ω—ã–µ HTML —Ç–µ–≥–∏: {found_tags}")
                    
                    # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    keywords = ['herman melville', 'moby dick', 'html', 'body']
                    found_keywords = []
                    for keyword in keywords:
                        if keyword.lower() in text_content.lower():
                            found_keywords.append(keyword)
                    
                    print(f"  –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    print(f"\nüìù –ù–ê–ß–ê–õ–û –ö–û–ù–¢–ï–ù–¢–ê (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):")
                    print(f"'{text_content[:300]}'")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–µ—Ü –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    if len(text_content) > 300:
                        print(f"\nüìù –ö–û–ù–ï–¶ –ö–û–ù–¢–ï–ù–¢–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
                        print(f"'{text_content[-100:]}'")
    
    else:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ result.data")
        if hasattr(result, 'error'):
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.error}")

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
except Exception as e:
    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc() 