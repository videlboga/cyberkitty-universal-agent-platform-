"""
SimplePDFPlugin - –ø–ª–∞–≥–∏–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∫–æ–¥–µ —Å Azure Aluminum —Å–µ—Ä–≤–µ—Ä–∞ (onto_mikro_v2)
"""

import tempfile
import os
import traceback
import markdown
from typing import Dict, Any, Optional
from loguru import logger

from app.core.base_plugin import BasePlugin


class SimplePDFPlugin(BasePlugin):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–≥–∏–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        super().__init__("simple_pdf")
        self.logo_path = None
        
    async def _do_initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
        try:
            # –ü—É—Ç—å –∫ –ª–æ–≥–æ—Ç–∏–ø—É
            self.logo_path = os.path.join(os.getcwd(), "assets", "logos", "onto_logo.png")
            
            if os.path.exists(self.logo_path):
                logger.info(f"‚úÖ PDF –ø–ª–∞–≥–∏–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º: {self.logo_path}")
            else:
                logger.warning(f"‚ö†Ô∏è –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.logo_path}")
                self.logo_path = None
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pdfkit
            try:
                import pdfkit
                logger.info("‚úÖ pdfkit –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF")
            except ImportError:
                logger.error("‚ùå pdfkit –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pdfkit")
                raise
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PDF –ø–ª–∞–≥–∏–Ω–∞: {e}")
            raise
    
    def register_handlers(self) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —à–∞–≥–æ–≤"""
        return {
            "pdf_generate": self._handle_generate_pdf,
            "pdf_generate_from_text": self._handle_generate_from_text,
        }
    
    async def healthcheck(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–ª–∞–≥–∏–Ω–∞"""
        try:
            import pdfkit
            return True
        except ImportError:
            return False
    
    async def _handle_generate_pdf(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF"""
        params = step_data.get("params", {})
        
        try:
            content = self._resolve_value(params.get("content", ""), context)
            title = self._resolve_value(params.get("title", "–î–æ–∫—É–º–µ–Ω—Ç"), context)
            output_var = params.get("output_var", "pdf_result")
            use_logo = params.get("use_logo", True)
            
            if not content:
                context[output_var] = {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è PDF"}
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
            logo_path = self.logo_path if use_logo else None
            pdf_path = self._generate_pdf_from_text(content, title, logo_path)
            
            if pdf_path:
                context[output_var] = {
                    "success": True,
                    "pdf_path": pdf_path,
                    "title": title,
                    "file_size": os.path.getsize(pdf_path) if os.path.exists(pdf_path) else 0
                }
                logger.info(f"‚úÖ PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {pdf_path}")
            else:
                context[output_var] = {"success": False, "error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF"}
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
            context["__step_error__"] = f"PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {str(e)}"
    
    async def _handle_generate_from_text(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        await self._handle_generate_pdf(step_data, context)
    
    def _generate_pdf_from_text(self, text: str, title: str = "–î–æ–∫—É–º–µ–Ω—Ç", logo_path: Optional[str] = None) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown –∏ –ª–æ–≥–æ—Ç–∏–ø–∞ —á–µ—Ä–µ–∑ pdfkit (HTML ‚Üí PDF).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ PDF –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
        
        –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∫–æ–¥–µ —Å Azure Aluminum —Å–µ—Ä–≤–µ—Ä–∞.
        """
        try:
            logger.info(f"üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF: title='{title}', text_length={len(text)}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Markdown –≤ HTML
            try:
                text_html = markdown.markdown(text or '', extensions=['extra', 'smarty'])
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ Markdown: {e}")
                text_html = text or ''
            
            # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ª–æ–≥–æ—Ç–∏–ø—É —á–µ—Ä–µ–∑ file://
            logo_html = ''
            if logo_path and os.path.exists(logo_path):
                abs_logo = os.path.abspath(logo_path)
                logo_html = f'<img src="file://{abs_logo}" class="logo" alt="–õ–æ–≥–æ—Ç–∏–ø" />'
                logger.info(f"üì∑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–≥–æ—Ç–∏–ø: {abs_logo}")
            else:
                logger.warning("‚ö†Ô∏è –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º —Å—Ç–∏–ª–µ–º (–∏–∑ Azure Aluminum)
            html = f"""
            <html>
            <head>
                <meta charset='utf-8'>
                <title>{title}</title>
                <style>
                    body {{
                        font-family: 'PT Serif', Georgia, serif;
                        font-size: 17pt;
                        color: #222;
                        line-height: 1.5;
                        margin: 20mm 15mm 20mm 15mm;
                    }}
                    h1, h2, h3, h4 {{
                        font-family: 'PT Sans', Arial, sans-serif;
                        font-weight: bold;
                        color: #4e54c8;
                        margin-top: 1.5em;
                        margin-bottom: 0.5em;
                    }}
                    h1 {{ font-size: 26pt; }}
                    h2 {{ font-size: 22pt; }}
                    h3 {{ font-size: 19pt; }}
                    h4 {{ font-size: 17pt; color: #333; }}
                    pre, code {{
                        font-family: 'PT Mono', 'DejaVu Sans Mono', monospace;
                        font-size: 15pt;
                        background: #f8f8f8;
                        padding: 0.5em;
                        border-radius: 4px;
                    }}
                    b, strong {{ color: #111; }}
                    hr {{ border: none; border-top: 1px solid #eee; margin: 2em 0; }}
                    .logo {{ display: block; margin: 0 auto 24px auto; max-width: 220px; }}
                    .section {{ margin-bottom: 2em; }}
                </style>
            </head>
            <body>
                {logo_html}
                <div class="section">
                    {text_html}
                </div>
            </body>
            </html>
            """
            
            logger.info(f"üìÑ HTML —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è PDF
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
                try:
                    import pdfkit
                    logger.info("üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —á–µ—Ä–µ–∑ pdfkit...")
                    
                    pdfkit.from_string(html, tmp.name, options={
                        'encoding': 'utf-8',
                        'quiet': '',
                        'page-size': 'A4',
                        'margin-top': '20mm',
                        'margin-bottom': '20mm',
                        'margin-left': '15mm',
                        'margin-right': '15mm',
                        'disable-smart-shrinking': '',
                        'enable-local-file-access': '',
                    })
                    
                    logger.info(f"‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {tmp.name}")
                    return tmp.name
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF —á–µ—Ä–µ–∑ pdfkit: {e}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
            return None
    
    def _resolve_value(self, value: Any, context: Dict[str, Any]) -> Any:
        """–ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if isinstance(value, str) and "{" in value and "}" in value:
            try:
                return value.format(**context)
            except (KeyError, ValueError) as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å '{value}': {e}")
                return value
        return value 