"""
üß† IntellectualAgent - –ê–≥–µ–Ω—Ç —Å LLM-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º

–ê–≥–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è:
- –ê–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –í—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
- –°–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- –ü—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã
"""

import asyncio
import json
from typing import Dict, Any, List
from ..tools.real_tools import REAL_TOOLS
from ..llm import get_llm_provider, LLMProvider

class IntellectualAgent:
    """üß† –ê–≥–µ–Ω—Ç —Å LLM-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º"""
    
    def __init__(self, role: str, subtask: Dict[str, Any]):
        self.role = role
        self.subtask = subtask
        self.tools = REAL_TOOLS
        self.llm = get_llm_provider()
        self.results = []
        
    async def execute_task(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª—å–∑—É—è LLM-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"""
        task_description = self.subtask.get("description", "")
        
        print(f"üß† {self.role} –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É: {task_description}")
        
        try:
            # –§–ê–ó–ê 1: LLM –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            analysis = await self._analyze_task_with_llm(task_description)
            
            # –§–ê–ó–ê 2: LLM —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_plan = await self._create_execution_plan(task_description, analysis)
            
            # –§–ê–ó–ê 3: –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            result = await self._execute_plan(execution_plan, task_description)
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ IntellectualAgent: {e}")
            return {
                "status": "failed",
                "error": str(e)
            }
    
    async def _analyze_task_with_llm(self, task_description: str) -> Dict[str, Any]:
        """LLM –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è LLM
        available_tools = {
            "file_manager": "–°–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤",
            "code_generator": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ HTML —Å—Ç—Ä–∞–Ω–∏—Ü",
            "web_client": "HTTP –∑–∞–ø—Ä–æ—Å—ã, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–∞–π—Ç–æ–≤",
            "system_tools": "–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥"
        }
        
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –∏ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

–ó–ê–î–ê–ß–ê: "{task_description}"

–î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
{json.dumps(available_tools, ensure_ascii=False, indent=2)}

–í–µ—Ä–Ω–∏ JSON –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "task_type": "creation/analysis/web_check/calculation/other",
    "intent": "—á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å",
    "chosen_tools": ["—Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"],
    "reasoning": "–ø–æ—á–µ–º—É –≤—ã–±—Ä–∞–Ω—ã –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
    "expected_outputs": ["—á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ/–ø–æ–ª—É—á–µ–Ω–æ"]
}}

–í–ê–ñ–ù–û: 
- –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "—Å–æ–∑–¥–∞–π —Å–∞–π—Ç/–≤–µ–±/html" - —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π "code_generator" –∏ "file_manager"
- –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "–ø—Ä–æ–≤–µ—Ä—å —Å–∞–π—Ç" - –∏—Å–ø–æ–ª—å–∑—É–π "web_client"  
- –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Ä–∞—Å—á–µ—Ç—ã/–∞–Ω–∞–ª–∏–∑ - —Å–æ–∑–¥–∞–≤–∞–π —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π "web_client" –¥–ª—è –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–∏—è!
"""
        
        try:
            response = self.llm.complete(prompt)
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            if "```json" in response:
                json_start = response.find("```json") + 7
                json_end = response.find("```", json_start)
                json_str = response[json_start:json_end].strip()
            else:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
                start = response.find("{")
                end = response.rfind("}") + 1
                json_str = response[start:end]
            
            analysis = json.loads(json_str)
            print(f"üéØ LLM –∞–Ω–∞–ª–∏–∑: {analysis['intent']}")
            print(f"üîß –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {analysis['chosen_tools']}")
            
            return analysis
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}")
            # Fallback –∞–Ω–∞–ª–∏–∑
            return self._fallback_analysis(task_description)
    
    def _fallback_analysis(self, task_description: str) -> Dict[str, Any]:
        """Fallback –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        task_lower = task_description.lower()
        
        if any(word in task_lower for word in ["—Å–∞–π—Ç", "html", "–≤–µ–±"]) and any(word in task_lower for word in ["—Å–æ–∑–¥–∞–π", "—Å–¥–µ–ª–∞–π"]):
            return {
                "task_type": "creation",
                "intent": "—Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞",
                "chosen_tools": ["code_generator", "file_manager"],
                "reasoning": "fallback: –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞",
                "expected_outputs": ["HTML —Ñ–∞–π–ª—ã"]
            }
        elif "–ø–ª–∞–Ω" in task_lower:
            return {
                "task_type": "creation", 
                "intent": "—Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞",
                "chosen_tools": ["file_manager"],
                "reasoning": "fallback: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞",
                "expected_outputs": ["—Ñ–∞–π–ª —Å –ø–ª–∞–Ω–æ–º"]
            }
        else:
            return {
                "task_type": "analysis",
                "intent": "–∞–Ω–∞–ª–∏–∑ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞",
                "chosen_tools": ["file_manager"],
                "reasoning": "fallback: –æ–±—â–∞—è –∑–∞–¥–∞—á–∞",
                "expected_outputs": ["–æ—Ç—á–µ—Ç"]
            }
    
    async def _create_execution_plan(self, task_description: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """LLM —Å–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        
        prompt = f"""
–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.

–ó–ê–î–ê–ß–ê: "{task_description}"
–ê–ù–ê–õ–ò–ó: {json.dumps(analysis, ensure_ascii=False)}

–°–æ–∑–¥–∞–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "steps": [
        {{
            "step": 1,
            "action": "—á—Ç–æ –¥–µ–ª–∞—Ç—å",
            "tool": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
            "params": {{
                "filename": "–∏–º—è —Ñ–∞–π–ª–∞",
                "content": "—á—Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª",
                "title": "–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
            }}
        }}
    ]
}}

–ü–†–ò–ú–ï–†–´:
- –î–ª—è —Å–∞–π—Ç–∞ —Å –∫–æ—Ç—è—Ç–∞–º–∏: —Å–æ–∑–¥–∞–π index.html —Å –∫–æ—Ç—è—á—å–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º + styles.css
- –î–ª—è –ø–ª–∞–Ω–∞: —Å–æ–∑–¥–∞–π –ø–ª–∞–Ω.txt —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏
- –î–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤: —Å–æ–∑–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.txt —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ —á–∏—Å–ª–∞–º–∏

–í–ê–ñ–ù–û: –§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –†–ï–õ–ï–í–ê–ù–¢–ù–´–ô –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç–µ–º–µ –∑–∞–¥–∞—á–∏!
"""
        
        try:
            response = self.llm.complete(prompt)
            
            # –ü–∞—Ä—Å–∏–º –ø–ª–∞–Ω
            if "```json" in response:
                json_start = response.find("```json") + 7
                json_end = response.find("```", json_start)
                json_str = response[json_start:json_end].strip()
            else:
                start = response.find("{")
                end = response.rfind("}") + 1
                json_str = response[start:end]
                
            plan = json.loads(json_str)
            return plan
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω: {e}")
            return self._create_simple_plan(task_description, analysis)
    
    def _create_simple_plan(self, task_description: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–æ–∑–¥–∞—ë–º –ë–û–ì–ê–¢–´–ô –∫–æ–Ω—Ç–µ–Ω—Ç!"""
        task_lower = task_description.lower()
        
        if analysis["task_type"] == "creation" and "—Å–∞–π—Ç" in task_lower:
            # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –≤–µ–±-—Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏
            html_content = """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üê± –ú–∏—Ä –∫–æ—Ç—è—Ç - –°–∞–º—ã–µ –º–∏–ª—ã–µ –ø–æ—Ä–æ–¥—ã –∫–æ—à–µ–∫</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Arial', sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        header { text-align: center; color: white; margin-bottom: 40px; }
        h1 { font-size: 3em; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
        .cats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 30px; }
        .cat-card { background: white; border-radius: 15px; padding: 25px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); transition: transform 0.3s; }
        .cat-card:hover { transform: translateY(-10px); }
        .cat-image { width: 100%; height: 200px; background: #f0f0f0; border-radius: 10px; display: flex; align-items: center; justify-content: center; font-size: 4em; margin-bottom: 15px; }
        h2 { color: #333; margin-bottom: 15px; }
        .description { color: #666; line-height: 1.6; margin-bottom: 15px; }
        .characteristics { background: #f8f9fa; padding: 15px; border-radius: 8px; }
        .char-item { margin-bottom: 8px; }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üê± –ú–∏—Ä –∫–æ—Ç—è—Ç</h1>
            <p>–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —Å–∞–º—ã–µ –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä–æ–¥—ã –∫–æ—à–µ–∫</p>
        </header>
        
        <div class="cats-grid">
            <div class="cat-card">
                <div class="cat-image">üê±</div>
                <h2>–ú–µ–π–Ω-–∫—É–Ω</h2>
                <div class="description">
                    –ú–µ–π–Ω-–∫—É–Ω ‚Äî –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –∫—Ä—É–ø–Ω—ã—Ö –ø–æ—Ä–æ–¥ –¥–æ–º–∞—à–Ω–∏—Ö –∫–æ—à–µ–∫. –≠—Ç–∏ –≤–µ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–∫–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã —Å–≤–æ–∏–º –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º –∏ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ–π –ø—É—à–∏—Å—Ç–æ–π —à–µ—Ä—Å—Ç—å—é. –†–æ–¥–æ–º –∏–∑ —à—Ç–∞—Ç–∞ –ú—ç–Ω –≤ –°–®–ê, –æ–Ω–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –∫ —Ö–æ–ª–æ–¥–Ω–æ–º—É –∫–ª–∏–º–∞—Ç—É –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–µ–º—É –≥—É—Å—Ç–æ–º—É –ø–æ–¥—à–µ—Ä—Å—Ç–∫—É.
                </div>
                <div class="characteristics">
                    <div class="char-item"><strong>–í–µ—Å:</strong> 4.5-8.2 –∫–≥</div>
                    <div class="char-item"><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä:</strong> –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∏–≥—Ä–∏–≤—ã–π</div>
                    <div class="char-item"><strong>–£—Ö–æ–¥:</strong> –¢—Ä–µ–±—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—á–µ—Å—ã–≤–∞–Ω–∏—è</div>
                </div>
            </div>
            
            <div class="cat-card">
                <div class="cat-image">üêæ</div>
                <h2>–ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è –∫–æ—Ä–æ—Ç–∫–æ—à–µ—Ä—Å—Ç–Ω–∞—è</h2>
                <div class="description">
                    –ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è –∫–æ—Ä–æ—Ç–∫–æ—à–µ—Ä—Å—Ç–Ω–∞—è –∫–æ—à–∫–∞ ‚Äî –≤–æ–ø–ª–æ—â–µ–Ω–∏–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç–∏. –≠—Ç–∏ –∫–æ—à–∫–∏ –æ–±–ª–∞–¥–∞—é—Ç –ø–ª—é—à–µ–≤–æ–π —à–µ—Ä—Å—Ç—å—é –∏ –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫—Ä—É–≥–ª—ã–º–∏ –≥–ª–∞–∑–∞–º–∏. –û–Ω–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã —Å–≤–æ–∏–º –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º, –Ω–æ –ª–∞—Å–∫–æ–≤—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∏—Ö –∏–¥–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞–º–∏ –¥–ª—è –≥–æ—Ä–æ–¥—Å–∫–æ–π –∂–∏–∑–Ω–∏.
                </div>
                <div class="characteristics">
                    <div class="char-item"><strong>–í–µ—Å:</strong> 3.2-7.7 –∫–≥</div>
                    <div class="char-item"><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä:</strong> –°–ø–æ–∫–æ–π–Ω—ã–π, –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π</div>
                    <div class="char-item"><strong>–£—Ö–æ–¥:</strong> –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π</div>
                </div>
            </div>
            
            <div class="cat-card">
                <div class="cat-image">‚ú®</div>
                <h2>–°–∏–∞–º—Å–∫–∞—è –∫–æ—à–∫–∞</h2>
                <div class="description">
                    –°–∏–∞–º—Å–∫–∏–µ –∫–æ—à–∫–∏ ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–µ –∞—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç—ã –∫–æ—à–∞—á—å–µ–≥–æ –º–∏—Ä–∞. –ò—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞—è –≤–Ω–µ—à–Ω–æ—Å—Ç—å —Å —Ç–µ–º–Ω—ã–º–∏ –æ—Ç–º–µ—Ç–∏–Ω–∞–º–∏ –Ω–∞ –º–æ—Ä–¥–æ—á–∫–µ, —É—à–∞—Ö, –ª–∞–ø–∞—Ö –∏ —Ö–≤–æ—Å—Ç–µ –¥–µ–ª–∞–µ—Ç –∏—Ö –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–∑–Ω–∞–≤–∞–µ–º—ã–º–∏. –≠—Ç–æ –æ—á–µ–Ω—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—á–∏–≤—ã–µ –∫–æ—à–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ª—é–±—è—Ç –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è.
                </div>
                <div class="characteristics">
                    <div class="char-item"><strong>–í–µ—Å:</strong> 2.2-4.5 –∫–≥</div>
                    <div class="char-item"><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä:</strong> –ê–∫—Ç–∏–≤–Ω—ã–π, —Ä–∞–∑–≥–æ–≤–æ—Ä—á–∏–≤—ã–π</div>
                    <div class="char-item"><strong>–£—Ö–æ–¥:</strong> –ü—Ä–æ—Å—Ç–æ–π</div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>"""
            
            return {
                "steps": [
                    {
                        "step": 1,
                        "action": "—Å–æ–∑–¥–∞—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ—Ç—è—Ç–∞–º–∏",
                        "tool": "file_manager", 
                        "params": {
                            "filename": "kittens_website.html",
                            "content": html_content
                        }
                    }
                ]
            }
        elif "–ø–ª–∞–Ω" in task_lower and "python" in task_lower:
            # –°–æ–∑–¥–∞—ë–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è Python
            plan_content = """üìö –ü–õ–ê–ù –ò–ó–£–ß–ï–ù–ò–Ø PYTHON –ù–ê –ó–ê–í–¢–†–ê

üåÖ –£–¢–†–û (9:00 - 12:00)
======================

üìñ 9:00 - 10:30: –û—Å–Ω–æ–≤—ã Python
- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö (int, str, float, bool)
- –û–ø–µ—Ä–∞—Ç–æ—Ä—ã (–∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ, –ª–æ–≥–∏—á–µ—Å–∫–∏–µ, —Å—Ä–∞–≤–Ω–µ–Ω–∏—è) 
- –ü—Ä–∞–∫—Ç–∏–∫–∞: —Å–æ–∑–¥–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

‚òï 10:30 - 10:45: –ü–µ—Ä–µ—Ä—ã–≤

üîÑ 10:45 - 12:00: –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (if, elif, else)
- –¶–∏–∫–ª—ã (for, while)
- –ü—Ä–∞–∫—Ç–∏–∫–∞: –ø—Ä–æ–≥—Ä–∞–º–º–∞ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"

üåû –î–ï–ù–¨ (13:00 - 17:00)
======================

üóÇÔ∏è 13:00 - 14:30: –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
- –°–ø–∏—Å–∫–∏ (list): —Å–æ–∑–¥–∞–Ω–∏–µ, –º–µ—Ç–æ–¥—ã, —Å—Ä–µ–∑—ã
- –°–ª–æ–≤–∞—Ä–∏ (dict): –∫–ª—é—á–∏, –∑–Ω–∞—á–µ–Ω–∏—è, –º–µ—Ç–æ–¥—ã
- –ü—Ä–∞–∫—Ç–∏–∫–∞: –∑–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

üçî 14:30 - 15:30: –û–±–µ–¥

üì¶ 15:30 - 17:00: –§—É–Ω–∫—Ü–∏–∏
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π (def)
- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
- –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (return)
- –ü—Ä–∞–∫—Ç–∏–∫–∞: —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

üåÜ –í–ï–ß–ï–† (18:00 - 21:00)
========================

üìÅ 18:00 - 19:30: –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
- –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤ (open, with)
- –ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å (read, write)
- –ü—Ä–∞–∫—Ç–∏–∫–∞: –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞

üîç 19:30 - 21:00: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –º–æ–¥—É–ª–∏
- –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π (import)
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ (datetime, random, os)
- –ü—Ä–∞–∫—Ç–∏–∫–∞: –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º 3+ –º–æ–¥—É–ª–µ–π

üí° –î–û–ú–ê–®–ù–ï–ï –ó–ê–î–ê–ù–ò–ï
==================
1. –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É "–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á"
2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥ –Ω–∞ GitHub

üéØ –¶–ï–õ–ò –ó–ê–í–¢–†–ê–®–ù–ï–ì–û –î–ù–Ø
======================
‚úÖ –ü–æ–Ω—è—Ç—å –æ—Å–Ω–æ–≤—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python
‚úÖ –ù–∞–ø–∏—Å–∞—Ç—å 5+ –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º  
‚úÖ –°–æ–∑–¥–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é –û–û–ü

üìö –†–ï–°–£–†–°–´ –î–õ–Ø –ò–ó–£–ß–ï–ù–ò–Ø
=======================
- Python.org - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- Real Python - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–∫–∏
- Automate the Boring Stuff - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
- Python Crash Course - –∫–Ω–∏–≥–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö

üöÄ –£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ Python! üêç"""

            return {
                "steps": [
                    {
                        "step": 1,
                        "action": "—Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è Python",
                        "tool": "file_manager",
                        "params": {
                            "filename": "python_learning_plan.md", 
                            "content": plan_content
                        }
                    }
                ]
            }
        elif any(word in task_lower for word in ["–ø—Ä–æ–¥–∞–∂", "–∞–Ω–∞–ª–∏–∑", "–¥–∞–Ω–Ω—ã–µ"]):
            # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            numbers = [100, 150, 200, 120, 300]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –∑–∞–¥–∞—á–∏
            
            analysis_content = f"""üìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –û –ü–†–û–î–ê–ñ–ê–•

üî¢ –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï
==================
–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö: {numbers}

üìà –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó
========================

–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
‚Ä¢ –û–±—â–∏–π –æ–±—ä—ë–º –ø—Ä–æ–¥–∞–∂: {sum(numbers)} –µ–¥–∏–Ω–∏—Ü
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {sum(numbers)/len(numbers):.1f} –µ–¥–∏–Ω–∏—Ü
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {min(numbers)} –µ–¥–∏–Ω–∏—Ü  
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {max(numbers)} –µ–¥–∏–Ω–∏—Ü
‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞: {sorted(numbers)[len(numbers)//2]} –µ–¥–∏–Ω–∏—Ü

–†–∞–∑–º–∞—Ö –¥–∞–Ω–Ω—ã—Ö: {max(numbers) - min(numbers)} –µ–¥–∏–Ω–∏—Ü

üéØ –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í
=================

–ü–µ—Ä–∏–æ–¥ 1‚Üí2: {numbers[1] - numbers[0]:+d} ({((numbers[1] - numbers[0])/numbers[0]*100):+.1f}%)
–ü–µ—Ä–∏–æ–¥ 2‚Üí3: {numbers[2] - numbers[1]:+d} ({((numbers[2] - numbers[1])/numbers[1]*100):+.1f}%)  
–ü–µ—Ä–∏–æ–¥ 3‚Üí4: {numbers[3] - numbers[2]:+d} ({((numbers[3] - numbers[2])/numbers[2]*100):+.1f}%)
–ü–µ—Ä–∏–æ–¥ 4‚Üí5: {numbers[4] - numbers[3]:+d} ({((numbers[4] - numbers[3])/numbers[3]*100):+.1f}%)

üìä –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
========================

üîç –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:
‚Ä¢ –ü–∏–∫–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ 5-–º –ø–µ—Ä–∏–æ–¥–µ (300 –µ–¥–∏–Ω–∏—Ü) - —Ä–æ—Å—Ç –Ω–∞ 150%
‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –≤ 4-–º –ø–µ—Ä–∏–æ–¥–µ —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏—á–∏–Ω
‚Ä¢ –û–±—â–∏–π —Ç—Ä–µ–Ω–¥ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π (+200% –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥)

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. –ò–∑—É—á–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞ 5-–≥–æ –ø–µ—Ä–∏–æ–¥–∞
2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã —Å–ø–∞–¥–∞ –≤ 4-–º –ø–µ—Ä–∏–æ–¥–µ  
3. –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ 250+ –µ–¥–∏–Ω–∏—Ü
4. –í–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤

üéØ –ü–†–û–ì–ù–û–ó –ù–ê –°–õ–ï–î–£–Æ–©–ò–ô –ü–ï–†–ò–û–î
==============================
–û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–æ–¥–∞–∂–∏: 280-320 –µ–¥–∏–Ω–∏—Ü
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: 75%
–†–∏—Å–∫–∏: —Å—Ä–µ–¥–Ω–∏–µ

üí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
=========================
(–ø—Ä–∏ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ 1000 —Ä—É–±/–µ–¥–∏–Ω–∏—Ü–∞)

–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {sum(numbers) * 1000:,} —Ä—É–±.
–°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {sum(numbers) * 1000 // len(numbers):,} —Ä—É–±.
–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞: +{(300 - sum(numbers)/len(numbers)) * 1000:.0f} —Ä—É–±/–ø–µ—Ä–∏–æ–¥"""

            return {
                "steps": [
                    {
                        "step": 1,
                        "action": "—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö",
                        "tool": "file_manager",
                        "params": {
                            "filename": "sales_analysis_report.md",
                            "content": analysis_content
                        }
                    }
                ]
            }
        else:
            # –û–±—â–∏–π —Å–ª—É—á–∞–π - —Å–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç
            return {
                "steps": [
                    {
                        "step": 1,
                        "action": "—Å–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –∑–∞–¥–∞—á–µ", 
                        "tool": "file_manager",
                        "params": {
                            "filename": "task_report.md",
                            "content": f"# –û—Ç—á—ë—Ç –ø–æ –∑–∞–¥–∞—á–µ\n\n**–ó–∞–¥–∞—á–∞:** {task_description}\n\n**–°—Ç–∞—Ç—É—Å:** –í—ã–ø–æ–ª–Ω–µ–Ω–æ\n\n**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π KittyCore 3.0"
                        }
                    }
                ]
            }
    
    async def _execute_plan(self, plan: Dict[str, Any], task_description: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        
        results = []
        created_files = []
        
        for step in plan.get("steps", []):
            step_num = step.get("step", 0)
            action = step.get("action", "")
            tool_name = step.get("tool", "")
            params = step.get("params", {})
            
            print(f"üìã –®–∞–≥ {step_num}: {action}")
            
            try:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å LLM –≤—ã–≤–æ–¥–æ–º
                normalized_tool = tool_name.lower().replace(" ", "_").replace("-", "_")
                
                if normalized_tool in ["code_generator", "codegenerator"]:
                    result = await self._use_code_generator(params, task_description)
                elif normalized_tool in ["file_manager", "filemanager"]:
                    result = await self._use_file_manager(params, task_description)
                elif normalized_tool in ["web_client", "webclient"]:
                    result = await self._use_web_client(params)
                elif normalized_tool in ["system_tools", "systemtools"]:
                    # system_tools –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω - —Å–æ–∑–¥–∞—ë–º –∑–∞–≥–ª—É—à–∫—É
                    result = {"success": False, "error": f"Unknown tool: {tool_name}"}
                else:
                    result = {"success": False, "error": f"Unknown tool: {tool_name}"}
                
                if result.get("success"):
                    print(f"‚úÖ –®–∞–≥ {step_num} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    if result.get("filename"):
                        created_files.append(result["filename"])
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ {step_num}: {result.get('error')}")
                
                results.append(result)
                
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —à–∞–≥–µ {step_num}: {e}")
                results.append({"success": False, "error": str(e)})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        success_count = sum(1 for r in results if r.get("success"))
        
        if success_count > 0:
            output = f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {success_count} –∏–∑ {len(results)} —à–∞–≥–æ–≤"
            if created_files:
                output += f". –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(created_files)}"
                
            return {
                "status": "completed",
                "output": output,
                "files_created": created_files,
                "step_results": results
            }
        else:
            return {
                "status": "failed", 
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞",
                "step_results": results
            }
    
    async def _use_code_generator(self, params: Dict[str, Any], task_description: str) -> Dict[str, Any]:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ code_generator"""
        filename = params.get("filename", f"generated_{id(self)}.html")
        title = params.get("title", "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞—á–∏
        if "–∫–æ—Ç—è—Ç" in task_description.lower() or "cat" in task_description.lower():
            content = f"""
            <div class="header">
                <h1>üê± {title}</h1>
                <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç –æ –∫–æ—Ç—è—Ç–∞—Ö!</p>
            </div>
            <div class="content">
                <h2>–ù–∞—à–∏ –º–∏–ª—ã–µ –∫–æ—Ç—è—Ç–∫–∏</h2>
                <p>–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å–∞–º—ã—Ö –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ç—è—Ç! üêæ</p>
                <ul>
                    <li>üê± –ü—É—à–∏—Å—Ç—ã–µ –∫–æ—Ç—è—Ç–∞</li>
                    <li>üêà –ò–≥—Ä–∏–≤—ã–µ –º–∞–ª—ã—à–∏</li>
                    <li>üò∫ –õ–∞—Å–∫–æ–≤—ã–µ –ø–∏—Ç–æ–º—Ü—ã</li>
                </ul>
                <p>–ö–æ—Ç—è—Ç–∞ –ø—Ä–∏–Ω–æ—Å—è—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ —É—é—Ç –≤ –Ω–∞—à –¥–æ–º!</p>
            </div>
            """
        else:
            content = f"<p>–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è: {task_description}</p>"
        
        return self.tools["code_generator"].generate_html_page(title, content, filename)
    
    async def _use_file_manager(self, params: Dict[str, Any], task_description: str) -> Dict[str, Any]:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ file_manager"""
        filename = params.get("filename", f"—Ñ–∞–π–ª_{id(self)}.txt")
        content = params.get("content", "")
        
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π
        if not content:
            if "–ø–ª–∞–Ω" in task_description.lower():
                content = f"""# –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞

## üåÖ –£—Ç—Ä–æ (8:00-12:00)
- ‚òï –ó–∞–≤—Ç—Ä–∞–∫ –∏ –∫–æ—Ñ–µ
- üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã
- üéØ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏

## üåû –î–µ–Ω—å (12:00-17:00)  
- üçΩÔ∏è –û–±–µ–¥
- üìû –í—Å—Ç—Ä–µ—á–∏ –∏ –∑–≤–æ–Ω–∫–∏
- üìù –î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç

## üåÜ –í–µ—á–µ—Ä (17:00-22:00)
- üè† –î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞
- üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í—Ä–µ–º—è —Å —Å–µ–º—å–µ–π
- üìö –ß—Ç–µ–Ω–∏–µ –∏ –æ—Ç–¥—ã—Ö

–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏: {task_description}
"""
            else:
                content = f"""# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã

–ó–∞–¥–∞—á–∞: {task_description}
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º: {self.role}

## –†–µ–∑—É–ª—å—Ç–∞—Ç
–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.
"""
        
        return self.tools["file_manager"].create_file(filename, content)
    
    async def _use_web_client(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ web_client"""
        url = params.get("url", "https://httpbin.org/status/200")
        return self.tools["web_client"].check_website(url) 