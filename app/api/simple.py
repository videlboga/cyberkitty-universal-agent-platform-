"""
–ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è Universal Agent Platform.
–ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û! –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω endpoint.

–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π endpoint: POST /simple/channels/{channel_id}/execute
"""

import os
import asyncio
import json
from typing import Dict, Any, Optional
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel, Field
from loguru import logger

from app.core.simple_engine import SimpleScenarioEngine, create_engine


def safe_serialize_context(context: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫.
    
    Args:
        context: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        Dict: –û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
    """
    def is_serializable(obj):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ–±—ä–µ–∫—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ JSON."""
        try:
            json.dumps(obj)
            return True
        except (TypeError, ValueError):
            return False
    
    safe_context = {}
    
    for key, value in context.items():
        if is_serializable(value):
            safe_context[key] = value
        else:
            # –î–ª—è –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            safe_context[key] = f"<non-serializable: {type(value).__name__}>"
    
    return safe_context


# === –°–•–ï–ú–´ –î–ê–ù–ù–´–• ===

class ExecuteRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –∫–∞–Ω–∞–ª–∞."""
    user_id: Optional[str] = Field(None, description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    chat_id: Optional[str] = Field(None, description="ID —á–∞—Ç–∞ –≤ Telegram")
    context: Optional[Dict[str, Any]] = Field(default_factory=dict, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    scenario_id: Optional[str] = Field(None, description="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")


class ExecuteResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    success: bool = Field(description="–£—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π")
    scenario_id: str = Field(description="ID –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è")
    final_context: Dict[str, Any] = Field(description="–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    message: Optional[str] = Field(None, description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
    error: Optional[str] = Field(None, description="–û—à–∏–±–∫–∞, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞")


# === ROUTER ===

router = APIRouter(prefix="/simple", tags=["simple"])


# === –ó–ê–ì–†–£–ó–ö–ê –°–¶–ï–ù–ê–†–ò–ï–í ===

async def _load_scenario(channel_id: str, scenario_id: str = None) -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞.
    
    –ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ChannelMapping –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–π –º–æ–¥–µ–ª–∏ Agent.
    
    Args:
        channel_id: ID –∫–∞–Ω–∞–ª–∞
        scenario_id: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        Dict: –°—Ü–µ–Ω–∞—Ä–∏–π –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
        
    Raises:
        HTTPException: –ï—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ MongoDB
    try:
        engine = await create_engine()
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π scenario_id, –∏—â–µ–º –µ–≥–æ
        if scenario_id:
            step = {
                "id": "get_scenario",
                "type": "mongo_get_scenario",
                "params": {
                    "scenario_id": scenario_id,
                    "output_var": "scenario_result"
                }
            }
            context = {}
            result_context = await engine.execute_step(step, context)
            if result_context.get("scenario_result", {}).get("success"):
                return result_context["scenario_result"]["scenario"]
        
        # –ò–Ω–∞—á–µ –∏—â–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –∏ –µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–π
        step = {
            "id": "get_mapping",
            "type": "mongo_get_channel_mapping",
            "params": {
                "channel_id": channel_id,
                "output_var": "mapping_result"
            }
        }
        context = {}
        result_context = await engine.execute_step(step, context)
        
        if result_context.get("mapping_result", {}).get("success"):
            mapping = result_context["mapping_result"]["mapping"]
            mapping_scenario_id = mapping.get("scenario_id")
            
            if mapping_scenario_id:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
                scenario_step = {
                    "id": "get_scenario",
                    "type": "mongo_get_scenario_by_id",
                    "params": {
                        "scenario_id": mapping_scenario_id,
                        "output_var": "scenario_result"
                    }
                }
                scenario_context = {}
                scenario_result_context = await engine.execute_step(scenario_step, scenario_context)
                
                if scenario_result_context.get("scenario_result", {}).get("success"):
                    return scenario_result_context["scenario_result"]["scenario"]
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑ MongoDB: {e}")
        # –ï—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î - –æ—à–∏–±–∫–∞
        raise HTTPException(
            status_code=404, 
            detail=f"–°—Ü–µ–Ω–∞—Ä–∏–π '{scenario_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≥—Ä—É–∂–∞—Ç—å
    if scenario_id:
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        if scenario_id == "user_registration_complete":
            return {
                "scenario_id": "user_registration_complete",
                "description": "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "initial_context": {
                    "user_type": "user",
                    "registration_complete": True
                },
                "steps": [
                    {
                        "id": "start",
                        "type": "start",
                        "params": {
                            "message": "–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                        },
                        "next_step": "success_message"
                    },
                    {
                        "id": "success_message",
                        "type": "telegram_send_message",
                        "params": {
                            "chat_id": "{chat_id}",
                            "text": "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n–ü—Ä–∏–≤–µ—Ç, {user_name}! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n\nüéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
                            "parse_mode": "HTML"
                        },
                        "next_step": "main_menu"
                    },
                    {
                        "id": "main_menu",
                        "type": "telegram_send_buttons",
                        "params": {
                            "chat_id": "{chat_id}",
                            "text": "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                            "buttons": [
                                [{"text": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", "callback_data": "run_scenario"}],
                                [{"text": "üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "callback_data": "my_profile"}],
                                [{"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "help"}]
                            ]
                        },
                        "next_step": "end"
                    },
                    {
                        "id": "end",
                        "type": "end",
                        "params": {
                            "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                        }
                    }
                ]
            }
        elif scenario_id == "admin_registration_complete":
            return {
                "scenario_id": "admin_registration_complete",
                "description": "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "initial_context": {
                    "user_type": "admin",
                    "registration_complete": True
                },
                "steps": [
                    {
                        "id": "start",
                        "type": "start",
                        "params": {
                            "message": "–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                        },
                        "next_step": "success_message"
                    },
                    {
                        "id": "success_message",
                        "type": "telegram_send_message",
                        "params": {
                            "chat_id": "{chat_id}",
                            "text": "üëë <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! –£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ.\n\nüîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º\n‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                            "parse_mode": "HTML"
                        },
                        "next_step": "admin_menu"
                    },
                    {
                        "id": "admin_menu",
                        "type": "telegram_send_buttons",
                        "params": {
                            "chat_id": "{chat_id}",
                            "text": "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                            "buttons": [
                                [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "admin_stats"}],
                                [{"text": "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "callback_data": "admin_users"}],
                                [{"text": "üé≠ –°—Ü–µ–Ω–∞—Ä–∏–∏", "callback_data": "admin_scenarios"}],
                                [{"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "admin_settings"}],
                                [{"text": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", "callback_data": "run_scenario"}]
                            ]
                        },
                        "next_step": "end"
                    },
                    {
                        "id": "end",
                        "type": "end",
                        "params": {
                            "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                        }
                    }
                ]
            }
        else:
            # –ï—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î - –æ—à–∏–±–∫–∞
            raise HTTPException(
                status_code=404, 
                detail=f"–°—Ü–µ–Ω–∞—Ä–∏–π '{scenario_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            )
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –æ—à–∏–±–∫–∞
    raise HTTPException(
        status_code=404, 
        detail=f"–°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{channel_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
    )


# === ENDPOINTS ===

@router.post("/channels/{channel_id}/execute", response_model=ExecuteResponse)
async def execute_channel_scenario(
    channel_id: str,
    request: ExecuteRequest,
    engine: SimpleScenarioEngine = Depends(create_engine)
):
    """
    –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô API ENDPOINT –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∫–∞–Ω–∞–ª–æ–≤.
    
    –ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!
    –û–¥–∏–Ω endpoint –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ChannelMapping –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–π –º–æ–¥–µ–ª–∏ Agent.
    """
    try:
        logger.info(f"üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}", 
                   user_id=request.user_id, chat_id=request.chat_id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = await _load_scenario(channel_id, request.scenario_id)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = {
            "channel_id": channel_id,
            "user_id": request.user_id,
            "chat_id": request.chat_id,
            "scenario_id": scenario["scenario_id"]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if request.context:
            context.update(request.context)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        final_context = await engine.execute_scenario(scenario, context)
        
        # –£–ü–†–û–©–ï–ù–û: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –¥–≤–∏–∂–∫–∞
        # –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        
        logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario['scenario_id']} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        safe_context = safe_serialize_context(final_context)
        
        return ExecuteResponse(
            success=True,
            scenario_id=scenario["scenario_id"],
            final_context=safe_context,
            message=f"–°—Ü–µ–Ω–∞—Ä–∏–π '{scenario['scenario_id']}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        )
        
    except HTTPException:
        # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –æ—à–∏–±–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
        raise
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        
        return ExecuteResponse(
            success=False,
            scenario_id=request.scenario_id or "unknown",
            final_context={},
            error=str(e)
        )


@router.get("/health")
async def health_check(engine: SimpleScenarioEngine = Depends(create_engine)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
    try:
        is_healthy = await engine.healthcheck()
        
        if is_healthy:
            return {
                "status": "healthy",
                "registered_plugins": engine.get_registered_plugins(),
                "registered_handlers": engine.get_registered_handlers()
            }
        else:
            raise HTTPException(status_code=503, detail="Engine healthcheck failed")
            
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        raise HTTPException(status_code=503, detail=f"Health check failed: {e}")


@router.get("/info")
async def get_info(engine: SimpleScenarioEngine = Depends(create_engine)):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ."""
    return {
        "platform": "Universal Agent Platform - Simplified Architecture",
        "version": "2.0.0-simplified",
        "engine": "SimpleScenarioEngine",
        "registered_plugins": engine.get_registered_plugins(),
        "registered_handlers": engine.get_registered_handlers(),
        "principles": [
            "–ü—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ",
            "–û–¥–∏–Ω –¥–≤–∏–∂–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", 
            "–ú–∏–Ω–∏–º—É–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
            "–Ø–≤–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        ]
    }

# === MONGODB ENDPOINTS ===

class MongoRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è MongoDB –æ–ø–µ—Ä–∞—Ü–∏–π."""
    collection: str = Field(description="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    filter: Optional[Dict[str, Any]] = Field(default_factory=dict, description="–§–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞")
    document: Optional[Dict[str, Any]] = Field(None, description="–î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    scenario_id: Optional[str] = Field(None, description="ID —Å—Ü–µ–Ω–∞—Ä–∏—è")


class MongoResponse(BaseModel):
    """–û—Ç–≤–µ—Ç MongoDB –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    success: bool = Field(description="–£—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è")
    data: Optional[Any] = Field(None, description="–î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    error: Optional[str] = Field(None, description="–û—à–∏–±–∫–∞, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞")


@router.post("/mongo/find", response_model=MongoResponse)
async def mongo_find(
    request: MongoRequest,
    engine: SimpleScenarioEngine = Depends(create_engine)
):
    """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ MongoDB."""
    try:
        step = {
            "id": "find_docs",
            "type": "mongo_find_documents",
            "params": {
                "collection": request.collection,
                "filter": request.filter,
                "output_var": "find_result"
            }
        }
        context = {}
        result_context = await engine.execute_step(step, context)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π find_result
        result = result_context.get("find_result", {})
        
        return MongoResponse(
            success=result.get("success", False),
            data=result.get("documents", []),
            error=result.get("error")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ mongo_find: {e}")
        return MongoResponse(success=False, error=str(e))


@router.post("/mongo/insert", response_model=MongoResponse)
async def mongo_insert(
    request: MongoRequest,
    engine: SimpleScenarioEngine = Depends(create_engine)
):
    """–í—Å—Ç–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ MongoDB."""
    try:
        step = {
            "id": "insert_doc",
            "type": "mongo_insert_document",
            "params": {
                "collection": request.collection,
                "document": request.document,
                "output_var": "insert_result"
            }
        }
        context = {}
        result_context = await engine.execute_step(step, context)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π insert_result
        result = result_context.get("insert_result", {})
        
        return MongoResponse(
            success=result.get("success", False),
            data=result.get("inserted_id"),
            error=result.get("error")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ mongo_insert: {e}")
        return MongoResponse(success=False, error=str(e))


@router.post("/mongo/update", response_model=MongoResponse)
async def mongo_update(
    request: MongoRequest,
    engine: SimpleScenarioEngine = Depends(create_engine)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ MongoDB."""
    try:
        step = {
            "id": "update_doc",
            "type": "mongo_update_document",
            "params": {
                "collection": request.collection,
                "filter": request.filter,
                "update": request.document,
                "output_var": "update_result"
            }
        }
        context = {}
        result_context = await engine.execute_step(step, context)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π update_result
        result = result_context.get("update_result", {})
        
        return MongoResponse(
            success=result.get("success", False),
            data={
                "modified_count": result.get("modified_count", 0),
                "matched_count": result.get("matched_count", 0)
            },
            error=result.get("error")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ mongo_update: {e}")
        return MongoResponse(success=False, error=str(e))


@router.post("/mongo/delete", response_model=MongoResponse)
async def mongo_delete(
    request: MongoRequest,
    engine: SimpleScenarioEngine = Depends(create_engine)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ MongoDB."""
    try:
        step = {
            "id": "delete_doc",
            "type": "mongo_delete_document",
            "params": {
                "collection": request.collection,
                "filter": request.filter,
                "output_var": "delete_result"
            }
        }
        context = {}
        result_context = await engine.execute_step(step, context)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π delete_result
        result = result_context.get("delete_result", {})
        
        return MongoResponse(
            success=result.get("success", False),
            data={"deleted_count": result.get("deleted_count", 0)},
            error=result.get("error")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ mongo_delete: {e}")
        return MongoResponse(success=False, error=str(e))


@router.post("/mongo/save-scenario", response_model=MongoResponse)
async def mongo_save_scenario(
    request: MongoRequest,
    engine: SimpleScenarioEngine = Depends(create_engine)
):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ MongoDB."""
    try:
        if not request.document:
            raise ValueError("document —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
        scenario_data = request.document
        
        # –°–æ–∑–¥–∞–µ–º step –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        step = {
            "id": "save_scenario",
            "type": "mongo_save_scenario",
            "params": {
                "scenario": scenario_data
            }
        }
        context = {}
        result_context = await engine.execute_step(step, context)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ, –µ—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏
        return MongoResponse(
            success=True,
            data={"scenario_id": scenario_data.get("scenario_id")},
            error=None
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ mongo_save_scenario: {e}")
        return MongoResponse(success=False, error=str(e))


# === EXECUTE ENDPOINT ===

class StepRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞."""
    step: Dict[str, Any] = Field(description="–î–∞–Ω–Ω—ã–µ —à–∞–≥–∞")
    context: Dict[str, Any] = Field(default_factory=dict, description="–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")


class StepResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞."""
    success: bool = Field(description="–£—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥")
    context: Dict[str, Any] = Field(description="–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    error: Optional[str] = Field(None, description="–û—à–∏–±–∫–∞, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞")


@router.post("/execute", response_model=StepResponse)
async def execute_step(
    request: StepRequest,
    engine: SimpleScenarioEngine = Depends(create_engine)
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    try:
        result_context = await engine.execute_step(request.step, request.context)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        safe_context = safe_serialize_context(result_context)
        
        return StepResponse(
            success=True,
            context=safe_context
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ execute_step: {e}")
        return StepResponse(
            success=False,
            context=request.context,
            error=str(e)
        ) 