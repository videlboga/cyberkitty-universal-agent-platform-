"""
Code Execution Tools –¥–ª—è KittyCore 3.0
–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∏ Shell –∫–æ–¥–∞ –≤ sandbox –æ–∫—Ä—É–∂–µ–Ω–∏–∏

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Shell –∫–æ–º–∞–Ω–¥ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
- Sandbox —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
"""

import asyncio
import subprocess
import tempfile
import os
import sys
import io
import contextlib
import threading
from pathlib import Path
from typing import Dict, List, Optional, Any, Set
import logging
from loguru import logger

from .base_tool import Tool, ToolResult


class CodeExecutionTool(Tool):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ sandbox –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    """
    
    def __init__(self):
        super().__init__(
            name="code_execution",
            description="–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∏ Shell –∫–æ–¥–∞"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.python_timeout = 30
        self.shell_timeout = 15
        self.max_output_size = 10000
        self.allowed_libraries = {
            "math", "json", "re", "datetime", "time", "random", "string",
            "collections", "itertools", "functools", "operator", "decimal",
            "fractions", "statistics", "urllib.parse", "base64", "hashlib",
            "hmac", "uuid", "pathlib", "textwrap", "unicodedata"
        }
        
        # –û–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self.dangerous_python_patterns = {
            'import os', 'import sys', 'import subprocess', 'exec(', 'eval(',
            '__import__', 'open(', 'file(', 'input(', 'raw_input(',
            'compile(', 'reload(', 'delattr(', 'setattr(', 'getattr(',
            'hasattr(', 'globals(', 'locals(', 'vars(', 'dir(',
            'exit(', 'quit(', '__builtins__'
        }
        
        self.dangerous_shell_patterns = {
            'rm -rf', 'sudo', 'su ', 'passwd', 'userdel', 'useradd',
            'usermod', 'chmod 777', 'chown', 'mkfs', 'fdisk',
            'mount', 'umount', 'iptables', 'systemctl', 'service',
            'kill -9', 'killall', 'pkill', 'shutdown', 'reboot',
            'halt', 'dd if=', 'wget', 'curl', 'nc ', 'netcat',
            'ssh', 'scp', 'rsync'
        }

    def get_schema(self):
        """–°—Ö–µ–º–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞"""
        return {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string", 
                    "enum": [
                        "execute_python", "execute_shell", "validate_python",
                        "validate_shell", "list_libraries", "get_execution_limits"
                    ],
                    "description": "–¢–∏–ø –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞"
                },
                "code": {
                    "type": "string",
                    "description": "–ö–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                },
                "language": {
                    "type": "string",
                    "enum": ["python", "shell", "bash"],
                    "description": "–Ø–∑—ã–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                },
                "libraries": {
                    "type": "array",
                    "items": {"type": "string"},
                    "description": "–°–ø–∏—Å–æ–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"
                },
                "timeout": {
                    "type": "integer",
                    "description": "–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
                },
                "working_dir": {
                    "type": "string",
                    "description": "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è"
                },
                "env_vars": {
                    "type": "object",
                    "description": "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
                }
            },
            "required": ["action"]
        }

    def execute(self, action: str, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∫–æ–¥–æ–º"""
        try:
            if action == "execute_python":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop
                try:
                    loop = asyncio.get_running_loop()
                    # –ï—Å–ª–∏ –¥–∞ - —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
                    import concurrent.futures
                    with concurrent.futures.ThreadPoolExecutor() as executor:
                        future = executor.submit(asyncio.run, self._execute_python(**kwargs))
                        return future.result(timeout=kwargs.get("timeout", self.python_timeout) + 5)
                except RuntimeError:
                    # –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ loop - –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å asyncio.run
                    return asyncio.run(self._execute_python(**kwargs))
            elif action == "execute_shell":
                # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è shell
                try:
                    loop = asyncio.get_running_loop()
                    import concurrent.futures
                    with concurrent.futures.ThreadPoolExecutor() as executor:
                        future = executor.submit(asyncio.run, self._execute_shell(**kwargs))
                        return future.result(timeout=kwargs.get("timeout", self.shell_timeout) + 5)
                except RuntimeError:
                    return asyncio.run(self._execute_shell(**kwargs))
            elif action == "validate_python":
                return self._validate_python_code(**kwargs)
            elif action == "validate_shell":
                return self._validate_shell_command(**kwargs)
            elif action == "list_libraries":
                return self._list_allowed_libraries(**kwargs)
            elif action == "get_execution_limits":
                return self._get_execution_limits(**kwargs)
            else:
                return ToolResult(
                    success=False,
                    error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Code Execution Tool {action}: {e}")
            return ToolResult(success=False, error=str(e))

    # =====================================================
    # –í–´–ü–û–õ–ù–ï–ù–ò–ï PYTHON –ö–û–î–ê
    # =====================================================
    
    async def _execute_python(self, **kwargs) -> ToolResult:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞"""
        try:
            code = kwargs.get("code", "")
            libraries = kwargs.get("libraries", [])
            timeout = kwargs.get("timeout", self.python_timeout)
            
            if not code:
                return ToolResult(success=False, error="–ö–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            safety_check = self._validate_python_code(code=code, libraries=libraries)
            if not safety_check.success:
                return safety_check
            
            logger.info(f"üêç –í—ã–ø–æ–ª–Ω—è—é Python –∫–æ–¥ ({len(code)} —Å–∏–º–≤–æ–ª–æ–≤)")
            if libraries:
                logger.info(f"   üì¶ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏: {', '.join(libraries)}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            result = await asyncio.wait_for(
                self._run_python_in_sandbox(code, libraries),
                timeout=timeout
            )
            
            return result
                
        except asyncio.TimeoutError:
            logger.error("Python –∫–æ–¥ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            return ToolResult(success=False, error=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ ({timeout}—Å)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python –∫–æ–¥–∞: {e}")
            return ToolResult(success=False, error=str(e))

    async def _run_python_in_sandbox(self, code: str, libraries: List[str]) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞ –≤ sandbox"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            sandbox_globals = {
                "__builtins__": {
                    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                    "print": print, "len": len, "range": range, "str": str,
                    "int": int, "float": float, "bool": bool, "list": list,
                    "dict": dict, "tuple": tuple, "set": set, "abs": abs,
                    "min": min, "max": max, "sum": sum, "sorted": sorted,
                    "reversed": reversed, "enumerate": enumerate, "zip": zip,
                    "round": round, "pow": pow, "divmod": divmod,
                    "__import__": __import__  # –î–æ–±–∞–≤–ª—è–µ–º __import__ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
                }
            }
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            for lib in libraries:
                if lib in self.allowed_libraries:
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º __import__ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ sandbox
                        module = __import__(lib)
                        sandbox_globals[lib] = module
                    except ImportError:
                        logger.warning(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ {lib} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
            # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
            old_stdout = sys.stdout
            old_stderr = sys.stderr
            stdout_capture = io.StringIO()
            stderr_capture = io.StringIO()
            
            try:
                sys.stdout = stdout_capture
                sys.stderr = stderr_capture
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                result = await asyncio.get_event_loop().run_in_executor(
                    None, 
                    self._execute_python_code, 
                    code, 
                    sandbox_globals
                )
                
                stdout_content = stdout_capture.getvalue()
                stderr_content = stderr_capture.getvalue()
                
            finally:
                sys.stdout = old_stdout
                sys.stderr = old_stderr
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞
            if len(stdout_content) > self.max_output_size:
                stdout_content = stdout_content[:self.max_output_size] + "\n... (–≤—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω)"
            
            if len(stderr_content) > self.max_output_size:
                stderr_content = stderr_content[:self.max_output_size] + "\n... (–æ—à–∏–±–∫–∏ –æ–±—Ä–µ–∑–∞–Ω—ã)"
            
            output = stdout_content
            if stderr_content:
                output += f"\n--- STDERR ---\n{stderr_content}"
            
            logger.success(f"‚úÖ Python –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ ({len(output)} —Å–∏–º–≤–æ–ª–æ–≤ –≤—ã–≤–æ–¥–∞)")
            
            return ToolResult(
                success=True,
                data={
                    "output": output or "–ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (–±–µ–∑ –≤—ã–≤–æ–¥–∞)",
                    "stdout": stdout_content,
                    "stderr": stderr_content,
                    "libraries_used": libraries,
                    "code_length": len(code)
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python –≤ sandbox: {e}")
            return ToolResult(success=False, error=str(e))

    def _execute_python_code(self, code: str, globals_dict: dict) -> Any:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª–∞–º–∏"""
        try:
            exec(code, globals_dict)
            return True
        except Exception as e:
            raise e

    # =====================================================
    # –í–´–ü–û–õ–ù–ï–ù–ò–ï SHELL –ö–û–ú–ê–ù–î
    # =====================================================
    
    async def _execute_shell(self, **kwargs) -> ToolResult:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ shell –∫–æ–º–∞–Ω–¥"""
        try:
            code = kwargs.get("code", "")
            timeout = kwargs.get("timeout", self.shell_timeout)
            working_dir = kwargs.get("working_dir", ".")
            env_vars = kwargs.get("env_vars", {})
            
            if not code:
                return ToolResult(success=False, error="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            safety_check = self._validate_shell_command(code=code)
            if not safety_check.success:
                return safety_check
            
            logger.info(f"üíª –í—ã–ø–æ–ª–Ω—è—é shell –∫–æ–º–∞–Ω–¥—É: {code}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            env = os.environ.copy()
            env.update(env_vars)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            process = await asyncio.create_subprocess_shell(
                code,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd=working_dir,
                env=env
            )
            
            try:
                stdout, stderr = await asyncio.wait_for(
                    process.communicate(),
                    timeout=timeout
                )
                
                stdout_text = stdout.decode('utf-8', errors='replace')
                stderr_text = stderr.decode('utf-8', errors='replace')
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞
                if len(stdout_text) > self.max_output_size:
                    stdout_text = stdout_text[:self.max_output_size] + "\n... (–≤—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω)"
                if len(stderr_text) > self.max_output_size:
                    stderr_text = stderr_text[:self.max_output_size] + "\n... (–æ—à–∏–±–∫–∏ –æ–±—Ä–µ–∑–∞–Ω—ã)"
                
                success = process.returncode == 0
                output = stdout_text
                if stderr_text:
                    output += f"\n--- STDERR ---\n{stderr_text}"
                
                if success:
                    logger.success(f"‚úÖ Shell –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.warning(f"‚ö†Ô∏è Shell –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º {process.returncode}")
                
                return ToolResult(
                    success=success,
                    data={
                        "output": output or f"–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {process.returncode})",
                        "return_code": process.returncode,
                        "stdout": stdout_text,
                        "stderr": stderr_text,
                        "command": code,
                        "working_dir": working_dir
                    }
                )
                
            except asyncio.TimeoutError:
                process.kill()
                await process.wait()
                raise asyncio.TimeoutError()
                
        except asyncio.TimeoutError:
            logger.error("Shell –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            return ToolResult(success=False, error=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ ({timeout}—Å)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è shell –∫–æ–º–∞–Ω–¥—ã: {e}")
            return ToolResult(success=False, error=str(e))

    # =====================================================
    # –ü–†–û–í–ï–†–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
    # =====================================================
    
    def _validate_python_code(self, **kwargs) -> ToolResult:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Python –∫–æ–¥–∞"""
        code = kwargs.get("code", "")
        libraries = kwargs.get("libraries", [])
        
        if not code:
            return ToolResult(success=False, error="–ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        
        code_lower = code.lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        for pattern in self.dangerous_python_patterns:
            if pattern in code_lower:
                return ToolResult(
                    success=False,
                    error=f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}"
                )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
        for lib in libraries:
            if lib not in self.allowed_libraries:
                return ToolResult(
                    success=False,
                    error=f"üö® –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞: {lib}"
                )
        
        return ToolResult(success=True, data={"message": "–ö–æ–¥ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"})

    def _validate_shell_command(self, **kwargs) -> ToolResult:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ shell –∫–æ–º–∞–Ω–¥"""
        code = kwargs.get("code", "")
        
        if not code:
            return ToolResult(success=False, error="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")
        
        command_lower = code.lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        for pattern in self.dangerous_shell_patterns:
            if pattern in command_lower:
                return ToolResult(
                    success=False,
                    error=f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {pattern}"
                )
        
        return ToolResult(success=True, data={"message": "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"})

    def _list_allowed_libraries(self, **kwargs) -> ToolResult:
        """–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
        return ToolResult(
            success=True,
            data={
                "message": f"–†–∞–∑—Ä–µ—à–µ–Ω–æ {len(self.allowed_libraries)} –±–∏–±–ª–∏–æ—Ç–µ–∫",
                "allowed_libraries": sorted(list(self.allowed_libraries)),
                "count": len(self.allowed_libraries)
            }
        )

    def _get_execution_limits(self, **kwargs) -> ToolResult:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return ToolResult(
            success=True,
            data={
                "message": "–õ–∏–º–∏—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                "python_timeout": self.python_timeout,
                "shell_timeout": self.shell_timeout,
                "max_output_size": self.max_output_size,
                "allowed_libraries_count": len(self.allowed_libraries),
                "dangerous_python_patterns_count": len(self.dangerous_python_patterns),
                "dangerous_shell_patterns_count": len(self.dangerous_shell_patterns)
            }
        ) 