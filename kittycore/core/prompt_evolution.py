#!/usr/bin/env python3
"""
üß† PromptEvolution - –ù–µ–π—Ä–æ—ç–≤–æ–ª—é—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ KittyCore 3.0

–§–ê–ó–ê 3: –ù–µ–π—Ä–æ—ç–≤–æ–ª—é—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
–ü—Ä–∏–Ω—Ü–∏–ø: "–ü—Ä–æ–º–ø—Ç—ã —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–∞–∫ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ - –ª—É—á—à–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—ã–∂–∏–≤–∞—é—Ç –∏ —Ä–∞–∑–º–Ω–æ–∂–∞—é—Ç—Å—è"

–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
üß† –ù–ï–ô–†–û–ù–ù–ê–Ø –ê–î–ê–ü–¢–ê–¶–ò–Ø: –ü—Ä–æ–º–ø—Ç—ã –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ —Å–∏–Ω–∞–ø—Å—ã –≤ –º–æ–∑–≥–µ
üîÑ –≠–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –ú–£–¢–ê–¶–ò–ò: –°–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ –ø—Ä–æ–º–ø—Ç–æ–≤
üéØ –°–ï–õ–ï–ö–¢–ò–í–ù–û–ï –î–ê–í–õ–ï–ù–ò–ï: –£—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç
üìä –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–ª–∏—è—é—Ç –Ω–∞ –±—É–¥—É—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã
üå± –ù–ï–ü–†–ï–†–´–í–ù–ê–Ø –≠–í–û–õ–Æ–¶–ò–Ø: –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
"""

import json
import random
import re
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from pathlib import Path
from loguru import logger

# === –ß–ê–°–¢–¨ 1: –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• –ü–†–û–ú–ü–¢–û–í ===

@dataclass
class PromptGenes:
    """üß† –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–¥ –ø—Ä–æ–º–ø—Ç–∞ - —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    role_definition: str = ""  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –∞–≥–µ–Ω—Ç–∞
    task_instructions: str = ""  # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á
    output_format: str = ""  # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
    constraints: List[str] = None  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞
    
    # –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    tone: str = "professional"  # –¢–æ–Ω –æ–±—â–µ–Ω–∏—è (professional, friendly, technical)
    verbosity: str = "medium"  # –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å (brief, medium, detailed)
    creativity: str = "balanced"  # –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (conservative, balanced, creative)
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã
    examples: List[str] = None  # –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    error_handling: str = ""  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    quality_criteria: List[str] = None  # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    context_awareness: float = 0.5  # –£—á—ë—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (0.0-1.0)
    user_adaptation: float = 0.5  # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (0.0-1.0)
    task_specialization: float = 0.5  # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∑–∞–¥–∞—á–∏ (0.0-1.0)
    
    def __post_init__(self):
        if self.constraints is None:
            self.constraints = []
        if self.examples is None:
            self.examples = []
        if self.quality_criteria is None:
            self.quality_criteria = []

@dataclass
class PromptDNA:
    """üß¨ –î–ù–ö –ø—Ä–æ–º–ø—Ç–∞ - –ø–æ–ª–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    
    prompt_id: str  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–æ–º–ø—Ç–∞
    agent_type: str  # –¢–∏–ø –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–º–ø—Ç
    generation: int = 0  # –ü–æ–∫–æ–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    parent_ids: List[str] = None  # ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    birth_time: datetime = None
    
    # –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–¥
    genes: PromptGenes = None
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    usage_count: int = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    success_rate: float = 0.0  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—Ö–∞
    avg_quality_score: float = 0.0  # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    avg_execution_time: float = 0.0  # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    
    # –ò—Å—Ç–æ—Ä–∏—è —ç–≤–æ–ª—é—Ü–∏–∏
    mutations_count: int = 0
    crossover_count: int = 0
    
    def __post_init__(self):
        if self.parent_ids is None:
            self.parent_ids = []
        if self.birth_time is None:
            self.birth_time = datetime.now()
        if self.genes is None:
            self.genes = PromptGenes()

@dataclass
class PromptPerformance:
    """üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º"""
    
    prompt_id: str
    task_type: str
    success: bool
    quality_score: float
    execution_time: float
    timestamp: datetime
    
    # –î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    user_feedback: Optional[str] = None
    error_details: Optional[str] = None
    output_length: int = 0
    context_relevance: float = 0.0

# === –ß–ê–°–¢–¨ 2: –≠–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò –ü–†–û–ú–ü–¢–û–í ===

class PromptEvolutionEngine:
    """üß† –î–≤–∏–∂–æ–∫ —ç–≤–æ–ª—é—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    def __init__(self, storage_path: str = "./prompt_evolution_storage"):
        self.storage_path = Path(storage_path)
        self.storage_path.mkdir(exist_ok=True)
        
        # –ü–æ–ø—É–ª—è—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
        self.prompt_population: Dict[str, PromptDNA] = {}
        self.performance_history: List[PromptPerformance] = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–≤–æ–ª—é—Ü–∏–∏
        self.mutation_rate = 0.15
        self.crossover_rate = 0.25
        self.max_population = 50
        self.min_population = 10
        
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è –º—É—Ç–∞—Ü–∏–π
        self.mutation_templates = self._load_mutation_templates()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã
        self._load_prompt_population()
        
        logger.info(f"üß† PromptEvolutionEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üìä –ü–æ–ø—É–ª—è—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: {len(self.prompt_population)}")
    
    def create_initial_prompt(self, agent_type: str, task_domain: str = "general") -> PromptDNA:
        """üå± –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞"""
        
        prompt_id = f"prompt_{agent_type}_{int(datetime.now().timestamp())}_{random.randint(1000, 9999)}"
        
        # –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
        base_templates = {
            "code": {
                "role_definition": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.",
                "task_instructions": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É, —Å–æ–∑–¥–∞–≤–∞–π —á–∏—Å—Ç—ã–π –∫–æ–¥ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏, —Ç–µ—Å—Ç–∏—Ä—É–π —Ä–µ—à–µ–Ω–∏–µ.",
                "output_format": "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –≥–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–¥ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏.",
                "constraints": ["–ò—Å–ø–æ–ª—å–∑—É–π –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "–î–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–ª–æ–∂–Ω—ã–º —É—á–∞—Å—Ç–∫–∞–º"],
                "quality_criteria": ["–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞", "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å"]
            },
            "web": {
                "role_definition": "–¢—ã –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.",
                "task_instructions": "–°–æ–∑–¥–∞–≤–∞–π responsive –¥–∏–∑–∞–π–Ω, –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–π UX.",
                "output_format": "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å HTML/CSS/JS –∫–æ–¥ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
                "constraints": ["–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –±—Ä–∞—É–∑–µ—Ä–∞–º–∏", "–ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å"],
                "quality_criteria": ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç", "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏", "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"]
            },
            "analysis": {
                "role_definition": "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                "task_instructions": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ, –≤—ã—è–≤–ª—è–π –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –¥–µ–ª–∞–π –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã.",
                "output_format": "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.",
                "constraints": ["–û–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å"],
                "quality_criteria": ["–¢–æ—á–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–æ–≤", "–ü–æ–ª–Ω–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞", "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å"]
            },
            "general": {
                "role_definition": "–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–ø–æ—Å–æ–±–Ω—ã–π —Ä–µ—à–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏.",
                "task_instructions": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É, –≤—ã–±–∏—Ä–∞–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –≤—ã–ø–æ–ª–Ω—è–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ.",
                "output_format": "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∑–∞–¥–∞—á–∏.",
                "constraints": ["–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ç–∏–ø –∑–∞–¥–∞—á–∏", "–Ø—Å–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è"],
                "quality_criteria": ["–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º", "–ü–æ–ª–Ω–æ—Ç–∞ —Ä–µ—à–µ–Ω–∏—è", "–ü–æ–Ω—è—Ç–Ω–æ—Å—Ç—å"]
            }
        }
        
        template = base_templates.get(agent_type, base_templates["general"])
        
        # –°–æ–∑–¥–∞—ë–º –≥–µ–Ω—ã –ø—Ä–æ–º–ø—Ç–∞
        genes = PromptGenes(
            role_definition=template["role_definition"],
            task_instructions=template["task_instructions"],
            output_format=template["output_format"],
            constraints=template["constraints"].copy(),
            examples=[],
            error_handling="–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏—á–∏–Ω—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.",
            quality_criteria=template["quality_criteria"].copy(),
            tone="professional",
            verbosity="medium",
            creativity="balanced",
            context_awareness=random.uniform(0.4, 0.6),
            user_adaptation=random.uniform(0.4, 0.6),
            task_specialization=random.uniform(0.4, 0.6)
        )
        
        # –°–æ–∑–¥–∞—ë–º –î–ù–ö –ø—Ä–æ–º–ø—Ç–∞
        prompt_dna = PromptDNA(
            prompt_id=prompt_id,
            agent_type=agent_type,
            generation=0,
            genes=genes
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–ø—É–ª—è—Ü–∏—é
        self.prompt_population[prompt_id] = prompt_dna
        self._save_prompt_population()
        
        logger.info(f"üå± –°–æ–∑–¥–∞–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç {prompt_id} –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_type}")
        return prompt_dna
    
    def mutate_prompt(self, prompt_dna: PromptDNA, mutation_strength: float = 1.0) -> PromptDNA:
        """üîÑ –ú—É—Ç–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""
        
        # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –ø—Ä–æ–º–ø—Ç–∞
        mutated_genes = PromptGenes(
            role_definition=prompt_dna.genes.role_definition,
            task_instructions=prompt_dna.genes.task_instructions,
            output_format=prompt_dna.genes.output_format,
            constraints=prompt_dna.genes.constraints.copy(),
            examples=prompt_dna.genes.examples.copy(),
            error_handling=prompt_dna.genes.error_handling,
            quality_criteria=prompt_dna.genes.quality_criteria.copy(),
            tone=prompt_dna.genes.tone,
            verbosity=prompt_dna.genes.verbosity,
            creativity=prompt_dna.genes.creativity,
            context_awareness=prompt_dna.genes.context_awareness,
            user_adaptation=prompt_dna.genes.user_adaptation,
            task_specialization=prompt_dna.genes.task_specialization
        )
        
        mutations_applied = []
        
        # –ú—É—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if random.random() < self.mutation_rate * mutation_strength:
            # –ú—É—Ç–∞—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏
            mutated_genes.role_definition = self._mutate_text(
                mutated_genes.role_definition, "role", prompt_dna.agent_type
            )
            mutations_applied.append("role_definition")
        
        if random.random() < self.mutation_rate * mutation_strength:
            # –ú—É—Ç–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            mutated_genes.task_instructions = self._mutate_text(
                mutated_genes.task_instructions, "instructions", prompt_dna.agent_type
            )
            mutations_applied.append("task_instructions")
        
        if random.random() < self.mutation_rate * mutation_strength:
            # –ú—É—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
            mutated_genes.output_format = self._mutate_text(
                mutated_genes.output_format, "output", prompt_dna.agent_type
            )
            mutations_applied.append("output_format")
        
        # –ú—É—Ç–∞—Ü–∏—è —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if random.random() < self.mutation_rate * mutation_strength:
            tones = ["professional", "friendly", "technical", "creative", "formal"]
            mutated_genes.tone = random.choice([t for t in tones if t != mutated_genes.tone])
            mutations_applied.append("tone")
        
        if random.random() < self.mutation_rate * mutation_strength:
            verbosities = ["brief", "medium", "detailed", "comprehensive"]
            mutated_genes.verbosity = random.choice([v for v in verbosities if v != mutated_genes.verbosity])
            mutations_applied.append("verbosity")
        
        if random.random() < self.mutation_rate * mutation_strength:
            creativities = ["conservative", "balanced", "creative", "innovative"]
            mutated_genes.creativity = random.choice([c for c in creativities if c != mutated_genes.creativity])
            mutations_applied.append("creativity")
        
        # –ú—É—Ç–∞—Ü–∏—è —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if random.random() < self.mutation_rate * mutation_strength:
            delta = random.uniform(-0.2, 0.2) * mutation_strength
            mutated_genes.context_awareness = max(0.0, min(1.0, mutated_genes.context_awareness + delta))
            mutations_applied.append("context_awareness")
        
        if random.random() < self.mutation_rate * mutation_strength:
            delta = random.uniform(-0.2, 0.2) * mutation_strength
            mutated_genes.user_adaptation = max(0.0, min(1.0, mutated_genes.user_adaptation + delta))
            mutations_applied.append("user_adaptation")
        
        if random.random() < self.mutation_rate * mutation_strength:
            delta = random.uniform(-0.2, 0.2) * mutation_strength
            mutated_genes.task_specialization = max(0.0, min(1.0, mutated_genes.task_specialization + delta))
            mutations_applied.append("task_specialization")
        
        # –ú—É—Ç–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        if random.random() < self.mutation_rate * mutation_strength * 0.5:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            new_constraint = self._generate_constraint(prompt_dna.agent_type)
            if new_constraint and new_constraint not in mutated_genes.constraints:
                mutated_genes.constraints.append(new_constraint)
                mutations_applied.append("add_constraint")
        
        if random.random() < self.mutation_rate * mutation_strength * 0.3 and len(mutated_genes.constraints) > 1:
            # –£–¥–∞–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            mutated_genes.constraints.pop(random.randint(0, len(mutated_genes.constraints) - 1))
            mutations_applied.append("remove_constraint")
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        mutated_id = f"mut_{prompt_dna.prompt_id}_{int(datetime.now().timestamp())}"
        mutated_prompt = PromptDNA(
            prompt_id=mutated_id,
            agent_type=prompt_dna.agent_type,
            generation=prompt_dna.generation + 1,
            parent_ids=[prompt_dna.prompt_id],
            genes=mutated_genes,
            mutations_count=prompt_dna.mutations_count + 1
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–ø—É–ª—è—Ü–∏—é
        self.prompt_population[mutated_id] = mutated_prompt
        
        logger.info(f"üîÑ –ú—É—Ç–∞—Ü–∏—è {prompt_dna.prompt_id} ‚Üí {mutated_id}: {', '.join(mutations_applied)}")
        return mutated_prompt
    
    def crossover_prompts(self, parent1: PromptDNA, parent2: PromptDNA) -> PromptDNA:
        """üß¨ –°–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ –¥–≤—É—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
        
        # –°–æ–∑–¥–∞—ë–º –≥–∏–±—Ä–∏–¥–Ω—ã–µ –≥–µ–Ω—ã
        hybrid_genes = PromptGenes()
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç –∫–∞–∂–¥–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        if parent1.success_rate > parent2.success_rate:
            stronger_parent, weaker_parent = parent1, parent2
        else:
            stronger_parent, weaker_parent = parent2, parent1
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã - –æ—Ç –±–æ–ª–µ–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        hybrid_genes.role_definition = stronger_parent.genes.role_definition
        hybrid_genes.task_instructions = stronger_parent.genes.task_instructions
        
        # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ - –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º
        if random.random() < 0.5:
            hybrid_genes.output_format = stronger_parent.genes.output_format
        else:
            hybrid_genes.output_format = weaker_parent.genes.output_format
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è - –æ–±—ä–µ–¥–∏–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
        all_constraints = stronger_parent.genes.constraints + weaker_parent.genes.constraints
        hybrid_genes.constraints = list(set(all_constraints))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        
        # –ü—Ä–∏–º–µ—Ä—ã - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ª—É—á—à–∏–µ
        all_examples = stronger_parent.genes.examples + weaker_parent.genes.examples
        hybrid_genes.examples = list(set(all_examples))[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 –ø—Ä–∏–º–µ—Ä–æ–≤
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ - –æ–±—ä–µ–¥–∏–Ω—è–µ–º
        all_criteria = stronger_parent.genes.quality_criteria + weaker_parent.genes.quality_criteria
        hybrid_genes.quality_criteria = list(set(all_criteria))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –æ—Ç –ª—É—á—à–µ–≥–æ
        hybrid_genes.error_handling = stronger_parent.genes.error_handling
        
        # –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã - —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
        hybrid_genes.tone = random.choice([parent1.genes.tone, parent2.genes.tone])
        hybrid_genes.verbosity = random.choice([parent1.genes.verbosity, parent2.genes.verbosity])
        hybrid_genes.creativity = random.choice([parent1.genes.creativity, parent2.genes.creativity])
        
        # –ß–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π
        hybrid_genes.context_awareness = (parent1.genes.context_awareness + parent2.genes.context_awareness) / 2
        hybrid_genes.user_adaptation = (parent1.genes.user_adaptation + parent2.genes.user_adaptation) / 2
        hybrid_genes.task_specialization = (parent1.genes.task_specialization + parent2.genes.task_specialization) / 2
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω—É—é –≤–∞—Ä–∏–∞—Ü–∏—é
        hybrid_genes.context_awareness += random.uniform(-0.1, 0.1)
        hybrid_genes.user_adaptation += random.uniform(-0.1, 0.1)
        hybrid_genes.task_specialization += random.uniform(-0.1, 0.1)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        hybrid_genes.context_awareness = max(0.0, min(1.0, hybrid_genes.context_awareness))
        hybrid_genes.user_adaptation = max(0.0, min(1.0, hybrid_genes.user_adaptation))
        hybrid_genes.task_specialization = max(0.0, min(1.0, hybrid_genes.task_specialization))
        
        # –°–æ–∑–¥–∞—ë–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        hybrid_id = f"cross_{parent1.agent_type}_{int(datetime.now().timestamp())}_{random.randint(100, 999)}"
        hybrid_prompt = PromptDNA(
            prompt_id=hybrid_id,
            agent_type=parent1.agent_type,  # –¢–∏–ø –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
            generation=max(parent1.generation, parent2.generation) + 1,
            parent_ids=[parent1.prompt_id, parent2.prompt_id],
            genes=hybrid_genes,
            crossover_count=max(parent1.crossover_count, parent2.crossover_count) + 1
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–ø—É–ª—è—Ü–∏—é
        self.prompt_population[hybrid_id] = hybrid_prompt
        
        logger.info(f"üß¨ –°–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ {parent1.prompt_id} √ó {parent2.prompt_id} ‚Üí {hybrid_id}")
        return hybrid_prompt
    
    def _mutate_text(self, original_text: str, text_type: str, agent_type: str) -> str:
        """‚úèÔ∏è –ú—É—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞"""
        
        # –ü—Ä–æ—Å—Ç—ã–µ –º—É—Ç–∞—Ü–∏–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
        modifiers = {
            "role": [
                "–æ–ø—ã—Ç–Ω—ã–π", "—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π", "–≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
                "–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π", "–¥–µ—Ç–∞–ª—å–Ω—ã–π", "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π"
            ],
            "instructions": [
                "—Ç—â–∞—Ç–µ–ª—å–Ω–æ", "–¥–µ—Ç–∞–ª—å–Ω–æ", "—Å–∏—Å—Ç–µ–º–Ω–æ", "–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ",
                "–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ", "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ", "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ"
            ],
            "output": [
                "—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "–ø–æ–¥—Ä–æ–±–Ω—ã–π", "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "–ø–æ–Ω—è—Ç–Ω—ã–π",
                "–ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π", "–≥–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"
            ]
        }
        
        mutation_type = random.choice(["add_modifier", "replace_word", "add_clause"])
        
        if mutation_type == "add_modifier" and text_type in modifiers:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            modifier = random.choice(modifiers[text_type])
            if modifier not in original_text.lower():
                # –í—Å—Ç–∞–≤–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ
                words = original_text.split()
                if len(words) > 2:
                    insert_pos = random.randint(1, min(3, len(words) - 1))
                    words.insert(insert_pos, modifier)
                    return " ".join(words)
        
        elif mutation_type == "replace_word":
            # –ó–∞–º–µ–Ω—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
            synonyms = {
                "—Å–æ–∑–¥–∞–≤–∞–π": ["—Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–π", "—Ñ–æ—Ä–º–∏—Ä—É–π", "–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏"],
                "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π": ["–∏—Å—Å–ª–µ–¥—É–π", "–∏–∑—É—á–∞–π", "—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–π", "–æ—Ü–µ–Ω–∏–≤–∞–π"],
                "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π": ["–≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "–æ—Ç–ª–∏—á–Ω—ã–π", "–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π"],
                "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π": ["—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π", "–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π", "–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π", "—É—Å–ø–µ—à–Ω—ã–π"]
            }
            
            for word, replacements in synonyms.items():
                if word in original_text.lower():
                    replacement = random.choice(replacements)
                    return original_text.replace(word, replacement)
        
        elif mutation_type == "add_clause":
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ–∑–Ω—É—é —Ñ—Ä–∞–∑—É
            additional_clauses = {
                "role": [
                    ", —É—á–∏—Ç—ã–≤–∞—é—â–∏–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏",
                    ", –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ",
                    ", —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"
                ],
                "instructions": [
                    " –û–±–µ—Å–ø–µ—á—å –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.",
                    " –£—á–∏—Ç—ã–≤–∞–π –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏.",
                    " –ü—Ä–æ–≤–µ—Ä—è–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è."
                ],
                "output": [
                    " —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏",
                    " –≥–æ—Ç–æ–≤—ã–π –∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é",
                    " —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
                ]
            }
            
            if text_type in additional_clauses:
                clause = random.choice(additional_clauses[text_type])
                return original_text + clause
        
        return original_text  # –ï—Å–ª–∏ –º—É—Ç–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∞—Å—å
    
    def _generate_constraint(self, agent_type: str) -> Optional[str]:
        """üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        
        constraints_pool = {
            "code": [
                "–°–ª–µ–¥—É–π –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID",
                "–ò—Å–ø–æ–ª—å–∑—É–π type hints –≤ Python",
                "–î–æ–±–∞–≤–ª—è–π docstrings –∫ —Ñ—É–Ω–∫—Ü–∏—è–º",
                "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
            ],
            "web": [
                "–û–±–µ—Å–ø–µ—á—å accessibility (a11y)",
                "–ò—Å–ø–æ–ª—å–∑—É–π —Å–µ–º–∞–Ω—Ç–∏—á–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –¥–ª—è SEO",
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π Progressive Web App",
                "–ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π —Ä–∞–∑–º–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤"
            ],
            "analysis": [
                "–ü—Ä–æ–≤–µ—Ä—è–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å",
                "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                "–í–∞–ª–∏–¥–∏—Ä—É–π –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã",
                "–£—á–∏—Ç—ã–≤–∞–π –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è"
            ],
            "general": [
                "–ü—Ä–æ–≤–µ—Ä—è–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ª–æ–≥–∏—á–Ω–æ",
                "–ü—Ä–∏–≤–æ–¥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã",
                "–£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏",
                "–ü—Ä–µ–¥–ª–∞–≥–∞–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"
            ]
        }
        
        pool = constraints_pool.get(agent_type, constraints_pool["general"])
        return random.choice(pool) if pool else None
    
    # === –ß–ê–°–¢–¨ 4A: –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===
    
    def record_prompt_performance(self, prompt_id: str, task_type: str, success: bool, 
                                quality_score: float, execution_time: float, **kwargs):
        """üìä –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞"""
        
        if prompt_id not in self.prompt_population:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç {prompt_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–ø—É–ª—è—Ü–∏–∏")
            return
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        performance = PromptPerformance(
            prompt_id=prompt_id,
            task_type=task_type,
            success=success,
            quality_score=quality_score,
            execution_time=execution_time,
            timestamp=datetime.now(),
            **kwargs
        )
        
        self.performance_history.append(performance)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–ø—Ç–∞
        prompt = self.prompt_population[prompt_id]
        prompt.usage_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º success rate
        old_success = prompt.success_rate
        new_success = (old_success * (prompt.usage_count - 1) + (1.0 if success else 0.0)) / prompt.usage_count
        prompt.success_rate = new_success
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
        old_quality = prompt.avg_quality_score
        new_quality = (old_quality * (prompt.usage_count - 1) + quality_score) / prompt.usage_count
        prompt.avg_quality_score = new_quality
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        old_time = prompt.avg_execution_time
        new_time = (old_time * (prompt.usage_count - 1) + execution_time) / prompt.usage_count
        prompt.avg_execution_time = new_time
        
        logger.debug(f"üìä –ü—Ä–æ–º–ø—Ç {prompt_id}: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π {prompt.usage_count}, —É—Å–ø–µ—Ö {new_success:.2f}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        self._save_prompt_population()
    
    def get_best_prompt(self, agent_type: str, task_type: str = None) -> Optional[PromptDNA]:
        """üèÜ –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∞–≥–µ–Ω—Ç–∞
        candidates = [p for p in self.prompt_population.values() if p.agent_type == agent_type]
        
        if not candidates:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö
            return self.create_initial_prompt(agent_type)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º success rate –∏ quality score)
        def prompt_fitness(prompt: PromptDNA) -> float:
            if prompt.usage_count == 0:
                return 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
            fitness = (
                prompt.success_rate * 0.4 +
                prompt.avg_quality_score * 0.4 +
                (1.0 - min(prompt.avg_execution_time / 60.0, 1.0)) * 0.2  # –®—Ç—Ä–∞—Ñ –∑–∞ –¥–æ–ª–≥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            )
            
            # –ë–æ–Ω—É—Å –∑–∞ –±–æ–ª—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (–Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π)
            usage_bonus = min(prompt.usage_count / 10.0, 0.1)
            fitness += usage_bonus
            
            return fitness
        
        best_prompt = max(candidates, key=prompt_fitness)
        return best_prompt
    
    def evolve_prompts(self, agent_type: str = None):
        """üå± –≠–≤–æ–ª—é—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∞–≥–µ–Ω—Ç–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if agent_type:
            population = {k: v for k, v in self.prompt_population.items() if v.agent_type == agent_type}
        else:
            population = self.prompt_population
        
        if len(population) < 2:
            logger.info("üß† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏")
            return
        
        logger.info(f"üß† –ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ (–ø–æ–ø—É–ª—è—Ü–∏—è: {len(population)})")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏
        sorted_prompts = sorted(population.values(), key=self._calculate_prompt_fitness, reverse=True)
        
        evolution_count = 0
        
        # –ú—É—Ç–∏—Ä—É–µ–º —Ö—É–¥—à–∏–µ –ø—Ä–æ–º–ø—Ç—ã (–Ω–∏–∂–Ω–∏–µ 30%)
        worst_count = max(1, len(sorted_prompts) // 3)
        worst_prompts = sorted_prompts[-worst_count:]
        
        for prompt in worst_prompts:
            if random.random() < 0.4:  # 40% —à–∞–Ω—Å –º—É—Ç–∞—Ü–∏–∏
                mutated = self.mutate_prompt(prompt, mutation_strength=1.2)
                evolution_count += 1
        
        # –°–∫—Ä–µ—â–∏–≤–∞–µ–º –ª—É—á—à–∏–µ –ø—Ä–æ–º–ø—Ç—ã (–≤–µ—Ä—Ö–Ω–∏–µ 50%)
        best_count = max(2, len(sorted_prompts) // 2)
        best_prompts = sorted_prompts[:best_count]
        
        if len(best_prompts) >= 2:
            for i in range(0, len(best_prompts) - 1, 2):
                if random.random() < 0.3:  # 30% —à–∞–Ω—Å —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è
                    child = self.crossover_prompts(best_prompts[i], best_prompts[i + 1])
                    evolution_count += 1
        
        # –£–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–æ–º –ø–æ–ø—É–ª—è—Ü–∏–∏
        self._manage_prompt_population_size()
        
        logger.info(f"üß† –≠–≤–æ–ª—é—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {evolution_count} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        self._save_prompt_population()
    
    def _calculate_prompt_fitness(self, prompt: PromptDNA) -> float:
        """üí™ –†–∞—Å—á—ë—Ç –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–∞"""
        
        if prompt.usage_count == 0:
            return 0.5  # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
        
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å
        fitness = (
            prompt.success_rate * 0.5 +           # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å
            prompt.avg_quality_score * 0.3 +      # –ö–∞—á–µ—Å—Ç–≤–æ
            min(prompt.usage_count / 20.0, 0.2)   # –û–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–º–∞–∫—Å 0.2)
        )
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        time_penalty = min(prompt.avg_execution_time / 120.0, 0.1)  # –ú–∞–∫—Å —à—Ç—Ä–∞—Ñ 0.1
        fitness -= time_penalty
        
        # –ë–æ–Ω—É—Å –∑–∞ –Ω–æ–≤–∏–∑–Ω—É (–º–æ–ª–æ–¥—ã–µ –ø—Ä–æ–º–ø—Ç—ã –ø–æ–ª—É—á–∞—é—Ç –Ω–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å)
        age_days = (datetime.now() - prompt.birth_time).days
        if age_days < 7:  # –ù–µ–¥–µ–ª—è
            fitness += 0.05
        
        return max(0.0, min(1.0, fitness))
    
    def _manage_prompt_population_size(self):
        """üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º –ø–æ–ø—É–ª—è—Ü–∏–∏"""
        
        if len(self.prompt_population) <= self.max_population:
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        prompts_by_fitness = sorted(
            self.prompt_population.values(),
            key=self._calculate_prompt_fitness,
            reverse=True
        )
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏—Ö
        survivors = prompts_by_fitness[:self.max_population]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é
        self.prompt_population = {prompt.prompt_id: prompt for prompt in survivors}
        
        logger.info(f"üìä –ü–æ–ø—É–ª—è—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ —Å–æ–∫—Ä–∞—â–µ–Ω–∞ –¥–æ {len(self.prompt_population)}")
    
    def get_population_stats(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø—É–ª—è—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        
        if not self.prompt_population:
            return {
                'population_size': 0,
                'avg_success': 0.0,
                'max_generation': 0,
                'total_mutations': 0,
                'total_crossovers': 0,
                'agent_types': []
            }
        
        prompts = list(self.prompt_population.values())
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        population_size = len(prompts)
        avg_success = sum(p.success_rate for p in prompts) / population_size if prompts else 0.0
        max_generation = max(p.generation for p in prompts) if prompts else 0
        total_mutations = sum(p.mutations_count for p in prompts)
        total_crossovers = sum(p.crossover_count for p in prompts)
        
        # –¢–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤
        agent_types = list(set(p.agent_type for p in prompts))
        
        return {
            'population_size': population_size,
            'avg_success': avg_success,
            'max_generation': max_generation,
            'total_mutations': total_mutations,
            'total_crossovers': total_crossovers,
            'agent_types': agent_types
        }
    
    def _load_mutation_templates(self) -> Dict[str, List[str]]:
        """üìö –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –º—É—Ç–∞—Ü–∏–π"""
        return {
            "role_enhancers": ["—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π", "–æ–ø—ã—Ç–Ω—ã–π", "–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"],
            "instruction_modifiers": ["—Ç—â–∞—Ç–µ–ª—å–Ω–æ", "—Å–∏—Å—Ç–µ–º–Ω–æ", "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ", "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ"],
            "output_enhancers": ["—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "–¥–µ—Ç–∞–ª—å–Ω—ã–π", "–ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π", "–≥–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"]
        }
    
    def _save_prompt_population(self):
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        try:
            population_file = self.storage_path / "prompt_population.json"
            history_file = self.storage_path / "performance_history.json"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é
            population_data = {k: asdict(v) for k, v in self.prompt_population.items()}
            with open(population_file, 'w', encoding='utf-8') as f:
                json.dump(population_data, f, indent=2, default=str)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 –∑–∞–ø–∏—Å–µ–π)
            recent_history = self.performance_history[-500:]
            history_data = [asdict(h) for h in recent_history]
            with open(history_file, 'w', encoding='utf-8') as f:
                json.dump(history_data, f, indent=2, default=str)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
    
    def _load_prompt_population(self):
        """üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        try:
            population_file = self.storage_path / "prompt_population.json"
            if population_file.exists():
                with open(population_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                for prompt_id, prompt_data in data.items():
                    prompt_dna = self._dict_to_prompt_dna(prompt_data)
                    self.prompt_population[prompt_id] = prompt_dna
                
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.prompt_population)} –ø—Ä–æ–º–ø—Ç–æ–≤")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
    
    def _dict_to_prompt_dna(self, data: dict) -> PromptDNA:
        """üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –≤ PromptDNA"""
        genes_data = data.get("genes", {})
        genes = PromptGenes(**genes_data)
        
        birth_time_str = data.get("birth_time")
        birth_time = datetime.fromisoformat(birth_time_str) if birth_time_str else datetime.now()
        
        return PromptDNA(
            prompt_id=data["prompt_id"],
            agent_type=data["agent_type"],
            generation=data.get("generation", 0),
            parent_ids=data.get("parent_ids", []),
            birth_time=birth_time,
            genes=genes,
            usage_count=data.get("usage_count", 0),
            success_rate=data.get("success_rate", 0.0),
            avg_quality_score=data.get("avg_quality_score", 0.0),
            avg_execution_time=data.get("avg_execution_time", 0.0),
            mutations_count=data.get("mutations_count", 0),
            crossover_count=data.get("crossover_count", 0)
        )


# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

_global_prompt_engine = None

def get_prompt_evolution_engine(storage_path: str = "./prompt_evolution_storage") -> PromptEvolutionEngine:
    """üß† –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    global _global_prompt_engine
    if _global_prompt_engine is None:
        _global_prompt_engine = PromptEvolutionEngine(storage_path)
    return _global_prompt_engine

def get_evolved_prompt(agent_type: str, task_type: str = None) -> PromptDNA:
    """üéØ –ü–æ–ª—É—á–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    engine = get_prompt_evolution_engine()
    return engine.get_best_prompt(agent_type, task_type)

def record_prompt_usage(prompt_id: str, task_type: str, success: bool, quality_score: float, execution_time: float):
    """üìä –ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"""
    engine = get_prompt_evolution_engine()
    engine.record_prompt_performance(prompt_id, task_type, success, quality_score, execution_time)

def evolve_all_prompts():
    """üå± –ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏—é –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    engine = get_prompt_evolution_engine()
    engine.evolve_prompts()

def generate_prompt_text(prompt_dna: PromptDNA) -> str:
    """üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –î–ù–ö"""
    
    genes = prompt_dna.genes
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–º–ø—Ç–∞
    prompt_parts = []
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
    if genes.role_definition:
        prompt_parts.append(f"**–†–æ–ª—å:** {genes.role_definition}")
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
    if genes.task_instructions:
        tone_modifier = {
            "professional": "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ",
            "friendly": "–¥—Ä—É–∂–µ–ª—é–±–Ω–æ", 
            "technical": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω–æ",
            "creative": "–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ",
            "formal": "—Ñ–æ—Ä–º–∞–ª—å–Ω–æ"
        }.get(genes.tone, "")
        
        verbosity_modifier = {
            "brief": "–ë—É–¥—å –∫—Ä–∞—Ç–æ–∫.",
            "medium": "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ç–∞–ª–µ–π.",
            "detailed": "–ë—É–¥—å –ø–æ–¥—Ä–æ–±–Ω—ã–º.",
            "comprehensive": "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
        }.get(genes.verbosity, "")
        
        instruction_text = genes.task_instructions
        if tone_modifier:
            instruction_text += f" –†–∞–±–æ—Ç–∞–π {tone_modifier}."
        if verbosity_modifier:
            instruction_text += f" {verbosity_modifier}"
            
        prompt_parts.append(f"**–ó–∞–¥–∞—á–∞:** {instruction_text}")
    
    # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
    if genes.output_format:
        prompt_parts.append(f"**–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:** {genes.output_format}")
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    if genes.constraints:
        constraints_text = "\n".join([f"- {constraint}" for constraint in genes.constraints])
        prompt_parts.append(f"**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n{constraints_text}")
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    if genes.quality_criteria:
        criteria_text = "\n".join([f"- {criterion}" for criterion in genes.quality_criteria])
        prompt_parts.append(f"**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞:**\n{criteria_text}")
    
    # –ü—Ä–∏–º–µ—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if genes.examples:
        examples_text = "\n".join([f"- {example}" for example in genes.examples[:3]])  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–∏–º–µ—Ä–∞
        prompt_parts.append(f"**–ü—Ä–∏–º–µ—Ä—ã:**\n{examples_text}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if genes.error_handling:
        prompt_parts.append(f"**–ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö:** {genes.error_handling}")
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    adaptive_instructions = []
    
    if genes.context_awareness > 0.7:
        adaptive_instructions.append("–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.")
    
    if genes.user_adaptation > 0.7:
        adaptive_instructions.append("–ê–¥–∞–ø—Ç–∏—Ä—É–π —Å—Ç–∏–ª—å –ø–æ–¥ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    if genes.task_specialization > 0.7:
        adaptive_instructions.append("–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Å—è –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏.")
    
    if adaptive_instructions:
        prompt_parts.append(f"**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:** {' '.join(adaptive_instructions)}")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    final_prompt = "\n\n".join(prompt_parts)
    
    return final_prompt


if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —ç–≤–æ–ª—é—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
    print("üß† –¢–µ—Å—Ç PromptEvolutionEngine")
    
    engine = PromptEvolutionEngine("./test_prompt_evolution")
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
    code_prompt = engine.create_initial_prompt("code")
    web_prompt = engine.create_initial_prompt("web")
    analysis_prompt = engine.create_initial_prompt("analysis")
    
    print(f"–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(engine.prompt_population)}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
    engine.record_prompt_performance(code_prompt.prompt_id, "programming", True, 0.8, 15.0)
    engine.record_prompt_performance(code_prompt.prompt_id, "programming", True, 0.9, 12.0)
    engine.record_prompt_performance(web_prompt.prompt_id, "web_development", False, 0.4, 25.0)
    engine.record_prompt_performance(analysis_prompt.prompt_id, "data_analysis", True, 0.7, 20.0)
    
    print(f"Code –ø—Ä–æ–º–ø—Ç: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π {code_prompt.usage_count}, —É—Å–ø–µ—Ö {code_prompt.success_rate:.2f}")
    
    # –≠–≤–æ–ª—é—Ü–∏—è
    engine.evolve_prompts()
    
    # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–π –ø—Ä–æ–º–ø—Ç
    best_code_prompt = engine.get_best_prompt("code")
    print(f"–õ—É—á—à–∏–π code –ø—Ä–æ–º–ø—Ç: {best_code_prompt.prompt_id}, –ø–æ–∫–æ–ª–µ–Ω–∏–µ {best_code_prompt.generation}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
    prompt_text = generate_prompt_text(best_code_prompt)
    print(f"–î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(prompt_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!") 