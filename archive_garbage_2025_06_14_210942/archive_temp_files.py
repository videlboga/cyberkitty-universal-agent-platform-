#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ KittyCore 3.0
"""
import os
import glob
import re
import shutil
from pathlib import Path
from datetime import datetime

def find_temp_files():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    temp_patterns = [
        # –§–∞–π–ª—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
        "generated_*.html",
        "—Ñ–∞–π–ª_*.txt", 
        "—Ñ–∞–π–ª_*.html",
        "*_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].*",
        
        # –ü—É—Å—Ç—ã–µ –∏–ª–∏ –ø–æ—á—Ç–∏ –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
        "*.html",  # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä
        "*.txt",   # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä
        "*.js",    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä
        "*.css",   # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä
        "*.json",  # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä
        "*.py",    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä
        "*.csv",   # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä
        "*.pdf",   # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä
        "*.md",    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ (–Ω–µ –≤ –ø–∞–ø–∫–µ tests)
        "test_*.py",
        "demo_*.py",
        "check_*.py",
        
        # –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        "*.mp4",
        "*.avi",
        "*.mkv",
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        "config.html",
        "config.txt",
        "config.js",
        "demodata.json",
        "plan.json",
        "plan.txt",
        "results.txt",
        
        # –ü—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        "*"  # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä
    ]
    
    temp_files = []
    project_root = Path(".")
    
    for pattern in temp_patterns:
        for file_path in project_root.glob(pattern):
            if file_path.is_file():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
                if should_keep_file(file_path):
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
                if is_temp_by_size_or_content(file_path):
                    temp_files.append(file_path)
    
    return temp_files

def should_keep_file(file_path: Path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª"""
    keep_patterns = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        "__init__.py",
        "setup.py", 
        "requirements.txt",
        "README.md",
        "LICENSE",
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        "pyproject.toml",
        "setup.cfg",
        
        # Git —Ñ–∞–π–ª—ã
        ".gitignore",
        ".gitattributes",
        
        # –ù–∞—à–∏ —Å–∫—Ä–∏–ø—Ç—ã
        "cleanup_temp_files.py",
        "archive_temp_files.py"
    ]
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    keep_dirs = [
        "kittycore/",
        "agents/",
        ".git/",
        "__pycache__/",
        "obsidian-kittycore-plugin/",
        "obsidian_vault/",
        "archive_"  # –í—Å–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ –ø–∞–ø–∫–∏
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    if file_path.name in keep_patterns:
        return True
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤ –≤–∞–∂–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for keep_dir in keep_dirs:
        if str(file_path).startswith(keep_dir):
            return True
            
    return False

def is_temp_by_size_or_content(file_path: Path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"""
    try:
        size = file_path.stat().st_size
        
        # –ü—É—Å—Ç—ã–µ –∏–ª–∏ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã
        if size == 0:
            return True
        if size < 50 and file_path.suffix in ['.html', '.txt', '.js', '.css']:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if size < 1000:
            try:
                content = file_path.read_text(encoding='utf-8', errors='ignore')
                
                # –§–∞–π–ª—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                temp_indicators = [
                    "generated_",
                    "—Ñ–∞–π–ª_", 
                    "test result",
                    "temporary",
                    "temp file",
                    "placeholder"
                ]
                
                content_lower = content.lower()
                for indicator in temp_indicators:
                    if indicator in content_lower:
                        return True
                        
            except Exception:
                pass
                
        # –§–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∞–º/–ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        name = file_path.name
        if re.match(r'generated_\d+', name):
            return True
        if re.match(r'—Ñ–∞–π–ª_\d+', name):
            return True
        if name.startswith('test_') and not str(file_path).startswith('kittycore/tests/'):
            return True
        if name.startswith('demo_') and file_path.suffix == '.py':
            return True
            
    except Exception:
        pass
        
    return False

def create_archive_structure(archive_dir: Path, temp_files: list):
    """–°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞—Ä—Ö–∏–≤–∞ –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã"""
    archived_count = 0
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
    type_dirs = {
        '.html': archive_dir / 'html_files',
        '.txt': archive_dir / 'text_files', 
        '.py': archive_dir / 'python_files',
        '.js': archive_dir / 'javascript_files',
        '.css': archive_dir / 'css_files',
        '.json': archive_dir / 'json_files',
        '.csv': archive_dir / 'csv_files',
        '.pdf': archive_dir / 'pdf_files',
        '.md': archive_dir / 'markdown_files',
        '.mp4': archive_dir / 'media_files',
        '': archive_dir / 'no_extension'
    }
    
    # –°–æ–∑–¥–∞—ë–º –≤—Å–µ –ø–∞–ø–∫–∏
    for type_dir in type_dirs.values():
        type_dir.mkdir(parents=True, exist_ok=True)
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã
    for file_path in temp_files:
        try:
            file_type = file_path.suffix
            target_dir = type_dirs.get(file_type, archive_dir / 'other_files')
            target_dir.mkdir(parents=True, exist_ok=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —Ñ–∞–π–ª–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            target_file = target_dir / file_path.name
            counter = 1
            while target_file.exists():
                name_parts = file_path.stem, counter, file_path.suffix
                target_file = target_dir / f"{name_parts[0]}_{name_parts[1]}{name_parts[2]}"
                counter += 1
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
            shutil.move(str(file_path), str(target_file))
            archived_count += 1
            print(f"üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω: {file_path} -> {target_file.relative_to(archive_dir)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è {file_path}: {e}")
    
    return archived_count

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üì¶ –ù–∞—á–∏–Ω–∞—é –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ KittyCore 3.0...")
    
    temp_files = find_temp_files()
    
    if not temp_files:
        print("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
        
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(temp_files)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    by_type = {}
    total_size = 0
    
    for file_path in temp_files:
        file_type = file_path.suffix or "–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"
        if file_type not in by_type:
            by_type[file_type] = []
        by_type[file_type].append(file_path)
        
        try:
            total_size += file_path.stat().st_size
        except:
            pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for file_type, files in sorted(by_type.items()):
        print(f"  {file_type}: {len(files)} —Ñ–∞–π–ª–æ–≤")
        
    print(f"\nüíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:,} –±–∞–π—Ç ({total_size/1024:.1f} KB)")
    
    # –°–æ–∑–¥–∞—ë–º –∏–º—è –∞—Ä—Ö–∏–≤–Ω–æ–π –ø–∞–ø–∫–∏
    timestamp = datetime.now().strftime("%Y_%m_%d_%H%M%S")
    archive_dir = Path(f"archive_temp_files_{timestamp}")
    
    print(f"\nüì¶ –ê—Ä—Ö–∏–≤ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤: {archive_dir}")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input(f"\n‚ùì –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ {len(temp_files)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤? (y/N): ")
    
    if response.lower() in ['y', 'yes', '–¥–∞']:
        # –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤–Ω—É—é –ø–∞–ø–∫—É
        archive_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
        info_file = archive_dir / "ARCHIVE_INFO.txt"
        with open(info_file, 'w', encoding='utf-8') as f:
            f.write(f"–ê–†–•–ò–í –í–†–ï–ú–ï–ù–ù–´–• –§–ê–ô–õ–û–í KITTYCORE 3.0\n")
            f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {len(temp_files)}\n")
            f.write(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:,} –±–∞–π—Ç ({total_size/1024:.1f} KB)\n\n")
            f.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú:\n")
            for file_type, files in sorted(by_type.items()):
                f.write(f"  {file_type}: {len(files)} —Ñ–∞–π–ª–æ–≤\n")
                
        print(f"üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {info_file}")
        
        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        archived_count = create_archive_structure(archive_dir, temp_files)
                
        print(f"\n‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archived_count} –∏–∑ {len(temp_files)} —Ñ–∞–π–ª–æ–≤")
        print(f"üì¶ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω –≤: {archive_dir}")
        print(f"üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ ~{total_size/1024:.1f} KB –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞—Ä—Ö–∏–≤–∞
        print(f"\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞—Ä—Ö–∏–≤–∞:")
        for item in sorted(archive_dir.rglob("*")):
            if item.is_dir():
                file_count = len(list(item.glob("*")))
                if file_count > 0:
                    print(f"  üìÅ {item.relative_to(archive_dir)}/  ({file_count} —Ñ–∞–π–ª–æ–≤)")
                    
    else:
        print("‚ùå –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

if __name__ == "__main__":
    main() 