{
  "scenario_id": "neuroexpert_flow",
  "name": "–ù–µ–π—Ä–æ–≠–∫—Å–ø–µ—Ä—Ç",
  "description": "–†–µ—à–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á —Å –ø–æ—à–∞–≥–æ–≤—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π",
  "version": "1.0",
  "initial_context": {},
  "steps": [
    {
      "id": "start",
      "type": "start",
      "next_step": "load_user_context"
    },
    {
      "id": "load_user_context",
      "type": "switch_scenario",
      "params": {
        "target_scenario": "atomic_mongo_find_data",
        "preserve_context": true
      },
      "next_step": "log_task"
    },
    {
      "id": "log_task",
      "type": "switch_scenario",
      "params": {
        "target_scenario": "atomic_log_message",
        "preserve_context": true
      },
      "next_step": "analyze_task_complexity"
    },
    {
      "id": "analyze_task_complexity",
      "type": "switch_scenario",
      "params": {
        "target_scenario": "atomic_llm_query",
        "preserve_context": true
      },
      "next_step": "search_similar_solutions"
    },
    {
      "id": "search_similar_solutions",
      "type": "switch_scenario",
      "params": {
        "target_scenario": "atomic_rag_search",
        "preserve_context": true
      },
      "next_step": "check_user_level"
    },
    {
      "id": "check_user_level",
      "type": "branch",
      "params": {
        "condition": "exists({user_profile})",
        "true_step": "generate_personalized_solution",
        "false_step": "generate_generic_solution"
      }
    },
    {
      "id": "generate_personalized_solution",
      "type": "switch_scenario",
      "params": {
        "target_scenario": "atomic_llm_query",
        "preserve_context": true
      },
      "next_step": "save_solution"
    },
    {
      "id": "generate_generic_solution",
      "type": "switch_scenario",
      "params": {
        "target_scenario": "atomic_llm_query",
        "preserve_context": true
      },
      "next_step": "save_solution"
    },
    {
      "id": "save_solution",
      "type": "switch_scenario",
      "params": {
        "target_scenario": "atomic_mongo_save_data",
        "preserve_context": true
      },
      "next_step": "send_solution"
    },
    {
      "id": "send_solution",
      "type": "channel_action",
      "params": {
        "action": "send_message",
        "chat_id": "{chat_id}",
        "text": "üß† <b>–†–µ—à–µ–Ω–∏–µ –æ—Ç –ù–µ–π—Ä–æ–≠–∫—Å–ø–µ—Ä—Ç–∞:</b>\n\n{expert_solution}",
        "parse_mode": "HTML"
      },
      "next_step": "offer_clarification"
    },
    {
      "id": "offer_clarification",
      "type": "channel_action",
      "params": {
        "action": "send_buttons",
        "chat_id": "{chat_id}",
        "text": "ü§î <b>–ù—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è?</b>",
        "buttons": [
          [
            {
              "text": "üí° –û–±—ä—è—Å–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
              "callback_data": "explain_more"
            }
          ],
          [
            {
              "text": "üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
              "callback_data": "alternative_solution"
            }
          ],
          [
            {
              "text": "üìù –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä",
              "callback_data": "practical_example"
            }
          ],
          [
            {
              "text": "‚úÖ –í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ",
              "callback_data": "expert_done"
            }
          ]
        ],
        "parse_mode": "HTML"
      },
      "next_step": "wait_clarification_choice"
    },
    {
      "id": "wait_clarification_choice",
      "type": "input",
      "params": {
        "input_type": "callback_query",
        "timeout_seconds": 180,
        "output_var": "clarification_choice"
      },
      "next_step": "handle_clarification"
    },
    {
      "id": "handle_clarification",
      "type": "branch",
      "params": {
        "condition": "{clarification_choice} == 'explain_more'",
        "true_step": "detailed_explanation",
        "false_step": "check_alternative"
      }
    },
    {
      "id": "check_alternative",
      "type": "branch",
      "params": {
        "condition": "{clarification_choice} == 'alternative_solution'",
        "true_step": "alternative_solution",
        "false_step": "check_example"
      }
    },
    {
      "id": "check_example",
      "type": "branch",
      "params": {
        "condition": "{clarification_choice} == 'practical_example'",
        "true_step": "practical_example",
        "false_step": "end"
      }
    },
    {
      "id": "detailed_explanation",
      "type": "switch_scenario",
      "params": {
        "target_scenario": "atomic_llm_query",
        "preserve_context": true
      },
      "next_step": "send_detailed_explanation"
    },
    {
      "id": "send_detailed_explanation",
      "type": "channel_action",
      "params": {
        "action": "send_message",
        "chat_id": "{chat_id}",
        "text": "üìñ <b>–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b>\n\n{detailed_explanation_text}",
        "parse_mode": "HTML"
      },
      "next_step": "end"
    },
    {
      "id": "alternative_solution",
      "type": "switch_scenario",
      "params": {
        "target_scenario": "atomic_llm_query",
        "preserve_context": true
      },
      "next_step": "send_alternative_solution"
    },
    {
      "id": "send_alternative_solution",
      "type": "channel_action",
      "params": {
        "action": "send_message",
        "chat_id": "{chat_id}",
        "text": "üîÑ <b>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:</b>\n\n{alternative_solution_text}",
        "parse_mode": "HTML"
      },
      "next_step": "end"
    },
    {
      "id": "practical_example",
      "type": "switch_scenario",
      "params": {
        "target_scenario": "atomic_llm_query",
        "preserve_context": true
      },
      "next_step": "send_practical_example"
    },
    {
      "id": "send_practical_example",
      "type": "channel_action",
      "params": {
        "action": "send_message",
        "chat_id": "{chat_id}",
        "text": "üíª <b>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä:</b>\n\n{practical_example_text}",
        "parse_mode": "HTML"
      },
      "next_step": "end"
    },
    {
      "id": "end",
      "type": "end"
    }
  ]
}