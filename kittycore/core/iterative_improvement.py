"""
Iterative Agent Improvement - —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
–ó–∞–º–µ–Ω—è–µ—Ç ContentFixer –Ω–∞ —Ü–∏–∫–ª —É–ª—É—á—à–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
"""

import asyncio
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from loguru import logger

from ..llm import get_llm_provider
from agents.smart_validator import ValidationResult
from kittycore.core.agent_learning_system import learning_system


@dataclass
class ImprovementFeedback:
    """–§–∏–¥–±–µ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    issues: List[str]  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    recommendations: List[str]  # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    approach_changes: List[str]  # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–¥—Ö–æ–¥–µ
    tool_suggestions: List[str]  # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
    examples: List[str]  # –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    priority: str  # "critical", "high", "medium", "low"


@dataclass
class ImprovementAttempt:
    """–ü–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    attempt_number: int
    original_result: Dict[str, Any]
    validation: ValidationResult
    feedback: ImprovementFeedback
    improved_result: Optional[Dict[str, Any]] = None
    improved_validation: Optional[ValidationResult] = None
    success: bool = False


class IterativeImprovement:
    """–°–∏—Å—Ç–µ–º–∞ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –¥–µ—à—ë–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–¥–±–µ–∫–∞
        self.llm_provider = get_llm_provider("mistralai/ministral-8b")
        self.max_attempts = 3  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è
        self.target_score = 0.7  # –¶–µ–ª–µ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        logger.info("üîÑ IterativeImprovement –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def improve_agent_iteratively(self, 
                                      agent: Any,
                                      task: str,
                                      initial_result: Dict[str, Any],
                                      initial_validation: ValidationResult,
                                      smart_validator: Any) -> Tuple[Dict[str, Any], List[ImprovementAttempt]]:
        """
        –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ —É–ª—É—á—à–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        
        Returns:
            (final_result, improvement_history)
        """
        
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ (—Ü–µ–ª—å: {self.target_score:.1f})")
        
        attempts = []
        current_result = initial_result
        current_validation = initial_validation
        
        for attempt_num in range(1, self.max_attempts + 1):
            
            # –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ - –∑–∞–≤–µ—Ä—à–∞–µ–º
            if current_validation.score >= self.target_score:
                logger.info(f"‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt_num-1}: {current_validation.score:.1f}")
                break
            
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è #{attempt_num} (—Ç–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞: {current_validation.score:.1f})")
            
            # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–¥–±–µ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
            feedback = await self._generate_improvement_feedback(
                task, current_result, current_validation
            )
            
            # 2. –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –∫ –∞–≥–µ–Ω—Ç—É
            improved_agent = await self._apply_improvements_to_agent(
                agent, feedback, task
            )
            
            # 3. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            try:
                improved_result = await improved_agent.execute_task()
                
                # 4. –í–∞–ª–∏–¥–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                improved_validation = await smart_validator.validate_result(
                    original_task=task,
                    result=improved_result,
                    created_files=improved_result.get("files_created", [])
                )
                
                # 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
                attempt = ImprovementAttempt(
                    attempt_number=attempt_num,
                    original_result=current_result,
                    validation=current_validation,
                    feedback=feedback,
                    improved_result=improved_result,
                    improved_validation=improved_validation,
                    success=improved_validation.score > current_validation.score
                )
                
                attempts.append(attempt)
                
                # 6. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø—ã—Ç –æ–±—É—á–µ–Ω–∏—è
                await self._record_learning_experience(
                    agent, task, attempt_num, current_validation.score, 
                    improved_validation.score, feedback, attempt
                )
                
                # 7. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ
                if improved_validation.score > current_validation.score:
                    current_result = improved_result
                    current_validation = improved_validation
                    logger.info(f"üìà –£–ª—É—á—à–µ–Ω–∏–µ: {current_validation.score:.1f} (+{improved_validation.score - current_validation.score:.1f})")
                else:
                    logger.warning(f"üìâ –£—Ö—É–¥—à–µ–Ω–∏–µ: {improved_validation.score:.1f} (-{current_validation.score - improved_validation.score:.1f})")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
                attempt = ImprovementAttempt(
                    attempt_number=attempt_num,
                    original_result=current_result,
                    validation=current_validation,
                    feedback=feedback,
                    success=False
                )
                attempts.append(attempt)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_score = current_validation.score
        initial_score = initial_validation.score
        improvement = final_score - initial_score
        
        if improvement > 0:
            logger.info(f"üéØ –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {initial_score:.1f} ‚Üí {final_score:.1f} (+{improvement:.1f})")
        else:
            logger.warning(f"‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–∏—è –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã: {initial_score:.1f} ‚Üí {final_score:.1f}")
        
        return current_result, attempts
    
    async def _record_learning_experience(self, 
                                        agent: Any, 
                                        task: str, 
                                        attempt_number: int,
                                        score_before: float,
                                        score_after: float,
                                        feedback: ImprovementFeedback,
                                        attempt: ImprovementAttempt):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–ø—ã—Ç –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        
        agent_id = getattr(agent, 'agent_id', 'unknown_agent')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫ –∏ —É—Å–ø–µ—à–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        error_patterns = feedback.issues
        successful_actions = []
        failed_actions = []
        
        if attempt.success:
            successful_actions = feedback.recommendations[:2]  # –ü–µ—Ä–≤—ã–µ 2 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–µ
        else:
            failed_actions = feedback.issues[:2]  # –ü–µ—Ä–≤—ã–µ 2 –ø—Ä–æ–±–ª–µ–º—ã –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–µ
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
        lesson = await learning_system.record_learning(
            agent_id=agent_id,
            task_description=task,
            attempt_number=attempt_number,
            score_before=score_before,
            score_after=score_after,
            error_patterns=error_patterns,
            successful_actions=successful_actions,
            failed_actions=failed_actions,
            feedback_received=str(feedback.recommendations),
            tools_used=feedback.tool_suggestions
        )
        
        logger.info(f"üß† –£—Ä–æ–∫ –∑–∞–ø–∏—Å–∞–Ω –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_id}: {lesson}")
    
    async def _generate_improvement_feedback(self, 
                                           task: str, 
                                           result: Dict[str, Any], 
                                           validation: ValidationResult) -> ImprovementFeedback:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∏–¥–±–µ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ —Å —É—á—ë—Ç–æ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        available_tools = ["file_manager", "code_generator", "web_client", "system_tools"]
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
        agent_id = "current_agent"  # TODO: –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π ID –∞–≥–µ–Ω—Ç–∞
        learning_suggestions = await learning_system.get_improvement_suggestions(
            agent_id=agent_id,
            current_task=task,
            current_errors=validation.issues
        )
        
        feedback_prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é AI –∞–≥–µ–Ω—Ç–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–µ—É–¥–∞—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –¥–∞–π –ö–û–ù–ö–†–ï–¢–ù–´–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–ó–ê–î–ê–ß–ê: {task}

–†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ì–ï–ù–¢–ê: {result.get('output', '–ù–µ—Ç –≤—ã–≤–æ–¥–∞')}

–ü–†–û–ë–õ–ï–ú–´ –í–ê–õ–ò–î–ê–¶–ò–ò:
- –û—Ü–µ–Ω–∫–∞: {validation.score:.1f}/1.0  
- –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(validation.issues)}
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {', '.join(validation.recommendations)}

–î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´: {', '.join(available_tools)}

–ù–ê–ö–û–ü–õ–ï–ù–ù–´–ï –ó–ù–ê–ù–ò–Ø –ê–ì–ï–ù–¢–ê:
{chr(10).join(learning_suggestions) if learning_suggestions else "- –ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞"}

–ê–ù–ê–õ–ò–ó–ò–†–£–ô –ò –û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –í JSON:
{{
    "issues": [
        "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ê–≥–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç X')",
        "–î—Ä—É–≥–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
    ],
    "recommendations": [
        "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å file_manager –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ area.txt')",
        "–î—Ä—É–≥–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"
    ],
    "approach_changes": [
        "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–í–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ —Å–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—á–∏–π Python —Ñ–∞–π–ª')",
        "–î—Ä—É–≥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"
    ],
    "tool_suggestions": [
        "file_manager - –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å—á—ë—Ç–∞–º–∏",
        "code_generator - –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Python —Å–∫—Ä–∏–ø—Ç–æ–≤"
    ],
    "examples": [
        "–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª area.py —Å –∫–æ–¥–æ–º: import math; r=5; area=math.pi*r**2; print(f'–ü–ª–æ—â–∞–¥—å: {{area:.2f}}')",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å file_manager —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: filename='area.txt', content='A = œÄ * r¬≤ = 78.54'"
    ],
    "priority": "critical"
}}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "—É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ"
2. –ù–∞–∑—ã–≤–∞–π –ö–û–ù–ö–†–ï–¢–ù–´–ï –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞: {', '.join(available_tools)}
3. –î–∞–≤–∞–π –†–ê–ë–û–ß–ò–ï –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞
4. –£–∫–∞–∑—ã–≤–∞–π –¢–û–ß–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

JSON:"""
        
        try:
            response = self.llm_provider.complete(feedback_prompt)
            logger.debug(f"üîç LLM –æ—Ç–≤–µ—Ç –¥–ª—è —Ñ–∏–¥–±–µ–∫–∞: {response[:200]}...")
            
            feedback_data = self._parse_feedback_response(response)
            
            if not feedback_data:
                logger.warning("‚ö†Ô∏è LLM –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã–π JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return self._create_fallback_feedback(validation)
            
            feedback = ImprovementFeedback(
                issues=feedback_data.get("issues", []),
                recommendations=feedback_data.get("recommendations", []),
                approach_changes=feedback_data.get("approach_changes", []),
                tool_suggestions=feedback_data.get("tool_suggestions", []),
                examples=feedback_data.get("examples", []),
                priority=feedback_data.get("priority", "medium")
            )
            
            logger.info(f"üß† LLM —Ñ–∏–¥–±–µ–∫: {len(feedback.recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, {len(feedback.examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
            return feedback
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–¥–±–µ–∫–∞: {e}")
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π fallback —Ñ–∏–¥–±–µ–∫")
            return self._create_fallback_feedback(validation)
    
    def _parse_feedback_response(self, response: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç LLM —Å —Ñ–∏–¥–±–µ–∫–æ–º"""
        
        try:
            import json
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_start = response.find('{')
            json_end = response.rfind('}') + 1
            
            if json_start != -1 and json_end > json_start:
                json_str = response[json_start:json_end]
                return json.loads(json_str)
            else:
                raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∏–¥–±–µ–∫–∞: {e}")
            return {}
    
    def _create_fallback_feedback(self, validation: ValidationResult) -> ImprovementFeedback:
        """–°–æ–∑–¥–∞—ë—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∏–¥–±–µ–∫ –µ—Å–ª–∏ LLM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–¥–±–µ–∫–∞
        issues = validation.issues or ["–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞—á–µ"]
        
        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–±–ª–µ–º
        concrete_recommendations = []
        concrete_tools = []
        concrete_examples = []
        
        for issue in issues:
            if "—Ñ–∞–π–ª" in issue.lower() and "–Ω–µ —Å–æ–∑–¥–∞–Ω" in issue.lower():
                concrete_recommendations.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å file_manager –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
                concrete_tools.append("file_manager - –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
                concrete_examples.append("file_manager —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: filename='result.txt', content='–ì–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'")
            
            if "–∫–æ–¥" in issue.lower() or "—Å–∫—Ä–∏–ø—Ç" in issue.lower():
                concrete_recommendations.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å code_generator –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Python —Å–∫—Ä–∏–ø—Ç–∞")
                concrete_tools.append("code_generator - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")
                concrete_examples.append("code_generator —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: filename='script.py', language='python'")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ
        if not concrete_recommendations:
            concrete_recommendations = [
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å file_manager –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—ë—Ç—Å—è"
            ]
            concrete_tools = [
                "file_manager - –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤",
                "system_tools - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            ]
            concrete_examples = [
                "file_manager: filename='output.txt', content='–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'",
                "–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∞ –Ω–µ –ø–ª–∞–Ω–æ–º"
            ]
        
        return ImprovementFeedback(
            issues=issues,
            recommendations=concrete_recommendations,
            approach_changes=[
                "–°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤–º–µ—Å—Ç–æ –ø–ª–∞–Ω–æ–≤",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"
            ],
            tool_suggestions=concrete_tools,
            examples=concrete_examples,
            priority="high"
        )
    
    async def _apply_improvements_to_agent(self, 
                                         agent: Any, 
                                         feedback: ImprovementFeedback,
                                         task: str) -> Any:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –∫ –∞–≥–µ–Ω—Ç—É"""
        
        # –°–æ–∑–¥–∞—ë–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        improvement_instructions = self._create_improvement_instructions(feedback, task)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        improved_agent = self._clone_agent_with_improvements(agent, improvement_instructions)
        
        logger.info(f"üîß –ê–≥–µ–Ω—Ç —É–ª—É—á—à–µ–Ω —Å {len(feedback.recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏")
        
        return improved_agent
    
    def _create_improvement_instructions(self, 
                                       feedback: ImprovementFeedback, 
                                       task: str) -> str:
        """–°–æ–∑–¥–∞—ë—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        
        instructions = f"""
–£–õ–£–ß–®–ï–ù–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–î–ê–ß–ò:

–ó–ê–î–ê–ß–ê: {task}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ü–†–ï–î–´–î–£–©–ï–ô –ü–û–ü–´–¢–ö–ò:
{chr(10).join([f"- {issue}" for issue in feedback.issues])}

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:
{chr(10).join([f"- {rec}" for rec in feedback.recommendations])}

–ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –ü–û–î–•–û–î–ï:
{chr(10).join([f"- {change}" for change in feedback.approach_changes])}

–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
{chr(10).join([f"- {tool}" for tool in feedback.tool_suggestions])}

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø:
{chr(10).join([f"- {example}" for example in feedback.examples])}

–ü–†–ò–û–†–ò–¢–ï–¢: {feedback.priority.upper()}

–í–ê–ñ–ù–û: 
1. –°–æ–∑–¥–∞–≤–∞–π –ì–û–¢–û–í–´–ô –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –Ω–µ –ø–ª–∞–Ω—ã –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è
2. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
3. –ü—Ä–æ–≤–µ—Ä—è–π —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–µ—à–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
4. –°–æ–∑–¥–∞–≤–∞–π —Ä–∞–±–æ—á–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
"""
        
        return instructions
    
    def _clone_agent_with_improvements(self, original_agent: Any, improvements: str) -> Any:
        """–ö–ª–æ–Ω–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        
        try:
            # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            improved_agent = type(original_agent)(
                role=getattr(original_agent, 'role', 'improved_agent'),
                subtask=getattr(original_agent, 'subtask', {'description': 'improved_task'})
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ subtask
            if hasattr(improved_agent, 'subtask') and isinstance(improved_agent.subtask, dict):
                # –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                original_description = improved_agent.subtask.get('description', '')
                improved_agent.subtask['description'] = improvements + "\n\n" + original_description
                improved_agent.subtask['improvement_instructions'] = improvements
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            if hasattr(original_agent, 'tools'):
                improved_agent.tools = getattr(original_agent, 'tools', [])
            
            # –ö–æ–ø–∏—Ä—É–µ–º LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            if hasattr(original_agent, 'llm'):
                improved_agent.llm = getattr(original_agent, 'llm', None)
            
            return improved_agent
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {e}")
            return original_agent


# –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
async def improve_agent_result(agent: Any,
                             task: str, 
                             bad_result: Dict[str, Any],
                             validation: ValidationResult,
                             smart_validator: Any) -> Tuple[Dict[str, Any], List[ImprovementAttempt]]:
    """
    –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
    """
    improver = IterativeImprovement()
    return await improver.improve_agent_iteratively(
        agent, task, bad_result, validation, smart_validator
    ) 