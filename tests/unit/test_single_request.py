#!/usr/bin/env python3
import asyncio
import sys
import kittycore

async def test_single_request():
    print("üê± KittyCore 3.0 - –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
    print("=" * 40)
    
    # –ë–µ—Ä—ë–º –∑–∞–ø—Ä–æ—Å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        user_input = " ".join(sys.argv[1:])
    else:
        user_input = "—Å–æ–∑–¥–∞—Ç—å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ CyberKitty"
    
    print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: {user_input}")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = kittycore.create_orchestrator()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    result = await orchestrator.solve_task(user_input)
    
    if result['status'] == 'completed':
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ –∑–∞ {result['duration']:.2f}—Å")
        print(f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result['complexity_analysis']['complexity']}")
        print(f"üë• –ö–æ–º–∞–Ω–¥–∞: {result['team']['team_size']} –∞–≥–µ–Ω—Ç–æ–≤")
        
        print(f"\nüìã –ü–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è:")
        for i, subtask in enumerate(result['subtasks'], 1):
            print(f"   {i}. {subtask['description']}")
        
        print(f"\nüìà Workflow:")
        print(result['workflow_graph']['mermaid'])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüí° –†–ï–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞ –∑–∞–¥–∞—á—É")
        print(f"   ‚úÖ –°–æ–∑–¥–∞–ª–∞ –ø–ª–∞–Ω –∏–∑ {len(result['subtasks'])} —à–∞–≥–æ–≤")
        print(f"   ‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç–æ–≤")
        print(f"   ‚úÖ –ü–æ—Å—Ç—Ä–æ–∏–ª–∞ –≥—Ä–∞—Ñ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        print(f"   ‚úÖ –ê–≥–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –†–ï–ê–õ–¨–ù–£–Æ –†–ê–ë–û–¢–£!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        execution = result.get('execution', {})
        files = execution.get('files_created', [])
        
        print(f"\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´ ({len(files)}):")
        if files:
            for file in files:
                print(f"   üìÑ {file}")
        else:
            print("   (—Ñ–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        step_results = execution.get('step_results', {})
        print(f"\nüîß –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
        if step_results:
            for step_id, step_result in step_results.items():
                status_icon = "‚úÖ" if step_result.get('status') == 'completed' else "‚ùå"
                agent = step_result.get('agent', 'unknown')
                result_text = step_result.get('result', 'No result')
                print(f"   {status_icon} {agent}: {result_text}")
        else:
            print("   (–¥–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)")
        
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

if __name__ == "__main__":
    asyncio.run(test_single_request()) 