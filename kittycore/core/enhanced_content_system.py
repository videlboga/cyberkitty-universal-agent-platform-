"""
üéØ Enhanced Content System - –°–∏—Å—Ç–µ–º–∞ "–ö–æ–Ω—Ç–µ–Ω—Ç + –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"

–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É "–æ—Ç—á—ë—Ç—ã –≤–º–µ—Å—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤":
- ContentValidator: –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –æ—Ç—á—ë—Ç—ã –ø–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
- ContentFixer: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
- EnhancedContentSystem: –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
- EnhancedOrchestratorAgent: –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
üìÅ outputs/ ‚Üê –ö–û–ù–¢–ï–ù–¢ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø  
üìä outputs/metadata/ ‚Üê –ú–ï–¢–ê–î–ê–ù–ù–´–ï –î–õ–Ø –°–ò–°–¢–ï–ú–´
"""

import os
import json
import re
from datetime import datetime
from typing import Dict, Any, List, Optional, Tuple
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from loguru import logger

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
from .orchestrator import OrchestratorAgent, OrchestratorConfig

class DetailedProcessLogger:
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.process_log = []
        self.agent_interactions = {}
        
    def log_agent_generation(self, agent_id: str, task: str, generated_content: str, tools_used: List[str]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —á—Ç–æ –∞–≥–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏–ª"""
        entry = {
            "timestamp": datetime.now().isoformat(),
            "type": "agent_generation",
            "agent_id": agent_id,
            "task": task,
            "generated_content": generated_content[:500] + "..." if len(generated_content) > 500 else generated_content,
            "tools_used": tools_used,
            "content_length": len(generated_content)
        }
        self.process_log.append(entry)
        
    def log_tool_call(self, agent_id: str, tool_name: str, params: Dict, result: Dict):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        entry = {
            "timestamp": datetime.now().isoformat(),
            "type": "tool_call",
            "agent_id": agent_id,
            "tool_name": tool_name,
            "params": params,
            "result_success": result.get("success", False),
            "result_data": str(result.get("data", ""))[:200] + "..." if len(str(result.get("data", ""))) > 200 else str(result.get("data", "")),
            "error": result.get("error")
        }
        self.process_log.append(entry)
        
    def log_agent_handoff(self, from_agent: str, to_agent: str, data_passed: str, context: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        entry = {
            "timestamp": datetime.now().isoformat(),
            "type": "agent_handoff",
            "from_agent": from_agent,
            "to_agent": to_agent,
            "data_passed": data_passed[:300] + "..." if len(data_passed) > 300 else data_passed,
            "context": context,
            "data_size": len(data_passed)
        }
        self.process_log.append(entry)
        
    def log_context_update(self, agent_id: str, context_before: str, context_after: str, reason: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
        entry = {
            "timestamp": datetime.now().isoformat(),
            "type": "context_update",
            "agent_id": agent_id,
            "context_before": context_before[:200] + "..." if len(context_before) > 200 else context_before,
            "context_after": context_after[:200] + "..." if len(context_after) > 200 else context_after,
            "reason": reason,
            "context_growth": len(context_after) - len(context_before)
        }
        self.process_log.append(entry)
        
    def generate_detailed_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        if not self.process_log:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"
            
        report = ["# üîç –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ –û –ü–†–û–¶–ï–°–°–ï –†–ê–ë–û–¢–´ –ê–ì–ï–ù–¢–û–í", ""]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        generations = [e for e in self.process_log if e["type"] == "agent_generation"]
        tool_calls = [e for e in self.process_log if e["type"] == "tool_call"]
        handoffs = [e for e in self.process_log if e["type"] == "agent_handoff"]
        context_updates = [e for e in self.process_log if e["type"] == "context_update"]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report.extend([
            "## üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–¶–ï–°–°–ê",
            f"- ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏–π –∞–≥–µ–Ω—Ç–æ–≤: {len(generations)}",
            f"- üîß –í—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tool_calls)}",
            f"- üîÑ –ü–µ—Ä–µ–¥–∞—á –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏: {len(handoffs)}",
            f"- üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(context_updates)}",
            ""
        ])
        
        # –î–µ—Ç–∞–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        if generations:
            report.extend(["## ü§ñ –ì–ï–ù–ï–†–ê–¶–ò–ò –ê–ì–ï–ù–¢–û–í", ""])
            for i, gen in enumerate(generations, 1):
                report.extend([
                    f"### –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i} ({gen['timestamp']})",
                    f"**–ê–≥–µ–Ω—Ç:** {gen['agent_id']}",
                    f"**–ó–∞–¥–∞—á–∞:** {gen['task']}",
                    f"**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:** {', '.join(gen['tools_used'])}",
                    f"**–†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞:** {gen['content_length']} —Å–∏–º–≤–æ–ª–æ–≤",
                    f"**–ö–æ–Ω—Ç–µ–Ω—Ç:**",
                    "```",
                    gen['generated_content'],
                    "```",
                    ""
                ])
        
        # –î–µ—Ç–∞–ª–∏ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        if tool_calls:
            report.extend(["## üîß –í–´–ó–û–í–´ –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í", ""])
            for i, call in enumerate(tool_calls, 1):
                report.extend([
                    f"### –í—ã–∑–æ–≤ {i} ({call['timestamp']})",
                    f"**–ê–≥–µ–Ω—Ç:** {call['agent_id']}",
                    f"**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:** {call['tool_name']}",
                    f"**–£—Å–ø–µ—Ö:** {'‚úÖ' if call['result_success'] else '‚ùå'}",
                    f"**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:** {call['params']}",
                    f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {call['result_data']}",
                    f"**–û—à–∏–±–∫–∞:** {call['error'] or '–ù–µ—Ç'}" if call['error'] else "",
                    ""
                ])
        
        # –î–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–¥–∞—á
        if handoffs:
            report.extend(["## üîÑ –ü–ï–†–ï–î–ê–ß–ò –ú–ï–ñ–î–£ –ê–ì–ï–ù–¢–ê–ú–ò", ""])
            for i, handoff in enumerate(handoffs, 1):
                report.extend([
                    f"### –ü–µ—Ä–µ–¥–∞—á–∞ {i} ({handoff['timestamp']})",
                    f"**–û—Ç –∞–≥–µ–Ω—Ç–∞:** {handoff['from_agent']}",
                    f"**–ö –∞–≥–µ–Ω—Ç—É:** {handoff['to_agent']}",
                    f"**–ö–æ–Ω—Ç–µ–∫—Å—Ç:** {handoff['context']}",
                    f"**–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:** {handoff['data_size']} —Å–∏–º–≤–æ–ª–æ–≤",
                    f"**–î–∞–Ω–Ω—ã–µ:**",
                    "```",
                    handoff['data_passed'],
                    "```",
                    ""
                ])
        
        return "\n".join(report)
        
    def save_detailed_report(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"outputs/metadata/detailed_process_report_{timestamp}.md"
            
        report = self.generate_detailed_report()
        
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(report)
            
        return filename 

class EnhancedOrchestratorAgent(OrchestratorAgent):
    """Enhanced Orchestrator —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç + –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"""
    
    def __init__(self, config: OrchestratorConfig = None):
        super().__init__(config)
        
        # –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç–µ–Ω—Ç + –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        self.content_validator = ContentValidator()
        self.content_fixer = ContentFixer()
        self.enhanced_content_system = EnhancedContentSystem()
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        self.process_logger = DetailedProcessLogger()
        
        logger.info("‚úÖ Enhanced OrchestratorAgent —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç+–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        logger.info("üîç –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–∫–ª—é—á–µ–Ω–æ")
    
    async def solve_task(self, task: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å enhanced —Å–∏—Å—Ç–µ–º–æ–π"""
        logger.info(f"üéØ Enhanced Orchestrator –≤—ã–ø–æ–ª–Ω—è–µ—Ç: {task}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–¥–∞—á–∏
        self.process_logger.log_agent_generation(
            agent_id=self.config.orchestrator_id,
            task=task,
            generated_content=f"–ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task}",
            tools_used=["orchestrator"]
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        result = await super().solve_task(task, context)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.process_logger.log_agent_generation(
            agent_id=self.config.orchestrator_id,
            task="orchestrator_result",
            generated_content=str(result.get("output", ""))[:500],
            tools_used=["orchestrator", "agent_spawner"]
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º enhanced —Å–∏—Å—Ç–µ–º—É –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        enhanced_result = await self._enhance_result(task, result)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        process_report_file = self.process_logger.save_detailed_report()
        logger.info(f"üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {process_report_file}")
        
        return enhanced_result
    
    async def _enhance_result(self, task: str, result: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç enhanced —Å–∏—Å—Ç–µ–º—É –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        original_output = result.get("output", "")
        original_files = result.get("files_created", [])
        
        print(f"üì§ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(original_output)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
        enhanced_files = []
        
        if original_files:
            for filename in original_files:
                if os.path.exists(filename):
                    try:
                        with open(filename, 'r', encoding='utf-8') as f:
                            content = f.read()
                        
                        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                        print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è: {filename}")
                        processed = await self.enhanced_content_system.process_content(content, filename, task)
                        
                        if processed["fixed"]:
                            print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç: {processed['original_validation']['reason']}")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                            output_path = f"outputs/{filename}"
                            os.makedirs(os.path.dirname(output_path), exist_ok=True)
                            
                            with open(output_path, 'w', encoding='utf-8') as f:
                                f.write(processed["content"])
                            
                            enhanced_files.append(output_path)
                            
                            # –°–æ–∑–¥–∞—ë–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                            await self._create_metadata(output_path, task, processed)
                            
                            print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: {filename} (–æ—Ü–µ–Ω–∫–∞: {processed['validation']['score']:.2f})")
                        else:
                            print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∞–ª–∏–¥–µ–Ω: {filename}")
                            
                            # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–∞–π–ª –≤ outputs
                            output_path = f"outputs/{filename}"
                            os.makedirs(os.path.dirname(output_path), exist_ok=True)
                            
                            with open(output_path, 'w', encoding='utf-8') as f:
                                f.write(content)
                            
                            enhanced_files.append(output_path)
                            
                            # –°–æ–∑–¥–∞—ë–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                            await self._create_metadata(output_path, task, processed)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞
                        self.process_logger.log_tool_call(
                            agent_id="enhanced_orchestrator",
                            tool_name="content_validator",
                            params={"filename": filename, "task": task},
                            result={
                                "success": True,
                                "data": f"–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {processed['fixed']}",
                                "validation_score": processed["validation"]["score"]
                            }
                        )
                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤, —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        else:
            print("üìù –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞—á–∏
            filename = self._generate_filename_from_task(task)
            
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞—ë–º fallback –∫–æ–Ω—Ç–µ–Ω—Ç
            if not original_output or len(original_output.strip()) == 0:
                print("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞—ë–º fallback –∫–æ–Ω—Ç–µ–Ω—Ç")
                
                # –°–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞—á–∏
                fallback_content = self._create_fallback_content(task, filename)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º fallback –∫–∞–∫ –∫–æ–Ω—Ç–µ–Ω—Ç
                processed = await self.enhanced_content_system.process_content(fallback_content, filename, task)
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –∫–æ–Ω—Ç–µ–Ω—Ç
                processed = await self.enhanced_content_system.process_content(original_output, filename, task)
            
            if processed["fixed"]:
                print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç: {processed['original_validation']['reason']}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ outputs
            output_path = f"outputs/{filename}"
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(processed["content"])
            
            enhanced_files.append(output_path)
            
            # –°–æ–∑–¥–∞—ë–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            await self._create_metadata(output_path, task, processed)
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç {'—É–ª—É—á—à–µ–Ω' if processed['fixed'] else '—Å–æ—Ö—Ä–∞–Ω—ë–Ω'}: {filename}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º enhanced —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        enhanced_result = {
            "status": result.get("status", "completed"),
            "original_output": original_output,
            "enhanced_files": enhanced_files,
            "files_processed": len(enhanced_files),
            "improvements_made": sum(1 for f in enhanced_files if "fixed" in str(f))
        }
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É–ª—É—á—à–µ–Ω: {processed.get('fixed', False)}")
        print(f"üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {output_path}")
        
        return enhanced_result
    
    def _generate_filename_from_task(self, task: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞—á–∏"""
        
        task_lower = task.lower()
        
        if "python" in task_lower or "—Å–∫—Ä–∏–ø—Ç" in task_lower:
            return "result.py"
        elif "html" in task_lower or "—Å—Ç—Ä–∞–Ω–∏—Ü" in task_lower or "—Å–∞–π—Ç" in task_lower:
            return "result.html"
        elif "json" in task_lower or "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü" in task_lower:
            return "result.json"
        elif "css" in task_lower or "—Å—Ç–∏–ª" in task_lower:
            return "result.css"
        elif "javascript" in task_lower or "js" in task_lower:
            return "result.js"
        else:
            return "result.txt"
    
    def _create_fallback_content(self, task: str, filename: str) -> str:
        """–°–æ–∑–¥–∞—ë—Ç fallback –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞—á–∏"""
        
        task_lower = task.lower()
        file_type = self.enhanced_content_system._get_file_type(filename)
        
        if file_type == "python":
            if "hello world" in task_lower:
                return 'print("Hello, World!")'
            elif "–ø–ª–æ—â–∞–¥" in task_lower and "–∫–æ—Ç" in task_lower:
                return '''import math

def calculate_cat_area(radius):
    """–†–∞—Å—á—ë—Ç –ø–ª–æ—â–∞–¥–∏ –∫–æ—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ A = œÄ * r¬≤"""
    area = math.pi * (radius ** 2)
    return area

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
radius = 0.5  # —Ä–∞–¥–∏—É—Å –∫–æ—Ç–∞ –≤ –º–µ—Ç—Ä–∞—Ö
area = calculate_cat_area(radius)
print(f"–ü–ª–æ—â–∞–¥—å –∫–æ—Ç–∞ —Å —Ä–∞–¥–∏—É—Å–æ–º {radius}–º: {area:.2f} –º¬≤")'''
            else:
                return f'''# –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task}

def solve_task():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    print("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    return "success"

if __name__ == "__main__":
    result = solve_task()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")'''
        
        elif file_type == "json":
            if "–≤–µ–±-—Å–µ—Ä–≤–µ—Ä" in task_lower or "—Å–µ—Ä–≤–µ—Ä" in task_lower:
                return '''{
    "server": {
        "name": "KittyCore Web Server",
        "port": 8080,
        "host": "localhost",
        "document_root": "/var/www/html",
        "ssl": {
            "enabled": false,
            "cert_file": "",
            "key_file": ""
        },
        "logging": {
            "level": "info",
            "file": "/var/log/server.log"
        },
        "routes": {
            "/": "index.html",
            "/api": "api.php",
            "/static": "/static/"
        }
    }
}'''
            else:
                return f'''{{"task": "{task}", "status": "completed", "created": "{datetime.now().isoformat()}"}}'''
        
        elif file_type == "html":
            return f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
        .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        .header {{ color: #333; border-bottom: 2px solid #eee; padding-bottom: 10px; }}
        .content {{ margin-top: 20px; line-height: 1.6; }}
        .footer {{ margin-top: 40px; color: #666; font-size: 12px; text-align: center; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</h1>
        </div>
        <div class="content">
            <p><strong>–ó–∞–¥–∞—á–∞:</strong> {task}</p>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –í—ã–ø–æ–ª–Ω–µ–Ω–æ</p>
            <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π KittyCore 3.0</p>
        </div>
        <div class="footer">
            –°–æ–∑–¥–∞–Ω–æ KittyCore 3.0 üê± | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        </div>
    </div>
</body>
</html>'''
        
        else:
            return f"""–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task}

–°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ
–†–µ–∑—É–ª—å—Ç–∞—Ç: –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ

–î–µ—Ç–∞–ª–∏:
- –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- –°–∏—Å—Ç–µ–º–∞: KittyCore 3.0
- –¢–∏–ø —Ñ–∞–π–ª–∞: {file_type}

–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""
    
    async def _create_metadata(self, filepath: str, task: str, processed: Dict[str, Any]):
        """–°–æ–∑–¥–∞—ë—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞–π–ª–∞"""
        
        filename = os.path.basename(filepath)
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ JSON
        metadata = {
            "task": task,
            "filename": filename,
            "size": len(processed["content"]),
            "created": datetime.now().isoformat(),
            "validation": processed["validation"],
            "fixed": processed.get("fixed", False),
            "original_validation": processed.get("original_validation")
        }
        
        metadata_path = f"outputs/metadata/{filename}.meta.json"
        os.makedirs(os.path.dirname(metadata_path), exist_ok=True)
        
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
        
        # –û—Ç—á—ë—Ç –≤ Markdown
        report_lines = [
            "# üìä –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞",
            "",
            "## üéØ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            f"- **–ó–∞–¥–∞—á–∞:** {task}",
            f"- **–§–∞–π–ª:** {filename}",
            f"- **–†–∞–∑–º–µ—Ä:** {metadata['size']} —Å–∏–º–≤–æ–ª–æ–≤",
            f"- **–°–æ–∑–¥–∞–Ω:** {metadata['created']}",
            "",
            "## ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è",
            f"- **–í–∞–ª–∏–¥–Ω—ã–π:** {'–î–∞' if processed['validation']['valid'] else '–ù–µ—Ç'}",
            f"- **–û—Ü–µ–Ω–∫–∞:** {processed['validation']['score']:.2f}",
            f"- **–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:** {processed['validation']['relevance_score']:.2f}",
        ]
        
        if processed.get("fixed"):
            report_lines.extend([
                f"- **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω:** –î–∞",
                f"- **–û—Ü–µ–Ω–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:** {processed['validation']['score']}"
            ])
        
        report_lines.extend([
            "",
            "## üìã –ü—Ä–æ–±–ª–µ–º—ã",
            processed['validation']['reason'],
            "",
            "## üíé –ü—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            "```",
            processed["content"][:200] + ("..." if len(processed["content"]) > 200 else ""),
            "```",
            "",
            "---",
            "*–û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω KittyCore Content Integration System*"
        ])
        
        report_path = f"outputs/metadata/{filename}.report.md"
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(report_lines))

class ContentValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —Ñ–∞–π–ª—ã-–æ—Ç—á—ë—Ç—ã"""
    
    FORBIDDEN_PATTERNS = [
        "–ó–∞–¥–∞—á–∞:",
        "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã",
        "–∞–≥–µ–Ω—Ç–æ–º",
        "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º",
        "## –†–µ–∑—É–ª—å—Ç–∞—Ç",
        "# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã"
    ]
    
    def validate_content(self, content: str, file_type: str, task: str) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –æ—Ç—á—ë—Ç—ã"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–æ—Ç—á—ë—Ç—ã)
        forbidden_found = []
        for pattern in self.FORBIDDEN_PATTERNS:
            if pattern in content:
                forbidden_found.append(pattern)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–µ
        relevance_score = self._check_task_relevance(content, task)
        
        is_valid = len(forbidden_found) == 0 and relevance_score > 0.3
        
        return {
            "valid": is_valid,
            "score": 1.0 if is_valid else 0.0,
            "forbidden_found": forbidden_found,
            "relevance_score": relevance_score,
            "reason": "–ö–æ–Ω—Ç–µ–Ω—Ç –≤–∞–ª–∏–¥–µ–Ω" if is_valid else f"–ù–∞–π–¥–µ–Ω—ã –æ—Ç—á—ë—Ç—ã: {forbidden_found}"
        }
    
    def _check_task_relevance(self, content: str, task: str) -> float:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–¥–∞—á–µ"""
        task_lower = task.lower()
        content_lower = content.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–¥–∞—á–∏
        task_keywords = []
        
        if "hello world" in task_lower:
            task_keywords = ["hello", "world", "print"]
        elif "–∫–æ—Ç—è—Ç" in task_lower or "–∫–æ—Ç" in task_lower:
            task_keywords = ["–∫–æ—Ç", "–∫–æ—Ç—è—Ç", "cat", "kitten"]
        elif "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" in task_lower:
            task_keywords = ["–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "calculator", "math", "—á–∏—Å–ª–æ"]
        elif "qr" in task_lower:
            task_keywords = ["qr", "–∫–æ–¥", "code", "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä"]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        matches = sum(1 for keyword in task_keywords if keyword in content_lower)
        
        if not task_keywords:
            return 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        
        return min(1.0, matches / len(task_keywords))

class ContentFixer:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É—è LLM - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á"""
    
    def __init__(self):
        self.llm = None
        self._init_llm()
    
    def _init_llm(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            from ..llm import get_llm_provider
            self.llm = get_llm_provider()
            logger.info("üß† ContentFixer: LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è ContentFixer: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LLM: {e}")
            self.llm = None
    
    async def fix_content(self, content: str, file_type: str, task: str) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É—è LLM –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        if not self.llm:
            # Fallback –±–µ–∑ LLM - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            return self._fallback_fix(content, file_type, task)
        
        try:
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
            prompt = self._create_fix_prompt(content, file_type, task)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            response = await self.llm.generate(prompt)
            
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–µ–≥–æ
            fixed_content = self._clean_llm_response(response, file_type)
            
            logger.info(f"üîß ContentFixer: –ö–æ–Ω—Ç–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ LLM ({len(fixed_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return fixed_content
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è ContentFixer: –û—à–∏–±–∫–∞ LLM, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}")
            return self._fallback_fix(content, file_type, task)
    
    def _create_fix_prompt(self, content: str, file_type: str, task: str) -> str:
        """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ
        content_examples = {
            "python": "—Ä–∞–±–æ—á–∏–π Python –∫–æ–¥ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            "html": "–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å CSS —Å—Ç–∏–ª—è–º–∏",
            "css": "CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",
            "javascript": "JavaScript –∫–æ–¥ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏",
            "json": "–≤–∞–ª–∏–¥–Ω—ã–π JSON —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
            "markdown": "—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Markdown –¥–æ–∫—É–º–µ–Ω—Ç",
            "text": "–ø–æ–ª–µ–∑–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
        }
        
        expected_content = content_examples.get(file_type, "–ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        
        prompt = f"""–ó–∞–¥–∞—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {task}

–¢–∏–ø —Ñ–∞–π–ª–∞: {file_type}

–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–æ—Ç—á—ë—Ç –≤–º–µ—Å—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞):
{content[:300]}...

–ó–ê–î–ê–ù–ò–ï: –°–æ–∑–¥–∞–π {expected_content} –∫–æ—Ç–æ—Ä—ã–π –†–ï–®–ê–ï–¢ –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –æ—Ç—á—ë—Ç, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø–ª–∞–Ω
- –°–æ–∑–¥–∞–π –ì–û–¢–û–í–´–ô –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ {file_type} –∫–æ–Ω—Ç–µ–Ω—Ç
- –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –†–ï–ê–õ–¨–ù–û —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á—É: {task}
- –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–¥ - –æ–Ω –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏ —Ä–∞–±–æ—Ç–∞—Ç—å
- –ï—Å–ª–∏ —ç—Ç–æ HTML - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
- –ï—Å–ª–∏ —ç—Ç–æ JSON - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û {file_type} –∫–æ–Ω—Ç–µ–Ω—Ç, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤–æ–∫—Ä—É–≥."""

        return prompt
    
    def _clean_llm_response(self, response: str, file_type: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –æ—Ç–≤–µ—Ç LLM –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        
        # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if f"```{file_type}" in response:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ markdown –±–ª–æ–∫–∞
            start = response.find(f"```{file_type}") + len(f"```{file_type}")
            end = response.find("```", start)
            if end != -1:
                response = response[start:end].strip()
        elif "```" in response:
            # –û–±—â–∏–π —Å–ª—É—á–∞–π –¥–ª—è –ª—é–±—ã—Ö –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
            parts = response.split("```")
            if len(parts) >= 3:
                response = parts[1].strip()
        
        # –£–±–∏—Ä–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
        lines = response.split('\n')
        
        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        start_idx = 0
        for i, line in enumerate(lines):
            if self._is_content_line(line, file_type):
                start_idx = i
                break
        
        # –ò—â–µ–º –∫–æ–Ω–µ—Ü —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        end_idx = len(lines)
        for i in range(len(lines) - 1, -1, -1):
            if self._is_content_line(lines[i], file_type):
                end_idx = i + 1
                break
        
        cleaned = '\n'.join(lines[start_idx:end_idx]).strip()
        
        return cleaned if cleaned else response.strip()
    
    def _is_content_line(self, line: str, file_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        
        line = line.strip()
        if not line:
            return False
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
        content_patterns = {
            "python": ["def ", "class ", "import ", "from ", "print(", "=", "if ", "for ", "while "],
            "html": ["<html", "<head", "<body", "<div", "<p", "<h1", "<h2", "<!DOCTYPE"],
            "css": ["{", "}", ":", "color", "font", "margin", "padding", "background"],
            "javascript": ["function", "var ", "let ", "const ", "=>", "document.", "window."],
            "json": ["{", "}", "[", "]", '"', ":"],
            "markdown": ["#", "##", "###", "*", "-", "1.", "2."],
            "text": []  # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç
        }
        
        patterns = content_patterns.get(file_type, [])
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        if not patterns:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        return any(pattern in line for pattern in patterns)
    
    def _fallback_fix(self, content: str, file_type: str, task: str) -> str:
        """Fallback –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ LLM - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        
        # –ü—Ä–æ—Å—Ç—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
        if file_type == "python":
            if "hello world" in task.lower():
                return 'print("Hello, World!")'
            else:
                return f'''# –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task}

def solve_task():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    result = "–ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞"
    return result

if __name__ == "__main__":
    print(solve_task())'''
        
        elif file_type == "html":
            return f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        .header {{ color: #333; border-bottom: 2px solid #eee; }}
        .content {{ margin-top: 20px; line-height: 1.6; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</h1>
    </div>
    <div class="content">
        <p>–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–¥–∞—á–∏: {task}</p>
    </div>
</body>
</html>'''
        
        elif file_type == "json":
            return f'''{{
    "task": "{task}",
    "status": "completed",
    "result": "success",
    "data": {{
        "created": "{datetime.now().isoformat()}",
        "type": "solution"
    }}
}}'''
        
        else:
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fallback
            return f"""–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task}

–°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ
–†–µ–∑—É–ª—å—Ç–∞—Ç: –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ

–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""

class EnhancedContentSystem:
    """–°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.validator = ContentValidator()
        self.fixer = ContentFixer()
    
    async def process_content(self, content: str, filename: str, task: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç: –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_type = self._get_file_type(filename)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        original_validation = self.validator.validate_content(content, file_type, task)
        
        if original_validation["valid"]:
            # –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return {
                "content": content,
                "fixed": False,
                "validation": original_validation,
                "original_validation": original_validation
            }
        else:
            # –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
            print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç: {original_validation['reason']}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º async –º–µ—Ç–æ–¥
            fixed_content = await self.fixer.fix_content(content, file_type, task)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            fixed_validation = self.validator.validate_content(fixed_content, file_type, task)
            
            return {
                "content": fixed_content,
                "fixed": True,
                "validation": fixed_validation,
                "original_validation": original_validation
            }
    
    def _get_file_type(self, filename: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
        
        if filename.endswith('.py'):
            return "python"
        elif filename.endswith('.html'):
            return "html"
        elif filename.endswith('.css'):
            return "css"
        elif filename.endswith('.js'):
            return "javascript"
        elif filename.endswith('.json'):
            return "json"
        elif filename.endswith('.md'):
            return "markdown"
        else:
            return "text" 