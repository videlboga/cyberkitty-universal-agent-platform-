#!/usr/bin/env python3
"""
üéß –ù–ê–°–¢–û–Ø–©–ò–ô LLM-–ê–ì–ï–ù–¢ –ü–û–î–î–ï–†–ñ–ö–ò
–ê–≥–µ–Ω—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ LLM API –≤—ã–∑–æ–≤–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

import time
import json
import asyncio
from typing import Dict, Any, Optional
from support_agent_part1_knowledge import *

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä
try:
    from kittycore.llm import get_llm_provider
    REAL_LLM_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É")
    REAL_LLM_AVAILABLE = False

class RealLLMSupportAgent:
    """–ù–∞—Å—Ç–æ—è—â–∏–π LLM-–∞–≥–µ–Ω—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    
    def __init__(self, name: str = "–ù–∞—Å—Ç–æ—è—â–∏–π LLM –ê–≥–µ–Ω—Ç"):
        self.name = name
        self.knowledge_base = KnowledgeBase()
        self.customer_db = CustomerDatabase()
        
        if REAL_LLM_AVAILABLE:
            self.llm = get_llm_provider("meta-llama/llama-3.2-3b-instruct:free")
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä")
        else:
            self.llm = None
            print("‚ùå LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def analyze_problem_with_llm(self, ticket: SupportTicket) -> Dict[str, Any]:
        """–†–µ–∞–ª—å–Ω—ã–π LLM-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–∞"""
        
        if not self.llm:
            return self._fallback_analysis(ticket)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
        customer_info = f"""
–ö–õ–ò–ï–ù–¢: {ticket.customer.name}
- –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: {ticket.customer.plan}
- –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {', '.join(ticket.customer.equipment)}
- –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π: {len(ticket.customer.history)} —Ä–∞–∑
- –†–µ–π—Ç–∏–Ω–≥ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏: {ticket.customer.satisfaction_score}/5.0
- –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {'; '.join(ticket.customer.history[-2:]) if ticket.customer.history else '–ù–µ—Ç'}
"""
        
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        kb_info = "–î–û–°–¢–£–ü–ù–´–ï –†–ï–®–ï–ù–ò–Ø:\n"
        for entry in self.knowledge_base.entries:
            kb_info += f"‚Ä¢ {entry.title} (—É—Å–ø–µ—Ö: {entry.success_rate*100:.0f}%)\n"
        
        prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ "–ö–∏–±–µ—Ä–ö–æ—Ç".

{customer_info}

{kb_info}

–ü–†–û–ë–õ–ï–ú–ê –ö–õ–ò–ï–ù–¢–ê: "{ticket.problem_description}"

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é –∏ –æ—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "problem_category": "connectivity|performance|configuration|equipment|billing|other",
    "urgency_level": 1-5,
    "customer_mood": "calm|confused|frustrated|angry",
    "escalation_needed": true/false,
    "confidence": 0.0-1.0,
    "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"
}}

–£—á—Ç–∏:
- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–∏—à–µ—Ç –ó–ê–ì–õ–ê–í–ù–´–ú–ò –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç "!!!" - –æ–Ω –∑–ª–æ–π
- –ï—Å–ª–∏ "—Ç—Ä–µ—Ç–∏–π —Ä–∞–∑", "–æ–ø—è—Ç—å", "—Å–Ω–æ–≤–∞" - —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—è
- –ï—Å–ª–∏ "–ø–æ–º–æ–≥–∏—Ç–µ", "–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è" - —Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å
- –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è —É –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (—Ä–µ–π—Ç–∏–Ω–≥ <3) - —ç—Å–∫–∞–ª–∞—Ü–∏—è"""

        try:
            print("üß† –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—Å—Ç–æ—è—â–µ–º—É LLM...")
            response = self.llm.complete(prompt)
            
            print(f"üîç LLM –æ—Ç–≤–µ—Ç: {response[:500]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            analysis = json.loads(response.strip())
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            required_fields = ["problem_category", "urgency_level", "customer_mood", "escalation_needed", "confidence", "reasoning"]
            if not all(field in analysis for field in required_fields):
                raise ValueError("–ù–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç LLM")
            
            print(f"‚úÖ LLM –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis['confidence']:.2f})")
            return analysis
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return self._fallback_analysis(ticket)
    
    def _fallback_analysis(self, ticket: SupportTicket) -> Dict[str, Any]:
        """–ó–∞–ø–∞—Å–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ LLM"""
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–ø–∞—Å–Ω–æ–π –∞–Ω–∞–ª–∏–∑")
        
        problem = ticket.problem_description.lower()
        
        # –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
        if any(word in problem for word in ["–Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ—Ç–∫–ª—é—á–∏–ª—Å—è"]):
            category = "connectivity"
        elif any(word in problem for word in ["–º–µ–¥–ª–µ–Ω–Ω–æ", "—Ç–æ—Ä–º–æ–∑–∏—Ç", "—Å–∫–æ—Ä–æ—Å—Ç—å"]):
            category = "performance"
        elif any(word in problem for word in ["–ø–∞—Ä–æ–ª—å", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "wifi"]):
            category = "configuration"
        else:
            category = "other"
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        if any(indicator in problem for indicator in ["!!!", "–æ–ø—è—Ç—å", "—Ç—Ä–µ—Ç–∏–π —Ä–∞–∑"]):
            mood = "angry"
            urgency = 5
        elif any(word in problem for word in ["–ø–æ–º–æ–≥–∏—Ç–µ", "–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è"]):
            mood = "confused"
            urgency = 3
        else:
            mood = "calm"
            urgency = 2
        
        # –≠—Å–∫–∞–ª–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        escalation_needed = (ticket.customer.satisfaction_score < 3.0 and mood in ["angry", "frustrated"])
        
        return {
            "problem_category": category,
            "urgency_level": urgency,
            "customer_mood": mood,
            "escalation_needed": escalation_needed,
            "confidence": 0.6,  # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –±–µ–∑ LLM
            "reasoning": f"–ó–∞–ø–∞—Å–Ω–æ–π –∞–Ω–∞–ª–∏–∑: {category}, –∫–ª–∏–µ–Ω—Ç {mood}"
        }

# –¢–µ—Å—Ç –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ LLM-–∞–≥–µ–Ω—Ç–∞
if __name__ == "__main__":
    def test_real_llm():
        print("üéß –¢–ï–°–¢ –ù–ê–°–¢–û–Ø–©–ï–ì–û LLM-–ê–ì–ï–ù–¢–ê")
        print("=" * 50)
        
        agent = RealLLMSupportAgent()
        
        if not REAL_LLM_AVAILABLE:
            print("‚ö†Ô∏è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø–∞—Å–Ω–æ–π –∞–Ω–∞–ª–∏–∑")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π
        customer = Customer(
            id="test_001",
            name="–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç",
            plan="–¢–µ—Å—Ç 100 –ú–±–∏—Ç/—Å",
            location="–¢–µ—Å—Ç–æ–≤–∞—è —É–ª–∏—Ü–∞",
            equipment=["–¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä"],
            history=["–ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø—Ä–æ–±–ª–µ–º–∞"],
            satisfaction_score=2.5  # –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        )
        
        ticket = SupportTicket(
            id="TEST_001",
            customer=customer,
            problem_description="–û–ü–Ø–¢–¨ –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –ò–ù–¢–ï–†–ù–ï–¢!!! –£–∂–µ —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑ –∑–∞ –Ω–µ–¥–µ–ª—é! –ö–æ–≥–¥–∞ —ç—Ç–æ –∫–æ–Ω—á–∏—Ç—Å—è?!",
            priority=TicketPriority.HIGH,
            status=TicketStatus.NEW,
            created_at=time.time(),
            agent_actions=[]
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
        analysis = agent.analyze_problem_with_llm(ticket)
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:")
        print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis['problem_category']}")
        print(f"  –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {analysis['customer_mood']}")
        print(f"  –°—Ä–æ—á–Ω–æ—Å—Ç—å: {analysis['urgency_level']}/5")
        print(f"  –≠—Å–∫–∞–ª–∞—Ü–∏—è: {'–î–∞' if analysis['escalation_needed'] else '–ù–µ—Ç'}")
        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis['confidence']:.2f}")
        print(f"  –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {analysis['reasoning']}")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    test_real_llm()
