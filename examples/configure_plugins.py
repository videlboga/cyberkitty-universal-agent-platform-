#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–æ–≤ KittyCore —á–µ—Ä–µ–∑ Admin API

–ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!
- –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ HTTP API
- –ù–∏–∫–∞–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
"""

import asyncio
import httpx
from typing import Dict, Any

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://localhost:8000/api/v1/admin"

async def configure_telegram_plugin():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –ø–ª–∞–≥–∏–Ω–∞"""
    print("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –ø–ª–∞–≥–∏–Ω–∞...")
    
    settings = {
        "bot_token": "1234567890:ABCDEF1234567890abcdef1234567890ABC",
        "webhook_url": None,
        "webhook_secret": None
    }
    
    async with httpx.AsyncClient() as client:
        response = await client.post(
            f"{BASE_URL}/plugins/telegram/settings",
            json=settings,
            timeout=30.0
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {result['message']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram: {response.text}")

async def configure_amocrm_plugin():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ AmoCRM –ø–ª–∞–≥–∏–Ω–∞"""
    print("üè¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AmoCRM –ø–ª–∞–≥–∏–Ω–∞...")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = {
        "base_url": "https://example.amocrm.ru",
        "access_token": "your_access_token_here"
    }
    
    async with httpx.AsyncClient() as client:
        response = await client.post(
            f"{BASE_URL}/plugins/amocrm/settings",
            json=settings,
            timeout=30.0
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ AmoCRM –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {result['message']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM: {response.text}")
    
    # –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π
    fields_map = {
        "telegram_id": {
            "id": 951775,
            "name": "TG username",
            "type": "text"
        },
        "phone": {
            "id": 881883,
            "name": "–¢–µ–ª–µ—Ñ–æ–Ω",
            "type": "multiphonemail",
            "enums": [
                {"id": 881885, "value": "WORK", "sort": 1}
            ]
        },
        "email": {
            "id": 881885,
            "name": "Email",
            "type": "multiphonemail",
            "enums": [
                {"id": 881887, "value": "WORK", "sort": 1}
            ]
        }
    }
    
    async with httpx.AsyncClient() as client:
        response = await client.post(
            f"{BASE_URL}/plugins/amocrm/fields",
            json={"fields_map": fields_map},
            timeout=30.0
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ü–æ–ª—è AmoCRM –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: {result['message']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–µ–π AmoCRM: {response.text}")

async def configure_llm_plugin():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ LLM –ø–ª–∞–≥–∏–Ω–∞"""
    print("üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LLM –ø–ª–∞–≥–∏–Ω–∞...")
    
    settings = {
        "openrouter_api_key": "sk-or-v1-your-key-here",
        "openai_api_key": None,
        "anthropic_api_key": None,
        "default_model": "meta-llama/llama-3.2-3b-instruct:free"
    }
    
    async with httpx.AsyncClient() as client:
        response = await client.post(
            f"{BASE_URL}/plugins/llm/settings",
            json=settings,
            timeout=30.0
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ LLM –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {result['message']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM: {response.text}")

async def check_plugins_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤"""
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–≥–∏–Ω–æ–≤...")
    
    async with httpx.AsyncClient() as client:
        response = await client.get(
            f"{BASE_URL}/plugins/status",
            timeout=30.0
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"\nüìã –°—Ç–∞—Ç—É—Å –ø–ª–∞–≥–∏–Ω–æ–≤ ({result['total_plugins']} –ø–ª–∞–≥–∏–Ω–æ–≤):")
            
            for plugin_name, plugin_info in result['plugins'].items():
                health = "‚úÖ" if plugin_info['health'] else "‚ùå"
                configured = plugin_info.get('settings', {}).get('configured', False)
                config_status = "üîß" if configured else "‚öôÔ∏è"
                
                print(f"  {health} {config_status} {plugin_name}")
                
                if 'error' in plugin_info:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞: {plugin_info['error']}")
                    
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.text}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤ KittyCore —á–µ—Ä–µ–∑ Admin API")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await check_plugins_status()
        
        print("\nüîß –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–ª–∞–≥–∏–Ω–æ–≤...")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        # await configure_telegram_plugin()
        # await configure_amocrm_plugin()
        # await configure_llm_plugin()
        
        print("\n‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print("üí° –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print("\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:")
        await check_plugins_status()
        
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 