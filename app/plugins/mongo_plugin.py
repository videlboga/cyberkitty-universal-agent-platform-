#!/usr/bin/env python3
"""
MongoDB Plugin –¥–ª—è Universal Agent Platform.
–ü—Ä–∏–Ω—Ü–∏–ø: –ü—Ä–æ—Å—Ç–æ—Ç–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å –ë–î.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤, —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ 
- –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
"""

import os
import asyncio
from typing import Dict, List, Any, Optional
from datetime import datetime
from motor.motor_asyncio import AsyncIOMotorClient
from bson import ObjectId
from loguru import logger

from app.core.base_plugin import BasePlugin
from app.models import ChannelMapping, Scenario, User, ScenarioExecution
from app.config.database import DB_CONFIG


class MongoPlugin(BasePlugin):
    """
    –ü–ª–∞–≥–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MongoDB.
    
    –ö–æ–ª–ª–µ–∫—Ü–∏–∏:
    - scenarios - —Å—Ü–µ–Ω–∞—Ä–∏–∏
    - users - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    - executions - –∏—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
    - channel_mappings - –º–∞–ø–ø–∏–Ω–≥–∏ –∫–∞–Ω–∞–ª–æ–≤ –∫ —Å—Ü–µ–Ω–∞—Ä–∏—è–º
    """
    
    def __init__(self):
        super().__init__(name="mongo")
        self.client: Optional[AsyncIOMotorClient] = None
        self.db = None

        self.scenarios_collection = None
        self.users_collection = None
        self.executions_collection = None
        self.channel_mappings_collection = None
        self.channel_mappings_collection = None
        
    async def _do_initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB —Å retry –ª–æ–≥–∏–∫–æ–π."""
        for attempt in range(DB_CONFIG.retry_attempts):
            try:
                logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{DB_CONFIG.retry_attempts})")
                logger.info(f"üìä URI: {DB_CONFIG.uri} -> –ë–î: {DB_CONFIG.database_name}")
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
                connection_string = DB_CONFIG.get_connection_string()
                self.client = AsyncIOMotorClient(
                    connection_string,
                    serverSelectionTimeoutMS=DB_CONFIG.connection_timeout * 1000,
                    connectTimeoutMS=DB_CONFIG.connection_timeout * 1000,
                    socketTimeoutMS=DB_CONFIG.connection_timeout * 1000
                )
                
                self.db = self.client[DB_CONFIG.database_name]
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                self.scenarios_collection = self.db.scenarios
                self.users_collection = self.db.users
                self.executions_collection = self.db.executions
                self.channel_mappings_collection = self.db.channel_mappings
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                await self.client.admin.command('ismaster')
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
                await self._ensure_database_structure()
                
                logger.info("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                
                if attempt < DB_CONFIG.retry_attempts - 1:
                    logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {DB_CONFIG.retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    await asyncio.sleep(DB_CONFIG.retry_delay)
                else:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                    self.client = None
            
    async def _ensure_database_structure(self):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏."""
        try:
            from app.database.migrations import ensure_database_ready
            await ensure_database_ready()
            logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î: {e}")
            # Fallback - —Å–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã
            await self._create_basic_indexes()
    
    async def _create_basic_indexes(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (fallback)."""
        try:
            logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...")
            
            # –¢–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            await self.scenarios_collection.create_index("scenario_id", unique=True)
            await self.users_collection.create_index([("user_id", 1), ("channel_type", 1)], unique=True)
            await self.channel_mappings_collection.create_index("channel_id", unique=True)
            
            logger.info("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã: {e}")
            
    def register_handlers(self) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è MongoDB –æ–ø–µ—Ä–∞—Ü–∏–π."""
        return {
            # === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
            "mongo_insert_document": self._wrap_handler(self.insert_document),
            "mongo_upsert_document": self._wrap_handler(self.upsert_document),
            "mongo_find_documents": self._wrap_handler(self.find_documents),
            "mongo_find_one_document": self._wrap_handler(self.find_one_document),
            "mongo_update_document": self._wrap_handler(self.update_document),
            "mongo_delete_document": self._wrap_handler(self.delete_document),
            
            # ChannelMapping (–Ω–æ–≤–∞—è —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
            "mongo_create_channel_mapping": self._wrap_step_handler(self.create_channel_mapping),
            "mongo_get_channel_mapping": self._wrap_step_handler(self.get_channel_mapping),
            "mongo_list_channel_mappings": self._wrap_step_handler(self.list_channel_mappings),
            "mongo_delete_channel_mapping": self._wrap_step_handler(self.delete_channel_mapping),
            
            # –°—Ü–µ–Ω–∞—Ä–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            "mongo_create_scenario": self._wrap_handler(self.create_scenario),
            "mongo_get_scenario": self._wrap_step_handler(self.get_scenario_by_id),
            "mongo_get_scenario_by_id": self._wrap_step_handler(self.get_scenario_by_id),
            "mongo_update_scenario": self._wrap_handler(self.update_scenario),
            "mongo_delete_scenario": self._wrap_handler(self.delete_scenario),
            "mongo_list_scenarios": self._wrap_handler(self.list_scenarios),
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            "mongo_create_execution": self._wrap_handler(self.create_execution),
            "mongo_get_execution": self._wrap_handler(self.get_execution),
            "mongo_update_execution": self._wrap_handler(self.update_execution),
            "mongo_list_executions": self._wrap_handler(self.list_executions),
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            "mongo_save_scenario": self._wrap_handler(self.save_scenario),
        }
    
    def _wrap_handler(self, handler):
        """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π (context)."""
        async def wrapper(step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —à–∞–≥–∞
            params = step.get("params", {})
            output_var = params.get("output_var")
            context_key = params.get("context_key")  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∞—Ç–æ–º–∞—Ä–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            merged_context = {**context, **params}
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            result = await handler(merged_context)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if output_var:
                context[output_var] = result
            elif context_key:
                context[context_key] = result
            
            return context
            
        return wrapper
    
    def _wrap_step_handler(self, handler):
        """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π (step, context)."""
        return handler
    
    async def healthcheck(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
        try:
            if not self.client:
                return False
                
            # –ü–∏–Ω–≥ –ë–î
            await self.client.admin.command('ismaster')
            return True
            
        except Exception as e:
            logger.error(f"MongoDB healthcheck failed: {e}")
            return False
    
    # === –°–¶–ï–ù–ê–†–ò–ò ===
    
    async def create_scenario(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π."""
        try:
            if not self.client:
                raise Exception("MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
            # –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            scenario_data = {
                "scenario_id": context["scenario_id"],
                "name": context["name"],
                "description": context.get("description"),
                "steps": context["steps"],
                "initial_context": context.get("initial_context", {}),
                "version": 1,
                "created_at": datetime.utcnow(),
                "updated_at": datetime.utcnow(),
                "created_by": context.get("created_by"),
                "usage_count": 0
            }
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ë–î
            result = await self.scenarios_collection.insert_one(scenario_data)
            db_id = str(result.inserted_id)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario_data['scenario_id']} (DB ID: {db_id})")
            
            return {
                "success": True,
                "scenario_id": scenario_data["scenario_id"],
                "db_id": db_id,
                "scenario": {
                    "id": db_id,
                    "scenario_id": scenario_data["scenario_id"],
                    "name": scenario_data["name"],
                    "description": scenario_data.get("description"),
                    "steps": scenario_data["steps"],
                    "initial_context": scenario_data.get("initial_context", {}),
                    "version": scenario_data["version"],
                    "created_at": scenario_data["created_at"].isoformat(),
                    "updated_at": scenario_data["updated_at"].isoformat(),
                    "created_by": scenario_data.get("created_by"),
                    "is_public": scenario_data.get("is_public", False),
                    "usage_count": scenario_data["usage_count"]
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
            return {"success": False, "error": str(e)}
    
    async def get_scenario_by_id(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ scenario_id."""
        try:
            if not self.client:
                logger.error("MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return context
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ step (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
            scenario_id = self.get_param(step, "scenario_id", required=True)
            output_var = self.get_param(step, "output_var")
            
            # –ü–æ–∏—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
            scenario_data = await self.scenarios_collection.find_one({
                "scenario_id": scenario_id
            })
            
            if scenario_data:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ObjectId –≤ —Å—Ç—Ä–æ–∫—É
                scenario_data["id"] = str(scenario_data["_id"])
                del scenario_data["_id"]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                await self.scenarios_collection.update_one(
                    {"scenario_id": scenario_id},
                    {
                        "$inc": {"usage_count": 1},
                        "$set": {"last_used": datetime.utcnow()}
                    }
                )
                
                result = {"success": True, "scenario": scenario_data}
            else:
                result = {"success": False, "error": "–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            if output_var:
                context[output_var] = result
                
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
            if self.get_param(step, "output_var"):
                context[self.get_param(step, "output_var")] = {"success": False, "error": str(e)}
            return context
    
    async def list_scenarios(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
        try:
            if not self.client:
                return {"success": False, "error": "MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
                
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            filters = {}
            # –£–±–∏—Ä–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
                
            # –ü–æ–∏—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            cursor = self.scenarios_collection.find(filters)
            scenarios = []
            
            async for scenario_data in cursor:
                scenario_data["id"] = str(scenario_data["_id"])
                del scenario_data["_id"]
                scenarios.append(scenario_data)
                
            return {
                "success": True,
                "scenarios": scenarios,
                "count": len(scenarios)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
            return {"success": False, "error": str(e)}
    
    # === –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===
    
    async def create_execution(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
        try:
            if not self.client:
                return {"success": False, "error": "MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
                
            execution_data = {
                "agent_id": context["agent_id"],
                "scenario_id": context["scenario_id"],
                "user_id": context.get("user_id"),
                "chat_id": context.get("chat_id"),
                "started_at": datetime.utcnow(),
                "initial_context": context.get("initial_context", {}),
                "executed_steps": [],
                "current_step": context.get("current_step")
            }
            
            result = await self.executions_collection.insert_one(execution_data)
            execution_id = str(result.inserted_id)
            
            return {
                "success": True,
                "execution_id": execution_id
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            return {"success": False, "error": str(e)}
    
    # === –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ú–ï–¢–û–î–´ ===
    
    async def update_scenario(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π."""
        try:
            if not self.client:
                return {"success": False, "error": "MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
                
            scenario_id = context["scenario_id"]
            update_data = context.get("update_data", {})
            update_data["updated_at"] = datetime.utcnow()
            
            result = await self.scenarios_collection.update_one(
                {"scenario_id": scenario_id},
                {"$set": update_data}
            )
            
            return {"success": True, "modified_count": result.modified_count}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
            return {"success": False, "error": str(e)}
    
    async def delete_scenario(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–£–¥–∞–ª—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π (–∂—ë—Å—Ç–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)."""
        try:
            if not self.client:
                return {"success": False, "error": "MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
                
            scenario_id = context["scenario_id"]
            
            # –ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑ –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            result = await self.scenarios_collection.delete_one({"scenario_id": scenario_id})
            
            return {"success": True, "deleted_count": result.deleted_count}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
            return {"success": False, "error": str(e)}
    
    async def get_execution(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ ID."""
        try:
            if not self.client:
                return {"success": False, "error": "MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
                
            execution_id = context["execution_id"]
            
            execution_data = await self.executions_collection.find_one({"_id": ObjectId(execution_id)})
            
            if not execution_data:
                return {"success": False, "error": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
                
            execution_data["id"] = str(execution_data["_id"])
            del execution_data["_id"]
            
            return {"success": True, "execution": execution_data}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            return {"success": False, "error": str(e)}
    
    async def update_execution(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."""
        try:
            if not self.client:
                return {"success": False, "error": "MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
                
            execution_id = context["execution_id"]
            update_data = context.get("update_data", {})
            
            result = await self.executions_collection.update_one(
                {"_id": ObjectId(execution_id)},
                {"$set": update_data}
            )
            
            return {"success": True, "modified_count": result.modified_count}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            return {"success": False, "error": str(e)}
    
    async def list_executions(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π."""
        try:
            if not self.client:
                return {"success": False, "error": "MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
                
            filters = {}
            if "agent_id" in context:
                filters["agent_id"] = context["agent_id"]
            if "scenario_id" in context:
                filters["scenario_id"] = context["scenario_id"]
                
            cursor = self.executions_collection.find(filters).sort("started_at", -1).limit(100)
            executions = []
            
            async for execution_data in cursor:
                execution_data["id"] = str(execution_data["_id"])
                del execution_data["_id"]
                executions.append(execution_data)
                
            return {"success": True, "executions": executions, "count": len(executions)}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {e}")
            return {"success": False, "error": str(e)}
    
    # === CHANNEL MAPPING (–Ω–æ–≤–∞—è —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞) ===
    
    async def create_channel_mapping(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –º–∞–ø–ø–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏–π."""
        try:
            if not self.client:
                logger.error("MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return context
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ step
            channel_id = self.get_param(step, "channel_id", required=True)
            scenario_id = self.get_param(step, "scenario_id", required=True)
            channel_type = self.get_param(step, "channel_type", required=True)
            channel_config = self.get_param(step, "channel_config", default={})
            output_var = self.get_param(step, "output_var")
            
            # –°–æ–∑–¥–∞—ë–º –º–∞–ø–ø–∏–Ω–≥
            mapping_data = {
                "channel_id": channel_id,
                "scenario_id": scenario_id,
                "channel_type": channel_type,
                "channel_config": channel_config,
                "created_at": datetime.utcnow()
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
            result = await self.channel_mappings_collection.replace_one(
                {"channel_id": channel_id},
                mapping_data,
                upsert=True
            )
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω –º–∞–ø–ø–∏–Ω–≥: {channel_id} -> {scenario_id}")
            
            mapping_result = {
                "success": True,
                "channel_id": channel_id,
                "scenario_id": scenario_id,
                "channel_type": channel_type,
                "upserted": result.upserted_id is not None
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            if output_var:
                context[output_var] = mapping_result
                
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞: {e}")
            if self.get_param(step, "output_var"):
                context[self.get_param(step, "output_var")] = {"success": False, "error": str(e)}
            return context
    
    async def get_channel_mapping(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø–æ channel_id."""
        try:
            if not self.client:
                logger.error("MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return context
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ step
            channel_id = self.get_param(step, "channel_id", required=True)
            output_var = self.get_param(step, "output_var")
            
            # –ü–æ–∏—Å–∫ –º–∞–ø–ø–∏–Ω–≥–∞
            mapping_data = await self.channel_mappings_collection.find_one({"channel_id": channel_id})
            
            if mapping_data:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ObjectId –≤ —Å—Ç—Ä–æ–∫—É
                mapping_data["id"] = str(mapping_data["_id"])
                del mapping_data["_id"]
                
                result = {"success": True, "mapping": mapping_data}
            else:
                result = {"success": False, "error": "–ú–∞–ø–ø–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            if output_var:
                context[output_var] = result
                
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞: {e}")
            if self.get_param(step, "output_var"):
                context[self.get_param(step, "output_var")] = {"success": False, "error": str(e)}
            return context
    
    async def list_channel_mappings(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞–ø–ø–∏–Ω–≥–æ–≤."""
        try:
            if not self.client:
                logger.error("MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return context
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ step
            channel_type = self.get_param(step, "channel_type")
            output_var = self.get_param(step, "output_var")
            
            # –§–∏–ª—å—Ç—Ä—ã
            filters = {}
            if channel_type:
                filters["channel_type"] = channel_type
                
            # –ü–æ–∏—Å–∫ –º–∞–ø–ø–∏–Ω–≥–æ–≤
            cursor = self.channel_mappings_collection.find(filters).sort("created_at", -1)
            mappings = []
            
            async for mapping_data in cursor:
                mapping_data["id"] = str(mapping_data["_id"])
                del mapping_data["_id"]
                mappings.append(mapping_data)
                
            result = {
                "success": True,
                "mappings": mappings,
                "count": len(mappings)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            if output_var:
                context[output_var] = result
                
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞–ø–ø–∏–Ω–≥–æ–≤: {e}")
            if self.get_param(step, "output_var"):
                context[self.get_param(step, "output_var")] = {"success": False, "error": str(e)}
            return context
    
    async def delete_channel_mapping(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–£–¥–∞–ª—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø–æ channel_id."""
        try:
            if not self.client:
                logger.error("MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return context
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ step
            channel_id = self.get_param(step, "channel_id", required=True)
            output_var = self.get_param(step, "output_var")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞
            result = await self.channel_mappings_collection.delete_one({"channel_id": channel_id})
            
            mapping_result = {
                "success": True,
                "deleted_count": result.deleted_count
            }
            
            logger.info(f"‚úÖ –£–¥–∞–ª—ë–Ω –º–∞–ø–ø–∏–Ω–≥: {channel_id} (—É–¥–∞–ª–µ–Ω–æ: {result.deleted_count})")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            if output_var:
                context[output_var] = mapping_result
                
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞: {e}")
            if self.get_param(step, "output_var"):
                context[self.get_param(step, "output_var")] = {"success": False, "error": str(e)}
            return context
    
    # === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    async def insert_document(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ª—é–±—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é."""
        try:
            if not self.client:
                return {"success": False, "error": "MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
                
            collection_name = context["collection"]
            document = context["document"]
            
            collection = self.db[collection_name]
            result = await collection.insert_one(document)
            
            logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ {collection_name}: {result.inserted_id}")
            
            return {
                "success": True,
                "inserted_id": str(result.inserted_id),
                "collection": collection_name
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return {"success": False, "error": str(e)}
    
    async def upsert_document(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        try:
            if not self.client:
                return {"success": False, "error": "MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
                
            collection_name = context["collection"]
            filter_query = context["filter"]
            document = context["document"]
            
            collection = self.db[collection_name]
            result = await collection.replace_one(
                filter_query,
                document,
                upsert=True
            )
            
            logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç upsert –≤ {collection_name}: {'—Å–æ–∑–¥–∞–Ω' if result.upserted_id else '–æ–±–Ω–æ–≤–ª—ë–Ω'}")
            
            return {
                "success": True,
                "upserted_id": str(result.upserted_id) if result.upserted_id else None,
                "modified_count": result.modified_count,
                "matched_count": result.matched_count,
                "collection": collection_name
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ upsert –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return {"success": False, "error": str(e)}
    
    async def find_documents(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
        try:
            if not self.client:
                return {"success": False, "error": "MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
                
            collection_name = context["collection"]
            filter_query = context.get("filter", {})
            limit = context.get("limit", 100)
            sort = context.get("sort")
            
            collection = self.db[collection_name]
            cursor = collection.find(filter_query).limit(limit)
            
            if sort:
                cursor = cursor.sort(sort)
                
            documents = []
            async for doc in cursor:
                doc["id"] = str(doc["_id"])
                del doc["_id"]
                documents.append(doc)
                
            return {
                "success": True,
                "documents": documents,
                "count": len(documents),
                "collection": collection_name
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return {"success": False, "error": str(e)}
    
    async def find_one_document(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        try:
            if not self.client:
                return {"success": False, "error": "MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
                
            collection_name = context["collection"]
            filter_query = context["filter"]
            
            collection = self.db[collection_name]
            document = await collection.find_one(filter_query)
            
            if document:
                document["id"] = str(document["_id"])
                del document["_id"]
                
                return {
                    "success": True,
                    "document": document,
                    "collection": collection_name
                }
            else:
                return {
                    "success": False,
                    "error": "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "collection": collection_name
                }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return {"success": False, "error": str(e)}
    
    async def update_document(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        try:
            if not self.client:
                return {"success": False, "error": "MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
                
            collection_name = context["collection"]
            filter_query = context["filter"]
            update_data = context["update"]
            
            collection = self.db[collection_name]
            result = await collection.update_one(filter_query, {"$set": update_data})
            
            logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –≤ {collection_name}: {result.modified_count} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            
            return {
                "success": True,
                "modified_count": result.modified_count,
                "matched_count": result.matched_count,
                "collection": collection_name
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return {"success": False, "error": str(e)}
    
    async def delete_document(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        try:
            if not self.client:
                return {"success": False, "error": "MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
                
            collection_name = context["collection"]
            filter_query = context["filter"]
            
            collection = self.db[collection_name]
            result = await collection.delete_one(filter_query)
            
            logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω –∏–∑ {collection_name}: {result.deleted_count} —É–¥–∞–ª–µ–Ω–∏–π")
            
            return {
                "success": True,
                "deleted_count": result.deleted_count,
                "collection": collection_name
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return {"success": False, "error": str(e)}
            
    async def save_scenario(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ –ë–î."""
        try:
            scenario_data = context.get("scenario")
            if not scenario_data:
                return {"success": False, "error": "scenario data is required"}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é scenarios
            collection = self.db["scenarios"]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
            filter_query = {"scenario_id": scenario_data["scenario_id"]}
            result = await collection.replace_one(filter_query, scenario_data, upsert=True)
            
            logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_data['scenario_id']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
            
            return {
                "success": True,
                "scenario_id": scenario_data["scenario_id"],
                "upserted_id": str(result.upserted_id) if result.upserted_id else None,
                "modified_count": result.modified_count
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
            return {"success": False, "error": str(e)}