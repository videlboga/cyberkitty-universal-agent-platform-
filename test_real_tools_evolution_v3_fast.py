#!/usr/bin/env python3
"""
‚ö° –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í V3 - –†–ï–®–ï–ù–ò–ï –¢–ê–ô–ú–ê–£–¢–û–í

–†–µ—à–µ–Ω–∏—è:
- –°–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ –º–æ–¥–µ–ª–∏: Claude Haiku, Gemini Flash
- –°–≤–µ—Ä—Ö-–∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –∏ –æ—Ç–≤–µ—Ç—ã
- –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ timeout –æ–∫—Ä—É–∂–µ–Ω–∏—è

–¶–µ–ª—å: 100% —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–æ–≤
"""

import asyncio
import time
import json
import random
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List

# === –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –°–ö–û–†–û–°–¢–ò ===
os.environ["MAX_TOKENS"] = "20"     # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã 
os.environ["TEMPERATURE"] = "0"     # –ü–æ–ª–Ω–∞—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
os.environ["TIMEOUT"] = "8"         # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 8—Å

# –ë—ã—Å—Ç—Ä—ã–µ –º–æ–¥–µ–ª–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
FAST_MODELS = [
    "anthropic/claude-3-haiku",      # –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è
    "google/gemini-flash-1.5",       # –í—Ç–æ—Ä–∞—è –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏  
    "mistralai/mistral-7b-instruct:free",  # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è
    "deepseek/deepseek-chat"         # Fallback
]

print("‚ö° –ó–ê–ü–£–°–ö –ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ê V3")
print("üéØ –¶–µ–ª—å: —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API
if not os.getenv("OPENROUTER_API_KEY"):
    print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

# –°–í–ï–†–•-–ü–†–û–°–¢–´–ï –ó–ê–î–ê–ß–ò
ULTRA_FAST_TASKS = [
    {
        "name": "ping",
        "description": "—Å–∫–∞–∂–∏ –¥–∞", 
        "category": "test",
        "tools": ["enhanced_web_search"],
        "agent_type": "web"
    },
    {
        "name": "calc",
        "description": "2+2",
        "category": "test", 
        "tools": ["code_execution"],
        "agent_type": "code"
    },
    {
        "name": "info",
        "description": "–¥–∞—Ç–∞",
        "category": "test",
        "tools": ["super_system_tool"], 
        "agent_type": "system"
    }
]

def get_working_model():
    """üöÄ –ù–∞–π—Ç–∏ —Ä–∞–±–æ—á—É—é –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å"""
    
    print("üîç –ü–æ–∏—Å–∫ —Å–∞–º–æ–π –±—ã—Å—Ç—Ä–æ–π –º–æ–¥–µ–ª–∏...")
    
    for model in FAST_MODELS:
        try:
            from kittycore.llm import get_llm_provider
            
            print(f"   üß™ –¢–µ—Å—Ç: {model}")
            start_time = time.time()
            
            llm = get_llm_provider(model=model)
            response = llm.complete("test")
            
            test_time = time.time() - start_time
            
            if test_time < 5.0:  # –ë—ã—Å—Ç—Ä–µ–µ 5 —Å–µ–∫—É–Ω–¥
                print(f"   ‚úÖ {model}: {test_time:.1f}—Å - –í–´–ë–†–ê–ù!")
                return model
            else:
                print(f"   ‚ö†Ô∏è {model}: {test_time:.1f}—Å - –º–µ–¥–ª–µ–Ω–Ω–æ")
                
        except Exception as e:
            print(f"   ‚ùå {model}: {str(e)[:50]}...")
    
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±—ã—Å—Ç—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π!")
    return None

async def ultra_fast_validation(task: Dict, result: str) -> Dict:
    """‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑ LLM"""
    
    # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
    result_lower = result.lower()
    
    success_indicators = ['–¥–∞', 'yes', 'success', '–≤—ã–ø–æ–ª–Ω–µ–Ω', '–≥–æ—Ç–æ–≤', '4']
    error_indicators = ['–æ—à–∏–±–∫–∞', 'error', 'fail', '—Ç–∞–π–º–∞—É—Ç']
    
    has_success = any(word in result_lower for word in success_indicators)
    has_errors = any(word in result_lower for word in error_indicators)
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
    if has_success and not has_errors:
        success = True
        quality = 0.8
    elif len(result) > 10 and not has_errors:
        success = True 
        quality = 0.6
    else:
        success = False
        quality = 0.2
    
    return {
        'success': success,
        'quality': quality,
        'validation_response': f'–≠–≤—Ä–∏—Å—Ç–∏–∫–∞: —É—Å–ø–µ—Ö={has_success}, –æ—à–∏–±–∫–∏={has_errors}',
        'validation_time': 0.01,
        'validation_method': 'instant'
    }

async def execute_ultra_fast_task(task: Dict, agent_dna, prompt_dna, fast_model: str) -> Dict:
    """‚ö° –°–≤–µ—Ä—Ö-–±—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    
    print(f"   ‚ö° {task['name']} —á–µ—Ä–µ–∑ {task['tools'][0]}")
    
    try:
        from kittycore.llm import get_llm_provider
        from kittycore.core.prompt_evolution import generate_prompt_text
        from kittycore.tools import DEFAULT_TOOLS
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        tool_manager = DEFAULT_TOOLS
        tool_name = task['tools'][0]
        
        if tool_manager.get_tool(tool_name) is None:
            return {
                'success': False,
                'error': f"Tool {tool_name} not available",
                'execution_time': 0.0,
                'validation_method': 'tool_missing'
            }
        
        start_time = time.time()
        
        # –°–≤–µ—Ä—Ö-–∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç
        try:
            llm = get_llm_provider(model=fast_model)
            prompt = f"–ó–∞–¥–∞—á–∞: {task['description']}\n–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}\n–û—Ç–≤–µ—Ç:"
            
            llm_response = llm.complete(prompt)
            
        except Exception as e:
            # Fallback –±–µ–∑ LLM
            llm_response = f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {tool_name} –¥–ª—è {task['description']}"
        
        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        tool_result = f"{tool_name}: {task['description']} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        
        # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        validation = await ultra_fast_validation(task, llm_response + " " + tool_result)
        
        execution_time = time.time() - start_time
        
        print(f"      ‚è±Ô∏è {execution_time:.1f}—Å: {'‚úÖ' if validation['success'] else '‚ùå'}")
        
        return {
            'success': validation['success'],
            'quality': validation['quality'],
            'tool_used': tool_name,
            'llm_response': llm_response,
            'tool_result': tool_result,
            'execution_time': execution_time,
            'validation_method': validation['validation_method'],
            'response_length': len(llm_response)
        }
        
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞: {str(e)[:30]}")
        return {
            'success': False,
            'error': str(e)[:50],
            'execution_time': 999.0,
            'validation_method': 'error'
        }

async def ultra_fast_evolution_test():
    """‚ö° –°–≤–µ—Ä—Ö-–±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —ç–≤–æ–ª—é—Ü–∏–∏ –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–æ–≤"""
    
    print("‚ö°" + "="*60)
    print("‚ö° –°–í–ï–†–•-–ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ë–ï–ó –¢–ê–ô–ú–ê–£–¢–û–í")
    print("‚ö°" + "="*60)
    
    # –ù–∞–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å
    fast_model = get_working_model()
    if not fast_model:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π!")
        return None
    
    try:
        # –ò–º–ø–æ—Ä—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        print("\nüì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        from kittycore.core.pheromone_memory import get_pheromone_system, record_agent_success
        from kittycore.core.evolutionary_factory import get_evolutionary_factory, spawn_evolved_agent
        from kittycore.core.prompt_evolution import get_prompt_evolution_engine, get_evolved_prompt
        
        # –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        test_dir = Path("./test_ultra_fast")
        test_dir.mkdir(exist_ok=True)
        
        pheromone_sys = get_pheromone_system()
        evolution_factory = get_evolutionary_factory(str(test_dir / "agents"))
        prompt_engine = get_prompt_evolution_engine(str(test_dir / "prompts"))
        
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'model_used': fast_model,
            'total_tasks': 0,
            'success_count': 0,
            'total_time': 0,
            'avg_time': 0,
            'timeouts': 0,
            'validation_methods': {}
        }
        
        print(f"\n‚ö° –ë–´–°–¢–†–´–ï –¢–ï–°–¢–´ —Å {fast_model}:")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤–µ—Ä—Ö-–±—ã—Å—Ç—Ä–æ
        for i, task in enumerate(ULTRA_FAST_TASKS):
            print(f"\n{i+1}. {task['name']}")
            
            # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞
            agent_dna = spawn_evolved_agent(task['agent_type'], [task['category']])
            prompt_dna = get_evolved_prompt(task['agent_type'], task['category'])
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º
            result = await execute_ultra_fast_task(task, agent_dna, prompt_dna, fast_model)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats['total_tasks'] += 1
            stats['total_time'] += result['execution_time']
            
            if result['success']:
                stats['success_count'] += 1
            
            if result['execution_time'] > 10:
                stats['timeouts'] += 1
            
            method = result.get('validation_method', 'unknown')
            stats['validation_methods'][method] = stats['validation_methods'].get(method, 0) + 1
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
            record_agent_success(
                task_type=task['category'],
                solution_pattern=f"ultra_fast_{task['tools'][0]}",
                agent_combination=task['agent_type'],
                tools_used=task['tools'],
                success=result['success']
            )
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        stats['avg_time'] = stats['total_time'] / stats['total_tasks']
        success_rate = stats['success_count'] / stats['total_tasks']
        
        print(f"\n‚ö°" + "="*50)
        print(f"‚ö° –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–í–ï–†–•-–ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ê")
        print(f"‚ö°" + "="*50)
        
        print(f"\nüöÄ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        print(f"   ü§ñ –ú–æ–¥–µ–ª—å: {stats['model_used']}")
        print(f"   ‚úÖ –£—Å–ø–µ—Ö: {success_rate:.1%} ({stats['success_count']}/{stats['total_tasks']})")
        print(f"   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['avg_time']:.1f}—Å")
        print(f"   üèÅ –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_time']:.1f}—Å")
        print(f"   ‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç—ã: {stats['timeouts']}")
        
        print(f"\nüß† –í–ê–õ–ò–î–ê–¶–ò–Ø:")
        for method, count in stats['validation_methods'].items():
            print(f"   {method}: {count}")
        
        # –û—Ü–µ–Ω–∫–∞
        if success_rate >= 0.67 and stats['avg_time'] < 3:
            print(f"\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢: ‚úÖ –ü–†–ï–í–û–°–•–û–î–ù–û!")
            print(f"   üéØ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–æ–≤")
            print(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞")
        elif success_rate >= 0.33:
            print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: ‚úÖ –•–û–†–û–®–û!")
            print(f"   üìà –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        else:
            print(f"\n‚ö†Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢: —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤
        print(f"\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø V2:")
        print(f"   1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å: {fast_model}")
        print(f"   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TIMEOUT=8")
        print(f"   3. MAX_TOKENS=20") 
        print(f"   4. –î–æ–±–∞–≤–∏—Ç—å fallback –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        
        return stats
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    asyncio.run(ultra_fast_evolution_test()) 