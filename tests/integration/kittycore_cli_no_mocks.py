#!/usr/bin/env python3
"""
üê± KittyCore 3.0 - CLI –ë–ï–ó –ú–û–ö–û–í

–ß–ï–°–¢–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à—ë–ª = –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!
"""

import asyncio
import sys
import os
from agents.base_agent import Agent

def check_llm_config():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LLM"""
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print()
        print("üîß –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ù–£–ñ–ù–û:")
        print("   1. –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –Ω–∞ https://openrouter.ai")
        print("   2. export OPENROUTER_API_KEY='–≤–∞—à-–∫–ª—é—á'")
        print("   3. –ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .env —Å –∫–ª—é—á–æ–º")
        print()
        print("üí∞ –ë–ï–°–ü–õ–ê–¢–ù–´–ï –ú–û–î–ï–õ–ò –î–û–°–¢–£–ü–ù–´!")
        return False
    
    print(f"‚úÖ OPENROUTER_API_KEY –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    return True

async def process_request(user_input: str):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ë–ï–ó –ú–û–ö–û–í"""
    print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: {user_input}")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞—ë–º –ß–ï–°–¢–ù–û–ì–û –∞–≥–µ–Ω—Ç–∞
        agent = Agent(agent_id="main_agent", name="IntellectualAgent")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
        result = await agent.execute(user_input)
        
        if result.get('success', False):
            print(f"‚úÖ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print(f"üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: IntellectualAgent —Å –†–ï–ê–õ–¨–ù–´–ú LLM")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            files_created = result.get('files_created', [])
            if files_created:
                print(f"\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´ ({len(files_created)}):")
                for file in files_created:
                    print(f"   üìÑ {file}")
            else:
                print(f"\nüìÅ –§–ê–ô–õ–´ –ù–ï –°–û–ó–î–ê–í–ê–õ–ò–°–¨")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
            results = result.get('results', [])
            if results:
                print(f"\nüîß –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
                for i, action_result in enumerate(results, 1):
                    success_icon = "‚úÖ" if action_result.get('success') else "‚ùå"
                    action = action_result.get('action', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')
                    print(f"   {success_icon} {i}. {action}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω
            plan = result.get('plan', {})
            if plan:
                print(f"\nüìã –ü–õ–ê–ù LLM:")
                task_type = plan.get('task_type', 'unknown')
                expected_output = plan.get('expected_output', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                complexity = plan.get('complexity', 'unknown')
                print(f"   üéØ –¢–∏–ø –∑–∞–¥–∞—á–∏: {task_type}")
                print(f"   üìù –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected_output}")
                print(f"   üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity}")
        
        else:
            error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            print(f"‚ùå –ó–ê–î–ê–ß–ê –ü–†–û–í–ê–õ–ï–ù–ê!")
            print(f"üìú –û—à–∏–±–∫–∞: {error}")
            
            if "API" in error or "LLM" in error:
                print(f"\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
                print(f"   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å OPENROUTER_API_KEY")
                print(f"   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                print(f"   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã API")
                print(f"   4. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å")
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–ò–°–¢–ï–ú–´!")
        print(f"üìú –î–µ—Ç–∞–ª–∏: {e}")
        print(f"\nüö® –°–ò–°–¢–ï–ú–ê –ù–ï –ú–û–ñ–ï–¢ –†–ê–ë–û–¢–ê–¢–¨ –ë–ï–ó LLM!")
        print(f"   –ù–∏–∫–∞–∫–∏—Ö –º–æ–∫–æ–≤, –Ω–∏–∫–∞–∫–∏—Ö fallback - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ LLM!")

async def main():
    print("üê± KittyCore 3.0 - CLI –ë–ï–ó –ú–û–ö–û–í")
    print("=" * 40)
    print("–ß–ï–°–¢–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à—ë–ª = –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!")
    print("üö´ –ù–ò–ö–ê–ö–ò–• –ú–û–ö–û–í, –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï LLM!")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not check_llm_config():
        return
    
    print("–í–≤–µ–¥–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
    
    while True:
        try:
            user_input = input("üí¨ –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å: ").strip()
            
            if user_input.lower() in ['exit', '–≤—ã—Ö–æ–¥', 'quit']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not user_input:
                continue
                
            await process_request(user_input)
            print("\n" + "="*50)
            
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            print("üö® –°–ò–°–¢–ï–ú–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê!")
            break

if __name__ == "__main__":
    asyncio.run(main()) 