"""
Advanced Conditional Engine –¥–ª—è KittyCore
===========================================

–ß–ê–°–¢–¨ 2 ROADMAP: –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏ —É–º–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
- –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç LangGraph –ø–æ –≥–∏–±–∫–æ—Å—Ç–∏ —É—Å–ª–æ–≤–∏–π
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã

–ê–≤—Ç–æ—Ä—ã: –ö–∏–±–µ—Ä –∫–æ—Ç—è—Ç–∞ üê±‚ö°
"""

from typing import Any, Dict, List, Optional, Union, Callable
from dataclasses import dataclass
from enum import Enum
import re
import json
import logging
logger = logging.getLogger(__name__)


class ConditionOperator(Enum):
    """–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —É—Å–ª–æ–≤–∏–π - –∫–∞–∫ –≤ LangGraph, –Ω–æ –ª—É—á—à–µ!"""
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    EQUALS = "=="
    NOT_EQUALS = "!="
    GREATER = ">"
    LESS = "<"
    GREATER_EQUAL = ">="
    LESS_EQUAL = "<="
    
    # –õ–æ–≥–∏—á–µ—Å–∫–∏–µ
    AND = "and"
    OR = "or"
    NOT = "not"
    
    # –°—Ç—Ä–æ–∫–æ–≤—ã–µ
    CONTAINS = "contains"
    STARTS_WITH = "starts_with"
    ENDS_WITH = "ends_with"
    REGEX = "regex"
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª—è KittyCore!)
    IN_LIST = "in"
    EXISTS = "exists"
    IS_EMPTY = "is_empty"
    TYPE_IS = "type_is"


@dataclass
class ConditionResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏—è"""
    success: bool
    value: Any
    message: str
    context_updates: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.context_updates is None:
            self.context_updates = {}
    
    @property 
    def result(self):
        """–ê–ª–∏–∞—Å –¥–ª—è value –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return self.value


class ExpressionParser:
    """
    –£–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –≤—ã—Ä–∞–∂–µ–Ω–∏–π - –ü–†–ï–í–û–°–•–û–î–ò–¢ LANGRAPH!
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - ‚úÖ –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏: ((a > 5) and (b < 10)) or (c == 'test')
    - ‚úÖ –§—É–Ω–∫—Ü–∏–∏: kitten.mood() == 'enthusiastic'
    - ‚úÖ –°—Ç—Ä–æ–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: name.contains('admin')
    - ‚úÖ –ö–æ—Ç—è—á—å–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: kitten.skill('Nova', 'analysis') > 8
    """
    
    def __init__(self, condition_engine):
        self.engine = condition_engine
        self.logger = logger
    
    def parse_and_evaluate(self, expression: str, context: Dict[str, Any]) -> ConditionResult:
        """
        –ü–∞—Ä—Å–∏—Ç –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ–µ —É—Å–ª–æ–≤–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        
        Args:
            expression: –°—Ç—Ä–æ–∫–∞ —Å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–∏–ø–∞ "age > 18 and status == 'active'"
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            
        Returns:
            ConditionResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏
        """
        try:
            self.logger.info(f"üîç –û—Ü–µ–Ω–∏–≤–∞—é –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {expression}")
            
            # –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥: –∑–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è
            processed_expr = self._preprocess_functions(expression, context)
            self.logger.debug(f"üìù –ü–æ—Å–ª–µ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞: {processed_expr}")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            result = self._safe_eval(processed_expr, context)
            
            return ConditionResult(
                success=True,
                value=result,
                message=f"–í—ã—Ä–∞–∂–µ–Ω–∏–µ '{expression}' = {result}",
                context_updates={}
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ '{expression}': {e}")
            return ConditionResult(
                success=False,
                value=False,
                message=f"–û—à–∏–±–∫–∞: {str(e)}",
                context_updates={}
            )
    
    def _preprocess_functions(self, expression: str, context: Dict[str, Any]) -> str:
        """–ó–∞–º–µ–Ω—è–µ—Ç –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è"""
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π: function.name(arg1, arg2)
        function_pattern = r'([a-zA-Z_][a-zA-Z0-9_.]*)\(([^)]*)\)'
        
        def replace_function(match):
            func_name = match.group(1)
            args_str = match.group(2).strip()
            
            # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            if args_str:
                # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏ —á–∏—Å–ª–∞)
                args = []
                for arg in args_str.split(','):
                    arg = arg.strip()
                    if arg.startswith('"') and arg.endswith('"'):
                        args.append(arg[1:-1])  # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
                    elif arg.startswith("'") and arg.endswith("'"):
                        args.append(arg[1:-1])  # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
                    else:
                        try:
                            args.append(int(arg))
                        except ValueError:
                            try:
                                args.append(float(arg))
                            except ValueError:
                                args.append(arg)
            else:
                args = []
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            if func_name in self.engine.custom_functions:
                try:
                    result = self.engine.custom_functions[func_name](context, *args)
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    if isinstance(result, str):
                        return f"'{result}'"
                    else:
                        return str(result)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}: {e}")
                    return "None"
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {func_name}")
                return "None"
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
        return re.sub(function_pattern, replace_function, expression)
    
    def _safe_eval(self, expression: str, context: Dict[str, Any]) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
        # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        processed = self._replace_variables(expression, context)
        
        # –ó–∞–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–∞ Python-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ
        processed = self._replace_operators(processed)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è eval
        safe_globals = {
            "__builtins__": {},
            "True": True,
            "False": False,
            "None": None,
            "len": len,
        }
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        try:
            result = eval(processed, safe_globals, {})
            return bool(result)
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ eval: {e} –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏: {processed}")
            return False
    
    def _replace_variables(self, expression: str, context: Dict[str, Any]) -> str:
        """–ó–∞–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        import re
        
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º {–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ} –≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
        brace_pattern = r'\{([^}]+)\}'
        
        def replace_brace_var(match):
            var_name = match.group(1).strip()
            if var_name in context:
                value = context[var_name]
                if isinstance(value, str):
                    return f"'{value}'"
                else:
                    return str(value)
            else:
                return "None"
        
        expression = re.sub(brace_pattern, replace_brace_var, expression)
        
        # –ó–∞—Ç–µ–º –∑–∞–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        var_pattern = r'\b([a-zA-Z_][a-zA-Z0-9_]*)\b'
        
        def replace_var(match):
            var_name = match.group(1)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ Python
            if var_name in ['and', 'or', 'not', 'True', 'False', 'None', 'in', 'len']:
                return var_name
            
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if var_name in context:
                value = context[var_name]
                if isinstance(value, str):
                    return f"'{value}'"
                else:
                    return str(value)
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—á–∏—Ç–∞–µ—Ç—Å—è None
                return "None"
        
        return re.sub(var_pattern, replace_var, expression)
    
    def _replace_operators(self, expression: str) -> str:
        """–ó–∞–º–µ–Ω—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã"""
        import re
        
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º AND/OR –Ω–∞ python –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
        expression = re.sub(r'\bAND\b', ' and ', expression)
        expression = re.sub(r'\bOR\b', ' or ', expression)
        expression = re.sub(r'\bNOT\b', ' not ', expression)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ None –∏ –ø—Ä–æ–±–µ–ª—ã
        expression = re.sub(r'\bNone\b\s*', '', expression)
        expression = re.sub(r'\s+', ' ', expression).strip()
        
        # –ó–∞–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–∞ Python-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ
        replacements = {
            'contains': 'in',
            'starts_with': '.startswith',
            'ends_with': '.endswith',
        }
        
        for old, new in replacements.items():
            expression = expression.replace(old, new)
        
        return expression


class AdvancedConditionEngine:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–≤–∏–∂–æ–∫ —É—Å–ª–æ–≤–∏–π - –ü–†–ï–í–û–°–•–û–î–ò–¢ LANGRAPH!
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - ‚úÖ –°–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: (age > 18 and status == 'active') or vip == true
    - ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: kitten.mood(), user.role(), time.hour()
    - ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
    - ‚úÖ –ö–∏–±–µ—Ä –∫–æ—Ç—è—Ç–∞ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —É—Å–ª–æ–≤–∏—è!
    """
    
    def __init__(self):
        self.logger = logger
        self.custom_functions: Dict[str, Callable] = {}
        self._register_builtin_functions()
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Å–µ—Ä –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        self.parser = ExpressionParser(self)
        
    def _register_builtin_functions(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        self.custom_functions.update({
            # –ö–æ—Ç—è—á—å–∏ —Ñ—É–Ω–∫—Ü–∏–∏! üê±
            "kitten.mood": self._kitten_mood,
            "kitten.energy": self._kitten_energy,
            "kitten.skill": self._kitten_skill,
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            "user.role": self._user_role,
            "user.experience": self._user_experience,
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            "time.hour": self._time_hour,
            "time.day_of_week": self._time_day_of_week,
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            "context.get": self._context_get,
            "context.exists": self._context_exists,
            "context.count": self._context_count,
        })
        
        self.logger.info("üîß –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", count=len(self.custom_functions))
    
    # === –í–°–¢–†–û–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
    
    def _kitten_mood(self, context: Dict[str, Any], kitten_name: str = None) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ—Ç—ë–Ω–∫–∞"""
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ—Ç—ë–Ω–æ–∫, –±–µ—Ä—ë–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
        if not kitten_name:
            kitten_name = context.get("active_kitten", "Nova")
        
        # –ö–æ—Ç—è—Ç–∞ –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        energy = context.get("kitten_energy", 80)
        success_rate = context.get("last_task_success", True)
        
        if energy > 80 and success_rate:
            return "enthusiastic"  # –≠–Ω—Ç—É–∑–∏–∞–∑–º
        elif energy > 60:
            return "focused"       # –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ—Å—Ç—å
        elif energy > 40:
            return "calm"          # –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ
        else:
            return "tired"         # –£—Å—Ç–∞–ª–æ—Å—Ç—å
    
    def _kitten_energy(self, context: Dict[str, Any], kitten_name: str = None) -> int:
        """–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –∫–æ—Ç—ë–Ω–∫–∞ (0-100)"""
        base_energy = context.get("kitten_energy", 80)
        
        # –≠–Ω–µ—Ä–≥–∏—è –∫–æ—Ç—è—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        tasks_completed = context.get("tasks_completed_today", 0)
        energy_drain = min(tasks_completed * 5, 30)
        
        return max(0, base_energy - energy_drain)
    
    def _kitten_skill(self, context: Dict[str, Any], kitten_name: str, skill: str) -> int:
        """–£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –∫–æ—Ç—ë–Ω–∫–∞ (0-10)"""
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∫–æ—Ç—è—Ç –∏–∑ cyber_kitten_agents.py
        kitten_skills = {
            "Nova": {"analysis": 10, "creativity": 7, "tech": 9},
            "Sherlock": {"research": 10, "analysis": 9, "creativity": 6},
            "Artemis": {"creativity": 10, "analysis": 8, "tech": 6},
            "Cypher": {"tech": 10, "analysis": 8, "creativity": 7},
            "Ada": {"tech": 10, "analysis": 9, "creativity": 8},
            "Warren": {"analysis": 9, "creativity": 6, "tech": 7},
            "Viral": {"creativity": 10, "analysis": 7, "tech": 8}
        }
        
        return kitten_skills.get(kitten_name, {}).get(skill, 5)
    
    def _user_role(self, context: Dict[str, Any]) -> str:
        """–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return context.get("user_role", "user")
    
    def _user_experience(self, context: Dict[str, Any]) -> int:
        """–û–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–Ω–∏)"""
        return context.get("user_experience_days", 1)
    
    def _time_hour(self, context: Dict[str, Any]) -> int:
        """–¢–µ–∫—É—â–∏–π —á–∞—Å (0-23)"""
        from datetime import datetime
        return datetime.now().hour
    
    def _time_day_of_week(self, context: Dict[str, Any]) -> int:
        """–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)"""
        from datetime import datetime
        return datetime.now().weekday()
    
    def _context_get(self, context: Dict[str, Any], key: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        return context.get(key, default)
    
    def _context_exists(self, context: Dict[str, Any], key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
        return key in context
    
    def _context_count(self, context: Dict[str, Any], pattern: str) -> int:
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–ª—é—á–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É"""
        count = 0
        for key in context.keys():
            if pattern in key:
                count += 1
        return count

    async def evaluate_condition(self, condition: Union[str, Dict[str, Any]], context: Dict[str, Any]) -> ConditionResult:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π - –õ–£–ß–®–ï LANGRAPH!
        
        Args:
            condition: –£—Å–ª–æ–≤–∏–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            ConditionResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏
        """
        try:
            if isinstance(condition, str):
                # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                return self.parser.parse_and_evaluate(condition, context)
            
            elif isinstance(condition, dict):
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ
                return self._evaluate_structured_condition(condition, context)
            
            else:
                return ConditionResult(
                    success=False,
                    value=False,
                    message=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —É—Å–ª–æ–≤–∏—è: {type(condition)}"
                )
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏—è: {e}")
            return ConditionResult(
                success=False,
                value=False,
                message=f"–û—à–∏–±–∫–∞: {str(e)}"
            )
    
    def _evaluate_structured_condition(self, condition: Dict[str, Any], context: Dict[str, Any]) -> ConditionResult:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ"""
        operator = condition.get("operator", "==")
        left = condition.get("left")
        right = condition.get("right")
        
        # –†–µ–∑–æ–ª–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏—è
        left_value = self._resolve_value(left, context)
        right_value = self._resolve_value(right, context)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä
        result = self._apply_operator(operator, left_value, right_value)
        
        return ConditionResult(
            success=True,
            value=result,
            message=f"{left_value} {operator} {right_value} = {result}"
        )
    
    def _resolve_value(self, value: Any, context: Dict[str, Any]) -> Any:
        """–†–µ–∑–æ–ª–≤–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
        if isinstance(value, str):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è
            if value in self.custom_functions:
                return self.custom_functions[value](context)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            elif value in context:
                return context[value]
            # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            else:
                return value
        else:
            return value
    
    def _apply_operator(self, operator: str, left: Any, right: Any) -> bool:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä –∫ –¥–≤—É–º –∑–Ω–∞—á–µ–Ω–∏—è–º"""
        try:
            if operator == "==":
                return left == right
            elif operator == "!=":
                return left != right
            elif operator == ">":
                return left > right
            elif operator == "<":
                return left < right
            elif operator == ">=":
                return left >= right
            elif operator == "<=":
                return left <= right
            elif operator == "contains":
                return str(right) in str(left)
            elif operator == "starts_with":
                return str(left).startswith(str(right))
            elif operator == "ends_with":
                return str(left).endswith(str(right))
            elif operator == "in":
                return left in right
            elif operator == "exists":
                return left is not None
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {operator}")
                return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {operator}: {e}")
            return False


# === –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ===

def demo_conditions():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Advanced Conditional Engine"""
    engine = AdvancedConditionEngine()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = {
        "user_role": "admin",
        "user_experience_days": 30,
        "active_kitten": "Nova",
        "kitten_energy": 85,
        "last_task_success": True,
        "tasks_completed_today": 2,
        "user_age": 25,
        "user_status": "active"
    }
    
    print("üß™ –î–µ–º–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —É—Å–ª–æ–≤–∏–π Advanced Conditional Engine:")
    print(f"üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}")
    print()
    
    # –¢–µ—Å—Ç 1: –ö–æ—Ç—è—á—å–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    print("üê± –¢–µ—Å—Ç 1: –ö–æ—Ç—è—á—å–∏ —Ñ—É–Ω–∫—Ü–∏–∏")
    print(f"   –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ù–æ–≤—ã: {engine._kitten_mood(context)}")
    print(f"   –≠–Ω–µ—Ä–≥–∏—è –ù–æ–≤—ã: {engine._kitten_energy(context)}")
    print(f"   –ù–∞–≤—ã–∫ –∞–Ω–∞–ª–∏–∑–∞ –ù–æ–≤—ã: {engine._kitten_skill(context, 'Nova', 'analysis')}")
    print()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç—ã–µ —É—Å–ª–æ–≤–∏—è (—Å—Ç—Ä–æ–∫–∏)
    print("üîç –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è")
    
    test_conditions = [
        "user_age > 18",
        "user_role == 'admin'",
        "kitten.energy() > 70",
        "kitten.mood() == 'enthusiastic'",
        "kitten.skill('Nova', 'analysis') > 8"
    ]
    
    for condition in test_conditions:
        result = engine.evaluate_condition(condition, context)
        print(f"   '{condition}' ‚Üí {result.value} ({result.message})")
    print()
    
    # –¢–µ—Å—Ç 3: –°–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    print("üöÄ –¢–µ—Å—Ç 3: –°–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–ü–†–ï–í–û–°–•–û–î–ò–ú LANGRAPH!)")
    
    complex_conditions = [
        "user_age > 18 and user_role == 'admin'",
        "(user_experience_days > 7) and (kitten.energy() > 50)",
        "kitten.mood() == 'enthusiastic' or kitten.energy() > 90",
        "(user_role == 'admin') and (kitten.skill('Nova', 'analysis') == 10)"
    ]
    
    for condition in complex_conditions:
        result = engine.evaluate_condition(condition, context)
        print(f"   '{condition}'")
        print(f"   ‚Üí {result.value} ‚úÖ" if result.value else f"   ‚Üí {result.value} ‚ùå")
    print()
    
    # –¢–µ—Å—Ç 4: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    print("üìã –¢–µ—Å—Ç 4: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
    
    structured_condition = {
        "operator": ">",
        "left": "user_age",
        "right": 20
    }
    
    result = engine.evaluate_condition(structured_condition, context)
    print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ: {structured_condition}")
    print(f"   ‚Üí {result.value} ({result.message})")
    print()
    
    # –¢–µ—Å—Ç 5: –§—É–Ω–∫—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    print("‚è∞ –¢–µ—Å—Ç 5: –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    current_hour = engine._time_hour(context)
    day_of_week = engine._time_day_of_week(context)
    print(f"   –¢–µ–∫—É—â–∏–π —á–∞—Å: {current_hour}")
    print(f"   –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {day_of_week} (0=–ø–Ω, 6=–≤—Å)")
    
    time_condition = f"time.hour() >= 9 and time.hour() <= 18"
    result = engine.evaluate_condition(time_condition, context)
    print(f"   –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: '{time_condition}' ‚Üí {result.value}")
    print()
    
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: KittyCore Advanced Conditional Engine –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç LangGraph!")
    print("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ—Ç—è—á—å–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    print("   ‚úÖ –°–ª–æ–∂–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è") 
    print("   ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è")
    print("   ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    print("   üöÄ –ì–æ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ SimpleScenarioEngine!")


if __name__ == "__main__":
    demo_conditions() 