#!/usr/bin/env python3
"""
üß† –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ê–ú–û–†–ï–î–£–ü–õ–ò–¶–ò–†–£–Æ–©–ï–ô–°–Ø –°–ò–°–¢–ï–ú–´ –° LLM

–¶–µ–ª—å: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–≤–æ–ª—é—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ LLM –≤—ã–∑–æ–≤–∞–º–∏
–ü—Ä–∏–Ω—Ü–∏–ø: "–ù–∞—Å—Ç–æ—è—â–∏–µ –∞–≥–µ–Ω—Ç—ã, –Ω–∞—Å—Ç–æ—è—â–∏–µ –∑–∞–¥–∞—á–∏, –Ω–∞—Å—Ç–æ—è—â–µ–µ –æ–±—É—á–µ–Ω–∏–µ"
"""

import asyncio
import time
import json
import random
import os
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
# –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
if not os.getenv("OPENROUTER_API_KEY"):
    # –ü—Ä–æ–±—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π fallback - mock —Ä–µ–∂–∏–º
    print("‚ö†Ô∏è OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º mock —Ä–µ–∂–∏–º")
    os.environ["DEFAULT_MODEL"] = "mock"
else:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à—É—é –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –º–æ–¥–µ–ª—å
    os.environ["DEFAULT_MODEL"] = "deepseek/deepseek-chat"  # –õ—É—á—à–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏

os.environ["MAX_TOKENS"] = "100"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤  
os.environ["TEMPERATURE"] = "0.1"  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è  
import logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

# –†–µ–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è LLM –∞–≥–µ–Ω—Ç–æ–≤
REAL_TASKS = [
    {
        "type": "simple_math",
        "description": "–ü–æ—Å—á–∏—Ç–∞–π 15 * 7 + 23",
        "expected_pattern": "128",
        "complexity": "simple",
        "agent_type": "analysis"
    },
    {
        "type": "code_generation", 
        "description": "–ù–∞–ø–∏—à–∏ Python —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞",
        "expected_pattern": "def factorial",
        "complexity": "medium",
        "agent_type": "code"
    },
    {
        "type": "text_analysis",
        "description": "–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: '–Ø –æ—á–µ–Ω—å —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω –∏ –∑–ª—é—Å—å!'",
        "expected_pattern": "–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ",
        "complexity": "simple", 
        "agent_type": "analysis"
    },
    {
        "type": "problem_solving",
        "description": "–£ –º–µ–Ω—è –µ—Å—Ç—å 100 —Ä—É–±–ª–µ–π. –•–ª–µ–± —Å—Ç–æ–∏—Ç 30 —Ä—É–±–ª–µ–π, –º–æ–ª–æ–∫–æ 50 —Ä—É–±–ª–µ–π. –°–∫–æ–ª—å–∫–æ —Å–¥–∞—á–∏?",
        "expected_pattern": "20",
        "complexity": "medium",
        "agent_type": "analysis"
    },
    {
        "type": "creative_writing",
        "description": "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ç–∏—Ö –ø—Ä–æ –∫–æ—Ç–∞ (2 —Å—Ç—Ä–æ—á–∫–∏)",
        "expected_pattern": "–∫–æ—Ç",
        "complexity": "medium",
        "agent_type": "creative"
    }
]

async def execute_real_llm_task(task, agent_dna, prompt_dna):
    """üß† –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ LLM"""
    
    print(f"   ü§ñ –ê–≥–µ–Ω—Ç {agent_dna.agent_id[:12]}... –≤—ã–ø–æ–ª–Ω—è–µ—Ç: {task['description']}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        from kittycore.llm import get_llm_provider
        from kittycore.core.prompt_evolution import generate_prompt_text
        
        # –°–æ–∑–¥–∞—ë–º LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª—å—é (–Ω–µ auto!)
        llm = get_llm_provider(model="deepseek/deepseek-chat")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–≤–æ–ª—é—Ü–∏–∏
        base_prompt = generate_prompt_text(prompt_dna)
        evolved_prompt = f"""
{base_prompt}

–ó–∞–¥–∞—á–∞: {task['description']}

–û—Ç–≤–µ—Ç—å —á—ë—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
"""
        
        start_time = time.time()
        
        # –†–ï–ê–õ–¨–ù–´–ô LLM –ó–ê–ü–†–û–°!
        print(f"   üß† LLM –∑–∞–ø—Ä–æ—Å... (–ø—Ä–æ–º–ø—Ç {len(evolved_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        response = llm.complete(evolved_prompt)
        
        execution_time = time.time() - start_time
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = response.lower()
        expected_pattern = task['expected_pattern'].lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö
        success = expected_pattern in response_text
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ (–¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å)
        quality_score = min(1.0, len(response) / 100) if success else 0.0
        if success and len(response) > 10:
            quality_score = min(1.0, quality_score + 0.3)
            
        print(f"   üìä LLM –æ—Ç–≤–µ—Ç ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤): {response[:100]}...")
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –ù–µ—É–¥–∞—á–∞'}")
        print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f}, –í—Ä–µ–º—è: {execution_time:.1f}—Å")
        
        return {
            'success': success,
            'quality': quality_score,
            'execution_time': execution_time,
            'response': response,
            'response_length': len(response)
        }
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ LLM: {e}")
        return {
            'success': False,
            'quality': 0.0,
            'execution_time': 999.0,
            'response': f"–û—à–∏–±–∫–∞: {e}",
            'response_length': 0
        }

async def real_llm_evolution_test(cycles=3, tasks_per_cycle=2):
    """üß¨ –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —ç–≤–æ–ª—é—Ü–∏–∏ —Å LLM"""
    
    print("üß†" + "="*80)
    print("üß† –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ê–ú–û–†–ï–î–£–ü–õ–ò–¶–ò–†–£–Æ–©–ï–ô–°–Ø –°–ò–°–¢–ï–ú–´ –° LLM")
    print("üß†" + "="*80)
    
    try:
        # –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
        print("\nüì¶ –ò–º–ø–æ—Ä—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º...")
        from kittycore.core.pheromone_memory import get_pheromone_system, record_agent_success
        from kittycore.core.evolutionary_factory import get_evolutionary_factory, spawn_evolved_agent, update_agent_evolution
        from kittycore.core.prompt_evolution import get_prompt_evolution_engine, get_evolved_prompt, record_prompt_usage
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â  
        test_dir = Path("./test_real_llm")
        test_dir.mkdir(exist_ok=True)
        
        pheromone_sys = get_pheromone_system()
        evolution_factory = get_evolutionary_factory(str(test_dir / "agents"))
        prompt_engine = get_prompt_evolution_engine(str(test_dir / "prompts"))
        
        print(f"‚úÖ –°–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –†–ï–ê–õ–¨–ù–û–ì–û –æ–±—É—á–µ–Ω–∏—è
        real_stats = {
            'cycles_completed': 0,
            'total_tasks': 0,
            'total_successes': 0,
            'total_llm_calls': 0,
            'avg_response_time': 0,
            'generation_progress': [],
            'quality_progression': [],
            'llm_responses': []
        }
        
        # === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –†–ï–ê–õ–¨–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø ===
        for cycle in range(cycles):
            print(f"\n" + "üß†" + "-"*60)
            print(f"üß† –†–ï–ê–õ–¨–ù–´–ô –¶–ò–ö–õ {cycle + 1}/{cycles}")
            print(f"üß†" + "-"*60)
            
            cycle_successes = 0
            cycle_quality_sum = 0
            cycle_time_sum = 0
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –†–ï–ê–õ–¨–ù–´–ï –∑–∞–¥–∞—á–∏
            for task_num in range(tasks_per_cycle):
                task = random.choice(REAL_TASKS)
                
                print(f"\nüéØ –†–µ–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ {task_num + 1}: {task['type']}")
                
                # –°–æ–∑–¥–∞—ë–º —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
                agent_dna = spawn_evolved_agent(task['agent_type'], [task['type']])
                prompt_dna = get_evolved_prompt(task['agent_type'], task['type'])
                
                # –†–ï–ê–õ–¨–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å LLM
                result = await execute_real_llm_task(task, agent_dna, prompt_dna)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
                record_agent_success(
                    task_type=task['type'],
                    solution_pattern=f"llm_{task['agent_type']}_pattern",
                    agent_combination=task['agent_type'],
                    tools_used=['llm_provider'],
                    success=result['success']
                )
                
                update_agent_evolution(agent_dna.agent_id, result['success'], result['execution_time'])
                record_prompt_usage(prompt_dna.prompt_id, task['type'], result['success'], result['quality'], result['execution_time'])
                
                # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if result['success']:
                    cycle_successes += 1
                cycle_quality_sum += result['quality']
                cycle_time_sum += result['execution_time']
                
                real_stats['total_llm_calls'] += 1
                real_stats['llm_responses'].append({
                    'task': task['type'],
                    'success': result['success'],
                    'quality': result['quality'],
                    'response_length': result['response_length'],
                    'time': result['execution_time']
                })
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É LLM –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(1.0)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞
            cycle_success_rate = cycle_successes / tasks_per_cycle
            cycle_avg_quality = cycle_quality_sum / tasks_per_cycle
            cycle_avg_time = cycle_time_sum / tasks_per_cycle
            
            real_stats['cycles_completed'] += 1
            real_stats['total_tasks'] += tasks_per_cycle
            real_stats['total_successes'] += cycle_successes
            real_stats['quality_progression'].append(cycle_avg_quality)
            
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¶–ò–ö–õ–ê {cycle + 1}:")
            print(f"   ‚úÖ –£—Å–ø–µ—Ö: {cycle_success_rate:.1%} ({cycle_successes}/{tasks_per_cycle})")
            print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ: {cycle_avg_quality:.2f}")
            print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è LLM: {cycle_avg_time:.1f}—Å")
            
            # –≠–≤–æ–ª—é—Ü–∏—è –∫–∞–∂–¥—ã–µ 2 —Ü–∏–∫–ª–∞
            if (cycle + 1) % 2 == 0:
                print(f"\nüß¨ –ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–∏ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞ {cycle + 1}...")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø—É–ª—è—Ü–∏–π
                pop_stats = evolution_factory.get_population_stats()
                prompt_stats = prompt_engine.get_population_stats()
                pheromone_stats = pheromone_sys.get_pheromone_statistics()
                pheromone_health = pheromone_stats.get('system_health', 0.0)
                
                real_stats['generation_progress'].append({
                    'cycle': cycle + 1,
                    'agents': pop_stats,
                    'prompts': prompt_stats,
                    'pheromones': pheromone_health
                })
                
                print(f"   üß¨ –ê–≥–µ–Ω—Ç—ã: {pop_stats.active_agents} –∞–∫—Ç–∏–≤–Ω—ã—Ö, –ø–æ–∫–æ–ª–µ–Ω–∏–µ {pop_stats.max_generation}")
                print(f"   üß¨ –ü—Ä–æ–º–ø—Ç—ã: {prompt_stats['population_size']} —à—Ç—É–∫, —É—Å–ø–µ—Ö {prompt_stats['avg_success']:.1%}")
                print(f"   üß¨ –§–µ—Ä–æ–º–æ–Ω—ã: –∑–¥–æ—Ä–æ–≤—å–µ {pheromone_health:.2f}")
        
        # === –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø ===
        print(f"\n" + "üéØ" + "="*80)
        print(f"üéØ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ï–ê–õ–¨–ù–û–ì–û LLM –û–ë–£–ß–ï–ù–ò–Ø")
        print(f"üéØ" + "="*80)
        
        overall_success = real_stats['total_successes'] / real_stats['total_tasks']
        avg_quality = sum(real_stats['quality_progression']) / len(real_stats['quality_progression'])
        total_llm_time = sum([r['time'] for r in real_stats['llm_responses']])
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üéØ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {real_stats['total_tasks']}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {real_stats['total_successes']} ({overall_success:.1%})")
        print(f"   üìä –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {avg_quality:.2f}")
        print(f"   üß† –í—Å–µ–≥–æ LLM –∑–∞–ø—Ä–æ—Å–æ–≤: {real_stats['total_llm_calls']}")
        print(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è LLM: {total_llm_time:.1f}—Å")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ LLM –æ—Ç–≤–µ—Ç–æ–≤
        response_lengths = [r['response_length'] for r in real_stats['llm_responses']]
        successful_responses = [r for r in real_stats['llm_responses'] if r['success']]
        
        print(f"\nüß† –ê–ù–ê–õ–ò–ó LLM –û–¢–í–ï–¢–û–í:")
        print(f"   üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {sum(response_lengths)/len(response_lengths):.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {len(successful_responses)}/{len(real_stats['llm_responses'])}")
        
        if successful_responses:
            avg_success_length = sum([r['response_length'] for r in successful_responses]) / len(successful_responses)
            avg_success_quality = sum([r['quality'] for r in successful_responses]) / len(successful_responses)
            print(f"   üéØ –ö–∞—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö: {avg_success_quality:.2f}")
            print(f"   üìè –î–ª–∏–Ω–∞ —É—Å–ø–µ—à–Ω—ã—Ö: {avg_success_length:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = test_dir / "real_llm_results.json"
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(real_stats, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        if overall_success >= 0.7:
            grade = "üèÜ –û–¢–õ–ò–ß–ù–û"
        elif overall_success >= 0.5:
            grade = "‚úÖ –•–û–†–û–®–û" 
        elif overall_success >= 0.3:
            grade = "‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
        else:
            grade = "‚ùå –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
            
        print(f"\nüéì –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {grade}")
        print(f"üéì –°–∏—Å—Ç–µ–º–∞ {'–†–ê–ë–û–¢–ê–ï–¢ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ LLM!' if overall_success > 0.3 else '—Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}")
        
        return real_stats
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

async def main():
    """üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –†–ï–ê–õ–¨–ù–û–ì–û —Ç–µ—Å—Ç–∞ —Å–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–µ–π—Å—è —Å–∏—Å—Ç–µ–º—ã —Å LLM")
    print("üß† –ë—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ LLM –∑–∞–ø—Ä–æ—Å—ã!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
    results = await real_llm_evolution_test(cycles=3, tasks_per_cycle=3)
    
    if results:
        print(f"\nüéâ –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üéâ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—à–ª–∞ {results['total_tasks']} —Ä–µ–∞–ª—å–Ω—ã—Ö LLM –∑–∞–¥–∞—á")
    else:
        print(f"\nüí• –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è")

if __name__ == "__main__":
    asyncio.run(main()) 