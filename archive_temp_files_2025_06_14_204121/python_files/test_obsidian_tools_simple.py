#!/usr/bin/env python3
"""
üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ OBSIDIAN –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ObsidianAware –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ kittycore
sys.path.insert(0, str(Path(__file__).parent))

from kittycore.tools.obsidian_tools import ObsidianAwareCodeGenerator, ObsidianAwareFileManager
from kittycore.core.obsidian_db import ObsidianDB


def test_obsidian_tools():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º ObsidianAware –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
    print("üß™ –¢–ï–°–¢ OBSIDIAN –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    print("=" * 50)
    
    # 1. –°–æ–∑–¥–∞—ë–º ObsidianDB
    print("1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º ObsidianDB...")
    obsidian_db = ObsidianDB()
    
    # 2. –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    print("2Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã...")
    agent_id = "test_agent_001"
    
    code_gen = ObsidianAwareCodeGenerator(obsidian_db, agent_id)
    file_mgr = ObsidianAwareFileManager(obsidian_db, agent_id)
    
    print(f"   ‚úÖ CodeGenerator: {code_gen.name}")
    print(f"   ‚úÖ FileManager: {file_mgr.name}")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞
    print("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞...")
    result = code_gen.execute(
        filename="test_hello.py",
        content='print("Hello from ObsidianAware tool!")',
        language="python",
        title="–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç"
    )
    
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.success}")
    if result.success:
        print(f"   –§–∞–π–ª: {result.data['file_path']}")
        print(f"   –†–∞–∑–º–µ—Ä: {result.data['content_size']} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –°–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Obsidian: {result.data['saved_to_obsidian']}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.error}")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    print("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä...")
    result2 = file_mgr.execute(
        action="create",
        filename="test_data.txt",
        content="–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç ObsidianAware FileManager"
    )
    
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result2.success}")
    if result2.success:
        print(f"   –§–∞–π–ª: {result2.data['file_path']}")
        print(f"   –ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –≤ Obsidian: {result2.data['logged_to_obsidian']}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result2.error}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã —Ä–µ–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω—ã
    print("5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã...")
    
    outputs_dir = Path("outputs")
    if outputs_dir.exists():
        files = list(outputs_dir.glob("*"))
        print(f"   üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ outputs/: {len(files)}")
        for f in files[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ñ–∞–π–ª–∞
            print(f"      - {f.name} ({f.stat().st_size} –±–∞–π—Ç)")
    else:
        print("   ‚ùå –ü–∞–ø–∫–∞ outputs/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º ObsidianDB
    print("6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º ObsidianDB...")
    try:
        vault_path = obsidian_db.vault_path
        if vault_path.exists():
            agent_folder = vault_path / "agents" / agent_id
            if agent_folder.exists():
                notes = list(agent_folder.rglob("*.md"))
                print(f"   üìù –ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫ –∞–≥–µ–Ω—Ç–∞: {len(notes)}")
                for note in notes[-2:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –∑–∞–º–µ—Ç–∫–∏
                    print(f"      - {note.name}")
            else:
                print(f"   ‚ö†Ô∏è –ü–∞–ø–∫–∞ –∞–≥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {agent_folder}")
        else:
            print(f"   ‚ö†Ô∏è Vault –Ω–µ –Ω–∞–π–¥–µ–Ω: {vault_path}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ vault: {e}")
    
    print("\nüéØ –ò–¢–û–ì:")
    print(f"   ‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
    print(f"   ‚úÖ –ö–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è: {result.success}")
    print(f"   ‚úÖ –§–∞–π–ª—ã —Å–æ–∑–¥–∞—é—Ç—Å—è: {result2.success}")
    print(f"   üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Obsidian: —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")


if __name__ == "__main__":
    test_obsidian_tools() 