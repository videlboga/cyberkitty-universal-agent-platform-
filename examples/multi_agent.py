#!/usr/bin/env python3
"""
üë• –ú—É–ª—å—Ç–∏-–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - KittyCore 2.0 (30 –º–∏–Ω—É—Ç)

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç–æ–≤,
–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á.
"""

import asyncio
from typing import List, Dict, Any
from kittycore import Agent
from kittycore.tools import WebSearchTool, EmailTool
from kittycore.memory import SharedMemory

class AgentTeam:
    """–ö–æ–º–∞–Ω–¥–∞ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    
    def __init__(self):
        self.agents: Dict[str, Agent] = {}
        self.shared_memory = SharedMemory()
        self.conversation_history = []
        
    def add_agent(self, name: str, agent: Agent):
        """–î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥—É"""
        self.agents[name] = agent
        agent.team_name = name
        agent.shared_memory = self.shared_memory
        
    async def discuss(self, topic: str, rounds: int = 3) -> str:
        """–ü—Ä–æ–≤–µ—Å—Ç–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–µ–º—ã –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        print(f"üó£Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ: {topic}")
        print("=" * 50)
        
        current_context = f"–û–±—Å—É–∂–¥–∞–µ–º: {topic}"
        
        for round_num in range(rounds):
            print(f"\nüîÑ –†–∞—É–Ω–¥ {round_num + 1}")
            print("-" * 30)
            
            round_responses = []
            
            for agent_name, agent in self.agents.items():
                # –ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç –≤—ã—Å–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ç–µ–º–µ
                prompt = f"""
                –ö–æ–Ω—Ç–µ–∫—Å—Ç: {current_context}
                
                –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:
                {chr(10).join(round_responses[-3:]) if round_responses else '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã—Å–∫–∞–∑–∞–ª—Å—è'}
                
                –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –≤—ã—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ "{topic}" 
                —É—á–∏—Ç—ã–≤–∞—è —Å–≤–æ—é —Ä–æ–ª—å –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è.
                –ë—É–¥—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–µ–Ω –∏ –∫—Ä–∞—Ç–æ–∫ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
                """
                
                response = agent.run(prompt)
                round_responses.append(f"{agent_name}: {response}")
                print(f"ü§ñ {agent_name}: {response}")
                
                # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ–±—â—É—é –ø–∞–º—è—Ç—å
                self.shared_memory.store(
                    key=f"discussion_{topic}_{round_num}_{agent_name}",
                    value=response,
                    metadata={"topic": topic, "round": round_num, "agent": agent_name}
                )
            
            # –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
            current_context += f"\n\n–†–∞—É–Ω–¥ {round_num + 1}: " + "; ".join(round_responses[-len(self.agents):])
        
        # –°–∏–Ω—Ç–µ–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
        print(f"\nüéØ –°–∏–Ω—Ç–µ–∑ —Ä–µ—à–µ–Ω–∏—è...")
        synthesizer = self.agents.get("coordinator", list(self.agents.values())[0])
        
        final_prompt = f"""
        –¢–µ–º–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {topic}
        
        –í—Å–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:
        {chr(10).join(round_responses)}
        
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞: —Å–æ–∑–¥–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ/–≤—ã–≤–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ 
        –≤—Å–µ—Ö –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π. –í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –¥–∞–π 
        –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
        """
        
        final_decision = synthesizer.run(final_prompt)
        print(f"\n‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
        print(final_decision)
        
        return final_decision

def create_customer_support_team() -> AgentTeam:
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    
    team = AgentTeam()
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã
    coordinator = Agent(
        prompt="""
        –¢—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
        –¢–≤–æ—è —Ä–æ–ª—å: –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –∑–∞–¥–∞—á–∏,
        —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –¢—ã –≤–∏–¥–∏—à—å –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω—É.
        """,
        tools=[WebSearchTool()],
        name="coordinator"
    )
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
    tech_expert = Agent(
        prompt="""
        –¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
        –¢–≤–æ—è —Ä–æ–ª—å: —Ä–µ—à–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—ä—è—Å–Ω—è—Ç—å
        –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–æ–¥—É–∫—Ç—ã, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏—è.
        """,
        tools=[WebSearchTool()],
        name="tech_expert"
    )
    
    # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    customer_specialist = Agent(
        prompt="""
        –¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
        –¢–≤–æ—è —Ä–æ–ª—å: –ø–æ–Ω–∏–º–∞—Ç—å —ç–º–æ—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å
        –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã, –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º –æ–ø—ã—Ç–µ.
        """,
        tools=[EmailTool()],
        name="customer_specialist"
    )
    
    # –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ—Ö –≤ –∫–æ–º–∞–Ω–¥—É
    team.add_agent("coordinator", coordinator)
    team.add_agent("tech_expert", tech_expert)
    team.add_agent("customer_specialist", customer_specialist)
    
    return team

async def main():
    print("üë• –°–æ–∑–¥–∞–Ω–∏–µ –º—É–ª—å—Ç–∏-–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    # –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
    support_team = create_customer_support_team()
    
    print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞:")
    for name in support_team.agents.keys():
        print(f"  ü§ñ {name}")
    
    print("\nüìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á –¥–ª—è –∫–æ–º–∞–Ω–¥—ã:")
    print("1. '–ö–ª–∏–µ–Ω—Ç –∂–∞–ª—É–µ—Ç—Å—è –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'")
    print("2. '–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã'")
    print("3. '–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç'")
    print("4. 'custom: <–≤–∞—à–∞ –∑–∞–¥–∞—á–∞>' - –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞")
    print("5. '–≤—ã—Ö–æ–¥' - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
    
    while True:
        try:
            user_input = input("\nüë§ –ó–∞–¥–∞—á–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: ")
            
            if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'quit', 'exit']:
                print("üëã –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É!")
                break
            
            if user_input.startswith('custom:'):
                topic = user_input[7:].strip()
            elif user_input == '1':
                topic = "–ö–ª–∏–µ–Ω—Ç –∂–∞–ª—É–µ—Ç—Å—è –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            elif user_input == '2':
                topic = "–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã"
            elif user_input == '3':
                topic = "–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç"
            else:
                topic = user_input
            
            # –ö–æ–º–∞–Ω–¥–∞ –æ–±—Å—É–∂–¥–∞–µ—Ç –∑–∞–¥–∞—á—É
            decision = await support_team.discuss(topic, rounds=2)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã:")
            total_memory = len(support_team.shared_memory.storage)
            print(f"  üíæ –ó–∞–ø–∏—Å–µ–π –≤ –æ–±—â–µ–π –ø–∞–º—è—Ç–∏: {total_memory}")
            
            for name, agent in support_team.agents.items():
                stats = agent.get_conversation_stats()
                print(f"  ü§ñ {name}: {stats['total']} —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
            
        except KeyboardInterrupt:
            print("\nüëã –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def demo_mode():
    """–î–µ–º–æ —Ä–µ–∂–∏–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –î–ï–ú–û –†–ï–ñ–ò–ú - –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
    
    async def demo():
        team = create_customer_support_team()
        
        # –ë—ã—Å—Ç—Ä–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
        await team.discuss("–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –¥–µ–º–æ", rounds=1)
        
        print("\n‚úÖ –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    asyncio.run(demo())

if __name__ == "__main__":
    print("üê± KittyCore 2.0 - –ú—É–ª—å—Ç–∏-–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print("=" * 50)
    
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == "demo":
        demo_mode()
    else:
        asyncio.run(main()) 