#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ä–µ–∑–æ–ª–≤–µ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤.

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ TemplateResolver:
- {variable} - –ø—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
- {{variable}} - Django/Jinja2 —Å—Ç–∏–ª—å
- {user.name} - –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
- {items[0]} - —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–æ–≤
- {current_timestamp} - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))

from app.core.template_resolver import template_resolver


def test_template_resolution():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–∑–æ–ª–≤–µ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤."""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–î–í–ò–ù–£–¢–û–ì–û –†–ï–ó–û–õ–í–ï–†–ê –®–ê–ë–õ–û–ù–û–í")
    print("=" * 60)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = {
        "user_id": "12345",
        "chat_id": "67890", 
        "name": "–ê–Ω–¥—Ä–µ–π",
        "age": 25,
        "user": {
            "name": "–ò–≤–∞–Ω",
            "email": "ivan@example.com",
            "profile": {
                "city": "–ú–æ—Å–∫–≤–∞",
                "country": "–†–æ—Å—Å–∏—è"
            }
        },
        "items": [
            {"name": "–ü–µ—Ä–≤—ã–π", "price": 100},
            {"name": "–í—Ç–æ—Ä–æ–π", "price": 200},
            {"name": "–¢—Ä–µ—Ç–∏–π", "price": 300}
        ],
        "telegram_data": {
            "chat_id": "648981358",
            "username": "Like_a_duck"
        }
    }
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
    test_templates = [
        # === –ü–†–û–°–¢–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
        "{user_id}",
        "{name}",
        "–ü—Ä–∏–≤–µ—Ç, {name}! –¢–≤–æ–π ID: {user_id}",
        
        # === DJANGO/JINJA2 –°–¢–ò–õ–¨ ===
        "{{user_id}}",
        "{{name}}",
        "–ü—Ä–∏–≤–µ—Ç, {{name}}! –¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: {{age}}",
        
        # === –í–õ–û–ñ–ï–ù–ù–´–ï –û–ë–™–ï–ö–¢–´ ===
        "{user.name}",
        "{user.email}",
        "{user.profile.city}",
        "{user.profile.country}",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {{user.name}} –∏–∑ –≥–æ—Ä–æ–¥–∞ {{user.profile.city}}",
        
        # === –ú–ê–°–°–ò–í–´ ===
        "{items[0].name}",
        "{items[1].price}",
        "{items[2].name}",
        "–ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {{items[0].name}} –∑–∞ {{items[0].price}} —Ä—É–±.",
        
        # === –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
        "{current_timestamp}",
        "{current_date}",
        "{current_time}",
        "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {current_datetime}",
        
        # === –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ï ===
        "–ü—Ä–∏–≤–µ—Ç, {user.name}! –°–µ–≥–æ–¥–Ω—è {current_date}, —Ç–æ–≤–∞—Ä {{items[0].name}} —Å—Ç–æ–∏—Ç {items[0].price}",
        
        # === TELEGRAM –°–ü–ï–¶–ò–§–ò–ö–ê ===
        "{telegram_data.chat_id}",
        "{telegram_data.username}",
        "Telegram: chat_id={{telegram_data.chat_id}}, username={telegram_data.username}",
        
        # === –û–®–ò–ë–û–ß–ù–´–ï (–î–û–õ–ñ–ù–´ –û–°–¢–ê–¢–¨–°–Ø –ö–ê–ö –ï–°–¢–¨) ===
        "{nonexistent}",
        "{user.nonexistent}",
        "{items[10].name}",
        "{{missing_var}}",
    ]
    
    print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_templates)} —à–∞–±–ª–æ–Ω–æ–≤")
    print()
    
    success_count = 0
    error_count = 0
    
    for i, template in enumerate(test_templates, 1):
        print(f"üìù –¢–µ—Å—Ç {i:2d}: {template}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
        result = template_resolver.test_resolution(template, context)
        
        if result["success"]:
            if result["changed"]:
                print(f"    ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['resolved']}")
                success_count += 1
            else:
                print(f"    ‚û°Ô∏è  –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {result['resolved']}")
                success_count += 1
        else:
            print(f"    ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            error_count += 1
        
        print()
    
    print("=" * 60)
    print(f"üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print(f"üìã –í—Å–µ–≥–æ: {len(test_templates)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–õ–£–ë–û–ö–û–ì–û –†–ê–ó–†–ï–®–ï–ù–ò–Ø")
    print("=" * 60)
    
    complex_data = {
        "message": "–ü—Ä–∏–≤–µ—Ç, {user.name}!",
        "buttons": [
            {"text": "–¢–æ–≤–∞—Ä: {items[0].name}", "callback": "item_0"},
            {"text": "–¶–µ–Ω–∞: {{items[1].price}} —Ä—É–±", "callback": "item_1"}
        ],
        "metadata": {
            "user_id": "{user_id}",
            "timestamp": "{current_timestamp}",
            "source": "Telegram chat {{telegram_data.chat_id}}"
        }
    }
    
    print("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    import json
    print(json.dumps(complex_data, ensure_ascii=False, indent=2))
    
    resolved_data = template_resolver.resolve_deep(complex_data, context)
    
    print("\n–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(json.dumps(resolved_data, ensure_ascii=False, indent=2))


def test_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏."""
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í")
    print("=" * 60)
    
    edge_cases = [
        # –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        ("", {}),
        ("{}", {"": "empty_key"}),
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        ("{number}", {"number": 42}),
        ("{boolean}", {"boolean": True}),
        ("{none_value}", {"none_value": None}),
        ("{list_value}", {"list_value": [1, 2, 3]}),
        
        # –°–ª–æ–∂–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        ("{data.items[0].nested.deep.value}", {
            "data": {
                "items": [
                    {"nested": {"deep": {"value": "–ù–∞–π–¥–µ–Ω–æ!"}}}
                ]
            }
        }),
        
        # –°–º–µ—à–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        ("{{simple}} and {complex.nested}", {
            "simple": "–ü—Ä–æ—Å—Ç–æ–µ",
            "complex": {"nested": "–°–ª–æ–∂–Ω–æ–µ"}
        })
    ]
    
    for template, context in edge_cases:
        print(f"üìù –®–∞–±–ª–æ–Ω: '{template}'")
        print(f"    –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}")
        
        result = template_resolver.resolve(template, context)
        print(f"    ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: '{result}'")
        print()


if __name__ == "__main__":
    test_template_resolution()
    test_edge_cases()
    
    print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("–ù–æ–≤—ã–π TemplateResolver –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —à–∞–±–ª–æ–Ω–æ–≤.") 