#!/usr/bin/env python3
"""
üê± KittyCore 3.0 - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI

–û—Ç–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å ‚Üí –ø–æ–ª—É—á–∏ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
"""

import asyncio
import sys
import kittycore
from core.validator_kitty import ValidatorKitty
from core.memory_management import MemoryManager

def format_files_created(result):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    execution = result.get('execution', {})
    files = execution.get('files_created', [])
    
    if files:
        files_count = len(files)
        files_text = "\n".join([f"   üìÑ {file}" for file in files])
        return f"\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´ ({files_count}):\n{files_text}"
    return "\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:\n   (—Ñ–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å)"

def format_execution_results(result):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    execution = result.get('execution', {})
    step_results = execution.get('step_results', {})
    
    if not step_results:
        return "   (–¥–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)"
    
    formatted = []
    for step_id, step_result in step_results.items():
        status_icon = "‚úÖ" if step_result.get('status') == 'completed' else "‚ùå"
        agent = step_result.get('agent', 'unknown')
        result_text = step_result.get('result', 'No result')
        formatted.append(f"   {status_icon} {agent}: {result_text}")
    
    return "\n".join(formatted)

def quality_check(result, user_input):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    issues = []
    warnings = []
    
    duration = result.get('duration', 0)
    execution = result.get('execution', {})
    files_created = execution.get('files_created', [])
    step_results = execution.get('step_results', {})
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if duration < 0.5:
        issues.append(f"‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û –ë–´–°–¢–†–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï: {duration:.2f}—Å")
        issues.append("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –º–æ–∫–∏, –∫—ç—à, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ LLM")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–∏—è
    creation_keywords = ['—Å–æ–∑–¥–∞–π', '—Å–æ–∑–¥–∞—Ç—å', '—Å–¥–µ–ª–∞–π', '—Å–¥–µ–ª–∞—Ç—å', '–Ω–∞–ø–∏—à–∏', '–Ω–∞–ø–∏—Å–∞—Ç—å', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '—Ñ–∞–π–ª', '—Å–∞–π—Ç', 'html', '–≤–µ–±']
    if any(keyword in user_input.lower() for keyword in creation_keywords):
        if not files_created:
            issues.append("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ó–ê–î–ê–ß–ê –°–û–ó–î–ê–ù–ò–Ø –ë–ï–ó –§–ê–ô–õ–û–í")
            issues.append(f"   –ó–∞–ø—Ä–æ—Å '{user_input}' —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –Ω–æ –∞–≥–µ–Ω—Ç –∏—Ö –Ω–µ —Å–æ–∑–¥–∞–ª!")
            issues.append("   –í–æ–∑–º–æ–∂–Ω–æ –∞–≥–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not step_results:
        warnings.append("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è LLM –∑–∞–¥–∞—á
    if duration > 0.1 and duration < 1.0:
        analysis_tasks = ['–∞–Ω–∞–ª–∏–∑', '–ø–æ—Å—á–∏—Ç–∞–π', '–≤—ã—á–∏—Å–ª–∏', '–æ—Ü–µ–Ω–∏', '–æ–±—ä—è—Å–Ω–∏']
        if any(task in user_input.lower() for task in analysis_tasks):
            warnings.append("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–∫–æ–≤ –¥–ª—è LLM –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û
    if step_results:
        all_results = " ".join([str(step_result.get('result', '')) for step_result in step_results.values()])
        if "httpbin.org" in all_results:
            if any(word in user_input.lower() for word in ['—Å–∞–π—Ç', '–≤–µ–±', 'html']):
                issues.append("üö® –ù–ï–ê–î–ï–ö–í–ê–¢–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –õ–ï–í–´–ï –î–ï–ô–°–¢–í–ò–Ø")
                issues.append(f"   –ó–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞, –∞ –∞–≥–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç httpbin.org!")
                issues.append("   –ê–≥–µ–Ω—Ç –¥–µ–ª–∞–µ—Ç –ù–ï –¢–û —á—Ç–æ –ø—Ä–æ—Å–∏–ª–∏")
    
    return issues, warnings

async def process_request(user_input: str):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: {user_input}")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = kittycore.create_orchestrator()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    result = await orchestrator.solve_task(user_input)
    
    if result['status'] == 'completed':
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ –∑–∞ {result['duration']:.2f}—Å")
        print(f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result['complexity_analysis']['complexity']}")
        print(f"üë• –ö–æ–º–∞–Ω–¥–∞: {result['team']['team_size']} –∞–≥–µ–Ω—Ç–æ–≤")
        
        print(f"\nüìã –ü–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è:")
        for i, subtask in enumerate(result['subtasks'], 1):
            print(f"   {i}. {subtask['description']}")
        
        print(f"\nüìà Workflow:")
        print(result['workflow_graph']['mermaid'])
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        issues, warnings = quality_check(result, user_input)
        
        if issues:
            print(f"\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in issues:
                print(f"   {issue}")
            print(f"\nüîß –ê–í–¢–û–ö–û–†–†–ï–ö–¶–ò–Ø...")
            print(f"   ‚ö° –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            print(f"   üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏...")
        elif warnings:
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø –ö–ê–ß–ï–°–¢–í–ê:")
            for warning in warnings:
                print(f"   {warning}")
        else:
            print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ü–†–û–ô–î–ï–ù–ê")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüí° –°–¢–ê–¢–£–° –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
        print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞ –∑–∞–¥–∞—á—É")
        print(f"   ‚úÖ –°–æ–∑–¥–∞–ª–∞ –ø–ª–∞–Ω –∏–∑ {len(result['subtasks'])} —à–∞–≥–æ–≤")
        print(f"   ‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç–æ–≤")
        print(f"   ‚úÖ –ü–æ—Å—Ç—Ä–æ–∏–ª–∞ –≥—Ä–∞—Ñ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        
        if issues:
            print(f"   ‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
            print(f"   üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        else:
            print(f"   ‚úÖ –ê–≥–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –†–ï–ê–õ–¨–ù–£–Æ –†–ê–ë–û–¢–£!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        print(format_files_created(result))
        
        print(f"\nüîß –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
        print(format_execution_results(result))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
        memory_stats = result.get('collective_memory_stats', {})
        if memory_stats:
            print(f"\nüß† –ö–û–õ–õ–ï–ö–¢–ò–í–ù–ê–Ø –ü–ê–ú–Ø–¢–¨:")
            print(f"   üìù –ó–∞–ø–∏—Å–µ–π: {memory_stats.get('total_entries', 0)}")
            print(f"   üë• –ê–≥–µ–Ω—Ç–æ–≤: {memory_stats.get('agents', 0)}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–∏
        improvement = result.get('self_improvement_report', {})
        if improvement and improvement.get('total_tasks', 0) > 0:
            print(f"\nüöÄ –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–ï:")
            print(f"   üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {improvement.get('total_tasks', 0)}")
            print(f"   ‚ö° –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {improvement.get('avg_efficiency', 0):.2f}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        if issues or warnings:
            print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print(f"   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
            print(f"   2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∞–≥–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
            print(f"   3. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è")
            print(f"   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
        
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

async def main():
    print("üê± KittyCore 3.0 - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI")
    print("=" * 40)
    print("–û—Ç–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏ –†–ï–ê–õ–¨–ù–û–ï —Ä–µ—à–µ–Ω–∏–µ!")
    print("üîç –°–∏—Å—Ç–µ–º–∞ –∫–∞—á–µ—Å—Ç–≤–∞: –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("–í–≤–µ–¥–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
    
    while True:
        try:
            user_input = input("üí¨ –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å: ").strip()
            
            if user_input.lower() in ['exit', '–≤—ã—Ö–æ–¥', 'quit']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not user_input:
                continue
                
            await process_request(user_input)
            print("\n" + "="*50)
            
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 