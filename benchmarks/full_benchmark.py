#!/usr/bin/env python3
"""
üéß –ü–û–õ–ù–´–ô –ë–ï–ù–ß–ú–ê–†–ö –ê–ì–ï–ù–¢–û–í –ü–û–î–î–ï–†–ñ–ö–ò
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ LLM –∞–≥–µ–Ω—Ç–∞
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

import time
import json
from typing import Dict, Any
from support_agent_part1_knowledge import *
from support_agent_part2_agent import SupportAgent
from support_agent_part3_benchmark import SupportBenchmark

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä
try:
    from kittycore.llm import get_llm_provider
    REAL_LLM_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    REAL_LLM_AVAILABLE = False

class AdvancedLLMSupportAgent:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π LLM-–∞–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞"""
    
    def __init__(self, name: str = "LLM –ê–≥–µ–Ω—Ç –ü–æ–¥–¥–µ—Ä–∂–∫–∏"):
        self.name = name
        self.knowledge_base = KnowledgeBase()
        self.customer_db = CustomerDatabase()
        
        if REAL_LLM_AVAILABLE:
            self.llm = get_llm_provider("meta-llama/llama-3.2-3b-instruct:free")
            print("‚úÖ LLM –∞–≥–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä")
        else:
            self.llm = None
            print("‚ùå LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def handle_ticket(self, ticket: SupportTicket) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–∫–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM"""
        
        if not self.llm:
            return self._fallback_handling(ticket)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
        customer_info = f"""
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ò–ï–ù–¢–ï:
- –ò–º—è: {ticket.customer.name}
- –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: {ticket.customer.plan}
- –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {', '.join(ticket.customer.equipment)}
- –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π: {len(ticket.customer.history)} —Ä–∞–∑
- –†–µ–π—Ç–∏–Ω–≥ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏: {ticket.customer.satisfaction_score}/5.0
- –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {'; '.join(ticket.customer.history[-3:]) if ticket.customer.history else '–ù–µ—Ç'}
"""
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
        solutions_info = "–î–û–°–¢–£–ü–ù–´–ï –†–ï–®–ï–ù–ò–Ø:\n"
        for entry in self.knowledge_base.entries:
            solutions_info += f"‚Ä¢ {entry.title} (—É—Å–ø–µ—Ö: {entry.success_rate*100:.0f}%)\n"
        
        prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ "–ö–∏–±–µ—Ä–ö–æ—Ç".

{customer_info}

{solutions_info}

–ü–†–û–ë–õ–ï–ú–ê –ö–õ–ò–ï–ù–¢–ê: "{ticket.problem_description}"
–ü–†–ò–û–†–ò–¢–ï–¢: {ticket.priority.value}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é –∏ —Ä–µ—à–∏ —á—Ç–æ –¥–µ–ª–∞—Ç—å. –û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "action": "resolve|escalate",
    "solution_title": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–ª–∏ null",
    "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
    "customer_satisfaction": 1-5,
    "resolution_confidence": 0.0-1.0
}}

–ü–†–ê–í–ò–õ–ê –†–ï–®–ï–ù–ò–ô:
- –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ (action: "resolve")
- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–ª–æ–π –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è —á–∞—Å—Ç–æ - —ç—Å–∫–∞–ª–∏—Ä—É–π (action: "escalate")
- –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Å–ª–æ–∂–Ω–∞—è –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è - —ç—Å–∫–∞–ª–∏—Ä—É–π
- –î–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –∞–≤–∞—Ä–∏–π ("—É —Å–æ—Å–µ–¥–µ–π —Ç–æ–∂–µ") - –≤—Å–µ–≥–¥–∞ —ç—Å–∫–∞–ª–∏—Ä—É–π
- –£—á–∏—Ç—ã–≤–∞–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞: –Ω–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ = –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è"""

        try:
            response = self.llm.complete(prompt)
            analysis = json.loads(response.strip())
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            required_fields = ["action", "reasoning", "customer_satisfaction", "resolution_confidence"]
            if not all(field in analysis for field in required_fields):
                raise ValueError("–ù–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç LLM")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if analysis["action"] == "resolve" and analysis.get("solution_title"):
                status = "resolved"
                # –ò—â–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
                solutions = self.knowledge_base.search(analysis["solution_title"])
                resolution_time = 15  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è
            else:
                status = "escalated"
                resolution_time = 5  # –ë—ã—Å—Ç—Ä–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è
            
            return {
                "status": status,
                "solution": analysis.get("solution_title", "–≠—Å–∫–∞–ª–∞—Ü–∏—è"),
                "resolution_time": resolution_time,
                "customer_satisfaction": analysis["customer_satisfaction"],
                "reasoning": analysis["reasoning"],
                "confidence": analysis["resolution_confidence"]
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ LLM: {e}")
            return self._fallback_handling(ticket)
    
    def _fallback_handling(self, ticket: SupportTicket) -> Dict[str, Any]:
        """–ó–∞–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ LLM"""
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
        problem = ticket.problem_description.lower()
        
        if any(word in problem for word in ["–æ–ø—è—Ç—å", "—Ç—Ä–µ—Ç–∏–π —Ä–∞–∑", "–∑–ª–æ–π"]):
            return {
                "status": "escalated",
                "solution": "–≠—Å–∫–∞–ª–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞",
                "resolution_time": 5,
                "customer_satisfaction": 2,
                "reasoning": "–ó–∞–ø–∞—Å–Ω–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è",
                "confidence": 0.5
            }
        else:
            return {
                "status": "resolved",
                "solution": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
                "resolution_time": 10,
                "customer_satisfaction": 3,
                "reasoning": "–ó–∞–ø–∞—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
                "confidence": 0.6
            }

def run_full_benchmark():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
    print("üéØ –ü–û–õ–ù–´–ô –ë–ï–ù–ß–ú–ê–†–ö –ê–ì–ï–ù–¢–û–í –ü–û–î–î–ï–†–ñ–ö–ò")
    print("=" * 60)
    
    benchmark = SupportBenchmark()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    print("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–û–ì–û –ê–ì–ï–ù–¢–ê")
    basic_agent = SupportAgent("–ë–∞–∑–æ–≤—ã–π –ê–≥–µ–Ω—Ç")
    basic_evaluation = benchmark.evaluate_agent(basic_agent)
    benchmark.print_evaluation_report(basic_evaluation)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º LLM –∞–≥–µ–Ω—Ç–∞
    if REAL_LLM_AVAILABLE:
        print("\nüß† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LLM –ê–ì–ï–ù–¢–ê –° –ù–ê–°–¢–û–Ø–©–ò–ú LLM")
        llm_agent = AdvancedLLMSupportAgent("LLM –ê–≥–µ–Ω—Ç")
        llm_evaluation = benchmark.evaluate_agent(llm_agent)
        benchmark.print_evaluation_report(llm_evaluation)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ê–ì–ï–ù–¢–û–í")
        print("=" * 60)
        
        print(f"üèÜ –ò–¢–û–ì–û–í–´–ï –ë–ê–õ–õ–´:")
        print(f"  –ë–∞–∑–æ–≤—ã–π –∞–≥–µ–Ω—Ç: {basic_evaluation['final_score']:.1f}/100")
        print(f"  LLM –∞–≥–µ–Ω—Ç:     {llm_evaluation['final_score']:.1f}/100")
        
        improvement = llm_evaluation['final_score'] - basic_evaluation['final_score']
        print(f"  –£–ª—É—á—à–µ–Ω–∏–µ:     {improvement:+.1f} –±–∞–ª–ª–æ–≤")
        
        print(f"\nüìà –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:")
        print(f"  –¢–æ—á–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π:")
        print(f"    –ë–∞–∑–æ–≤—ã–π: {basic_evaluation['accuracy']*100:.1f}%")
        print(f"    LLM:     {llm_evaluation['accuracy']*100:.1f}%")
        
        print(f"  –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤:")
        print(f"    –ë–∞–∑–æ–≤—ã–π: {basic_evaluation['avg_customer_satisfaction']:.1f}/5.0")
        print(f"    LLM:     {llm_evaluation['avg_customer_satisfaction']:.1f}/5.0")
        
        print(f"  –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        print(f"    –ë–∞–∑–æ–≤—ã–π: {basic_evaluation['hard_accuracy']*100:.1f}%")
        print(f"    LLM:     {llm_evaluation['hard_accuracy']*100:.1f}%")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        if improvement > 10:
            verdict = "üöÄ LLM –ê–ì–ï–ù–¢ –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û –ü–†–ï–í–û–°–•–û–î–ò–¢ –ë–ê–ó–û–í–´–ô!"
        elif improvement > 0:
            verdict = "‚úÖ LLM –∞–≥–µ–Ω—Ç –ª—É—á—à–µ –±–∞–∑–æ–≤–æ–≥–æ"
        elif improvement == 0:
            verdict = "‚öñÔ∏è –ê–≥–µ–Ω—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        else:
            verdict = "‚ùå –ë–∞–∑–æ–≤—ã–π –∞–≥–µ–Ω—Ç –ª—É—á—à–µ LLM –∞–≥–µ–Ω—Ç–∞"
        
        print(f"\n{verdict}")
        
    else:
        print("\n‚ö†Ô∏è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞")
    
    print(f"\n‚úÖ –ü–æ–ª–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à—ë–Ω!")

if __name__ == "__main__":
    run_full_benchmark() 