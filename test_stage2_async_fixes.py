#!/usr/bin/env python3
"""
‚ö° –≠–¢–ê–ü 2: ASYNC/SYNC –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å async/sync –ø—Ä–æ–±–ª–µ–º–∞–º–∏

–ü–õ–ê–ù –≠–¢–ê–ü–ê 2:
- network_tool: –∏—Å–ø—Ä–∞–≤–∏—Ç—å "coroutine was never awaited"
- security_tool: –∏—Å–ø—Ä–∞–≤–∏—Ç—å async –ø—Ä–æ–±–ª–µ–º—ã
- data_analysis_tool: –∏—Å–ø—Ä–∞–≤–∏—Ç—å "a coroutine was expected"
- –û—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: +3 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤—ã—Ö (2-3 –¥–Ω—è)

–ü–†–ò–ù–¶–ò–ü–´:
‚úÖ –†–ï–ê–õ–¨–ù–´–ï async/await –≤—ã–∑–æ–≤—ã
‚ùå –ù–ï–¢ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–≥–ª—É—à–µ–∫
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä—É—Ç–∏–Ω
‚úÖ –ó–∞–ø–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö async –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –ø–∞–º—è—Ç—å
"""

import time
import json
import asyncio
import traceback
from pathlib import Path

# –ò–ú–ü–û–†–¢–´ –ü–†–û–ë–õ–ï–ú–ù–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
try:
    from kittycore.tools.network_tool import NetworkTool
    IMPORT_NETWORK_OK = True
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ network_tool: {e}")
    IMPORT_NETWORK_OK = False

try:
    from kittycore.tools.security_tool import SecurityTool
    IMPORT_SECURITY_OK = True
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ security_tool: {e}")
    IMPORT_SECURITY_OK = False

try:
    from kittycore.tools.data_analysis_tool import DataAnalysisTool
    IMPORT_DATA_OK = True
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ data_analysis_tool: {e}")
    IMPORT_DATA_OK = False

class AsyncHonestTester:
    """–ß–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è async –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.results = []
        self.memory_records = []
    
    async def test_tool_async_honest(self, tool_name, test_func):
        """–ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ async –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        print(f"\n‚ö° –¢–µ—Å—Ç–∏—Ä—É—é async {tool_name}...")
        start_time = time.time()
        
        try:
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫ async —Ñ—É–Ω–∫—Ü–∏—é
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            execution_time = time.time() - start_time
            
            # –ß–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            is_honest = self.is_result_honest(result, tool_name)
            
            test_result = {
                "tool": tool_name,
                "success": is_honest,
                "size_bytes": len(str(result)) if result else 0,
                "execution_time": round(execution_time, 2),
                "honest": is_honest,
                "result_sample": str(result)[:100] if result else "NO_DATA",
                "async_handled": True
            }
            
            self.results.append(test_result)
            
            if is_honest:
                print(f"‚úÖ {tool_name}: {test_result['size_bytes']} –±–∞–π—Ç –∑–∞ {execution_time:.2f}—Å (async)")
                self.record_working_async_params(tool_name, test_func.__name__)
            else:
                print(f"‚ùå {tool_name}: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π async —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
            return test_result
            
        except Exception as e:
            execution_time = time.time() - start_time
            error_msg = str(e)[:100]
            print(f"‚ùå {tool_name}: ASYNC –û–®–ò–ë–ö–ê - {error_msg}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ async –ø—Ä–æ–±–ª–µ–º
            async_diagnostic = self.diagnose_async_error(e, tool_name)
            
            test_result = {
                "tool": tool_name,
                "success": False,
                "size_bytes": 0,
                "execution_time": round(execution_time, 2),
                "honest": False,
                "error": error_msg,
                "async_diagnostic": async_diagnostic
            }
            
            self.results.append(test_result)
            return test_result
    
    def diagnose_async_error(self, error, tool_name):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ async –æ—à–∏–±–æ–∫"""
        error_str = str(error).lower()
        
        if "coroutine was never awaited" in error_str:
            return f"ASYNC_PROBLEM: {tool_name} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É, –Ω–æ –Ω–µ await"
        elif "a coroutine was expected" in error_str:
            return f"SYNC_PROBLEM: {tool_name} –æ–∂–∏–¥–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É, –Ω–æ –ø–æ–ª—É—á–∞–µ—Ç sync"
        elif "cannot be called from a running event loop" in error_str:
            return f"LOOP_PROBLEM: {tool_name} –∫–æ–Ω—Ñ–ª–∏–∫—Ç event loop"
        else:
            return f"UNKNOWN_ASYNC: {error_str}"
    
    def is_result_honest(self, result, tool_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if not result:
            return False
        
        result_str = str(result)
        
        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        fake_patterns = [
            f"{tool_name}: —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω",
            "async —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            "–∫–æ—Ä—É—Ç–∏–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
            "async –∑–∞–≥–ª—É—à–∫–∞",
            "await —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω"
        ]
        
        for pattern in fake_patterns:
            if pattern.lower() in result_str.lower():
                return False
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
        return len(result_str) > 20
    
    def record_working_async_params(self, tool_name, action_name):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞–±–æ—á–∏–µ async –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø–∞–º—è—Ç—å"""
        memory_record = {
            "tool": tool_name,
            "working_action": action_name,
            "timestamp": time.time(),
            "status": "ASYNC_WORKING",
            "async_pattern": "await tool.execute() success",
            "notes": f"Async test passed for {tool_name}"
        }
        self.memory_records.append(memory_record)

async def test_network_tool_async():
    """–¢–µ—Å—Ç NetworkTool —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º async –ø–æ–¥—Ö–æ–¥–æ–º"""
    if not IMPORT_NETWORK_OK:
        return "IMPORT_ERROR"
    
    tool = NetworkTool()
    
    # –†–ï–ê–õ–¨–ù–´–ô async —Ç–µ—Å—Ç - ping –∫–æ–º–∞–Ω–¥–∞
    result = await tool.execute_async(
        action="ping",
        host="8.8.8.8",
        count=3,
        timeout=5
    )
    
    return result

def test_network_tool_sync():
    """–¢–µ—Å—Ç NetworkTool —Å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º"""
    if not IMPORT_NETWORK_OK:
        return "IMPORT_ERROR"
    
    tool = NetworkTool()
    
    # –†–ï–ê–õ–¨–ù–´–ô sync —Ç–µ—Å—Ç - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏
    result = tool.execute(
        action="get_network_info"
    )
    
    return result

async def test_security_tool_async():
    """–¢–µ—Å—Ç SecurityTool —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º async –ø–æ–¥—Ö–æ–¥–æ–º"""
    if not IMPORT_SECURITY_OK:
        return "IMPORT_ERROR"
    
    tool = SecurityTool()
    
    # –†–ï–ê–õ–¨–ù–´–ô async —Ç–µ—Å—Ç - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    result = await tool.execute_async(
        action="scan_file",
        file_path="/tmp",
        scan_type="basic"
    )
    
    return result

def test_security_tool_sync():
    """–¢–µ—Å—Ç SecurityTool —Å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º"""
    if not IMPORT_SECURITY_OK:
        return "IMPORT_ERROR"
    
    tool = SecurityTool()
    
    # –†–ï–ê–õ–¨–ù–´–ô sync —Ç–µ—Å—Ç - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    result = tool.execute(
        action="get_security_rules"
    )
    
    return result

async def test_data_analysis_tool_async():
    """–¢–µ—Å—Ç DataAnalysisTool —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º async –ø–æ–¥—Ö–æ–¥–æ–º"""
    if not IMPORT_DATA_OK:
        return "IMPORT_ERROR"
    
    tool = DataAnalysisTool()
    
    # –†–ï–ê–õ–¨–ù–´–ô async —Ç–µ—Å—Ç - –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    test_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    result = await tool.execute_async(
        action="analyze_data",
        data=test_data,
        analysis_type="statistics"
    )
    
    return result

def test_data_analysis_tool_sync():
    """–¢–µ—Å—Ç DataAnalysisTool —Å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º"""
    if not IMPORT_DATA_OK:
        return "IMPORT_ERROR"
    
    tool = DataAnalysisTool()
    
    # –†–ï–ê–õ–¨–ù–´–ô sync —Ç–µ—Å—Ç - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
    result = tool.execute(
        action="get_analysis_types"
    )
    
    return result

async def main():
    """–ì–ª–∞–≤–Ω–∞—è async —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–∞–ø–∞ 2"""
    print("‚ö° –≠–¢–ê–ü 2: ASYNC/SYNC –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 50)
    
    tester = AsyncHonestTester()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å async/sync –ø—Ä–æ–±–ª–µ–º–∞–º–∏
    if IMPORT_NETWORK_OK:
        await tester.test_tool_async_honest("network_tool_async", test_network_tool_async)
        await tester.test_tool_async_honest("network_tool_sync", test_network_tool_sync)
    else:
        print("‚ùå network_tool: –ò–ú–ü–û–†–¢ –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù")
    
    if IMPORT_SECURITY_OK:
        await tester.test_tool_async_honest("security_tool_async", test_security_tool_async)
        await tester.test_tool_async_honest("security_tool_sync", test_security_tool_sync)
    else:
        print("‚ùå security_tool: –ò–ú–ü–û–†–¢ –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù")
    
    if IMPORT_DATA_OK:
        await tester.test_tool_async_honest("data_analysis_tool_async", test_data_analysis_tool_async)
        await tester.test_tool_async_honest("data_analysis_tool_sync", test_data_analysis_tool_sync)
    else:
        print("‚ùå data_analysis_tool: –ò–ú–ü–û–†–¢ –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–∞–ø–∞ 2
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–¢–ê–ü–ê 2:")
    
    total_tests = len(tester.results)
    honest_tests = sum(1 for r in tester.results if r["honest"])
    success_rate = (honest_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ß–µ—Å—Ç–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {honest_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    print("\nüéØ –î–ï–¢–ê–õ–ò:")
    for result in tester.results:
        status = "‚úÖ –ß–ï–°–¢–ù–´–ô" if result["honest"] else "‚ùå –ü–†–û–ë–õ–ï–ú–ê"
        async_info = " (async)" if result.get("async_handled") else ""
        print(f"{result['tool']}: {status} ({result['size_bytes']} –±–∞–π—Ç){async_info}")
        if "async_diagnostic" in result:
            print(f"   üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {result['async_diagnostic']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("stage2_results.json", "w", encoding="utf-8") as f:
        json.dump({
            "stage": 2,
            "description": "Async/sync fixes",
            "results": tester.results,
            "memory_records": tester.memory_records,
            "summary": {
                "total_tests": total_tests,
                "honest_tests": honest_tests,
                "success_rate": success_rate,
                "async_tools_tested": 3
            }
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stage2_results.json")
    
    # –ü–æ–¥—Å—á—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    unique_tools = set()
    for result in tester.results:
        if result["honest"]:
            tool_base = result["tool"].replace("_async", "").replace("_sync", "")
            unique_tools.add(tool_base)
    
    new_honest_tools = len(unique_tools)
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏
    current_honest = 5  # –∏–∑ —ç—Ç–∞–ø–∞ 1
    total_honest = current_honest + new_honest_tools
    total_target = 18
    
    print(f"\nüöÄ –ü–†–û–ì–†–ï–°–° –ö –¶–ï–õ–ò:")
    print(f"–ë—ã–ª–æ —á–µ—Å—Ç–Ω—ã—Ö: {current_honest}/18 (27.8%)")
    print(f"–°—Ç–∞–ª–æ —á–µ—Å—Ç–Ω—ã—Ö: {total_honest}/18 ({total_honest/total_target*100:.1f}%)")
    print(f"–£–ª—É—á—à–µ–Ω–∏–µ: +{new_honest_tools} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    
    if success_rate >= 50:
        print("\nüéâ –≠–¢–ê–ü 2 –£–°–ü–ï–®–ï–ù! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≠–¢–ê–ü–£ 3...")
        return True
    else:
        print("\n‚ö†Ô∏è –≠–¢–ê–ü 2 –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
        return False

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ async main
    asyncio.run(main()) 