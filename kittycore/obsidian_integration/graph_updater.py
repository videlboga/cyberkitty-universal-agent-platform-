"""
GraphUpdater - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∞ Obsidian –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import json
import time
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
from loguru import logger


@dataclass
class GraphNode:
    """–£–∑–µ–ª –≥—Ä–∞—Ñ–∞ Obsidian"""
    id: str
    name: str
    type: str  # "agent", "task", "result", "report"
    size: int = 10
    color: str = "#3498db"
    metadata: Dict[str, Any] = None

    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}


@dataclass
class GraphEdge:
    """–°–≤—è–∑—å –≤ –≥—Ä–∞—Ñ–µ"""
    source: str
    target: str
    type: str  # "assigned", "created", "reviewed", "linked"
    weight: int = 1
    metadata: Dict[str, Any] = None

    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}


class GraphUpdater:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ vault
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤ –∏ —Å–≤—è–∑–µ–π
    - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    """
    
    def __init__(self, vault_path: Path):
        self.vault_path = vault_path
        self.nodes: Dict[str, GraphNode] = {}
        self.edges: List[GraphEdge] = []
        self.last_update = time.time()
        self.update_interval = 5  # —Å–µ–∫—É–Ω–¥
        self.is_monitoring = False
        
        logger.debug(f"üìä GraphUpdater –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è: {vault_path}")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        self.is_monitoring = True
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä–∞—Ñ–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        
        while self.is_monitoring:
            try:
                await self.update_graph()
                await asyncio.sleep(self.update_interval)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä–∞—Ñ–∞: {e}")
                await asyncio.sleep(self.update_interval)
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_monitoring = False
        logger.info("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä–∞—Ñ–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def update_graph(self, force: bool = False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∞"""
        try:
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            changes_detected = force or await self._scan_for_changes()
            
            if changes_detected:
                # –ü–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–∑–ª–æ–≤
                await self._rebuild_nodes()
                
                # –ü–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–≤—è–∑–µ–π
                await self._rebuild_edges()
                
                # –≠–∫—Å–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                await self._export_graph_data()
                
                self.last_update = time.time()
                logger.debug("üìä –ì—Ä–∞—Ñ –æ–±–Ω–æ–≤–ª—ë–Ω")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞: {e}")
    
    async def _scan_for_changes(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ vault"""
        try:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            for md_file in self.vault_path.rglob("*.md"):
                if md_file.stat().st_mtime > self.last_update:
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
            return False
    
    async def _rebuild_nodes(self):
        """–ü–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–∑–ª–æ–≤ –≥—Ä–∞—Ñ–∞"""
        new_nodes = {}
        
        try:
            for md_file in self.vault_path.rglob("*.md"):
                node_id = md_file.stem
                node_type = self._determine_node_type(md_file)
                node_size = self._calculate_node_size(md_file)
                node_color = self._get_node_color(node_type)
                
                node = GraphNode(
                    id=node_id,
                    name=node_id,
                    type=node_type,
                    size=node_size,
                    color=node_color,
                    metadata={
                        "file_path": str(md_file),
                        "modified": md_file.stat().st_mtime,
                        "size_bytes": md_file.stat().st_size
                    }
                )
                
                new_nodes[node_id] = node
            
            self.nodes = new_nodes
            logger.debug(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —É–∑–ª–æ–≤: {len(self.nodes)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏—è —É–∑–ª–æ–≤: {e}")
    
    async def _rebuild_edges(self):
        """–ü–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –≥—Ä–∞—Ñ–∞"""
        new_edges = []
        
        try:
            for md_file in self.vault_path.rglob("*.md"):
                source_id = md_file.stem
                
                # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –≤ —Ñ–∞–π–ª–µ
                try:
                    with open(md_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ [[—Å—Å—ã–ª–æ–∫]]
                    import re
                    links = re.findall(r'\[\[([^\]]+)\]\]', content)
                    
                    for link in links:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–≤—è–∑–∏
                        edge_type = self._determine_edge_type(source_id, link, content)
                        
                        edge = GraphEdge(
                            source=source_id,
                            target=link,
                            type=edge_type,
                            weight=1,
                            metadata={"context": "obsidian_link"}
                        )
                        
                        new_edges.append(edge)
                        
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {md_file}: {e}")
            
            self.edges = new_edges
            logger.debug(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–≤—è–∑–µ–π: {len(self.edges)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–≤—è–∑–µ–π: {e}")
    
    def _determine_node_type(self, file_path: Path) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É–∑–ª–∞ –ø–æ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞"""
        if "Agents" in str(file_path):
            return "agent"
        elif "Tasks" in str(file_path):
            return "task"
        elif "Results" in str(file_path):
            return "result"
        elif "Reports" in str(file_path):
            return "report"
        else:
            return "note"
    
    def _calculate_node_size(self, file_path: Path) -> int:
        """–†–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–∞ —É–∑–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        try:
            size_bytes = file_path.stat().st_size
            # –†–∞–∑–º–µ—Ä –æ—Ç 10 –¥–æ 50 –ø–∏–∫—Å–µ–ª–µ–π
            return min(50, max(10, size_bytes // 100))
        except:
            return 10
    
    def _get_node_color(self, node_type: str) -> str:
        """–¶–≤–µ—Ç —É–∑–ª–∞ –ø–æ —Ç–∏–ø—É"""
        colors = {
            "agent": "#e74c3c",      # –∫—Ä–∞—Å–Ω—ã–π
            "task": "#3498db",       # —Å–∏–Ω–∏–π  
            "result": "#2ecc71",     # –∑–µ–ª—ë–Ω—ã–π
            "report": "#f39c12",     # –æ—Ä–∞–Ω–∂–µ–≤—ã–π
            "note": "#9b59b6"        # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        }
        return colors.get(node_type, "#95a5a6")
    
    def _determine_edge_type(self, source: str, target: str, content: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–≤—è–∑–∏"""
        if "–Ω–∞–∑–Ω–∞—á–µ–Ω" in content.lower() or "assigned" in content.lower():
            return "assigned"
        elif "—Å–æ–∑–¥–∞–Ω" in content.lower() or "created" in content.lower():
            return "created"
        elif "–ø—Ä–æ–≤–µ—Ä–µ–Ω" in content.lower() or "reviewed" in content.lower():
            return "reviewed"
        else:
            return "linked"
    
    async def _export_graph_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            graph_data = {
                "nodes": [asdict(node) for node in self.nodes.values()],
                "edges": [asdict(edge) for edge in self.edges],
                "metadata": {
                    "updated_at": time.time(),
                    "nodes_count": len(self.nodes),
                    "edges_count": len(self.edges),
                    "vault_path": str(self.vault_path)
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            graph_file = self.vault_path / "graph_data.json"
            with open(graph_file, 'w', encoding='utf-8') as f:
                json.dump(graph_data, f, indent=2, ensure_ascii=False)
            
            logger.debug(f"üìä –î–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {graph_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∞: {e}")
    
    def get_graph_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞—Ñ–∞"""
        node_types = {}
        edge_types = {}
        
        for node in self.nodes.values():
            node_types[node.type] = node_types.get(node.type, 0) + 1
        
        for edge in self.edges:
            edge_types[edge.type] = edge_types.get(edge.type, 0) + 1
        
        return {
            "nodes_total": len(self.nodes),
            "edges_total": len(self.edges),
            "node_types": node_types,
            "edge_types": edge_types,
            "last_update": self.last_update,
            "vault_path": str(self.vault_path)
        } 