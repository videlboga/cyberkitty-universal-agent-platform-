#!/usr/bin/env python3
"""
üê± KittyCore 3.0 CLI —Å–æ SmartValidator
=====================================

–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI —Å —É–º–Ω–æ–π LLM-–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
- –û—Ü–µ–Ω–∫–∞ —Å –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–Ω–µ—á–Ω–æ–π –ø–æ–ª—å–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- "–ü–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ, —á—Ç–æ –ø—Ä–æ—Å–∏–ª?"
- –ß–µ—Å—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
"""

import asyncio
import sys
import os
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º kittycore –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__)))

from kittycore.core.orchestrator import OrchestratorAgent
from agents.smart_validator import SmartValidator, validate_task_result
from kittycore.visualization.mermaid_generator import generate_mermaid_workflow


def print_banner():
    """–ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä"""
    print("\nüê± KittyCore 3.0 CLI - SmartValidator Edition")
    print("=" * 50)
    print("–û—Ç–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏ –£–ú–ù–û –ü–†–û–í–ï–†–ï–ù–ù–û–ï —Ä–µ—à–µ–Ω–∏–µ!")
    print("üß† –°–∏—Å—Ç–µ–º–∞ –∫–∞—á–µ—Å—Ç–≤–∞: LLM-–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω–µ—á–Ω–æ–π –ø–æ–ª—å–∑—ã")
    print("–í–≤–µ–¥–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")


def collect_created_files(directory: str = ".") -> list:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        current_time = time.time()
        recent_files = []
        
        for root, dirs, files in os.walk(directory):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–ø–∫–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ
            dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['__pycache__', 'node_modules']]
            
            for file in files:
                if file.startswith('.'):
                    continue
                    
                file_path = os.path.join(root, file)
                try:
                    # –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
                    if current_time - os.path.getctime(file_path) < 10:
                        recent_files.append(file_path)
                except:
                    continue
        
        return recent_files
    except Exception:
        return []


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    print_banner()
    
    orchestrator = OrchestratorAgent()
    smart_validator = SmartValidator()
    
    while True:
        try:
            user_input = input("üí¨ –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å: ").strip()
            
            if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
            if not user_input:
                continue
            
            print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: {user_input}")
            print("=" * 50)
            
            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            start_time = time.time()
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            files_before = set(collect_created_files())
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            result = await orchestrator.process_request(user_input)
            
            execution_time = time.time() - start_time
            
            # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            files_after = set(collect_created_files())
            new_files = list(files_after - files_before)
            
            # –ë–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ –∑–∞ {execution_time:.2f}—Å")
            print(f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result.get('complexity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"üë• –ö–æ–º–∞–Ω–¥–∞: {result.get('team_size', 0)} –∞–≥–µ–Ω—Ç–æ–≤")
            
            if result.get('decomposition'):
                print("üìã –ü–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è:")
                for i, task in enumerate(result['decomposition'], 1):
                    print(f"   {i}. {task}")
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è workflow
            if result.get('workflow_graph'):
                print("üìà Workflow:")
                mermaid_code = generate_mermaid_workflow(result['workflow_graph'])
                print(mermaid_code)
            
            # üß† –£–ú–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–ê–ß–ï–°–¢–í–ê
            print("\nüß† –ó–ê–ü–£–°–ö –£–ú–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò...")
            validation_start = time.time()
            
            validation_result = await smart_validator.validate_result(
                original_task=user_input,
                result=result,
                created_files=new_files
            )
            
            validation_time = time.time() - validation_start
            
            # –û—Ç—á–µ—Ç –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            print(f"\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ({validation_time:.2f}—Å)")
            print(f"üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {validation_result.score:.1f}/1.0")
            print(f"üéØ {validation_result.verdict}")
            print(f"üí∞ –ü–æ–ª—å–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {validation_result.user_benefit}")
            
            if validation_result.issues:
                print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
                for issue in validation_result.issues:
                    print(f"   ‚Ä¢ {issue}")
            
            if validation_result.recommendations:
                print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                for rec in validation_result.recommendations:
                    print(f"   ‚Ä¢ {rec}")
            
            # –°—Ç–∞—Ç—É—Å —Å —É—á–µ—Ç–æ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if validation_result.is_valid:
                print("\n‚úÖ –ö–ê–ß–ï–°–¢–í–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            else:
                print("\n‚ùå –ö–ê–ß–ï–°–¢–í–û –ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏!")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
            if new_files:
                print(f"\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´ ({len(new_files)}):")
                for file_path in new_files:
                    file_size = os.path.getsize(file_path) if os.path.exists(file_path) else 0
                    print(f"   üìÑ {file_path} ({file_size} –±–∞–π—Ç)")
            else:
                print("\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
                print("   (—Ñ–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å)")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if result.get('agent_actions'):
                print("\nüîß –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
                for action in result['agent_actions']:
                    print(f"   ‚úÖ {action}")
            
            # –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
            if hasattr(orchestrator, 'collective_memory') and orchestrator.collective_memory:
                memory_stats = orchestrator.collective_memory.get_memory_stats()
                print(f"\nüß† –ö–û–õ–õ–ï–ö–¢–ò–í–ù–ê–Ø –ü–ê–ú–Ø–¢–¨:")
                print(f"   üìù –ó–∞–ø–∏—Å–µ–π: {memory_stats.get('total_entries', 0)}")
                print(f"   üë• –ê–≥–µ–Ω—Ç–æ–≤: {memory_stats.get('agents_count', 0)}")
            
            # –°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ
            if hasattr(orchestrator, 'self_improvement') and orchestrator.self_improvement:
                improvement_stats = orchestrator.self_improvement.get_performance_stats()
                print(f"\nüöÄ –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–ï:")
                print(f"   üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {improvement_stats.get('total_tasks', 0)}")
                print(f"   ‚ö° –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {improvement_stats.get('avg_efficiency', 0.0):.2f}")
            
            print("=" * 50)
            
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            print(f"üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!") 