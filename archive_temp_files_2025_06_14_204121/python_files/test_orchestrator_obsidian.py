#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OrchestratorAgent —Å Obsidian
"""

import asyncio
import os
from pathlib import Path
from kittycore.core.orchestrator import OrchestratorAgent, OrchestratorConfig


async def test_orchestrator_obsidian():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã OrchestratorAgent —Å Obsidian –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    
    print("üß≠ –¢–µ—Å—Ç OrchestratorAgent + Obsidian Integration")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º Obsidian
    config = OrchestratorConfig(
        orchestrator_id="test_orchestrator",
        enable_obsidian=True,
        obsidian_vault_path="./test_obsidian_vault",
        max_agents=3
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    orchestrator = OrchestratorAgent(config)
    
    print(f"‚úÖ OrchestratorAgent —Å–æ–∑–¥–∞–Ω —Å Obsidian: {config.obsidian_vault_path}")
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É...")
    
    simple_task = "–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª hello.txt —Å —Ç–µ–∫—Å—Ç–æ–º '–ü—Ä–∏–≤–µ—Ç –æ—Ç KittyCore 3.0!'"
    
    try:
        result = await orchestrator.solve_task(simple_task)
        
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {result.get('duration', 0):.2f}—Å")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
        print(f"ü§ñ –°–æ–∑–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(result.get('team', {}))}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π
        if result.get('status') == 'error':
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            if 'execution' in result:
                execution = result['execution']
                print(f"üîç –î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
                print(f"  - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {execution.get('results', [])}")
                print(f"  - –û—à–∏–±–∫–∏: {execution.get('errors', [])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Obsidian
        stats = orchestrator.get_statistics()
        if 'obsidian' in stats:
            print(f"üìù Obsidian –∞–∫—Ç–∏–≤–µ–Ω: {stats['obsidian']['vault_path']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–ª–∏—Å—å
        vault_path = Path(config.obsidian_vault_path)
        if vault_path.exists():
            print(f"\nüìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ vault:")
            md_files = list(vault_path.rglob("*.md"))
            if md_files:
                for md_file in md_files:
                    print(f"  üìÑ {md_file.relative_to(vault_path)}")
            else:
                print("  (–ø—É—Å—Ç–æ - –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–ª–∏—Å—å)")
        
        if result.get('status') == 'completed':
            print(f"\nüéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ê–≥–µ–Ω—Ç—ã + Obsidian = ‚ù§Ô∏è")
        else:
            print(f"\n‚ö†Ô∏è  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_orchestrator_obsidian()) 