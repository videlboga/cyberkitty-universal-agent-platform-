#!/usr/bin/env python3
"""
üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–°–¢ –ë–ò–¢–†–ò–ö–°24
–ë–µ–∑ fallback –ø–ª–∞–Ω–æ–≤, —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–π LLM
"""

import asyncio
import sys
import os
sys.path.append('.')

from kittycore.core.orchestrator import solve_with_orchestrator

async def test_fixed_bitrix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–°–¢ –ë–ò–¢–†–ò–ö–°24")
    print("=" * 60)
    print("‚úÖ –£–±—Ä–∞–Ω fallback –∫ hardcoded –ø–ª–∞–Ω–∞–º")
    print("‚úÖ –£–ª—É—á—à–µ–Ω LLM –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω web_search –≤ REAL_TOOLS")
    print("=" * 60)
    
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    task = """
    –°–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ë–∏—Ç—Ä–∏–∫—Å24 –∏ 3 –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX.
    
    –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
    1. –ù–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–∏—Ç—Ä–∏–∫—Å24 –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
    2. –°–æ–∑–¥–∞—Ç—å 3 HTML –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX
    3. –§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∞ –Ω–µ –ø–ª–∞–Ω—ã
    """
    
    print(f"üìã –ó–ê–î–ê–ß–ê: {task}")
    print(f"\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"  1. web_search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–∏—Ç—Ä–∏–∫—Å24")
    print(f"  2. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö HTML —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞–º–∏")
    print(f"  3. –ù–∏–∫–∞–∫–∏—Ö —à–∞–±–ª–æ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤!")
    
    try:
        print(f"\nüöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´...")
        result = await solve_with_orchestrator(task)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"‚úÖ –£—Å–ø–µ—Ö: {result.get('success', False)}")
        print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        print(f"\nüìÅ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í:")
        for root, dirs, files in os.walk("."):
            for file in files:
                if file.endswith(('.html', '.md', '.txt')) and '–±–∏—Ç—Ä–∏–∫—Å' in file.lower():
                    filepath = os.path.join(root, file)
                    size = os.path.getsize(filepath)
                    print(f"  üìÑ {filepath} ({size} –±–∞–π—Ç)")
                    
                    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            content = f.read(200)
                            print(f"    üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content[:100]}...")
                    except:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
        
        return result.get('success', False)
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False

async def main():
    print("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ KITTYCORE 3.0")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ hardcoded fallback –ø–ª–∞–Ω–æ–≤")
    print("=" * 70)
    
    success = await test_fixed_bitrix()
    
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    if success:
        print(f"üéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢! –°–æ–∑–¥–∞—ë—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ LLM")
    else:
        print(f"‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢. –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

if __name__ == "__main__":
    asyncio.run(main()) 