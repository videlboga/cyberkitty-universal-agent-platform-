#!/usr/bin/env python3
"""
üîç –û–¢–õ–ê–î–ö–ê –í–ê–õ–ò–î–ê–¢–û–†–ê - –ü–û–ß–ï–ú–£ –ù–ï –†–ê–ë–û–¢–ê–ï–¢

–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –Ω–∞—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
"""

import os
from pathlib import Path

def detect_fake_reports(content: str, file_path: str, task: str) -> dict:
    """–ö–æ–ø–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∏–∑ UnifiedOrchestrator"""
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç—á—ë—Ç–æ–≤-–ø–æ–¥–¥–µ–ª–æ–∫
    fake_patterns = [
        '–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏',
        '–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞', 
        '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ KittyCore',
        '–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º',
        '–û—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏',
        '–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏',
        '–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:',
        '<div class="header">',
        '<div class="content">',
        '<div class="footer">',
        '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ KittyCore 3.0 üê±',
        'TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É',
        '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
        '—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞',
        '–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º',
        '–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è:',
        '–û–ø–∏—Å–∞–Ω–∏–µ: –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª',
        '–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º',
        # –ù–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        '–ø–µ—Ä–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        '–≤—Ç–æ—Ä–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 
        '—Ç—Ä–µ—Ç—å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–¥–¥–µ–ª–æ–∫
    fake_indicators_found = []
    for pattern in fake_patterns:
        if pattern in content:
            fake_indicators_found.append(pattern)
    
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥–¥–µ–ª–∫–∏
    if len(fake_indicators_found) >= 2:
        return {
            'is_fake': True,
            'reason': f'–æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç—á—ë—Ç–∞: {", ".join(fake_indicators_found[:2])}'
        }
    
    return {'is_fake': False, 'reason': '—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–≥–ª—è–¥–∏—Ç –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ'}

def check_content_by_extension(file_path: str, content: str, file_ext: str, task: str) -> dict:
    """–ö–æ–ø–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑ UnifiedOrchestrator"""
    
    if file_ext == '.md':
        # –î–ª—è MD —Ñ–∞–π–ª–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ HTML –≤ .md
        if '<html>' in content.lower() or '<!doctype' in content.lower():
            return {'is_valid': False, 'bonus': 0, 'reason': 'HTML –∫–æ–¥ –≤ MD —Ñ–∞–π–ª–µ'}
        else:
            return {'is_valid': True, 'bonus': 0.05, 'reason': '—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ'}
    
    elif file_ext == '.json':
        # –î–ª—è JSON —Ñ–∞–π–ª–æ–≤
        try:
            import json
            json.loads(content)
            return {'is_valid': True, 'bonus': 0.1, 'reason': '–≤–∞–ª–∏–¥–Ω—ã–π JSON'}
        except:
            return {'is_valid': False, 'bonus': 0, 'reason': '–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON'}
    
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π - –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        return {'is_valid': True, 'bonus': 0.02, 'reason': '—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω'}

def debug_validator():
    print("üîç –û–¢–õ–ê–î–ö–ê –í–ê–õ–ò–î–ê–¢–û–†–ê")
    print("="*50)
    
    task = "–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∞ –±–∏—Ç—Ä–∏–∫—Å 24"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –Ω–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞
    test_files = [
        "outputs/report.md",
        "outputs/complexity.md", 
        "outputs/top10_bitrix24_apps.json",
        "outputs/bitrix24_market_analysis.md"
    ]
    
    total_score = 0
    total_files = 0
    
    for file_path in test_files:
        if not os.path.exists(file_path):
            print(f"‚ùå {file_path} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
            
        print(f"\nüìÑ {file_path}")
        
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
            print(f"   üìù –ö–æ–Ω—Ç–µ–Ω—Ç: {content[:100]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            file_ext = os.path.splitext(file_path)[1].lower()
            content_check = check_content_by_extension(file_path, content, file_ext, task)
            
            print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {content_check}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–¥–µ–ª–∫–∏
            fake_check = detect_fake_reports(content, file_path, task)
            print(f"   üîç –î–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ–¥–¥–µ–ª–æ–∫: {fake_check}")
            
            # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –±–æ–Ω—É—Å
            if content_check['is_valid'] and not fake_check['is_fake']:
                score = content_check['bonus']
                total_score += score
                print(f"   üìä –ë–æ–Ω—É—Å: +{score}")
            else:
                print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞–π–¥–µ–Ω—ã!")
                
            total_files += 1
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
    
    print(f"\nüèÜ –ò–¢–û–ì:")
    print(f"   üìä –û–±—â–∏–π –±–æ–Ω—É—Å: {total_score:.3f}")
    print(f"   üìÅ –§–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total_files}")
    print(f"   üìà –°—Ä–µ–¥–Ω–∏–π –±–æ–Ω—É—Å: {total_score/total_files if total_files > 0 else 0:.3f}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—á–µ–º—É –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—á–∏—Ç–∞–µ—Ç —á—Ç–æ –≤—Å—ë –û–ö
    base_score = 0.7  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    final_score = min(base_score + total_score, 1.0)
    print(f"   üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç: {base_score} + {total_score} = {final_score}")
    
    if final_score >= 0.7:
        print(f"   ‚úÖ –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê: –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—á–∏—Ç–∞–µ—Ç {final_score:.2f} >= 0.7 = –£–°–ü–ï–•!")
    else:
        print(f"   ‚ùå –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—á–∏—Ç–∞–µ—Ç {final_score:.2f} < 0.7 = –ü–†–û–í–ê–õ")

if __name__ == "__main__":
    debug_validator() 