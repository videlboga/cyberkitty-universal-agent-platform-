#!/usr/bin/env python3
"""
üöÄ –£–ú–ù–´–ô –ú–ê–†–®–†–£–¢–ò–ó–ê–¢–û–† –ê–ì–ï–ù–¢–û–í –° LLM
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä–æ–π LLM-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∞–≥–µ–Ω—Ç–æ–≤
"""

import asyncio
import aiohttp
import time
import os
from enum import Enum
from typing import Dict, Any
from dotenv import load_dotenv

load_dotenv()

class Agent(Enum):
    NOVA = "nova"           # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    SHERLOCK = "sherlock"   # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    ARTEMIS = "artemis"     # –ö–æ–Ω—Ç–µ–Ω—Ç, –¥–∏–∑–∞–π–Ω
    ADA = "ada"             # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    CIPHER = "cipher"       # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    WARREN = "warren"       # –§–∏–Ω–∞–Ω—Å—ã
    VIRAL = "viral"         # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥

class LLMAgentRouter:
    """üß† –£–º–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.api_key = os.getenv('OPENROUTER_API_KEY') or os.getenv('OPENAI_API_KEY')
        self.llm_available = bool(self.api_key)
        
        print(f"üß† LLM Router: {'‚úÖ –≥–æ—Ç–æ–≤' if self.llm_available else '‚ùå —Ç–æ–ª—å–∫–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞'}")
    
    async def route(self, task: str) -> Dict[str, Any]:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏"""
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º LLM (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if self.llm_available:
            try:
                return await self._llm_classify(task)
            except Exception as e:
                print(f"‚ö†Ô∏è LLM –æ—à–∏–±–∫–∞: {e}, fallback –Ω–∞ —ç–≤—Ä–∏—Å—Ç–∏–∫—É")
        
        # Fallback –Ω–∞ —ç–≤—Ä–∏—Å—Ç–∏–∫—É
        return self._heuristic_classify(task)
    
    async def _llm_classify(self, task: str) -> Dict[str, Any]:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ LLM"""
        
        start_time = time.time()
        
        prompt = f"""–¢—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤. –í—ã–±–µ—Ä–∏ –û–î–ù–û–ì–û –∞–≥–µ–Ω—Ç–∞:

nova - –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
sherlock - –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
artemis - –∫–æ–Ω—Ç–µ–Ω—Ç, —Ç–µ–∫—Å—Ç—ã, –¥–∏–∑–∞–π–Ω
ada - –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–æ–¥
cipher - –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, —Ç–µ—Å—Ç—ã
warren - —Ñ–∏–Ω–∞–Ω—Å—ã, –¥–µ–Ω—å–≥–∏
viral - –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, —Ä–µ–∫–ª–∞–º–∞

–ó–ê–î–ê–ß–ê: {task}

–û–¢–í–ï–¢: —Ç–æ–ª—å–∫–æ –∏–º—è –∞–≥–µ–Ω—Ç–∞"""
        
        async with aiohttp.ClientSession() as session:
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": "deepseek/deepseek-chat",
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": 10,
                "temperature": 0.1
            }
            
            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers, json=payload, timeout=10
            ) as response:
                
                if response.status == 200:
                    data = await response.json()
                    content = data["choices"][0]["message"]["content"]
                    agent_name = self._extract_agent(content)
                    
                    return {
                        "agent": Agent(agent_name),
                        "method": "llm",
                        "confidence": 0.92,
                        "response": content.strip(),
                        "time_ms": round((time.time() - start_time) * 1000)
                    }
                else:
                    raise Exception(f"HTTP {response.status}")
    
    def _heuristic_classify(self, task: str) -> Dict[str, Any]:
        """–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"""
        
        task_lower = task.lower()
        
        rules = [
            (["–∞–Ω–∞–ª–∏–∑", "–¥–∞–Ω–Ω—ã–µ"], Agent.NOVA),
            (["–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫"], Agent.SHERLOCK),
            (["—Å–æ–∑–¥–∞–π", "–¥–∏–∑–∞–π–Ω"], Agent.ARTEMIS),
            (["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º"], Agent.ADA),
            (["—Ç–µ—Å—Ç", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"], Agent.CIPHER),
            (["–±—é–¥–∂–µ—Ç", "—Ñ–∏–Ω–∞–Ω—Å"], Agent.WARREN),
            (["—Ä–µ–∫–ª–∞–º", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥"], Agent.VIRAL)
        ]
        
        for keywords, agent in rules:
            if any(word in task_lower for word in keywords):
                return {
                    "agent": agent,
                    "method": "heuristic",
                    "confidence": 0.75,
                    "response": f"–≠–≤—Ä–∏—Å—Ç–∏–∫–∞ –≤—ã–±—Ä–∞–ª–∞ {agent.value}",
                    "time_ms": 1
                }
        
        return {
            "agent": Agent.SHERLOCK,
            "method": "heuristic", 
            "confidence": 0.6,
            "response": "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            "time_ms": 1
        }
    
    def _extract_agent(self, response: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
        response_lower = response.lower()
        agents = ["nova", "sherlock", "artemis", "ada", "cipher", "warren", "viral"]
        
        for agent in agents:
            if agent in response_lower:
                return agent
        return "sherlock"

# –î–µ–º–æ
async def demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞"""
    
    print("üöÄ –î–ï–ú–û LLM –ú–ê–†–®–†–£–¢–ò–ó–ê–¢–û–†–ê –ê–ì–ï–ù–¢–û–í")
    print("=" * 50)
    
    router = LLMAgentRouter()
    
    tasks = [
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª",
        "–°–æ–∑–¥–∞–π –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏",
        "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö",
        "–ù–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è API",
        "–ó–∞–ø—É—Å—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é",
        "–†–∞—Å—Å—á–∏—Ç–∞–π –±—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞"
    ]
    
    results = []
    
    for i, task in enumerate(tasks, 1):
        print(f"\nüéØ –ó–ê–î–ê–ß–ê {i}: '{task}'")
        
        result = await router.route(task)
        results.append(result)
        
        print(f"   ü§ñ –ê–≥–µ–Ω—Ç: {result['agent'].value}")
        print(f"   üîß –ú–µ—Ç–æ–¥: {result['method']}")
        print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.1%}")
        print(f"   ‚ö° –í—Ä–µ–º—è: {result['time_ms']}–º—Å")
        print(f"   üí¨ –û—Ç–≤–µ—Ç: {result['response']}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    llm_count = sum(1 for r in results if r['method'] == 'llm')
    avg_time = sum(r['time_ms'] for r in results) / len(results)
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üìà LLM –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {llm_count}/{len(results)} —Ä–∞–∑")
    print(f"   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {round(avg_time)}–º—Å")

if __name__ == "__main__":
    asyncio.run(demo()) 