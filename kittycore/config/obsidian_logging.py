"""
üóÑÔ∏è OBSIDIAN LOGGING SYSTEM
–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Obsidian vault –∫–∞–∫ markdown —Ñ–∞–π–ª—ã
"""

import sys
from pathlib import Path
from datetime import datetime
from typing import Dict, Any
from loguru import logger

class ObsidianLogHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Obsidian vault"""
    
    def __init__(self, vault_path: str = "./obsidian_vault"):
        self.vault_path = Path(vault_path)
        self.logs_folder = self.vault_path / "system" / "logs"
        self.logs_folder.mkdir(parents=True, exist_ok=True)
        
        # –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –≤ markdown —Ñ–æ—Ä–º–∞—Ç–µ
        self.log_files = {
            "orchestrator": self.logs_folder / "üß≠ Orchestrator Logs.md",
            "agents": self.logs_folder / "ü§ñ Agents Logs.md", 
            "memory": self.logs_folder / "üß† Memory Logs.md",
            "human": self.logs_folder / "üë§ Human Collaboration Logs.md",
            "improvement": self.logs_folder / "üîÑ Iterative Improvement Logs.md",
            "system": self.logs_folder / "‚öôÔ∏è System Logs.md",
            "errors": self.logs_folder / "‚ùå Error Logs.md"
        }
        
        # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        for log_type, log_file in self.log_files.items():
            if not log_file.exists():
                self._create_log_file(log_file, log_type)
    
    def _create_log_file(self, log_file: Path, log_type: str):
        """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ª–æ–≥–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
        
        headers = {
            "orchestrator": "üß≠ –õ–æ–≥–∏ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            "agents": "ü§ñ –õ–æ–≥–∏ –ê–≥–µ–Ω—Ç–æ–≤",
            "memory": "üß† –õ–æ–≥–∏ –ü–∞–º—è—Ç–∏", 
            "human": "üë§ –õ–æ–≥–∏ –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –í–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
            "improvement": "üîÑ –õ–æ–≥–∏ –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –£–ª—É—á—à–µ–Ω–∏—è",
            "system": "‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –õ–æ–≥–∏",
            "errors": "‚ùå –õ–æ–≥–∏ –û—à–∏–±–æ–∫"
        }
        
        content = f"""---
title: {headers.get(log_type, log_type.title())}
type: system_log
category: {log_type}
created: {datetime.now().isoformat()}
tags: [kittycore, logs, {log_type}]
---

# {headers.get(log_type, log_type.title())}

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ –ª–æ–≥–∏ KittyCore 3.0

---

"""
        
        with open(log_file, 'w', encoding='utf-8') as f:
            f.write(content)
    
    def write_log(self, message):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π markdown —Ñ–∞–π–ª"""
        
        # Loguru –ø–µ—Ä–µ–¥–∞—ë—Ç Message –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ dict
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ record
        if hasattr(message, 'record'):
            record = message.record
        else:
            # Fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            record = message
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–æ–≥–∞ –ø–æ –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è
        module_name = record.get("name", "").lower() if isinstance(record, dict) else getattr(record, 'name', '').lower()
        log_type = "system"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if "orchestrator" in module_name:
            log_type = "orchestrator"
        elif any(keyword in module_name for keyword in ["agent", "factory", "intellectual"]):
            log_type = "agents"
        elif "memory" in module_name:
            log_type = "memory"
        elif any(keyword in module_name for keyword in ["human", "collaboration", "obsidian"]):
            log_type = "human"
        elif any(keyword in module_name for keyword in ["improvement", "validator", "fixer"]):
            log_type = "improvement"
        elif record.get("level", {}).get("name") == "ERROR":
            log_type = "errors"
        
        log_file = self.log_files[log_type]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–∞
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
        
        if isinstance(record, dict):
            level = record.get("level", {}).get("name", "INFO")
            log_message = record.get("message", "")
            function = record.get("function", "")
            line = record.get("line", "")
        else:
            level = getattr(record.level, 'name', 'INFO') if hasattr(record, 'level') else 'INFO'
            log_message = str(record.message) if hasattr(record, 'message') else str(record)
            function = getattr(record, 'function', '') if hasattr(record, 'function') else ''
            line = getattr(record, 'line', '') if hasattr(record, 'line') else ''
        
        # –°–æ–∑–¥–∞—ë–º markdown –∑–∞–ø–∏—Å—å
        log_entry = f"""
## {timestamp} | {level}

**–ú–æ–¥—É–ª—å:** `{module_name}`  
**–§—É–Ω–∫—Ü–∏—è:** `{function}:{line}`  
**–°–æ–æ–±—â–µ–Ω–∏–µ:** {log_message}

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        exception = record.get("exception") if isinstance(record, dict) else getattr(record, 'exception', None)
        if exception:
            log_entry += f"""
**–ò—Å–∫–ª—é—á–µ–Ω–∏–µ:**
```
{exception}
```

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        log_entry += "---\n"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        try:
            with open(log_file, 'a', encoding='utf-8') as f:
                f.write(log_entry)
        except Exception as e:
            # Fallback –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –≤ {log_file}: {e}")

def setup_obsidian_logging(vault_path: str = "./obsidian_vault"):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Obsidian vault"""
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.remove()
    
    # –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Obsidian
    obsidian_handler = ObsidianLogHandler(vault_path)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    logger.add(
        sys.stderr,
        level="INFO",
        format="<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
        colorize=True
    )
    
    # Obsidian markdown –ª–æ–≥–∏
    logger.add(
        obsidian_handler.write_log,
        level="INFO",
        format="{time} | {level} | {name}:{function}:{line} | {message}",
        serialize=True
    )
    
    logger.info("üóÑÔ∏è –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Obsidian vault –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    logger.info(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {obsidian_handler.logs_folder}")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
setup_obsidian_logging() 