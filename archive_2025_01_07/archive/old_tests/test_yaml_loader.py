#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç YAML –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º Universal Agent Platform
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.yaml_scenario_loader import yaml_loader


def test_yaml_loader():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É YAML —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º YAML –∑–∞–≥—Ä—É–∑—á–∏–∫...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = yaml_loader.load_from_file("scenarios/yaml/simple_test.yaml")
        
        print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω: {scenario['scenario_id']}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {len(scenario['steps'])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        assert scenario['scenario_id'] == 'simple_yaml_test'
        assert len(scenario['steps']) == 5
        assert scenario['steps'][0]['type'] == 'start'
        assert scenario['steps'][-1]['type'] == 'end'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º initial_context
        assert 'initial_context' in scenario
        assert 'test_data' in scenario['initial_context']
        
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è:")
        for step in scenario['steps']:
            print(f"  - {step['id']} ({step['type']})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def test_json_to_yaml_conversion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é JSON –≤ YAML."""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é JSON -> YAML...")
    
    # –ü—Ä–æ—Å—Ç–æ–π JSON —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    json_scenario = {
        "scenario_id": "test_conversion",
        "initial_context": {
            "data": {}
        },
        "steps": [
            {
                "id": "start",
                "type": "start",
                "next_step": "send_msg"
            },
            {
                "id": "send_msg",
                "type": "telegram_send_message",
                "params": {
                    "chat_id": "{chat_id}",
                    "text": "–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"
                },
                "next_step": "end"
            },
            {
                "id": "end",
                "type": "end"
            }
        ]
    }
    
    try:
        yaml_content = yaml_loader.convert_json_to_yaml(json_scenario)
        print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        print("\nüìÑ YAML —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(yaml_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
        converted_back = yaml_loader.load_from_string(yaml_content)
        assert converted_back['scenario_id'] == 'test_conversion'
        print("‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ YAML –∑–∞–≥—Ä—É–∑—á–∏–∫–∞...\n")
    
    success = True
    success &= test_yaml_loader()
    success &= test_json_to_yaml_conversion()
    
    if success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! YAML loader –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("\n‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö")
        sys.exit(1) 