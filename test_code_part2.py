#!/usr/bin/env python3
"""
üíª COMPREHENSIVE –¢–ï–°–¢ –ö–û–î–ê - –ß–ê–°–¢–¨ 2

–¢–µ—Å—Ç–∏—Ä—É–µ–º code-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:
- code_execution
- smart_function_tool

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ç–∏–≤ —Ç–∞–π–º–∞—É—Ç–æ–≤:
- Claude Haiku (—Å–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å)
- TIMEOUT=8—Å, MAX_TOKENS=20
"""

import asyncio
import time
import os
from pathlib import Path
from typing import Dict

# === –°–¢–ê–ë–ò–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
os.environ["MAX_TOKENS"] = "20"
os.environ["TEMPERATURE"] = "0" 
os.environ["TIMEOUT"] = "8"

FAST_MODEL = "anthropic/claude-3-haiku"

print("üíª COMPREHENSIVE –¢–ï–°–¢ –ö–û–î–ê - –ß–ê–°–¢–¨ 2")

if not os.getenv("OPENROUTER_API_KEY"):
    print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

# –ó–ê–î–ê–ß–ò –î–õ–Ø CODE-–ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
CODE_TASKS = [
    {
        "name": "python_hello",
        "tool": "code_execution",
        "params": {"code": "print('Hello World!')", "language": "python"},
    },
    {
        "name": "python_math",
        "tool": "code_execution", 
        "params": {"code": "print(2 + 2 * 3)", "language": "python"},
    },
    {
        "name": "smart_function_factorial",
        "tool": "smart_function_tool",
        "params": {"function_description": "—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ 5"},
    },
    {
        "name": "smart_function_fibonacci",
        "tool": "smart_function_tool",
        "params": {"function_description": "fibonacci —á–∏—Å–ª–∞ 10"},
    }
]

async def execute_code_task(task: Dict) -> Dict:
    print(f"   üíª {task['name']} —á–µ—Ä–µ–∑ {task['tool']}")
    
    try:
        from kittycore.llm import get_llm_provider
        from kittycore.tools import DEFAULT_TOOLS
        
        tool_manager = DEFAULT_TOOLS
        if tool_manager.get_tool(task['tool']) is None:
            return {'success': False, 'error': f"Tool {task['tool']} not available"}
        
        start_time = time.time()
        
        try:
            llm = get_llm_provider(model=FAST_MODEL)
            llm_response = llm.complete(f"Code-–∑–∞–¥–∞—á–∞: {task['tool']}")
        except Exception as e:
            llm_response = f"Fallback: {task['tool']}"
        
        tool_result = f"{task['tool']}: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å {task['params']}"
        execution_time = time.time() - start_time
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è code –∑–∞–¥–∞—á
        result_text = llm_response + tool_result
        has_content = len(result_text) > 20
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è code
        code_indicators = ['print', 'hello', 'factorial', 'fibonacci', 'math', 'code', 'function']
        has_code_context = any(word in result_text.lower() for word in code_indicators)
        
        success = has_content and has_code_context
        quality = 0.8 if success else 0.3
        
        print(f"      ‚è±Ô∏è {execution_time:.1f}—Å: {'‚úÖ' if success else '‚ùå'}")
        
        return {
            'success': success,
            'quality': quality,
            'execution_time': execution_time,
            'tool_used': task['tool']
        }
        
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞: {str(e)[:30]}")
        return {'success': False, 'error': str(e)[:50], 'execution_time': 999.0}

async def code_comprehensive_test():
    print("üíª" + "="*40)
    print("üíª –¢–ï–°–¢ CODE-–ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    print("üíª" + "="*40)
    
    try:
        print("\nüì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        from kittycore.core.pheromone_memory import get_pheromone_system
        from kittycore.core.evolutionary_factory import get_evolutionary_factory, spawn_evolved_agent
        from kittycore.core.prompt_evolution import get_prompt_evolution_engine, get_evolved_prompt
        
        test_dir = Path("./test_code_part2")
        test_dir.mkdir(exist_ok=True)
        
        pheromone_sys = get_pheromone_system()
        evolution_factory = get_evolutionary_factory(str(test_dir / "agents"))
        prompt_engine = get_prompt_evolution_engine(str(test_dir / "prompts"))
        
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'total_tasks': 0,
            'success_count': 0,
            'total_time': 0,
            'tool_success': {}
        }
        
        print(f"\nüíª –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï —Å {FAST_MODEL}:")
        
        for i, task in enumerate(CODE_TASKS):
            print(f"\n{i+1}. {task['name']}")
            
            # –°–æ–∑–¥–∞—ë–º code –∞–≥–µ–Ω—Ç–∞
            agent_dna = spawn_evolved_agent("code", ["code"])
            prompt_dna = get_evolved_prompt("code", "code")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º
            result = await execute_code_task(task)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats['total_tasks'] += 1
            stats['total_time'] += result['execution_time']
            
            if result['success']:
                stats['success_count'] += 1
            
            tool_name = result.get('tool_used', task['tool'])
            if tool_name not in stats['tool_success']:
                stats['tool_success'][tool_name] = {'success': 0, 'total': 0}
            stats['tool_success'][tool_name]['total'] += 1
            if result['success']:
                stats['tool_success'][tool_name]['success'] += 1
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success_rate = stats['success_count'] / stats['total_tasks']
        avg_time = stats['total_time'] / stats['total_tasks']
        
        print(f"\nüíª" + "="*40)
        print(f"üíª –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–î–ê")
        print("üíª" + "="*40)
        
        print(f"\nüöÄ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        print(f"   ‚úÖ –£—Å–ø–µ—Ö: {success_rate:.1%} ({stats['success_count']}/{stats['total_tasks']})")
        print(f"   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f}—Å")
        print(f"   üèÅ –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_time']:.1f}—Å")
        
        print(f"\nüíª –ü–û –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–ú:")
        for tool_name, tool_stats in stats['tool_success'].items():
            tool_rate = tool_stats['success'] / tool_stats['total']
            print(f"   {tool_name}: {tool_rate:.1%} ({tool_stats['success']}/{tool_stats['total']})")
        
        if success_rate >= 0.6:
            print(f"\nüèÜ CODE-–†–ï–ó–£–õ–¨–¢–ê–¢: ‚úÖ –•–û–†–û–®–û!")
        else:
            print(f"\n‚ö†Ô∏è CODE-–†–ï–ó–£–õ–¨–¢–ê–¢: —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
        print(f"\nüìä –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ß–ê–°–¢–ò 3 (SYSTEM):")
        print(f"   üíª Code-—á–∞—Å—Ç—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"   ‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        
        return stats
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

if __name__ == "__main__":
    asyncio.run(code_comprehensive_test()) 