#!/usr/bin/env python3
"""
üéØ KittyCore 3.0 - CLI –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–º–∞–Ω–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–µ–π—Å—è –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
"""

import asyncio
import sys
from pathlib import Path
from typing import Optional
import signal

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ kittycore
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig


class KittyCoreCliInterface:
    """üê± –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è KittyCore 3.0"""
    
    def __init__(self):
        self.orchestrator: Optional[UnifiedOrchestrator] = None
        self.running = True
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KittyCore 3.0...")
        
        config = UnifiedConfig(
            vault_path="./vault",
            enable_human_intervention=True,
            intervention_timeout=300
        )
        
        self.orchestrator = UnifiedOrchestrator(config)
        print("‚úÖ KittyCore 3.0 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    def print_banner(self):
        """–ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä —Å–∏—Å—Ç–µ–º—ã"""
        banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üê± KittyCore 3.0                         ‚ïë
‚ïë              –°–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–∞—è—Å—è –∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞          ‚ïë
‚ïë                                                              ‚ïë
‚ïë  üîÑ –ê–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç –∞–≥–µ–Ω—Ç–æ–≤                                   ‚ïë
‚ïë  üß† –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å –∫–æ–º–∞–Ω–¥—ã                              ‚ïë
‚ïë  üìä –ì—Ä–∞—Ñ-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤                               ‚ïë
‚ïë  üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥ –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏                            ‚ïë
‚ïë  üë§ Human-AI —Å–∏–Ω–µ—Ä–≥–∏—è                                        ‚ïë
‚ïë  üöÄ –°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ –∏ —ç–≤–æ–ª—é—Ü–∏—è                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        print(banner)
        
    def print_help(self):
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ:
  ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É - —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –∞–≥–µ–Ω—Ç–æ–≤
  ‚Ä¢ help, h, ? - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  ‚Ä¢ exit, quit, q - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  ‚Ä¢ clear, cls - –æ—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω
  ‚Ä¢ status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á:
  ‚Ä¢ "–°–æ–∑–¥–∞–π —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏"
  ‚Ä¢ "–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
  ‚Ä¢ "–°–¥–µ–ª–∞–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –æ –ò–ò"
  ‚Ä¢ "–°–æ–∑–¥–∞–π API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"
  ‚Ä¢ "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∞–π–ª data.csv"

üî• –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
  ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —Å–æ–∑–¥–∞—Å—Ç –Ω—É–∂–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
  ‚Ä¢ –ê–≥–µ–Ω—Ç—ã –±—É–¥—É—Ç –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ SharedChat
  ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Obsidian vault
  ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        print(help_text)
        
    def print_status(self):
        """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        if self.orchestrator:
            print("üìä –°—Ç–∞—Ç—É—Å KittyCore 3.0:")
            print(f"  üóÑÔ∏è  Vault: {self.orchestrator.config.vault_path}")
            print(f"  üéØ  SmartValidator: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.orchestrator.smart_validator else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
            print(f"  üß†  –°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' if self.orchestrator.learning_system else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}")
            print(f"  üîç  –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if self.orchestrator.vector_store else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}")
            print(f"  üìä  –ú–µ—Ç—Ä–∏–∫–∏: {'‚úÖ –ê–∫—Ç–∏–≤–Ω—ã' if self.orchestrator.metrics_collector else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}")
            print(f"  üí¨  SharedChat: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.orchestrator.shared_chat else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
            print(f"  üë§  Human-in-the-loop: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.orchestrator.human_intervention else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
    async def process_task(self, task: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.orchestrator:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return False
            
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞—é –∑–∞–¥–∞—á—É: {task}")
        print("=" * 60)
        
        try:
            result = await self.orchestrator.solve_task(task)
            
            print("\n" + "=" * 60)
            print("üéâ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            print(f"üìã ID: {result['task_id']}")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {result['duration']:.1f}—Å")
            print(f"ü§ñ –ê–≥–µ–Ω—Ç–æ–≤: {result['agents_created']}")
            print(f"üìÅ –§–∞–π–ª–æ–≤: {len(result['created_files'])}")
            print(f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {result['validation']['quality_score']:.2f}")
            
            if result['created_files']:
                print(f"\nüìÇ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                for file in result['created_files']:
                    print(f"  ‚Ä¢ {file}")
                    
            if result['validation']['issues']:
                print(f"\n‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã:")
                for issue in result['validation']['issues']:
                    print(f"  ‚Ä¢ {issue}")
                    
            print(f"\nüóÑÔ∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {result['vault_path']}")
            return True
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            return False
            
    async def run_interactive(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª"""
        self.print_banner()
        await self.initialize()
        self.print_help()
        
        while self.running:
            try:
                # –ö—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–º–ø—Ç
                user_input = input("\nüê± KittyCore> ").strip()
                
                if not user_input:
                    continue
                    
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                command = user_input.lower()
                
                if command in ['exit', 'quit', 'q']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! KittyCore 3.0 –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
                    self.running = False
                    break
                    
                elif command in ['help', 'h', '?']:
                    self.print_help()
                    
                elif command in ['clear', 'cls']:
                    import os
                    os.system('clear' if os.name == 'posix' else 'cls')
                    self.print_banner()
                    
                elif command == 'status':
                    self.print_status()
                    
                else:
                    # –≠—Ç–æ –∑–∞–¥–∞—á–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    await self.process_task(user_input)
                    
            except KeyboardInterrupt:
                print("\n\n‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
                confirm = input("‚ùì –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–π—Ç–∏? (y/n): ").strip().lower()
                if confirm in ['y', 'yes', '–¥–∞']:
                    self.running = False
                    break
                else:
                    print("‚ñ∂Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...")
                    
            except EOFError:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                self.running = False
                break
                
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                print("üîÑ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")


def setup_signal_handlers(cli_interface):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    def signal_handler(signum, frame):
        print(f"\n‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        cli_interface.running = False
        
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    cli_interface = KittyCoreCliInterface()
    setup_signal_handlers(cli_interface)
    
    try:
        await cli_interface.run_interactive()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main()) 