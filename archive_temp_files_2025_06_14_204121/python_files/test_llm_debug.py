#!/usr/bin/env python3
"""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê LLM –ü–†–û–ë–õ–ï–ú
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å LLM API
"""

import sys
import json
sys.path.append('.')

from kittycore.llm import get_llm_provider

def test_simple_llm():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç LLM"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê LLM")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        llm = get_llm_provider()
        print(f"‚úÖ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {type(llm).__name__}")
        print(f"üìù –ú–æ–¥–µ–ª—å: {llm.config.model}")
        print(f"üîë API –∫–ª—é—á: {llm.api_key[:10]}..." if llm.api_key else "‚ùå –ù–µ—Ç API –∫–ª—é—á–∞")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        print(f"\nüß† –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
        simple_prompt = "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?"
        
        response = llm.complete(simple_prompt)
        print(f"üì§ –ó–∞–ø—Ä–æ—Å: {simple_prompt}")
        print(f"üì• –û—Ç–≤–µ—Ç: '{response}'")
        print(f"üìè –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if response and len(response.strip()) > 0:
            print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print("‚ùå –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç!")
            return False
            
        # JSON –∑–∞–ø—Ä–æ—Å
        print(f"\nüß† –¢–µ—Å—Ç 2: JSON –∑–∞–ø—Ä–æ—Å")
        json_prompt = """
–í–µ—Ä–Ω–∏ JSON –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
    "result": "success",
    "number": 42
}

–¢–æ–ª—å–∫–æ JSON, –Ω–∏–∫–∞–∫–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!
"""
        
        response = llm.complete(json_prompt)
        print(f"üì§ –ó–∞–ø—Ä–æ—Å: JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
        print(f"üì• –û—Ç–≤–µ—Ç: '{response}'")
        
        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown
            clean_response = response.strip()
            if "```json" in clean_response:
                start = clean_response.find("```json") + 7
                end = clean_response.find("```", start)
                clean_response = clean_response[start:end].strip()
            elif "```" in clean_response:
                start = clean_response.find("```") + 3
                end = clean_response.rfind("```")
                clean_response = clean_response[start:end].strip()
            
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            if "{" in clean_response:
                start = clean_response.find("{")
                end = clean_response.rfind("}") + 1
                clean_response = clean_response[start:end]
            
            parsed = json.loads(clean_response)
            print(f"‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {parsed}")
            return True
            
        except json.JSONDecodeError as e:
            print(f"‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ—É–¥–∞—á–µ–Ω: {e}")
            print(f"üîç –ß–∏—Å—Ç—ã–π –æ—Ç–≤–µ—Ç: '{clean_response}'")
            return False
            
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False

def test_task_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á (–∫–∞–∫ –≤ IntellectualAgent)"""
    print(f"\nüß† –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á")
    print("=" * 50)
    
    try:
        llm = get_llm_provider()
        
        prompt = """
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –∏ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.

–ó–ê–î–ê–ß–ê: "–°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏"

–î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
{
  "file_manager": "–°–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤",
  "code_generator": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ HTML —Å—Ç—Ä–∞–Ω–∏—Ü",
  "web_search": "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"
}

–í–µ—Ä–Ω–∏ JSON –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
    "task_type": "creation",
    "intent": "—Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞ —Å –∫–æ—Ç—è—Ç–∞–º–∏",
    "chosen_tools": ["code_generator", "file_manager"],
    "reasoning": "–Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å HTML —Ñ–∞–π–ª—ã"
}

–¢–û–õ–¨–ö–û JSON, –Ω–∏–∫–∞–∫–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!
"""
        
        response = llm.complete(prompt)
        print(f"üì• –û—Ç–≤–µ—Ç LLM: '{response}'")
        
        # –ü–∞—Ä—Å–∏–º –∫–∞–∫ –≤ IntellectualAgent
        try:
            clean_response = response.strip()
            
            if "```json" in clean_response:
                json_start = clean_response.find("```json") + 7
                json_end = clean_response.find("```", json_start)
                json_str = clean_response[json_start:json_end].strip()
            else:
                start = clean_response.find("{")
                end = clean_response.rfind("}") + 1
                json_str = clean_response[start:end]
            
            analysis = json.loads(json_str)
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–µ–Ω:")
            print(f"  üéØ –¢–∏–ø: {analysis.get('task_type')}")
            print(f"  üí° –¶–µ–ª—å: {analysis.get('intent')}")
            print(f"  üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {analysis.get('chosen_tools')}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"üîç –ß–∏—Å—Ç—ã–π JSON: '{json_str if 'json_str' in locals() else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}'")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á: {e}")
        return False

def main():
    print("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú LLM")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    test1_ok = test_simple_llm()
    
    # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á
    test2_ok = test_task_analysis()
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π LLM: {'–û–ö' if test1_ok else '–û–®–ò–ë–ö–ê'}")
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á: {'–û–ö' if test2_ok else '–û–®–ò–ë–ö–ê'}")
    
    if test1_ok and test2_ok:
        print(f"\nüéâ LLM –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print(f"–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ LLM, –∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ —Å–∏—Å—Ç–µ–º—ã.")
    else:
        print(f"\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° LLM!")
        print(f"–ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–ª–∏ –ø—Ä–æ–º–ø—Ç—ã.")

if __name__ == "__main__":
    main() 