#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç ObsidianOrchestrator - –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ObsidianDB

–ü–†–û–í–ï–†–Ø–ï–¢ –†–ï–®–ï–ù–ò–ï –í–°–ï–• –ü–†–û–ë–õ–ï–ú:
‚úÖ –ê–≥–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –†–ï–ê–õ–¨–ù–´–ï —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ ObsidianDB
‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–º–µ—Ç–∫–∏
‚úÖ –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
‚úÖ –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏ –≥—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π
‚úÖ –ù–ï–¢ –∏–ª–ª—é–∑–∏–∏ —Ä–∞–±–æ—Ç—ã - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
"""

import asyncio
import shutil
from pathlib import Path
from kittycore.core.obsidian_orchestrator import (
    ObsidianOrchestrator, create_obsidian_orchestrator, solve_with_obsidian_orchestrator
)

async def test_simple_task():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏"""
    print("üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞")
    
    vault_path = "./test_orchestrator_vault"
    if Path(vault_path).exists():
        shutil.rmtree(vault_path)
    
    orchestrator = create_obsidian_orchestrator(vault_path)
    
    task = "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello_world.py —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"
    result = await orchestrator.solve_task(task, user_id="test_user")
    
    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result['task_id']}")
    print(f"   –°—Ç–∞—Ç—É—Å: {result['status']}")
    print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result['duration']:.2f}—Å")
    print(f"   –ê–≥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {result['agents_created']}")
    print(f"   –ó–∞–º–µ—Ç–æ–∫ –≤ vault: {result['vault_notes_created']}")
    
    return result

async def test_complex_task():
    """–¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    print("\nüß™ –¢–µ—Å—Ç 2: –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞")
    
    vault_path = "./test_orchestrator_vault"
    orchestrator = create_obsidian_orchestrator(vault_path)
    
    task = "–°–æ–∑–¥–∞–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±-—Å–∞–π—Ç —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –ø–ª–æ—â–∞–¥–∏ –∏ —Ñ–æ—Ä–º–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"
    result = await orchestrator.solve_task(task, user_id="test_user_advanced")
    
    print(f"‚úÖ –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result['task_id']}")
    print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result['complexity_analysis']['complexity']}")
    print(f"   –ü–æ–¥–∑–∞–¥–∞—á: {len(result['subtasks'])}")
    print(f"   –®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {result['steps_completed']}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ ObsidianDB
    obsidian_results = result['obsidian_results']
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤: {len(obsidian_results['agent_results'])}")
    print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(obsidian_results['coordination_messages'])}")
    
    return result

async def test_obsidian_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ObsidianDB"""
    print("\nüß™ –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ObsidianDB")
    
    vault_path = "./test_orchestrator_vault"
    orchestrator = create_obsidian_orchestrator(vault_path)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = orchestrator.get_statistics()
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ vault:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {stats['vault_statistics']['total_notes']}")
    print(f"   –ó–∞–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á: {stats['vault_statistics']['tasks_notes']}")
    print(f"   –ó–∞–º–µ—Ç–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤: {stats['vault_statistics']['agents_notes']}")
    print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏: {stats['vault_statistics']['coordination_notes']}")
    print(f"   –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏: {stats['vault_statistics']['system_notes']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É vault
    vault_structure = {}
    for folder in Path(vault_path).rglob("*"):
        if folder.is_dir():
            folder_name = str(folder.relative_to(vault_path))
            if folder_name not in vault_structure:
                vault_structure[folder_name] = []
        elif folder.suffix == ".md":
            parent = str(folder.parent.relative_to(vault_path))
            if parent not in vault_structure:
                vault_structure[parent] = []
            vault_structure[parent].append(folder.name)
    
    print(f"\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ vault:")
    for folder, files in vault_structure.items():
        print(f"   {folder}/ ({len(files)} —Ñ–∞–π–ª–æ–≤)")
        for file in files[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
            print(f"     - {file}")
        if len(files) > 3:
            print(f"     ... –∏ –µ—â—ë {len(files) - 3} —Ñ–∞–π–ª–æ–≤")
    
    return stats

async def test_context_passing():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏")
    
    vault_path = "./test_orchestrator_vault"
    orchestrator = create_obsidian_orchestrator(vault_path)
    
    task = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á—ë—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"
    result = await orchestrator.solve_task(task, user_id="context_test")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥–∞–≤–∞–ª—Å—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
    obsidian_results = result['obsidian_results']
    
    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result['task_id']}")
    print(f"   –ê–≥–µ–Ω—Ç–æ–≤ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ: {len(obsidian_results['final_outputs'])}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    for agent_id, outputs in obsidian_results['final_outputs'].items():
        print(f"   ü§ñ {agent_id}:")
        for output in outputs:
            print(f"     - {output['type']}: {output['content'][:100]}...")
    
    return result

async def test_real_vs_mock_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ vs –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–æ–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –º–æ–∫–∞–º–∏")
    
    vault_path = "./test_orchestrator_vault"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é
    result = await solve_with_obsidian_orchestrator(
        task="–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é",
        vault_path=vault_path,
        user_id="comparison_test"
    )
    
    print(f"‚úÖ –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {result['task_id']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –†–ï–ê–õ–¨–ù–û–°–¢–¨ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    obsidian_results = result['obsidian_results']
    agent_results = obsidian_results['agent_results']
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print(f"   –ê–≥–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–ª–æ: {len(agent_results)}")
    
    real_content_found = 0
    for agent_result in agent_results:
        content = agent_result['content']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç vs –æ—Ç—á—ë—Ç—ã
        if any(word in content.lower() for word in ['–ø–ª–∞–Ω', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ', '–¥–µ–Ω—å', '–Ω–µ–¥–µ–ª—è']):
            real_content_found += 1
            print(f"   ‚úÖ {agent_result['agent_id']}: –†–ï–ê–õ–¨–ù–´–ô –∫–æ–Ω—Ç–µ–Ω—Ç ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            print(f"   ‚ö†Ô∏è {agent_result['agent_id']}: –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—á—ë—Ç")
    
    reality_score = real_content_found / len(agent_results) if agent_results else 0
    print(f"   üéØ –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: {reality_score:.1%}")
    
    return result, reality_score

def inspect_vault_content(vault_path: str):
    """–ò–Ω—Å–ø–µ–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ vault"""
    print(f"\nüîç –ò–Ω—Å–ø–µ–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ vault: {vault_path}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–º–µ—Ç–æ–∫
    examples = {
        "tasks": "–ó–∞–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏",
        "agents": "–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≥–µ–Ω—Ç–∞", 
        "coordination": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "system": "–°–∏—Å—Ç–µ–º–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞"
    }
    
    for folder_name, description in examples.items():
        folder_path = Path(vault_path) / folder_name
        if folder_path.exists():
            md_files = list(folder_path.rglob("*.md"))
            if md_files:
                print(f"\nüìÑ {description} ({folder_name}):")
                with open(md_files[0], 'r', encoding='utf-8') as f:
                    content = f.read()
                print("=" * 50)
                print(content[:300] + "..." if len(content) > 300 else content)
                print("=" * 50)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OBSIDIANORCHESTRATOR - –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
    print("=" * 80)
    print("üéØ –¶–ï–õ–¨: –î–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –∞–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç –†–ï–ê–õ–¨–ù–´–ï —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ ObsidianDB")
    print("üéØ –ë–ï–ó –∏–ª–ª—é–∑–∏–∏ —Ä–∞–±–æ—Ç—ã, –ë–ï–ó –æ—Ç—á—ë—Ç–æ–≤ –≤–º–µ—Å—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("=" * 80)
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞
        result1 = await test_simple_task()
        
        # –¢–µ—Å—Ç 2: –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞
        result2 = await test_complex_task()
        
        # –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ObsidianDB
        stats = await test_obsidian_integration()
        
        # –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        result4 = await test_context_passing()
        
        # –¢–µ—Å—Ç 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–æ–∫–∞–º–∏
        result5, reality_score = await test_real_vs_mock_comparison()
        
        # –ò–Ω—Å–ø–µ–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        inspect_vault_content("./test_orchestrator_vault")
        
        print("\n" + "=" * 80)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ï–í–û–õ–Æ–¶–ò–ò:")
        print(f"‚úÖ –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: 5")
        print(f"‚úÖ –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: {reality_score:.1%}")
        print(f"‚úÖ –ó–∞–º–µ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω–æ: {stats['vault_statistics']['total_notes']}")
        print(f"‚úÖ Vault –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ: ./test_orchestrator_vault")
        
        print("\nüî• –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´:")
        print("‚úÖ –ê–≥–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –†–ï–ê–õ–¨–ù–´–ï —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ ObsidianDB")
        print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–º–µ—Ç–∫–∏")
        print("‚úÖ –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ markdown")
        print("‚úÖ –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ —Å–æ–∑–¥–∞—é—Ç –≥—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π")
        print("‚úÖ –ù–ï–¢ –∏–ª–ª—é–∑–∏–∏ —Ä–∞–±–æ—Ç—ã - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        print("\nüìÅ –û—Ç–∫—Ä–æ–π—Ç–µ ./test_orchestrator_vault –≤ Obsidian —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 