#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û A-MEM –° –õ–û–ö–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–¨–Æ
–¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–∞—è all-MiniLM-L6-v2 –º–æ–¥–µ–ª—å –∏–∑ Ubuntu!
"""

import asyncio
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

async def test_sentence_transformers_local():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é sentence-transformers –º–æ–¥–µ–ª—å"""
    print("üöÄ –¢–ï–°–¢ –õ–û–ö–ê–õ–¨–ù–û–ô SENTENCE-TRANSFORMERS –ú–û–î–ï–õ–ò")
    
    try:
        from sentence_transformers import SentenceTransformer
        
        start_time = time.time()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å (–¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ)
        print("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º all-MiniLM-L6-v2 –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞...")
        model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')
        
        load_time = time.time() - start_time
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {load_time:.2f}—Å!")
        print(f"üìä –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {model.get_sentence_embedding_dimension()}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        print("\nüß† –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        texts = [
            "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python", 
            "–≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å Django",
            "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            "–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL"
        ]
        
        embeddings = model.encode(texts)
        print(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å–æ–∑–¥–∞–Ω—ã: {embeddings.shape}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –±–ª–∏–∑–æ—Å—Ç—å
        from sentence_transformers.util import cos_sim
        
        similarity1 = cos_sim(embeddings[0], embeddings[1]).item()  # Python vs Django
        similarity2 = cos_sim(embeddings[0], embeddings[2]).item()  # Python vs ML
        
        print(f"\nüîó –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –±–ª–∏–∑–æ—Å—Ç—å:")
        print(f"  Python ‚Üî Django: {similarity1:.3f}")
        print(f"  Python ‚Üî ML: {similarity2:.3f}")
        
        print("\nüéâ SENTENCE-TRANSFORMERS –†–ê–ë–û–¢–ê–ï–¢ –õ–û–ö–ê–õ–¨–ù–û!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_amem_with_real_model():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º A-MEM —Å —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é"""
    print("\nüß† –¢–ï–°–¢ A-MEM –° –†–ï–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–¨–Æ")
    
    try:
        from kittycore.memory.amem_integration import AgenticMemorySystem
        
        # –°–æ–∑–¥–∞—ë–º A-MEM —Å —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é
        print("üîß –°–æ–∑–¥–∞—ë–º AgenticMemorySystem...")
        amem = AgenticMemorySystem(model_name='sentence-transformers/all-MiniLM-L6-v2')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ê–°–¢–û–Ø–©–ò–ô A-MEM
        if hasattr(amem, 'chroma_client') and hasattr(amem, 'embedding_model'):
            print("‚úÖ –†–µ–∞–ª—å–Ω–∞—è A-MEM —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞!")
            print(f"üìä –ú–æ–¥–µ–ª—å: {amem.embedding_model}")
        else:
            print("‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç –≤ fallback —Ä–µ–∂–∏–º–µ")
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        print("\nüìù –î–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ A-MEM...")
        memories = [
            ("–ò–∑—É—á–∞—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π", ["ai", "learning"]),
            ("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É—é –Ω–∞ Python FastAPI", ["python", "api"]),
            ("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", ["docker", "devops"]),
            ("–†–∞–±–æ—Ç–∞—é —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö", ["database", "vectors"]),
            ("–û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ML –º–æ–¥–µ–ª–µ–π", ["ml", "optimization"])
        ]
        
        memory_ids = []
        for content, tags in memories:
            memory_id = await amem.add_note(content, tags=tags, category="learning")
            memory_ids.append(memory_id)
            print(f"  ‚úÖ {memory_id[:12]}... - {content[:30]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫...")
        search_queries = [
            "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            "–≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", 
            "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è"
        ]
        
        for query in search_queries:
            print(f"\nüîé –ó–∞–ø—Ä–æ—Å: '{query}'")
            results = await amem.search_agentic(query, k=3)
            
            for i, result in enumerate(results[:3], 1):
                distance = result.get('distance', 0)
                print(f"  {i}. {result['content']}")
                print(f"     üìè –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.3f}")
                print(f"     üè∑Ô∏è –¢–µ–≥–∏: {result.get('tags', [])}")
        
        print("\nüéâ A-MEM –° –†–ï–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–¨–Æ –†–ê–ë–û–¢–ê–ï–¢!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ A-MEM: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 70)
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ A-MEM –° –õ–û–ö–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–¨–Æ")
    print("=" * 70)
    
    # –¢–µ—Å—Ç 1: –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
    success1 = await test_sentence_transformers_local()
    
    # –¢–µ—Å—Ç 2: A-MEM —Å —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é
    success2 = await test_amem_with_real_model()
    
    print("\n" + "=" * 70)
    print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢:")
    print(f"  ü§ñ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if success1 else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"  üß† A-MEM —Ä–µ–∞–ª—å–Ω—ã–π: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if success2 else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if success1 and success2:
        print("\nüéâ A-MEM –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        print("üí° –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫, –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å, —ç–≤–æ–ª—é—Ü–∏—è - –í–°–Å –†–ê–ë–û–¢–ê–ï–¢!")
    else:
        print("\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

if __name__ == "__main__":
    asyncio.run(main()) 