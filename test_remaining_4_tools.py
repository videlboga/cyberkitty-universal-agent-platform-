#!/usr/bin/env python3
"""
üöÄ –û–¢–õ–ê–î–ö–ê: 4 –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
NetworkTool, DatabaseTool, VectorSearchTool, EmailTool
"""

import time
import json

# –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
imports = {}
tools = {}

try:
    from kittycore.tools.network_tool import NetworkTool
    imports['network'] = True
    tools['network'] = NetworkTool()
except ImportError as e:
    imports['network'] = str(e)

try:
    from kittycore.tools.database_tool import DatabaseTool
    imports['database'] = True
    tools['database'] = DatabaseTool()
except ImportError as e:
    imports['database'] = str(e)

try:
    from kittycore.tools.vector_search_tool import VectorSearchTool
    imports['vector_search'] = True
    tools['vector_search'] = VectorSearchTool()
except ImportError as e:
    imports['vector_search'] = str(e)

try:
    from kittycore.tools.email_tool import EmailTool
    imports['email'] = True
    tools['email'] = EmailTool()
except ImportError as e:
    imports['email'] = str(e)

def test_network_tool():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç NetworkTool"""
    if imports['network'] != True:
        return f"IMPORT_ERROR: {imports['network']}"
    
    tool = tools['network']
    
    # –¢–µ—Å—Ç ping localhost
    result = tool.execute("ping", host="127.0.0.1", count=1)
    
    if hasattr(result, 'success') and result.success:
        data_str = str(result.data)
        return f"SUCCESS: {len(data_str)} –±–∞–π—Ç"
    else:
        error = getattr(result, 'error', 'Unknown error')
        return f"FAILED: {error}"

def test_database_tool():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç DatabaseTool"""
    if imports['database'] != True:
        return f"IMPORT_ERROR: {imports['database']}"
    
    tool = tools['database']
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    result = tool.execute("get_info")
    
    if hasattr(result, 'success') and result.success:
        data_str = str(result.data)
        return f"SUCCESS: {len(data_str)} –±–∞–π—Ç"
    else:
        error = getattr(result, 'error', 'Unknown error')
        return f"FAILED: {error}"

def test_vector_search_tool():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç VectorSearchTool"""
    if imports['vector_search'] != True:
        return f"IMPORT_ERROR: {imports['vector_search']}"
    
    tool = tools['vector_search']
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    result = tool.execute("get_stats")
    
    if hasattr(result, 'success') and result.success:
        data_str = str(result.data)
        return f"SUCCESS: {len(data_str)} –±–∞–π—Ç"
    else:
        error = getattr(result, 'error', 'Unknown error')
        return f"FAILED: {error}"

def test_email_tool():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç EmailTool"""
    if imports['email'] != True:
        return f"IMPORT_ERROR: {imports['email']}"
    
    tool = tools['email']
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    result = tool.execute("get_info")
    
    if hasattr(result, 'success') and result.success:
        data_str = str(result.data)
        return f"SUCCESS: {len(data_str)} –±–∞–π—Ç"
    else:
        error = getattr(result, 'error', 'Unknown error')
        return f"FAILED: {error}"

def is_honest_result(test_result):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if "SUCCESS:" in test_result:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        try:
            size = int(test_result.split(" ")[1])
            return size >= 30  # –ú–∏–Ω–∏–º—É–º 30 –±–∞–π—Ç –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        except:
            return False
    return False

def main():
    print("üöÄ –û–¢–õ–ê–î–ö–ê: 4 –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–º–ø–æ—Ä—Ç–æ–≤
    print("\nüì¶ –°–¢–ê–¢–£–° –ò–ú–ü–û–†–¢–û–í:")
    for tool_name, status in imports.items():
        if status == True:
            print(f"  ‚úÖ {tool_name}_tool: –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        else:
            print(f"  ‚ùå {tool_name}_tool: {status}")
    
    # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
    test_functions = {
        'NetworkTool': test_network_tool,
        'DatabaseTool': test_database_tool, 
        'VectorSearchTool': test_vector_search_tool,
        'EmailTool': test_email_tool
    }
    
    results = {}
    
    print(f"\n{'='*50}")
    print("üß™ –ë–´–°–¢–†–´–ï –¢–ï–°–¢–´:")
    
    for tool_name, test_func in test_functions.items():
        try:
            start_time = time.time()
            result = test_func()
            end_time = time.time()
            
            test_time = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            is_honest = is_honest_result(result)
            status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if is_honest else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
            
            print(f"  {tool_name}: {result} ({test_time:.1f}–º—Å) - {status}")
            results[tool_name] = is_honest
            
        except Exception as e:
            print(f"  {tool_name}: EXCEPTION: {e} - ‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
            results[tool_name] = False
    
    # –ò—Ç–æ–≥–∏
    total_tests = len(results)
    passed_tests = sum(1 for success in results.values() if success)
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"\n{'='*50}")
    print("üìä –ò–¢–û–ì–ò –û–°–¢–ê–í–®–ò–•–°–Ø 4 –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í:")
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    # –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    for tool_name, success in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {tool_name}: {status}")

if __name__ == "__main__":
    main() 