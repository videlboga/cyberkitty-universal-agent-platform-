#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π MongoDB –ø–ª–∞–≥–∏–Ω–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import pytest
from datetime import datetime
from typing import Dict, Any

from app.core.simple_engine import SimpleScenarioEngine
from app.plugins.mongo_plugin import MongoPlugin


class TestMongoRealOperations:
    """–¢–µ—Å—Ç—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å MongoDB"""
    
    @pytest.fixture
    async def engine_with_mongo(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–≤–∏–∂–æ–∫ —Å MongoDB –ø–ª–∞–≥–∏–Ω–æ–º"""
        engine = SimpleScenarioEngine()
        mongo_plugin = MongoPlugin()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
        await mongo_plugin.initialize()
        engine.register_plugin(mongo_plugin)
        
        return engine, mongo_plugin
    
    @pytest.mark.asyncio
    async def test_mongo_crud_operations(self, engine_with_mongo):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ CRUD —Ü–∏–∫–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        engine, mongo_plugin = engine_with_mongo
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        health = await mongo_plugin.healthcheck()
        if not health:
            pytest.skip("MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        test_collection = "test_crud_operations"
        test_doc_id = f"test_doc_{datetime.now().timestamp()}"
        
        try:
            # === 1. CREATE - –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===
            print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º CREATE –æ–ø–µ—Ä–∞—Ü–∏—é...")
            
            create_scenario = {
                "scenario_id": "test_create",
                "steps": [
                    {
                        "id": "create_doc",
                        "type": "mongo_insert_one",
                        "params": {
                            "collection": test_collection,
                            "document": {
                                "_id": test_doc_id,
                                "name": "Test Document",
                                "value": 100,
                                "created_at": datetime.now().isoformat(),
                                "tags": ["test", "crud"]
                            },
                            "output_var": "create_result"
                        }
                    }
                ]
            }
            
            context = {}
            result = await engine.execute_scenario(create_scenario, context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
            create_result = context.get("create_result", {})
            assert create_result.get("success") == True, f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {create_result}"
            assert create_result.get("inserted_id") == test_doc_id
            
            print(f"‚úÖ CREATE: –î–æ–∫—É–º–µ–Ω—Ç {test_doc_id} —Å–æ–∑–¥–∞–Ω")
            
            # === 2. READ - –ß—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===
            print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º READ –æ–ø–µ—Ä–∞—Ü–∏—é...")
            
            read_scenario = {
                "scenario_id": "test_read",
                "steps": [
                    {
                        "id": "read_doc",
                        "type": "mongo_find_one",
                        "params": {
                            "collection": test_collection,
                            "filter": {"_id": test_doc_id},
                            "output_var": "read_result"
                        }
                    }
                ]
            }
            
            context = {}
            result = await engine.execute_scenario(read_scenario, context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á—Ç–µ–Ω–∏—è
            read_result = context.get("read_result", {})
            assert read_result.get("success") == True, f"–ß—Ç–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {read_result}"
            
            document = read_result.get("document")
            assert document is not None, "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            assert document.get("_id") == test_doc_id
            assert document.get("name") == "Test Document"
            assert document.get("value") == 100
            
            print(f"‚úÖ READ: –î–æ–∫—É–º–µ–Ω—Ç {test_doc_id} –ø—Ä–æ—á–∏—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # === 3. UPDATE - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===
            print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º UPDATE –æ–ø–µ—Ä–∞—Ü–∏—é...")
            
            update_scenario = {
                "scenario_id": "test_update",
                "steps": [
                    {
                        "id": "update_doc",
                        "type": "mongo_update_one",
                        "params": {
                            "collection": test_collection,
                            "filter": {"_id": test_doc_id},
                            "update": {
                                "$set": {
                                    "name": "Updated Test Document",
                                    "value": 200,
                                    "updated_at": datetime.now().isoformat()
                                },
                                "$push": {
                                    "tags": "updated"
                                }
                            },
                            "output_var": "update_result"
                        }
                    }
                ]
            }
            
            context = {}
            result = await engine.execute_scenario(update_scenario, context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_result = context.get("update_result", {})
            assert update_result.get("success") == True, f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {update_result}"
            assert update_result.get("modified_count") == 1
            
            print(f"‚úÖ UPDATE: –î–æ–∫—É–º–µ–Ω—Ç {test_doc_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
            
            # === 4. VERIFY UPDATE - –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å ===
            print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
            
            context = {}
            result = await engine.execute_scenario(read_scenario, context)
            
            read_result = context.get("read_result", {})
            updated_document = read_result.get("document")
            
            assert updated_document.get("name") == "Updated Test Document", "–ò–º—è –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å"
            assert updated_document.get("value") == 200, "–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å"
            assert "updated" in updated_document.get("tags", []), "–¢–µ–≥ –Ω–µ –¥–æ–±–∞–≤–∏–ª—Å—è"
            assert "updated_at" in updated_document, "–ü–æ–ª–µ updated_at –Ω–µ –¥–æ–±–∞–≤–∏–ª–æ—Å—å"
            
            print("‚úÖ VERIFY: –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # === 5. DELETE - –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===
            print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º DELETE –æ–ø–µ—Ä–∞—Ü–∏—é...")
            
            delete_scenario = {
                "scenario_id": "test_delete",
                "steps": [
                    {
                        "id": "delete_doc",
                        "type": "mongo_delete_one",
                        "params": {
                            "collection": test_collection,
                            "filter": {"_id": test_doc_id},
                            "output_var": "delete_result"
                        }
                    }
                ]
            }
            
            context = {}
            result = await engine.execute_scenario(delete_scenario, context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
            delete_result = context.get("delete_result", {})
            assert delete_result.get("success") == True, f"–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {delete_result}"
            assert delete_result.get("deleted_count") == 1
            
            print(f"‚úÖ DELETE: –î–æ–∫—É–º–µ–Ω—Ç {test_doc_id} —É–¥–∞–ª–µ–Ω")
            
            # === 6. VERIFY DELETE - –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω ===
            print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω...")
            
            context = {}
            result = await engine.execute_scenario(read_scenario, context)
            
            read_result = context.get("read_result", {})
            assert read_result.get("success") == True, "–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
            assert read_result.get("document") is None, "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω"
            
            print("‚úÖ VERIFY DELETE: –î–æ–∫—É–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            raise
        
        finally:
            # –û—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è
            try:
                await mongo_plugin._delete_one(test_collection, {"_id": test_doc_id})
            except:
                pass
    
    @pytest.mark.asyncio
    async def test_mongo_bulk_operations(self, engine_with_mongo):
        """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        engine, mongo_plugin = engine_with_mongo
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        health = await mongo_plugin.healthcheck()
        if not health:
            pytest.skip("MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        test_collection = "test_bulk_operations"
        test_prefix = f"bulk_test_{datetime.now().timestamp()}"
        
        try:
            # === 1. BULK INSERT - –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ ===
            print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤—É—é –≤—Å—Ç–∞–≤–∫—É...")
            
            documents = [
                {"_id": f"{test_prefix}_{i}", "name": f"Document {i}", "value": i * 10}
                for i in range(1, 6)
            ]
            
            bulk_insert_scenario = {
                "scenario_id": "test_bulk_insert",
                "steps": [
                    {
                        "id": "bulk_insert",
                        "type": "mongo_insert_many",
                        "params": {
                            "collection": test_collection,
                            "documents": documents,
                            "output_var": "bulk_insert_result"
                        }
                    }
                ]
            }
            
            context = {}
            result = await engine.execute_scenario(bulk_insert_scenario, context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏
            bulk_result = context.get("bulk_insert_result", {})
            assert bulk_result.get("success") == True, f"–ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {bulk_result}"
            assert bulk_result.get("inserted_count") == 5
            assert len(bulk_result.get("inserted_ids", [])) == 5
            
            print("‚úÖ BULK INSERT: 5 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ")
            
            # === 2. BULK UPDATE - –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ===
            print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
            
            bulk_update_scenario = {
                "scenario_id": "test_bulk_update",
                "steps": [
                    {
                        "id": "bulk_update",
                        "type": "mongo_update_many",
                        "params": {
                            "collection": test_collection,
                            "filter": {"_id": {"$regex": f"^{test_prefix}"}},
                            "update": {
                                "$set": {"updated": True, "batch": test_prefix},
                                "$inc": {"value": 100}
                            },
                            "output_var": "bulk_update_result"
                        }
                    }
                ]
            }
            
            context = {}
            result = await engine.execute_scenario(bulk_update_scenario, context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_result = context.get("bulk_update_result", {})
            assert update_result.get("success") == True, f"–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {update_result}"
            assert update_result.get("modified_count") == 5
            
            print("‚úÖ BULK UPDATE: 5 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
            # === 3. VERIFY BULK CHANGES - –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è ===
            print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
            
            find_many_scenario = {
                "scenario_id": "test_find_many",
                "steps": [
                    {
                        "id": "find_updated",
                        "type": "mongo_find_many",
                        "params": {
                            "collection": test_collection,
                            "filter": {"_id": {"$regex": f"^{test_prefix}"}},
                            "output_var": "find_result"
                        }
                    }
                ]
            }
            
            context = {}
            result = await engine.execute_scenario(find_many_scenario, context)
            
            find_result = context.get("find_result", {})
            assert find_result.get("success") == True
            
            documents = find_result.get("documents", [])
            assert len(documents) == 5, f"–ù–∞–π–¥–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–æ 5"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
            for doc in documents:
                assert doc.get("updated") == True, f"–î–æ–∫—É–º–µ–Ω—Ç {doc.get('_id')} –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è"
                assert doc.get("batch") == test_prefix, f"Batch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –¥–ª—è {doc.get('_id')}"
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ value —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 100
                original_value = int(doc.get("_id").split("_")[-1]) * 10
                assert doc.get("value") == original_value + 100, f"Value –Ω–µ —É–≤–µ–ª–∏—á–∏–ª—Å—è –¥–ª—è {doc.get('_id')}"
            
            print("‚úÖ VERIFY BULK: –í—Å–µ –º–∞—Å—Å–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å")
            
            # === 4. BULK DELETE - –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ===
            print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ...")
            
            bulk_delete_scenario = {
                "scenario_id": "test_bulk_delete",
                "steps": [
                    {
                        "id": "bulk_delete",
                        "type": "mongo_delete_many",
                        "params": {
                            "collection": test_collection,
                            "filter": {"_id": {"$regex": f"^{test_prefix}"}},
                            "output_var": "bulk_delete_result"
                        }
                    }
                ]
            }
            
            context = {}
            result = await engine.execute_scenario(bulk_delete_scenario, context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            delete_result = context.get("bulk_delete_result", {})
            assert delete_result.get("success") == True, f"–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {delete_result}"
            assert delete_result.get("deleted_count") == 5
            
            print("‚úÖ BULK DELETE: 5 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ")
            
            # === 5. VERIFY BULK DELETE ===
            print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã...")
            
            context = {}
            result = await engine.execute_scenario(find_many_scenario, context)
            
            find_result = context.get("find_result", {})
            documents = find_result.get("documents", [])
            assert len(documents) == 0, f"–ù–∞–π–¥–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0"
            
            print("‚úÖ VERIFY BULK DELETE: –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
            raise
        
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            try:
                await mongo_plugin._delete_many(test_collection, {"_id": {"$regex": f"^{test_prefix}"}})
            except:
                pass


if __name__ == "__main__":
    async def run_tests():
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ MongoDB –æ–ø–µ—Ä–∞—Ü–∏–π...")
        
        test_instance = TestMongoRealOperations()
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —Å MongoDB
        engine = SimpleScenarioEngine()
        mongo_plugin = MongoPlugin()
        
        try:
            await mongo_plugin.initialize()
            engine.register_plugin(mongo_plugin)
            
            print("\n=== –¢–ï–°–¢ CRUD –û–ü–ï–†–ê–¶–ò–ô ===")
            await test_instance.test_mongo_crud_operations((engine, mongo_plugin))
            
            print("\n=== –¢–ï–°–¢ –ú–ê–°–°–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô ===")
            await test_instance.test_mongo_bulk_operations((engine, mongo_plugin))
            
            print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã MongoDB –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏: {e}")
            raise
    
    asyncio.run(run_tests()) 