#!/usr/bin/env python3
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ API –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –±–µ–∑ –º–æ–∫–æ–≤!
"""

import sys
import asyncio
import json
import time
from pathlib import Path
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.append(str(Path(__file__).parent / 'kittycore'))

class FixedToolsTester:
    def __init__(self):
        self.results = []
        self.memory_records = []
        self.missing_keys = []
        
    async def test_api_request_tool(self):
        """–¢–µ—Å—Ç ApiRequestTool - —Ä–∞–±–æ—Ç–∞–µ—Ç!"""
        from kittycore.tools import ApiRequestTool
        
        start_time = time.time()
        try:
            tool = ApiRequestTool()
            result = tool.execute(url="https://httpbin.org/get", method="GET")
            execution_time = time.time() - start_time
            
            if result.success:
                response_size = len(str(result.data))
                notes = f"‚úÖ –í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä: {response_size} –±–∞–π—Ç"
                success = True
                
                self.memory_records.append({
                    "tool": "api_request_tool",
                    "working_action": "request",
                    "correct_params": {"url": "string", "method": "GET|POST|PUT|DELETE"},
                    "notes": notes,
                    "success": True
                })
            else:
                notes = f"‚ùå –û—à–∏–±–∫–∞: {result.error}"
                success = False
                
        except Exception as e:
            execution_time = time.time() - start_time
            notes = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}"
            success = False
            
        self.results.append({
            "tool": "api_request_tool",
            "success": success,
            "notes": notes,
            "execution_time": execution_time
        })
        
        print(f"üîß api_request_tool: {notes}")
    
    async def test_super_system_tool(self):
        """–¢–µ—Å—Ç SuperSystemTool —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        from kittycore.tools import SuperSystemTool
        
        start_time = time.time()
        try:
            tool = SuperSystemTool()
            result = tool.execute(action="get_system_info")  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            execution_time = time.time() - start_time
            
            if result.success:
                response_size = len(str(result.data))
                notes = f"‚úÖ –í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä: {response_size} –±–∞–π—Ç"
                success = True
                
                self.memory_records.append({
                    "tool": "super_system_tool",
                    "working_action": "get_system_info",
                    "correct_params": {"action": "get_system_info|get_processes|get_resource_usage"},
                    "notes": notes,
                    "success": True
                })
            else:
                notes = f"‚ùå –û—à–∏–±–∫–∞: {result.error}"
                success = False
                
        except Exception as e:
            execution_time = time.time() - start_time
            notes = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}"
            success = False
            
        self.results.append({
            "tool": "super_system_tool",
            "success": success,
            "notes": notes,
            "execution_time": execution_time
        })
        
        print(f"üîß super_system_tool: {notes}")
    
    async def test_computer_use_tool(self):
        """–¢–µ—Å—Ç ComputerUseTool"""
        from kittycore.tools import ComputerUseTool
        
        start_time = time.time()
        try:
            tool = ComputerUseTool()
            # ComputerUseTool –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç action –≤ execute()
            result = tool.take_screenshot()
            execution_time = time.time() - start_time
            
            if result.success:
                response_size = len(str(result.data))
                notes = f"‚úÖ –í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä: {response_size} –±–∞–π—Ç"
                success = True
                
                self.memory_records.append({
                    "tool": "computer_use_tool",
                    "working_action": "take_screenshot",
                    "correct_params": {"method": "take_screenshot()"},
                    "notes": notes,
                    "success": True
                })
            else:
                notes = f"‚ùå –û—à–∏–±–∫–∞: {result.error}"
                success = False
                
        except Exception as e:
            execution_time = time.time() - start_time
            notes = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}"
            success = False
            
        self.results.append({
            "tool": "computer_use_tool",
            "success": success,
            "notes": notes,
            "execution_time": execution_time
        })
        
        print(f"üîß computer_use_tool: {notes}")
    
    async def test_database_tool(self):
        """–¢–µ—Å—Ç DatabaseTool —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        from kittycore.tools import DatabaseTool
        
        start_time = time.time()
        try:
            tool = DatabaseTool()
            # DatabaseTool —Ç—Ä–µ–±—É–µ—Ç query –≤ execute()
            result = tool.execute("SELECT 1 as test")  # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            execution_time = time.time() - start_time
            
            if result.success:
                response_size = len(str(result.data))
                notes = f"‚úÖ –í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä: {response_size} –±–∞–π—Ç"
                success = True
                
                self.memory_records.append({
                    "tool": "database_tool",
                    "working_action": "execute_query",
                    "correct_params": {"query": "SQL string"},
                    "notes": notes,
                    "success": True
                })
            else:
                notes = f"‚ùå –û—à–∏–±–∫–∞: {result.error}"
                success = False
                
        except Exception as e:
            execution_time = time.time() - start_time
            notes = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}"
            success = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ database
            if "database" in str(e).lower() or "connection" in str(e).lower():
                self.missing_keys.append({
                    "tool": "database_tool",
                    "error": str(e),
                    "likely_missing_key": "DATABASE_URL –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"
                })
            
        self.results.append({
            "tool": "database_tool",
            "success": success,
            "notes": notes,
            "execution_time": execution_time
        })
        
        print(f"üîß database_tool: {notes}")
    
    async def test_email_tool(self):
        """–¢–µ—Å—Ç EmailTool —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        from kittycore.tools import EmailTool
        
        start_time = time.time()
        try:
            tool = EmailTool()
            # EmailTool —Ç—Ä–µ–±—É–µ—Ç to, subject, body
            result = tool.execute(
                to="test@example.com",
                subject="–¢–µ—Å—Ç KittyCore", 
                body="–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ"
            )
            execution_time = time.time() - start_time
            
            if result.success:
                response_size = len(str(result.data))
                notes = f"‚úÖ –í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä: {response_size} –±–∞–π—Ç"
                success = True
                
                self.memory_records.append({
                    "tool": "email_tool",
                    "working_action": "send_email",
                    "correct_params": {"to": "string", "subject": "string", "body": "string"},
                    "notes": notes,
                    "success": True
                })
            else:
                notes = f"‚ùå –û—à–∏–±–∫–∞: {result.error}"
                success = False
                
        except Exception as e:
            execution_time = time.time() - start_time
            notes = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}"
            success = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ email –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if any(word in str(e).lower() for word in ["smtp", "email", "password", "auth"]):
                self.missing_keys.append({
                    "tool": "email_tool",
                    "error": str(e),
                    "likely_missing_key": "EMAIL_PASSWORD, SMTP_SERVER –∏–ª–∏ email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                })
            
        self.results.append({
            "tool": "email_tool",
            "success": success,
            "notes": notes,
            "execution_time": execution_time
        })
        
        print(f"üîß email_tool: {notes}")
    
    async def test_telegram_tool(self):
        """–¢–µ—Å—Ç TelegramTool"""
        from kittycore.tools import TelegramTool
        
        start_time = time.time()
        try:
            tool = TelegramTool()
            result = tool.execute(
                chat_id="@test_channel",
                message="–¢–µ—Å—Ç KittyCore"
            )
            execution_time = time.time() - start_time
            
            if result.success:
                response_size = len(str(result.data))
                notes = f"‚úÖ –í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä: {response_size} –±–∞–π—Ç"
                success = True
                
                self.memory_records.append({
                    "tool": "telegram_tool",
                    "working_action": "send_message",
                    "correct_params": {"chat_id": "string", "message": "string"},
                    "notes": notes,
                    "success": True
                })
            else:
                notes = f"‚ùå –û—à–∏–±–∫–∞: {result.error}"
                success = False
                
        except Exception as e:
            execution_time = time.time() - start_time
            notes = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}"
            success = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if any(word in str(e).lower() for word in ["telegram", "bot", "token", "pyrogram"]):
                self.missing_keys.append({
                    "tool": "telegram_tool",
                    "error": str(e),
                    "likely_missing_key": "TELEGRAM_BOT_TOKEN + pip install pyrogram"
                })
            
        self.results.append({
            "tool": "telegram_tool",
            "success": success,
            "notes": notes,
            "execution_time": execution_time
        })
        
        print(f"üîß telegram_tool: {notes}")
    
    async def test_ai_integration_tool(self):
        """–¢–µ—Å—Ç AIIntegrationTool - –ø—Ä–æ–≤–µ—Ä—è–µ–º async"""
        from kittycore.tools import AIIntegrationTool
        
        start_time = time.time()
        try:
            tool = AIIntegrationTool()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π async –≤—ã–∑–æ–≤
            result = await tool.execute(action="list_models")
            execution_time = time.time() - start_time
            
            if result.success:
                response_size = len(str(result.data))
                notes = f"‚úÖ –í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä: {response_size} –±–∞–π—Ç"
                success = True
                
                self.memory_records.append({
                    "tool": "ai_integration_tool",
                    "working_action": "list_models",
                    "correct_params": {"action": "list_models"},
                    "notes": notes,
                    "success": True
                })
            else:
                notes = f"‚ùå –û—à–∏–±–∫–∞: {result.error}"
                success = False
                
        except Exception as e:
            execution_time = time.time() - start_time
            notes = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}"
            success = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ API –∫–ª—é—á–µ–π
            if any(word in str(e).lower() for word in ["api", "key", "token", "openrouter"]):
                self.missing_keys.append({
                    "tool": "ai_integration_tool",
                    "error": str(e),
                    "likely_missing_key": "OPENROUTER_API_KEY"
                })
            
        self.results.append({
            "tool": "ai_integration_tool",
            "success": success,
            "notes": notes,
            "execution_time": execution_time
        })
        
        print(f"üîß ai_integration_tool: {notes}")
        
    async def run_fixed_tests(self):
        """–ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        
        print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0")
        print("=" * 70)
        print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ API –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
        print("üö´ –ë–µ–∑ –º–æ–∫–æ–≤, —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã")
        print()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        await self.test_api_request_tool()
        await self.test_super_system_tool()
        await self.test_computer_use_tool()
        await self.test_database_tool()
        await self.test_email_tool()
        await self.test_telegram_tool()
        await self.test_ai_integration_tool()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._print_results()
        self._save_results()
    
    def _print_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        print("\n" + "=" * 70)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 70)
        
        total_tests = len(self.results)
        successful_tests = len([r for r in self.results if r["success"]])
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"üéØ –û–±—â–∏–π —É—Å–ø–µ—Ö: {successful_tests}/{total_tests} = {success_rate:.1f}%")
        
        # –£—Å–ø–µ—à–Ω—ã–µ
        successful = [r for r in self.results if r["success"]]
        if successful:
            print(f"\n‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ({len(successful)}):")
            for result in successful:
                print(f"   üîß {result['tool']}: {result['notes']}")
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ
        failed = [r for r in self.results if not r["success"]]
        if failed:
            print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ({len(failed)}):")
            for result in failed:
                print(f"   üîß {result['tool']}: {result['notes']}")
        
        # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
        if self.missing_keys:
            print(f"\nüîë –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï API –ö–õ–Æ–ß–ò ({len(self.missing_keys)}):")
            for missing in self.missing_keys:
                print(f"   üîß {missing['tool']}: {missing['likely_missing_key']}")
    
    def _save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        Path("test_tools_fixed_api").mkdir(exist_ok=True)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open("test_tools_fixed_api/results.json", 'w', encoding='utf-8') as f:
            json.dump({
                "summary": {
                    "total_tests": len(self.results),
                    "successful_tests": len([r for r in self.results if r["success"]]),
                    "success_rate": (len([r for r in self.results if r["success"]]) / len(self.results) * 100) if self.results else 0
                },
                "results": self.results,
                "missing_keys": self.missing_keys
            }, f, ensure_ascii=False, indent=2)
        
        # –ó–∞–ø–∏—Å–∏ –¥–ª—è –ø–∞–º—è—Ç–∏
        with open("test_tools_fixed_api/memory_records.json", 'w', encoding='utf-8') as f:
            json.dump(self.memory_records, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_tools_fixed_api/")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FixedToolsTester()
    await tester.run_fixed_tests()

if __name__ == "__main__":
    asyncio.run(main()) 