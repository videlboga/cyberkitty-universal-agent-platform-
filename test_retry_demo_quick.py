#!/usr/bin/env python3
"""
üîÑ –ë—ã—Å—Ç—Ä—ã–π –¥–µ–º–æ retry –ª–æ–≥–∏–∫–∏ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–µ
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig

async def test_retry_demo():
    """–î–µ–º–æ retry –º–µ—Ö–∞–Ω–∏–∑–º–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–µ"""
    
    print("üîÑ === DEMO RETRY –õ–û–ì–ò–ö–ò ===")
    print("üéØ –ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤")
    print("üîÑ –ú–µ—Ö–∞–Ω–∏–∑–º: –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π\n")
    
    # –ü—Ä–æ—Å—Ç–∞—è –Ω–æ —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞
    task = "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello.py —Å print('Hello World'), —Ñ–∞–π–ª config.json —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ —Ñ–∞–π–ª readme.md —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞"
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = UnifiedConfig(
        vault_path="./vault_retry_demo",
        enable_amem_memory=True,
        enable_smart_validation=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        max_agents=1
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = UnifiedOrchestrator(config)
    print(f"üß† A-MEM: {type(orchestrator.amem_system).__name__}")
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ - —Ç—Ä–µ–±—É–µ–º –≤—Å–µ 3 —Ñ–∞–π–ª–∞
    success_criteria = {
        "min_files": 3,  # –†–æ–≤–Ω–æ 3 —Ñ–∞–π–ª–∞
        "required_files": ["hello.py", "config.json", "readme.md"],
        "min_quality": 0.6
    }
    
    max_attempts = 3
    attempt = 1
    best_result = None
    
    while attempt <= max_attempts:
        print(f"\nüîÑ === –ü–û–ü–´–¢–ö–ê {attempt}/{max_attempts} ===")
        start_time = datetime.now()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º A-MEM
            if orchestrator.amem_system and attempt > 1:
                try:
                    memories = await orchestrator.amem_system.search_memories("—Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ hello config", limit=3)
                    print(f"üß† A-MEM: {len(memories)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                    
                    if memories:
                        print("üí° –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –æ–ø—ã—Ç:")
                        for i, memory in enumerate(memories[:1], 1):
                            preview = memory.get('content', '')[:80] + "..."
                            print(f"   {i}. {preview}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è A-MEM –æ—à–∏–±–∫–∞: {e}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            print(f"üöÄ –ó–∞–ø—É—Å–∫...")
            result = await orchestrator.solve_task(task)
            
            execution_time = (datetime.now() - start_time).total_seconds()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            files_created = result.get('files_created', [])
            quality_score = result.get('quality_score', 0.0)
            status = result.get('status', 'unknown')
            
            print(f"\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {execution_time:.1f}—Å")
            print(f"   üìÅ –§–∞–π–ª–æ–≤: {len(files_created)}")
            print(f"   üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f}")
            print(f"   üìù –°—Ç–∞—Ç—É—Å: {status}")
            
            if files_created:
                print(f"   üìÇ –§–∞–π–ª—ã:")
                for file_path in files_created:
                    print(f"      - {file_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            files_count_ok = len(files_created) >= success_criteria['min_files']
            quality_ok = quality_score >= success_criteria['min_quality']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            files_match = 0
            for req_file in success_criteria['required_files']:
                for created_file in files_created:
                    if req_file in created_file:
                        files_match += 1
                        break
            
            files_match_ok = files_match >= len(success_criteria['required_files'])
            
            print(f"\nüîç === –ü–†–û–í–ï–†–ö–ê ===")
            print(f"   üìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {len(files_created)}/{success_criteria['min_files']} {'‚úÖ' if files_count_ok else '‚ùå'}")
            print(f"   üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f}/{success_criteria['min_quality']} {'‚úÖ' if quality_ok else '‚ùå'}")
            print(f"   üìù –ù—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã: {files_match}/{len(success_criteria['required_files'])} {'‚úÖ' if files_match_ok else '‚ùå'}")
            
            is_success = files_count_ok and quality_ok and files_match_ok
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if best_result is None or len(files_created) > len(best_result.get('files_created', [])):
                best_result = result
            
            if is_success:
                print(f"\nüéâ === –£–°–ü–ï–• –ù–ê –ü–û–ü–´–¢–ö–ï {attempt}! ===")
                print("‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –æ–ø—ã—Ç
                if orchestrator.amem_system:
                    try:
                        memories = await orchestrator.amem_system.search_memories("—Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω–∏–µ", limit=5)
                        print(f"üß† A-MEM –Ω–∞–∫–æ–ø–∏–ª: {len(memories)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                    except Exception as e:
                        print(f"‚ö†Ô∏è A-MEM: {e}")
                
                return result
            
            else:
                print(f"\n‚ö†Ô∏è === –ü–û–ü–´–¢–ö–ê {attempt} –ù–ï–ü–û–õ–ù–ê–Ø ===")
                
                issues = []
                if not files_count_ok:
                    issues.append(f"–ú–∞–ª–æ —Ñ–∞–π–ª–æ–≤ ({len(files_created)} < {success_criteria['min_files']})")
                if not quality_ok:
                    issues.append(f"–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ ({quality_score:.2f} < {success_criteria['min_quality']})")
                if not files_match_ok:
                    issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã ({files_match} –∏–∑ {len(success_criteria['required_files'])})")
                
                print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã:")
                for issue in issues:
                    print(f"   - {issue}")
                
                if attempt < max_attempts:
                    print(f"\nüîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}...")
                    print("üí° A-MEM —Å–æ—Ö—Ä–∞–Ω–∏—Ç –æ–ø—ã—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
                    await asyncio.sleep(2)
                else:
                    print(f"\n‚ùå === –ü–û–ü–´–¢–ö–ò –ò–°–ß–ï–†–ü–ê–ù–´ ===")
                    print("üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    return best_result
        
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {e}")
            if attempt < max_attempts:
                print(f"üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑...")
                await asyncio.sleep(1)
            else:
                return {"success": False, "error": str(e)}
        
        attempt += 1
    
    print("\n‚ùå –¶–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞")
    return best_result or {"success": False}

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ DEMO retry –ª–æ–≥–∏–∫–∏...")
    result = asyncio.run(test_retry_demo())
    
    print(f"\nüèÅ === –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
    print(f"‚úÖ –£—Å–ø–µ—Ö: {result.get('success', False)}")
    print(f"üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(result.get('files_created', []))}")
    print(f"üéØ –ò—Ç–æ–≥–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {result.get('quality_score', 0.0):.2f}")
    print("\nüéâ Retry –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!") 