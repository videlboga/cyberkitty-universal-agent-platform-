"""
ObsidianAdapter - –≥–ª–∞–≤–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ KittyCore —Å Obsidian
"""

import os
import json
import asyncio
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
from loguru import logger

from .note_manager import NoteManager
from .metadata_manager import MetadataManager
from .link_manager import LinkManager
from .code_executor import CodeExecutor
from .graph_updater import GraphUpdater


@dataclass
class ObsidianConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Obsidian"""
    vault_path: str
    notes_folder: str = "KittyCore"
    agents_folder: str = "Agents" 
    tasks_folder: str = "Tasks"
    results_folder: str = "Results"
    reports_folder: str = "Reports"
    auto_link: bool = True
    execute_code: bool = True
    create_graph: bool = True


class ObsidianAdapter:
    """
    –ì–ª–∞–≤–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ KittyCore —Å Obsidian
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫—É
    - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –∑–∞–º–µ—Ç–∫–∞—Ö
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –∞–≥–µ–Ω—Ç–∞–º–∏
    """
    
    def __init__(self, config: ObsidianConfig):
        self.config = config
        self.vault_path = Path(config.vault_path)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.note_manager = NoteManager(self.vault_path, config)
        self.metadata_manager = MetadataManager()
        self.link_manager = LinkManager(self.vault_path)
        self.code_executor = CodeExecutor()
        self.graph_updater = GraphUpdater(self.vault_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
        self._setup_vault_structure()
        
        logger.info(f"üîó ObsidianAdapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è vault: {self.vault_path}")
    
    def _setup_vault_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –≤ Obsidian vault"""
        folders = [
            self.config.notes_folder,
            f"{self.config.notes_folder}/{self.config.agents_folder}",
            f"{self.config.notes_folder}/{self.config.tasks_folder}",
            f"{self.config.notes_folder}/{self.config.results_folder}",
            f"{self.config.notes_folder}/{self.config.reports_folder}",
        ]
        
        for folder in folders:
            folder_path = self.vault_path / folder
            folder_path.mkdir(parents=True, exist_ok=True)
            logger.debug(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_path}")
    
    async def create_agent_note(self, agent_name: str, agent_data: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∞–≥–µ–Ω—Ç–∞
        
        Args:
            agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
            agent_data: –î–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–µ
        """
        metadata = self.metadata_manager.create_agent_metadata(agent_name, agent_data)
        
        content = f"""# {agent_name}

## –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
{agent_data.get('description', '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç')}

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
{self._format_capabilities(agent_data.get('capabilities', []))}

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –°–æ–∑–¥–∞–Ω: {metadata['created']}
- –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {agent_data.get('tasks_completed', 0)}
- –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {agent_data.get('success_rate', 0)}%

## –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
- –ó–∞–¥–∞—á–∏: [[{self.config.tasks_folder}]]
- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: [[{self.config.results_folder}]]

## –¢–µ–≥–∏
{self._format_tags(['agent', agent_name.lower(), agent_data.get('type', 'general')])}
"""
        
        note_path = await self.note_manager.create_note(
            folder=self.config.agents_folder,
            filename=f"{agent_name}-Agent",
            content=content,
            metadata=metadata
        )
        
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ –∞–≥–µ–Ω—Ç–∞: {note_path}")
        return note_path
    
    async def create_task_note(self, task_id: str, task_data: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            task_data: –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–µ
        """
        metadata = self.metadata_manager.create_task_metadata(task_id, task_data)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∞ —Å –∞–≥–µ–Ω—Ç–∞–º–∏
        agent_links = ""
        if 'assigned_agents' in task_data:
            agent_links = "\n".join([
                f"- [[{agent}-Agent]]" 
                for agent in task_data['assigned_agents']
            ])
        
        content = f"""# –ó–∞–¥–∞—á–∞: {task_data.get('title', task_id)}

## –û–ø–∏—Å–∞–Ω–∏–µ
{task_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}

## –°—Ç–∞—Ç—É—Å
**–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:** {task_data.get('status', 'pending')}

## –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
{agent_links}

## –ö–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
```python
# –ö–æ–¥ –∞–≥–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∑–¥–µ—Å—å
{task_data.get('code', '# –ö–æ–¥ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω')}
```

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≥–µ–Ω—Ç–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*

## –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: [[–†–µ–∑—É–ª—å—Ç–∞—Ç-{task_id}]]
- –û—Ç—á—ë—Ç: [[–û—Ç—á—ë—Ç-{task_id}]]

## –¢–µ–≥–∏
{self._format_tags(['task', task_data.get('type', 'general'), task_data.get('status', 'pending')])}
"""
        
        note_path = await self.note_manager.create_note(
            folder=self.config.tasks_folder,
            filename=f"–ó–∞–¥–∞—á–∞-{task_id}",
            content=content,
            metadata=metadata
        )
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∞
        if self.config.auto_link:
            await self.link_manager.auto_link_note(note_path)
        
        logger.info(f"üìã –°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏: {note_path}")
        return note_path
    
    async def create_result_note(self, task_id: str, agent_name: str, result_data: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        
        Args:
            task_id: ID —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
            agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
            result_data: –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–µ
        """
        metadata = self.metadata_manager.create_result_metadata(task_id, agent_name, result_data)
        
        content = f"""# –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_data.get('title', f'–ó–∞–¥–∞—á–∞ {task_id}')}

**–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–º:** [[{agent_name}-Agent]]  
**–ó–∞–¥–∞—á–∞:** [[–ó–∞–¥–∞—á–∞-{task_id}]]  
**–°—Ç–∞—Ç—É—Å:** {result_data.get('status', 'completed')}

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

{result_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')}

## –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∫–æ–¥
```python
{result_data.get('code', '# –ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è')}
```

## –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
```
{result_data.get('output', '–í—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç')}
```

## –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
{self._format_file_links(result_data.get('files', []))}

## –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
- **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {result_data.get('success', False)}
- **–ö–∞—á–µ—Å—Ç–≤–æ:** {result_data.get('quality_score', 0)}/10
- **–ó–∞–º–µ—á–∞–Ω–∏—è:** {result_data.get('notes', '–ù–µ—Ç –∑–∞–º–µ—á–∞–Ω–∏–π')}

## Peer Review
- **–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:** [[{result_data.get('reviewed_by', '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ')}]]
- **–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:** {result_data.get('review_status', '–û–∂–∏–¥–∞–µ—Ç')}

## –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
- –ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞: [[–ó–∞–¥–∞—á–∞-{task_id}]]
- –ê–≥–µ–Ω—Ç-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: [[{agent_name}-Agent]]
- –û—Ç—á—ë—Ç: [[–û—Ç—á—ë—Ç-{task_id}]]

## –¢–µ–≥–∏
{self._format_tags(['result', agent_name.lower(), result_data.get('type', 'general')])}
"""
        
        note_path = await self.note_manager.create_note(
            folder=self.config.results_folder,
            filename=f"–†–µ–∑—É–ª—å—Ç–∞—Ç-{task_id}-{agent_name}",
            content=content,
            metadata=metadata
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        await self._update_task_with_result(task_id, note_path)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {note_path}")
        return note_path
    
    async def create_report_note(self, task_id: str, report_data: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            report_data: –î–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–µ
        """
        metadata = self.metadata_manager.create_report_metadata(task_id, report_data)
        
        # –°–±–æ—Ä –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_section = await self._collect_task_results(task_id)
        
        content = f"""# –û—Ç—á—ë—Ç: {report_data.get('title', f'–ó–∞–¥–∞—á–∞ {task_id}')}

**–ó–∞–¥–∞—á–∞:** [[–ó–∞–¥–∞—á–∞-{task_id}]]  
**–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {report_data.get('completed_at', datetime.now().isoformat())}  
**–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:** {report_data.get('status', 'completed')}

## –°–≤–æ–¥–∫–∞
{report_data.get('summary', '–°–≤–æ–¥–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}

## –£—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏–µ –∞–≥–µ–Ω—Ç—ã
{self._format_agent_summary(report_data.get('agents', []))}

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∞–≥–µ–Ω—Ç–∞–º
{results_section}

## –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
- **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {report_data.get('overall_success', False)}
- **–ö–∞—á–µ—Å—Ç–≤–æ:** {report_data.get('overall_quality', 0)}/10
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {report_data.get('execution_time', 'N/A')}

## –ì—Ä–∞—Ñ —Å–≤—è–∑–µ–π
![[–ì—Ä–∞—Ñ-{task_id}.png]]

## –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
{report_data.get('conclusions', '–í—ã–≤–æ–¥—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã')}

## –¢–µ–≥–∏
{self._format_tags(['report', 'completed', report_data.get('type', 'general')])}
"""
        
        note_path = await self.note_manager.create_note(
            folder=self.config.reports_folder,
            filename=f"–û—Ç—á—ë—Ç-{task_id}",
            content=content,
            metadata=metadata
        )
        
        logger.info(f"üìä –°–æ–∑–¥–∞–Ω –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç: {note_path}")
        return note_path
    
    async def execute_code_in_note(self, note_path: str) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –∑–∞–º–µ—Ç–∫–µ Obsidian
        
        Args:
            note_path: –ü—É—Ç—å –∫ –∑–∞–º–µ—Ç–∫–µ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if not self.config.execute_code:
            return {"status": "disabled", "message": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ"}
        
        return await self.code_executor.execute_note_code(note_path)
    
    async def update_note_metadata(self, note_path: str, metadata: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–∫–∏
        
        Args:
            note_path: –ü—É—Ç—å –∫ –∑–∞–º–µ—Ç–∫–µ
            metadata: –ù–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        return await self.note_manager.update_metadata(note_path, metadata)
    
    async def get_graph_data(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–µ–π
        
        Returns:
            –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞
        """
        return await self.link_manager.get_graph_data()
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    def _format_capabilities(self, capabilities: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        if not capabilities:
            return "- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
        return "\n".join([f"- {cap}" for cap in capabilities])
    
    def _format_tags(self, tags: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–æ–≤"""
        return " ".join([f"#{tag}" for tag in tags])
    
    def _format_file_links(self, files: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª—ã"""
        if not files:
            return "*–§–∞–π–ª–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ*"
        return "\n".join([f"- [[{file}]]" for file in files])
    
    def _format_agent_summary(self, agents: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –∞–≥–µ–Ω—Ç–∞–º"""
        if not agents:
            return "*–ê–≥–µ–Ω—Ç—ã –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏*"
        
        lines = []
        for agent in agents:
            name = agent.get('name', 'Unknown')
            tasks = agent.get('tasks_completed', 0)
            success = agent.get('success_rate', 0)
            lines.append(f"- [[{name}-Agent]]: {tasks} –∑–∞–¥–∞—á, {success}% —É—Å–ø–µ—Ö–∞")
        
        return "\n".join(lines)
    
    async def _update_task_with_result(self, task_id: str, result_path: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"""
        task_path = self.vault_path / self.config.notes_folder / self.config.tasks_folder / f"–ó–∞–¥–∞—á–∞-{task_id}.md"
        if task_path.exists():
            await self.note_manager.append_to_note(
                str(task_path), 
                f"\n- [[{Path(result_path).stem}]]"
            )
    
    async def _collect_task_results(self, task_id: str) -> str:
        """–°–±–æ—Ä –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞—á–∏"""
        results_folder = self.vault_path / self.config.notes_folder / self.config.results_folder
        result_files = list(results_folder.glob(f"–†–µ–∑—É–ª—å—Ç–∞—Ç-{task_id}-*.md"))
        
        if not result_files:
            return "*–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*"
        
        lines = []
        for result_file in result_files:
            agent_name = result_file.stem.split('-')[-1]
            lines.append(f"- [[{result_file.stem}]] (–∞–≥–µ–Ω—Ç: [[{agent_name}-Agent]])")
        
        return "\n".join(lines) 