#!/usr/bin/env python3
"""
üîç –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ë–û–¢–ê –ö –ö–ê–ù–ê–õ–ê–ú
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
"""

import asyncio
import json
from datetime import datetime
import aiohttp
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("logs/bot_access_check.log", 
          format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | BOT_ACCESS | {message}",
          level="INFO", rotation="10 MB", compression="zip")

class BotAccessChecker:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –±–æ—Ç–∞ –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º –∏ —á–∞—Ç–∞–º."""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        
        logger.info("üîç Bot Access Checker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    async def get_me(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ."""
        
        url = f"{self.base_url}/getMe"
        
        logger.info("ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    result = await response.json()
                    
                    if result.get('ok'):
                        bot_info = result.get('result', {})
                        logger.info(f"‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @{bot_info.get('username', 'unknown')}")
                        logger.info(f"   ID: {bot_info.get('id')}")
                        logger.info(f"   –ò–º—è: {bot_info.get('first_name', 'unknown')}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {result.get('description')}")
                    
                    return result
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {str(e)}")
            return {"error": str(e)}
    
    async def get_updates(self, limit: int = 100) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        
        url = f"{self.base_url}/getUpdates"
        
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {limit} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        
        try:
            async with aiohttp.ClientSession() as session:
                params = {
                    "limit": limit,
                    "timeout": 10
                }
                
                async with session.get(url, params=params) as response:
                    result = await response.json()
                    
                    if result.get('ok'):
                        updates = result.get('result', [])
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(updates)}")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç—ã
                        chats = {}
                        for update in updates:
                            message = update.get('message', {})
                            chat = message.get('chat', {})
                            
                            if chat:
                                chat_id = chat.get('id')
                                if chat_id not in chats:
                                    chats[chat_id] = {
                                        "id": chat_id,
                                        "type": chat.get('type'),
                                        "title": chat.get('title', chat.get('first_name', 'Unknown')),
                                        "username": chat.get('username'),
                                        "message_count": 0
                                    }
                                chats[chat_id]["message_count"] += 1
                        
                        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(chats)}")
                        for chat_id, chat_info in chats.items():
                            logger.info(f"   {chat_id}: {chat_info['title']} ({chat_info['type']}) - {chat_info['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π")
                        
                        result['analyzed_chats'] = chats
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {result.get('description')}")
                    
                    return result
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
            return {"error": str(e)}
    
    async def try_channel_access(self, channel_id: str) -> dict:
        """–ü—Ä–æ–±—É–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É."""
        
        logger.info(f"üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {channel_id}")
        
        results = {}
        
        # 1. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        try:
            url = f"{self.base_url}/getChat"
            async with aiohttp.ClientSession() as session:
                params = {"chat_id": channel_id}
                async with session.get(url, params=params) as response:
                    chat_info = await response.json()
                    results['chat_info'] = chat_info
                    
                    if chat_info.get('ok'):
                        logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ –ø–æ–ª—É—á–µ–Ω–∞")
                        chat_data = chat_info.get('result', {})
                        logger.info(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_data.get('title', 'Unknown')}")
                        logger.info(f"   –¢–∏–ø: {chat_data.get('type', 'Unknown')}")
                        logger.info(f"   Username: @{chat_data.get('username', 'None')}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {chat_info.get('description')}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {str(e)}")
            results['chat_info'] = {"error": str(e)}
        
        # 2. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        try:
            url = f"{self.base_url}/getChatMemberCount"
            async with aiohttp.ClientSession() as session:
                params = {"chat_id": channel_id}
                async with session.get(url, params=params) as response:
                    member_count = await response.json()
                    results['member_count'] = member_count
                    
                    if member_count.get('ok'):
                        count = member_count.get('result', 0)
                        logger.info(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: {count}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count.get('description')}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {str(e)}")
            results['member_count'] = {"error": str(e)}
        
        # 3. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
        try:
            url = f"{self.base_url}/getChatMember"
            bot_info = await self.get_me()
            if bot_info.get('ok'):
                bot_id = bot_info.get('result', {}).get('id')
                
                async with aiohttp.ClientSession() as session:
                    params = {"chat_id": channel_id, "user_id": bot_id}
                    async with session.get(url, params=params) as response:
                        member_status = await response.json()
                        results['bot_status'] = member_status
                        
                        if member_status.get('ok'):
                            status_data = member_status.get('result', {})
                            status = status_data.get('status', 'unknown')
                            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ: {status}")
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {member_status.get('description')}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {str(e)}")
            results['bot_status'] = {"error": str(e)}
        
        return results
    
    async def check_webhook_info(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook."""
        
        url = f"{self.base_url}/getWebhookInfo"
        
        logger.info("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    result = await response.json()
                    
                    if result.get('ok'):
                        webhook_info = result.get('result', {})
                        webhook_url = webhook_info.get('url', '')
                        
                        if webhook_url:
                            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                        else:
                            logger.info("‚ÑπÔ∏è Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (polling —Ä–µ–∂–∏–º)")
                        
                        logger.info(f"   Pending updates: {webhook_info.get('pending_update_count', 0)}")
                        
                        if webhook_info.get('last_error_date'):
                            logger.warning(f"‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {webhook_info.get('last_error_message')}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {result.get('description')}")
                    
                    return result
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ webhook –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
            return {"error": str(e)}

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –±–æ—Ç–∞."""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ë–û–¢–ê –ö –ö–ê–ù–ê–õ–ê–ú")
    print("="*50)
    
    bot_token = "7907324843:AAFjN2H4ud2X6rm7XShrmS3G1l1JnCo4feM"
    target_channel = "-1002614708769"
    
    checker = BotAccessChecker(bot_token)
    
    print(f"ü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞: {bot_token[:10]}...")
    print(f"üéØ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {target_channel}")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    print("\nü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:")
    bot_info = await checker.get_me()
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã
    print("\nüì• –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤:")
    updates_info = await checker.get_updates()
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ü–µ–ª–µ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
    print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {target_channel}:")
    channel_access = await checker.try_channel_access(target_channel)
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
    print("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook:")
    webhook_info = await checker.check_webhook_info()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    all_results = {
        "bot_info": bot_info,
        "updates_info": updates_info,
        "channel_access": channel_access,
        "webhook_info": webhook_info,
        "timestamp": datetime.now().isoformat()
    }
    
    with open("logs/bot_full_access_check.json", "w", encoding="utf-8") as f:
        json.dump(all_results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ logs/bot_full_access_check.json")
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    print("\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
    print("="*30)
    
    if bot_info.get('ok'):
        bot_data = bot_info.get('result', {})
        print(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{bot_data.get('username', 'unknown')}")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º")
    
    if updates_info.get('ok'):
        chats = updates_info.get('analyzed_chats', {})
        print(f"üì± –î–æ—Å—Ç—É–ø–Ω–æ —á–∞—Ç–æ–≤: {len(chats)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
        channels = {k: v for k, v in chats.items() if v.get('type') in ['channel', 'supergroup']}
        if channels:
            print("üì∫ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã:")
            for chat_id, chat_info in channels.items():
                print(f"   {chat_id}: {chat_info['title']} ({chat_info['type']})")
        else:
            print("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    channel_accessible = channel_access.get('chat_info', {}).get('ok', False)
    print(f"üéØ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ –î–∞' if channel_accessible else '‚ùå –ù–µ—Ç'}")
    
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(main()) 