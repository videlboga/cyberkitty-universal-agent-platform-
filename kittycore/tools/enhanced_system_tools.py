"""
Enhanced System Tools –¥–ª—è KittyCore 3.0
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (CPU, –ø–∞–º—è—Ç—å, –¥–∏—Å–∫)
- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤  
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
- Healthcheck –æ–ø–µ—Ä–∞—Ü–∏–∏
"""

import os
import platform
import tempfile
import shutil
from pathlib import Path
from typing import Dict, List, Optional, Any
import logging
from loguru import logger

from .base_tool import Tool, ToolResult

try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False
    logger.warning("psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")


class EnhancedSystemTool(Tool):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
    """
    
    def __init__(self):
        super().__init__(
            name="enhanced_system",
            description="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: —Ñ–∞–π–ª—ã, —Å–∏—Å—Ç–µ–º–∞, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.allowed_extensions = {
            ".txt", ".json", ".csv", ".md", ".py", ".js", ".html", ".css",
            ".xml", ".yaml", ".yml", ".ini", ".cfg", ".conf", ".log"
        }
        self.blocked_extensions = {
            ".exe", ".dll", ".so", ".dylib", ".bin", ".deb", ".rpm"
        }
        self.max_file_size_mb = 10
        self.max_output_size = 10000

    def get_schema(self):
        """–°—Ö–µ–º–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        return {
            "type": "object", 
            "properties": {
                "action": {
                    "type": "string",
                    "enum": [
                        # –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
                        "safe_file_create", "safe_file_read", "safe_file_write",
                        "safe_file_delete", "safe_file_list", "file_info",
                        
                        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        "get_system_info", "get_cpu_info", "get_memory_info", 
                        "get_disk_info", "get_process_info",
                        
                        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                        "health_check", "performance_check", "disk_usage",
                        
                        # –£—Ç–∏–ª–∏—Ç—ã
                        "validate_file_path", "check_file_safety"
                    ],
                    "description": "–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                },
                "path": {
                    "type": "string",
                    "description": "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
                },
                "content": {
                    "type": "string", 
                    "description": "–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª"
                },
                "encoding": {
                    "type": "string",
                    "default": "utf-8",
                    "description": "–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞"
                },
                "max_size": {
                    "type": "integer",
                    "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö"
                },
                "recursive": {
                    "type": "boolean",
                    "default": false,
                    "description": "–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫/–æ–ø–µ—Ä–∞—Ü–∏—è"
                }
            },
            "required": ["action"]
        }

    def execute(self, action: str, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
        try:
            # –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
            if action == "safe_file_create":
                return self._safe_file_create(**kwargs)
            elif action == "safe_file_read":
                return self._safe_file_read(**kwargs)
            elif action == "safe_file_write":
                return self._safe_file_write(**kwargs)
            elif action == "safe_file_delete":
                return self._safe_file_delete(**kwargs)
            elif action == "safe_file_list":
                return self._safe_file_list(**kwargs)
            elif action == "file_info":
                return self._get_file_info(**kwargs)
                
            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            elif action == "get_system_info":
                return self._get_system_info(**kwargs)
            elif action == "get_cpu_info":
                return self._get_cpu_info(**kwargs)
            elif action == "get_memory_info":
                return self._get_memory_info(**kwargs)
            elif action == "get_disk_info":
                return self._get_disk_info(**kwargs)
            elif action == "get_process_info":
                return self._get_process_info(**kwargs)
                
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            elif action == "health_check":
                return self._health_check(**kwargs)
            elif action == "performance_check":
                return self._performance_check(**kwargs)
            elif action == "disk_usage":
                return self._disk_usage(**kwargs)
                
            # –£—Ç–∏–ª–∏—Ç—ã
            elif action == "validate_file_path":
                return self._validate_file_path(**kwargs)
            elif action == "check_file_safety":
                return self._check_file_safety(**kwargs)
            else:
                return ToolResult(
                    success=False,
                    error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Enhanced System Tool {action}: {e}")
            return ToolResult(success=False, error=str(e))

    # =====================================================
    # –ë–ï–ó–û–ü–ê–°–ù–´–ï –§–ê–ô–õ–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò
    # =====================================================
    
    def _safe_file_create(self, **kwargs) -> ToolResult:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            path = kwargs.get("path", "")
            content = kwargs.get("content", "")
            encoding = kwargs.get("encoding", "utf-8")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            validation = self._validate_file_operation(path, content)
            if not validation.success:
                return validation
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            file_path = Path(path)
            file_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'w', encoding=encoding) as f:
                f.write(content)
            
            logger.info(f"üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {path} ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            return ToolResult(
                success=True,
                data={
                    "message": f"–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {path}",
                    "path": str(file_path.absolute()),
                    "size": len(content.encode(encoding)),
                    "encoding": encoding
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return ToolResult(success=False, error=str(e))

    def _safe_file_read(self, **kwargs) -> ToolResult:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            path = kwargs.get("path", "")
            encoding = kwargs.get("encoding", "utf-8")
            max_size = kwargs.get("max_size", self.max_file_size_mb * 1024 * 1024)
            
            if not path:
                return ToolResult(success=False, error="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            
            file_path = Path(path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if not file_path.exists():
                return ToolResult(success=False, error="–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            if not file_path.is_file():
                return ToolResult(success=False, error="–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            file_size = file_path.stat().st_size
            if file_size > max_size:
                return ToolResult(
                    success=False, 
                    error=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç (–ª–∏–º–∏—Ç: {max_size})"
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            if not self._is_allowed_extension(path):
                return ToolResult(
                    success=False,
                    error=f"–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {file_path.suffix}"
                )
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'r', encoding=encoding) as f:
                content = f.read()
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
            if len(content) > self.max_output_size:
                content = content[:self.max_output_size] + "\n... (–∫–æ–Ω—Ç–µ–Ω—Ç –æ–±—Ä–µ–∑–∞–Ω)"
            
            logger.info(f"üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω —Ñ–∞–π–ª: {path} ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            return ToolResult(
                success=True,
                data={
                    "content": content,
                    "path": str(file_path.absolute()),
                    "size": file_size,
                    "encoding": encoding,
                    "truncated": len(content) > self.max_output_size
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return ToolResult(success=False, error=str(e))

    def _safe_file_list(self, **kwargs) -> ToolResult:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
        try:
            path = kwargs.get("path", ".")
            recursive = kwargs.get("recursive", False)
            
            dir_path = Path(path)
            
            if not dir_path.exists():
                return ToolResult(success=False, error="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            if not dir_path.is_dir():
                return ToolResult(success=False, error="–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")
            
            items = []
            
            if recursive:
                pattern = "**/*"
                files = dir_path.rglob(pattern)
            else:
                files = dir_path.iterdir()
            
            for item in files:
                try:
                    stat = item.stat()
                    items.append({
                        "name": item.name,
                        "path": str(item.absolute()),
                        "type": "file" if item.is_file() else "directory",
                        "size": stat.st_size if item.is_file() else None,
                        "modified": stat.st_mtime,
                        "extension": item.suffix if item.is_file() else None,
                        "safe": self._is_allowed_extension(str(item)) if item.is_file() else True
                    })
                except (PermissionError, OSError):
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã
                    continue
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ {path}")
            
            return ToolResult(
                success=True,
                data={
                    "message": f"–ù–∞–π–¥–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                    "path": str(dir_path.absolute()),
                    "items": items,
                    "count": len(items),
                    "recursive": recursive
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
            return ToolResult(success=False, error=str(e))

    # =====================================================
    # –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
    # =====================================================
    
    def _get_system_info(self, **kwargs) -> ToolResult:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            system_info = {
                "platform": {
                    "system": platform.system(),
                    "release": platform.release(), 
                    "version": platform.version(),
                    "machine": platform.machine(),
                    "processor": platform.processor(),
                    "architecture": platform.architecture(),
                    "platform": platform.platform()
                },
                "python": {
                    "version": platform.python_version(),
                    "implementation": platform.python_implementation(),
                    "compiler": platform.python_compiler()
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç psutil –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if PSUTIL_AVAILABLE:
                system_info.update({
                    "memory": {
                        "total": psutil.virtual_memory().total,
                        "available": psutil.virtual_memory().available,
                        "percent": psutil.virtual_memory().percent,
                        "used": psutil.virtual_memory().used
                    },
                    "cpu": {
                        "count": psutil.cpu_count(),
                        "count_logical": psutil.cpu_count(logical=True),
                        "percent": psutil.cpu_percent(interval=1),
                        "freq": psutil.cpu_freq()._asdict() if psutil.cpu_freq() else None
                    },
                    "disk": {
                        "usage": psutil.disk_usage('/')._asdict(),
                        "partitions": [p._asdict() for p in psutil.disk_partitions()]
                    },
                    "network": {
                        "connections": len(psutil.net_connections()),
                        "io_stats": psutil.net_io_counters()._asdict()
                    },
                    "uptime": psutil.boot_time()
                })
            
            logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            
            return ToolResult(
                success=True,
                data={
                    "message": "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞",
                    **system_info
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return ToolResult(success=False, error=str(e))

    # =====================================================
    # –£–¢–ò–õ–ò–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò  
    # =====================================================
    
    def _validate_file_operation(self, path: str, content: str = "") -> ToolResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        if not path:
            return ToolResult(success=False, error="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if not self._is_allowed_extension(path):
            return ToolResult(
                success=False,
                error=f"–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {Path(path).suffix}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if content and len(content.encode('utf-8')) > self.max_file_size_mb * 1024 * 1024:
            return ToolResult(
                success=False,
                error=f"–ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–ª–∏–º–∏—Ç: {self.max_file_size_mb}MB)"
            )
        
        return ToolResult(success=True, data={"message": "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞"})

    def _is_allowed_extension(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        file_path = Path(path)
        extension = file_path.suffix.lower()
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if extension in self.blocked_extensions:
            return False
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, —Ä–∞–∑—Ä–µ—à–∞–µ–º
        if not extension:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        return extension in self.allowed_extensions

    def _health_check(self, **kwargs) -> ToolResult:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            checks = {
                "system_accessible": True,
                "temp_writable": False,
                "psutil_available": PSUTIL_AVAILABLE,
                "disk_space_ok": False,
                "memory_ok": False
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ temp
            try:
                temp_file = tempfile.NamedTemporaryFile(delete=True)
                temp_file.close()
                checks["temp_writable"] = True
            except Exception:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å psutil
            if PSUTIL_AVAILABLE:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
                disk_usage = psutil.disk_usage('/')
                disk_free_percent = (disk_usage.free / disk_usage.total) * 100
                checks["disk_space_ok"] = disk_free_percent > 10  # >10% —Å–≤–æ–±–æ–¥–Ω–æ
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
                memory = psutil.virtual_memory()
                checks["memory_ok"] = memory.percent < 90  # <90% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
            
            all_checks_passed = all(checks.values())
            
            logger.info(f"üè• Health check: {'‚úÖ OK' if all_checks_passed else '‚ö†Ô∏è ISSUES'}")
            
            return ToolResult(
                success=True,
                data={
                    "message": "Health check –∑–∞–≤–µ—Ä—à–µ–Ω",
                    "status": "healthy" if all_checks_passed else "issues_detected",
                    "checks": checks,
                    "all_passed": all_checks_passed
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ health check: {e}")
            return ToolResult(success=False, error=str(e)) 