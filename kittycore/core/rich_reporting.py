"""
üîç –°–ò–°–¢–ï–ú–ê –ë–û–ì–ê–¢–´–• –û–¢–ß–Å–¢–û–í KITTYCORE 3.0
–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
"""

import json
import time
from datetime import datetime, timezone
from typing import Dict, Any, List, Optional, Union
from dataclasses import dataclass, field, asdict
from enum import Enum

class ReportLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤."""
    MINIMAL = "minimal"      # –¢–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏
    BASIC = "basic"          # + –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–æ–≤
    DETAILED = "detailed"    # + –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    FULL = "full"           # + –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

@dataclass
class AgentAction:
    """–î–µ–π—Å—Ç–≤–∏–µ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞."""
    action_id: str
    agent_id: str
    agent_type: str
    agent_role: str
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    started_at: datetime
    finished_at: Optional[datetime] = None
    duration_ms: Optional[float] = None
    
    # –°—Ç–∞—Ç—É—Å
    status: str = "running"  # running, success, error, stopped
    error_message: Optional[str] = None
    
    # –î–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    action_type: str = ""
    action_description: str = ""
    input_data: Dict[str, Any] = field(default_factory=dict)
    output_data: Dict[str, Any] = field(default_factory=dict)
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç (–¥–ª—è DETAILED –∏ FULL)
    context_before: Optional[Dict[str, Any]] = None
    context_after: Optional[Dict[str, Any]] = None
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    llm_calls: List[Dict[str, Any]] = field(default_factory=list)
    tools_used: List[str] = field(default_factory=list)
    files_created: List[str] = field(default_factory=list)
    files_modified: List[str] = field(default_factory=list)

@dataclass
class TaskExecution:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏."""
    execution_id: str
    task_description: str
    user_id: Optional[str] = None
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    started_at: datetime = field(default_factory=lambda: datetime.now(timezone.utc))
    finished_at: Optional[datetime] = None
    duration_ms: Optional[float] = None
    
    # –°—Ç–∞—Ç—É—Å
    status: str = "running"  # running, completed, error, stopped
    final_result: Optional[str] = None
    error_message: Optional[str] = None
    
    # –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏
    task_analysis: Dict[str, Any] = field(default_factory=dict)
    task_decomposition: List[Dict[str, Any]] = field(default_factory=list)
    
    # –ê–≥–µ–Ω—Ç—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è
    agents_created: List[Dict[str, Any]] = field(default_factory=list)
    agent_actions: List[AgentAction] = field(default_factory=list)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    artifacts_created: List[str] = field(default_factory=list)
    memory_entries: List[Dict[str, Any]] = field(default_factory=list)
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    performance_metrics: Dict[str, Any] = field(default_factory=dict)
    quality_score: Optional[float] = None
    validation_results: Dict[str, Any] = field(default_factory=dict)

class RichReporter:
    """
    –°–∏—Å—Ç–µ–º–∞ –±–æ–≥–∞—Ç—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ KittyCore 3.0
    
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    
    def __init__(self, report_level: ReportLevel = ReportLevel.DETAILED):
        self.report_level = report_level
        self.active_executions: Dict[str, TaskExecution] = {}
        
    def start_task_execution(self, execution_id: str, task_description: str, 
                           user_id: Optional[str] = None) -> TaskExecution:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        execution = TaskExecution(
            execution_id=execution_id,
            task_description=task_description,
            user_id=user_id
        )
        
        self.active_executions[execution_id] = execution
        return execution
    
    def log_task_analysis(self, execution_id: str, analysis: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏"""
        if execution_id in self.active_executions:
            self.active_executions[execution_id].task_analysis = analysis
    
    def log_task_decomposition(self, execution_id: str, subtasks: List[Dict[str, Any]]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é –∑–∞–¥–∞—á–∏"""
        if execution_id in self.active_executions:
            self.active_executions[execution_id].task_decomposition = subtasks
    
    def log_agent_created(self, execution_id: str, agent_info: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        if execution_id in self.active_executions:
            self.active_executions[execution_id].agents_created.append({
                **agent_info,
                "created_at": datetime.now(timezone.utc).isoformat()
            })
    
    def start_agent_action(self, execution_id: str, action_id: str, 
                          agent_id: str, agent_type: str, agent_role: str,
                          action_type: str, action_description: str,
                          input_data: Optional[Dict[str, Any]] = None,
                          context: Optional[Dict[str, Any]] = None) -> AgentAction:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–∞"""
        
        action = AgentAction(
            action_id=action_id,
            agent_id=agent_id,
            agent_type=agent_type,
            agent_role=agent_role,
            started_at=datetime.now(timezone.utc),
            action_type=action_type,
            action_description=action_description,
            input_data=input_data or {}
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è DETAILED –∏ FULL —É—Ä–æ–≤–Ω–µ–π
        if self.report_level in [ReportLevel.DETAILED, ReportLevel.FULL]:
            action.context_before = self._safe_copy(context or {})
        
        if execution_id in self.active_executions:
            self.active_executions[execution_id].agent_actions.append(action)
        
        return action
    
    def finish_agent_action(self, execution_id: str, action_id: str,
                           output_data: Optional[Dict[str, Any]] = None,
                           context: Optional[Dict[str, Any]] = None,
                           error: Optional[str] = None,
                           llm_calls: Optional[List[Dict[str, Any]]] = None,
                           tools_used: Optional[List[str]] = None,
                           files_created: Optional[List[str]] = None,
                           files_modified: Optional[List[str]] = None):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–∞"""
        
        if execution_id not in self.active_executions:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–µ–π—Å—Ç–≤–∏–µ
        execution = self.active_executions[execution_id]
        action = None
        for a in reversed(execution.agent_actions):
            if a.action_id == action_id and a.finished_at is None:
                action = a
                break
        
        if not action:
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        action.finished_at = datetime.now(timezone.utc)
        action.duration_ms = (action.finished_at - action.started_at).total_seconds() * 1000
        
        if error:
            action.status = "error"
            action.error_message = error
        else:
            action.status = "success"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        action.output_data = output_data or {}
        action.llm_calls = llm_calls or []
        action.tools_used = tools_used or []
        action.files_created = files_created or []
        action.files_modified = files_modified or []
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –¥–ª—è DETAILED –∏ FULL
        if self.report_level in [ReportLevel.DETAILED, ReportLevel.FULL]:
            action.context_after = self._safe_copy(context or {})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if files_created:
            execution.artifacts_created.extend(files_created)
    
    def finish_task_execution(self, execution_id: str, final_result: str,
                             error: Optional[str] = None,
                             quality_score: Optional[float] = None,
                             validation_results: Optional[Dict[str, Any]] = None):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        
        if execution_id not in self.active_executions:
            return
        
        execution = self.active_executions[execution_id]
        execution.finished_at = datetime.now(timezone.utc)
        execution.duration_ms = (execution.finished_at - execution.started_at).total_seconds() * 1000
        
        if error:
            execution.status = "error"
            execution.error_message = error
        else:
            execution.status = "completed"
        
        execution.final_result = final_result
        execution.quality_score = quality_score
        execution.validation_results = validation_results or {}
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        execution.performance_metrics = self._calculate_metrics(execution)
    
    def _safe_copy(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            return json.loads(json.dumps(data, default=str))
        except:
            return {"_copy_error": "Failed to serialize data"}
    
    def _calculate_metrics(self, execution: TaskExecution) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        actions = execution.agent_actions
        successful_actions = [a for a in actions if a.status == "success"]
        
        durations = [a.duration_ms for a in actions if a.duration_ms is not None]
        
        return {
            "total_actions": len(actions),
            "successful_actions": len(successful_actions),
            "success_rate": len(successful_actions) / len(actions) if actions else 0,
            "avg_action_duration_ms": sum(durations) / len(durations) if durations else 0,
            "max_action_duration_ms": max(durations) if durations else 0,
            "min_action_duration_ms": min(durations) if durations else 0,
            "total_artifacts": len(execution.artifacts_created),
            "agents_count": len(execution.agents_created),
            "llm_calls_total": sum(len(a.llm_calls) for a in actions),
            "tools_used_total": len(set(tool for a in actions for tool in a.tools_used))
        }
    
    def generate_detailed_report(self, execution_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è —Ñ–∞–π–ª–∞"""
        if execution_id not in self.active_executions:
            return "Execution not found"
        
        execution = self.active_executions[execution_id]
        
        report = [
            "# üê± –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ KITTYCORE 3.0",
            "=" * 60,
            "",
            f"## üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–î–ê–ß–ï",
            f"**ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {execution.execution_id}",
            f"**–ó–∞–¥–∞—á–∞:** {execution.task_description}",
            f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {execution.user_id or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}",
            f"**–ù–∞—á–∞—Ç–æ:** {execution.started_at.strftime('%Y-%m-%d %H:%M:%S UTC')}",
            f"**–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {execution.finished_at.strftime('%Y-%m-%d %H:%M:%S UTC') if execution.finished_at else '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}",
            f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {execution.duration_ms:.0f}–º—Å" if execution.duration_ms else "–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
            f"**–°—Ç–∞—Ç—É—Å:** {execution.status.upper()}",
            ""
        ]
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏
        if execution.task_analysis:
            report.extend([
                "## üîç –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß–ò",
                f"**–¢–∏–ø:** {execution.task_analysis.get('task_type', 'N/A')}",
                f"**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {execution.task_analysis.get('complexity', 'N/A')}",
                f"**–î–æ–º–µ–Ω:** {execution.task_analysis.get('domain', 'N/A')}",
                f"**–¢—Ä–µ–±—É–µ—Ç —Ñ–∞–π–ª—ã:** {'–î–∞' if execution.task_analysis.get('requires_files') else '–ù–µ—Ç'}",
                f"**–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** {execution.task_analysis.get('expected_output', 'N/A')}",
                ""
            ])
        
        # –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∑–∞–¥–∞—á–∏
        if execution.task_decomposition:
            report.extend([
                "## üìä –î–ï–ö–û–ú–ü–û–ó–ò–¶–ò–Ø –ó–ê–î–ê–ß–ò",
                f"**–í—Å–µ–≥–æ –ø–æ–¥–∑–∞–¥–∞—á:** {len(execution.task_decomposition)}",
                ""
            ])
            for i, subtask in enumerate(execution.task_decomposition, 1):
                report.extend([
                    f"### –ü–æ–¥–∑–∞–¥–∞—á–∞ {i}:",
                    f"- **–û–ø–∏—Å–∞–Ω–∏–µ:** {subtask.get('description', 'N/A')}",
                    f"- **–¢–∏–ø:** {subtask.get('type', 'N/A')}",
                    f"- **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {subtask.get('priority', 'N/A')}",
                    ""
                ])
        
        # –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
        if execution.agents_created:
            report.extend([
                "## ü§ñ –°–û–ó–î–ê–ù–ù–´–ï –ê–ì–ï–ù–¢–´",
                f"**–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤:** {len(execution.agents_created)}",
                ""
            ])
            for agent in execution.agents_created:
                report.extend([
                    f"### –ê–≥–µ–Ω—Ç: {agent.get('type', 'Unknown')}",
                    f"- **–†–æ–ª—å:** {agent.get('role', 'N/A')}",
                    f"- **–°–æ–∑–¥–∞–Ω:** {agent.get('created_at', 'N/A')}",
                    f"- **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:** {agent.get('specialization', 'N/A')}",
                    ""
                ])
        
        # –î–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        if execution.agent_actions:
            report.extend([
                "## ‚ö° –î–ï–ô–°–¢–í–ò–Ø –ê–ì–ï–ù–¢–û–í",
                f"**–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π:** {len(execution.agent_actions)}",
                ""
            ])
            
            for action in execution.agent_actions:
                status_emoji = "‚úÖ" if action.status == "success" else "‚ùå" if action.status == "error" else "‚è≥"
                
                report.extend([
                    f"### {status_emoji} {action.action_type}: {action.action_description}",
                    f"- **–ê–≥–µ–Ω—Ç:** {action.agent_type} ({action.agent_role})",
                    f"- **–ù–∞—á–∞—Ç–æ:** {action.started_at.strftime('%H:%M:%S')}",
                    f"- **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {action.finished_at.strftime('%H:%M:%S') if action.finished_at else '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}",
                    f"- **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {action.duration_ms:.0f}–º—Å" if action.duration_ms else "–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
                    f"- **–°—Ç–∞—Ç—É—Å:** {action.status.upper()}",
                ])
                
                if action.error_message:
                    report.append(f"- **–û—à–∏–±–∫–∞:** {action.error_message}")
                
                if action.tools_used:
                    report.append(f"- **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:** {', '.join(action.tools_used)}")
                
                if action.files_created:
                    report.append(f"- **–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:** {', '.join(action.files_created)}")
                
                if action.llm_calls:
                    report.append(f"- **LLM –≤—ã–∑–æ–≤–æ–≤:** {len(action.llm_calls)}")
                
                report.append("")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if execution.performance_metrics:
            metrics = execution.performance_metrics
            report.extend([
                "## üìà –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò",
                f"**–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {metrics.get('success_rate', 0):.1%}",
                f"**–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è:** {metrics.get('avg_action_duration_ms', 0):.0f}–º—Å",
                f"**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:** {metrics.get('max_action_duration_ms', 0):.0f}–º—Å",
                f"**–°–æ–∑–¥–∞–Ω–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤:** {metrics.get('total_artifacts', 0)}",
                f"**–í—Å–µ–≥–æ LLM –≤—ã–∑–æ–≤–æ–≤:** {metrics.get('llm_calls_total', 0)}",
                f"**–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:** {metrics.get('tools_used_total', 0)}",
                ""
            ])
        
        # –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        if execution.artifacts_created:
            report.extend([
                "## üìÅ –°–û–ó–î–ê–ù–ù–´–ï –ê–†–¢–ï–§–ê–ö–¢–´",
                ""
            ])
            for artifact in execution.artifacts_created:
                report.append(f"- {artifact}")
            report.append("")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        if execution.final_result:
            report.extend([
                "## üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢",
                execution.final_result,
                ""
            ])
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        if execution.quality_score is not None:
            report.extend([
                "## ‚≠ê –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê",
                f"**–ë–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞:** {execution.quality_score:.2f}/1.0",
                ""
            ])
        
        return "\n".join(report)
    
    def generate_ui_summary(self, execution_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –¥–ª—è UI"""
        if execution_id not in self.active_executions:
            return "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        execution = self.active_executions[execution_id]
        
        # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        duration = f"{execution.duration_ms:.0f}–º—Å" if execution.duration_ms else "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        status_emoji = "‚úÖ" if execution.status == "completed" else "‚ùå" if execution.status == "error" else "‚è≥"
        
        summary = [
            f"{status_emoji} **{execution.task_description}**",
            f"‚è±Ô∏è {duration} | ü§ñ {len(execution.agents_created)} –∞–≥–µ–Ω—Ç–æ–≤ | ‚ö° {len(execution.agent_actions)} –¥–µ–π—Å—Ç–≤–∏–π | üìÅ {len(execution.artifacts_created)} —Ñ–∞–π–ª–æ–≤"
        ]
        
        if execution.quality_score is not None:
            summary.append(f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {execution.quality_score:.2f}")
        
        return "\n".join(summary)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä reporter
_global_reporter = None

def get_rich_reporter() -> RichReporter:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä rich reporter"""
    global _global_reporter
    if _global_reporter is None:
        _global_reporter = RichReporter()
    return _global_reporter

def set_report_level(level: ReportLevel):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤"""
    global _global_reporter
    if _global_reporter is None:
        _global_reporter = RichReporter(level)
    else:
        _global_reporter.report_level = level 