#!/usr/bin/env python3
"""
üîç –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –í–ê–õ–ò–î–ê–¢–û–†–ê

–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ —à—Ç—Ä–∞—Ñ—É–µ—Ç –∑–∞ –ø–æ–¥–¥–µ–ª–∫–∏
"""

import asyncio
import os
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
import sys
sys.path.append("kittycore/core")
from unified_orchestrator_fixed import FixedUnifiedOrchestrator

async def test_fixed_validator():
    print("üîç –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –í–ê–õ–ò–î–ê–¢–û–†–ê")
    print("="*50)
    
    task = "–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∞ –±–∏—Ç—Ä–∏–∫—Å 24"
    
    # –°–æ–∑–¥–∞—ë–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = FixedUnifiedOrchestrator()
    
    # –§–∞–π–ª—ã –∏–∑ –Ω–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞
    test_files = [
        "outputs/report.md",           # –ü–û–î–î–ï–õ–ö–ê
        "outputs/complexity.md",       # –ü–û–î–î–ï–õ–ö–ê  
        "outputs/top10_bitrix24_apps.json",  # –•–û–†–û–®–ò–ô
        "outputs/bitrix24_market_analysis.md"  # –•–û–†–û–®–ò–ô
    ]
    
    print(f"üìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã: {len(test_files)}")
    for f in test_files:
        exists = "‚úÖ" if os.path.exists(f) else "‚ùå"
        print(f"   {exists} {f}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    expected_outcome = {"type": "analysis"}
    
    print(f"\nüîç –ó–ê–ü–£–°–ö –í–ê–õ–ò–î–ê–¶–ò–ò...")
    
    try:
        result = await orchestrator._validate_file_contents(test_files, task, expected_outcome)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:")
        print(f"   üìà –ë–æ–Ω—É—Å: {result['score_bonus']:.3f}")
        print(f"   üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {result['total_files_count']}")
        print(f"   üö® –ü–æ–¥–¥–µ–ª–æ–∫: {result['fake_files_count']}")
        print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥–¥–µ–ª–æ–∫: {result['fake_ratio']*100:.1f}%")
        
        print(f"\n‚úÖ –î–ï–¢–ê–õ–ò:")
        for detail in result['details']:
            print(f"   {detail}")
            
        print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–´:")
        for issue in result['issues']:
            print(f"   {issue}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–µ–ø–µ—Ä—å –¥–∞—ë—Ç –Ω–∏–∑–∫—É—é –æ—Ü–µ–Ω–∫—É
        base_score = 0.7
        final_score = base_score + result['score_bonus']
        
        print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –°–ß–Å–¢:")
        print(f"   üîπ –ë–∞–∑–æ–≤—ã–π: {base_score}")
        print(f"   üîπ –ë–æ–Ω—É—Å: {result['score_bonus']:.3f}")
        print(f"   üîπ –ò—Ç–æ–≥–æ: {final_score:.3f}")
        
        if final_score < 0.7:
            print(f"   ‚úÖ –û–¢–õ–ò–ß–ù–û! –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —à—Ç—Ä–∞—Ñ—É–µ—Ç: {final_score:.3f} < 0.7")
        else:
            print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê! –í–∞–ª–∏–¥–∞—Ç–æ—Ä –≤—Å—ë –µ—â—ë –¥–∞—ë—Ç –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É: {final_score:.3f} >= 0.7")
            
        print(f"\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï:")
        print(f"   üìä –î–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: 0.85 (–õ–û–ñ–ù–´–ô –£–°–ü–ï–•)")
        print(f"   üìä –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: {final_score:.2f} ({'–ü–†–û–í–ê–õ' if final_score < 0.7 else '–£–°–ü–ï–•'})")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    asyncio.run(test_fixed_validator()) 