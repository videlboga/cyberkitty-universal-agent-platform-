"""
Simple AmoCRM Plugin - –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AmoCRM

–ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!
- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –ø–æ–∏—Å–∫, —Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —Å–¥–µ–ª–æ–∫
- –†–∞–±–æ—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
- –ú–∏–Ω–∏–º—É–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import json
from datetime import datetime
from typing import Dict, Any, Optional
from loguru import logger
import httpx

from app.core.base_plugin import BasePlugin


class SimpleAmoCRMPlugin(BasePlugin):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–≥–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AmoCRM"""
    
    def __init__(self):
        super().__init__("simple_amocrm")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM (–±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î)
        self.base_url = None
        self.access_token = None
        self.headers = {}
        
        # –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π (–±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ë–î)
        self.fields_map = {}
        
        logger.info("SimpleAmoCRMPlugin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _do_initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
        await self._load_settings_from_db()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π –∏–∑ –ë–î
        await self._load_fields_from_db()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
        if self.access_token:
            self.headers = {
                'Authorization': f'Bearer {self.access_token}',
                'Content-Type': 'application/json'
            }
            logger.info("‚úÖ SimpleAmoCRMPlugin –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            logger.warning("‚ö†Ô∏è SimpleAmoCRMPlugin —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")
            logger.info("üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: POST /admin/plugins/amocrm/settings")
    
    async def _load_settings_from_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM –∏–∑ MongoDB"""
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ MongoDB: engine={self.engine is not None}")
            if self.engine:
                logger.info(f"üîç –ü–ª–∞–≥–∏–Ω—ã –≤ –¥–≤–∏–∂–∫–µ: {list(self.engine.plugins.keys()) if hasattr(self.engine, 'plugins') else '–Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ plugins'}")
            
            if not self.engine or not hasattr(self.engine, 'plugins') or 'mongo' not in self.engine.plugins:
                logger.warning("MongoDB –ø–ª–∞–≥–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AmoCRM")
                return
                
            mongo_plugin = self.engine.plugins['mongo']
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM (–∏—â–µ–º –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏ –ø–ª–∞–≥–∏–Ω–∞)
            logger.info("üîç –ò—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –∏–º–µ–Ω–µ–º: simple_amocrm")
            settings_result = await mongo_plugin._find_one("plugin_settings", {"plugin_name": "simple_amocrm"})
            logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {settings_result}")
            
            if settings_result and settings_result.get("success") and settings_result.get("document"):
                settings = settings_result["document"]
                new_base_url = settings.get("base_url")
                new_access_token = settings.get("access_token")
                
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: base_url={new_base_url}, token_length={len(new_access_token) if new_access_token else 0}")
                
                self.base_url = new_base_url
                self.access_token = new_access_token
                logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î: {self.base_url}")
            else:
                logger.info("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AmoCRM –∏–∑ –ë–î: {e}")
    
    async def _load_fields_from_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π AmoCRM –∏–∑ MongoDB"""
        try:
            if not self.engine or not hasattr(self.engine, 'plugins') or 'mongo' not in self.engine.plugins:
                logger.warning("MongoDB –ø–ª–∞–≥–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–µ–π AmoCRM")
                await self._load_fields_from_file()  # Fallback –∫ —Ñ–∞–π–ª—É
                return
                
            mongo_plugin = self.engine.plugins['mongo']
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π
            fields_result = await mongo_plugin._find_one("plugin_settings", {"plugin_name": "amocrm_fields"})
            
            if fields_result and fields_result.get("success") and fields_result.get("document"):
                self.fields_map = fields_result["document"].get("fields_map", {})
                logger.info(f"‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π AmoCRM –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ë–î: {len(self.fields_map)} –ø–æ–ª–µ–π")
            else:
                logger.info("‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π AmoCRM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞")
                await self._load_fields_from_file()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–µ–π AmoCRM –∏–∑ –ë–î: {e}")
            await self._load_fields_from_file()  # Fallback –∫ —Ñ–∞–π–ª—É
    
    async def _load_fields_from_file(self):
        """–£–î–ê–õ–ï–ù–û: –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π –µ—Å–ª–∏ –Ω–µ—Ç –≤ –ë–î
        self.fields_map = {}
        logger.info("‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π AmoCRM –ø—É—Å—Ç–∞ - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ API –∏–ª–∏ –ë–î")
    
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –ù–ê–°–¢–†–û–ô–ö–ò –ß–ï–†–ï–ó API ===
    
    async def save_settings_to_db(self, base_url: str, access_token: str) -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM –≤ MongoDB (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API)"""
        try:
            if not self.engine or not hasattr(self.engine, 'plugins') or 'mongo' not in self.engine.plugins:
                return {"success": False, "error": "MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                
            mongo_plugin = self.engine.plugins['mongo']
            
            settings_doc = {
                "plugin_name": "amocrm",
                "base_url": base_url,
                "access_token": access_token,
                "updated_at": datetime.now().isoformat()
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è
            result = await mongo_plugin._update_one(
                "plugin_settings", 
                {"plugin_name": "amocrm"}, 
                {"$set": settings_doc},
                upsert=True
            )
            
            if result.get("success"):
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–ª–∞–≥–∏–Ω–µ
                self.base_url = base_url
                self.access_token = access_token
                self.headers = {
                    'Authorization': f'Bearer {self.access_token}',
                    'Content-Type': 'application/json'
                }
                
                logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
                return {"success": True, "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"}
            else:
                error_msg = result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM –≤ –ë–î: {error_msg}")
                return {"success": False, "error": error_msg}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ AmoCRM –≤ –ë–î: {e}")
            return {"success": False, "error": str(e)}
    
    async def save_fields_to_db(self, fields_map: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π AmoCRM –≤ MongoDB (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API)"""
        try:
            if not self.engine or not hasattr(self.engine, 'plugins') or 'mongo' not in self.engine.plugins:
                return {"success": False, "error": "MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                
            mongo_plugin = self.engine.plugins['mongo']
            
            fields_doc = {
                "plugin_name": "amocrm_fields",
                "fields_map": fields_map,
                "updated_at": datetime.now().isoformat()
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è
            result = await mongo_plugin._update_one(
                "plugin_settings", 
                {"plugin_name": "amocrm_fields"}, 
                {"$set": fields_doc},
                upsert=True
            )
            
            if result.get("success"):
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π –≤ –ø–ª–∞–≥–∏–Ω–µ
                self.fields_map = fields_map
                
                logger.info(f"‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π AmoCRM —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: {len(fields_map)} –ø–æ–ª–µ–π")
                return {"success": True, "message": f"–ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ({len(fields_map)} –ø–æ–ª–µ–π)"}
            else:
                error_msg = result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π AmoCRM –≤ –ë–î: {error_msg}")
                return {"success": False, "error": error_msg}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π AmoCRM –≤ –ë–î: {e}")
            return {"success": False, "error": str(e)}
    
    def get_current_settings(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞"""
        return {
            "base_url": self.base_url,
            "access_token": "***" if self.access_token else None,
            "access_token_set": bool(self.access_token),
            "fields_count": len(self.fields_map),
            "configured": bool(self.base_url and self.access_token)
        }
    
    def register_handlers(self) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —à–∞–≥–æ–≤"""
        return {
            # === –ö–û–ù–¢–ê–ö–¢–´ ===
            "amocrm_find_contact": self._handle_find_contact,
            "amocrm_create_contact": self._handle_create_contact,
            "amocrm_update_contact": self._handle_update_contact,
            "amocrm_delete_contact": self._handle_delete_contact,
            "amocrm_get_contact": self._handle_get_contact,
            "amocrm_list_contacts": self._handle_list_contacts,
            
            # === –°–î–ï–õ–ö–ò ===
            "amocrm_find_lead": self._handle_find_lead,
            "amocrm_create_lead": self._handle_create_lead,
            "amocrm_update_lead": self._handle_update_lead,
            "amocrm_delete_lead": self._handle_delete_lead,
            "amocrm_get_lead": self._handle_get_lead,
            "amocrm_list_leads": self._handle_list_leads,
            
            # === –°–û–ë–´–¢–ò–Ø –ò –ó–ê–ú–ï–¢–ö–ò ===
            "amocrm_add_note": self._handle_add_note,
            
            # === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò ===
            "amocrm_search": self._handle_search,
            "amocrm_get_account": self._handle_get_account,
        }
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    @staticmethod
    def _get_enum_id(field: Dict[str, Any], value: Any = None, code: str = "WORK") -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID enum –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è"""
        enums = field.get("enums", [])
        
        # –ü–æ–∏—Å–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
        if value:
            for enum in enums:
                if str(enum.get("value", "")).lower() == str(value).lower():
                    return enum["id"]
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É
        for enum in enums:
            enum_value = enum.get("value", "").upper()
            enum_code = enum.get("enum_code", "").upper()
            if enum_value == code.upper() or enum_code == code.upper():
                return enum["id"]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        if enums:
            return enums[0]["id"]
            
        return None
    
    def _prepare_custom_fields(self, data: Dict[str, Any]) -> list:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –¥–ª—è AmoCRM API"""
        custom_fields = []
        
        for field_name, value in data.items():
            field = self.fields_map.get(field_name)
            if not field:
                continue
                
            field_type = field.get("type")
            field_id = field["id"]
            
            if field_type in ["multitext", "text"]:
                # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
                custom_fields.append({
                    "field_id": field_id,
                    "values": [{"value": str(value)}]
                })
                
            elif field_type == "numeric":
                # –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
                custom_fields.append({
                    "field_id": field_id,
                    "values": [{"value": value}]
                })
                
            elif field_type == "select":
                # –°–µ–ª–µ–∫—Ç (–æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä)
                enum_id = self._get_enum_id(field, value=value)
                if enum_id:
                    custom_fields.append({
                        "field_id": field_id,
                        "values": [{"enum_id": enum_id}]
                    })
                    
            elif field_type == "multiselect":
                # –ú—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç
                if isinstance(value, list):
                    enum_ids = [self._get_enum_id(field, value=v) for v in value]
                    custom_fields.append({
                        "field_id": field_id,
                        "values": [{"enum_id": eid} for eid in enum_ids if eid]
                    })
                    
            elif field_type == "multiphonemail":
                # –¢–µ–ª–µ—Ñ–æ–Ω/Email —Å —Ç–∏–ø–æ–º
                enum_id = self._get_enum_id(field)
                custom_fields.append({
                    "field_id": field_id,
                    "values": [{"value": str(value), "enum_id": enum_id}]
                })
                
            else:
                # Fallback –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
                custom_fields.append({
                    "field_id": field_id,
                    "values": [{"value": str(value)}]
                })
                
        return custom_fields
    
    async def _ensure_fresh_settings(self):
        """
        –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.
        –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∫—Ä–µ–¥–∞–º–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
        """
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ AmoCRM")
            
            if not self.engine or not hasattr(self.engine, 'plugins') or 'mongo' not in self.engine.plugins:
                logger.warning("MongoDB –ø–ª–∞–≥–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AmoCRM")
                return
                
            mongo_plugin = self.engine.plugins['mongo']
            logger.info("üîç MongoDB –ø–ª–∞–≥–∏–Ω –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ simple_amocrm")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM (–∏—â–µ–º –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏ –ø–ª–∞–≥–∏–Ω–∞)
            settings_result = await mongo_plugin._find_one("plugin_settings", {"plugin_name": "simple_amocrm"})
            logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {settings_result}")
            
            if settings_result and settings_result.get("success") and settings_result.get("document"):
                settings = settings_result["document"]
                new_base_url = settings.get("base_url")
                new_access_token = settings.get("access_token")
                
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: base_url={new_base_url}, token_length={len(new_access_token) if new_access_token else 0}")
                logger.info(f"üîç –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: base_url={self.base_url}, token_length={len(self.access_token) if self.access_token else 0}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                if new_base_url != self.base_url or new_access_token != self.access_token:
                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {self.base_url} -> {new_base_url}")
                    self.base_url = new_base_url
                    self.access_token = new_access_token
                    self.headers = {
                        'Authorization': f'Bearer {self.access_token}',
                        'Content-Type': 'application/json'
                    } if self.access_token else {}
                    logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {self.base_url}")
                else:
                    logger.info("‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            else:
                logger.warning("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ simple_amocrm –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AmoCRM: {e}")

    async def _make_request(self, method: str, endpoint: str, **kwargs) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ AmoCRM API"""
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
        await self._ensure_fresh_settings()
        
        if not self.base_url or not self.access_token:
            return {
                "success": False,
                "error": "AmoCRM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç AMO_BASE_URL –∏–ª–∏ AMO_ACCESS_TOKEN)"
            }
        
        url = f"{self.base_url}{endpoint}"
        
        logger.info(f"üîó AmoCRM {method} –∑–∞–ø—Ä–æ—Å: {url}")
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.request(
                    method=method,
                    url=url,
                    headers=self.headers,
                    timeout=30.0,
                    **kwargs
                )
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                try:
                    data = response.json()
                except:
                    data = response.text
                
                result = {
                    "success": response.status_code < 400,
                    "status_code": response.status_code,
                    "data": data
                }
                
                if response.status_code >= 400:
                    result["error"] = f"AmoCRM API –æ—à–∏–±–∫–∞ {response.status_code}"
                    logger.error(f"‚ùå AmoCRM –æ—à–∏–±–∫–∞ {response.status_code}: {url}")
                else:
                    logger.info(f"‚úÖ AmoCRM {method} —É—Å–ø–µ—à–Ω–æ: {url}")
                
                return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AmoCRM: {e}")
            return {
                "success": False,
                "error": str(e),
                "status_code": 0
            }
    
    def _resolve_value(self, value: Any, context: Dict[str, Any]) -> Any:
        """–ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if isinstance(value, str) and "{" in value and "}" in value:
            try:
                return value.format(**context)
            except (KeyError, ValueError) as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å '{value}': {e}")
                return value
        return value
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –®–ê–ì–û–í ===
    
    async def _handle_find_contact(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ AmoCRM"""
        params = step_data.get("params", {})
        
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            query = self._resolve_value(params.get("query", ""), context)
            telegram_id = self._resolve_value(params.get("telegram_id", ""), context)
            phone = self._resolve_value(params.get("phone", ""), context)
            email = self._resolve_value(params.get("email", ""), context)
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output_var = params.get("output_var", "contact")
            
            # –ü–æ–∏—Å–∫ –ø–æ Telegram ID (—á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ)
            if telegram_id:
                result = await self._find_contact_by_telegram_id(telegram_id)
            # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            elif phone:
                result = await self._find_contact_by_phone(phone)
            # –ü–æ–∏—Å–∫ –ø–æ email
            elif email:
                result = await self._find_contact_by_email(email)
            # –û–±—â–∏–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
            elif query:
                result = await self._search_contacts(query)
            else:
                result = {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞"}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            context[output_var] = result
            
            if result.get("success"):
                logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω: {result.get('contact', {}).get('id')}")
            else:
                logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            context["__step_error__"] = f"AmoCRM –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}"

    async def _handle_get_contact(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ ID"""
        params = step_data.get("params", {})
        
        try:
            contact_id = self._resolve_value(params.get("contact_id", ""), context)
            output_var = params.get("output_var", "contact")
            with_fields = params.get("with", [])  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            
            if not contact_id:
                context[output_var] = {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω contact_id"}
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            query_params = {}
            if with_fields:
                query_params["with"] = ",".join(with_fields)
            
            endpoint = f"/api/v4/contacts/{contact_id}"
            result = await self._make_request("GET", endpoint, params=query_params)
            
            if result["success"]:
                context[output_var] = {
                    "success": True,
                    "contact": result["data"]
                }
                logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω: {contact_id}")
            else:
                context[output_var] = result
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id}: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            context["__step_error__"] = f"AmoCRM –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}"

    async def _handle_list_contacts(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        params = step_data.get("params", {})
        
        try:
            output_var = params.get("output_var", "contacts")
            limit = params.get("limit", 250)
            page = params.get("page", 1)
            with_fields = params.get("with", [])
            filter_params = params.get("filter", {})
            order = params.get("order", {})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            query_params = {
                "limit": limit,
                "page": page
            }
            
            if with_fields:
                query_params["with"] = ",".join(with_fields)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            for key, value in filter_params.items():
                resolved_value = self._resolve_value(value, context)
                query_params[f"filter[{key}]"] = resolved_value
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            for key, value in order.items():
                query_params[f"order[{key}]"] = value
            
            endpoint = "/api/v4/contacts"
            result = await self._make_request("GET", endpoint, params=query_params)
            
            if result["success"]:
                contacts = result["data"].get("_embedded", {}).get("contacts", [])
                context[output_var] = {
                    "success": True,
                    "contacts": contacts,
                    "count": len(contacts),
                    "page_info": result["data"].get("_page", {})
                }
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contacts)} —à—Ç.")
            else:
                context[output_var] = result
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            context["__step_error__"] = f"AmoCRM —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {str(e)}"

    async def _handle_delete_contact(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        params = step_data.get("params", {})
        
        try:
            contact_id = self._resolve_value(params.get("contact_id", ""), context)
            output_var = params.get("output_var", "delete_result")
            
            if not contact_id:
                context[output_var] = {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω contact_id"}
                return
            
            endpoint = f"/api/v4/contacts/{contact_id}"
            result = await self._make_request("DELETE", endpoint)
            
            if result["success"]:
                context[output_var] = {
                    "success": True,
                    "deleted": True,
                    "contact_id": contact_id
                }
                logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É–¥–∞–ª–µ–Ω: {contact_id}")
            else:
                context[output_var] = result
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id}: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            context["__step_error__"] = f"AmoCRM —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}"
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–î–ï–õ–û–ö ===
    
    async def _handle_find_lead(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–ü–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏ –≤ AmoCRM"""
        params = step_data.get("params", {})
        
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            query = self._resolve_value(params.get("query", ""), context)
            lead_id = self._resolve_value(params.get("lead_id", ""), context)
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output_var = params.get("output_var", "lead")
            
            # –ü–æ–∏—Å–∫ –ø–æ ID
            if lead_id:
                result = await self._get_lead_by_id(lead_id)
            # –û–±—â–∏–π –ø–æ–∏—Å–∫
            elif query:
                result = await self._search_leads(query)
            else:
                result = {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞"}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            context[output_var] = result
            
            if result.get("success"):
                logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {result.get('lead', {}).get('id')}")
            else:
                logger.warning(f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–∫–∏: {e}")
            context["__step_error__"] = f"AmoCRM –ø–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏: {str(e)}"
    
    async def _handle_create_lead(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ AmoCRM"""
        params = step_data.get("params", {})
        
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            name = self._resolve_value(params.get("name", ""), context)
            price = self._resolve_value(params.get("price", 0), context)
            contact_id = self._resolve_value(params.get("contact_id", ""), context)
            pipeline_id = self._resolve_value(params.get("pipeline_id", ""), context)
            status_id = self._resolve_value(params.get("status_id", ""), context)
            
            # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
            custom_fields_data = params.get("custom_fields", {})
            for key, value in custom_fields_data.items():
                custom_fields_data[key] = self._resolve_value(value, context)
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output_var = params.get("output_var", "created_lead")
            
            # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
            result = await self._create_lead(
                name=name,
                price=price,
                contact_id=contact_id,
                pipeline_id=pipeline_id,
                status_id=status_id,
                custom_fields=custom_fields_data
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            context[output_var] = result
            
            if result.get("success"):
                logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {result.get('lead', {}).get('id')}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            context["__step_error__"] = f"AmoCRM —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏: {str(e)}"
    
    async def _handle_add_note(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ AmoCRM"""
        params = step_data.get("params", {})
        
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–º–µ—Ç–∫–∏
            entity_type = params.get("entity_type", "leads")  # leads, contacts, companies
            entity_id = self._resolve_value(params.get("entity_id", ""), context)
            note_text = self._resolve_value(params.get("note_text", ""), context)
            note_type = params.get("note_type", "common")  # common, call_in, call_out, etc.
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output_var = params.get("output_var", "note_result")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
            result = await self._add_note_to_entity(entity_type, entity_id, note_text, note_type)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            context[output_var] = result
            
            if result.get("success"):
                logger.info(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ {entity_type}:{entity_id}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: {e}")
            context["__step_error__"] = f"AmoCRM –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: {str(e)}"
    
    async def _handle_search(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ AmoCRM"""
        params = step_data.get("params", {})
        
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            query = self._resolve_value(params.get("query", ""), context)
            entity_type = params.get("entity_type", "contacts")  # contacts, leads, companies
            limit = params.get("limit", 50)
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output_var = params.get("output_var", "search_results")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            if entity_type == "contacts":
                result = await self._search_contacts(query)
            elif entity_type == "leads":
                result = await self._search_leads(query)
            elif entity_type == "companies":
                result = await self._search_companies(query)
            else:
                result = {"success": False, "error": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏: {entity_type}"}
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if result.get("success") and "contacts" in result:
                result["contacts"] = result["contacts"][:limit]
            elif result.get("success") and "leads" in result:
                result["leads"] = result["leads"][:limit]
            elif result.get("success") and "companies" in result:
                result["companies"] = result["companies"][:limit]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            context[output_var] = result
            
            if result.get("success"):
                count = result.get("count", 0)
                logger.info(f"‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            context["__step_error__"] = f"AmoCRM –ø–æ–∏—Å–∫: {str(e)}"
    
    # === –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –°–û –°–î–ï–õ–ö–ê–ú–ò ===
    
    async def _get_lead_by_id(self, lead_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ ID"""
        endpoint = f"/api/v4/leads/{lead_id}"
        
        result = await self._make_request("GET", endpoint)
        
        if result["success"]:
            return {
                "success": True,
                "lead": result["data"],
                "found": True
            }
        
        return {"success": False, "error": result.get("error", "–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")}
    
    async def _search_leads(self, query: str) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ —Å–¥–µ–ª–æ–∫"""
        endpoint = f"/api/v4/leads"
        params = {"query": query}
        
        result = await self._make_request("GET", endpoint, params=params)
        
        if result["success"]:
            leads = result["data"].get("_embedded", {}).get("leads", [])
            return {
                "success": True,
                "leads": leads,
                "count": len(leads)
            }
        
        return {"success": False, "error": result.get("error", "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫")}
    
    async def _create_lead(self, name: str, price: int = 0, contact_id: int = None,
                          pipeline_id: int = None, status_id: int = None,
                          custom_fields: Dict[str, Any] = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏"""
        lead_data = {"name": name}
        
        if price:
            lead_data["price"] = price
        if pipeline_id:
            lead_data["pipeline_id"] = pipeline_id
        if status_id:
            lead_data["status_id"] = status_id
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É
        if contact_id:
            lead_data["_embedded"] = {
                "contacts": [{"id": contact_id}]
            }
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
        if custom_fields:
            lead_data["custom_fields_values"] = self._prepare_custom_fields(custom_fields)
        
        endpoint = "/api/v4/leads"
        payload = [lead_data]
        
        result = await self._make_request("POST", endpoint, json=payload)
        
        if result["success"] and result["data"].get("_embedded", {}).get("leads"):
            lead = result["data"]["_embedded"]["leads"][0]
            return {
                "success": True,
                "lead": lead,
                "lead_id": lead["id"]
            }
        
        return {"success": False, "error": result.get("error", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏")}
    
    async def _search_companies(self, query: str) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–π"""
        endpoint = f"/api/v4/companies"
        params = {"query": query}
        
        result = await self._make_request("GET", endpoint, params=params)
        
        if result["success"]:
            companies = result["data"].get("_embedded", {}).get("companies", [])
            return {
                "success": True,
                "companies": companies,
                "count": len(companies)
            }
        
        return {"success": False, "error": result.get("error", "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π")}
    
    async def _add_note_to_entity(self, entity_type: str, entity_id: int, 
                                 note_text: str, note_type: str = "common") -> Dict[str, Any]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫ —Å—É—â–Ω–æ—Å—Ç–∏"""
        note_data = {
            "entity_id": entity_id,
            "note_type": note_type,
            "params": {
                "text": note_text
            }
        }
        
        endpoint = f"/api/v4/{entity_type}/notes"
        payload = [note_data]
        
        result = await self._make_request("POST", endpoint, json=payload)
        
        if result["success"]:
            return {
                "success": True,
                "note_added": True,
                "entity_id": entity_id
            }
        
        return {"success": False, "error": result.get("error", "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏")}
    
    # === HEALTHCHECK ===
    
    async def healthcheck(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ AmoCRM –ø–ª–∞–≥–∏–Ω–∞"""
        try:
            if not self.base_url or not self.access_token:
                logger.warning("‚ùå AmoCRM healthcheck: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            result = await self._make_request("GET", "/api/v4/account")
            
            if result["success"]:
                account_name = result["data"].get("name", "Unknown")
                logger.info(f"‚úÖ AmoCRM healthcheck: OK (–∞–∫–∫–∞—É–Ω—Ç: {account_name})")
                return True
            else:
                logger.error(f"‚ùå AmoCRM healthcheck: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {result.get('error')}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå AmoCRM healthcheck: –æ—à–∏–±–∫–∞ - {e}")
            return False

    async def _handle_create_contact(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ AmoCRM"""
        params = step_data.get("params", {})
        
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            name = self._resolve_value(params.get("name", ""), context)
            first_name = self._resolve_value(params.get("first_name", ""), context)
            last_name = self._resolve_value(params.get("last_name", ""), context)
            
            # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
            custom_fields_data = params.get("custom_fields", {})
            for key, value in custom_fields_data.items():
                custom_fields_data[key] = self._resolve_value(value, context)
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output_var = params.get("output_var", "created_contact")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
            result = await self._create_contact(
                name=name,
                first_name=first_name,
                last_name=last_name,
                custom_fields=custom_fields_data
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            context[output_var] = result
            
            if result.get("success"):
                logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω: {result.get('contact', {}).get('id')}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            context["__step_error__"] = f"AmoCRM —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}"

    async def _handle_update_contact(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ AmoCRM"""
        params = step_data.get("params", {})
        
        try:
            # ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
            contact_id = self._resolve_value(params.get("contact_id", ""), context)
            
            # –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_data = params.get("update_data", {})
            for key, value in update_data.items():
                update_data[key] = self._resolve_value(value, context)
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output_var = params.get("output_var", "updated_contact")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
            result = await self._update_contact(contact_id, update_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            context[output_var] = result
            
            if result.get("success"):
                logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {contact_id}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            context["__step_error__"] = f"AmoCRM –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}"
    
    # === –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –ö–û–ù–¢–ê–ö–¢–ê–ú–ò ===
    
    async def _find_contact_by_telegram_id(self, telegram_id: str) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ Telegram ID"""
        # –ò—â–µ–º —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ telegram_id
        endpoint = f"/api/v4/contacts"
        params = {"query": telegram_id}
        
        result = await self._make_request("GET", endpoint, params=params)
        
        if result["success"] and result["data"].get("_embedded", {}).get("contacts"):
            contacts = result["data"]["_embedded"]["contacts"]
            
            # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ telegram_id –≤ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª—è—Ö
            for contact in contacts:
                custom_fields = contact.get("custom_fields_values", [])
                for field in custom_fields:
                    if field.get("field_name") == "telegram_id":
                        values = field.get("values", [])
                        for value in values:
                            if str(value.get("value")) == str(telegram_id):
                                return {
                                    "success": True,
                                    "contact": contact,
                                    "found": True
                                }
            
            return {"success": True, "contact": None, "found": False}
        
        return {"success": False, "error": result.get("error", "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")}
    
    async def _find_contact_by_phone(self, phone: str) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
        endpoint = f"/api/v4/contacts"
        params = {"query": phone}
        
        result = await self._make_request("GET", endpoint, params=params)
        
        if result["success"] and result["data"].get("_embedded", {}).get("contacts"):
            contacts = result["data"]["_embedded"]["contacts"]
            return {
                "success": True,
                "contact": contacts[0] if contacts else None,
                "found": len(contacts) > 0
            }
        
        return {"success": False, "error": result.get("error", "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")}
    
    async def _find_contact_by_email(self, email: str) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ email"""
        endpoint = f"/api/v4/contacts"
        params = {"query": email}
        
        result = await self._make_request("GET", endpoint, params=params)
        
        if result["success"] and result["data"].get("_embedded", {}).get("contacts"):
            contacts = result["data"]["_embedded"]["contacts"]
            return {
                "success": True,
                "contact": contacts[0] if contacts else None,
                "found": len(contacts) > 0
            }
        
        return {"success": False, "error": result.get("error", "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")}
    
    async def _search_contacts(self, query: str) -> Dict[str, Any]:
        """–û–±—â–∏–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        endpoint = f"/api/v4/contacts"
        params = {"query": query}
        
        result = await self._make_request("GET", endpoint, params=params)
        
        if result["success"]:
            contacts = result["data"].get("_embedded", {}).get("contacts", [])
            return {
                "success": True,
                "contacts": contacts,
                "count": len(contacts)
            }
        
        return {"success": False, "error": result.get("error", "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")}
    
    async def _create_contact(self, name: str = "", first_name: str = "", last_name: str = "", 
                            custom_fields: Dict[str, Any] = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        contact_data = {}
        
        # –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if name:
            contact_data["name"] = name
        elif first_name or last_name:
            contact_data["name"] = f"{first_name} {last_name}".strip()
        
        if first_name:
            contact_data["first_name"] = first_name
        if last_name:
            contact_data["last_name"] = last_name
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
        if custom_fields:
            contact_data["custom_fields_values"] = self._prepare_custom_fields(custom_fields)
        
        endpoint = "/api/v4/contacts"
        payload = [contact_data]
        
        result = await self._make_request("POST", endpoint, json=payload)
        
        if result["success"] and result["data"].get("_embedded", {}).get("contacts"):
            contact = result["data"]["_embedded"]["contacts"][0]
            return {
                "success": True,
                "contact": contact,
                "contact_id": contact["id"]
            }
        
        return {"success": False, "error": result.get("error", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞")}
    
    async def _update_contact(self, contact_id: int, update_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        contact_data = {"id": contact_id}
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        for field in ["name", "first_name", "last_name"]:
            if field in update_data:
                contact_data[field] = update_data[field]
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
        custom_fields = {k: v for k, v in update_data.items() 
                        if k not in ["name", "first_name", "last_name"]}
        if custom_fields:
            contact_data["custom_fields_values"] = self._prepare_custom_fields(custom_fields)
        
        endpoint = "/api/v4/contacts"
        payload = [contact_data]
        
        result = await self._make_request("PATCH", endpoint, json=payload)
        
        if result["success"]:
            return {
                "success": True,
                "contact_id": contact_id,
                "updated": True
            }
        
        return {"success": False, "error": result.get("error", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞")}
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–î–ï–õ–û–ö (–†–ê–°–®–ò–†–ï–ù–ù–´–ï) ===
    
    async def _handle_update_lead(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ AmoCRM"""
        params = step_data.get("params", {})
        
        try:
            lead_id = self._resolve_value(params.get("lead_id", ""), context)
            update_data = params.get("update_data", {})
            output_var = params.get("output_var", "updated_lead")
            
            # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            for key, value in update_data.items():
                update_data[key] = self._resolve_value(value, context)
            
            if not lead_id:
                context[output_var] = {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω lead_id"}
                return
            
            result = await self._update_lead_data(lead_id, update_data)
            context[output_var] = result
            
            if result.get("success"):
                logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {lead_id}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            context["__step_error__"] = f"AmoCRM –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏: {str(e)}"

    async def _handle_delete_lead(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        params = step_data.get("params", {})
        
        try:
            lead_id = self._resolve_value(params.get("lead_id", ""), context)
            output_var = params.get("output_var", "delete_result")
            
            if not lead_id:
                context[output_var] = {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω lead_id"}
                return
            
            endpoint = f"/api/v4/leads/{lead_id}"
            result = await self._make_request("DELETE", endpoint)
            
            if result["success"]:
                context[output_var] = {
                    "success": True,
                    "deleted": True,
                    "lead_id": lead_id
                }
                logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {lead_id}")
            else:
                context[output_var] = result
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ {lead_id}: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            context["__step_error__"] = f"AmoCRM —É–¥–∞–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏: {str(e)}"

    async def _handle_get_lead(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ ID"""
        params = step_data.get("params", {})
        
        try:
            lead_id = self._resolve_value(params.get("lead_id", ""), context)
            output_var = params.get("output_var", "lead")
            with_fields = params.get("with", [])
            
            if not lead_id:
                context[output_var] = {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω lead_id"}
                return
            
            query_params = {}
            if with_fields:
                query_params["with"] = ",".join(with_fields)
            
            endpoint = f"/api/v4/leads/{lead_id}"
            result = await self._make_request("GET", endpoint, params=query_params)
            
            if result["success"]:
                context[output_var] = {
                    "success": True,
                    "lead": result["data"]
                }
                logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {lead_id}")
            else:
                context[output_var] = result
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ {lead_id}: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            context["__step_error__"] = f"AmoCRM –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏: {str(e)}"

    async def _handle_list_leads(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫"""
        params = step_data.get("params", {})
        
        try:
            output_var = params.get("output_var", "leads")
            limit = params.get("limit", 250)
            page = params.get("page", 1)
            with_fields = params.get("with", [])
            filter_params = params.get("filter", {})
            order = params.get("order", {})
            
            query_params = {
                "limit": limit,
                "page": page
            }
            
            if with_fields:
                query_params["with"] = ",".join(with_fields)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            for key, value in filter_params.items():
                resolved_value = self._resolve_value(value, context)
                query_params[f"filter[{key}]"] = resolved_value
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            for key, value in order.items():
                query_params[f"order[{key}]"] = value
            
            endpoint = "/api/v4/leads"
            result = await self._make_request("GET", endpoint, params=query_params)
            
            if result["success"]:
                leads = result["data"].get("_embedded", {}).get("leads", [])
                context[output_var] = {
                    "success": True,
                    "leads": leads,
                    "count": len(leads),
                    "page_info": result["data"].get("_page", {})
                }
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫: {len(leads)} —à—Ç.")
            else:
                context[output_var] = result
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫: {e}")
            context["__step_error__"] = f"AmoCRM —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫: {str(e)}"

    async def _update_lead_data(self, lead_id: int, update_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–¥–µ–ª–∫–∏"""
        lead_data = {"id": lead_id}
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        for field in ["name", "price", "pipeline_id", "status_id", "responsible_user_id"]:
            if field in update_data:
                lead_data[field] = update_data[field]
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
        custom_fields = {k: v for k, v in update_data.items() 
                        if k not in ["name", "price", "pipeline_id", "status_id", "responsible_user_id"]}
        if custom_fields:
            lead_data["custom_fields_values"] = self._prepare_custom_fields(custom_fields)
        
        endpoint = "/api/v4/leads"
        payload = [lead_data]
        
        result = await self._make_request("PATCH", endpoint, json=payload)
        
        if result["success"]:
            return {
                "success": True,
                "lead_id": lead_id,
                "updated": True
            }
        
        return {"success": False, "error": result.get("error", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏")}

    # === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    async def _handle_get_account(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ AmoCRM"""
        params = step_data.get("params", {})
        
        try:
            output_var = params.get("output_var", "account")
            with_fields = params.get("with", [])
            
            query_params = {}
            if with_fields:
                query_params["with"] = ",".join(with_fields)
            
            endpoint = "/api/v4/account"
            result = await self._make_request("GET", endpoint, params=query_params)
            
            if result["success"]:
                context[output_var] = {
                    "success": True,
                    "account": result["data"]
                }
                account_name = result["data"].get("name", "Unknown")
                logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞: {account_name}")
            else:
                context[output_var] = result
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")
            context["__step_error__"] = f"AmoCRM –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {str(e)}" 