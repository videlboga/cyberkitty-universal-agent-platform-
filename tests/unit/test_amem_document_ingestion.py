"""
üß™ –¢–µ—Å—Ç—ã A-MEM Document Ingestion

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è A-MEM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.
"""

import pytest
import asyncio
import tempfile
import os
from pathlib import Path

from kittycore.memory.amem_document_ingestion import (
    AMEMDocumentIngestion, 
    DocumentProcessor,
    get_amem_document_ingestion
)

class TestDocumentProcessor:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def test_extract_text_from_txt(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ TXT —Ñ–∞–π–ª–∞"""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
            f.write("–¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞.")
            temp_path = f.name
        
        try:
            text = DocumentProcessor.extract_text_from_txt(temp_path)
            assert "–¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç" in text
            assert "–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞" in text
        finally:
            os.unlink(temp_path)
    
    def test_extract_text_from_nonexistent_file(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
        text = DocumentProcessor.extract_text_from_txt("/nonexistent/file.txt")
        assert text == ""

@pytest.mark.asyncio
class TestAMEMDocumentIngestion:
    """–¢–µ—Å—Ç—ã A-MEM Document Ingestion"""
    
    @pytest.fixture
    async def temp_vault(self):
        """–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        with tempfile.TemporaryDirectory() as temp_dir:
            yield temp_dir
    
    @pytest.fixture  
    async def ingestion_system(self, temp_vault):
        """–°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        return AMEMDocumentIngestion(vault_path=temp_vault)
    
    @pytest.fixture
    async def sample_txt_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ TXT —Ñ–∞–π–ª–∞"""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
            f.write("""# –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ A-MEM Document Ingestion.

## –†–∞–∑–¥–µ–ª 1
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ —Å –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.

## –†–∞–∑–¥–µ–ª 2  
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ç–æ—Ä–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.

–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: —Ç–µ—Å—Ç, –¥–æ–∫—É–º–µ–Ω—Ç, A-MEM, —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
""")
            temp_path = f.name
        
        yield temp_path
        os.unlink(temp_path)
    
    async def test_ingest_single_file(self, ingestion_system, sample_txt_file):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            memory_id = await ingestion_system.ingest_file(
                file_path=sample_txt_file,
                category="test_document",
                metadata={"test": True, "author": "pytest"}
            )
            
            assert memory_id is not None
            assert isinstance(memory_id, str)
            assert len(memory_id) > 0
            
            print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ A-MEM: {memory_id}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (–æ–∂–∏–¥–∞–µ–º–æ –≤ fallback —Ä–µ–∂–∏–º–µ): {e}")
            # –í fallback —Ä–µ–∂–∏–º–µ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            pass
    
    async def test_search_documents(self, ingestion_system, sample_txt_file):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            await ingestion_system.ingest_file(sample_txt_file, category="test")
            
            # –ò—â–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            results = await ingestion_system.search_documents(
                query="—Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
                limit=3
            )
            
            assert isinstance(results, list)
            # –í fallback —Ä–µ–∂–∏–º–µ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(results)}")
            
            if results:
                result = results[0]
                assert 'content' in result or 'context' in result
                print(f"‚úÖ –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ –≤ fallback —Ä–µ–∂–∏–º–µ): {e}")
            pass
    
    async def test_get_document_stats(self, ingestion_system, sample_txt_file):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            await ingestion_system.ingest_file(sample_txt_file, category="test")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await ingestion_system.get_document_stats()
            
            assert isinstance(stats, dict)
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            expected_fields = ["total_documents", "categories", "file_types"]
            for field in expected_fields:
                assert field in stats or "error" in stats
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–∂–∏–¥–∞–µ–º–æ –≤ fallback —Ä–µ–∂–∏–º–µ): {e}")
            pass
    
    async def test_ingest_directory(self, ingestion_system, temp_vault):
        """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            test_dir = Path(temp_vault) / "test_docs"
            test_dir.mkdir()
            
            # –§–∞–π–ª 1
            (test_dir / "doc1.txt").write_text("–ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
            # –§–∞–π–ª 2  
            (test_dir / "doc2.txt").write_text("–í—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
            # –§–∞–π–ª 3 (Markdown)
            (test_dir / "doc3.md").write_text("# Markdown –¥–æ–∫—É–º–µ–Ω—Ç\n–¢—Ä–µ—Ç–∏–π –¥–æ–∫—É–º–µ–Ω—Ç")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            memory_ids = await ingestion_system.ingest_directory(
                directory_path=str(test_dir),
                file_patterns=["*.txt", "*.md"]
            )
            
            assert isinstance(memory_ids, list)
            print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {len(memory_ids)}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (–æ–∂–∏–¥–∞–µ–º–æ –≤ fallback —Ä–µ–∂–∏–º–µ): {e}")
            pass
    
    async def test_knowledge_base_creation(self, ingestion_system, sample_txt_file, temp_vault):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è knowledge base"""
        try:
            await ingestion_system.ingest_file(sample_txt_file, category="test")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ knowledge –ø–∞–ø–∫–∏
            knowledge_dir = Path(temp_vault) / "knowledge"
            assert knowledge_dir.exists()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ markdown —Ñ–∞–π–ª–∞
            md_files = list(knowledge_dir.glob("*.md"))
            print(f"üìö –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ knowledge base: {len(md_files)}")
            
            if md_files:
                md_content = md_files[0].read_text()
                assert "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ" in md_content
                assert "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ" in md_content
                print("‚úÖ Knowledge base —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ knowledge base (–æ–∂–∏–¥–∞–µ–º–æ –≤ fallback —Ä–µ–∂–∏–º–µ): {e}")
            pass

class TestFactoryFunction:
    """–¢–µ—Å—Ç—ã —Ñ–∞–±—Ä–∏—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    def test_get_amem_document_ingestion(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é"""
        with tempfile.TemporaryDirectory() as temp_dir:
            system = get_amem_document_ingestion(vault_path=temp_dir)
            assert isinstance(system, AMEMDocumentIngestion)
            assert system.vault_path == Path(temp_dir)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    async def run_tests():
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ A-MEM Document Ingestion...")
        
        with tempfile.TemporaryDirectory() as temp_vault:
            system = AMEMDocumentIngestion(vault_path=temp_vault)
            
            # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
                f.write("–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è A-MEM")
                test_file = f.name
            
            try:
                # –¢–µ—Å—Ç 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
                memory_id = await system.ingest_file(test_file, category="test")
                print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {memory_id}")
                
                # –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫
                results = await system.search_documents("—Ç–µ—Å—Ç–æ–≤—ã–π")
                print(f"‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                # –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                stats = await system.get_document_stats()
                print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {stats}")
                
            finally:
                os.unlink(test_file)
            
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(run_tests())