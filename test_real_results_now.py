#!/usr/bin/env python3
"""–†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ - –ù–ò–ö–ê–ö–ò–• –û–¢–ß–Å–¢–û–í!"""

import asyncio
import os
import sys
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º KittyCore
sys.path.append('/home/cyberkitty/Project/kittycore')

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig


def setup_aggressive_llm():
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ù–ê–°–¢–û–Ø–©–ò–• —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    strategies = [
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        {
            "model": "google/gemini-2.5-flash-lite-preview-06-17",  # –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è
            "timeout": "15",
            "max_tokens": "1000",
            "temperature": "0"
        },
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
        {
            "model": "deepseek/deepseek-r1-0528:free",
            "timeout": "20", 
            "max_tokens": "1500",
            "temperature": "0.1"
        },
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        {
            "model": "google/gemini-2.5-flash",
            "timeout": "10",
            "max_tokens": "500", 
            "temperature": "0"
        }
    ]
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    strategy = strategies[0]
    
    os.environ["OPENROUTER_API_KEY"] = os.getenv("OPENROUTER_API_KEY", "")
    os.environ["LLM_MODEL"] = strategy["model"]
    os.environ["TIMEOUT"] = strategy["timeout"]
    os.environ["MAX_TOKENS"] = strategy["max_tokens"]
    os.environ["TEMPERATURE"] = strategy["temperature"]
    
    print("‚ö° –ê–ì–†–ï–°–°–ò–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò LLM:")
    print(f"   –ú–æ–¥–µ–ª—å: {strategy['model']}")
    print(f"   –¢–∞–π–º–∞—É—Ç: {strategy['timeout']}—Å (–æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π)")
    print(f"   –¢–æ–∫–µ–Ω—ã: {strategy['max_tokens']} (–º–∏–Ω–∏–º—É–º)")
    print(f"   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {strategy['temperature']} (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å)")


async def test_real_results():
    """–¢–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ù–ê–°–¢–û–Ø–©–ò–• —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    print("\n" + "="*70)
    print("üéØ –¢–ï–°–¢ –ù–ê–°–¢–û–Ø–©–ò–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í - –ù–ò–ö–ê–ö–ò–• –û–¢–ß–Å–¢–û–í!")
    print("="*70)
    
    setup_aggressive_llm()
    
    # –ü–†–û–°–¢–ï–ô–®–ê–Ø –∑–∞–¥–∞—á–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞
    task = "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello.py —Å print('Hello World')"
    vault_path = "vault_real_world"
    
    print(f"\nüìã –ó–ê–î–ê–ß–ê: {task}")
    print(f"üìÇ VAULT: {vault_path}")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–µ–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    config = UnifiedConfig(
        vault_path=vault_path,
        max_agents=1,  # –ú–∏–Ω–∏–º—É–º –∞–≥–µ–Ω—Ç–æ–≤
        timeout=60,    # –ö–æ—Ä–æ—Ç–∫–∏–π –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç
        enable_human_intervention=False,  # –ë–µ–∑ —á–µ–ª–æ–≤–µ–∫–∞
        enable_smart_validation=False,    # –ë–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∫–∞
        enable_metrics=False,             # –ë–µ–∑ –º–µ—Ç—Ä–∏–∫
        enable_vector_memory=False,       # –ë–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏
        enable_amem_memory=False,         # –ë–µ–∑ A-MEM –ø–æ–∫–∞
        enable_shared_chat=False,         # –ë–µ–∑ —á–∞—Ç–∞
        enable_tool_adaptation=False      # –ë–µ–∑ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
    )
    
    orchestrator = UnifiedOrchestrator(config=config)
    
    start_time = time.time()
    
    try:
        print("\nüöÄ –ó–ê–ü–£–°–ö –° –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ú–ò –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò...")
        
        # –ì–ª–∞–≤–Ω—ã–π —Ç–µ—Å—Ç
        result = await orchestrator.solve_task(task)
        
        execution_time = time.time() - start_time
        print(f"\n‚è±Ô∏è –í–†–ï–ú–Ø: {execution_time:.2f}—Å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –†–ï–ê–õ–¨–ù–´–ï —Ñ–∞–π–ª—ã
        import glob
        all_files = glob.glob(f"{vault_path}/**/*", recursive=True)
        real_files = [f for f in all_files if os.path.isfile(f)]
        
        print(f"\nüìÅ –°–û–ó–î–ê–ù–û –§–ê–ô–õ–û–í: {len(real_files)}")
        
        # –ò—â–µ–º hello.py
        hello_files = [f for f in real_files if 'hello.py' in f]
        
        if hello_files:
            print(f"‚úÖ –ù–ê–®–õ–ò hello.py: {hello_files[0]}")
            
            # –ß–ò–¢–ê–ï–ú –°–û–î–ï–†–ñ–ò–ú–û–ï
            with open(hello_files[0], 'r') as f:
                content = f.read()
                print(f"üìÑ –°–û–î–ï–†–ñ–ò–ú–û–ï hello.py:")
                print("="*50)
                print(content)
                print("="*50)
                
                if "print" in content and "Hello" in content:
                    print("üéâ –ù–ê–°–¢–û–Ø–©–ò–ô –ö–û–î! –ù–ï –û–¢–ß–Å–¢!")
                    return {'success': True, 'real_content': True}
                else:
                    print("üòû –≠—Ç–æ –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ–¥...")
                    return {'success': False, 'real_content': False}
        else:
            print("‚ùå hello.py –ù–ï –ù–ê–ô–î–ï–ù")
            
            # –ü–æ–∫–∞–∂–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª–æ—Å—å
            print("\nüìÇ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
            for f in real_files[:10]:
                print(f"   üìÑ {f}")
            
            return {'success': False, 'files_created': len(real_files)}
        
    except Exception as e:
        execution_time = time.time() - start_time
        print(f"\nüí• –û–®–ò–ë–ö–ê: {e}")
        print(f"‚è±Ô∏è –í–†–ï–ú–Ø –î–û –û–®–ò–ë–ö–ò: {execution_time:.2f}—Å")
        
        return {'success': False, 'error': str(e)}


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üê± KittyCore 3.0 - –†–ï–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–õ–ò –°–ú–ï–†–¢–¨!")
    print("=" * 70)
    
    if not os.getenv("OPENROUTER_API_KEY"):
        print("‚ùå –ù–£–ñ–ï–ù OPENROUTER_API_KEY")
        return
    
    result = await test_real_results()
    
    print("\n" + "="*70)
    print("üèÜ –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢:")
    print("="*70)
    
    if result.get('success') and result.get('real_content'):
        print("üéâ –ü–û–ë–ï–î–ê! –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–ª–∞ –ù–ê–°–¢–û–Ø–©–ò–ô –ö–û–î!")
        print("   KittyCore 3.0 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞–¥–æ!")
    elif result.get('success'):
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π")
    else:
        print("üíÄ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞ —Å–æ–∑–¥–∞—ë—Ç —Ç–æ–ª—å–∫–æ –æ—Ç—á—ë—Ç—ã –æ —Ä–∞–±–æ—Ç–µ...")
        print("   –¢—ã –ø—Ä–∞–≤ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–æ–≤ üòû")


if __name__ == "__main__":
    asyncio.run(main()) 