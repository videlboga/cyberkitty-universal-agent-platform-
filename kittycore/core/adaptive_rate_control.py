#!/usr/bin/env python3
"""
üöÄ Adaptive Rate Control - –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é –∑–∞–ø—Ä–æ—Å–æ–≤

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã 2024:
- Circuit Breakers –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ
- Exponential Backoff —Å jitter –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è thundering herd
- Provider Switching —Å fallback –º–µ–∂–¥—É LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
- Smart Batching –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
- –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

–ü—Ä–∏–Ω—Ü–∏–ø: "–°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –Ω–∞–≥—Ä—É–∑–∫–µ –∏ –Ω–µ –ø–∞–¥–∞–µ—Ç" üîÑ
"""

import asyncio
import time
import random
import hashlib
import json
from typing import Dict, List, Any, Optional, Callable
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
from enum import Enum
import logging

logger = logging.getLogger(__name__)

class CircuitState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è Circuit Breaker"""
    CLOSED = "closed"      # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    OPEN = "open"          # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    HALF_OPEN = "half_open"  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

@dataclass
class RateLimitConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è rate limiting"""
    requests_per_second: float = 2.0
    burst_size: int = 5
    backoff_base: float = 1.0
    backoff_max: float = 60.0
    circuit_failure_threshold: int = 5
    circuit_recovery_timeout: int = 30
    jitter_factor: float = 0.1

@dataclass
class RequestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
    success: bool
    duration: float
    error: Optional[str] = None
    provider: Optional[str] = None
    cached: bool = False
    retries: int = 0

class CircuitBreaker:
    """Circuit Breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏"""
    
    def __init__(self, config: RateLimitConfig, provider_name: str):
        self.config = config
        self.provider_name = provider_name
        self.state = CircuitState.CLOSED
        self.failure_count = 0
        self.last_failure_time = None
        self.success_count = 0
        
    def can_execute(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"""
        
        if self.state == CircuitState.CLOSED:
            return True
        elif self.state == CircuitState.OPEN:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            if (self.last_failure_time and 
                time.time() - self.last_failure_time > self.config.circuit_recovery_timeout):
                self.state = CircuitState.HALF_OPEN
                logger.info(f"üîÑ Circuit breaker {self.provider_name}: –ø–µ—Ä–µ—Ö–æ–¥ –≤ HALF_OPEN")
                return True
            return False
        else:  # HALF_OPEN
            return True
    
    def record_success(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        if self.state == CircuitState.HALF_OPEN:
            self.success_count += 1
            if self.success_count >= 3:  # 3 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.state = CircuitState.CLOSED
                self.failure_count = 0
                self.success_count = 0
                logger.info(f"‚úÖ Circuit breaker {self.provider_name}: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (CLOSED)")
        elif self.state == CircuitState.CLOSED:
            self.failure_count = max(0, self.failure_count - 1)  # –°–Ω–∏–∂–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    
    def record_failure(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –Ω–µ—É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        self.failure_count += 1
        self.last_failure_time = time.time()
        
        if self.failure_count >= self.config.circuit_failure_threshold:
            self.state = CircuitState.OPEN
            logger.warning(f"‚ö†Ô∏è Circuit breaker {self.provider_name}: –û–¢–ö–†–´–¢ (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫)")

class ExponentialBackoff:
    """Exponential Backoff —Å jitter"""
    
    def __init__(self, config: RateLimitConfig):
        self.config = config
        self.attempt_count = 0
    
    def get_delay(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏"""
        if self.attempt_count == 0:
            return 0
        
        # Exponential backoff
        delay = self.config.backoff_base * (2 ** (self.attempt_count - 1))
        delay = min(delay, self.config.backoff_max)
        
        # –î–æ–±–∞–≤–ª—è–µ–º jitter –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è thundering herd
        jitter = delay * self.config.jitter_factor * random.random()
        final_delay = delay + jitter
        
        logger.debug(f"‚è≥ Exponential backoff: –ø–æ–ø—ã—Ç–∫–∞ {self.attempt_count}, –∑–∞–¥–µ—Ä–∂–∫–∞ {final_delay:.2f}—Å")
        return final_delay
    
    def next_attempt(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫"""
        self.attempt_count += 1
    
    def reset(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫"""
        self.attempt_count = 0

class TokenBucket:
    """Token Bucket –¥–ª—è rate limiting"""
    
    def __init__(self, capacity: int, refill_rate: float):
        self.capacity = capacity
        self.tokens = capacity
        self.refill_rate = refill_rate
        self.last_refill = time.time()
    
    def consume(self, tokens: int = 1) -> bool:
        """–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã"""
        self._refill()
        
        if self.tokens >= tokens:
            self.tokens -= tokens
            return True
        return False
    
    def _refill(self):
        """–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã"""
        now = time.time()
        time_passed = now - self.last_refill
        tokens_to_add = time_passed * self.refill_rate
        
        self.tokens = min(self.capacity, self.tokens + tokens_to_add)
        self.last_refill = now
    
    def get_wait_time(self, tokens: int = 1) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
        self._refill()
        
        if self.tokens >= tokens:
            return 0
        
        tokens_needed = tokens - self.tokens
        return tokens_needed / self.refill_rate

class ResponseCache:
    """–ö–µ—à –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    def __init__(self, max_size: int = 1000, ttl_seconds: int = 3600):
        self.cache: Dict[str, Dict] = {}
        self.max_size = max_size
        self.ttl_seconds = ttl_seconds
    
    def _get_cache_key(self, request_data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á –∫–µ—à–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–µ—à –æ—Ç –∑–∞–ø—Ä–æ—Å–∞
        request_str = json.dumps(request_data, sort_keys=True)
        return hashlib.md5(request_str.encode()).hexdigest()
    
    def get(self, request_data: Dict[str, Any]) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–∑ –∫–µ—à–∞"""
        cache_key = self._get_cache_key(request_data)
        
        if cache_key in self.cache:
            entry = self.cache[cache_key]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
            if time.time() - entry['timestamp'] < self.ttl_seconds:
                logger.debug(f"üíæ Cache HIT –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {cache_key[:8]}...")
                return entry['response']
            else:
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∑–∞–ø–∏—Å—å
                del self.cache[cache_key]
        
        return None
    
    def put(self, request_data: Dict[str, Any], response: Any):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –∫–µ—à"""
        cache_key = self._get_cache_key(request_data)
        
        # –ï—Å–ª–∏ –∫–µ—à –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        if len(self.cache) >= self.max_size:
            # –£–¥–∞–ª—è–µ–º 20% —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            sorted_entries = sorted(self.cache.items(), key=lambda x: x[1]['timestamp'])
            entries_to_remove = int(self.max_size * 0.2)
            for key, _ in sorted_entries[:entries_to_remove]:
                del self.cache[key]
        
        self.cache[cache_key] = {
            'response': response,
            'timestamp': time.time()
        }
        logger.debug(f"üíæ Cache SET –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {cache_key[:8]}...")

@dataclass
class RequestPriority:
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–ø—Ä–æ—Å–∞"""
    HIGH = 3
    MEDIUM = 2
    LOW = 1

@dataclass
class PrioritizedRequest:
    """–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
    request_data: Dict[str, Any]
    priority: int
    callback: Callable
    future: asyncio.Future
    timestamp: float
    
class RequestQueue:
    """–û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.queue: List[PrioritizedRequest] = []
        self.processing = False
    
    async def add_request(self, request_data: Dict[str, Any], 
                         priority: int = RequestPriority.MEDIUM,
                         callback: Callable = None) -> Any:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å"""
        
        future = asyncio.Future()
        request = PrioritizedRequest(
            request_data=request_data,
            priority=priority,
            callback=callback,
            future=future,
            timestamp=time.time()
        )
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        inserted = False
        for i, existing_request in enumerate(self.queue):
            if request.priority > existing_request.priority:
                self.queue.insert(i, request)
                inserted = True
                break
        
        if not inserted:
            self.queue.append(request)
        
        logger.debug(f"üìù –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}, –ø–æ–∑–∏—Ü–∏—è: {len(self.queue)})")
        return await future

class AdaptiveRateController:
    """–ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ rate limiting"""
    
    def __init__(self, config: RateLimitConfig = None):
        self.config = config or RateLimitConfig()
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.circuit_breakers: Dict[str, CircuitBreaker] = {}
        self.token_buckets: Dict[str, TokenBucket] = {}
        self.backoff_managers: Dict[str, ExponentialBackoff] = {}
        self.cache = ResponseCache()
        self.request_queue = RequestQueue()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'cached_responses': 0,
            'circuit_breaks': 0,
            'backoff_delays': 0
        }
        
        logger.info("üöÄ Adaptive Rate Controller –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _get_or_create_components(self, provider: str):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if provider not in self.circuit_breakers:
            self.circuit_breakers[provider] = CircuitBreaker(self.config, provider)
            self.token_buckets[provider] = TokenBucket(
                self.config.burst_size, 
                self.config.requests_per_second
            )
            self.backoff_managers[provider] = ExponentialBackoff(self.config)
    
    async def execute_request(self, provider: str, request_data: Dict[str, Any],
                            execute_func: Callable, priority: int = RequestPriority.MEDIUM) -> RequestResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º rate limiting"""
        
        self.stats['total_requests'] += 1
        self._get_or_create_components(provider)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cached_response = self.cache.get(request_data)
        if cached_response is not None:
            self.stats['cached_responses'] += 1
            return RequestResult(success=True, duration=0.0, cached=True)
        
        circuit_breaker = self.circuit_breakers[provider]
        token_bucket = self.token_buckets[provider]
        backoff = self.backoff_managers[provider]
        
        start_time = time.time()
        max_retries = 3
        
        for attempt in range(max_retries + 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker
            if not circuit_breaker.can_execute():
                self.stats['circuit_breaks'] += 1
                return RequestResult(
                    success=False,
                    duration=time.time() - start_time,
                    error=f"Circuit breaker OPEN –¥–ª—è {provider}",
                    provider=provider,
                    retries=attempt
                )
            
            # –ñ–¥–µ–º —Ç–æ–∫–µ–Ω—ã
            wait_time = token_bucket.get_wait_time()
            if wait_time > 0:
                logger.debug(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: {wait_time:.2f}—Å")
                await asyncio.sleep(wait_time)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            if not token_bucket.consume():
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è {provider}")
                continue
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º exponential backoff –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
            if attempt > 0:
                delay = backoff.get_delay()
                if delay > 0:
                    self.stats['backoff_delays'] += 1
                    await asyncio.sleep(delay)
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                response = await execute_func(request_data)
                
                # –£—Å–ø–µ—Ö - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º backoff
                self.cache.put(request_data, response)
                circuit_breaker.record_success()
                backoff.reset()
                self.stats['successful_requests'] += 1
                
                return RequestResult(
                    success=True,
                    duration=time.time() - start_time,
                    provider=provider,
                    retries=attempt
                )
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                circuit_breaker.record_failure()
                backoff.next_attempt()
                
                if attempt == max_retries:
                    return RequestResult(
                        success=False,
                        duration=time.time() - start_time,
                        error=str(e),
                        provider=provider,
                        retries=attempt
                    )
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã"""
        
        circuit_states = {name: cb.state.value for name, cb in self.circuit_breakers.items()}
        token_levels = {name: tb.tokens for name, tb in self.token_buckets.items()}
        
        success_rate = (self.stats['successful_requests'] / 
                       max(1, self.stats['total_requests'])) * 100
        
        cache_hit_rate = (self.stats['cached_responses'] / 
                         max(1, self.stats['total_requests'])) * 100
        
        return {
            'stats': self.stats,
            'success_rate': f"{success_rate:.1f}%",
            'cache_hit_rate': f"{cache_hit_rate:.1f}%",
            'circuit_states': circuit_states,
            'token_levels': token_levels,
            'cache_size': len(self.cache.cache)
        }
    
    def reset_circuit_breaker(self, provider: str):
        """–°–±—Ä–æ—Å–∏—Ç—å circuit breaker –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if provider in self.circuit_breakers:
            cb = self.circuit_breakers[provider]
            cb.state = CircuitState.CLOSED
            cb.failure_count = 0
            cb.success_count = 0
            logger.info(f"üîÑ Circuit breaker {provider} —Å–±—Ä–æ—à–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
_rate_controller = None

def get_rate_controller() -> AdaptiveRateController:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä rate controller"""
    global _rate_controller
    if _rate_controller is None:
        _rate_controller = AdaptiveRateController()
    return _rate_controller 