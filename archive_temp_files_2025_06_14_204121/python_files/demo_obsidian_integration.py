#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ KittyCore 3.0 —Å Obsidian
"""

import asyncio
import os
from pathlib import Path
from kittycore.obsidian_integration import ObsidianAdapter, ObsidianConfig


async def demo_obsidian_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Obsidian"""
    
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è KittyCore 3.0 + Obsidian Integration")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ vault (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –¥–µ–º–æ)
    demo_vault = Path("./demo_vault")
    
    config = ObsidianConfig(
        vault_path=str(demo_vault),
        notes_folder="KittyCore",
        auto_link=True,
        execute_code=True
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞
    adapter = ObsidianAdapter(config)
    
    print(f"üìÅ –°–æ–∑–¥–∞–Ω –¥–µ–º–æ-vault: {demo_vault}")
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∞–≥–µ–Ω—Ç–∞
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∞–≥–µ–Ω—Ç–∞ Nova...")
    
    agent_data = {
        "description": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é",
        "type": "analytical",
        "capabilities": ["data_analysis", "machine_learning", "visualization"],
        "tasks_completed": 15,
        "success_rate": 92.3
    }
    
    nova_note = await adapter.create_agent_note("Nova", agent_data)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ –∞–≥–µ–Ω—Ç–∞: {nova_note}")
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏
    print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏...")
    
    task_data = {
        "title": "–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
        "description": "–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤",
        "status": "in_progress",
        "priority": "high",
        "assigned_agents": ["Nova"],
        "type": "analysis",
        "code": """
import pandas as pd
import matplotlib.pyplot as plt

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = pd.read_csv('user_logs.csv')
print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")

# –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º
hourly_activity = data.groupby('hour').size()
print("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º:")
print(hourly_activity)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
plt.figure(figsize=(10, 6))
hourly_activity.plot(kind='bar')
plt.title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —á–∞—Å–∞–º')
plt.show()
"""
    }
    
    task_note = await adapter.create_task_note("TASK-001", task_data)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏: {task_note}")
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
    
    result_data = {
        "title": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
        "description": "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ 9:00 –∏ 18:00",
        "status": "completed",
        "success": True,
        "quality_score": 8.5,
        "execution_time": "00:05:23",
        "output": """–ó–∞–≥—Ä—É–∂–µ–Ω–æ 10000 –∑–∞–ø–∏—Å–µ–π
–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º:
9    1200
12   800
15   900
18   1500
21   600""",
        "files": ["user_activity_chart.png"],
        "reviewed_by": "Artemis-Agent",
        "review_status": "approved"
    }
    
    result_note = await adapter.create_result_note("TASK-001", "Nova", result_data)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result_note}")
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞
    print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞...")
    
    report_data = {
        "title": "–û—Ç—á—ë—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
        "summary": "–£—Å–ø–µ—à–Ω–æ –≤—ã—è–≤–ª–µ–Ω—ã –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "overall_success": True,
        "overall_quality": 8.5,
        "execution_time": "00:05:23",
        "agents": [
            {"name": "Nova", "tasks_completed": 1, "success_rate": 100}
        ],
        "conclusions": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –º–æ—â–Ω–æ—Å—Ç–∏ –≤ —á–∞—Å—ã –ø–∏–∫"
    }
    
    report_note = await adapter.create_report_note("TASK-001", report_data)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç: {report_note}")
    
    # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∞
    print("\n5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–µ–π...")
    
    graph_data = await adapter.get_graph_data()
    nodes_count = len(graph_data.get("nodes", []))
    edges_count = len(graph_data.get("edges", []))
    
    print(f"üìä –ì—Ä–∞—Ñ —Å–æ–¥–µ—Ä–∂–∏—Ç {nodes_count} —É–∑–ª–æ–≤ –∏ {edges_count} —Å–≤—è–∑–µ–π")
    
    # 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã vault
    print("\n6Ô∏è‚É£ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ vault:")
    print_directory_tree(demo_vault)
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÇ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {demo_vault}")
    print("üí° –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–ø–∫—É –≤ Obsidian —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≥—Ä–∞—Ñ —Å–≤—è–∑–µ–π!")


def print_directory_tree(path: Path, prefix: str = ""):
    """–ü–µ—á–∞—Ç—å –¥–µ—Ä–µ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    if not path.exists():
        return
        
    items = sorted(path.iterdir())
    
    for i, item in enumerate(items):
        is_last = i == len(items) - 1
        current_prefix = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "
        print(f"{prefix}{current_prefix}{item.name}")
        
        if item.is_dir():
            extension = "    " if is_last else "‚îÇ   "
            print_directory_tree(item, prefix + extension)


if __name__ == "__main__":
    asyncio.run(demo_obsidian_integration()) 