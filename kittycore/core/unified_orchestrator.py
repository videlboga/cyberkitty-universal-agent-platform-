"""
üß≠ UnifiedOrchestrator - –ï–¥–∏–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä KittyCore 3.0

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—É—á—à–∏–µ —á–∞—Å—Ç–∏ OrchestratorAgent –∏ ObsidianOrchestrator:
‚úÖ Obsidian-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
‚úÖ SharedChat –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤  
‚úÖ SmartValidator –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∏ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –∏ –ø–æ–∏—Å–∫
‚úÖ Human-in-the-loop –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
‚úÖ –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤

–ü–†–ò–ù–¶–ò–ü: "–û–¥–Ω–∞ –ª–æ–≥–∏–∫–∞, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"
"""

import asyncio
import json
import os
import time
from datetime import datetime
from typing import Dict, Any, List, Optional
from pathlib import Path
from dataclasses import dataclass

from loguru import logger

# –ò–º–ø–æ—Ä—Ç—ã –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from .orchestrator import (
    TaskAnalyzer, TaskDecomposer, ComplexityEvaluator, 
    SkillsetMatcher, AgentSpawner, TeamComposer, WorkflowPlanner,
    ExecutionManager, ReportLevel
)

# –ò–º–ø–æ—Ä—Ç—ã Obsidian –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from .obsidian_db import (
    ObsidianDB, ObsidianNote, AgentWorkspace, TaskManager,
    get_obsidian_db, create_agent_workspace, create_task_manager
)

# –ò–º–ø–æ—Ä—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
from .shared_chat import SharedChat
from ..memory.collective_memory import CollectiveMemory
from ..memory.amem_integration import KittyCoreMemorySystem, get_enhanced_memory_system
from .self_improvement import SelfLearningEngine
from .graph_workflow import WorkflowGraph, WorkflowPlanner as GraphWorkflowPlanner
from .human_collaboration import (
    InterventionRequest, InterventionType, InterventionUrgency,
    ConsoleInterventionHandler, create_approval_request
)

# –ò–º–ø–æ—Ä—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
from ..agents.smart_validator import SmartValidator

# üêú –ò–º–ø–æ—Ä—Ç —Ñ–µ—Ä–æ–º–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
from .pheromone_memory import get_pheromone_system, record_agent_success


@dataclass
class UnifiedConfig:
    """–ï–¥–∏–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç—ã"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    orchestrator_id: str = "unified_orchestrator"
    max_agents: int = 10
    timeout: int = 300
    log_level: str = "INFO"
    
    # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (Obsidian-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ)
    vault_path: str = "./vault"  # –ï–¥–∏–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    enable_obsidian_features: bool = True  # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ
    
    # –°–∏—Å—Ç–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –æ–±—É—á–µ–Ω–∏—è
    enable_smart_validation: bool = True
    enable_metrics: bool = True
    enable_vector_memory: bool = True
    enable_amem_memory: bool = True  # üß† A-MEM Enhanced Memory
    enable_quality_control: bool = True
    enable_self_improvement: bool = True
    
    # Human-in-the-loop
    enable_human_intervention: bool = True
    intervention_timeout: int = 300  # 5 –º–∏–Ω—É—Ç
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
    enable_shared_chat: bool = True
    enable_tool_adaptation: bool = True
    
    # –û—Ç—á—ë—Ç–Ω–æ—Å—Ç—å
    report_level: ReportLevel = ReportLevel.DETAILED
    
    # –ü—É—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    vector_memory_path: str = "./vault/system/vector_memory"
    amem_memory_path: str = "./vault/system/amem_memory"  # üß† A-MEM —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    metrics_storage_path: str = "./vault/system/metrics"
    logs_path: str = "./vault/system/logs"


class UnifiedOrchestrator:
    """
    üß≠ –ï–¥–∏–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä KittyCore 3.0
    
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –ª—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - Obsidian-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SharedChat
    - –£–º–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∏ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
    - Human-in-the-loop –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    - –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –∏ –ø–æ–∏—Å–∫
    """
    
    def __init__(self, config: UnifiedConfig = None):
        self.config = config or UnifiedConfig()
        
        # –°–æ–∑–¥–∞—ë–º –µ–¥–∏–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self._setup_unified_storage()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._init_core_components()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞
        self._init_quality_systems()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é
        self._init_coordination_systems()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º human-in-the-loop
        self._init_human_collaboration()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.tasks_processed = 0
        self.agents_created = 0
        self.workflows_executed = 0
        
        logger.info(f"üß≠ UnifiedOrchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üìÅ –ï–¥–∏–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {self.config.vault_path}")
    
    def _setup_unified_storage(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–æ–≥–æ Obsidian-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        vault_path = Path(self.config.vault_path)
        vault_path.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        folders = [
            "tasks",      # –ó–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            "agents",     # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
            "system",     # –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            "coordination", # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
            "results",    # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            "human",      # Human-in-the-loop
        ]
        
        for folder in folders:
            (vault_path / folder).mkdir(exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ObsidianDB
        self.db = get_obsidian_db(str(vault_path))
        self.task_manager = create_task_manager(str(vault_path))
        
        logger.info(f"üìÅ –ï–¥–∏–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {vault_path}")
    
    def _init_core_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.task_analyzer = TaskAnalyzer()
        self.task_decomposer = TaskDecomposer()
        self.complexity_evaluator = ComplexityEvaluator()
        self.skillset_matcher = SkillsetMatcher()
        
        self.agent_spawner = AgentSpawner()
        self.team_composer = TeamComposer()
        
        self.workflow_planner = WorkflowPlanner()
        self.execution_manager = ExecutionManager()
        
        # –ì—Ä–∞—Ñ-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.graph_planner = GraphWorkflowPlanner()
        
        logger.debug("üîß –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    def _init_quality_systems(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –æ–±—É—á–µ–Ω–∏—è"""
        
        # SmartValidator –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        if self.config.enable_smart_validation:
            self.smart_validator = SmartValidator()
            logger.info("üéØ SmartValidator –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            self.smart_validator = None
        
        # –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
        if self.config.enable_self_improvement:
            self.self_improvement = SelfLearningEngine()
            logger.info("üß† –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            self.self_improvement = None
        
        # –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å
        if self.config.enable_vector_memory:
            from .vector_memory import create_vector_memory_store
            self.vector_store = create_vector_memory_store(
                storage_path=self.config.vector_memory_path,
                obsidian_db=self.db
            )
            logger.info("üîç –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            self.vector_store = None
        
        # A-MEM Enhanced Memory (—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –∞–≥–µ–Ω—Ç–Ω–∞—è –ø–∞–º—è—Ç—å)
        if self.config.enable_amem_memory:
            # –°–æ–∑–¥–∞—ë–º –ø—É—Ç—å –¥–ª—è A-MEM
            amem_path = Path(self.config.amem_memory_path)
            amem_path.mkdir(parents=True, exist_ok=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º A-MEM —Å–∏—Å—Ç–µ–º—É
            self.amem_system = get_enhanced_memory_system(str(amem_path))
            logger.info("üß† A-MEM Enhanced Memory –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            logger.info("‚ú® –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫, —ç–≤–æ–ª—é—Ü–∏—è –ø–∞–º—è—Ç–∏, Zettelkasten –ø—Ä–∏–Ω—Ü–∏–ø—ã –≥–æ—Ç–æ–≤—ã")
        else:
            self.amem_system = None
        
        # –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫
        if self.config.enable_metrics:
            from .metrics_collector import create_metrics_collector
            self.metrics_collector = create_metrics_collector(
                storage_path=self.config.metrics_storage_path,
                obsidian_db=self.db
            )
            logger.info("üìä –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            self.metrics_collector = None
    
    def _init_coordination_systems(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
        
        # –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
        self.collective_memory = CollectiveMemory(self.config.orchestrator_id)
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è A-MEM —Å –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç—å—é
        if self.amem_system:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É CollectiveMemory –∏ A-MEM
            self.collective_memory.amem_system = self.amem_system
            logger.info("üîó A-MEM –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç—å—é")
        
        # SharedChat –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
        if self.config.enable_shared_chat:
            self.shared_chat = SharedChat(
                team_id=f"team_{self.config.orchestrator_id}",
                collective_memory=self.collective_memory
            )
            
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è A-MEM —Å SharedChat
            if self.amem_system:
                self.shared_chat.amem_system = self.amem_system
                logger.info("üß† A-MEM –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å SharedChat")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
            self.shared_chat.register_agent(
                agent_id=self.config.orchestrator_id,
                agent_role="Orchestrator",
                is_coordinator=True
            )
            
            logger.info("üí¨ SharedChat –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            self.shared_chat = None
        
        # ToolAdapter (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ)
        if self.config.enable_tool_adaptation:
            self.tool_adapter = None  # TODO: –ü–æ–¥–∫–ª—é—á–∏—Ç—å ToolAdapterAgent
            logger.info("üîß ToolAdapter –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            self.tool_adapter = None
    
    def _init_human_collaboration(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º"""
        
        if self.config.enable_human_intervention:
            self.intervention_handler = ConsoleInterventionHandler()
            logger.info("üë§ Human-in-the-loop –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            self.intervention_handler = None
    
    async def solve_task(self, task: str, context: Optional[Dict] = None) -> Dict[str, Any]:
        """
        üéØ –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—É—é –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—é
        
        10-—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å:
        1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –µ–¥–∏–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        2. –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        4. –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        5. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤
        6. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π
        7. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        8. –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        9. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ
        10. –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –ø—É—Ç—è–º–∏ –∫ —Ñ–∞–π–ª–∞–º
        """
        start_time = datetime.now()
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ UnifiedOrchestrator –¥–ª—è –∑–∞–¥–∞—á–∏: {task[:100]}...")
        
        # –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
        if not hasattr(self.task_analyzer, 'llm') or self.task_analyzer.llm is None:
            error_msg = "‚ùå LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ LLM."
            logger.error(error_msg)
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
            try:
                task_id = self.task_manager.create_task(task, context.get('user_id') if context else None)
                self.task_manager.update_task_status(
                    task_id=task_id,
                    status="failed_llm_unavailable",
                    details=error_msg
                )
            except Exception:
                task_id = None
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
            llm_error = RuntimeError(error_msg)
            await self._handle_llm_unavailable(task, llm_error)
            
            return {
                "task": task,
                "task_id": task_id,
                "status": "failed_llm_unavailable",
                "error": error_msg,
                "error_type": "llm_not_initialized",
                "message": "–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç LLM –¥–ª—è —Ä–∞–±–æ—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.",
                "duration": (datetime.now() - start_time).total_seconds(),
                "completed_at": datetime.now().isoformat()
            }
        
        try:
            # –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –µ–¥–∏–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            task_id = self.task_manager.create_task(task, context.get('user_id') if context else None)
            logger.info(f"üìã –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
            
            # –≠–¢–ê–ü 2: –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            complexity_analysis = await self._analyze_task_with_storage(task, task_id)
            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑: {complexity_analysis['complexity']} ({complexity_analysis['estimated_agents']} –∞–≥–µ–Ω—Ç–æ–≤)")
            
            # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            task_metrics = None
            if self.metrics_collector:
                task_metrics = self.metrics_collector.start_task_tracking(
                    task_id=task_id,
                    task_type=complexity_analysis.get('task_type', 'general'),
                    complexity_score=complexity_analysis['complexity']
                )
            
            # –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
            if await self._check_human_intervention_needed(task, complexity_analysis):
                intervention_result = await self._request_human_guidance(task, complexity_analysis)
                if intervention_result.get('modified_task'):
                    task = intervention_result['modified_task']
                    logger.info(f"üë§ –ó–∞–¥–∞—á–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ–º")
            
            # –≠–¢–ê–ü 4: –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            subtasks = await self._decompose_task_with_storage(task, complexity_analysis, task_id)
            logger.info(f"üîÑ –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è: {len(subtasks)} –ø–æ–¥–∑–∞–¥–∞—á")
            
            # –≠–¢–ê–ü 5: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤
            agents = await self._create_agent_team(subtasks, task_id)
            logger.info(f"ü§ñ –°–æ–∑–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(agents)}")
            
            # –≠–¢–ê–ü 6: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π
            execution_result = await self._execute_with_unified_coordination(agents, subtasks, task, task_id)
            logger.info(f"‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {execution_result['status']}")
            
            # –≠–¢–ê–ü 7: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ –≤ execution_result –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            execution_result['task_analysis'] = complexity_analysis
            validation_result = await self._validate_results(task, execution_result)
            logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {validation_result.get('quality_score', 0):.2f}")
            
            # –≠–¢–ê–ü 8: –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
            final_result = await self._finalize_task_results(task_id, execution_result, validation_result)
            
            # –≠–¢–ê–ü 9: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ
            await self._update_learning_systems(task, final_result, start_time)
            
            # –≠–¢–ê–ü 10: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ø–∞–º—è—Ç—å
            if self.vector_store and validation_result.get('quality_score', 0) >= 0.7:
                solution_summary = self._create_solution_summary(final_result)
                
                self.vector_store.add_task_solution(
                    task_id=task_id,
                    task_description=task,
                    solution=solution_summary,
                    success_score=validation_result.get('quality_score', 0.0),
                    metadata={
                        'task_type': complexity_analysis.get('task_type', 'general'),
                        'complexity_score': complexity_analysis['complexity'],
                        'agents_used': len(agents),
                        'duration_seconds': duration,
                        'files_created': len(final_result.get('created_files', []))
                    }
                )
            self.tasks_processed += 1
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            if self.metrics_collector and task_metrics:
                self.metrics_collector.finish_task_tracking(
                    task_id=task_id,
                    agents_created=len(agents),
                    agents_succeeded=sum(1 for agent_data in agents.values() 
                                       if agent_data.get('status') == 'completed'),
                    agents_failed=sum(1 for agent_data in agents.values() 
                                    if agent_data.get('status') == 'failed'),
                    quality_score=validation_result.get('quality_score', 0.0),
                    validation_passed=validation_result.get('quality_score', 0) >= 0.7,
                    rework_required=validation_result.get('quality_score', 0) < 0.7,
                    files_created=len(final_result.get('created_files', [])),
                    human_interventions=final_result.get('human_interventions', 0)
                )
            
            result = {
                "task": task,
                "task_id": task_id,
                "status": "completed",
                "duration": duration,
                
                # –ü—É—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
                "created_files": final_result.get("created_files", []),
                "vault_path": str(self.config.vault_path),
                "results_folder": str(Path(self.config.vault_path) / "results"),
                
                # –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã
                "process_trace": final_result.get("process_trace", []),
                "agent_coordination": final_result.get("coordination_log", []),
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                "complexity_analysis": complexity_analysis,
                "subtasks": subtasks,
                "validation": validation_result,
                "agents_created": len(agents),
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                "metrics": self.metrics_collector.get_current_stats() if self.metrics_collector else None,
                
                "completed_at": end_time.isoformat()
            }
            
            logger.info(f"üéâ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(final_result.get('created_files', []))} —Ñ–∞–π–ª–æ–≤")
            
            return result
            
        except RuntimeError as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã (–≤–∫–ª—é—á–∞—è LLM)
            if "LLM" in str(e) or "–ø—Ä–æ–≤–∞–π–¥–µ—Ä" in str(e):
                logger.error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ LLM: {e}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
                await self._handle_llm_unavailable(task, e)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ failed
                if 'task_id' in locals():
                    self.task_manager.update_task_status(
                        task_id=task_id,
                        status="failed_llm_unavailable",
                        details=f"LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}"
                    )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
                return {
                    "task": task,
                    "task_id": task_id if 'task_id' in locals() else None,
                    "status": "failed_llm_unavailable",
                    "error": str(e),
                    "error_type": "llm_unavailable",
                    "message": "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ LLM. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É.",
                    "duration": (datetime.now() - start_time).total_seconds(),
                    "completed_at": datetime.now().isoformat()
                }
            else:
                # –î—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
                raise e
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
            if 'task_id' in locals():
                self.task_manager.update_task_status(
                    task_id=task_id,
                    status="failed",
                    details=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
                )
            
            raise e
    
    # === –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í ===
    
    async def _analyze_task_with_storage(self, task: str, task_id: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analysis = self.task_analyzer.analyze_task_complexity(task)
        
        # –ù–û–í–û–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—Ä–∞–∑ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        expected_outcome = await self._extract_expected_outcome(task)
        analysis['expected_outcome'] = expected_outcome
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ ObsidianDB
        analysis_note = ObsidianNote(
            title=f"–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ - {task_id}",
            content=f"""# –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏

## –ó–∞–¥–∞—á–∞
{task}

## –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
- **–°–ª–æ–∂–Ω–æ—Å—Ç—å**: {analysis['complexity']}
- **–û—Ü–µ–Ω–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤**: {analysis['estimated_agents']}
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**: {analysis.get('estimated_time', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- **–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏**: {', '.join(analysis.get('required_skills', []))}

## –û–±—Ä–∞–∑ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
{self._format_expected_outcome(expected_outcome)}

## –î–µ—Ç–∞–ª–∏
{analysis.get('reasoning', '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}
""",
            tags=["–∞–Ω–∞–ª–∏–∑", "–∑–∞–¥–∞—á–∞", str(analysis['complexity'])],
            metadata={
                "task_id": task_id,
                "analysis_type": "complexity",
                "complexity": analysis['complexity'],
                "estimated_agents": analysis['estimated_agents'],
                "expected_outcome_type": expected_outcome.get('type', 'unknown'),
                "validation_criteria": expected_outcome.get('validation_criteria', []),
                "timestamp": datetime.now().isoformat()
            },
            folder="tasks"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        analysis_path = self.db.save_note(analysis_note, f"analysis_{task_id}.md")
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {analysis_path}")
        
        return analysis
    
    async def _extract_expected_outcome(self, task: str) -> Dict[str, Any]:
        """
        üéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ LLM-–∞–≥–µ–Ω—Ç–∞ –ø—Ä–æ–¥–∂–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
        
        –ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç:
        - –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–æ –≤ –∏—Ç–æ–≥–µ
        - –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        - –°–ø–æ—Å–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        """
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –ø—Ä–æ–¥–∂–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
        if not hasattr(self.task_analyzer, 'llm') or self.task_analyzer.llm is None:
            raise RuntimeError("‚ùå LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á.")
        
        try:
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM-–∞–≥–µ–Ω—Ç–∞ –ø—Ä–æ–¥–∂–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
            pm_prompt = f"""–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–¥–∂–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –æ–±—Ä–∞–∑ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

–ó–ê–î–ê–ß–ê: {task}

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –¢–ò–ü –†–ï–ó–£–õ–¨–¢–ê–¢–ê - —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ/–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ
2. –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê - –∫–∞–∫ –ø–æ–Ω—è—Ç—å —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ  
3. –°–ü–û–°–û–ë–´ –ü–†–û–í–ï–†–ö–ò - –∫–∞–∫ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
4. –ö–û–ù–ö–†–ï–¢–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ - —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

–û—Ç–≤–µ—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "result_type": "–∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
    "description": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
    "success_criteria": ["–∫—Ä–∏—Ç–µ—Ä–∏–π 1", "–∫—Ä–∏—Ç–µ—Ä–∏–π 2", "–∫—Ä–∏—Ç–µ—Ä–∏–π 3"],
    "validation_methods": ["–º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ 1", "–º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ 2"],
    "specific_parameters": {{"–ø–∞—Ä–∞–º–µ—Ç—Ä": "–∑–Ω–∞—á–µ–Ω–∏–µ"}},
    "confidence": 0.9,
    "clarification_question": "–í–æ–ø—Ä–æ—Å –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"
}}

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–ª—å–∑–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM
            llm_response = self.task_analyzer.llm.complete(pm_prompt)
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç LLM
            import json
            import re
            
            outcome_data = None
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_match = re.search(r'\{.*\}', llm_response, re.DOTALL)
            if json_match:
                try:
                    outcome_data = json.loads(json_match.group(0))
                except json.JSONDecodeError:
                    pass
            
            # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–∞—Ä—Å–∏–º markdown
            if outcome_data is None:
                outcome_data = self._parse_markdown_outcome(llm_response)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            required_fields = ['result_type', 'description', 'success_criteria', 'validation_methods']
            missing_fields = [field for field in required_fields if field not in outcome_data]
            if missing_fields:
                raise RuntimeError(f"‚ùå LLM –≤–µ—Ä–Ω—É–ª –Ω–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
            
            expected_outcome = {
                'type': outcome_data['result_type'],
                'description': outcome_data['description'],
                'validation_criteria': outcome_data['success_criteria'],
                'validation_methods': outcome_data['validation_methods'],
                'specific_parameters': outcome_data.get('specific_parameters', {}),
                'confidence': outcome_data.get('confidence', 0.8),
                'clarification_question': outcome_data.get('clarification_question'),
                'source': 'llm_project_manager'
            }
            
            logger.info(f"üéØ –ê–≥–µ–Ω—Ç –ø—Ä–æ–¥–∂–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–∏–ª: {outcome_data['result_type']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {expected_outcome['confidence']:.2f})")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if outcome_data.get('clarification_question'):
                clarified_outcome = await self._clarify_with_user(expected_outcome, task)
                if clarified_outcome:
                    expected_outcome = clarified_outcome
            
            return expected_outcome
            
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ –ø—Ä–æ–¥–∂–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å LLM - –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã—à–µ
            if "LLM" in str(e) or "–ø—Ä–æ–≤–∞–π–¥–µ—Ä" in str(e) or "generate_response" in str(e):
                raise RuntimeError(f"‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ LLM. –û—à–∏–±–∫–∞: {e}")
            
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Ç–æ–∂–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            raise RuntimeError(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á–∏: {e}")
    
    def _parse_markdown_outcome(self, llm_response: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ markdown –æ—Ç–≤–µ—Ç–∞ LLM"""
        import re
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_type_match = re.search(r'\*\*–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\*\*\s*[¬´"]?([^¬´"¬ª\n]+)[¬´"¬ª]?', llm_response)
        result_type = result_type_match.group(1).strip() if result_type_match else "—Ñ–∞–π–ª"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description_match = re.search(r'\*\*–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\*\*\s*(.*?)(?=\*\*|$)', llm_response, re.DOTALL)
        description = description_match.group(1).strip() if description_match else f"–°–æ–∑–¥–∞–Ω–∏–µ {result_type}"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ (—Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        criteria = []
        if description_match:
            lines = description.split('\n')
            for line in lines:
                line = line.strip()
                if line.startswith('-') or line.startswith('‚Ä¢'):
                    criteria.append(line[1:].strip())
        
        if not criteria:
            criteria = [f"–§–∞–π–ª —Å–æ–∑–¥–∞–Ω", f"–ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", f"–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"]
        
        return {
            'result_type': result_type,
            'description': description,
            'success_criteria': criteria,
            'validation_methods': ["–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"],
            'specific_parameters': {},
            'confidence': 0.8,
            'clarification_question': None
        }

    async def _fallback_outcome_extraction(self, task: str) -> Dict[str, Any]:
        """
        –£–î–ê–õ–ï–ù–û: Fallback –ª–æ–≥–∏–∫–∞ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–∞
        
        –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å LLM-–∞–Ω–∞–ª–∏–∑–æ–º.
        –ï—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–∏—Å—Ç–µ–º–∞ —á–µ—Å—Ç–Ω–æ —Å–æ–æ–±—â–∞–µ—Ç –æ–± —ç—Ç–æ–º.
        """
        raise RuntimeError("‚ùå Fallback –∞–Ω–∞–ª–∏–∑ —É–¥–∞–ª—ë–Ω. –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç LLM –¥–ª—è —Ä–∞–±–æ—Ç—ã.")
    
    async def _handle_llm_unavailable(self, task: str, error: Exception) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.error(f"üö® LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {error}")
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–º–µ—Ç–∫—É –æ –ø—Ä–æ–±–ª–µ–º–µ
        error_note = ObsidianNote(
            title=f"–û—à–∏–±–∫–∞ LLM - {datetime.now().strftime('%Y%m%d_%H%M%S')}",
            content=f"""# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

## –ó–∞–¥–∞—á–∞
{task}

## –û—à–∏–±–∫–∞
{str(error)}

## –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚ùå **–°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ LLM**

–¢—Ä–µ–±—É–µ—Ç—Å—è:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –∫–ª—é—á–∏
3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–æ—Ç–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (TODO)

## –í—Ä–µ–º—è –æ—à–∏–±–∫–∏
{datetime.now().isoformat()}

---
*–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è LLM*
""",
            tags=["–æ—à–∏–±–∫–∞", "llm", "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è"],
            metadata={
                "error_type": "llm_unavailable",
                "task": task,
                "error_message": str(error),
                "timestamp": datetime.now().isoformat(),
                "system_status": "stopped"
            },
            folder="system"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        error_path = self.db.save_note(error_note, f"llm_error_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md")
        logger.error(f"üö® –û—à–∏–±–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: {error_path}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ human-in-the-loop –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if self.intervention_handler:
            try:
                await self._notify_user_about_llm_error(task, error)
            except Exception as notify_error:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {notify_error}")
    
    async def _notify_user_about_llm_error(self, task: str, error: Exception) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM"""
        from .human_collaboration import create_approval_request, InterventionType, InterventionUrgency
        
        notification_request = create_approval_request(
            title="üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
            description=f"""
–°–ò–°–¢–ï–ú–ê –ù–ï –ú–û–ñ–ï–¢ –ü–†–û–î–û–õ–ñ–ò–¢–¨ –†–ê–ë–û–¢–£

–ó–∞–¥–∞—á–∞: {task}

–ü—Ä–æ–±–ª–µ–º–∞: LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
–û—à–∏–±–∫–∞: {str(error)}

–°–∏—Å—Ç–µ–º–∞ KittyCore 3.0 —Ç—Ä–µ–±—É–µ—Ç LLM –¥–ª—è:
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á –∞–≥–µ–Ω—Ç–æ–º –ø—Ä–æ–¥–∂–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—Ä–∞–∑–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞  
‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–î–ï–ô–°–¢–í–ò–Ø:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–¥–∞—á—É

–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è LLM.
""",
            context={
                "error_type": "llm_unavailable",
                "task": task,
                "error": str(error),
                "system_status": "stopped"
            },
            urgency=InterventionUrgency.HIGH,
            timeout_seconds=3600  # 1 —á–∞—Å –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification_note = ObsidianNote(
            title=f"üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ LLM - {notification_request.id}",
            content=f"""# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

{notification_request.description}

## –°—Ç–∞—Ç—É—Å
–û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...

---
*–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*
""",
            tags=["—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è-–æ—à–∏–±–∫–∞", "llm"],
            metadata={
                "notification_id": notification_request.id,
                "error_type": "llm_unavailable",
                "urgency": "high",
                "status": "pending"
            },
            folder="human"
        )
        
        notification_path = self.db.save_note(notification_note, f"llm_error_notification_{notification_request.id}.md")
        logger.error(f"üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {notification_path}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            await self.intervention_handler.handle_request(notification_request)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def _clarify_with_user(self, expected_outcome: Dict, original_task: str) -> Optional[Dict[str, Any]]:
        """–£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.intervention_handler:
            logger.info("üë§ Human-in-the-loop –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ")
            return None
        
        clarification_question = expected_outcome.get('clarification_question')
        if not clarification_question:
            return None
        
        logger.info("üë§ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        from .human_collaboration import create_approval_request, InterventionType, InterventionUrgency
        
        clarification_request = create_approval_request(
            title="–£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
            description=f"""
–ó–∞–¥–∞—á–∞: {original_task}

–ê–≥–µ–Ω—Ç –ø—Ä–æ–¥–∂–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–∏–ª –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
‚Ä¢ –¢–∏–ø: {expected_outcome['type']}
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {expected_outcome['description']}

–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:
{chr(10).join(f'‚Ä¢ {criterion}' for criterion in expected_outcome['validation_criteria'])}

–í–û–ü–†–û–°: {clarification_question}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
""",
            context={
                "expected_outcome": expected_outcome,
                "original_task": original_task,
                "clarification_type": "outcome_verification"
            },
            urgency=InterventionUrgency.MEDIUM,
            timeout_seconds=self.config.intervention_timeout
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        clarification_note = ObsidianNote(
            title=f"–£—Ç–æ—á–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - {clarification_request.id}",
            content=f"""# –£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

## –ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞
{original_task}

## –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- **–¢–∏–ø**: {expected_outcome['type']}
- **–û–ø–∏—Å–∞–Ω–∏–µ**: {expected_outcome['description']}

## –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
{chr(10).join(f'- {criterion}' for criterion in expected_outcome['validation_criteria'])}

## –í–æ–ø—Ä–æ—Å –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
{clarification_question}

## –°—Ç–∞—Ç—É—Å
–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...

---
*–ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç–æ–º –ø—Ä–æ–¥–∂–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º*
""",
            tags=["—É—Ç–æ—á–Ω–µ–Ω–∏–µ", "–ø—Ä–æ–¥–∂–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä", "–æ–∂–∏–¥–∞–Ω–∏–µ"],
            metadata={
                "clarification_id": clarification_request.id,
                "expected_outcome_type": expected_outcome['type'],
                "confidence": expected_outcome['confidence'],
                "status": "pending"
            },
            folder="human"
        )
        
        clarification_path = self.db.save_note(clarification_note, f"clarification_{clarification_request.id}.md")
        logger.info(f"üë§ –ó–∞–ø—Ä–æ—Å –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {clarification_path}")
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            response = await self.intervention_handler.handle_request(clarification_request)
            
            if response.status.value == "approved":
                logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                return expected_outcome
            else:
                logger.info("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è: {e}")
            return None
    
    def _format_expected_outcome(self, outcome: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏"""
        formatted = f"""
### –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
**{outcome['type']}** - {outcome['description']}

### –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
{chr(10).join(f'- {criterion}' for criterion in outcome['validation_criteria'])}

### –ú–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
{chr(10).join(f'- {method}' for method in outcome['validation_methods'])}

### –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
{outcome['confidence']:.1%} (–∏—Å—Ç–æ—á–Ω–∏–∫: {outcome.get('source', 'unknown')})
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if outcome.get('specific_parameters'):
            formatted += f"""
### –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
{chr(10).join(f'- **{key}**: {value}' for key, value in outcome['specific_parameters'].items())}
"""
        
        return formatted
    
    async def _check_human_intervention_needed(self, task: str, analysis: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
        if not self.intervention_handler:
            return False
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞
        intervention_needed = False
        reasons = []
        
        # 1. –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        if analysis.get('complexity') in ['high', 'very_high']:
            intervention_needed = True
            reasons.append("–í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏")
        
        # 2. –ú–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤
        if analysis.get('estimated_agents', 0) > 5:
            intervention_needed = True
            reasons.append(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {analysis['estimated_agents']}")
        
        # 3. –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω' in task.lower() or '–Ω–µ –∑–Ω–∞—é' in task.lower():
            intervention_needed = True
            reasons.append("–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
        
        # 4. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        critical_keywords = ['—É–¥–∞–ª–∏—Ç—å', 'delete', 'remove', '–æ—á–∏—Å—Ç–∏—Ç—å', '—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å']
        if any(keyword in task.lower() for keyword in critical_keywords):
            intervention_needed = True
            reasons.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        
        if intervention_needed:
            logger.info(f"üë§ –¢—Ä–µ–±—É–µ—Ç—Å—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ: {', '.join(reasons)}")
        
        return intervention_needed
    
    async def _request_human_guidance(self, task: str, analysis: Dict) -> Dict[str, Any]:
        """–ó–∞–ø—Ä–æ—Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ —É —á–µ–ª–æ–≤–µ–∫–∞"""
        if not self.intervention_handler:
            return {}
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ
        request = create_approval_request(
            title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏",
            description=f"""
–ó–∞–¥–∞—á–∞: {task}

–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis.get('complexity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- –ê–≥–µ–Ω—Ç–æ–≤: {analysis.get('estimated_agents', 0)}
- –í—Ä–µ–º—è: {analysis.get('estimated_time', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?
""",
            context={"task": task, "analysis": analysis},
            urgency=InterventionUrgency.MEDIUM,
            timeout_seconds=self.config.intervention_timeout
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        intervention_note = ObsidianNote(
            title=f"Human Intervention - {request.id}",
            content=f"""# –ó–∞–ø—Ä–æ—Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞

## –ó–∞–ø—Ä–æ—Å
{request.description}

## –°—Ç–∞—Ç—É—Å
–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...

## –î–µ—Ç–∞–ª–∏
- ID: {request.id}
- –¢–∏–ø: {request.type.value}
- –°—Ä–æ—á–Ω–æ—Å—Ç—å: {request.urgency.value}
- –¢–∞–π–º–∞—É—Ç: {request.timeout_seconds}—Å
""",
            tags=["human", "intervention", "pending"],
            metadata={
                "intervention_id": request.id,
                "intervention_type": request.type.value,
                "urgency": request.urgency.value,
                "status": "pending"
            },
            folder="human"
        )
        
        intervention_path = self.db.save_note(intervention_note, f"intervention_{request.id}.md")
        logger.info(f"üë§ –ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {intervention_path}")
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            response = await self.intervention_handler.handle_request(request)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            if response.status.value == "approved":
                result = {"approved": True}
                status_text = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ"
            elif response.status.value == "rejected":
                result = {"approved": False}
                status_text = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            else:
                result = {"approved": False, "timeout": True}
                status_text = "‚è∞ –¢–∞–π–º–∞—É—Ç"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
            updated_content = intervention_note.content.replace(
                "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...", 
                f"{status_text}\n\n–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response.created_at}"
            )
            
            updated_note = ObsidianNote(
                title=intervention_note.title,
                content=updated_content,
                tags=["human", "intervention", "completed"],
                metadata={
                    **intervention_note.metadata,
                    "status": "completed",
                    "response": response.status.value
                },
                folder="human"
            )
            
            self.db.save_note(updated_note, f"intervention_{request.id}.md")
            logger.info(f"üë§ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {status_text}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {e}")
            return {"approved": False, "error": str(e)}
    
    # === –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (–ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –°–õ–ï–î–£–Æ–©–ò–• –ß–ê–°–¢–ï–ô) ===
    
    async def _decompose_task_with_storage(self, task: str, analysis: Dict, task_id: str) -> List[Dict[str, Any]]:
        """–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∑–∞–¥–∞—á–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –¥–µ–∫–æ–º–ø–æ–∑–µ—Ä
        subtasks = self.task_decomposer.decompose_task(task, analysis['complexity'])
        
        # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ workflow –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        workflow_graph = None
        if hasattr(self, 'graph_planner'):
            try:
                # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                empty_agents = {}
                workflow_graph = self.graph_planner.create_workflow_graph(subtasks, empty_agents)
                logger.info(f"üìä –ì—Ä–∞—Ñ workflow —Å–æ–∑–¥–∞–Ω: {len(workflow_graph.nodes)} —É–∑–ª–æ–≤")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∞: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é –≤ ObsidianDB
        decomposition_content = f"""# –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∑–∞–¥–∞—á–∏

## –ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞
{task}

## –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
- **–°–ª–æ–∂–Ω–æ—Å—Ç—å**: {analysis['complexity']}
- **–ê–≥–µ–Ω—Ç–æ–≤**: {analysis['estimated_agents']}

## –ü–æ–¥–∑–∞–¥–∞—á–∏ ({len(subtasks)})

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–¥–∑–∞–¥–∞—á—É
        for i, subtask in enumerate(subtasks, 1):
            decomposition_content += f"""### {i}. {subtask.get('title', f'–ü–æ–¥–∑–∞–¥–∞—á–∞ {i}')}

**–û–ø–∏—Å–∞–Ω–∏–µ**: {subtask.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}

**–î–µ—Ç–∞–ª–∏**:
- ID: `{subtask.get('id', f'subtask_{i}')}`
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {subtask.get('priority', '—Å—Ä–µ–¥–Ω–∏–π')}
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: {subtask.get('complexity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- –ù–∞–≤—ã–∫–∏: {', '.join(subtask.get('required_skills', []))}
- –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(subtask.get('dependencies', [])) or '–Ω–µ—Ç'}

---

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ –µ—Å–ª–∏ –µ—Å—Ç—å
        if workflow_graph:
            mermaid_diagram = workflow_graph.to_mermaid()
            decomposition_content += f"""## –ì—Ä–∞—Ñ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

```mermaid
{mermaid_diagram}
```

"""
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–º–µ—Ç–∫—É
        decomposition_note = ObsidianNote(
            title=f"–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è - {task_id}",
            content=decomposition_content,
            tags=["–¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è", "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", str(analysis['complexity'])],
            metadata={
                "task_id": task_id,
                "decomposition_type": "workflow",
                "subtasks_count": len(subtasks),
                "complexity": analysis['complexity'],
                "has_graph": workflow_graph is not None,
                "timestamp": datetime.now().isoformat()
            },
            folder="tasks"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        decomposition_path = self.db.save_note(decomposition_note, f"decomposition_{task_id}.md")
        logger.info(f"üîÑ –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {decomposition_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–¥–∑–∞–¥–∞—á—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–º–µ—Ç–∫—É
        for subtask in subtasks:
            subtask_content = f"""# –ü–æ–¥–∑–∞–¥–∞—á–∞: {subtask.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}

## –û–ø–∏—Å–∞–Ω–∏–µ
{subtask.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
- **ID**: `{subtask.get('id')}`
- **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç**: {subtask.get('priority', '—Å—Ä–µ–¥–Ω–∏–π')}
- **–°–ª–æ–∂–Ω–æ—Å—Ç—å**: {subtask.get('complexity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- **–°—Ç–∞—Ç—É—Å**: –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

## –¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏
{chr(10).join(f'- {skill}' for skill in subtask.get('required_skills', []))}

## –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
{chr(10).join(f'- [[subtask_{dep}]]' for dep in subtask.get('dependencies', [])) or '–ù–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π'}

## –°–≤—è–∑–∏
- –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞: [[{task_id}]]
- –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è: [[decomposition_{task_id}]]

---
*–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
"""
            
            subtask_note = ObsidianNote(
                title=f"–ü–æ–¥–∑–∞–¥–∞—á–∞: {subtask.get('title', subtask.get('id'))}",
                content=subtask_content,
                tags=["–ø–æ–¥–∑–∞–¥–∞—á–∞", "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", str(subtask.get('complexity', 'unknown'))],
                metadata={
                    "task_id": task_id,
                    "subtask_id": subtask.get('id'),
                    "subtask_type": subtask.get('type', 'general'),
                    "priority": subtask.get('priority', 'medium'),
                    "complexity": subtask.get('complexity', 'unknown'),
                    "status": "pending",
                    "required_skills": subtask.get('required_skills', []),
                    "dependencies": subtask.get('dependencies', []),
                    "timestamp": datetime.now().isoformat()
                },
                folder="tasks"
            )
            
            subtask_path = self.db.save_note(subtask_note, f"subtask_{subtask.get('id')}.md")
            logger.debug(f"üìù –ü–æ–¥–∑–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {subtask_path}")
        
        logger.info(f"üîÑ –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {len(subtasks)} –ø–æ–¥–∑–∞–¥–∞—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        return subtasks
    
    async def _create_agent_team(self, subtasks: List[Dict], task_id: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π A-MEM —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        resources = self.complexity_evaluator.evaluate_resources(subtasks)
        skills = self.skillset_matcher.match_skills(subtasks)
        
        # üß† A-MEM: –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–ø—ã—Ç–∞
        amem_insights = await self._get_amem_insights_for_team_creation(subtasks, task_id)
        
        agents = {}
        agent_workspaces = {}
        team_composition = {
            "team_id": f"team_{task_id}",
            "created_at": datetime.now().isoformat(),
            "total_agents": 0,
            "agent_roles": {},
            "skill_coverage": {},
            "coordination_setup": False,
            "amem_insights": amem_insights  # üß† –î–æ–±–∞–≤–ª—è–µ–º insights –∏–∑ A-MEM
        }
        
        # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–∑–∞–¥–∞—á–∏
        for subtask in subtasks:
            subtask_id = subtask.get("id", f"subtask_{len(agents)}")
            required_skills = skills.get(subtask_id, subtask.get('required_skills', []))
            
            # –°–æ–∑–¥–∞—ë–º IntellectualAgent –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ —Å—Ç–∞—Ä–æ–≥–æ OrchestratorAgent)
            from ..agents.intellectual_agent import IntellectualAgent
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–≤—ã–∫–æ–≤
            role_map = {
                "web_search": "researcher",
                "code_generation": "developer", 
                "file_management": "organizer",
                "analysis": "analyst"
            }
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ä–æ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            primary_skill = required_skills[0] if required_skills else "general"
            agent_role = role_map.get(primary_skill, "generalist")
            
            # –°–æ–∑–¥–∞—ë–º IntellectualAgent
            agent = IntellectualAgent(agent_role, subtask)
            agent_id = f"agent_{subtask_id}"
            agents[agent_id] = agent
            
            # –°–æ–∑–¥–∞—ë–º —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–∞ –≤ ObsidianDB
            try:
                workspace = create_agent_workspace(
                    agent_id=agent_id,
                    vault_path=self.config.vault_path
                )
                agent_workspaces[agent_id] = workspace
                logger.info(f"üèóÔ∏è –†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è {agent_id}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è workspace –¥–ª—è {agent_id}: {e}")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ –≤ SharedChat
            if self.shared_chat:
                try:
                    self.shared_chat.register_agent(
                        agent_id=agent_id,
                        agent_role=getattr(agent, 'role', 'worker'),
                        is_coordinator=False
                    )
                    logger.debug(f"üí¨ –ê–≥–µ–Ω—Ç {agent_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ SharedChat")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {agent_id} –≤ SharedChat: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã
            agent_role = getattr(agent, 'role', 'worker')
            team_composition["agent_roles"][agent_id] = {
                "role": agent_role,
                "assigned_subtask": subtask_id,
                "required_skills": required_skills,
                "workspace_path": getattr(agent_workspaces.get(agent_id), 'workspace_folder', 'unknown')
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤
            for skill in required_skills:
                if skill not in team_composition["skill_coverage"]:
                    team_composition["skill_coverage"][skill] = []
                team_composition["skill_coverage"][skill].append(agent_id)
        
        team_composition["total_agents"] = len(agents)
        team_composition["coordination_setup"] = self.shared_chat is not None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ –≤ ObsidianDB
        team_content = f"""# –ö–æ–º–∞–Ω–¥–∞ –∞–≥–µ–Ω—Ç–æ–≤ - {task_id}

## –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã ({len(agents)} –∞–≥–µ–Ω—Ç–æ–≤)

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∞–≥–µ–Ω—Ç–µ
        for agent_id, agent_info in team_composition["agent_roles"].items():
            team_content += f"""### {agent_id}

- **–†–æ–ª—å**: {agent_info['role']}
- **–ü–æ–¥–∑–∞–¥–∞—á–∞**: [[subtask_{agent_info['assigned_subtask']}]]
- **–ù–∞–≤—ã–∫–∏**: {', '.join(agent_info['required_skills'])}
- **Workspace**: `{agent_info['workspace_path']}`

"""
        
        # üß† A-MEM: –î–æ–±–∞–≤–ª—è–µ–º insights –∏–∑ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
        if amem_insights.get("enabled", False):
            team_content += f"""## üß† A-MEM Insights –∏–∑ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏

### –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
"""
            for recommendation in amem_insights.get("agent_recommendations", []):
                team_content += f"- {recommendation}\n"
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ insights –ø–æ –ø–æ–¥–∑–∞–¥–∞—á–∞–º
            for subtask_insight in amem_insights.get("search_results", []):
                if subtask_insight.get("recommendations"):
                    team_content += f"""
### –ü–æ–¥–∑–∞–¥–∞—á–∞: {subtask_insight['subtask_id']}
- **–£—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ**: {subtask_insight['successful_solutions']}
- **–û–ø—ã—Ç–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤**: {subtask_insight['experienced_agents']} 
- **–ò–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º**: {subtask_insight['known_issues']}

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ A-MEM:**
"""
                    for rec in subtask_insight["recommendations"]:
                        emoji = "‚úÖ" if rec["type"] == "best_practice" else "ü§ñ" if rec["type"] == "role_recommendation" else "‚ö†Ô∏è"
                        team_content += f"- {emoji} {rec['advice']} _(–∏—Å—Ç–æ—á–Ω–∏–∫: {rec['source']})_\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤
        team_content += f"""## –ü–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤

"""
        for skill, agent_list in team_composition["skill_coverage"].items():
            team_content += f"- **{skill}**: {', '.join(agent_list)}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
        team_content += f"""

## –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è

- **SharedChat**: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.shared_chat else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
- **–ö–æ–º–∞–Ω–¥–∞ ID**: `{team_composition['team_id']}`
- **–°–æ–∑–¥–∞–Ω–æ**: {team_composition['created_at']}

## –†–µ—Å—É—Ä—Å—ã

{self._format_resources_info(resources)}

---
*–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π UnifiedOrchestrator*
"""
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–º–µ—Ç–∫—É –æ –∫–æ–º–∞–Ω–¥–µ
        team_note = ObsidianNote(
            title=f"–ö–æ–º–∞–Ω–¥–∞ –∞–≥–µ–Ω—Ç–æ–≤ - {task_id}",
            content=team_content,
            tags=["–∫–æ–º–∞–Ω–¥–∞", "–∞–≥–µ–Ω—Ç—ã", "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è"],
            metadata={
                "task_id": task_id,
                "team_id": team_composition["team_id"],
                "total_agents": team_composition["total_agents"],
                "coordination_enabled": team_composition["coordination_setup"],
                "agent_roles": list(team_composition["agent_roles"].keys()),
                "skill_coverage": list(team_composition["skill_coverage"].keys()),
                "timestamp": datetime.now().isoformat()
            },
            folder="agents"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        team_path = self.db.save_note(team_note, f"team_{task_id}.md")
        logger.info(f"üë• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {team_path}")
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        for agent_id, agent in agents.items():
            agent_info = team_composition["agent_roles"][agent_id]
            
            agent_content = f"""# –ê–≥–µ–Ω—Ç: {agent_id}

## –ü—Ä–æ—Ñ–∏–ª—å –∞–≥–µ–Ω—Ç–∞

- **ID**: `{agent_id}`
- **–†–æ–ª—å**: {agent_info['role']}
- **–°—Ç–∞—Ç—É—Å**: –∞–∫—Ç–∏–≤–µ–Ω
- **–°–æ–∑–¥–∞–Ω**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## –ù–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞

[[subtask_{agent_info['assigned_subtask']}]]

## –ù–∞–≤—ã–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

{chr(10).join(f'- {skill}' for skill in agent_info['required_skills'])}

## –†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ

- **–ü—É—Ç—å**: `{agent_info['workspace_path']}`
- **–ö–æ–º–∞–Ω–¥–∞**: [[team_{task_id}]]

## –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è

- **SharedChat**: {'‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' if self.shared_chat else '‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'}
- **–ö–æ–º–∞–Ω–¥–∞ ID**: `{team_composition['team_id']}`

## –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç—ã

*–ò—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø–æ –º–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á*

---
*–ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}*
"""
            
            agent_note = ObsidianNote(
                title=f"–ê–≥–µ–Ω—Ç: {agent_id}",
                content=agent_content,
                tags=["–∞–≥–µ–Ω—Ç", agent_info['role'], "–∞–∫—Ç–∏–≤–µ–Ω"],
                metadata={
                    "agent_id": agent_id,
                    "agent_role": agent_info['role'],
                    "task_id": task_id,
                    "team_id": team_composition["team_id"],
                    "assigned_subtask": agent_info['assigned_subtask'],
                    "required_skills": agent_info['required_skills'],
                    "status": "active",
                    "workspace_path": agent_info['workspace_path'],
                    "coordination_enabled": self.shared_chat is not None,
                    "timestamp": datetime.now().isoformat()
                },
                folder="agents"
            )
            
            agent_path = self.db.save_note(agent_note, f"agent_{agent_id}.md")
            logger.debug(f"ü§ñ –ü—Ä–æ—Ñ–∏–ª—å –∞–≥–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {agent_path}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ —Å–æ–∑–¥–∞–Ω–∏–∏
        if self.shared_chat:
            try:
                await self.shared_chat.broadcast_update(
                    sender_id=self.config.orchestrator_id,
                    update=f"–ö–æ–º–∞–Ω–¥–∞ –∏–∑ {len(agents)} –∞–≥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ",
                    task_info={
                        "team_id": team_composition["team_id"],
                        "agent_count": len(agents),
                        "skill_coverage": list(team_composition["skill_coverage"].keys())
                    }
                )
                logger.info("üì¢ –ö–æ–º–∞–Ω–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞ –æ —Å–æ–∑–¥–∞–Ω–∏–∏")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        
        self.agents_created += len(agents)
        logger.info(f"ü§ñ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(agents)} –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        
        return {
            "agents": agents,
            "workspaces": agent_workspaces,
            "team_composition": team_composition,
            "resources": resources,
            "skills_mapping": skills
        }
    
    def _format_resources_info(self, resources: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Å—É—Ä—Å–∞—Ö"""
        if not resources:
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—É—Ä—Å–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        formatted = ""
        for resource_type, details in resources.items():
            formatted += f"- **{resource_type}**: {details}\n"
        
        return formatted or "–†–µ—Å—É—Ä—Å—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è"
    
    async def _execute_with_unified_coordination(self, agents: Dict, subtasks: List, task: str, task_id: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ SharedChat"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        agent_objects = agents.get("agents", {})
        team_composition = agents.get("team_composition", {})
        workspaces = agents.get("workspaces", {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏ workflow
        team = self.team_composer.compose_team(agent_objects)
        workflow = self.workflow_planner.plan_workflow(subtasks, team)
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–º–µ—Ç–∫—É –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_start_content = f"""# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ - {task_id}

## –ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞
{task}

## –ö–æ–º–∞–Ω–¥–∞
- **–ö–æ–º–∞–Ω–¥–∞ ID**: `{team_composition.get('team_id', 'unknown')}`
- **–ê–≥–µ–Ω—Ç–æ–≤**: {len(agent_objects)}
- **Workflow —à–∞–≥–æ–≤**: {len(workflow.get('steps', []))}

## –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

üü° **–í –ø—Ä–æ—Ü–µ—Å—Å–µ** - –ù–∞—á–∞—Ç–æ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## –ü—Ä–æ–≥—Ä–µ—Å—Å

*–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...*

---
*–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ UnifiedOrchestrator*
"""
        
        execution_note = ObsidianNote(
            title=f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - {task_id}",
            content=execution_start_content,
            tags=["–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", "–≤-–ø—Ä–æ—Ü–µ—Å—Å–µ", "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è"],
            metadata={
                "task_id": task_id,
                "team_id": team_composition.get('team_id'),
                "execution_status": "in_progress",
                "started_at": datetime.now().isoformat(),
                "agent_count": len(agent_objects),
                "workflow_steps": len(workflow.get('steps', [])),
                "coordination_enabled": self.shared_chat is not None
            },
            folder="coordination"
        )
        
        execution_path = self.db.save_note(execution_note, f"execution_{task_id}.md")
        logger.info(f"‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ: {execution_path}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if self.shared_chat:
            await self.shared_chat.broadcast_update(
                sender_id=self.config.orchestrator_id,
                update="üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á",
                task_info={
                    'workflow_steps': len(workflow.get('steps', [])),
                    'team_id': team_composition.get('team_id'),
                    'coordination_mode': 'unified'
                }
            )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π ExecutionManager
        try:
            execution_result = await self.execution_manager.execute_workflow(workflow, team)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            success_count = len([r for r in execution_result.get('results', []) if r.get('success', False)])
            total_count = len(execution_result.get('results', []))
            success_rate = success_count / total_count if total_count > 0 else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if success_rate >= 0.8:
                final_status = "‚úÖ **–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ**"
                status_tag = "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            elif success_rate >= 0.5:
                final_status = "üü° **–ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ**"
                status_tag = "—á–∞—Å—Ç–∏—á–Ω–æ"
            else:
                final_status = "‚ùå **–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–∞–º–∏**"
                status_tag = "–æ—à–∏–±–∫–∏"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
            execution_end_content = execution_start_content.replace(
                "üü° **–í –ø—Ä–æ—Ü–µ—Å—Å–µ** - –ù–∞—á–∞—Ç–æ",
                f"{final_status} - –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
            ).replace(
                "*–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...*",
                f"""
## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã

- **–£—Å–ø–µ—à–Ω–æ**: {success_count}/{total_count} ({success_rate:.1%})
- **–ó–∞–≤–µ—Ä—à–µ–Ω–æ**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

### –î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

{self._format_execution_results(execution_result)}

### –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

{self._format_created_files(execution_result)}
"""
            )
            
            updated_execution_note = ObsidianNote(
                title=f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - {task_id}",
                content=execution_end_content,
                tags=["–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", status_tag, "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è"],
                metadata={
                    **execution_note.metadata,
                    "execution_status": "completed",
                    "completed_at": datetime.now().isoformat(),
                    "success_rate": success_rate,
                    "success_count": success_count,
                    "total_count": total_count
                },
                folder="coordination"
            )
            
            self.db.save_note(updated_execution_note, f"execution_{task_id}.md")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è workflow: {e}")
            execution_result = {
                "status": "failed",
                "error": str(e),
                "results": [],
                "workflow": workflow
            }
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if self.shared_chat:
            success_count = len([r for r in execution_result.get('results', []) if r.get('success', False)])
            total_count = len(execution_result.get('results', []))
            
            await self.shared_chat.broadcast_update(
                sender_id=self.config.orchestrator_id,
                update=f"üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count}/{total_count} —É—Å–ø–µ—à–Ω–æ",
                task_info={
                    'success_rate': success_count / total_count if total_count > 0 else 0,
                    'original_task': task,
                    'team_id': team_composition.get('team_id'),
                    'final_status': execution_result.get('status', 'unknown')
                }
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∞–≥–µ–Ω—Ç–æ–≤
        await self._update_agent_statuses(agent_objects, execution_result, task_id)
        
        self.workflows_executed += 1
        logger.info(f"‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {execution_result.get('status', 'unknown')}")
        
        return execution_result
    
    def _format_execution_results(self, execution_result: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        results = execution_result.get('results', [])
        if not results:
            return "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        formatted = ""
        for i, result in enumerate(results, 1):
            status = "‚úÖ" if result.get('success', False) else "‚ùå"
            formatted += f"{i}. {status} {result.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        
        return formatted
    
    def _format_created_files(self, execution_result: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        files = execution_result.get('created_files', [])
        if not files:
            return "–§–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã"
        
        formatted = ""
        for file_path in files:
            formatted += f"- `{file_path}`\n"
        
        return formatted
    
    async def _update_agent_statuses(self, agents: Dict, execution_result: Dict, task_id: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è + –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è A-MEM"""
        try:
            for agent_id in agents.keys():
                # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                agent_result = None
                for result in execution_result.get('results', []):
                    if result.get('agent_id') == agent_id:
                        agent_result = result
                        break
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if agent_result:
                    status = "completed" if agent_result.get('success', False) else "failed"
                    status_emoji = "‚úÖ" if agent_result.get('success', False) else "‚ùå"
                else:
                    status = "unknown"
                    status_emoji = "‚ùì"
                
                # üß† A-MEM: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—ã—Ç –∞–≥–µ–Ω—Ç–∞ –≤ –∞–≥–µ–Ω—Ç–Ω—É—é –ø–∞–º—è—Ç—å
                if self.amem_system and agent_result:
                    await self._save_agent_experience_to_amem(
                        agent_id=agent_id,
                        agent_data=agents[agent_id],
                        agent_result=agent_result,
                        task_id=task_id
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –∞–≥–µ–Ω—Ç–∞
                try:
                    agent_note_path = f"agent_{agent_id}.md"
                    # TODO: –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∞–≥–µ–Ω—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    logger.debug(f"ü§ñ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ {agent_id} –æ–±–Ω–æ–≤–ª—ë–Ω: {status}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ {agent_id}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
    
    async def _save_agent_experience_to_amem(self, agent_id: str, agent_data: Dict, agent_result: Dict, task_id: str):
        """üß† –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –≤ A-MEM –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø—ã—Ç–∞ –∞–≥–µ–Ω—Ç–∞
            experience_context = {
                "agent_id": agent_id,
                "agent_role": agent_data.get('role', 'Unknown'),
                "task_id": task_id,
                "success": agent_result.get('success', False),
                "execution_time": agent_result.get('execution_time', 0),
                "tools_used": agent_result.get('tools_used', []),
                "files_created": agent_result.get('files_created', []),
                "errors": agent_result.get('errors', [])
            }
            
            # –°–æ–∑–¥–∞—ë–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è A-MEM
            memory_content = f"""
            –û–ø—ã—Ç –∞–≥–µ–Ω—Ç–∞ {agent_id} (—Ä–æ–ª—å: {agent_data.get('role', 'Unknown')})
            
            –ó–∞–¥–∞—á–∞: {task_id}
            –°—Ç–∞—Ç—É—Å: {'‚úÖ –£—Å–ø–µ—Ö' if agent_result.get('success') else '‚ùå –û—à–∏–±–∫–∞'}
            –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {agent_result.get('execution_time', 0):.2f}—Å
            
            –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(agent_result.get('tools_used', []))}
            –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {len(agent_result.get('files_created', []))}
            
            –î–µ—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç—ã: {agent_result.get('content', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}
            """
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
            memory_tag = f"agent_experience_{agent_data.get('role', 'unknown').lower()}"
            if not agent_result.get('success'):
                memory_tag += "_failure"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ A-MEM
            await self.amem_system.store_memory(
                content=memory_content.strip(),
                context=experience_context,
                tags=[memory_tag, f"task_{task_id}", f"agent_{agent_id}"]
            )
            
            logger.info(f"üß† –û–ø—ã—Ç –∞–≥–µ–Ω—Ç–∞ {agent_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ A-MEM")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –∞–≥–µ–Ω—Ç–∞ {agent_id} –≤ A-MEM: {e}")
    
    async def _validate_results(self, task: str, execution_result: Dict) -> Dict[str, Any]:
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞–∑–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if not self.smart_validator:
            return {"quality_score": 0.5, "validation": "SmartValidator –æ—Ç–∫–ª—é—á–µ–Ω"}
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ü–ï–†–ï–î –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        created_files = execution_result.get('created_files', []) or execution_result.get('files_created', [])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ step_results (ExecutionManager)
        all_step_files = []
        for step_id, step_result in execution_result.get('step_results', {}).items():
            if isinstance(step_result, dict):
                step_files = step_result.get('files_created', []) or step_result.get('created_files', [])
                all_step_files.extend(step_files)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ agent_results (–µ—Å–ª–∏ –µ—Å—Ç—å)
        all_agent_files = []
        for agent_id, agent_result in execution_result.get('agent_results', {}).items():
            if isinstance(agent_result, dict):
                agent_files = agent_result.get('files_created', []) or agent_result.get('created_files', [])
                all_agent_files.extend(agent_files)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ results array
        all_results_files = []
        for result in execution_result.get('results', []):
            if isinstance(result, dict):
                result_files = result.get('files_created', []) or result.get('created_files', [])
                all_results_files.extend(result_files)
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ outputs/
        import os
        from pathlib import Path
        
        real_files = []
        outputs_dir = Path("./outputs")
        if outputs_dir.exists():
            real_files = [str(f) for f in outputs_dir.rglob("*") if f.is_file()]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –í–°–ï –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ñ–∞–π–ª–æ–≤
        all_files = list(set(
            created_files + all_step_files + all_agent_files + 
            all_results_files + real_files
        ))
        
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        all_files = [f for f in all_files if f]
        
        # –û–ë–ù–û–í–õ–Ø–ï–ú execution_result —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤
        execution_result['created_files'] = all_files
        
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {len(all_files)}")
        if all_files:
            logger.info(f"üìÑ –§–∞–π–ª—ã: {', '.join(all_files[:3])}" + ("..." if len(all_files) > 3 else ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–∑ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á–∏
        expected_outcome = execution_result.get('task_analysis', {}).get('expected_outcome')
        if not expected_outcome:
            logger.warning("‚ö†Ô∏è –û–±—Ä–∞–∑ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            return await self._basic_validation(task, execution_result)
        
        logger.info(f"üéØ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –æ–±—Ä–∞–∑—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {expected_outcome['type']}")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            validation_result = await self._validate_by_outcome_type(
                task, execution_result, expected_outcome
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞
            needs_rework = validation_result['quality_score'] < 0.7
            validation_result['needs_rework'] = needs_rework
            
            if needs_rework:
                logger.warning(f"‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏: {validation_result['quality_score']:.2f}")
                validation_result['rework_reasons'] = await self._identify_rework_reasons(
                    validation_result, expected_outcome
                )
            else:
                logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {validation_result['quality_score']:.2f}")
            
            return validation_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return {
                "quality_score": 0.3, 
                "validation": f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}",
                "needs_rework": True,
                "rework_reasons": ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"]
            }
    
    async def _validate_by_outcome_type(self, task: str, execution_result: Dict, expected_outcome: Dict) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        outcome_type = expected_outcome['type']
        
        if outcome_type == 'application':
            return await self._validate_application_result(task, execution_result, expected_outcome)
        elif outcome_type == 'financial':
            return await self._validate_financial_result(task, execution_result, expected_outcome)
        elif outcome_type == 'information_service':
            return await self._validate_information_service_result(task, execution_result, expected_outcome)
        elif outcome_type == 'content':
            return await self._validate_content_result(task, execution_result, expected_outcome)
        elif outcome_type == 'data_analysis':
            return await self._validate_analysis_result(task, execution_result, expected_outcome)
        elif outcome_type == 'automation':
            return await self._validate_automation_result(task, execution_result, expected_outcome)
        else:
            return await self._validate_generic_result(task, execution_result, expected_outcome)
    
    async def _validate_application_result(self, task: str, execution_result: Dict, expected_outcome: Dict) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        validation_score = 0.0
        validation_details = []
        issues = []
        
        created_files = execution_result.get('created_files', []) or execution_result.get('files_created', [])
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        executable_files = [f for f in created_files if f.endswith(('.py', '.js', '.html', '.exe', '.jar'))]
        if executable_files:
            validation_score += 0.3
            validation_details.append("‚úÖ –ù–∞–π–¥–µ–Ω—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã")
        else:
            issues.append("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
        has_main_file = any('main' in f.lower() or 'index' in f.lower() or 'app' in f.lower() for f in created_files)
        if has_main_file:
            validation_score += 0.2
            validation_details.append("‚úÖ –ù–∞–π–¥–µ–Ω –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        else:
            issues.append("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        config_files = [f for f in created_files if any(ext in f.lower() for ext in ['package.json', 'requirements.txt', 'config', 'settings'])]
        if config_files:
            validation_score += 0.2
            validation_details.append("‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        else:
            issues.append("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        specific_params = expected_outcome.get('specific_parameters', {})
        if specific_params.get('frontend_framework'):
            frontend_files = [f for f in created_files if any(fw in f.lower() for fw in ['react', 'vue', 'angular', 'component'])]
            if frontend_files:
                validation_score += 0.15
                validation_details.append("‚úÖ Frontend framework –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
            else:
                issues.append("‚ùå –¢—Ä–µ–±—É–µ–º—ã–π frontend framework –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if specific_params.get('api_required'):
            api_files = [f for f in created_files if any(api in f.lower() for api in ['api', 'router', 'endpoint', 'controller'])]
            if api_files:
                validation_score += 0.15
                validation_details.append("‚úÖ API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
            else:
                issues.append("‚ùå –¢—Ä–µ–±—É–µ–º—ã–µ API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # 5. –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
        if len(created_files) > 0:
            validation_score = min(validation_score + 0.1, 1.0)
            validation_details.append("‚úÖ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        return {
            'quality_score': validation_score,
            'validation_type': 'application',
            'validation_details': validation_details,
            'issues': issues,
            'created_files_count': len(created_files),
            'executable_files': executable_files,
            'meets_requirements': validation_score >= 0.7
        }
    
    async def _validate_financial_result(self, task: str, execution_result: Dict, expected_outcome: Dict) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        validation_score = 0.0
        validation_details = []
        issues = []
        
        # –î–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω—É–∂–Ω–∞ —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç–æ–≤/—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        # –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤/–æ—Ç—á—ë—Ç–æ–≤
        created_files = execution_result.get('created_files', []) or execution_result.get('files_created', [])
        financial_files = [f for f in created_files if any(keyword in f.lower() for keyword in ['finance', 'money', 'payment', 'transaction', 'invoice'])]
        
        if financial_files:
            validation_score += 0.4
            validation_details.append("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        else:
            issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        target_amount = expected_outcome.get('specific_parameters', {}).get('target_amount')
        if target_amount:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            validation_details.append(f"üéØ –¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞: {target_amount}")
            validation_score += 0.3  # –î–µ–º–æ-–±–æ–Ω—É—Å
        
        return {
            'quality_score': validation_score,
            'validation_type': 'financial',
            'validation_details': validation_details,
            'issues': issues,
            'target_amount': target_amount,
            'meets_requirements': validation_score >= 0.7
        }
    
    async def _validate_information_service_result(self, task: str, execution_result: Dict, expected_outcome: Dict) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        # –≠—Ç–æ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ç.–¥.
        # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
        return await self._basic_validation(task, execution_result)
    
    async def _validate_content_result(self, task: str, execution_result: Dict, expected_outcome: Dict) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        # –≠—Ç–æ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é, –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–∏, –æ–±—ä—ë–º–∞ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
        return await self._basic_validation(task, execution_result)
    
    async def _validate_analysis_result(self, task: str, execution_result: Dict, expected_outcome: Dict) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        # –≠—Ç–æ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –≤—ã–≤–æ–¥–æ–≤, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ç.–¥.
        # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
        return await self._basic_validation(task, execution_result)
    
    async def _validate_automation_result(self, task: str, execution_result: Dict, expected_outcome: Dict) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        # –≠—Ç–æ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ —Ç.–¥.
        # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
        return await self._basic_validation(task, execution_result)
    
    async def _validate_generic_result(self, task: str, execution_result: Dict, expected_outcome: Dict) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤"""
        validation_score = 0.5  # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª
        validation_details = ["‚úÖ –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"]
        issues = []
        
        created_files = execution_result.get('created_files', []) or execution_result.get('files_created', [])
        if created_files:
            validation_score += 0.2
            validation_details.append(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(created_files)}")
            
            # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
            content_validation = await self._validate_file_contents(created_files, task, expected_outcome)
            validation_score += content_validation['score_bonus']
            validation_details.extend(content_validation['details'])
            issues.extend(content_validation['issues'])
        else:
            issues.append("‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        
        return {
            'quality_score': validation_score,
            'validation_type': 'generic',
            'validation_details': validation_details,
            'issues': issues,
            'meets_requirements': validation_score >= 0.7
        }
    
    async def _validate_file_contents(self, created_files: List[str], task: str, expected_outcome: Dict) -> Dict[str, Any]:
        """
        –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤ - –ü–†–ï–í–û–°–•–û–î–ò–¢ –í–°–ï –°–ò–°–¢–ï–ú–´!
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –†–ï–ê–õ–¨–ù–´–ô –∫–æ–Ω—Ç–µ–Ω—Ç, –∞ –Ω–µ –æ—Ç—á—ë—Ç—ã –ø–æ–¥ –Ω—É–∂–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏.
        –ù–û–í–ò–ù–ö–ê: –ñ–Å–°–¢–ö–ò–ï –®–¢–†–ê–§–´ –∑–∞ –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã!
        """
        score_bonus = 0.0
        details = []
        issues = []
        fake_files_count = 0
        total_files_count = 0
        
        for file_path in created_files:
            try:
                # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                if os.path.exists(file_path):
                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                        content = f.read()
                else:
                    issues.append(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                    continue
                
                total_files_count += 1
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                file_ext = os.path.splitext(file_path)[1].lower()
                content_check = self._check_content_by_extension(file_path, content, file_ext, task)
                
                # –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–¥–µ–ª–∫–∏ - –≠–¢–û –ü–†–ò–û–†–ò–¢–ï–¢!
                fake_report_check = self._detect_fake_reports(content, file_path, task)
                if fake_report_check['is_fake']:
                    fake_files_count += 1
                    issues.append(f"üö® –ü–û–î–î–ï–õ–ö–ê: {file_path}: {fake_report_check['reason']}")
                    # –ñ–Å–°–¢–ö–ò–ô –®–¢–†–ê–§ –∑–∞ –ø–æ–¥–¥–µ–ª–∫—É - –º–∏–Ω—É—Å –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –±–∞–ª–ª–∞!
                    score_bonus -= 0.25  # –ö–∞–∂–¥–∞—è –ø–æ–¥–¥–µ–ª–∫–∞ = -25% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –±–∞–ª–ª–∞
                    continue  # –ù–µ –¥–∞—ë–º –±–æ–Ω—É—Å—ã –∑–∞ –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã!
                
                # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –ù–ï –ø–æ–¥–¥–µ–ª–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                if content_check['is_valid']:
                    score_bonus += content_check['bonus']
                    details.append(f"‚úÖ {file_path}: {content_check['reason']}")
                else:
                    issues.append(f"‚ùå {file_path}: {content_check['reason']}")
                    score_bonus -= 0.05  # –ú–∞–ª—ã–π —à—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                
                details.append(f"‚úÖ {file_path}: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ")
                
            except Exception as e:
                issues.append(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø–æ–¥–¥–µ–ª–æ–∫ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω!
        fake_ratio = fake_files_count / max(total_files_count, 1)
        
        if fake_ratio >= 0.5:  # 50%+ –ø–æ–¥–¥–µ–ª–æ–∫ = –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–ª
            score_bonus = -0.5  # –û–≥—Ä–æ–º–Ω—ã–π —à—Ç—Ä–∞—Ñ
            issues.append(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–í–ê–õ: {fake_files_count}/{total_files_count} —Ñ–∞–π–ª–æ–≤ - –ø–æ–¥–¥–µ–ª–∫–∏!")
        elif fake_ratio >= 0.3:  # 30%+ –ø–æ–¥–¥–µ–ª–æ–∫ = —Å–µ—Ä—å—ë–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            score_bonus -= 0.2  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ
            issues.append(f"‚ö†Ô∏è –°–ï–†–¨–Å–ó–ù–´–ï –ü–†–û–ë–õ–ï–ú–´: {fake_files_count}/{total_files_count} —Ñ–∞–π–ª–æ–≤ - –ø–æ–¥–¥–µ–ª–∫–∏!")
        
        return {
            'score_bonus': score_bonus,  # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ max() - —à—Ç—Ä–∞—Ñ—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å!
            'details': details,
            'issues': issues,
            'fake_files_count': fake_files_count,
            'total_files_count': total_files_count,
            'fake_ratio': fake_ratio
        }
    
    def _check_content_by_extension(self, file_path: str, content: str, file_ext: str, task: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞"""
        
        if file_ext == '.py':
            # –î–ª—è Python —Ñ–∞–π–ª–æ–≤
            if self._is_valid_python_content(content, task):
                return {'is_valid': True, 'bonus': 0.15, 'reason': '–≤–∞–ª–∏–¥–Ω—ã–π Python –∫–æ–¥'}
            else:
                return {'is_valid': False, 'bonus': 0, 'reason': '–Ω–µ —è–≤–ª—è–µ—Ç—Å—è Python –∫–æ–¥–æ–º'}
        
        elif file_ext == '.html':
            # –î–ª—è HTML —Ñ–∞–π–ª–æ–≤
            if self._is_valid_html_content(content, task):
                return {'is_valid': True, 'bonus': 0.1, 'reason': '–≤–∞–ª–∏–¥–Ω—ã–π HTML'}
            else:
                return {'is_valid': False, 'bonus': 0, 'reason': '–Ω–µ —è–≤–ª—è–µ—Ç—Å—è HTML'}
        
        elif file_ext == '.js':
            # –î–ª—è JavaScript —Ñ–∞–π–ª–æ–≤
            if self._is_valid_javascript_content(content, task):
                return {'is_valid': True, 'bonus': 0.15, 'reason': '–≤–∞–ª–∏–¥–Ω—ã–π JavaScript'}
            else:
                return {'is_valid': False, 'bonus': 0, 'reason': '–Ω–µ —è–≤–ª—è–µ—Ç—Å—è JavaScript –∫–æ–¥–æ–º'}
        
        elif file_ext == '.json':
            # –î–ª—è JSON —Ñ–∞–π–ª–æ–≤
            if self._is_valid_json_content(content):
                return {'is_valid': True, 'bonus': 0.1, 'reason': '–≤–∞–ª–∏–¥–Ω—ã–π JSON'}
            else:
                return {'is_valid': False, 'bonus': 0, 'reason': '–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON'}
        
        elif file_ext in ['.txt', '.md']:
            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ HTML –≤ .txt
            if '<html>' in content.lower() or '<!doctype' in content.lower():
                return {'is_valid': False, 'bonus': 0, 'reason': 'HTML –∫–æ–¥ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ'}
            else:
                return {'is_valid': True, 'bonus': 0.05, 'reason': '—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ'}
        
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π - –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            return {'is_valid': True, 'bonus': 0.02, 'reason': '—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω'}
    
    def _is_valid_python_content(self, content: str, task: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º Python –∫–æ–¥–æ–º"""
        # 1. –ù–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML —Ç–µ–≥–∏
        if '<html>' in content.lower() or '<!doctype' in content.lower() or '<div>' in content.lower():
            return False
        
        # 2. –î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å Python –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        python_indicators = [
            'print(', 'def ', 'import ', 'from ', 'if __name__', 
            'class ', 'return ', 'for ', 'while ', 'try:', 'except:'
        ]
        
        has_python_code = any(indicator in content for indicator in python_indicators)
        
        # 3. –î–ª—è –∑–∞–¥–∞—á —Å "hello world" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å print
        if 'hello' in task.lower() and 'world' in task.lower():
            has_hello_world = 'print(' in content and 'Hello' in content and 'World' in content
            return has_hello_world
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –æ—Ç—á—ë—Ç –æ —Å–æ–∑–¥–∞–Ω–∏–∏ Python —Ñ–∞–π–ª–∞
        report_indicators = [
            '–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª', '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ KittyCore', '–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
            '–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞', '–û—Ç—á—ë—Ç –æ', '–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏'
        ]
        
        is_report = any(indicator in content for indicator in report_indicators)
        
        return has_python_code and not is_report
    
    def _is_valid_html_content(self, content: str, task: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º HTML"""
        # –î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        has_html_structure = (
            '<html>' in content.lower() or '<!doctype' in content.lower()
        ) and (
            '<head>' in content.lower() or '<body>' in content.lower()
        )
        
        return has_html_structure
    
    def _is_valid_javascript_content(self, content: str, task: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JavaScript"""
        # –ù–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML —Ç–µ–≥–∏
        if '<html>' in content.lower() or '<!doctype' in content.lower():
            return False
        
        # –î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å JavaScript –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        js_indicators = [
            'function', 'var ', 'let ', 'const ', 'console.log', 
            'document.', 'window.', '=>', 'async ', 'await '
        ]
        
        return any(indicator in content for indicator in js_indicators)
    
    def _is_valid_json_content(self, content: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON"""
        try:
            import json
            json.loads(content)
            return True
        except:
            return False
    
    def _detect_fake_reports(self, content: str, file_path: str, task: str) -> Dict[str, Any]:
        """
        –î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Ç—á—ë—Ç–æ–≤-–ø–æ–¥–¥–µ–ª–æ–∫ - –£–ù–ò–ö–ê–õ–¨–ù–ê–Ø –§–ò–ß–ê KITTYCORE!
        
        –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∫–æ–≥–¥–∞ –∞–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç –æ—Ç—á—ë—Ç—ã –ø–æ–¥ –≤–∏–¥–æ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
        """
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç—á—ë—Ç–æ–≤-–ø–æ–¥–¥–µ–ª–æ–∫
        fake_patterns = [
            # –û–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç—á—ë—Ç–æ–≤
            '–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏',
            '–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
            '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ KittyCore',
            '–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º',
            '–û—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏',
            '–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏',
            '–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:',
            
            # HTML –æ—Ç—á—ë—Ç—ã –≤ –Ω–µ-HTML —Ñ–∞–π–ª–∞—Ö
            '<div class="header">',
            '<div class="content">',
            '<div class="footer">',
            '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ KittyCore 3.0 üê±',
            
            # –®–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
            'TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É',
            '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
            '—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞',
            '–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º',
            
            # –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            '–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è:',
            '–û–ø–∏—Å–∞–Ω–∏–µ: –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª',
            '–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º',
            
            # –ù–û–í–´–ï –ü–ê–¢–¢–ï–†–ù–´ –ó–ê–ì–õ–£–®–ï–ö
            '–ø–µ—Ä–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            '–≤—Ç–æ—Ä–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 
            '—Ç—Ä–µ—Ç—å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            'opis –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            'opis –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            '–ø–µ—Ä–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
            '–≤—Ç–æ—Ä–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
            '–°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ç–æ–ø-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö',
            '–°–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –æ —Ç–æ–ø-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö',
            '–Ω–∞–π–¥—è –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            '–í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã',
            '–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ popular–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–¥–¥–µ–ª–æ–∫
        fake_indicators_found = []
        for pattern in fake_patterns:
            if pattern in content:
                fake_indicators_found.append(pattern)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Python —Ñ–∞–π–ª–æ–≤
        if file_path.endswith('.py'):
            # Python —Ñ–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML
            if '<html>' in content.lower() or '<div>' in content.lower():
                return {
                    'is_fake': True,
                    'reason': 'HTML –∫–æ–¥ –≤ Python —Ñ–∞–π–ª–µ - —è–≤–Ω–∞—è –ø–æ–¥–¥–µ–ª–∫–∞!'
                }
            
            # Python —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∑–∞–¥–∞—á–∏
            if 'hello' in task.lower() and 'world' in task.lower():
                if 'print(' not in content or 'Hello' not in content:
                    return {
                        'is_fake': True,
                        'reason': '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º—ã–π print("Hello, World!")'
                    }
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥–¥–µ–ª–∫–∏
        if len(fake_indicators_found) >= 2:
            return {
                'is_fake': True,
                'reason': f'–æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç—á—ë—Ç–∞: {", ".join(fake_indicators_found[:2])}'
            }
        
        return {'is_fake': False, 'reason': '—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–≥–ª—è–¥–∏—Ç –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ'}
    
    async def _basic_validation(self, task: str, execution_result: Dict) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–≥–¥–∞ –æ–±—Ä–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —á–µ—Ä–µ–∑ SmartValidator
        validation_result = {"quality_score": 0.7, "validation": "–ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è"}
        logger.info(f"‚úÖ –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {validation_result['quality_score']:.2f}")
        return validation_result
    
    async def _identify_rework_reasons(self, validation_result: Dict, expected_outcome: Dict) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏"""
        reasons = []
        
        # –û–±—â–∏–µ –ø—Ä–∏—á–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = validation_result.get('quality_score', 0)
        if quality_score < 0.3:
            reasons.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        elif quality_score < 0.5:
            reasons.append("–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        elif quality_score < 0.7:
            reasons.append("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏–∑ issues
        issues = validation_result.get('issues', [])
        for issue in issues:
            if "‚ùå" in issue:
                reasons.append(issue.replace("‚ùå ", ""))
        
        # –ü—Ä–∏—á–∏–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        validation_type = validation_result.get('validation_type', 'generic')
        
        if validation_type == 'application':
            if not validation_result.get('executable_files'):
                reasons.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            if validation_result.get('created_files_count', 0) == 0:
                reasons.append("–ù–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        
        elif validation_type == 'financial':
            target_amount = validation_result.get('target_amount')
            if target_amount and quality_score < 0.7:
                reasons.append(f"–ù–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞: {target_amount}")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é
        if not reasons:
            reasons.append("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–∂–∏–¥–∞–Ω–∏—è–º")
        
        return reasons
    
    async def _finalize_task_results(self, task_id: str, execution_result: Dict, validation_result: Dict) -> Dict[str, Any]:
        """–ê–≥—Ä–µ–≥–∞—Ü–∏—è –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ execution_result
        created_files = execution_result.get('created_files', []) or execution_result.get('files_created', [])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ step_results (ExecutionManager)
        all_step_files = []
        for step_id, step_result in execution_result.get('step_results', {}).items():
            if isinstance(step_result, dict):
                # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —à–∞–≥–∞
                step_files = step_result.get('files_created', []) or step_result.get('created_files', [])
                all_step_files.extend(step_files)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ agent_results (–µ—Å–ª–∏ –µ—Å—Ç—å)
        all_agent_files = []
        for agent_id, agent_result in execution_result.get('agent_results', {}).items():
            if isinstance(agent_result, dict):
                agent_files = agent_result.get('files_created', []) or agent_result.get('created_files', [])
                all_agent_files.extend(agent_files)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        all_files = list(set(created_files + all_step_files + all_agent_files))
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ outputs/
        import os
        from pathlib import Path
        
        outputs_dir = Path("./outputs")
        if outputs_dir.exists():
            real_files = [str(f) for f in outputs_dir.rglob("*") if f.is_file()]
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫ —Å–ø–∏—Å–∫—É
            all_files.extend(real_files)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        created_files = list(set(f for f in all_files if f))
        
        # –°–æ–∑–¥–∞—ë–º —Ç—Ä–µ–π—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
        process_trace = [
            "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ",
            "–í—ã–ø–æ–ª–Ω–µ–Ω –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", 
            "–ü—Ä–æ–≤–µ–¥–µ–Ω–∞ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è",
            "–°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–≥–µ–Ω—Ç–æ–≤",
            "–í—ã–ø–æ–ª–Ω–µ–Ω workflow",
            "–ü—Ä–æ–≤–µ–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è",
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã"
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
        coordination_log = []
        if self.shared_chat:
            # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ SharedChat
            coordination_log = ["–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —á–µ—Ä–µ–∑ SharedChat"]
        
        return {
            "created_files": created_files,
            "process_trace": process_trace,
            "coordination_log": coordination_log,
            "execution_summary": execution_result,
            "validation_summary": validation_result
        }
    
    async def _update_learning_systems(self, task: str, final_result: Dict, start_time: datetime) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –æ–±—É—á–µ–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫ + –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è A-MEM + üêú –§–µ—Ä–æ–º–æ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å"""
        duration = (datetime.now() - start_time).total_seconds()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å
        await self.collective_memory.store(
            f"–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task[:100]}", 
            "orchestrator", 
            ["–∑–∞–¥–∞—á–∞", "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", "unified"]
        )
        
        # üß† A-MEM: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –∞–≥–µ–Ω—Ç–Ω—É—é –ø–∞–º—è—Ç—å
        if self.amem_system:
            await self._save_task_solution_to_amem(task, final_result, duration)
        
        # üêú –§–ï–†–û–ú–û–ù–ù–ê–Ø –ü–ê–ú–Ø–¢–¨: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—Ö —Ä–µ—à–µ–Ω–∏—è
        try:
            from .pheromone_memory import record_agent_success
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
            task_type = self._determine_task_type(task)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Ä–µ—à–µ–Ω–∏—è
            solution_pattern = self._extract_solution_pattern(final_result)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤
            agent_combination = self._get_agent_combination(final_result)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            tools_used = self._get_tools_used(final_result)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            quality_score = final_result.get('validation_summary', {}).get('quality_score', 0.0)
            success = quality_score >= 0.7
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–µ—Ä–æ–º–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            record_agent_success(
                task_type=task_type,
                solution_pattern=solution_pattern,
                agent_combination=agent_combination,
                tools_used=tools_used,
                success=success
            )
            
            logger.info(f"üêú –§–µ—Ä–æ–º–æ–Ω–Ω—ã–π —Å–ª–µ–¥ –∑–∞–ø–∏—Å–∞–Ω: {task_type} -> {solution_pattern} (success={success})")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–µ—Ä–æ–º–æ–Ω–Ω–æ–≥–æ —Å–ª–µ–¥–∞: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
        if self.self_improvement:
            try:
                # TODO: –ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
                logger.info("üß† –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è: {e}")
        
        logger.info(f"üìä –°–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞ {duration:.2f}—Å")
    
    async def _save_task_solution_to_amem(self, task: str, final_result: Dict, duration: float) -> None:
        """üß† –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ A-MEM –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            created_files = final_result.get('created_files', [])
            validation_summary = final_result.get('validation_summary', {})
            quality_score = validation_summary.get('quality_score', 0.0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
            solution_content = f"""
            –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task}
            
            ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f}—Å
            ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f}/1.0
            üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(created_files)}
            
            –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
            {chr(10).join(final_result.get('process_trace', []))}
            
            –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
            {chr(10).join(f"‚Ä¢ {file}" for file in created_files[:10])}
            
            –î–µ—Ç–∞–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:
            {validation_summary.get('validation', '–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞')}
            """
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_tag = "high_quality" if quality_score >= 0.8 else "medium_quality" if quality_score >= 0.6 else "low_quality"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            task_type = "unknown"
            if any(keyword in task.lower() for keyword in ['—Å–∞–π—Ç', '–≤–µ–±', 'html', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ']):
                task_type = "web_development"
            elif any(keyword in task.lower() for keyword in ['–∞–Ω–∞–ª–∏–∑', '–¥–∞–Ω–Ω—ã–µ', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']):
                task_type = "data_analysis"
            elif any(keyword in task.lower() for keyword in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Å–∫—Ä–∏–ø—Ç']):
                task_type = "programming"
            elif any(keyword in task.lower() for keyword in ['–æ—Ç—á–µ—Ç', '–¥–æ–∫—É–º–µ–Ω—Ç', '–æ–ø–∏—Å–∞–Ω–∏–µ']):
                task_type = "documentation"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è A-MEM
            solution_context = {
                "task_type": task_type,
                "quality_score": quality_score,
                "duration_seconds": duration,
                "files_count": len(created_files),
                "success": quality_score >= 0.7,
                "complexity": "high" if duration > 60 else "medium" if duration > 20 else "low"
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ A-MEM
            await self.amem_system.store_memory(
                content=solution_content.strip(),
                context=solution_context,
                tags=[
                    "task_solution",
                    task_type,
                    quality_tag,
                    f"files_{len(created_files)}",
                    "unified_orchestrator"
                ]
            )
            
            logger.info(f"üß† –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ A-MEM (–∫–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f})")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –≤ A-MEM: {e}")
    
    async def _get_amem_insights_for_team_creation(self, subtasks: List[Dict], task_id: str) -> Dict[str, Any]:
        """üß† –ü–æ–ª—É—á–µ–Ω–∏–µ insights –∏–∑ A-MEM –¥–ª—è —É–º–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤"""
        if not self.amem_system:
            return {"enabled": False, "insights": [], "recommendations": []}
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–∑–∞–¥–∞—á–∏
            insights = {
                "enabled": True,
                "search_results": [],
                "agent_recommendations": [],
                "successful_patterns": [],
                "potential_issues": []
            }
            
            for subtask in subtasks:
                subtask_description = subtask.get('description', str(subtask))
                subtask_id = subtask.get('id', 'unknown')
                
                # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
                successful_memories = await self.amem_system.search_memories(
                    query=f"—É—Å–ø–µ—à–Ω—ã–π –æ–ø—ã—Ç {subtask_description}",
                    filters={"tags": ["high_quality", "task_solution"]},
                    limit=3
                )
                
                # –ò—â–µ–º –æ–ø—ã—Ç –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
                agent_experiences = await self.amem_system.search_memories(
                    query=f"–∞–≥–µ–Ω—Ç –æ–ø—ã—Ç {subtask_description}",
                    filters={"tags": ["agent_experience"]},
                    limit=5
                )
                
                # –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                failure_patterns = await self.amem_system.search_memories(
                    query=f"–æ—à–∏–±–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞ {subtask_description}",
                    filters={"tags": ["agent_experience_failure", "low_quality"]},
                    limit=3
                )
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                subtask_insights = {
                    "subtask_id": subtask_id,
                    "description": subtask_description,
                    "successful_solutions": len(successful_memories),
                    "experienced_agents": len(agent_experiences),
                    "known_issues": len(failure_patterns),
                    "recommendations": []
                }
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
                if successful_memories:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
                    for memory in successful_memories:
                        context = memory.get('context', {})
                        if context.get('quality_score', 0) >= 0.8:
                            subtask_insights["recommendations"].append({
                                "type": "best_practice",
                                "advice": f"–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –∑–∞ {context.get('duration_seconds', 'N/A')}—Å",
                                "source": "successful_solution"
                            })
                
                if agent_experiences:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
                    successful_roles = {}
                    for memory in agent_experiences:
                        context = memory.get('context', {})
                        if context.get('success', False):
                            role = context.get('agent_role', 'unknown')
                            if role not in successful_roles:
                                successful_roles[role] = 0
                            successful_roles[role] += 1
                    
                    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ª—É—á—à—É—é —Ä–æ–ª—å
                    if successful_roles:
                        best_role = max(successful_roles, key=successful_roles.get)
                        subtask_insights["recommendations"].append({
                            "type": "role_recommendation",
                            "advice": f"–†–æ–ª—å '{best_role}' –ø–æ–∫–∞–∑–∞–ª–∞ —É—Å–ø–µ—Ö –≤ {successful_roles[best_role]} —Å–ª—É—á–∞—è—Ö",
                            "source": "agent_experience"
                        })
                
                if failure_patterns:
                    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
                    for memory in failure_patterns:
                        context = memory.get('context', {})
                        errors = context.get('errors', [])
                        if errors:
                            subtask_insights["recommendations"].append({
                                "type": "warning",
                                "advice": f"–ò–∑–±–µ–≥–∞—Ç—å –æ—à–∏–±–æ–∫: {', '.join(errors[:2])}",
                                "source": "failure_pattern"
                            })
                
                insights["search_results"].append(subtask_insights)
            
            # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
            total_successful = sum(r["successful_solutions"] for r in insights["search_results"])
            total_experiences = sum(r["experienced_agents"] for r in insights["search_results"])
            
            if total_successful > 0:
                insights["agent_recommendations"].append(
                    f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_successful} —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–¥–∞—á"
                )
            
            if total_experiences > 0:
                insights["agent_recommendations"].append(
                    f"üß† –î–æ—Å—Ç—É–ø–µ–Ω –æ–ø—ã—Ç {total_experiences} –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏"
                )
            
            logger.info(f"üß† A-MEM insights –ø–æ–ª—É—á–µ–Ω—ã: {total_successful} —Ä–µ—à–µ–Ω–∏–π, {total_experiences} –æ–ø—ã—Ç–∞")
            return insights
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è A-MEM insights: {e}")
            return {"enabled": False, "error": str(e), "insights": [], "recommendations": []}

    def _create_solution_summary(self, final_result: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        
        summary_parts = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if final_result.get('created_files'):
            files_info = f"–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(final_result['created_files'])}"
            summary_parts.append(files_info)
        
        # –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if final_result.get('process_trace'):
            process_info = f"–≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {len(final_result['process_trace'])}"
            summary_parts.append(process_info)
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        if final_result.get('coordination_log'):
            coord_info = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {len(final_result['coordination_log'])}"
            summary_parts.append(coord_info)
        
        # –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if final_result.get('quality_assessment'):
            quality_info = f"–ö–∞—á–µ—Å—Ç–≤–æ: {final_result['quality_assessment']}"
            summary_parts.append(quality_info)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if summary_parts:
            summary = "–†–µ—à–µ–Ω–∏–µ: " + "; ".join(summary_parts)
        else:
            summary = "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if final_result.get('summary'):
            summary += f"\n–î–µ—Ç–∞–ª–∏: {final_result['summary']}"
        
        return summary

    def _determine_task_type(self, task: str) -> str:
        """üêú –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è —Ñ–µ—Ä–æ–º–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        task_lower = task.lower()
        
        if any(keyword in task_lower for keyword in ['—Å–∞–π—Ç', '–≤–µ–±', 'html', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å']):
            return "web_development"
        elif any(keyword in task_lower for keyword in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Å–∫—Ä–∏–ø—Ç', '—Ñ—É–Ω–∫—Ü–∏—è', '–∞–ª–≥–æ—Ä–∏—Ç–º']):
            return "programming"
        elif any(keyword in task_lower for keyword in ['–∞–Ω–∞–ª–∏–∑', '–¥–∞–Ω–Ω—ã–µ', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ']):
            return "data_analysis"
        elif any(keyword in task_lower for keyword in ['–æ—Ç—á–µ—Ç', '–¥–æ–∫—É–º–µ–Ω—Ç', '–æ–ø–∏—Å–∞–Ω–∏–µ', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']):
            return "documentation"
        elif any(keyword in task_lower for keyword in ['–¥–∏–∑–∞–π–Ω', '–º–∞–∫–µ—Ç', '–ø—Ä–æ—Ç–æ—Ç–∏–ø', 'ui', 'ux']):
            return "design"
        elif any(keyword in task_lower for keyword in ['–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–±–æ—Ç', '—Å–∫—Ä–∏–ø—Ç', '–ø—Ä–æ—Ü–µ—Å—Å']):
            return "automation"
        elif any(keyword in task_lower for keyword in ['—Ç–µ—Å—Ç', '–ø—Ä–æ–≤–µ—Ä–∫–∞', '–≤–∞–ª–∏–¥–∞—Ü–∏—è', '–∫–∞—á–µ—Å—Ç–≤–æ']):
            return "testing"
        else:
            return "general"
    
    def _extract_solution_pattern(self, final_result: Dict) -> str:
        """üêú –ò–∑–≤–ª–µ—á—å –ø–∞—Ç—Ç–µ—Ä–Ω —Ä–µ—à–µ–Ω–∏—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        created_files = final_result.get('created_files', [])
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if any('.py' in file for file in created_files):
            return "python_solution"
        elif any('.html' in file for file in created_files):
            return "web_solution"
        elif any('.js' in file for file in created_files):
            return "javascript_solution"
        elif any('.json' in file for file in created_files):
            return "config_solution"
        elif any('.md' in file for file in created_files):
            return "documentation_solution"
        elif any('.txt' in file for file in created_files):
            return "text_solution"
        elif created_files:
            return "file_creation_solution"
        else:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            process_trace = final_result.get('process_trace', [])
            if any('–∞–Ω–∞–ª–∏–∑' in step.lower() for step in process_trace):
                return "analysis_solution"
            elif any('–ø–æ–∏—Å–∫' in step.lower() for step in process_trace):
                return "search_solution"
            else:
                return "general_solution"
    
    def _get_agent_combination(self, final_result: Dict) -> str:
        """üêú –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤"""
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ coordination_log
        coordination_log = final_result.get('coordination_log', [])
        agents_mentioned = set()
        
        for log_entry in coordination_log:
            if isinstance(log_entry, str):
                if 'agent' in log_entry.lower():
                    # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤
                    if 'code' in log_entry.lower():
                        agents_mentioned.add('CodeAgent')
                    if 'analysis' in log_entry.lower():
                        agents_mentioned.add('AnalysisAgent')
                    if 'web' in log_entry.lower():
                        agents_mentioned.add('WebAgent')
                    if 'file' in log_entry.lower():
                        agents_mentioned.add('FileAgent')
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ª–æ–≥–∞—Ö, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        if not agents_mentioned:
            created_files = final_result.get('created_files', [])
            if any('.py' in file for file in created_files):
                agents_mentioned.add('CodeAgent')
            if any('.html' in file for file in created_files):
                agents_mentioned.add('WebAgent')
            if any('.md' in file for file in created_files):
                agents_mentioned.add('DocumentAgent')
            
            # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –ø—É—Å—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
            if not agents_mentioned:
                agents_mentioned.add('GeneralAgent')
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
        sorted_agents = sorted(list(agents_mentioned))
        return '+'.join(sorted_agents)
    
    def _get_tools_used(self, final_result: Dict) -> List[str]:
        """üêú –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        tools = set()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        created_files = final_result.get('created_files', [])
        if created_files:
            tools.add('file_manager')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
            if any('.py' in file for file in created_files):
                tools.add('code_generator')
            if any('.html' in file for file in created_files):
                tools.add('web_generator')
            if any('.json' in file for file in created_files):
                tools.add('config_generator')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        process_trace = final_result.get('process_trace', [])
        for step in process_trace:
            step_lower = step.lower() if isinstance(step, str) else ''
            
            if '–ø–æ–∏—Å–∫' in step_lower or 'search' in step_lower:
                tools.add('web_search')
            if '–∞–Ω–∞–ª–∏–∑' in step_lower or 'analysis' in step_lower:
                tools.add('data_analysis')
            if '–≤–∞–ª–∏–¥–∞—Ü–∏—è' in step_lower or 'validation' in step_lower:
                tools.add('smart_validator')
            if '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è' in step_lower or 'coordination' in step_lower:
                tools.add('shared_chat')
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        if not tools:
            tools.add('general_tools')
        
        return sorted(list(tools))


# === –§–ê–ë–†–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def create_unified_orchestrator(config: UnifiedConfig = None) -> UnifiedOrchestrator:
    """–°–æ–∑–¥–∞—ë—Ç UnifiedOrchestrator"""
    return UnifiedOrchestrator(config)


async def solve_with_unified_orchestrator(task: str, **kwargs) -> Dict[str, Any]:
    """–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ UnifiedOrchestrator"""
    config = UnifiedConfig(**{k: v for k, v in kwargs.items() if hasattr(UnifiedConfig, k)})
    orchestrator = create_unified_orchestrator(config)
    return await orchestrator.solve_task(task, kwargs)


# === –≠–ö–°–ü–û–†–¢ ===

__all__ = [
    "UnifiedOrchestrator",
    "UnifiedConfig", 
    "create_unified_orchestrator",
    "solve_with_unified_orchestrator"
]
