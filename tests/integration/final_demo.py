#!/usr/bin/env python3
"""
üöÄ KittyCore 3.0 - –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –º–æ—â—å —Å–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–µ–π—Å—è –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import os
import kittycore

async def final_demonstration():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    print("üê± KittyCore 3.0 - –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
    print("üöÄ –°–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–∞—è—Å—è –∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print("=" * 60)
    
    orchestrator = kittycore.create_orchestrator()
    
    # –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    complex_task = """
    –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –≤–µ–±-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫–æ–º–ø–∞–Ω–∏–∏ CyberKitty:
    1. HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏
    2. Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    3. –û—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ
    4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    """
    
    print(f"üéØ –°–õ–û–ñ–ù–ê–Ø –ó–ê–î–ê–ß–ê:")
    print(complex_task)
    print("\nüîÑ –ó–ê–ü–£–°–ö–ê–ï–ú –ê–ì–ï–ù–¢–ù–£–Æ –°–ò–°–¢–ï–ú–£...")
    print("=" * 60)
    
    result = await orchestrator.solve_task(complex_task)
    
    if result['status'] == 'completed':
        print(f"\n‚úÖ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê –ó–ê {result['duration']:.2f}—Å")
        print(f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result['complexity_analysis']['complexity']}")
        print(f"üë• –ö–æ–º–∞–Ω–¥–∞: {result['team']['team_size']} –∞–≥–µ–Ω—Ç–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é
        print(f"\nüìã –ü–õ–ê–ù –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
        for i, subtask in enumerate(result['subtasks'], 1):
            print(f"   {i}. {subtask['description']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ workflow
        print(f"\nüìà WORKFLOW –ì–†–ê–§:")
        print(result['workflow_graph']['mermaid'])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        execution = result.get('execution', {})
        files = execution.get('files_created', [])
        
        print(f"\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´ ({len(files)}):")
        total_size = 0
        for file in files:
            if os.path.exists(file):
                size = os.path.getsize(file)
                total_size += size
                print(f"   üìÑ {file} ({size} –±–∞–π—Ç)")
            else:
                print(f"   üìÑ {file} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
        
        print(f"\nüíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size} –±–∞–π—Ç")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        step_results = execution.get('step_results', {})
        print(f"\nü§ñ –î–ï–ô–°–¢–í–ò–Ø –ê–ì–ï–ù–¢–û–í:")
        for step_id, step_result in step_results.items():
            status = "‚úÖ" if step_result.get('status') == 'completed' else "‚ùå"
            agent = step_result.get('agent', 'unknown')
            output = step_result.get('result', 'No output')
            print(f"   {status} {agent}: {output}")
        
        # –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
        memory_stats = result.get('collective_memory_stats', {})
        if memory_stats:
            print(f"\nüß† –ö–û–õ–õ–ï–ö–¢–ò–í–ù–ê–Ø –ü–ê–ú–Ø–¢–¨:")
            print(f"   üìù –ó–∞–ø–∏—Å–µ–π: {memory_stats.get('total_entries', 0)}")
            print(f"   üë• –ê–≥–µ–Ω—Ç–æ–≤: {memory_stats.get('agents', 0)}")
        
        # –°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ
        improvement = result.get('self_improvement_report', {})
        if improvement:
            print(f"\nüöÄ –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–ï:")
            print(f"   üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {improvement.get('total_tasks', 0)}")
            print(f"   ‚ö° –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {improvement.get('avg_efficiency', 0):.2f}")
        
        print(f"\n" + "=" * 60)
        print(f"üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"‚ú® KittyCore 3.0 - —Å–∞–º–∞—è –º–æ—â–Ω–∞—è –∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞!")
        print(f"=" * 60)
        
        print(f"\nüèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:")
        print(f"   ‚úÖ –°–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–∞—è—Å—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
        print(f"   ‚úÖ –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å –∫–æ–º–∞–Ω–¥—ã")
        print(f"   ‚úÖ –ì—Ä–∞—Ñ-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è")
        print(f"   ‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏")
        print(f"   ‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è Mermaid –¥–∏–∞–≥—Ä–∞–º–º")
        print(f"   ‚úÖ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –Ω–∞–¥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –ø–æ–∫–∞–∂–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if files and os.path.exists(files[0]):
            print(f"\nüìñ –ü–†–ò–ú–ï–† –°–û–ó–î–ê–ù–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê:")
            print(f"    –§–∞–π–ª: {files[0]}")
            print("-" * 40)
            try:
                with open(files[0], 'r', encoding='utf-8') as f:
                    content = f.read()
                    print(content[:300])  # –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤
                    if len(content) > 300:
                        print("... (–æ–±—Ä–µ–∑–∞–Ω–æ)")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å: {e}")
            print("-" * 40)
        
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")

if __name__ == "__main__":
    asyncio.run(final_demonstration()) 