#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç LLM –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤–æ–æ–±—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""

import asyncio
import os
import sys
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º KittyCore
sys.path.append('/home/cyberkitty/Project/kittycore')

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig


def setup_fast_llm_config():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ã—Å—Ç—Ä–æ–π LLM –º–æ–¥–µ–ª–∏"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å
    os.environ["OPENROUTER_API_KEY"] = os.getenv("OPENROUTER_API_KEY", "")
    os.environ["LLM_MODEL"] = "deepseek/deepseek-r1-0528:free"
    os.environ["TIMEOUT"] = "30"
    os.environ["MAX_TOKENS"] = "2000"
    os.environ["TEMPERATURE"] = "0.1"
    
    print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê LLM:")
    print(f"   –ú–æ–¥–µ–ª—å: {os.environ['LLM_MODEL']}")
    print(f"   –¢–∞–π–º–∞—É—Ç: {os.environ['TIMEOUT']}—Å")
    print(f"   API –∫–ª—é—á: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.environ['OPENROUTER_API_KEY'] else '‚ùå –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")


async def test_simple_task():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç LLM"""
    
    print("\n" + "="*60)
    print("üéØ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ LLM")
    print("="*60)
    
    setup_fast_llm_config()
    
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞
    task = "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π Python —Å–∫—Ä–∏–ø—Ç hello.py –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç Hello World"
    vault_path = "vault_simple_llm_test"
    
    print(f"\nüìã –ó–ê–î–ê–ß–ê: {task}")
    print(f"üìÇ VAULT: {vault_path}")
    
    # –°–æ–∑–¥–∞—ë–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    config = UnifiedConfig(vault_path=vault_path)
    orchestrator = UnifiedOrchestrator(config=config)
    
    start_time = time.time()
    
    try:
        print("\nüöÄ –ó–ê–ü–£–°–ö...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ solve_task
        result = await orchestrator.solve_task(task)
        
        execution_time = time.time() - start_time
        print(f"\n‚è±Ô∏è –í–†–ï–ú–Ø: {execution_time:.2f}—Å")
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã
        import glob
        files = glob.glob(f"{vault_path}/**/*", recursive=True)
        files = [f for f in files if os.path.isfile(f)]
        
        print(f"\nüìÅ –°–û–ó–î–ê–ù–û –§–ê–ô–õ–û–í: {len(files)}")
        for file_path in files[:5]:
            print(f"   üìÑ {file_path}")
        
        if len(files) > 5:
            print(f"   ... –∏ –µ—â—ë {len(files) - 5}")
        
        return {
            'success': True,
            'execution_time': execution_time,
            'files_created': len(files),
            'completed': True
        }
        
    except Exception as e:
        execution_time = time.time() - start_time
        error_msg = str(e)
        
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {error_msg}")
        print(f"‚è±Ô∏è –í–†–ï–ú–Ø –î–û –û–®–ò–ë–ö–ò: {execution_time:.2f}—Å")
        
        return {
            'success': False,
            'error': error_msg,
            'execution_time': execution_time,
            'completed': False
        }


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üê± KittyCore 3.0 - –ü–†–û–°–¢–û–ô –¢–ï–°–¢ LLM")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if not os.getenv("OPENROUTER_API_KEY"):
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENROUTER_API_KEY")
        return
    
    result = await test_simple_task()
    
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì:")
    print("="*60)
    
    if result['completed']:
        if result['success']:
            print(f"‚úÖ –£–°–ü–ï–•! LLM —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"   üìÑ –§–∞–π–ª–æ–≤: {result['files_created']}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {result['execution_time']:.2f}—Å")
        else:
            print(f"‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print(f"‚ùå LLM –ù–ï –†–ê–ë–û–¢–ê–ï–¢: {result['error']}")


if __name__ == "__main__":
    asyncio.run(main()) 