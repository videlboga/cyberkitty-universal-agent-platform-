#!/usr/bin/env python3
"""
–ú–ï–ì–ê-–û–ß–ò–°–¢–ö–ê KittyCore 3.0 - —É–±–∏—Ä–∞–µ–º –í–°–ï –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è!
"""
import os
import shutil
from pathlib import Path
from datetime import datetime
import re

class MegaCleanup:
    def __init__(self):
        self.project_root = Path(".")
        self.archived_count = 0
        self.moved_count = 0
        
    def mega_cleanup(self):
        """–ú–ï–ì–ê-–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üöÄ –ú–ï–ì–ê-–û–ß–ò–°–¢–ö–ê KITTYCORE 3.0 –ù–ê–ß–ê–õ–ê–°–¨!")
        print("=" * 60)
        
        # 1. –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤ –¥–ª—è –í–°–ï–ì–û –º—É—Å–æ—Ä–∞
        self._create_mega_archive()
        
        # 2. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self._archive_temp_files()
        
        # 3. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –¥—É–±–ª–∏
        self._archive_duplicates()
        
        # 4. –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–π–ª—ã
        self._organize_remaining_files()
        
        # 5. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
        self._final_mega_report()
        
    def _create_mega_archive(self):
        """–°–æ–∑–¥–∞—ë—Ç –º–µ–≥–∞-–∞—Ä—Ö–∏–≤"""
        timestamp = datetime.now().strftime("%Y_%m_%d_%H%M%S")
        self.mega_archive = Path(f"MEGA_ARCHIVE_{timestamp}")
        self.mega_archive.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∞–ø–∫–∏ –≤ –∞—Ä—Ö–∏–≤–µ
        (self.mega_archive / "temp_files").mkdir(exist_ok=True)
        (self.mega_archive / "duplicates").mkdir(exist_ok=True)
        (self.mega_archive / "html_files").mkdir(exist_ok=True)
        (self.mega_archive / "text_files").mkdir(exist_ok=True)
        (self.mega_archive / "json_files").mkdir(exist_ok=True)
        (self.mega_archive / "other_files").mkdir(exist_ok=True)
        
        print(f"üì¶ –°–æ–∑–¥–∞–Ω –º–µ–≥–∞-–∞—Ä—Ö–∏–≤: {self.mega_archive}")
        
    def _archive_temp_files(self):
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        print("\nüóëÔ∏è  –ê—Ä—Ö–∏–≤–∏—Ä—É—é –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
        
        temp_patterns = [
            "output_*.txt",
            "search_results_*.md", 
            "generated_*",
            "*_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]*",
            "*.tmp",
            "*.temp",
            "temp_*",
        ]
        
        temp_count = 0
        for pattern in temp_patterns:
            for file_path in self.project_root.glob(pattern):
                if file_path.is_file():
                    target = self.mega_archive / "temp_files" / file_path.name
                    shutil.move(str(file_path), str(target))
                    temp_count += 1
                    
        print(f"  ‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {temp_count} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        self.archived_count += temp_count
        
    def _archive_duplicates(self):
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –¥—É–±–ª–∏ —Ñ–∞–π–ª–æ–≤"""
        print("\nüîÑ –ê—Ä—Ö–∏–≤–∏—Ä—É—é –¥—É–±–ª–∏...")
        
        # –ì—Ä—É–ø–ø—ã –¥—É–±–ª–µ–π
        duplicate_groups = {
            "prototypes": [
                "prototip*.html", "–ø—Ä–æ—Ç–æ—Ç–∏–ø*.html", "–ø—Ä–æ—Ç–æ—Ç–∏–ø_*.html",
                "prototyp*.html", "–ø—Ä–æ—Ç–æ—Ç–∏–ø—ã*.html"
            ],
            "reports": [
                "otchet*.html", "–æ—Ç—á–µ—Ç*.html", "–æ—Ç—á—ë—Ç*.md", 
                "report*.html", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç*.html"
            ],
            "analysis": [
                "–∞–Ω–∞–ª–∏–∑*.html", "–∞–Ω–∞–ª–∏–∑*.txt", "–∞–Ω–∞–ª–∏–∑*.md",
                "analysis*.txt", "analyst*.py"
            ],
            "plans": [
                "plan*.html", "–ø–ª–∞–Ω*.txt", "planning*.html"
            ],
            "configs": [
                "config*.html", "config*.js", "config*.json",
                "settings*.html", "server_config*"
            ],
            "cards": [
                "card*.html", "–∫–∞—Ä—Ç–æ—á–∫–∏*.html", "cards*.html"
            ]
        }
        
        duplicate_count = 0
        for group_name, patterns in duplicate_groups.items():
            group_dir = self.mega_archive / "duplicates" / group_name
            group_dir.mkdir(exist_ok=True)
            
            for pattern in patterns:
                for file_path in self.project_root.glob(pattern):
                    if file_path.is_file():
                        target = group_dir / file_path.name
                        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
                        counter = 1
                        while target.exists():
                            name_parts = file_path.stem, counter, file_path.suffix
                            target = group_dir / f"{name_parts[0]}_{name_parts[1]}{name_parts[2]}"
                            counter += 1
                            
                        shutil.move(str(file_path), str(target))
                        duplicate_count += 1
                        
        print(f"  ‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {duplicate_count} –¥—É–±–ª–µ–π")
        self.archived_count += duplicate_count
        
    def _organize_remaining_files(self):
        """–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–π–ª—ã"""
        print("\nüìÅ –û—Ä–≥–∞–Ω–∏–∑—É—é –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–π–ª—ã...")
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        folders_to_create = [
            "docs/html", "docs/markdown", "docs/text",
            "data/json", "data/csv", "data/xlsx", 
            "media/images", "media/videos",
            "configs", "examples"
        ]
        
        for folder in folders_to_create:
            Path(folder).mkdir(parents=True, exist_ok=True)
            
        # –ü—Ä–∞–≤–∏–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        organization_rules = {
            # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            "docs/html": ["*.html"],
            "docs/markdown": ["*.md"],
            "docs/text": ["*.txt"],
            
            # –î–∞–Ω–Ω—ã–µ
            "data/json": ["*.json"],
            "data/csv": ["*.csv"],
            "data/xlsx": ["*.xlsx"],
            
            # –ú–µ–¥–∏–∞
            "media/images": ["*.png", "*.jpg", "*.jpeg", "*.gif"],
            "media/videos": ["*.mp4", "*.avi", "*.mov"],
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            "configs": ["*.conf", "*.cfg", "nginx.conf"],
            
            # –ü—Ä–∏–º–µ—Ä—ã
            "examples": ["*.ipynb", "example_*", "demo_*"]
        }
        
        moved_count = 0
        for target_folder, patterns in organization_rules.items():
            for pattern in patterns:
                for file_path in self.project_root.glob(pattern):
                    if file_path.is_file() and file_path.parent == self.project_root:
                        target_path = Path(target_folder) / file_path.name
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏
                        if target_path.exists():
                            counter = 1
                            while target_path.exists():
                                name_parts = file_path.stem, counter, file_path.suffix
                                target_path = Path(target_folder) / f"{name_parts[0]}_{name_parts[1]}{name_parts[2]}"
                                counter += 1
                                
                        shutil.move(str(file_path), str(target_path))
                        moved_count += 1
                        
        print(f"  ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} —Ñ–∞–π–ª–æ–≤")
        self.moved_count += moved_count
        
        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–π–ª—ã (–∫—Ä–æ–º–µ –≤–∞–∂–Ω—ã—Ö)
        important_files = {
            "main.py", "README.md", "requirements.txt", 
            ".env", ".gitignore", "docker-compose.yml", "Dockerfile"
        }
        
        remaining_count = 0
        for file_path in self.project_root.glob("*"):
            if (file_path.is_file() and 
                file_path.name not in important_files and
                not file_path.name.startswith('.') and
                file_path.suffix not in ['.py']):
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞
                if file_path.suffix == '.html':
                    target_dir = self.mega_archive / "html_files"
                elif file_path.suffix in ['.txt', '.md']:
                    target_dir = self.mega_archive / "text_files"
                elif file_path.suffix == '.json':
                    target_dir = self.mega_archive / "json_files"
                else:
                    target_dir = self.mega_archive / "other_files"
                    
                target = target_dir / file_path.name
                counter = 1
                while target.exists():
                    name_parts = file_path.stem, counter, file_path.suffix
                    target = target_dir / f"{name_parts[0]}_{name_parts[1]}{name_parts[2]}"
                    counter += 1
                    
                shutil.move(str(file_path), str(target))
                remaining_count += 1
                
        print(f"  ‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {remaining_count} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤")
        self.archived_count += remaining_count
        
    def _final_mega_report(self):
        """–§–∏–Ω–∞–ª—å–Ω—ã–π –º–µ–≥–∞-–æ—Ç—á—ë—Ç"""
        print("\n" + "="*70)
        print("üéØ –ú–ï–ì–ê-–û–¢–ß–Å–¢ KITTYCORE 3.0")
        print("="*70)
        
        # –°—á–∏—Ç–∞–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –∫–æ—Ä–Ω–µ
        root_files = []
        for file_path in self.project_root.glob("*"):
            if file_path.is_file():
                root_files.append(file_path.name)
                
        print(f"\nüì¶ –ê–†–•–ò–í–ò–†–û–í–ê–ù–û: {self.archived_count} —Ñ–∞–π–ª–æ–≤")
        print(f"üöö –ü–ï–†–ï–ú–ï–©–ï–ù–û: {self.moved_count} —Ñ–∞–π–ª–æ–≤")
        print(f"üìÅ –û–°–¢–ê–õ–û–°–¨ –í –ö–û–†–ù–ï: {len(root_files)} —Ñ–∞–π–ª–æ–≤")
        
        if root_files:
            print("\n  üìã –§–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ:")
            for file_name in sorted(root_files)[:10]:
                print(f"    ‚Ä¢ {file_name}")
            if len(root_files) > 10:
                print(f"    ... –∏ –µ—â—ë {len(root_files) - 10} —Ñ–∞–π–ª–æ–≤")
                
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
        print(f"\nüìÇ –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:")
        important_dirs = [
            'kittycore', 'agents', 'tools', 'utils', 'cli', 
            'demos', 'scripts', 'data', 'docs', 'media', 'configs'
        ]
        
        for dir_name in important_dirs:
            dir_path = Path(dir_name)
            if dir_path.exists():
                file_count = len(list(dir_path.rglob("*")))
                print(f"    üìÅ {dir_name}/ ({file_count} —Ñ–∞–π–ª–æ–≤)")
                
        print(f"\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if len(root_files) <= 10:
            print(f"  üèÜ –û–¢–õ–ò–ß–ù–û! –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –ß–ò–°–¢!")
        elif len(root_files) <= 20:
            print(f"  üëç –•–û–†–û–®–û! –ö–æ—Ä–µ–Ω—å –ø–æ—á—Ç–∏ —á–∏—Å—Ç!")
        else:
            print(f"  ‚ö†Ô∏è  –ï—â—ë –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞...")
            
        print(f"\nüì¶ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {self.mega_archive}")
        print(f"üîÑ –ú–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–±—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∞—Ä—Ö–∏–≤–∞")
        print(f"‚úÖ –ú–ï–ì–ê-–û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    cleanup = MegaCleanup()
    
    print("ü§î –ù–∞—á–∞—Ç—å –ú–ï–ì–ê-–û–ß–ò–°–¢–ö–£ KittyCore 3.0?")
    print("‚ö†Ô∏è  –≠–¢–û –ü–ï–†–ï–ú–ï–°–¢–ò–¢ –°–û–¢–ù–ò –§–ê–ô–õ–û–í –í –ê–†–•–ò–í!")
    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
    
    if response.lower() in ['y', 'yes', '–¥–∞']:
        cleanup.mega_cleanup()
    else:
        print("‚ùå –ú–µ–≥–∞-–æ—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

if __name__ == "__main__":
    main() 