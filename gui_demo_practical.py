#!/usr/bin/env python3
"""
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è GUI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è KittyCore 3.0
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ GUI
"""

import sys
import asyncio
import time

sys.path.append('.')

from kittycore.tools.computer_use_tool import ComputerUseTool

async def gui_demo_practical():
    """–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π GUI"""
    
    print("üé≠ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø GUI –£–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 50)
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ä–µ–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GUI!")
    print("   –ó–∞–∫—Ä–æ–π—Ç–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
    print()
    
    # –ü–∞—É–∑–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    for i in range(3, 0, -1):
        print(f"–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {i}...")
        await asyncio.sleep(1)
    
    tool = ComputerUseTool()
    
    # –î–µ–º–æ 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    print("\nüîç –î–ï–ú–û 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
    print("-" * 30)
    
    # –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
    result = await tool.execute({"action": "get_screen_info"})
    if result["success"]:
        info = result["screen_info"]
        print(f"ÔøΩÔøΩ –≠–∫—Ä–∞–Ω: {info['width']}x{info['height']} (–¥–∏—Å–ø–ª–µ–π {info['display_name']})")
    
    # –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –º—ã—à–∏
    result = await tool.execute({"action": "get_mouse_position"})
    if result["success"]:
        pos = result["position"]
        print(f"üñ±Ô∏è –ú—ã—à—å: ({pos['x']}, {pos['y']})")
    
    # –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
    result = await tool.execute({"action": "get_active_window"})
    if result["success"] and result.get("window"):
        window = result["window"]
        title = window.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")[:40]
        print(f"ü™ü –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ: {title}")
    
    # –î–µ–º–æ 2: –°–∫—Ä–∏–Ω—à–æ—Ç
    print("\nüì∏ –î–ï–ú–û 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
    print("-" * 30)
    
    screenshot_path = "/tmp/kittycore_gui_demo.png"
    result = await tool.execute({
        "action": "screenshot",
        "save_path": screenshot_path
    })
    
    if result["success"]:
        import os
        size = os.path.getsize(screenshot_path)
        print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {screenshot_path}")
        print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size:,} –±–∞–π—Ç")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {result.get('error')}")
    
    # –î–µ–º–æ 3: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
    print("\nüñ±Ô∏è –î–ï–ú–û 3: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é")
    print("-" * 30)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
    original_pos = await tool.execute({"action": "get_mouse_position"})
    if original_pos["success"]:
        orig_x = original_pos["position"]["x"]
        orig_y = original_pos["position"]["y"]
        print(f"–ò—Å—Ö–æ–¥–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: ({orig_x}, {orig_y})")
        
        # –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∫–≤–∞–¥—Ä–∞—Ç—É (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞)
        safe_moves = [
            (orig_x + 50, orig_y),      # –í–ø—Ä–∞–≤–æ
            (orig_x + 50, orig_y + 50), # –í–Ω–∏–∑
            (orig_x, orig_y + 50),      # –í–ª–µ–≤–æ  
            (orig_x, orig_y)            # –í–≤–µ—Ä—Ö (–≤–æ–∑–≤—Ä–∞—Ç)
        ]
        
        print("–î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∫–≤–∞–¥—Ä–∞—Ç—É:")
        for i, (x, y) in enumerate(safe_moves, 1):
            result = await tool.execute({
                "action": "mouse_move",
                "x": x,
                "y": y
            })
            if result["success"]:
                print(f"  {i}. –ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ ({x}, {y})")
            await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ
    
    # –î–µ–º–æ 4: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
    print("\n‚å®Ô∏è –î–ï–ú–û 4: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π")
    print("-" * 30)
    
    # –ù–∞–∂–∞—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
    safe_keys = ["space", "tab", "escape"]
    
    for key in safe_keys:
        result = await tool.execute({
            "action": "key_press", 
            "key": key
        })
        if result["success"]:
            print(f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞: {key}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞–≤–∏—à–∏ {key}: {result.get('error')}")
        await asyncio.sleep(0.3)
    
    # –î–µ–º–æ 5: –†–∞–±–æ—Ç–∞ —Å –æ–∫–Ω–∞–º–∏
    print("\nü™ü –î–ï–ú–û 5: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫–Ω–∞—Ö")
    print("-" * 30)
    
    result = await tool.execute({"action": "list_windows"})
    if result["success"] and result.get("windows"):
        windows = result["windows"]
        print(f"–ù–∞–π–¥–µ–Ω–æ –æ–∫–æ–Ω: {len(windows)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ–∫–æ–Ω
        for i, window in enumerate(windows[:5], 1):
            title = window.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")[:30]
            pid = window.get("pid", "unknown")
            print(f"  {i}. {title} (PID: {pid})")
        
        if len(windows) > 5:
            print(f"  ... –∏ –µ—â—ë {len(windows) - 5} –æ–∫–æ–Ω")
    
    # –î–µ–º–æ 6: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    print("\n‚öôÔ∏è –î–ï–ú–û 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    print("-" * 30)
    
    result = await tool.execute({"action": "check_capabilities"})
    if result["success"] and result.get("capabilities"):
        caps = result["capabilities"]
        available = [k for k, v in caps.items() if v]
        unavailable = [k for k, v in caps.items() if not v]
        
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ ({len(available)}): {', '.join(available)}")
        if unavailable:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ ({len(unavailable)}): {', '.join(unavailable)}")
    
    # –ò—Ç–æ–≥–∏ –¥–µ–º–æ
    print("\n" + "=" * 50)
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 50)
    print("‚úÖ GUI —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
    print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("‚úÖ Manjaro i3 + X11 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
    print("‚úÖ PyAutoGUI backend –∞–∫—Ç–∏–≤–µ–Ω")
    print()
    print("üí° –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
    print("   üñ±Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é (–¥–≤–∏–∂–µ–Ω–∏–µ, –∫–ª–∏–∫–∏)")
    print("   ‚å®Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–∫–ª–∞–≤–∏—à–∏, –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏)")
    print("   üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
    print("   ü™ü –†–∞–±–æ—Ç–∞ —Å –æ–∫–Ω–∞–º–∏")
    print("   üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
    print("   üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ")
    print()
    print("üöÄ KittyCore 3.0 –≥–æ—Ç–æ–≤ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ª—é–±—ã—Ö GUI –∑–∞–¥–∞—á!")

if __name__ == "__main__":
    asyncio.run(gui_demo_practical())
