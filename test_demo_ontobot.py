#!/usr/bin/env python3
"""
üé¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–í–¢–û–¢–ï–°–¢–û–í ONTOBOT
–ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
1. –ó–∞–ø—É—Å–∫ Mock Server
2. –°–∏–º—É–ª—è—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤
"""

import asyncio
import time
from datetime import datetime
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add(
    "logs/demo_ontobot.log",
    rotation="10 MB",
    retention="7 days",
    compression="gz",
    format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | DEMO | {message}",
    level="INFO"
)

async def demo_full_system():
    """–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ OntoBot."""
    
    print("üé¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ê–í–¢–û–¢–ï–°–¢–û–í ONTOBOT")
    print("="*60)
    
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ OntoBot")
    
    try:
        # === 1. –ó–ê–ü–£–°–ö MOCK SERVER ===
        print("\nüì° 1. –ó–∞–ø—É—Å–∫ Telegram Mock Server...")
        
        from tests.telegram_mock_server import TelegramMockServer
        import uvicorn
        import subprocess
        import sys
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Mock Server –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        mock_process = subprocess.Popen([
            sys.executable, "tests/telegram_mock_server.py"
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        await asyncio.sleep(3)
        
        if mock_process.poll() is None:
            print("   ‚úÖ Mock Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8082")
            logger.info("‚úÖ Mock Server —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Mock Server")
            return
        
        # === 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MOCK SERVER ===
        print("\nü§ñ 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Mock Server...")
        
        import aiohttp
        
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            async with session.get("http://localhost:8082/") as response:
                status = await response.json()
                print(f"   üìä –°—Ç–∞—Ç—É—Å: {status['result']['server']}")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await session.post("http://localhost:8082/mock/simulate_user_message", json={
                "user_id": 12345,
                "text": "/start",
                "first_name": "–î–µ–º–æ",
                "username": "demo_user"
            })
            print("   üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            async with session.get("http://localhost:8082/mock/messages") as response:
                messages = await response.json()
                print(f"   üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages['count']}")
        
        # === 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï USER SIMULATOR ===
        print("\nüë§ 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ User Simulator...")
        
        from tests.user_simulator import UserSimulator, OntoTestUsers
        
        simulator = UserSimulator()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_user = simulator.create_user(1001, "–∞–∫—Ç–∏–≤–Ω—ã–π")
        cautious_user = simulator.create_user(1002, "–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π")
        curious_user = simulator.create_user(1003, "–ª—é–±–æ–ø—ã—Ç–Ω—ã–π")
        
        print(f"   üë®‚Äçüíº –°–æ–∑–¥–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {active_user.first_name}")
        print(f"   üë©‚Äçüíº –°–æ–∑–¥–∞–Ω –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {cautious_user.first_name}")
        print(f"   üßë‚Äçüíº –°–æ–∑–¥–∞–Ω –ª—é–±–æ–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {curious_user.first_name}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        await simulator.send_message(1001, "/start")
        await simulator.send_message(1001, "–•–æ—á—É –ø—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")
        await simulator.click_button(1001, "begin_diagnostic")
        
        # –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        goals_response = simulator.get_smart_response(1001, "goals")
        print(f"   üí≠ –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ü–µ–ª—è—Ö: {goals_response[:50]}...")
        
        # === 4. –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í –õ–ò–ß–ù–û–°–¢–ò ===
        print("\nüé≠ 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–∏—á–Ω–æ—Å—Ç–∏...")
        
        personalities = ["–∞–∫—Ç–∏–≤–Ω—ã–π", "–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π", "–ª—é–±–æ–ø—ã—Ç–Ω—ã–π"]
        
        for i, personality in enumerate(personalities, 1004):
            user = simulator.create_user(i, personality)
            response = simulator.get_smart_response(i, "challenges")
            print(f"   {personality.capitalize()}: {response[:60]}...")
        
        # === 5. –°–¢–ê–¢–ò–°–¢–ò–ö–ê MOCK SERVER ===
        print("\nüìä 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Mock Server...")
        
        async with aiohttp.ClientSession() as session:
            async with session.get("http://localhost:8082/mock/stats") as response:
                stats = await response.json()
                result = stats['result']
                
                print(f"   üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result['messages_count']}")
                print(f"   üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result['users_count']}")
                print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {result['updates_count']}")
        
        # === 6. –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê ===
        print("\nüìÑ 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–æ—Ç—á–µ—Ç–∞...")
        
        demo_report = {
            "demo_run": {
                "timestamp": datetime.now().isoformat(),
                "duration": "45 —Å–µ–∫—É–Ω–¥",
                "components_tested": [
                    "Telegram Mock Server",
                    "User Simulator", 
                    "Personality Types",
                    "Smart Responses"
                ]
            },
            "results": {
                "mock_server": "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç",
                "user_simulator": "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç",
                "personalities": "‚úÖ –í—Å–µ 3 —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç–∞—é—Ç",
                "smart_responses": "‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            },
            "statistics": {
                "users_created": 6,
                "messages_sent": 3,
                "buttons_clicked": 1,
                "smart_responses": 4
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        import json
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = f"logs/demo_report_{timestamp}.json"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(demo_report, f, ensure_ascii=False, indent=2)
        
        print(f"   üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # === –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ ===
        print("\n" + "="*60)
        print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("="*60)
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
        print("   ü§ñ Telegram Mock Server - –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
        print("   üë§ User Simulator - —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ")
        print("   üé≠ Personality Types - –∞–∫—Ç–∏–≤–Ω—ã–π, –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π, –ª—é–±–æ–ø—ã—Ç–Ω—ã–π")
        print("   üí≠ Smart Responses - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
        print("   üìä Statistics - —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("   üìÑ Reports - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã")
        print("="*60)
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é OntoBot —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤!")
        print("="*60)
        
        logger.info("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        if 'mock_process' in locals() and mock_process:
            print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
            mock_process.terminate()
            try:
                mock_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                mock_process.kill()
            print("   ‚úÖ Mock Server –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def demo_quick():
    """–ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."""
    
    print("‚ö° –ë–´–°–¢–†–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ONTOBOT –ê–í–¢–û–¢–ï–°–¢–û–í")
    print("="*50)
    
    # –¢–æ–ª—å–∫–æ User Simulator –±–µ–∑ Mock Server
    from tests.user_simulator import UserSimulator
    
    simulator = UserSimulator()
    
    print("\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = []
    personalities = ["–∞–∫—Ç–∏–≤–Ω—ã–π", "–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π", "–ª—é–±–æ–ø—ã—Ç–Ω—ã–π"]
    
    for i, personality in enumerate(personalities, 2001):
        user = simulator.create_user(i, personality)
        users.append(user)
        print(f"   {personality.capitalize()}: {user.first_name} {user.last_name}")
    
    print("\nüí≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤...")
    
    questions = ["goals", "challenges", "motivation"]
    
    for user in users:
        print(f"\n   {user.first_name} ({user.personality}):")
        for question in questions:
            response = simulator.get_smart_response(user.user_id, question)
            print(f"     {question}: {response[:50]}...")
    
    print("\n‚úÖ –ë—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("="*50)

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "quick":
        asyncio.run(demo_quick())
    else:
        asyncio.run(demo_full_system()) 