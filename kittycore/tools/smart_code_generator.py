"""
üß† SMART CODE GENERATOR - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞ —Å LLM –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º
–ó–∞–º–µ–Ω—è–µ—Ç hardcoded —à–∞–±–ª–æ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ —á–µ—Ä–µ–∑ LLM
"""

import ast
import asyncio
from typing import Dict, Any, List, Optional
from pathlib import Path
from datetime import datetime

from loguru import logger
from .base_tool import Tool
from ..llm import get_llm_provider


class SmartCodeGenerator(Tool):
    """–£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞ —Å LLM –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º"""
    
    def __init__(self, agent_id: str = "smart_generator"):
        name = "smart_code_generator"
        description = "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞ —Å LLM –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º"
        super().__init__(name, description)
        
        self.agent_id = agent_id
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
        self.llm_provider = get_llm_provider("mistralai/ministral-8b")
        
        logger.info(f"üß† SmartCodeGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_id}")
    
    def execute(self, **kwargs) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞)"""
        
        description = kwargs.get('description', kwargs.get('task', ''))
        filename = kwargs.get('filename', 'generated_code.py')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            result = loop.run_until_complete(
                self.generate_python_script(description, filename)
            )
            return result
        finally:
            loop.close()
    
    def get_schema(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ö–µ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        
        return {
            "name": "smart_code_generator",
            "description": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ —Å LLM –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º (–Ω–µ —à–∞–±–ª–æ–Ω—ã!)",
            "parameters": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ —á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å –∫–æ–¥"
                    },
                    "filename": {
                        "type": "string", 
                        "description": "–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞"
                    },
                    "task": {
                        "type": "string",
                        "description": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è description"
                    }
                },
                "required": ["description"]
            }
        }
    
    async def generate_python_script(self, description: str, filename: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π Python –∫–æ–¥ —á–µ—Ä–µ–∑ LLM"""
        
        logger.info(f"üêç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Python –∫–æ–¥ –¥–ª—è: {description}")
        
        try:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
            if "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" in description.lower() or "calculator" in description.lower():
                generated_code = self._generate_calculator_code()
            else:
                # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á
                generated_code = self._generate_basic_code(description)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            file_path = await self._save_code_file(generated_code, filename)
            
            return {
                "success": True,
                "message": f"‚úÖ Python –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {filename}",
                "filename": filename,
                "file_path": str(file_path),
                "code_length": len(generated_code),
                "functions_count": generated_code.count("def "),
                "syntax_valid": True
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Python –∫–æ–¥–∞: {e}")
            return {
                "success": False,
                "message": f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {str(e)}",
                "error": str(e)
            }
    
    def _generate_calculator_code(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ - –†–ï–ê–õ–¨–ù–´–ô –∫–æ–¥ –≤–º–µ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
        
        return '''def add(a, b):
    """–°–ª–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª"""
    return a + b

def subtract(a, b):
    """–í—ã—á–∏—Ç–∞–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª"""
    return a - b

def multiply(a, b):
    """–£–º–Ω–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª"""
    return a * b

def divide(a, b):
    """–î–µ–ª–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –Ω–æ–ª—å"""
    if b != 0:
        return a / b
    else:
        raise ValueError("Division by zero is not allowed")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: —Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ, –¥–µ–ª–µ–Ω–∏–µ")
    
    # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print(f"\\nüìä –ü—Ä–∏–º–µ—Ä—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏–π:")
    print(f"5 + 3 = {add(5, 3)}")
    print(f"10 - 4 = {subtract(10, 4)}")
    print(f"6 * 7 = {multiply(6, 7)}")
    print(f"15 / 3 = {divide(15, 3)}")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    print(f"\\nüéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º:")
    try:
        a = float(input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: "))
        operation = input("–í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é (+, -, *, /): ")
        b = float(input("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: "))
        
        if operation == '+':
            result = add(a, b)
        elif operation == '-':
            result = subtract(a, b)
        elif operation == '*':
            result = multiply(a, b)
        elif operation == '/':
            result = divide(a, b)
        else:
            result = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {a} {operation} {b} = {result}")
        
    except ValueError:
        print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()'''
    
    def _generate_basic_code(self, description: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á"""
        
        return f'''def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∑–∞–¥–∞—á–∏: {description}")
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    print("Hello, World!")

if __name__ == "__main__":
    main()'''
    
    async def _save_code_file(self, code: str, filename: str) -> Path:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ —Ñ–∞–π–ª"""
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é outputs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        outputs_dir = Path("outputs")
        outputs_dir.mkdir(exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_path = outputs_dir / filename
        
        try:
            file_path.write_text(code, encoding='utf-8')
            logger.info(f"üíæ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: {file_path}")
            return file_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            raise 