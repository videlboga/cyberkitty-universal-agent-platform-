#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è KittyCore 3.0
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from kittycore.core.self_improvement import SelfLearningEngine
import time

async def test_self_learning_engine():
    """–¢–µ—Å—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è"""
    
    print("üß† === –¢–ï–°–¢ SELFLEARNINGENGINE 3.0 ===")
    
    # –°–æ–∑–¥–∞—Ç—å –¥–≤–∏–∂–æ–∫
    engine = SelfLearningEngine()
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞ Nova
    agent_id = "nova_agent"
    
    print(f"\nüìä –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞ {agent_id}...")
    
    # –£—Å–ø–µ—à–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    for i in range(5):
        await engine.record_agent_execution(
            agent_id=agent_id,
            task_id=f"task_{i}",
            input_data={"query": f"–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö #{i}", "type": "analysis"},
            output=f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ #{i}: –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ",
            execution_time=1.2 + i * 0.1,
            success=True,
            quality_score=0.85 + i * 0.02,
            user_feedback="–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç" if i % 2 == 0 else None
        )
    
    # –ù–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫
    for i in range(2):
        await engine.record_agent_execution(
            agent_id=agent_id,
            task_id=f"error_task_{i}",
            input_data={"query": f"–°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ #{i}", "type": "complex"},
            output=f"Error: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
            execution_time=3.0,
            success=False,
            user_feedback="–ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å"
        )
    
    print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ 7 –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_id}")
    
    # –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏–π
    print(f"\nüìà –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —É–ª—É—á—à–µ–Ω–∏–π...")
    improvement_plan = await engine.get_agent_improvement_plan(agent_id)
    
    print(f"üéØ –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∞: {improvement_plan['status']}")
    print(f"üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π: {improvement_plan['improvement_priority']}")
    print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:")
    stats = improvement_plan['learning_statistics']
    print(f"   - –í—Å–µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {stats['total_feedback']}")
    print(f"   - –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats['avg_score']:.2f}")
    print(f"   - –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {stats['patterns_detected']}")
    
    dataset_stats = improvement_plan['dataset_statistics']
    print(f"üì¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
    print(f"   - –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {dataset_stats['total_examples']}")
    print(f"   - –ì–æ—Ç–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é: {dataset_stats['ready_for_training']}")
    print(f"   - –î–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {dataset_stats.get('high_quality_ratio', 0):.2f}")
    
    monitoring = improvement_plan['monitoring_status']
    print(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:")
    print(f"   - –°—Ç–∞—Ç—É—Å: {monitoring['status']}")
    print(f"   - –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã: {monitoring['active_alerts']}")
    print(f"   - –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {len(monitoring['monitored_metrics'])}")
    
    # Few-shot –ø—Ä–∏–º–µ—Ä—ã
    few_shot = improvement_plan['few_shot_examples']
    if few_shot:
        print(f"üéØ Few-shot –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤: {len(few_shot)} —à—Ç.")
        for i, example in enumerate(few_shot[:2]):
            print(f"   –ü—Ä–∏–º–µ—Ä {i+1}: –∫–∞—á–µ—Å—Ç–≤–æ {example['quality']:.2f}")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    print(f"\nüîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤...")
    auto_improvements = await engine.auto_improve_all_agents()
    
    print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ—É–ª—É—á—à–µ–Ω–∏—è:")
    print(f"   - –ê–≥–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {auto_improvements['total_agents_analyzed']}")
    print(f"   - –ê–≥–µ–Ω—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–æ: {auto_improvements['total_agents_improved']}")
    print(f"   - –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {auto_improvements['system_health']:.2f}")
    
    # –û–±—â–∏–π –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã
    print(f"\nüåê –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è:")
    overview = engine.get_system_overview()
    
    print(f"üè• –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {overview['system_status']}")
    print(f"üìä –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {overview['system_health_score']:.3f}")
    print(f"ü§ñ –ê–≥–µ–Ω—Ç—ã:")
    agents = overview['agents']
    print(f"   - –í—Å–µ–≥–æ: {agents['total']}")
    print(f"   - –° –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é: {agents['with_feedback']}")
    print(f"   - –° –¥–∞—Ç–∞—Å–µ—Ç–∞–º–∏: {agents['with_datasets']}")
    
    feedback = overview['feedback']
    print(f"üîÑ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:")
    print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: {feedback['total_processed']}")
    print(f"   - –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {feedback['patterns_detected']}")
    print(f"   - –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã: {feedback['active_alerts']}")
    
    datasets = overview['datasets']
    print(f"üì¶ –î–∞—Ç–∞—Å–µ—Ç—ã:")
    print(f"   - –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {datasets['total_examples']}")
    print(f"   - –ì–æ—Ç–æ–≤—ã –∫ –æ–±—É—á–µ–Ω–∏—é: {datasets['agents_ready_for_training']} –∞–≥–µ–Ω—Ç–æ–≤")
    
    performance = overview['performance']
    print(f"‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
    print(f"   - –í—Å–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏–π: {performance['total_improvements_made']}")
    print(f"   - –°—Ä–µ–¥–Ω–µ–µ feedback –Ω–∞ –∞–≥–µ–Ω—Ç–∞: {performance['avg_feedback_per_agent']}")

if __name__ == "__main__":
    asyncio.run(test_self_learning_engine()) 