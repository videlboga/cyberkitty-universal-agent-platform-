#!/usr/bin/env python3
"""
üêú –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ–µ—Ä–æ–º–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å UnifiedOrchestrator

–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –æ–ø—ã—Ç –∏ –¥–∞—ë—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
"""

import asyncio
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

async def test_pheromone_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ–µ—Ä–æ–º–æ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ —Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    
    print("üêú –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ–µ—Ä–æ–º–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å UnifiedOrchestrator")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig
        from kittycore.core.pheromone_memory import get_pheromone_system, get_optimal_approach
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = UnifiedConfig(
            vault_path="./test_pheromone_vault",
            enable_smart_validation=True,
            enable_amem_memory=False,  # –û—Ç–∫–ª—é—á–∞–µ–º A-MEM –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            enable_vector_memory=False,
            enable_human_intervention=False
        )
        
        # –°–æ–∑–¥–∞—ë–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        orchestrator = UnifiedOrchestrator(config)
        
        print("\nüìä –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ñ–µ—Ä–æ–º–æ–Ω–æ–≤
        test_tasks = [
            "–°–æ–∑–¥–∞–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞",
            "–ù–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞",
            "–°–æ–∑–¥–∞–π –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π",
            "–°–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂"
        ]
        
        for i, task in enumerate(test_tasks):
            print(f"\n{i+1}. –ó–∞–¥–∞—á–∞: {task}")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            final_result = {
                'created_files': [f'result_{i}.py'] if '–∫–æ–¥' in task or '—Å–∫—Ä–∏–ø—Ç' in task else [f'result_{i}.html'],
                'validation_summary': {'quality_score': 0.8 if i % 2 == 0 else 0.5},  # –ß–µ—Ä–µ–¥—É–µ–º —É—Å–ø–µ—Ö/–Ω–µ—É–¥–∞—á—É
                'process_trace': [f'–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏: {task}', '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è', '–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'],
                'coordination_log': ['CodeAgent –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É'] if '–∫–æ–¥' in task else ['WebAgent —Å–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É']
            }
            
            # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ–µ—Ä–æ–º–æ–Ω–æ–≤
            task_type = orchestrator._determine_task_type(task)
            solution_pattern = orchestrator._extract_solution_pattern(final_result)
            agent_combination = orchestrator._get_agent_combination(final_result)
            tools_used = orchestrator._get_tools_used(final_result)
            
            print(f"  –¢–∏–ø –∑–∞–¥–∞—á–∏: {task_type}")
            print(f"  –ü–∞—Ç—Ç–µ—Ä–Ω —Ä–µ—à–µ–Ω–∏—è: {solution_pattern}")
            print(f"  –ê–≥–µ–Ω—Ç—ã: {agent_combination}")
            print(f"  –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {tools_used}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–µ—Ä–æ–º–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            from kittycore.core.pheromone_memory import record_agent_success
            
            quality_score = final_result['validation_summary']['quality_score']
            success = quality_score >= 0.7
            
            record_agent_success(
                task_type=task_type,
                solution_pattern=solution_pattern,
                agent_combination=agent_combination,
                tools_used=tools_used,
                success=success
            )
            
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –ù–µ—É–¥–∞—á–∞'} (–∫–∞—á–µ—Å—Ç–≤–æ: {quality_score})")
        
        print("\nüéØ –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
        test_recommendations = [
            "programming",
            "web_development", 
            "data_analysis"
        ]
        
        for task_type in test_recommendations:
            approach = get_optimal_approach(task_type)
            print(f"\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {task_type}:")
            print(f"  –õ—É—á—à–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {approach['best_solution_patterns']}")
            print(f"  –õ—É—á—à–∏–µ –∞–≥–µ–Ω—Ç—ã: {approach['best_agent_combination']}")
            print(f"  –õ—É—á—à–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {approach['best_tools']}")
            print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {approach['confidence']:.2f}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–µ—Ä–æ–º–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        pheromone_system = get_pheromone_system()
        stats = pheromone_system.get_pheromone_statistics()
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–µ—Ä–æ–º–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:")
        print(f"  –¢–∏–ø–æ–≤ –∑–∞–¥–∞—á: {stats['task_types']}")
        print(f"  –ö–æ–º–±–∏–Ω–∞—Ü–∏–π –∞–≥–µ–Ω—Ç–æ–≤: {stats['agent_combinations']}")
        print(f"  –í—Å–µ–≥–æ —Å–ª–µ–¥–æ–≤: {stats['total_trails']}")
        print(f"  –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {stats['system_health']:.2f}")
        
        if stats['strongest_trails']:
            print(f"\nüèÜ –°–∞–º—ã–µ —Å–∏–ª—å–Ω—ã–µ —Ñ–µ—Ä–æ–º–æ–Ω–Ω—ã–µ —Å–ª–µ–¥—ã:")
            for trail in stats['strongest_trails'][:3]:
                print(f"  ‚Ä¢ {trail['task_type']} -> {trail['solution_pattern']} "
                      f"(—Å–∏–ª–∞: {trail['strength']:.2f}, —É—Å–ø–µ—Ö: {trail['success_rate']:.2f})")
        
        if stats['best_agents']:
            print(f"\nü§ñ –õ—É—á—à–∏–µ –∞–≥–µ–Ω—Ç–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:")
            for agent in stats['best_agents'][:3]:
                print(f"  ‚Ä¢ {agent['combination']} "
                      f"(—Å–∏–ª–∞: {agent['strength']:.2f}, —É—Å–ø–µ—Ö: {agent['success_rate']:.2f})")
        
        print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ–µ—Ä–æ–º–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_pheromone_integration())
    if success:
        print("\nüéâ –¢–µ—Å—Ç –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ! –§–µ—Ä–æ–º–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        print("\nüí• –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω. –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.") 