"""
üß† –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ù–ê–ö–û–ü–õ–ï–ù–ò–Ø –ó–ù–ê–ù–ò–ô –ê–ì–ï–ù–¢–û–í
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≥–µ–Ω—Ç—ã —É—á–∞—Ç—Å—è –æ—Ç –æ—à–∏–±–æ–∫ –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç –æ–ø—ã—Ç
"""

import asyncio
import json
from pathlib import Path

from kittycore.core.agent_learning_system import learning_system, AgentKnowledge
from kittycore.core.iterative_improvement import IterativeImprovement
from agents.smart_validator import SmartValidator, ValidationResult

async def test_learning_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π"""
    
    print("üß† –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ù–ê–ö–û–ü–õ–ï–ù–ò–Ø –ó–ù–ê–ù–ò–ô –ê–ì–ï–ù–¢–û–í")
    print("=" * 60)
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –æ–ø—ã—Ç–∞ –æ–±—É—á–µ–Ω–∏—è
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –æ–ø—ã—Ç–∞ –æ–±—É—á–µ–Ω–∏—è...")
    
    lesson = await learning_system.record_learning(
        agent_id="test_agent",
        task_description="–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å —Ä–∞—Å—á—ë—Ç–æ–º –ø–ª–æ—â–∞–¥–∏ –∫–æ—Ç–∞",
        attempt_number=1,
        score_before=0.2,
        score_after=0.4,
        error_patterns=["–°–æ–∑–¥–∞–ª –æ—Ç—á—ë—Ç –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"],
        successful_actions=["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª file_manager", "–°–æ–∑–¥–∞–ª —Ñ–∞–π–ª area.txt"],
        failed_actions=["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª Python –≤–º–µ—Å—Ç–æ code_generator"],
        feedback_received="–ò—Å–ø–æ–ª—å–∑—É–π file_manager –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤",
        tools_used=["file_manager", "Python"]
    )
    
    print(f"‚úÖ –£—Ä–æ–∫ –∑–∞–ø–∏—Å–∞–Ω: {lesson}")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞...")
    
    knowledge = await learning_system.get_agent_knowledge("test_agent")
    print(f"üìä –ó–Ω–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞:")
    print(f"   - –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {knowledge.total_attempts}")
    print(f"   - –£—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {knowledge.successful_patterns}")
    print(f"   - –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫: {knowledge.error_patterns}")
    print(f"   - –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {knowledge.tool_preferences}")
    print(f"   - –£—Ä–æ–∫–∏: {knowledge.lessons_learned}")
    
    # 3. –î–æ–±–∞–≤–ª—è–µ–º –µ—â—ë –æ–¥–∏–Ω –æ–ø—ã—Ç
    print("\n3Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –æ–ø—ã—Ç –æ–±—É—á–µ–Ω–∏—è...")
    
    lesson2 = await learning_system.record_learning(
        agent_id="test_agent",
        task_description="–°–æ–∑–¥–∞—Ç—å Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞",
        attempt_number=2,
        score_before=0.4,
        score_after=0.7,
        error_patterns=["–ó–∞–±—ã–ª –∏–º–ø–æ—Ä—Ç math"],
        successful_actions=["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª code_generator", "–î–æ–±–∞–≤–∏–ª import math"],
        failed_actions=[],
        feedback_received="–í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã",
        tools_used=["code_generator"]
    )
    
    print(f"‚úÖ –í—Ç–æ—Ä–æ–π —É—Ä–æ–∫ –∑–∞–ø–∏—Å–∞–Ω: {lesson2}")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é...")
    
    suggestions = await learning_system.get_improvement_suggestions(
        agent_id="test_agent",
        current_task="–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å —Ä–∞—Å—á—ë—Ç–æ–º –æ–±—ä—ë–º–∞ —Å—Ñ–µ—Ä—ã",
        current_errors=["–°–æ–∑–¥–∞–ª –æ—Ç—á—ë—Ç –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞", "–ó–∞–±—ã–ª —Ñ–æ—Ä–º—É–ª—É"]
    )
    
    print(f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
    for suggestion in suggestions:
        print(f"   - {suggestion}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ vault
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
    
    vault_path = Path("obsidian_vault")
    knowledge_dir = vault_path / "knowledge"
    
    if knowledge_dir.exists():
        learning_files = list(knowledge_dir.glob("learning_*.md"))
        knowledge_files = list(knowledge_dir.glob("knowledge_*.json"))
        
        print(f"üìÅ –§–∞–π–ª—ã –æ–±—É—á–µ–Ω–∏—è: {len(learning_files)}")
        print(f"üìÅ –§–∞–π–ª—ã –∑–Ω–∞–Ω–∏–π: {len(knowledge_files)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –æ–±—É—á–µ–Ω–∏—è
        if learning_files:
            latest_learning = max(learning_files, key=lambda f: f.stat().st_mtime)
            print(f"\nüìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –æ–±—É—á–µ–Ω–∏—è: {latest_learning.name}")
            content = latest_learning.read_text(encoding='utf-8')
            print(content[:500] + "..." if len(content) > 500 else content)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª –∑–Ω–∞–Ω–∏–π
        if knowledge_files:
            knowledge_file = knowledge_files[0]
            print(f"\nüìÑ –§–∞–π–ª –∑–Ω–∞–Ω–∏–π: {knowledge_file.name}")
            with open(knowledge_file, 'r', encoding='utf-8') as f:
                knowledge_data = json.load(f)
                print(json.dumps(knowledge_data, ensure_ascii=False, indent=2))
    
    print("\n‚úÖ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –û–ë–£–ß–ï–ù–ò–Ø –ó–ê–í–ï–†–®–Å–ù!")
    return True

async def test_iterative_improvement_with_learning():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–±—É—á–µ–Ω–∏—è"""
    
    print("\nüîÑ –¢–ï–°–¢ –ò–¢–ï–†–ê–¢–ò–í–ù–û–ì–û –£–õ–£–ß–®–ï–ù–ò–Ø –° –û–ë–£–ß–ï–ù–ò–ï–ú")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º –º–æ–∫-–∞–≥–µ–Ω—Ç–∞
    class MockAgent:
        def __init__(self):
            self.agent_id = "learning_test_agent"
            self.attempt_count = 0
        
        async def execute_task(self):
            self.attempt_count += 1
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            if self.attempt_count == 1:
                return {"output": "–û—Ç—á—ë—Ç –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞", "files_created": []}
            elif self.attempt_count == 2:
                return {"output": "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª area.txt", "files_created": ["area.txt"]}
            else:
                return {"output": "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª area.py —Å —Ä–∞—Å—á—ë—Ç–æ–º", "files_created": ["area.py"]}
    
    # –°–æ–∑–¥–∞—ë–º –º–æ–∫-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    class MockValidator:
        def __init__(self):
            self.call_count = 0
        
        async def validate_result(self, original_task, result, created_files):
            self.call_count += 1
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
            if self.call_count == 1:
                return ValidationResult(
                    is_valid=False,
                    score=0.2,
                    user_benefit="–ü–æ–ª—É—á–µ–Ω –æ—Ç—á—ë—Ç –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞",
                    issues=["–°–æ–∑–¥–∞–ª –æ—Ç—á—ë—Ç –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞"],
                    recommendations=["–°–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª"],
                    verdict="‚ùå –ù–ï –í–ê–õ–ò–î–ù–û"
                )
            elif self.call_count == 2:
                return ValidationResult(
                    is_valid=False,
                    score=0.5,
                    user_benefit="–§–∞–π–ª —Å–æ–∑–¥–∞–Ω –Ω–æ –ø—É—Å—Ç–æ–π",
                    issues=["–§–∞–π–ª —Å–æ–∑–¥–∞–Ω –Ω–æ –±–µ–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"],
                    recommendations=["–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á—ë—Ç –≤ —Ñ–∞–π–ª"],
                    verdict="‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –í–ê–õ–ò–î–ù–û"
                )
            else:
                return ValidationResult(
                    is_valid=True,
                    score=0.8,
                    user_benefit="–ì–æ—Ç–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π —Ñ–∞–π–ª —Å —Ä–∞—Å—á—ë—Ç–æ–º",
                    issues=[],
                    recommendations=["–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞"],
                    verdict="‚úÖ –í–ê–õ–ò–î–ù–û"
                )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º
    agent = MockAgent()
    validator = MockValidator()
    improvement = IterativeImprovement()
    
    # –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    initial_result = await agent.execute_task()
    initial_validation = await validator.validate_result(
        "–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å —Ä–∞—Å—á—ë—Ç–æ–º –ø–ª–æ—â–∞–¥–∏", initial_result, []
    )
    
    print(f"üéØ –ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {initial_validation.score:.1f}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
    final_result, attempts = await improvement.improve_agent_iteratively(
        agent=agent,
        task="–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å —Ä–∞—Å—á—ë—Ç–æ–º –ø–ª–æ—â–∞–¥–∏",
        initial_result=initial_result,
        initial_validation=initial_validation,
        smart_validator=validator
    )
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–¢–ï–†–ê–¢–ò–í–ù–û–ì–û –£–õ–£–ß–®–ï–ù–ò–Ø:")
    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {len(attempts)}")
    print(f"   - –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {final_result}")
    
    for i, attempt in enumerate(attempts, 1):
        improved_score = attempt.improved_validation.score if attempt.improved_validation else "N/A"
        print(f"   - –ü–æ–ø—ã—Ç–∫–∞ {i}: {attempt.validation.score:.1f} ‚Üí {improved_score} ({'‚úÖ' if attempt.success else '‚ùå'})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞–Ω–∏—è –∑–∞–ø–∏—Å–∞–ª–∏—Å—å
    knowledge = await learning_system.get_agent_knowledge("learning_test_agent")
    print(f"\nüß† –ù–ê–ö–û–ü–õ–ï–ù–ù–´–ï –ó–ù–ê–ù–ò–Ø:")
    print(f"   - –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {knowledge.total_attempts}")
    print(f"   - –£—Ä–æ–∫–∏: {knowledge.lessons_learned}")
    
    print("\n‚úÖ –¢–ï–°–¢ –ò–¢–ï–†–ê–¢–ò–í–ù–û–ì–û –£–õ–£–ß–®–ï–ù–ò–Ø –° –û–ë–£–ß–ï–ù–ò–ï–ú –ó–ê–í–ï–†–®–Å–ù!")
    return True

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    
    try:
        # –¢–µ—Å—Ç 1: –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è
        await test_learning_system()
        
        # –¢–µ—Å—Ç 2: –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å –æ–±—É—á–µ–Ω–∏–µ–º
        await test_iterative_improvement_with_learning()
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üß† –°–∏—Å—Ç–µ–º–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 