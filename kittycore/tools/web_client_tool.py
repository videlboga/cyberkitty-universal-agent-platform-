"""
üåê Web Client Tool - –ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫

–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤–µ–±-—Ä–µ—Å—É—Ä—Å–æ–≤:
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–æ–≤
- Ping –ø—Ä–æ–≤–µ—Ä–∫–∏
- –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
- –ë–∞–∑–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
"""

import time
import subprocess
import platform
from typing import Dict, Any, List

from .web_common import (
    Tool, ToolResult, requests, urlparse,
    is_valid_url, extract_domain, format_file_size
)


class WebClientTool(Tool):
    """–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
    
    def __init__(self):
        super().__init__(
            name="web_client",
            description="–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-—Ä–µ—Å—É—Ä—Å–æ–≤"
        )
    
    def execute(self, url: str, check_type: str = "status", timeout: int = 10) -> ToolResult:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ–±-—Ä–µ—Å—É—Ä—Å"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
            if not is_valid_url(url):
                return ToolResult(
                    success=False,
                    error=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL: {url}"
                )
            
            if check_type == "status":
                return self._check_status(url, timeout)
            elif check_type == "ping":
                return self._ping_url(url)
            elif check_type == "full":
                return self._full_check(url, timeout)
            else:
                return ToolResult(
                    success=False,
                    error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_type}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: status, ping, full"
                )
                
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"
            )
    
    def _check_status(self, url: str, timeout: int = 10) -> ToolResult:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞"""
        start_time = time.time()
        
        try:
            response = requests.head(url, timeout=timeout, allow_redirects=True)
            response_time = time.time() - start_time
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            content_length = response.headers.get('content-length', 0)
            if content_length:
                try:
                    content_length = int(content_length)
                except:
                    content_length = 0
            
            return ToolResult(
                success=True,
                data={
                    "check_type": "status",
                    "url": url,
                    "domain": extract_domain(url),
                    "status_code": response.status_code,
                    "status_text": response.reason,
                    "available": 200 <= response.status_code < 400,
                    "response_time_seconds": round(response_time, 3),
                    "response_time_ms": round(response_time * 1000, 1),
                    "headers": dict(response.headers),
                    "final_url": response.url,
                    "redirected": str(response.url) != url,
                    "content_length": content_length,
                    "content_length_formatted": format_file_size(content_length) if content_length else "Unknown",
                    "server": response.headers.get('server', 'Unknown'),
                    "content_type": response.headers.get('content-type', 'Unknown'),
                    "encoding": response.headers.get('content-encoding', None),
                    "cache_control": response.headers.get('cache-control', None),
                    "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')
                }
            )
            
        except requests.exceptions.Timeout:
            response_time = time.time() - start_time
            return ToolResult(
                success=True,  # –£—Å–ø–µ—Ö –≤ –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                data={
                    "check_type": "status", 
                    "url": url,
                    "domain": extract_domain(url),
                    "available": False,
                    "error": f"–¢–∞–π–º–∞—É—Ç ({timeout}—Å)",
                    "response_time_seconds": round(response_time, 3),
                    "timeout_limit": timeout,
                    "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')
                }
            )
        except requests.exceptions.ConnectionError as e:
            response_time = time.time() - start_time
            return ToolResult(
                success=True,
                data={
                    "check_type": "status",
                    "url": url,
                    "domain": extract_domain(url),
                    "available": False,
                    "error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)[:100]}",
                    "response_time_seconds": round(response_time, 3),
                    "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')
                }
            )
        except Exception as e:
            response_time = time.time() - start_time
            return ToolResult(
                success=True,
                data={
                    "check_type": "status",
                    "url": url,
                    "domain": extract_domain(url),
                    "available": False,
                    "error": str(e)[:100],
                    "response_time_seconds": round(response_time, 3),
                    "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')
                }
            )
    
    def _ping_url(self, url: str) -> ToolResult:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ ping"""
        try:
            domain = extract_domain(url) or url
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ –ø–æ—Ä—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if '://' in domain:
                domain = domain.split('://')[1]
            if ':' in domain:
                domain = domain.split(':')[0]
            
            param = '-n' if platform.system().lower() == 'windows' else '-c'
            command = ['ping', param, '1', domain]
            
            start_time = time.time()
            result = subprocess.run(
                command, 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            ping_time = time.time() - start_time
            
            return ToolResult(
                success=True,
                data={
                    "check_type": "ping",
                    "url": url,
                    "domain": domain,
                    "ping_success": result.returncode == 0,
                    "ping_time_seconds": round(ping_time, 3),
                    "return_code": result.returncode,
                    "output": result.stdout[:300] if result.stdout else "",
                    "error": result.stderr[:300] if result.stderr else "",
                    "command": ' '.join(command),
                    "platform": platform.system(),
                    "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')
                }
            )
            
        except subprocess.TimeoutExpired:
            return ToolResult(
                success=True,
                data={
                    "check_type": "ping",
                    "url": url,
                    "domain": domain,
                    "ping_success": False,
                    "error": "Ping timeout (10s)",
                    "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')
                }
            )
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ ping: {str(e)}"
            )
    
    def _full_check(self, url: str, timeout: int = 10) -> ToolResult:
        """–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ç–∞—Ç—É—Å + ping"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            status_result = self._check_status(url, timeout)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ ping
            ping_result = self._ping_url(url)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            combined_data = {
                "check_type": "full",
                "url": url,
                "domain": extract_domain(url),
                "status_check": status_result.data if status_result.success else {"error": status_result.error},
                "ping_check": ping_result.data if ping_result.success else {"error": ping_result.error},
                "overall_available": False,
                "summary": [],
                "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')
            }
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            status_ok = (status_result.success and 
                        status_result.data.get('available', False))
            ping_ok = (ping_result.success and 
                      ping_result.data.get('ping_success', False))
            
            combined_data["overall_available"] = status_ok or ping_ok
            
            if status_ok:
                combined_data["summary"].append("‚úÖ HTTP —Å—Ç–∞—Ç—É—Å: OK")
            else:
                combined_data["summary"].append("‚ùå HTTP —Å—Ç–∞—Ç—É—Å: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            if ping_ok:
                combined_data["summary"].append("‚úÖ Ping: OK")
            else:
                combined_data["summary"].append("‚ùå Ping: –ù–µ—É–¥–∞—á–µ–Ω")
            
            return ToolResult(
                success=True,
                data=combined_data
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"
            )
    
    def get_schema(self) -> Dict[str, Any]:
        return {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                    "format": "uri"
                },
                "check_type": {
                    "type": "string",
                    "enum": ["status", "ping", "full"],
                    "description": "–¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ (status - HTTP —Å—Ç–∞—Ç—É—Å, ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏, full - –æ–±–µ)",
                    "default": "status"
                },
                "timeout": {
                    "type": "integer",
                    "description": "–¢–∞–π–º–∞—É—Ç –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
                    "default": 10,
                    "minimum": 1,
                    "maximum": 60
                }
            },
            "required": ["url"]
        }

    def get_available_actions(self) -> List[str]:
        """–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        return [
            "status",  # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å–∞
            "ping",    # Ping –ø—Ä–æ–≤–µ—Ä–∫–∞
            "full"     # –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        ]

    def execute_action(self, action: str, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∏–º–µ–Ω–∏"""
        kwargs['check_type'] = action
        return self.execute(**kwargs)


# –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def create_web_client_tool() -> WebClientTool:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Web Client"""
    return WebClientTool() 