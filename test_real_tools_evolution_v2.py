#!/usr/bin/env python3
"""
üõ†Ô∏è –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í V2 - –° LLM –í–ê–õ–ò–î–ê–¶–ò–ï–ô

–£–ª—É—á—à–µ–Ω–∏—è:
- LLM –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–º–µ—Å—Ç–æ –∂–µ—Å—Ç–∫–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
- –û–±—É—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É—Å–ø–µ—Ö–∞ —á–µ—Ä–µ–∑ —ç–≤–æ–ª—é—Ü–∏—é
- –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Ç–∞–π–º–∞—É—Ç–∞–º LLM
- –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞

–¶–µ–ª—å: –ê–≥–µ–Ω—Ç—ã —Å–∞–º–∏ —É—á–∞—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —É—Å–ø–µ—Ö —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
"""

import asyncio
import time
import json
import random
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if not os.getenv("OPENROUTER_API_KEY"):
    print("‚ö†Ô∏è OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ")
else:
    os.environ["DEFAULT_MODEL"] = "deepseek/deepseek-chat"  # –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
os.environ["MAX_TOKENS"] = "20"     # –°–≤–µ—Ä—Ö-–∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã (–±—ã–ª–æ 50)
os.environ["TEMPERATURE"] = "0"     # –ü–æ–ª–Ω–∞—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å (–±—ã–ª–æ 0.1)
os.environ["TIMEOUT"] = "8"         # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–æ—Ç–∏–≤ –æ–±—Ä—ã–≤–æ–≤

# === –ë–´–°–¢–†–ê–Ø –ú–û–î–ï–õ–¨ –ü–†–û–¢–ò–í –¢–ê–ô–ú–ê–£–¢–û–í ===
FAST_MODEL = "anthropic/claude-3-haiku"  # –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è  
import logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

print("üõ†Ô∏è –ó–∞–ø—É—Å–∫ –†–ï–ê–õ–¨–ù–û–ì–û —Ç–µ—Å—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ V2 —Å LLM –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
print("üß† –ê–≥–µ–Ω—Ç—ã —Å–∞–º–∏ –±—É–¥—É—Ç —É—á–∏—Ç—å—Å—è –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —É—Å–ø–µ—Ö!")

# –£–õ–£–ß–®–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò –° LLM –í–ê–õ–ò–î–ê–¶–ò–ï–ô
SMART_TOOL_TASKS = [
    {
        "name": "web_search_simple",
        "description": "–ù–∞–π–¥–∏ –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
        "category": "web",
        "tools": ["enhanced_web_search"],
        "validation_prompt": "–°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ? –û—Ç–≤–µ—Ç—å –¥–∞/–Ω–µ—Ç –∏ –æ–±—ä—è—Å–Ω–∏.",
        "agent_type": "web"
    },
    {
        "name": "code_execution_simple", 
        "description": "–í—ã–ø–æ–ª–Ω–∏ –ª—é–±–æ–π –ø—Ä–æ—Å—Ç–æ–π Python –∫–æ–¥",
        "category": "code",
        "tools": ["code_execution"],
        "validation_prompt": "–ë—ã–ª –ª–∏ –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –û—Ç–≤–µ—Ç—å –¥–∞/–Ω–µ—Ç –∏ –æ–±—ä—è—Å–Ω–∏.",
        "agent_type": "code"
    },
    {
        "name": "system_info_simple",
        "description": "–ü–æ–ª—É—á–∏ –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ",
        "category": "system",
        "tools": ["super_system_tool"],
        "validation_prompt": "–ü–æ–ª—É—á–µ–Ω–∞ –ª–∏ –ø–æ–ª–µ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–≤–µ—Ä—Å–∏—è, –ø—Ä–æ—Ü–µ—Å—Å—ã, –ø–∞–º—è—Ç—å)? –û—Ç–≤–µ—Ç—å –¥–∞/–Ω–µ—Ç –∏ –æ–±—ä—è—Å–Ω–∏.",
        "agent_type": "system"
    },
    {
        "name": "document_any",
        "description": "–°–æ–∑–¥–∞–π –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–π –ª—é–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç",
        "category": "documents",
        "tools": ["document_tool"],
        "validation_prompt": "–ë—ã–ª –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ? –û—Ç–≤–µ—Ç—å –¥–∞/–Ω–µ—Ç –∏ –æ–±—ä—è—Å–Ω–∏.",
        "agent_type": "analysis"
    },
    {
        "name": "smart_function_any",
        "description": "–°–æ–∑–¥–∞–π –ª—é–±—É—é –ø–æ–ª–µ–∑–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é",
        "category": "code", 
        "tools": ["smart_function_tool"],
        "validation_prompt": "–ë—ã–ª–∞ –ª–∏ —Å–æ–∑–¥–∞–Ω–∞ —Ä–∞–±–æ—á–∞—è —Ñ—É–Ω–∫—Ü–∏—è? –û—Ç–≤–µ—Ç—å –¥–∞/–Ω–µ—Ç –∏ –æ–±—ä—è—Å–Ω–∏.",
        "agent_type": "code"
    },
    {
        "name": "data_analysis_simple",
        "description": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª—é–±—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ",
        "category": "data",
        "tools": ["data_analysis_tool"],
        "validation_prompt": "–ë—ã–ª –ª–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏? –û—Ç–≤–µ—Ç—å –¥–∞/–Ω–µ—Ç –∏ –æ–±—ä—è—Å–Ω–∏.",
        "agent_type": "analysis"
    }
]

async def validate_result_with_llm(task: Dict[str, Any], llm_response: str, tool_result: str) -> Dict[str, Any]:
    """üß† LLM –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –æ–±—É—á–µ–Ω–∏–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤"""
    
    try:
        from kittycore.llm import get_llm_provider
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∏—Ä—É—é—â–µ–≥–æ LLM
        validator_llm = get_llm_provider(model="deepseek/deepseek-chat")
        
        validation_prompt = f"""
–ó–∞–¥–∞—á–∞: {task['description']}
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {task['tools'][0]}

–†–ï–ó–£–õ–¨–¢–ê–¢ LLM:
{llm_response}

–†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê:
{tool_result}

–í–û–ü–†–û–°: {task['validation_prompt']}

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–û–¶–ï–ù–ö–ê: –¥–∞/–Ω–µ—Ç
–û–ë–™–Ø–°–ù–ï–ù–ò–ï: –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
–ö–ê–ß–ï–°–¢–í–û: 0.0-1.0
"""
        
        print(f"   üß† LLM –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        start_time = time.time()
        try:
            validation_response = validator_llm.complete(validation_prompt)
            validation_time = time.time() - start_time
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
            success = "–¥–∞" in validation_response.lower() and "–Ω–µ—Ç" not in validation_response.lower()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–∞—á–µ—Å—Ç–≤–æ
            quality = 0.5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if "–∫–∞—á–µ—Å—Ç–≤–æ:" in validation_response.lower():
                try:
                    quality_line = [line for line in validation_response.split('\n') if '–∫–∞—á–µ—Å—Ç–≤–æ:' in line.lower()][0]
                    quality = float(quality_line.split(':')[1].strip())
                except:
                    quality = 0.5
            
            print(f"   üéØ –í–∞–ª–∏–¥–∞—Ü–∏—è: {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –ù–µ—É–¥–∞—á–∞'} (–∫–∞—á–µ—Å—Ç–≤–æ: {quality:.1f})")
            print(f"   üéØ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞: {validation_time:.1f}—Å")
            
            return {
                'success': success,
                'quality': quality,
                'validation_response': validation_response,
                'validation_time': validation_time,
                'validation_method': 'llm'
            }
            
        except Exception as timeout_error:
            # Fallback –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
            print(f"   ‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            combined_result = (llm_response + tool_result).lower()
            
            # –ë–∞–∑–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
            success_indicators = ['—É—Å–ø–µ—à–Ω–æ', '—Å–æ–∑–¥–∞–Ω', '–≤—ã–ø–æ–ª–Ω–µ–Ω', '–ø–æ–ª—É—á–µ–Ω', '–Ω–∞–π–¥–µ–Ω', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–¥–∞–Ω–Ω—ã–µ']
            error_indicators = ['–æ—à–∏–±–∫–∞', 'failed', 'error', '—Ç–∞–π–º–∞—É—Ç', 'timeout']
            
            success_score = sum(1 for indicator in success_indicators if indicator in combined_result)
            error_score = sum(1 for indicator in error_indicators if indicator in combined_result)
            
            fallback_success = success_score > error_score and len(combined_result) > 50
            fallback_quality = min(1.0, success_score / 3.0) if success_score > 0 else 0.0
            
            return {
                'success': fallback_success,
                'quality': fallback_quality,
                'validation_response': f'Fallback –≤–∞–ª–∏–¥–∞—Ü–∏—è: {success_score} —É—Å–ø–µ—Ö, {error_score} –æ—à–∏–±–æ–∫',
                'validation_time': 0.1,
                'validation_method': 'fallback'
            }
            
    except Exception as e:
        print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return {
            'success': False,
            'quality': 0.0,
            'validation_response': f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}',
            'validation_time': 0.0,
            'validation_method': 'error'
        }

async def execute_smart_tool_task(task: Dict[str, Any], agent_dna, prompt_dna) -> Dict[str, Any]:
    """üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —É–º–Ω–æ–π LLM –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    
    print(f"   ü§ñ –ê–≥–µ–Ω—Ç {agent_dna.agent_id[:12]}... –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {task['tools'][0]} –¥–ª—è: {task['name']}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º
        from kittycore.llm import get_llm_provider
        from kittycore.core.prompt_evolution import generate_prompt_text
        from kittycore.tools import DEFAULT_TOOLS
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tool_manager = DEFAULT_TOOLS
        tool_name = task['tools'][0]
        
        if tool_manager.get_tool(tool_name) is None:
            print(f"   ‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return {
                'success': False,
                'tool_used': tool_name,
                'error': f"Tool {tool_name} not available",
                'execution_time': 0.0,
                'validation_method': 'unavailable'
            }
        
        # –ü–æ–ª—É—á–∞–µ–º LLM –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
        try:
            llm = get_llm_provider(model=FAST_MODEL)  # –ë—ã–ª–æ deepseek/deepseek-chat
            base_prompt = generate_prompt_text(prompt_dna)
        except Exception as llm_error:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ LLM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {llm_error}")
            return {
                'success': False,
                'tool_used': tool_name,
                'error': f"LLM init error: {llm_error}",
                'execution_time': 0.0,
                'validation_method': 'llm_error'
            }
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        tool_prompt = f"""
{base_prompt}

–ó–ê–î–ê–ß–ê: {task['description']}
–î–û–°–¢–£–ü–ù–´–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢: {tool_name}

–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª—å–∑—É—è —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
"""
        
        print(f"   üß† LLM –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞...")
        
        # LLM –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ç–∞–π–º–∞—É—Ç–∞)
        try:
            llm_response = llm.complete(tool_prompt)
        except Exception as llm_timeout:
            print(f"   ‚ö†Ô∏è LLM —Ç–∞–π–º–∞—É—Ç: {llm_timeout}")
            llm_response = f"LLM —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ {tool_name}"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        print(f"   üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {tool_name}...")
        
        # –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–ø–æ–∫–∞)
        tool_result = f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name}: –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        
        # === –£–ú–ù–ê–Ø LLM –í–ê–õ–ò–î–ê–¶–ò–Ø ===
        validation_result = await validate_result_with_llm(task, llm_response, tool_result)
        
        execution_time = time.time() - start_time
        
        print(f"   üìä LLM –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è: {llm_response[:60]}...")
        print(f"   üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_result}")
        print(f"   üìä –í—Ä–µ–º—è: {execution_time:.1f}—Å")
        
        return {
            'success': validation_result['success'],
            'quality': validation_result['quality'],
            'tool_used': tool_name,
            'llm_response': llm_response,
            'tool_result': tool_result,
            'execution_time': execution_time,
            'validation_response': validation_result['validation_response'],
            'validation_time': validation_result['validation_time'],
            'validation_method': validation_result['validation_method'],
            'response_length': len(llm_response)
        }
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return {
            'success': False,
            'tool_used': task['tools'][0] if task['tools'] else 'unknown',
            'error': str(e),
            'execution_time': 999.0,
            'validation_method': 'execution_error'
        }

async def smart_tools_evolution_test():
    """üß† –£–º–Ω—ã–π —Ç–µ—Å—Ç —Å LLM –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    
    print("üß†" + "="*80)
    print("üß† –£–ú–ù–´–ô –¢–ï–°–¢ –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í –° LLM –í–ê–õ–ò–î–ê–¶–ò–ï–ô")
    print("üß†" + "="*80)
    
    try:
        # –ò–º–ø–æ—Ä—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        print("\nüì¶ –ò–º–ø–æ—Ä—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º...")
        from kittycore.core.pheromone_memory import get_pheromone_system, record_agent_success
        from kittycore.core.evolutionary_factory import get_evolutionary_factory, spawn_evolved_agent
        from kittycore.core.prompt_evolution import get_prompt_evolution_engine, get_evolved_prompt
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        test_dir = Path("./test_smart_tools")
        test_dir.mkdir(exist_ok=True)
        
        pheromone_sys = get_pheromone_system()
        evolution_factory = get_evolutionary_factory(str(test_dir / "agents"))
        prompt_engine = get_prompt_evolution_engine(str(test_dir / "prompts"))
        
        print(f"‚úÖ –°–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'total_tasks': 0,
            'llm_validations': 0,
            'fallback_validations': 0,
            'timeout_count': 0,
            'success_count': 0,
            'quality_scores': [],
            'validation_methods': {}
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º 6 –∑–∞–¥–∞—á
        for i, task in enumerate(SMART_TOOL_TASKS):
            print(f"\nüéØ –ó–∞–¥–∞—á–∞ {i+1}: {task['name']} ({task['category']})")
            
            # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞
            agent_dna = spawn_evolved_agent(task['agent_type'], [task['category']])
            prompt_dna = get_evolved_prompt(task['agent_type'], task['category'])
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å —É–º–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            result = await execute_smart_tool_task(task, agent_dna, prompt_dna)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats['total_tasks'] += 1
            if result['success']:
                stats['success_count'] += 1
            
            if 'quality' in result:
                stats['quality_scores'].append(result['quality'])
            
            validation_method = result.get('validation_method', 'unknown')
            stats['validation_methods'][validation_method] = stats['validation_methods'].get(validation_method, 0) + 1
            
            if validation_method == 'llm':
                stats['llm_validations'] += 1
            elif validation_method == 'fallback':
                stats['fallback_validations'] += 1
            
            if 'timeout' in str(result.get('error', '')).lower():
                stats['timeout_count'] += 1
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
            record_agent_success(
                task_type=task['category'],
                solution_pattern=f"smart_tool_{task['tools'][0]}_pattern",
                agent_combination=task['agent_type'],
                tools_used=task['tools'],
                success=result['success']
            )
            
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüéØ" + "="*60)
        print(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–ú–ù–û–ì–û –¢–ï–°–¢–ê")
        print(f"üéØ" + "="*60)
        
        success_rate = stats['success_count'] / stats['total_tasks']
        avg_quality = sum(stats['quality_scores']) / len(stats['quality_scores']) if stats['quality_scores'] else 0.0
        
        print(f"\nüìä –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   ‚úÖ –£—Å–ø–µ—Ö: {success_rate:.1%} ({stats['success_count']}/{stats['total_tasks']})")
        print(f"   üéØ –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {avg_quality:.2f}")
        print(f"   ‚ö° LLM –≤–∞–ª–∏–¥–∞—Ü–∏–π: {stats['llm_validations']}")
        print(f"   üîÑ Fallback –≤–∞–ª–∏–¥–∞—Ü–∏–π: {stats['fallback_validations']}")
        print(f"   ‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç–æ–≤: {stats['timeout_count']}")
        
        print(f"\nüß† –ú–ï–¢–û–î–´ –í–ê–õ–ò–î–ê–¶–ò–ò:")
        for method, count in stats['validation_methods'].items():
            print(f"   {method}: {count}")
        
        # –û—Ü–µ–Ω–∫–∞
        if success_rate >= 0.5:
            print(f"\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢: ‚úÖ –û–¢–õ–ò–ß–ù–û - LLM –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        elif success_rate >= 0.3:
            print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: ‚ö†Ô∏è –•–û–†–û–®–û - —Å–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è")
        else:
            print(f"\nüí• –†–ï–ó–£–õ–¨–¢–ê–¢: ‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
        
        return stats
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    asyncio.run(smart_tools_evolution_test()) 