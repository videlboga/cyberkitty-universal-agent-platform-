#!/usr/bin/env python3
"""
üß™ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç CLI —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–∞—á–µ—Å—Ç–≤–∞
"""

import asyncio
from kittycore_cli import process_request

async def test_cli_directly():
    """–¢–µ—Å—Ç CLI –Ω–∞–ø—Ä—è–º—É—é"""
    print("üß™ –ü–†–Ø–ú–û–ô –¢–ï–°–¢ CLI")
    print("=" * 30)
    
    # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤–º–µ—Å—Ç–æ –ø–µ—á–∞—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    import io
    import sys
    from contextlib import redirect_stdout
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–±–ª–µ–º–Ω–∞—è –∑–∞–¥–∞—á–∞
    print("üåê –¢–ï–°–¢ 1: –ó–∞–¥–∞—á–∞ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
    print("-" * 40)
    
    # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ CLI
    output_buffer = io.StringIO()
    
    with redirect_stdout(output_buffer):
        await process_request("–°–¥–µ–ª–∞–π —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏")
    
    cli_output = output_buffer.getvalue()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –≤—ã–≤–µ–ª CLI
    print("üìä –ê–ù–ê–õ–ò–ó –í–´–í–û–î–ê CLI:")
    
    if "üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´" in cli_output:
        print("   ‚úÖ CLI –û–ë–ù–ê–†–£–ñ–ò–õ –ü–†–û–ë–õ–ï–ú–´!")
        
        if "–ó–ê–î–ê–ß–ê –°–û–ó–î–ê–ù–ò–Ø –ë–ï–ó –§–ê–ô–õ–û–í" in cli_output:
            print("   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤")
        
        if "–õ–ï–í–´–ï –î–ï–ô–°–¢–í–ò–Ø" in cli_output:
            print("   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: httpbin.org")
            
        if "üîß –ê–í–¢–û–ö–û–†–†–ï–ö–¶–ò–Ø" in cli_output:
            print("   ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è")
            
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ö–ê–ß–ï–°–¢–í–ê CLI –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!")
        
    elif "‚úÖ –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ü–†–û–ô–î–ï–ù–ê" in cli_output:
        print("   ‚ùå CLI –ù–ï –û–ë–ù–ê–†–£–ñ–ò–õ –ü–†–û–ë–õ–ï–ú–´")
        print("   üêõ –°–∏—Å—Ç–µ–º–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("\nüìù –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        lines = cli_output.split('\n')
        for i, line in enumerate(lines):
            if "–ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê" in line:
                print(f"   –°—Ç—Ä–æ–∫–∞ {i}: {line}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                for j in range(max(0, i-3), min(len(lines), i+4)):
                    print(f"     {j}: {lines[j]}")
                break
    else:
        print("   ‚ùì –ù–ï–û–ñ–ò–î–ê–ù–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —á–∞—Å—Ç–∏ –≤—ã–≤–æ–¥–∞
    print(f"\nüìã –ö–õ–Æ–ß–ï–í–´–ï –ß–ê–°–¢–ò –í–´–í–û–î–ê:")
    lines = cli_output.split('\n')
    for line in lines:
        if any(keyword in line for keyword in ['–ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê', '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´', '–ê–í–¢–û–ö–û–†–†–ï–ö–¶–ò–Ø', '–õ–ï–í–´–ï –î–ï–ô–°–¢–í–ò–Ø']):
            print(f"   {line}")

if __name__ == "__main__":
    asyncio.run(test_cli_directly()) 