#!/usr/bin/env python3
"""
üß† –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ A-MEM –° –ê–ì–ï–ù–¢–ù–´–ú–ò –ó–ê–î–ê–ß–ê–ú–ò

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç A-MEM –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∞–≥–µ–Ω—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º:
1. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤
2. –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
4. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
5. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ A-MEM
"""

import asyncio
import sys
import time
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig
from loguru import logger

# –ù–∞–±–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∞–≥–µ–Ω—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
REAL_WORLD_TASKS = [
    # === –ë–õ–û–ö 1: –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• ===
    {
        "category": "data_analysis",
        "task": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª",
        "expected_files": ["sales_analysis.py", "report.md", "data.json"],
        "complexity": "medium",
        "skills": ["data_analysis", "python", "reporting"]
    },
    {
        "category": "data_analysis", 
        "task": "–°–æ–∑–¥–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ KPI –∫–æ–º–ø–∞–Ω–∏–∏",
        "expected_files": ["dashboard.html", "kpi_calculator.py", "config.json"],
        "complexity": "high",
        "skills": ["visualization", "web_development", "analytics"]
    },
    
    # === –ë–õ–û–ö 2: –í–ï–ë-–†–ê–ó–†–ê–ë–û–¢–ö–ê ===
    {
        "category": "web_development",
        "task": "–°–æ–∑–¥–∞—Ç—å –ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è SaaS –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ñ–æ—Ä–º–æ–π –ø–æ–¥–ø–∏—Å–∫–∏",
        "expected_files": ["index.html", "styles.css", "script.js"],
        "complexity": "medium", 
        "skills": ["html", "css", "javascript", "design"]
    },
    {
        "category": "web_development",
        "task": "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
        "expected_files": ["api.py", "models.py", "requirements.txt"],
        "complexity": "high",
        "skills": ["backend", "api_design", "python", "databases"]
    },
    
    # === –ë–õ–û–ö 3: –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø ===
    {
        "category": "automation",
        "task": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö email –∑–∞—è–≤–æ–∫",
        "expected_files": ["email_processor.py", "templates.json", "config.yaml"],
        "complexity": "medium",
        "skills": ["automation", "email", "parsing", "templates"]
    },
    {
        "category": "automation",
        "task": "–°–æ–∑–¥–∞—Ç—å –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ Telegram –∫–∞–Ω–∞–ª–∞",
        "expected_files": ["bot.py", "filters.py", "database.py"],
        "complexity": "high", 
        "skills": ["telegram_api", "moderation", "python", "databases"]
    },
    
    # === –ë–õ–û–ö 4: –ö–û–ù–¢–ï–ù–¢ ===
    {
        "category": "content",
        "task": "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è API",
        "expected_files": ["api_docs.md", "examples.py", "schema.json"],
        "complexity": "medium",
        "skills": ["documentation", "technical_writing", "api_design"]
    },
    
    # === –ë–õ–û–ö 5: –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ï ===
    {
        "category": "programming",
        "task": "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –≤ –±–æ–ª—å—à–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ",
        "expected_files": ["optimized_search.py", "benchmarks.py", "results.md"],
        "complexity": "high",
        "skills": ["algorithms", "optimization", "python", "performance"]
    }
]

async def test_amem_real_world():
    """üß† Comprehensive —Ç–µ—Å—Ç A-MEM –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö"""
    print("üöÄ === –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ A-MEM –° –ê–ì–ï–ù–¢–ù–´–ú–ò –ó–ê–î–ê–ß–ê–ú–ò ===")
    start_time = time.time()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    import os
    os.environ["FORCE_AMEM_FALLBACK"] = "true"
    
    print("\nüéØ === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ ===")
    
    config = UnifiedConfig(
        orchestrator_id="amem_real_world_test",
        enable_amem_memory=True,
        amem_memory_path="./vault/system/amem_real_world",
        vault_path="./vault_real_world",
        enable_shared_chat=True,
        enable_vector_memory=False,
        enable_smart_validation=True,
        timeout=120  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
    )
    
    orchestrator = UnifiedOrchestrator(config)
    print("‚úÖ UnifiedOrchestrator —Å A-MEM –≥–æ—Ç–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π
    memory_stats = {
        "tasks_completed": 0,
        "agents_created": 0, 
        "insights_generated": 0,
        "patterns_discovered": 0,
        "quality_improvements": []
    }
    
    print(f"\nüìã === –í–´–ü–û–õ–ù–ï–ù–ò–ï {len(REAL_WORLD_TASKS)} –†–ï–ê–õ–¨–ù–´–• –ó–ê–î–ê–ß ===")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —ç–≤–æ–ª—é—Ü–∏—é –ø–∞–º—è—Ç–∏
    for i, task_spec in enumerate(REAL_WORLD_TASKS, 1):
        print(f"\n{i}Ô∏è‚É£ === –ó–ê–î–ê–ß–ê {i}: {task_spec['category'].upper()} ===")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task_spec['task']}")
        print(f"üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {task_spec['complexity']}")
        print(f"üõ†Ô∏è –ù–∞–≤—ã–∫–∏: {', '.join(task_spec['skills'])}")
        
        # –ü–æ–ª—É—á–∞–µ–º insights –ü–ï–†–ï–î –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
        print(f"\nüß† A-MEM Insights –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º:")
        try:
            # –°–æ–∑–¥–∞—ë–º –º–æ–∫-–ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è insights
            mock_subtasks = [
                {"id": f"subtask_{i}_1", "description": task_spec['task']},
                {"id": f"subtask_{i}_2", "description": f"—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {task_spec['category']}"}
            ]
            
            insights = await orchestrator._get_amem_insights_for_team_creation(
                mock_subtasks, f"task_{i}"
            )
            
            print(f"   üîç –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: enabled={insights.get('enabled', False)}")
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(insights.get('search_results', []))}")
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(insights.get('agent_recommendations', []))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            for rec in insights.get('agent_recommendations', []):
                print(f"   ‚ú® {rec}")
            
            memory_stats["insights_generated"] += len(insights.get('agent_recommendations', []))
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è insights: {e}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã solve_task)
        print(f"\n‚ö° –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏...")
        await asyncio.sleep(0.1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        mock_result = {
            "success": True,
            "execution_time": 15.0 + i * 3,  # –†–∞—Å—Ç—É—â–µ–µ –≤—Ä–µ–º—è
            "tools_used": ["file_manager", "code_generator"] + task_spec['skills'][:2],
            "files_created": task_spec['expected_files'],
            "content": f"–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task_spec['category']}: {task_spec['task'][:50]}...",
            "quality_score": 0.7 + (i * 0.02)  # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–ª—É—á—à–∞—é—â–µ–µ—Å—è –∫–∞—á–µ—Å—Ç–≤–æ
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—ã—Ç –∞–≥–µ–Ω—Ç–∞ –≤ A-MEM
        try:
            await orchestrator._save_agent_experience_to_amem(
                agent_id=f"agent_{task_spec['category']}_{i}",
                agent_data={"role": task_spec['category'], "skills": task_spec['skills']},
                agent_result=mock_result,
                task_id=f"task_{i}"
            )
            
            memory_stats["agents_created"] += 1
            print(f"   ‚úÖ –û–ø—ã—Ç –∞–≥–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ A-MEM")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—ã—Ç–∞: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        try:
            final_result = {
                "created_files": mock_result["files_created"],
                "process_trace": ["–∞–Ω–∞–ª–∏–∑", "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"],
                "validation_summary": {"quality_score": mock_result["quality_score"]}
            }
            
            await orchestrator._save_task_solution_to_amem(
                task=task_spec['task'],
                final_result=final_result,
                duration=mock_result["execution_time"]
            )
            
            memory_stats["tasks_completed"] += 1
            memory_stats["quality_improvements"].append(mock_result["quality_score"])
            print(f"   ‚úÖ –†–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–∫–∞—á–µ—Å—Ç–≤–æ: {mock_result['quality_score']:.2f})")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è: {e}")
        
        print(f"   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(REAL_WORLD_TASKS)} –∑–∞–¥–∞—á")
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
    print(f"\nüß¨ === –ê–ù–ê–õ–ò–ó –ù–ê–ö–û–ü–õ–ï–ù–ù–û–ô –ö–û–õ–õ–ï–ö–¢–ò–í–ù–û–ô –ü–ê–ú–Ø–¢–ò ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        all_memories = await orchestrator.amem_system.search_memories("", limit=100)
        print(f"üß† –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(all_memories)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_stats = {}
        for memory in all_memories:
            tags = memory.get('tags', [])
            for tag in tags:
                if tag not in category_stats:
                    category_stats[tag] = 0
                category_stats[tag] += 1
        
        print(f"üìä –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–∞–º—è—Ç–∏:")
        sorted_categories = sorted(category_stats.items(), key=lambda x: x[1], reverse=True)
        for category, count in sorted_categories[:10]:
            print(f"   üè∑Ô∏è {category}: {count} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–Ω—ã–º —Ç–∏–ø–∞–º –∑–∞–¥–∞—á
    print(f"\nüîç === –¢–ï–°–¢ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê ===")
    
    search_queries = [
        "–≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ HTML CSS",
        "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö Python",
        "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è email telegram",
        "–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–µ",
        "–æ–ø—ã—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞",
        "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã",
        "API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è backend"
    ]
    
    for query in search_queries:
        try:
            results = await orchestrator.amem_system.search_memories(query, limit=3)
            print(f"   üîç '{query}': {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            if results:
                best_result = results[0]
                content_preview = best_result.get('content', '')[:60].replace('\n', ' ')
                tags = best_result.get('tags', [])
                print(f"      ‚ú® –õ—É—á—à–∏–π: {content_preview}... (—Ç–µ–≥–∏: {', '.join(tags[:3])})")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ '{query}': {e}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_time = time.time() - start_time
    avg_quality = sum(memory_stats["quality_improvements"]) / len(memory_stats["quality_improvements"]) if memory_stats["quality_improvements"] else 0
    
    print(f"\nüìà === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å")
    print(f"‚úÖ –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {memory_stats['tasks_completed']}")
    print(f"ü§ñ –ê–≥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {memory_stats['agents_created']}")
    print(f"üí° Insights —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {memory_stats['insights_generated']}")
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {avg_quality:.3f}")
    print(f"üìà –î–∏–Ω–∞–º–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {memory_stats['quality_improvements'][:3]}... ‚Üí {memory_stats['quality_improvements'][-3:]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
    if len(memory_stats["quality_improvements"]) >= 3:
        first_three = sum(memory_stats["quality_improvements"][:3]) / 3
        last_three = sum(memory_stats["quality_improvements"][-3:]) / 3
        improvement = last_three - first_three
        
        print(f"üöÄ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: {improvement:+.3f} (—Å {first_three:.3f} –¥–æ {last_three:.3f})")
        
        if improvement > 0.05:
            print("‚ú® A-MEM –≠–§–§–ï–ö–¢–ò–í–ù–û –£–õ–£–ß–®–ê–ï–¢ –†–ï–®–ï–ù–ò–Ø!")
        elif improvement > 0:
            print("‚úÖ A-MEM –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É")
        else:
            print("‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã (–Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö)")
    
    return {
        "success": True,
        "time": total_time,
        "stats": memory_stats,
        "average_quality": avg_quality,
        "total_memories": len(all_memories) if 'all_memories' in locals() else 0,
        "categories": len(category_stats) if 'category_stats' in locals() else 0
    }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        print("üéØ –ó–∞–ø—É—Å–∫ comprehensive —Ç–µ—Å—Ç–∞ A-MEM —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏...")
        result = await test_amem_real_world()
        
        print("\nüéâ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û ===")
        print("üß† A-MEM —É—Å–ø–µ—à–Ω–æ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –æ–ø—ã—Ç –∞–≥–µ–Ω—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º!")
        print("üöÄ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ —ç–≤–æ–ª—é—Ü–∏—è –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!")
        print("‚ú® –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–µ—à–µ–Ω–∏—é —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = Path("amem_real_world_test_results.json")
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
        
        return result
        
    except Exception as e:
        print(f"\nüí• === –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
        print(f"‚ùå {e}")
        import traceback
        traceback.print_exc()
        return {"success": False, "error": str(e)}

if __name__ == "__main__":
    asyncio.run(main()) 