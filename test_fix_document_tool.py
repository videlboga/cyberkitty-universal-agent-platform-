#!/usr/bin/env python3
"""
üìÑ –û–¢–õ–ê–î–ö–ê: document_tool
"""

import asyncio
import time
import json
import tempfile
import os

try:
    from kittycore.tools.document_tool_unified import DocumentTool
    IMPORT_OK = True
    print("‚úÖ –ò–º–ø–æ—Ä—Ç document_tool —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ –û–®–ò–ë–ö–ê: {e}")
    IMPORT_OK = False

async def test_text_document():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    tool = DocumentTool()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_content = """
–¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è DocumentTool
================================

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:

1. –ó–∞–≥–æ–ª–æ–≤–∫–∏
2. –°–ø–∏—Å–∫–∏  
3. –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç

## –°–µ–∫—Ü–∏—è 2

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.
–ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

### –ß–∏—Å–ª–∞ –∏ –¥–∞–Ω–Ω—ã–µ
- –¶–µ–Ω–∞: 1000 —Ä—É–±–ª–µ–π
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 5 —à—Ç—É–∫
- –ü—Ä–æ—Ü–µ–Ω—Ç: 95%
"""
    
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt', encoding='utf-8') as f:
        temp_path = f.name
        f.write(test_content)
    
    try:
        # –í–ê–ñ–ù–û: DocumentTool –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º await
        result = await tool.execute({
            'action': 'extract_text',
            'file_path': temp_path,
            'filename': 'test_document.txt'
        })
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
        
        if isinstance(result, dict):
            success = result.get('success', False)
            print(f"‚úÖ Success: {success}")
            
            if success:
                text = result.get('text', '')
                print(f"üì¶ –†–∞–∑–º–µ—Ä –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                key_phrases = ["–¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞", "DocumentTool", "1000 —Ä—É–±–ª–µ–π", "95%"]
                found_phrases = [phrase for phrase in key_phrases if phrase in text]
                print(f"üîë –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑: {len(found_phrases)}/{len(key_phrases)}")
                print(f"   –§—Ä–∞–∑—ã: {found_phrases}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = result.get('metadata', {})
                if metadata:
                    print(f"üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {list(metadata.keys()) if isinstance(metadata, dict) else '–Ω–µ dict'}")
            else:
                error = result.get('error', '–ù–ï–ò–ó–í–ï–°–¢–ù–û')
                print(f"‚ùå –û—à–∏–±–∫–∞: {error}")
        
        return result
        
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(temp_path)
        except:
            pass

async def test_supported_formats():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã...")
    tool = DocumentTool()
    
    result = await tool.execute({
        'action': 'get_supported_formats'
    })
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if isinstance(result, dict):
        success = result.get('success', False)
        print(f"‚úÖ Success: {success}")
        
        if success:
            formats = result.get('supported_formats', [])
            print(f"üìÑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: {len(formats)}")
            if formats:
                print(f"   –§–æ—Ä–º–∞—Ç—ã: {formats[:5]}...")  # –ü–µ—Ä–≤—ã–µ 5
    
    return result

async def test_tool_info():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ...")
    tool = DocumentTool()
    
    result = await tool.execute({
        'action': 'get_info'
    })
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if isinstance(result, dict):
        success = result.get('success', False)
        print(f"‚úÖ Success: {success}")
        
        if success:
            info = result.get('info', {})
            if isinstance(info, dict):
                print(f"üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {list(info.keys())}")
    
    return result

async def test_json_document():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É JSON –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    tool = DocumentTool()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π JSON —Ñ–∞–π–ª
    test_json = {
        "project": "KittyCore 3.0",
        "version": "3.0.0",
        "tools": [
            {"name": "document_tool", "status": "testing"},
            {"name": "api_request_tool", "status": "working"}
        ],
        "stats": {
            "total_tools": 18,
            "tested_tools": 7,
            "success_rate": 93.0
        }
    }
    
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.json', encoding='utf-8') as f:
        temp_path = f.name
        json.dump(test_json, f, ensure_ascii=False, indent=2)
    
    try:
        result = await tool.execute({
            'action': 'extract_text',
            'file_path': temp_path,
            'filename': 'test_data.json'
        })
        
        print(f"üìä JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
        
        if isinstance(result, dict):
            success = result.get('success', False)
            print(f"‚úÖ Success: {success}")
            
            if success:
                text = result.get('text', '')
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                json_phrases = ["KittyCore 3.0", "document_tool", "93.0"]
                found_json = [phrase for phrase in json_phrases if phrase in text]
                print(f"üîë JSON –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã: {len(found_json)}/{len(json_phrases)}")
        
        return result
        
    finally:
        try:
            os.unlink(temp_path)
        except:
            pass

def is_result_honest(result, test_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if not result:
        print(f"‚ùå {test_name}: –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return False
    
    if not isinstance(result, dict):
        print(f"‚ùå {test_name}: –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–ª–æ–≤–∞—Ä—å")
        return False
    
    success = result.get('success', False)
    if not success:
        print(f"‚ùå {test_name}: success=False")
        error = result.get('error', '–ù–ï–ò–ó–í–ï–°–¢–ù–û')
        print(f"   –û—à–∏–±–∫–∞: {error}")
        return False
    
    data_str = str(result)
    data_size = len(data_str)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–µ–π–∫–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    fake_patterns = [
        "document_tool: —É—Å–ø–µ—à–Ω–æ",
        "–¥–µ–º–æ –¥–æ–∫—É–º–µ–Ω—Ç",
        "–∑–∞–≥–ª—É—à–∫–∞ —Ç–µ–∫—Å—Ç–∞"
    ]
    
    for pattern in fake_patterns:
        if pattern.lower() in data_str.lower():
            print(f"‚ùå {test_name}: –ù–∞–π–¥–µ–Ω —Ñ–µ–π–∫–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    doc_indicators = [
        "text", "content", "metadata", "format", "extract", 
        "—Ç–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞", "kittycore", "document_tool", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö"
    ]
    
    has_doc_data = any(indicator.lower() in data_str.lower() for indicator in doc_indicators)
    
    if not has_doc_data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        return False
    
    if data_size < 50:
        print(f"‚ùå {test_name}: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
        return False
    
    print(f"‚úÖ {test_name}: –ß–ï–°–¢–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
    return True

async def main():
    print("üìÑ –û–¢–õ–ê–î–ö–ê: document_tool")
    
    if not IMPORT_OK:
        return
    
    results = {}
    
    # –¢–µ—Å—Ç—ã (–≤—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ)
    tests = [
        ("text_document", test_text_document),
        ("json_document", test_json_document),
        ("supported_formats", test_supported_formats),
        ("tool_info", test_tool_info)
    ]
    
    for test_name, test_func in tests:
        print(f"\n{'='*30}")
        print(f"–¢–ï–°–¢: {test_name}")
        try:
            result = await test_func()
            results[test_name] = is_result_honest(result, test_name)
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ –û–®–ò–ë–ö–ê: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*50}")
    print("üìä –ò–¢–û–ì–ò:")
    
    total_tests = len(results)
    passed_tests = sum(1 for success in results.values() if success)
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
    
    print(f"\nüìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if success_rate >= 75 else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")

if __name__ == "__main__":
    asyncio.run(main()) 