#!/usr/bin/env python3
"""
üë§ USER SIMULATOR
–ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ OntoBot

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
- –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
"""

import asyncio
import random
import time
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import aiohttp
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add(
    "logs/user_simulator.log",
    rotation="10 MB",
    retention="7 days",
    compression="gz",
    format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | USER | {message}",
    level="DEBUG"
)

@dataclass
class UserProfile:
    """–ü—Ä–æ—Ñ–∏–ª—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id: int
    first_name: str
    last_name: str = ""
    username: str = ""
    age: int = 30
    profession: str = "–ú–µ–Ω–µ–¥–∂–µ—Ä"
    personality: str = "–∞–∫—Ç–∏–≤–Ω—ã–π"  # –∞–∫—Ç–∏–≤–Ω—ã–π, –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π, –ª—é–±–æ–ø—ã—Ç–Ω—ã–π
    response_speed: str = "normal"  # fast, normal, slow

class UserSimulator:
    """
    –°–∏–º—É–ª—è—Ç–æ—Ä –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    –ú–æ–∂–µ—Ç –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å:
    - –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ª–∏—á–Ω–æ—Å—Ç–∏
    - –†–∞–∑–ª–∏—á–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
    - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    """
    
    def __init__(self, mock_server_url: str = "http://localhost:8082"):
        self.mock_server_url = mock_server_url
        self.users: Dict[int, UserProfile] = {}
        
        # –ì–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
        self.response_templates = {
            "name": [
                "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–ú–∞—Ä–∏—è", "–î–º–∏—Ç—Ä–∏–π", "–ê–Ω–Ω–∞", "–°–µ—Ä–≥–µ–π", 
                "–ï–ª–µ–Ω–∞", "–ê–Ω–¥—Ä–µ–π", "–û–ª—å–≥–∞", "–ú–∏—Ö–∞–∏–ª", "–¢–∞—Ç—å—è–Ω–∞"
            ],
            "age": [
                "25", "28", "32", "35", "29", "31", "27", "33", "30", "26"
            ],
            "profession": [
                "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º", "IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥",
                "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "–î–∏–∑–∞–π–Ω–µ—Ä",
                "–ê–Ω–∞–ª–∏—Ç–∏–∫", "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞", "–ü—Å–∏—Ö–æ–ª–æ–≥", "–¢—Ä–µ–Ω–µ—Ä"
            ],
            "goals": [
                "–•–æ—á—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –Ω–∞–π—Ç–∏ —Å–≤–æ–µ –ø—Ä–∏–∑–≤–∞–Ω–∏–µ",
                "–°—Ç—Ä–µ–º–ª—é—Å—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏",
                "–•–æ—á—É —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –±–ª–∏–∑–∫–∏–º–∏ –ª—é–¥—å–º–∏",
                "–ú–µ—á—Ç–∞—é –æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–æ—Å—Ç–µ –∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏–∏",
                "–•–æ—á—É –Ω–∞–π—Ç–∏ –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω—å—é"
            ],
            "challenges": [
                "–ß–∞—Å—Ç–æ —Å–æ–º–Ω–µ–≤–∞—é—Å—å –≤ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö",
                "–¢—Ä—É–¥–Ω–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –¥–æ–≤–æ–¥–∏—Ç—å –¥–µ–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞",
                "–ë–æ—é—Å—å –ø–µ—Ä–µ–º–µ–Ω –∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∑–æ–Ω—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞",
                "–°–ª–æ–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å '–Ω–µ—Ç' –∏ –æ—Ç—Å—Ç–∞–∏–≤–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã",
                "–ü–µ—Ä–µ–∂–∏–≤–∞—é –∏–∑-–∑–∞ –º–Ω–µ–Ω–∏—è –æ–∫—Ä—É–∂–∞—é—â–∏—Ö"
            ],
            "motivation": [
                "–ñ–µ–ª–∞–Ω–∏–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è",
                "–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Å–≤–æ–±–æ–¥–µ –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
                "–•–æ—á—É –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–æ–º –¥–ª—è —Å–≤–æ–∏—Ö –¥–µ—Ç–µ–π",
                "–ú–µ—á—Ç–∞—é –∏–∑–º–µ–Ω–∏—Ç—å –º–∏—Ä –∫ –ª—É—á—à–µ–º—É",
                "–•–æ—á—É –∂–∏—Ç—å –ø–æ–ª–Ω–æ–π –∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–π –∂–∏–∑–Ω—å—é"
            ]
        }
        
        logger.info("üë§ User Simulator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def create_user(self, user_id: int, personality: str = "–∞–∫—Ç–∏–≤–Ω—ã–π") -> UserProfile:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        
        profile = UserProfile(
            user_id=user_id,
            first_name=random.choice(self.response_templates["name"]),
            last_name=random.choice(["–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–∏–¥–æ—Ä–æ–≤", "–ö–æ–∑–ª–æ–≤", "–ù–æ–≤–∏–∫–æ–≤"]),
            username=f"test_user_{user_id}",
            age=random.randint(25, 45),
            profession=random.choice(self.response_templates["profession"]),
            personality=personality,
            response_speed="normal"
        )
        
        self.users[user_id] = profile
        
        logger.info(f"üë§ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {profile.first_name} (ID: {user_id}, —Ç–∏–ø: {personality})")
        
        return profile
    
    async def send_message(self, user_id: int, text: str) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        
        if user_id not in self.users:
            self.create_user(user_id)
        
        user = self.users[user_id]
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await self._simulate_typing_delay(text, user.response_speed)
        
        payload = {
            "user_id": user_id,
            "chat_id": user_id,
            "text": text,
            "first_name": user.first_name,
            "username": user.username
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.mock_server_url}/mock/simulate_user_message",
                    json=payload
                ) as response:
                    result = await response.json()
                    
                    logger.info(f"üí¨ {user.first_name}: {text}")
                    return result
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {"ok": False, "error": str(e)}
    
    async def click_button(self, user_id: int, callback_data: str, message_id: int = None) -> Dict[str, Any]:
        """–ù–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        
        if user_id not in self.users:
            self.create_user(user_id)
        
        user = self.users[user_id]
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
        await self._simulate_decision_delay(user.personality)
        
        payload = {
            "user_id": user_id,
            "chat_id": user_id,
            "callback_data": callback_data,
            "message_id": message_id or 1,
            "first_name": user.first_name,
            "username": user.username
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.mock_server_url}/mock/simulate_callback_query",
                    json=payload
                ) as response:
                    result = await response.json()
                    
                    logger.info(f"üîò {user.first_name} –Ω–∞–∂–∞–ª: {callback_data}")
                    return result
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
            return {"ok": False, "error": str(e)}
    
    def get_smart_response(self, user_id: int, question_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        
        if user_id not in self.users:
            self.create_user(user_id)
        
        user = self.users[user_id]
        
        # –ë–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        if question_type in self.response_templates:
            base_responses = self.response_templates[question_type]
            response = random.choice(base_responses)
        else:
            response = "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –¥–∞–π—Ç–µ –ø–æ–¥—É–º–∞—Ç—å..."
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–∏—á–Ω–æ—Å—Ç–∏
        if user.personality == "–∞–∫—Ç–∏–≤–Ω—ã–π":
            if question_type == "goals":
                response = f"–Ø –æ—á–µ–Ω—å –∞–º–±–∏—Ü–∏–æ–∑–µ–Ω! {response} –ò —Ö–æ—á—É –¥–æ—Å—Ç–∏—á—å —ç—Ç–æ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ!"
        elif user.personality == "–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π":
            if question_type == "challenges":
                response = f"–ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è, {response.lower()} –≠—Ç–æ –º–æ—è –≥–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞."
        elif user.personality == "–ª—é–±–æ–ø—ã—Ç–Ω—ã–π":
            response = f"{response} –ê —á—Ç–æ –≤—ã –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—Ç–µ?"
        
        return response
    
    async def _simulate_typing_delay(self, text: str, speed: str):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞."""
        
        base_delay = len(text) * 0.05  # 50–º—Å –Ω–∞ —Å–∏–º–≤–æ–ª
        
        if speed == "fast":
            delay = base_delay * 0.5
        elif speed == "slow":
            delay = base_delay * 2.0
        else:  # normal
            delay = base_delay
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
        delay += random.uniform(0.1, 0.5)
        
        await asyncio.sleep(delay)
    
    async def _simulate_decision_delay(self, personality: str):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è."""
        
        if personality == "–∞–∫—Ç–∏–≤–Ω—ã–π":
            delay = random.uniform(0.2, 0.8)
        elif personality == "–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π":
            delay = random.uniform(1.0, 3.0)
        else:  # –ª—é–±–æ–ø—ã—Ç–Ω—ã–π –∏–ª–∏ normal
            delay = random.uniform(0.5, 1.5)
        
        await asyncio.sleep(delay)

# === –ì–û–¢–û–í–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===

class OntoTestUsers:
    """–ì–æ—Ç–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OntoBot."""
    
    @staticmethod
    def get_active_user() -> UserProfile:
        """–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ—Ç, –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π."""
        return UserProfile(
            user_id=1001,
            first_name="–ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
            last_name="–ê–∫—Ç–∏–≤–Ω—ã–π",
            username="active_alex",
            age=28,
            profession="–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å",
            personality="–∞–∫—Ç–∏–≤–Ω—ã–π",
            response_speed="fast"
        )
    
    @staticmethod
    def get_cautious_user() -> UserProfile:
        """–û—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è."""
        return UserProfile(
            user_id=1002,
            first_name="–ú–∞—Ä–∏—è",
            last_name="–û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è",
            username="careful_maria",
            age=35,
            profession="–ê–Ω–∞–ª–∏—Ç–∏–∫",
            personality="–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π",
            response_speed="slow"
        )
    
    @staticmethod
    def get_curious_user() -> UserProfile:
        """–õ—é–±–æ–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–¥–∞–µ—Ç –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤."""
        return UserProfile(
            user_id=1003,
            first_name="–î–º–∏—Ç—Ä–∏–π",
            last_name="–õ—é–±–æ–ø—ã—Ç–Ω—ã–π",
            username="curious_dmitry",
            age=31,
            profession="–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
            personality="–ª—é–±–æ–ø—ã—Ç–Ω—ã–π",
            response_speed="normal"
        )

if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
    async def test_simulator():
        simulator = UserSimulator()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = simulator.create_user(12345, "–∞–∫—Ç–∏–≤–Ω—ã–π")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await simulator.send_message(12345, "/start")
        await asyncio.sleep(1)
        
        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
        await simulator.click_button(12345, "begin_diagnostic")
        
        logger.info("‚úÖ –¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    asyncio.run(test_simulator()) 