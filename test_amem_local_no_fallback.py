#!/usr/bin/env python3
"""
üß† –¢–ï–°–¢ A-MEM –ë–ï–ó FALLBACK –° –õ–û–ö–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–¨–Æ

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π A-MEM —Å–∏—Å—Ç–µ–º—ã 
—Å –ª–æ–∫–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π embedding –º–æ–¥–µ–ª—å—é –±–µ–∑ fallback —Ä–µ–∂–∏–º–∞.
"""

import asyncio
import sys
import time
import json
import os
from pathlib import Path
from datetime import datetime

# –£–±–∏—Ä–∞–µ–º fallback –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
if "FORCE_AMEM_FALLBACK" in os.environ:
    del os.environ["FORCE_AMEM_FALLBACK"]

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig
from loguru import logger

async def test_local_model_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    print("üöÄ === –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –õ–û–ö–ê–õ–¨–ù–û–ô EMBEDDING –ú–û–î–ï–õ–ò ===")
    
    try:
        from sentence_transformers import SentenceTransformer
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
        models_to_try = [
            'paraphrase-MiniLM-L3-v2',  # –£–∂–µ –µ—Å—Ç—å –≤ –∫–µ—à–µ
            'all-MiniLM-L6-v2',
            'sentence-transformers/paraphrase-MiniLM-L3-v2'
        ]
        
        for model_name in models_to_try:
            print(f"\nüì¶ –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {model_name}")
            start_time = time.time()
            
            try:
                model = SentenceTransformer(model_name)
                load_time = time.time() - start_time
                
                print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {load_time:.2f}—Å")
                print(f"   üìä –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {model.get_sentence_embedding_dimension()}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
                test_texts = ["—Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏", "–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"]
                embeddings = model.encode(test_texts)
                print(f"   üß† –≠–º–±–µ–¥–¥–∏–Ω–≥–∏: {embeddings.shape}")
                
                print(f"   üéâ –ú–û–î–ï–õ–¨ {model_name} –†–ê–ë–û–¢–ê–ï–¢!")
                return model_name
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                continue
        
        print("‚ùå –ù–ò –û–î–ù–ê –ú–û–î–ï–õ–¨ –ù–ï –ó–ê–ì–†–£–ó–ò–õ–ê–°–¨!")
        return None
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return None

async def test_amem_no_fallback():
    """üß† –¢–µ—Å—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π A-MEM –±–µ–∑ fallback —Ä–µ–∂–∏–º–∞"""
    print("\nüöÄ === –¢–ï–°–¢ A-MEM –ë–ï–ó FALLBACK ===")
    start_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    working_model = await test_local_model_loading()
    if not working_model:
        print("‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return {"success": False, "error": "No local model available"}
    
    print(f"\nüéØ === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –° –ú–û–î–ï–õ–¨–Æ {working_model} ===")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ fallback
    config = UnifiedConfig(
        orchestrator_id="amem_no_fallback_test",
        enable_amem_memory=True,
        amem_memory_path="./vault/system/amem_no_fallback",
        vault_path="./vault_no_fallback",
        enable_shared_chat=True,
        enable_vector_memory=False,  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ø–∞–º—è—Ç—å
        enable_smart_validation=True,
        timeout=60
    )
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª—å—é
        orchestrator = UnifiedOrchestrator(config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ A-MEM –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç–æ—è—â—É—é ChromaDB –∞ –Ω–µ fallback
        amem_type = type(orchestrator.amem_system.amem).__name__
        print(f"üß† A-MEM —Ç–∏–ø: {amem_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ChromaDB
        from kittycore.memory.amem_integration import AMEM_AVAILABLE
        print(f"üîç AMEM_AVAILABLE: {AMEM_AVAILABLE}")
        
        if not AMEM_AVAILABLE or amem_type == "SimpleAgenticMemory":
            print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –≤—Å—ë –µ—â—ë –∏—Å–ø–æ–ª—å–∑—É–µ—Ç fallback!")
            print("üîß –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ChromaDB...")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChromaDB
            try:
                import chromadb
                from sentence_transformers import SentenceTransformer
                
                client = chromadb.Client()
                collection = client.create_collection(
                    name="test_collection",
                    get_or_create=True
                )
                
                model = SentenceTransformer(working_model)
                
                print("‚úÖ ChromaDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é!")
                print("‚úÖ SentenceTransformer –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                test_doc = "–¢–µ—Å—Ç–æ–≤–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"
                embedding = model.encode(test_doc).tolist()
                
                collection.add(
                    documents=[test_doc],
                    metadatas=[{"test": "true"}],
                    ids=["test_1"]
                )
                
                # –ü–æ–∏—Å–∫
                results = collection.query(
                    query_texts=["–∞–≥–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–∞"],
                    n_results=1
                )
                
                print(f"üîç –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ: {len(results['documents'][0])}")
                print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {results['documents'][0][0][:50]}...")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                return {"success": False, "error": str(e)}
        
        print("‚úÖ UnifiedOrchestrator —Å –Ω–∞—Å—Ç–æ—è—â–µ–π A-MEM –≥–æ—Ç–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        print(f"\nüß† === –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –ò –ü–û–ò–°–ö–ê –í–û–°–ü–û–ú–ò–ù–ê–ù–ò–ô ===")
        
        test_memories = [
            "–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Python Flask",
            "–ö–æ–º–∞–Ω–¥–∞ –∞–≥–µ–Ω—Ç–æ–≤ —Ä–µ—à–∏–ª–∞ –∑–∞–¥–∞—á—É –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é pandas",
            "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è email –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ",
            "API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω",
            "–ê–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞–ª —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ 40%"
        ]
        
        stored_memories = []
        for i, memory in enumerate(test_memories):
            print(f"   üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º: {memory[:50]}...")
            
            memory_id = await orchestrator.amem_system.store_memory(
                content=memory,
                context={
                    "agent_id": f"test_agent_{i}",
                    "category": "test_memory",
                    "task_type": "development"
                },
                tags=["test", "agent_work", f"memory_{i}"]
            )
            
            stored_memories.append(memory_id)
            print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {memory_id}")
        
        print(f"\nüîç === –¢–ï–°–¢ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê ===")
        
        search_queries = [
            "–≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Python",
            "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö pandas",
            "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è email",
            "API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"
        ]
        
        search_results = {}
        for query in search_queries:
            print(f"   üîç –ü–æ–∏—Å–∫: '{query}'")
            
            results = await orchestrator.amem_system.search_memories(query, limit=3)
            search_results[query] = len(results)
            
            print(f"      üìä –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            if results:
                best = results[0]
                content_preview = best.get('content', '')[:50]
                tags = best.get('tags', [])
                print(f"      ‚ú® –õ—É—á—à–∏–π: {content_preview}... (—Ç–µ–≥–∏: {', '.join(tags[:2])})")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        total_found = sum(search_results.values())
        avg_results = total_found / len(search_queries) if search_queries else 0
        
        print(f"\nüìà === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è: {total_time:.2f}—Å")
        print(f"üíæ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(stored_memories)}")
        print(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(search_queries)}")
        print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {total_found}")
        print(f"üìà –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å: {avg_results:.1f}")
        
        # –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if avg_results >= 2.0:
            print("‚ú® –û–¢–õ–ò–ß–ù–û! –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!")
        elif avg_results >= 1.0:
            print("‚úÖ –•–û–†–û–®–û! –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
        elif avg_results >= 0.5:
            print("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ")
        else:
            print("‚ùå –ü–õ–û–•–û! –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω")
        
        return {
            "success": True,
            "time": total_time,
            "model_used": working_model,
            "amem_type": amem_type,
            "amem_available": AMEM_AVAILABLE,
            "memories_stored": len(stored_memories),
            "search_effectiveness": avg_results,
            "search_results": search_results
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return {"success": False, "error": str(e)}

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        print("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ A-MEM –±–µ–∑ fallback —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é...")
        result = await test_amem_no_fallback()
        
        if result["success"]:
            print("\nüéâ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û ===")
            print("üß† A-MEM —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é –±–µ–∑ fallback!")
            print("üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç!")
            print("‚ú® –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ!")
        else:
            print("\nüí• === –¢–ï–°–¢ –ù–ï –ü–†–û–®–Å–õ ===")
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = Path("amem_no_fallback_test_results.json")
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
        
        return result
        
    except Exception as e:
        print(f"\nüí• === –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ===")
        print(f"‚ùå {e}")
        import traceback
        traceback.print_exc()
        return {"success": False, "error": str(e)}

if __name__ == "__main__":
    asyncio.run(main()) 