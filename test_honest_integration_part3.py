#!/usr/bin/env python3
"""
üõ°Ô∏è –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ß–ï–°–¢–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –ß–ê–°–¢–¨ 3 (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)
üîß –†–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ KittyCore 3.0 –±–µ–∑ asyncio.run() –ø—Ä–æ–±–ª–µ–º

–ü–†–ò–ù–¶–ò–ü–´:
- üîÑ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å async/await
- üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
- üìä –ü–æ–ª—É—á–∞–µ–º —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- üö´ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ–º –ø–æ–¥–¥–µ–ª–∫–∏

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- ‚ùå –£–±—Ä–∞–Ω–æ asyncio.run() –≤–Ω—É—Ç—Ä–∏ event loop
- ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
- ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã —á–µ—Ä–µ–∑ await
"""

import asyncio
import json
import time
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.insert(0, str(Path(__file__).parent / 'kittycore'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ 
from test_honest_integration_part1 import HonestToolsTester

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
from kittycore.tools.enhanced_web_search_tool import EnhancedWebSearchTool
from kittycore.tools.media_tool import MediaTool
from kittycore.tools.network_tool import NetworkTool
from kittycore.tools.api_request_tool import ApiRequestTool
from kittycore.tools.super_system_tool import SuperSystemTool

class FixedHonestToolsTester(HonestToolsTester):
    """
    üõ°Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —á–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å async/await
    - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    - –ù–µ—Ç asyncio.run() –≤–Ω—É—Ç—Ä–∏ event loop
    """
    
    def __init__(self, honesty_threshold: float = 0.7):
        super().__init__(honesty_threshold)
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–µ—Ä–∞...")
    
    def wrap_async_test_with_honesty_check(self, tool_name: str, action: str, test_coro):
        """
        –û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å (–ë–ï–ó asyncio.run)
        """
        start_time = time.time()
        
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É—é {tool_name}.{action} —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ (async)...")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ await
            if asyncio.iscoroutine(test_coro):
                # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä—É—Ç–∏–Ω–∞, –æ–∂–∏–¥–∞–µ–º –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º event loop
                task = asyncio.create_task(test_coro)
                original_result = asyncio.get_event_loop().run_until_complete(task)
            else:
                original_result = test_coro
            
            execution_time = time.time() - start_time
            
            # –î–µ—Ç–µ–∫—Ç–∏–º –ø–æ–¥–¥–µ–ª–∫–∏
            is_fake, indicators = self.fake_detector.detect_fake_result(
                tool_name, action, original_result
            )
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
            honesty_score = self.fake_detector.get_honesty_score(indicators)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
            honesty_status = self._determine_honesty_status(honesty_score)
            
            # –°–æ–∑–¥–∞—ë–º —á–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            honest_result = {
                'tool_name': tool_name,
                'action': action,
                'execution_time': execution_time,
                'original_success': getattr(original_result, 'success', False),
                'honest_success': honesty_score >= self.honesty_threshold,
                'honesty_score': honesty_score,
                'honesty_status': honesty_status,
                'is_fake': is_fake,
                'fake_indicators_count': len(indicators),
                'fake_indicators': [
                    {
                        'type': ind.type,
                        'severity': ind.severity,
                        'description': ind.description,
                        'confidence': ind.confidence
                    } for ind in indicators
                ],
                'data_size': len(str(getattr(original_result, 'data', ''))),
                'original_data_preview': str(original_result)[:200] + '...' if len(str(original_result)) > 200 else str(original_result)
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_tool_statistics(tool_name, honesty_status)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.test_results.append(honest_result)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._print_test_result(honest_result, indicators)
            
            return honest_result
            
        except Exception as e:
            execution_time = time.time() - start_time
            error_result = {
                'tool_name': tool_name,
                'action': action,
                'execution_time': execution_time,
                'original_success': False,
                'honest_success': False,
                'honesty_score': 0.0,
                'honesty_status': '–û–®–ò–ë–ö–ê',
                'is_fake': True,
                'fake_indicators_count': 0,
                'fake_indicators': [],
                'data_size': 0,
                'error': str(e),
                'original_data_preview': f"–û—à–∏–±–∫–∞: {str(e)}"
            }
            
            self.dishonest_tools.add(tool_name)
            self.test_results.append(error_result)
            
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {str(e)[:100]}")
            return error_result
    
    async def test_enhanced_web_search_honestly(self):
        """üåê –ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""
        tool = EnhancedWebSearchTool()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ action
        test_coro = tool.execute(
            query="KittyCore AI system github", 
            limit=3
        )
        
        result = self.wrap_async_test_with_honesty_check(
            "enhanced_web_search", "search", test_coro
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ
        if result['honest_success']:
            self.record_successful_params(
                "enhanced_web_search", "search",
                {"query": "string", "limit": "number"},
                f"–ß–µ—Å—Ç–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: {result['data_size']} –±–∞–π—Ç –∑–∞ {result['execution_time']:.1f}—Å"
            )
        
        return result
    
    def test_media_tool_honestly(self):
        """üé® –ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""
        def run_media_tool():
            tool = MediaTool()
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ë–ï–ó action (–¥–µ–π—Å—Ç–≤–∏–µ "get_info")
            return tool.execute(action="get_info")
        
        result = self.wrap_test_with_honesty_check(
            "media_tool", "get_info", run_media_tool
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ
        if result['honest_success']:
            self.record_successful_params(
                "media_tool", "get_info",
                {"action": "get_info"},
                f"–ß–µ—Å—Ç–Ω—ã–π –º–µ–¥–∏–∞-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: –ª–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ API –∫–ª—é—á–µ–π"
            )
        
        return result
    
    async def test_network_tool_honestly(self):
        """üåê –ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""
        tool = NetworkTool()
        # –†–µ–∞–ª—å–Ω—ã–π ping —Ç–µ—Å—Ç –ë–ï–ó asyncio.run
        test_coro = tool.execute(
            action="ping_host",
            host="8.8.8.8",  # Google DNS
            count=1
        )
        
        result = self.wrap_async_test_with_honesty_check(
            "network_tool", "ping_host", test_coro
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ
        if result['honest_success']:
            self.record_successful_params(
                "network_tool", "ping_host",
                {"action": "ping_host", "host": "string", "count": "number"},
                f"–ß–µ—Å—Ç–Ω—ã–π ping: —Ä–µ–∞–ª—å–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
            )
        
        return result
    
    async def test_api_request_honestly(self):
        """üåê –ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""
        tool = ApiRequestTool()
        # –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É API –ë–ï–ó action –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        test_coro = tool.execute(
            url="https://httpbin.org/get?test=kittycore",
            method="GET"
        )
        
        result = self.wrap_async_test_with_honesty_check(
            "api_request_tool", "get", test_coro
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ
        if result['honest_success']:
            self.record_successful_params(
                "api_request_tool", "get",
                {"url": "string", "method": "GET"},
                f"–ß–µ—Å—Ç–Ω—ã–π API –∑–∞–ø—Ä–æ—Å: —Ä–µ–∞–ª—å–Ω—ã–π HTTP –≤—ã–∑–æ–≤"
            )
        
        return result
    
    def test_super_system_tool_honestly(self):
        """üíª –ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""
        def run_system_tool():
            tool = SuperSystemTool()
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ë–ï–ó safe_mode –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            return tool.execute(
                action="run_command",
                command="echo 'KittyCore Honest Test'"
            )
        
        result = self.wrap_test_with_honesty_check(
            "super_system_tool", "run_command", run_system_tool
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ
        if result['honest_success']:
            self.record_successful_params(
                "super_system_tool", "run_command",
                {"action": "run_command", "command": "string"},
                f"–ß–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: —Ä–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
            )
        
        return result
    
    async def run_fixed_comprehensive_test(self):
        """üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —á–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üõ°Ô∏è –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ß–ï–°–¢–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 70)
        print("üéØ –¶–µ–ª—å: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: —É–±—Ä–∞–Ω—ã asyncio.run(), –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        print()
        
        results = []
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        print("üìã –ß–ï–°–¢–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø):")
        print("-" * 60)
        
        # 1. Web Search (async –∏—Å–ø—Ä–∞–≤–ª–µ–Ω)
        result1 = await self.test_enhanced_web_search_honestly()
        results.append(result1)
        
        # 2. Media Tool (sync —Ä–∞–±–æ—Ç–∞–µ—Ç)
        result2 = self.test_media_tool_honestly()
        results.append(result2)
        
        # 3. Network Tool (async –∏—Å–ø—Ä–∞–≤–ª–µ–Ω)
        result3 = await self.test_network_tool_honestly()
        results.append(result3)
        
        # 4. API Request (async –∏—Å–ø—Ä–∞–≤–ª–µ–Ω)
        result4 = await self.test_api_request_honestly()
        results.append(result4)
        
        # 5. System Tool (sync –∏—Å–ø—Ä–∞–≤–ª–µ–Ω)
        result5 = self.test_super_system_tool_honestly()
        results.append(result5)
        
        return results
    
    def generate_improvement_summary(self):
        """üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö"""
        honest_count = len(self.honest_tools)
        total_count = len(set(r['tool_name'] for r in self.test_results))
        error_count = len([r for r in self.test_results if r['honesty_status'] == '–û–®–ò–ë–ö–ê'])
        
        improvements = [
            "üîß –û–¢–ß–Å–¢ –û–ë –£–õ–£–ß–®–ï–ù–ò–Ø–• –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô",
            "=" * 50,
            "",
            "‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í –ß–ê–°–¢–ò 3:",
            "   üîÑ –£–±—Ä–∞–Ω asyncio.run() –∏–∑ event loop",
            "   üéØ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
            "   üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å async/await",
            "",
            f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:",
            f"   üèÜ –ß–µ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {honest_count}/{total_count} ({honest_count/total_count*100:.1f}%)",
            f"   üí• –û—à–∏–±–æ–∫: {error_count}/{total_count} ({error_count/total_count*100:.1f}%)",
            "",
            "üéØ –ü–†–ò–ù–¶–ò–ü: –ß–µ—Å—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã—è–≤–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã!",
            "   –°–∏—Å—Ç–µ–º–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ–º–æ–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∞ –Ω–µ —Å–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã."
        ]
        
        return "\n".join(improvements)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —á–µ—Å—Ç–Ω–æ–≥–æ comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üõ°Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ß–ï–°–¢–ù–û–ï COMPREHENSIVE –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï KITTYCORE 3.0")
    print("=" * 70)
    print("üöÄ –†–µ–≤–æ–ª—é—Ü–∏—è: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–¥–µ–ª–æ–∫ + –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º!")
    print()
    
    # –°–æ–∑–¥–∞—ë–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —á–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä
    tester = FixedHonestToolsTester(honesty_threshold=0.7)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    start_time = time.time()
    results = await tester.run_fixed_comprehensive_test()
    total_time = time.time() - start_time
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã
    print("\n" + "="*70)
    print(tester.generate_honesty_summary())
    
    print("\n" + "="*70)
    print(tester.generate_detailed_analysis())
    
    print("\n" + "="*70)
    print(tester.generate_improvement_summary())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = int(time.time())
    results_file = f"honest_fixed_results_{timestamp}.json"
    tester.save_honesty_results(results_file)
    
    print(f"\nüíæ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.1f}—Å")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    honest_count = len(tester.honest_tools)
    total_count = len(set(r['tool_name'] for r in tester.test_results))
    print(f"üéØ –ò–¢–û–ì: {honest_count}/{total_count} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Å—Ç–Ω–æ—Å—Ç–∏!")
    
    if honest_count >= 3:
        print("üéâ –£–°–ü–ï–•: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Å—Ç–Ω–æ!")
    elif honest_count >= 2:
        print("üëç –ü–†–û–ì–†–ï–°–°: –ï—Å—Ç—å —Ä–∞–±–æ—á–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å") 
    else:
        print("üîß –†–ê–ë–û–¢–ê: –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")

if __name__ == "__main__":
    asyncio.run(main()) 