#!/usr/bin/env python3
"""
üß† –ë–´–°–¢–†–´–ô –¢–ï–°–¢ A-MEM –í FALLBACK –†–ï–ñ–ò–ú–ï

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é A-MEM –≤ UnifiedOrchestrator –ë–ï–ó –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
"""

import asyncio
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig
from loguru import logger

async def test_amem_fallback():
    """üß† –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç A-MEM –≤ fallback —Ä–µ–∂–∏–º–µ"""
    print("üöÄ === –ë–´–°–¢–†–´–ô –¢–ï–°–¢ A-MEM (FALLBACK –†–ï–ñ–ò–ú) ===")
    start_time = time.time()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º ChromaDB –¥–ª—è fallback —Ä–µ–∂–∏–º–∞
    import os
    os.environ["FORCE_AMEM_FALLBACK"] = "true"
    
    print("\n1Ô∏è‚É£ === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø (FALLBACK –†–ï–ñ–ò–ú) ===")
    
    config = UnifiedConfig(
        orchestrator_id="amem_fallback_test",
        enable_amem_memory=True,
        amem_memory_path="./vault/system/amem_fallback",
        vault_path="./vault_fallback",
        enable_shared_chat=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        enable_vector_memory=False,  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–º—è—Ç—å
        enable_smart_validation=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        timeout=30
    )
    
    orchestrator = UnifiedOrchestrator(config)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ A-MEM —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ fallback —Ä–µ–∂–∏–º–µ
    assert orchestrator.amem_system is not None, "‚ùå A-MEM —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
    print("‚úÖ A-MEM —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ fallback —Ä–µ–∂–∏–º–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã
    amem_type = type(orchestrator.amem_system).__name__
    print(f"‚úÖ –¢–∏–ø A-MEM: {amem_type}")
    
    print("\n2Ô∏è‚É£ === –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –ü–ê–ú–Ø–¢–ò ===")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
    try:
        await orchestrator.amem_system.store_memory(
            content="–¢–µ—Å—Ç–æ–≤–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ fallback —Ä–µ–∂–∏–º–∞",
            context={"test": True, "mode": "fallback"},
            tags=["test", "fallback", "amem"]
        )
        print("‚úÖ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ fallback —Ä–µ–∂–∏–º–µ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    print("\n3Ô∏è‚É£ === –¢–ï–°–¢ –ü–û–ò–°–ö–ê –ü–ê–ú–Ø–¢–ò ===")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    try:
        results = await orchestrator.amem_system.search_memories(
            query="—Ç–µ—Å—Ç–æ–≤–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            limit=5
        )
        print(f"‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(results)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
        if results:
            for i, result in enumerate(results, 1):
                content_preview = result.get('content', '')[:50]
                print(f"   {i}. {content_preview}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    print("\n4Ô∏è‚É£ === –¢–ï–°–¢ INSIGHTS ===")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ insights
    try:
        subtasks = [
            {"id": "test1", "description": "—Å–æ–∑–¥–∞—Ç—å Python —Å–∫—Ä–∏–ø—Ç"},
            {"id": "test2", "description": "–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"}
        ]
        
        insights = await orchestrator._get_amem_insights_for_team_creation(subtasks, "test_task")
        print(f"‚úÖ Insights –ø–æ–ª—É—á–µ–Ω—ã: enabled={insights.get('enabled', False)}")
        print(f"   - –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {len(insights.get('search_results', []))}")
        print(f"   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(insights.get('agent_recommendations', []))}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ insights: {e}")
    
    print("\n5Ô∏è‚É£ === –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –û–ü–´–¢–ê –ê–ì–ï–ù–¢–ê ===")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∞–≥–µ–Ω—Ç–∞
    try:
        agent_data = {"role": "developer"}
        agent_result = {
            "success": True,
            "execution_time": 5.0,
            "tools_used": ["python", "file_manager"],
            "files_created": ["test.py"],
            "content": "–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω Python —Å–∫—Ä–∏–ø—Ç"
        }
        
        await orchestrator._save_agent_experience_to_amem(
            agent_id="test_agent",
            agent_data=agent_data,
            agent_result=agent_result,
            task_id="test_task"
        )
        print("‚úÖ –û–ø—ã—Ç –∞–≥–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—ã—Ç–∞: {e}")
    
    print("\n6Ô∏è‚É£ === –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –†–ï–®–ï–ù–ò–Ø ===")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    try:
        final_result = {
            "created_files": ["test.py", "config.json"],
            "process_trace": ["–∞–Ω–∞–ª–∏–∑", "—Å–æ–∑–¥–∞–Ω–∏–µ", "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"],
            "validation_summary": {"quality_score": 0.8}
        }
        
        await orchestrator._save_task_solution_to_amem(
            task="—Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            final_result=final_result,
            duration=15.0
        )
        print("‚úÖ –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è: {e}")
    
    print("\n7Ô∏è‚É£ === –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ===")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    try:
        all_memories = await orchestrator.amem_system.search_memories("", limit=20)
        print(f"‚úÖ –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(all_memories)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–≥–∏
        all_tags = set()
        for memory in all_memories:
            all_tags.update(memory.get('tags', []))
        
        print(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤: {len(all_tags)}")
        print(f"   –¢–µ–≥–∏: {', '.join(sorted(all_tags)[:10])}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    total_time = time.time() - start_time
    
    print(f"\nüéâ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù ===")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {total_time:.2f}—Å")
    print(f"üß† A-MEM fallback —Ä–µ–∂–∏–º: ‚úÖ –†–ê–ë–û–¢–ê–ï–¢")
    print(f"üîÑ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ‚úÖ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´")
    
    return {
        "success": True,
        "mode": "fallback",
        "time": total_time,
        "memories_count": len(all_memories) if 'all_memories' in locals() else 0
    }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        result = await test_amem_fallback()
        print("\n‚ú® A-MEM —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ UnifiedOrchestrator!")
        return result
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return {"success": False, "error": str(e)}

if __name__ == "__main__":
    asyncio.run(main()) 