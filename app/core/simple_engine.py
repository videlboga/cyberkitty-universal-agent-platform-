"""
üîß –ü–†–û–°–¢–ê–Ø STATE MACHINE - –†–ê–ë–û–ß–ò–ô –ü–†–û–¢–û–¢–ò–ü
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
"""

from dataclasses import dataclass, field
from typing import Dict, Any, Optional, Union, List, Callable
from datetime import datetime
import json
from loguru import logger
import asyncio
from .base_plugin import BasePlugin

# ===== –¢–ò–ü–´ –î–ê–ù–ù–´–• =====

@dataclass
class Event:
    """–°–æ–±—ã—Ç–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    type: str           # "callback", "text", "start"  
    data: Any           # callback_data, text, etc.
    telegram_data: Dict = field(default_factory=dict) # chat_id, message_id, etc.

@dataclass
class StepResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞"""
    response: Optional[str] = None      # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    next_step: Optional[str] = None     # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    update_context: Dict = field(default_factory=dict)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    buttons: List[Dict] = field(default_factory=list)   # –ö–Ω–æ–ø–∫–∏ –¥–ª—è Telegram

@dataclass 
class UserState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: str
    scenario_id: str
    current_step: str
    context: Dict[str, Any] = field(default_factory=dict)
    created_at: datetime = field(default_factory=datetime.now)

# ===== –ë–ê–ó–û–í–´–ï –ö–õ–ê–°–°–´ =====

class BaseStep:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —à–∞–≥–æ–≤"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        
    async def execute(self, event: Event, state: UserState) -> StepResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö"""
        raise NotImplementedError

    def resolve_template(self, template: str, context: Dict[str, Any]) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö {var}"""
        result = template
        for key, value in context.items():
            result = result.replace(f"{{{key}}}", str(value))
        return result

# ===== –ê–¢–û–ú–ê–†–ù–´–ï –®–ê–ì–ò =====

class MenuStep(BaseStep):
    """–®–∞–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    
    async def execute(self, event: Event, state: UserState) -> StepResult:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ callback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        if event.type != "callback":
            text = self.resolve_template(self.config["text"], state.context)
            buttons = []
            
            for choice_key, choice_config in self.config["choices"].items():
                buttons.append({
                    "text": choice_config.get("text", choice_key),
                    "callback_data": choice_key
                })
            
            return StepResult(
                response=text,
                buttons=buttons,
                next_step=state.current_step  # –û—Å—Ç–∞–µ–º—Å—è —Ç—É—Ç, –∂–¥–µ–º –≤—ã–±–æ—Ä
            )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        choice = event.data
        if choice not in self.config["choices"]:
            return StepResult(
                response="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                next_step=state.current_step
            )
        
        choice_config = self.config["choices"][choice]
        next_step = choice_config.get("next_step")
        
        return StepResult(
            response=None,  # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º
            next_step=next_step,
            update_context={"last_choice": choice, "last_choice_text": choice_config.get("text", choice)}
        )

class MessageStep(BaseStep):
    """–®–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    async def execute(self, event: Event, state: UserState) -> StepResult:
        text = self.resolve_template(self.config["text"], state.context)
        next_step = self.config.get("next_step")
        
        return StepResult(
            response=text,
            next_step=next_step
        )

class LLMStep(BaseStep):
    """–®–∞–≥ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM"""
    
    async def execute(self, event: Event, state: UserState) -> StepResult:
        # –°–∏–º—É–ª—è—Ü–∏—è LLM –∑–∞–ø—Ä–æ—Å–∞
        prompt = self.resolve_template(self.config.get("prompt", "–ü—Ä–∏–≤–µ—Ç!"), state.context)
        
        # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –≤—ã–∑–æ–≤ LLM API
        llm_response = f"ü§ñ LLM –æ—Ç–≤–µ—Ç –Ω–∞: '{prompt}'"
        
        return StepResult(
            response=llm_response,
            next_step=self.config.get("next_step"),
            update_context={"last_llm_response": llm_response}
        )

class EndStep(BaseStep):
    """–®–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    
    async def execute(self, event: Event, state: UserState) -> StepResult:
        text = self.resolve_template(
            self.config.get("text", "‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!"), 
            state.context
        )
        
        return StepResult(
            response=text,
            next_step=None  # None –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω–µ—Ü
        )

# ===== –ü–†–û–°–¢–û–ô ENGINE =====

class SimpleScenarioEngine:
    """
    –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –¥–≤–∏–∂–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
    1. –û–¥–∏–Ω –¥–≤–∏–∂–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    2. –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤
    3. –Ø–≤–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    4. –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    5. –õ–µ–≥–∫–∞—è –æ—Ç–ª–∞–¥–∫–∞
    """
    
    def __init__(self):
        self.step_handlers: Dict[str, Callable] = {}
        self.plugins: Dict[str, BasePlugin] = {}
        self.logger = logger.bind(component="SimpleScenarioEngine")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_core_handlers()
        
    def _register_core_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —à–∞–≥–æ–≤."""
        self.step_handlers.update({
            "start": self._handle_start,
            "end": self._handle_end,
            "action": self._handle_action,
            "input": self._handle_input,
            "conditional_execute": self._handle_conditional_execute,
            "switch_scenario": self._handle_switch_scenario,  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            "log_message": self._handle_log_message,  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            "branch": self._handle_branch,  # –£—Å–ª–æ–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
        })
        self.logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏", handlers=list(self.step_handlers.keys()))
        
    def register_plugin(self, plugin: BasePlugin):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–≥–∏–Ω –∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
        
        Args:
            plugin: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–≥–∏–Ω–∞ –Ω–∞—Å–ª–µ–¥—É—é—â–µ–≥–æ BasePlugin
        """
        self.plugins[plugin.name] = plugin
        
        # –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–≤–∏–∂–æ–∫ –ø–ª–∞–≥–∏–Ω—É
        plugin.engine = self
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞–≥–∏–Ω–∞
        plugin_handlers = plugin.register_handlers()
        self.step_handlers.update(plugin_handlers)
        
        self.logger.info(
            f"–ü–ª–∞–≥–∏–Ω {plugin.name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", 
            plugin=plugin.name,
            new_handlers=list(plugin_handlers.keys())
        )
        
    async def healthcheck(self) -> Dict[str, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –¥–≤–∏–∂–∫–∞ –∏ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤.
        
        Returns:
            Dict[str, bool]: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –∏ –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞
        """
        health = {"engine": True}
        
        for plugin_name, plugin in self.plugins.items():
            try:
                health[plugin_name] = await plugin.healthcheck()
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ healthcheck –ø–ª–∞–≥–∏–Ω–∞ {plugin_name}: {e}")
                health[plugin_name] = False
                
        self.logger.info("Healthcheck –∑–∞–≤–µ—Ä—à–µ–Ω", health=health)
        return health
        
    async def execute_scenario(self, scenario: Union[str, Dict[str, Any]], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞.
        
        Args:
            scenario: –î–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏—è (–æ–±—ä–µ–∫—Ç) –∏–ª–∏ scenario_id (—Å—Ç—Ä–æ–∫–∞)
            context: –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω scenario_id –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ MongoDB
        if isinstance(scenario, str):
            scenario_id = scenario
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ MongoDB –ø–ª–∞–≥–∏–Ω
            get_scenario_step = {
                "id": "load_scenario",
                "type": "mongo_get_scenario",
                "params": {
                    "scenario_id": scenario_id,
                    "output_var": "loaded_scenario"
                }
            }
            
            temp_context = {}
            await self.execute_step(get_scenario_step, temp_context)
            
            if "loaded_scenario" not in temp_context or not temp_context["loaded_scenario"].get("success"):
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario_id}")
                
            scenario = temp_context["loaded_scenario"]["scenario"]
        
        scenario_id = scenario.get("scenario_id", "unknown")
        steps_data = scenario.get("steps", [])
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç, —Ç–∞–∫ –∏ –º–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤
        if isinstance(steps_data, dict):
            # –ï—Å–ª–∏ steps - –æ–±—ä–µ–∫—Ç, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
            steps = list(steps_data.values())
        else:
            # –ï—Å–ª–∏ steps - —É–∂–µ —Å–ø–∏—Å–æ–∫
            steps = steps_data
        
        self.logger.info(
            f"–ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}",
            scenario_id=scenario_id,
            steps_count=len(steps),
            initial_context=context
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        execution_context = {
            **context,
            "scenario_id": scenario_id,
            "current_step": None,
            "execution_started": True
        }
        
        try:
            # –ò—â–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ (–æ–±—ã—á–Ω–æ type="start")
            current_step = self._find_first_step(steps)
            
            if not current_step:
                raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ {scenario_id}")
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            while current_step:
                execution_context["current_step"] = current_step.get("id")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
                step_result = await self.execute_step(current_step, execution_context)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                execution_context.update(step_result)
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                current_step = self._find_next_step(steps, current_step, execution_context)
                
            self.logger.info(
                f"–°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
                scenario_id=scenario_id,
                final_context=execution_context
            )
            
            return execution_context
            
        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}: {e}",
                scenario_id=scenario_id,
                current_step=execution_context.get("current_step"),
                error=str(e)
            )
            raise
            
    async def execute_step(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —à–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è.
        
        Args:
            step: –î–∞–Ω–Ω—ã–µ —à–∞–≥–∞ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        step_id = step.get("id", "unknown")
        step_type = step.get("type", "unknown")
        
        self.logger.info(
            f"–í—ã–ø–æ–ª–Ω—è—é —à–∞–≥ {step_id}",
            step_id=step_id,
            step_type=step_type,
            step=step
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ —à–∞–≥–∞
        if step_type not in self.step_handlers:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —à–∞–≥–∞: {step_type}")
            
        handler = self.step_handlers[step_type]
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            result = await handler(step, context)
            
            self.logger.info(
                f"–®–∞–≥ {step_id} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
                step_id=step_id,
                step_type=step_type
            )
            
            return result if result else context
            
        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ {step_id}: {e}",
                step_id=step_id,
                step_type=step_type,
                error=str(e)
            )
            raise
            
    def _find_first_step(self, steps: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
        # –ò—â–µ–º —à–∞–≥ —Å —Ç–∏–ø–æ–º "start"
        for step in steps:
            if step.get("type") == "start":
                return step
                
        # –ï—Å–ª–∏ –Ω–µ—Ç start, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
        return steps[0] if steps else None
        
    def _find_next_step(self, steps: List[Dict[str, Any]], current_step: Dict[str, Any], context: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        
        Args:
            steps: –í—Å–µ —à–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è
            current_step: –¢–µ–∫—É—â–∏–π —à–∞–≥
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Optional[Dict[str, Any]]: –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∏–ª–∏ None –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ (–¥–ª—è —É—Å–ª–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤)
        next_step_id = context.get("next_step_override") or current_step.get("next_step_id") or current_step.get("next_step")
        
        # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if "next_step_override" in context:
            del context["next_step_override"]
        
        if not next_step_id:
            # –ù–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ - —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω
            return None
            
        # –ò—â–µ–º —à–∞–≥ –ø–æ ID
        for step in steps:
            if step.get("id") == next_step_id:
                return step
                
        self.logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —Å ID: {next_step_id}")
        return None
        
    # === –ë–ê–ó–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    async def _handle_start(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ 'start'."""
        self.logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —à–∞–≥ start", step_id=step.get("id"))
        return context
        
    async def _handle_end(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ 'end'.""" 
        self.logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —à–∞–≥ end", step_id=step.get("id"))
        context["execution_completed"] = True
        return context
        
    async def _handle_action(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ 'action'."""
        self.logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —à–∞–≥ action", step_id=step.get("id"))
        
        params = step.get("params", {})
        action = params.get("action")
        action_type = params.get("action_type")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
        if action_type == "update_context":
            updates = params.get("updates", {})
            for key, value in updates.items():
                # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∑–Ω–∞—á–µ–Ω–∏—è
                if isinstance(value, str):
                    resolved_value = self._resolve_template(value, context)
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                    if resolved_value.isdigit():
                        resolved_value = int(resolved_value)
                    context[key] = resolved_value
                else:
                    context[key] = value
            
            self.logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {updates}")
            return context
        
        if action:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞–≥–∏–Ω–∞
            self.logger.info(f"–í—ã–∑—ã–≤–∞—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è: {action}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            handler_context = context.copy()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —à–∞–≥–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            for key, value in params.items():
                if key != "action":  # action –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
                    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∑–Ω–∞—á–µ–Ω–∏—è
                    if isinstance(value, str):
                        resolved_value = self._resolve_template(value, context)
                        handler_context[key] = resolved_value
                    else:
                        handler_context[key] = value
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            if action in self.step_handlers:
                handler = self.step_handlers[action]
                try:
                    # –°–æ–∑–¥–∞–µ–º step –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π
                    action_step = {
                        "id": f"action_{action}",
                        "type": action,
                        "params": params
                    }
                    result = await handler(action_step, context)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    if isinstance(result, dict):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
                        context_key = params.get("context_key")
                        if context_key:
                            context[context_key] = result
                        else:
                            # –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
                            context.update(result)
                    
                    self.logger.info(f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ {action} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action}: {e}")
                    context["action_error"] = str(e)
                    context["action_success"] = False
            else:
                self.logger.error(f"‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{action}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                context["action_error"] = f"Handler for action '{action}' not found"
                context["action_success"] = False
        else:
            # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if params:
                context.update(params)
                self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {params}")
        
        return context
        
    async def _handle_input(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ 'input' - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ input —à–∞–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.
        –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ callback –∏–ª–∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
        """
        self.logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —à–∞–≥ input - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", step_id=step.get("id"))
        
        context["waiting_for_input"] = True
        context["input_step_id"] = step.get("id")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–≤–æ–¥–∞
        raise StopExecution(f"–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞ —à–∞–≥–µ {step.get('id')}")
        
    async def _handle_conditional_execute(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
        1. –ü—Ä–æ—Å—Ç—ã–µ —É—Å–ª–æ–≤–∏—è: "exists:user_data.documents"
        2. –°—Ä–∞–≤–Ω–µ–Ω–∏—è: "equals:user_role:admin"
        3. Python –≤—ã—Ä–∞–∂–µ–Ω–∏—è: "len(user_data.get('documents', [])) > 0"
        
        –ü—Ä–∏–º–µ—Ä—ã:
        {
            "type": "conditional_execute",
            "params": {
                "condition": "exists:user_data.documents",
                "true_step": "user_exists",
                "false_step": "create_user"
            }
        }
        
        {
            "type": "conditional_execute", 
            "params": {
                "condition": "equals:telegram_bot_token_available:true",
                "true_step": "start_polling",
                "false_step": "no_token"
            }
        }
        """
        self.logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —à–∞–≥ conditional_execute", step_id=step.get("id"))
        
        params = step.get("params", {})
        condition = params.get("condition")
        true_step = params.get("true_step")
        false_step = params.get("false_step")
        
        result = False
        
        try:
            result = self._evaluate_condition(condition, context)
            
            if result:
                context["next_step_override"] = true_step
                self.logger.info(f"–£—Å–ª–æ–≤–∏–µ '{condition}' –∏—Å—Ç–∏–Ω–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥ –∫ {true_step}")
            else:
                context["next_step_override"] = false_step
                self.logger.info(f"–£—Å–ª–æ–≤–∏–µ '{condition}' –ª–æ–∂–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥ –∫ {false_step}")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏—è '{condition}': {e}")
            context["next_step_override"] = false_step
            context["condition_error"] = str(e)
                
        context["condition_result"] = result
        return context
        
    def _evaluate_condition(self, condition: str, context: Dict[str, Any]) -> bool:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —É—Å–ª–æ–≤–∏–π.
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
        1. exists:path.to.field - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è
        2. equals:field:value - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
        3. not_empty:field - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        4. Python –≤—ã—Ä–∞–∂–µ–Ω–∏–µ - eval() –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        """
        if not condition:
            return False
            
        # –ü—Ä–æ—Å—Ç—ã–µ —É—Å–ª–æ–≤–∏—è
        if ":" in condition:
            parts = condition.split(":", 2)
            condition_type = parts[0]
            
            if condition_type == "exists":
                # exists:user_data.documents
                field_path = parts[1]
                return self._check_field_exists(field_path, context)
                
            elif condition_type == "equals":
                # equals:telegram_bot_token_available:true
                field_name = parts[1]
                expected_value = parts[2]
                actual_value = context.get(field_name)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if expected_value.lower() == "true":
                    expected_value = True
                elif expected_value.lower() == "false":
                    expected_value = False
                elif expected_value.isdigit():
                    expected_value = int(expected_value)
                    
                return actual_value == expected_value
                
            elif condition_type == "not_empty":
                # not_empty:user_data.documents
                field_path = parts[1]
                value = self._get_field_value(field_path, context)
                if isinstance(value, (list, dict, str)):
                    return len(value) > 0
                return value is not None
                
        # Fallback: Python –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        try:
            resolved_condition = self._resolve_condition(condition, context)
            return bool(eval(resolved_condition))
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏–µ '{condition}': {e}")
            return False
            
    def _check_field_exists(self, field_path: str, context: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è –ø–æ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: user_data.documents)"""
        try:
            value = self._get_field_value(field_path, context)
            return value is not None
        except:
            return False
            
    def _get_field_value(self, field_path: str, context: Dict[str, Any]) -> Any:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –ø–æ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: user_data.documents)"""
        parts = field_path.split(".")
        current = context
        
        for part in parts:
            if isinstance(current, dict) and part in current:
                current = current[part]
            else:
                return None
                
        return current
        
    async def _handle_switch_scenario(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
        
        –ü—Ä–∏–º–µ—Ä —à–∞–≥–∞:
        {
            "id": "switch1",
            "type": "switch_scenario",
            "params": {
                "scenario_id": "new_scenario",
                "context_mapping": {
                    "user_id": "{user_id}",
                    "chat_id": "{chat_id}"
                }
            }
        }
        """
        self.logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è", step_id=step.get("id"))
        
        try:
            params = step.get("params", {})
            scenario_id = params.get("scenario_id")
            context_mapping = params.get("context_mapping", {})
            
            if not scenario_id:
                raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω scenario_id –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ scenario_id
            resolved_scenario_id = self._resolve_template(scenario_id, context)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            new_context = {}
            
            # –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è (–≤–∫–ª—é—á–∞—è None –∑–Ω–∞—á–µ–Ω–∏—è)
            base_fields = ["user_id", "chat_id", "agent_id", "channel_id"]
            for field in base_fields:
                if field in context:
                    new_context[field] = context[field]
                    
            # –ï—Å–ª–∏ user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –µ—Å—Ç—å chat_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∫–∞–∫ user_id
            if "user_id" not in new_context or new_context.get("user_id") is None:
                if "chat_id" in new_context and new_context["chat_id"] is not None:
                    new_context["user_id"] = new_context["chat_id"]
                    
            # –ü—Ä–∏–º–µ–Ω—è–µ–º mapping
            for target_key, source_template in context_mapping.items():
                resolved_value = self._resolve_template(str(source_template), context)
                new_context[target_key] = resolved_value
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ (–±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫)
            new_context.update({
                "switched_from_scenario": context.get("scenario_id"),
                "switch_reason": "engine_switch"
            })
            
            self.logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏–π: {resolved_scenario_id}")
            
            # –í–´–ü–û–õ–ù–Ø–ï–ú –ù–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô –ü–†–Ø–ú–û –ó–î–ï–°–¨
            switched_context = await self.execute_scenario(resolved_scenario_id, new_context)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (–±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫)
            context.update({
                "scenario_switched": True,
                "switched_to": resolved_scenario_id,
                "switch_successful": True
            })
            
            self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏–π {resolved_scenario_id}")
            return context
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
            context.update({
                "scenario_switched": False,
                "switch_error": str(e),
                "switch_successful": False
            })
            return context
    

    
    def _resolve_template(self, template: str, context: Dict[str, Any]) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö {var} –≤ —Å—Ç—Ä–æ–∫–µ."""
        if not isinstance(template, str):
            return str(template)
            
        result = template
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        special_vars = {
            "current_timestamp": datetime.now().isoformat(),
            "current_date": datetime.now().strftime("%Y-%m-%d"),
            "current_time": datetime.now().strftime("%H:%M:%S"),
            "current_datetime": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        for key, value in special_vars.items():
            result = result.replace(f"{{{key}}}", str(value))
        
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        for key, value in context.items():
            result = result.replace(f"{{{key}}}", str(value))
            
        return result
        
    def _resolve_condition(self, condition: str, context: Dict[str, Any]) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —É—Å–ª–æ–≤–∏–∏."""
        if not condition:
            return "False"
            
        result = condition
        for key, value in context.items():
            if isinstance(value, str):
                result = result.replace(key, f"'{value}'")
            else:
                result = result.replace(key, str(value))
                
        return result
    
    async def _handle_log_message(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
        
        Args:
            step: –î–∞–Ω–Ω—ã–µ —à–∞–≥–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        params = step.get("params", {})
        message_template = params.get("message", "")
        level = params.get("level", "INFO").upper()
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
        resolved_message = self._resolve_template(message_template, context)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —É—Ä–æ–≤–Ω–µ–º
        if level == "DEBUG":
            self.logger.debug(resolved_message)
        elif level == "INFO":
            self.logger.info(resolved_message)
        elif level == "WARNING":
            self.logger.warning(resolved_message)
        elif level == "ERROR":
            self.logger.error(resolved_message)
        elif level == "CRITICAL":
            self.logger.critical(resolved_message)
        else:
            self.logger.info(f"({level}) {resolved_message}")
            
        return context
    
    async def _handle_branch(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ª–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.
        
        Args:
            step: –î–∞–Ω–Ω—ã–µ —à–∞–≥–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        params = step.get("params", {})
        conditions = params.get("conditions", [])
        default_next_step_id = params.get("default_next_step_id")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ –ø–æ—Ä—è–¥–∫—É
        for condition_data in conditions:
            condition = condition_data.get("condition", "")
            next_step_id = condition_data.get("next_step_id")
            
            try:
                # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —É—Å–ª–æ–≤–∏—è
                if self._evaluate_branch_condition(condition, context):
                    context["next_step_override"] = next_step_id
                    self.logger.info(f"–£—Å–ª–æ–≤–∏–µ '{condition}' –∏—Å—Ç–∏–Ω–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥ –∫ {next_step_id}")
                    return context
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏—è '{condition}': {e}")
                continue
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º default
        if default_next_step_id:
            context["next_step_override"] = default_next_step_id
            self.logger.info(f"–í—Å–µ —É—Å–ª–æ–≤–∏—è –ª–æ–∂–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥ –∫ default: {default_next_step_id}")
        
        return context
    
    def _evaluate_branch_condition(self, condition: str, context: Dict[str, Any]) -> bool:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —É—Å–ª–æ–≤–∏–µ –¥–ª—è branch —à–∞–≥–∞.
        
        Args:
            condition: –£—Å–ª–æ–≤–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "context.counter > 10")
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            bool: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏—è
        """
        if not condition:
            return False
        
        try:
            # –ó–∞–º–µ–Ω—è–µ–º context.field –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            resolved_condition = condition
            
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ context.field –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è
            import re
            context_refs = re.findall(r'context\.(\w+)', condition)
            for field in context_refs:
                if field in context:
                    value = context[field]
                    if isinstance(value, str):
                        resolved_condition = resolved_condition.replace(f"context.{field}", f"'{value}'")
                    else:
                        resolved_condition = resolved_condition.replace(f"context.{field}", str(value))
                else:
                    # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ None
                    resolved_condition = resolved_condition.replace(f"context.{field}", "None")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å–ª–æ–≤–∏–µ
            result = eval(resolved_condition)
            self.logger.debug(f"–£—Å–ª–æ–≤–∏–µ '{condition}' -> '{resolved_condition}' -> {result}")
            return bool(result)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏—è '{condition}': {e}")
            return False
        
    def get_registered_handlers(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        return list(self.step_handlers.keys())
        
    def get_registered_plugins(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤."""
        return list(self.plugins.keys())
    
    async def call_handler(self, handler_name: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –∏–º–µ–Ω–∏.
        
        Args:
            handler_name: –ò–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        if handler_name not in self.step_handlers:
            self.logger.error(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ '{handler_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω", available=list(self.step_handlers.keys()))
            return {"success": False, "error": f"Handler '{handler_name}' not found"}
        
        try:
            handler = self.step_handlers[handler_name]
            result = await handler(context)
            
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç success, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if isinstance(result, dict) and "success" not in result:
                result["success"] = True
                
            return result
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ '{handler_name}': {e}")
            return {"success": False, "error": str(e)}


class StopExecution(Exception):
    """
    –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è 
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ —à–∞–≥–µ 'input').
    """
    pass

# ===== –î–ï–ú–û –°–¶–ï–ù–ê–†–ò–ô =====

DEMO_SCENARIO = {
    "scenario_id": "demo_test",
    "name": "–î–µ–º–æ-—Ç–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã",
    "steps": {
        "start": {
            "type": "menu",
            "text": "üéØ **–î–µ–º–æ –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:",
            "choices": {
                "test_message": {
                    "text": "üìù –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    "next_step": "show_message"
                },
                "test_llm": {
                    "text": "ü§ñ –¢–µ—Å—Ç LLM",
                    "next_step": "llm_request"
                },
                "test_context": {
                    "text": "üìä –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
                    "next_step": "context_demo"
                },
                "exit": {
                    "text": "üö™ –í—ã—Ö–æ–¥",
                    "next_step": "end"
                }
            }
        },
        "show_message": {
            "type": "message",
            "text": "‚úÖ –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n–í–∞—à –≤—ã–±–æ—Ä –±—ã–ª: {last_choice_text}",
            "next_step": "back_to_menu"
        },
        "llm_request": {
            "type": "llm",
            "prompt": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ—Å—Ç LLM. –°–∫–∞–∂–∏ —á—Ç–æ-—Ç–æ —É–º–Ω–æ–µ!",
            "next_step": "back_to_menu"
        },
        "context_demo": {
            "type": "message", 
            "text": "üìä **–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n\nUser ID: {user_id}\n–¢–µ–∫—É—â–∏–π —à–∞–≥: {current_step}\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä: {last_choice}",
            "next_step": "back_to_menu"
        },
        "back_to_menu": {
            "type": "menu",
            "text": "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            "choices": {
                "back": {
                    "text": "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                    "next_step": "start"
                },
                "exit": {
                    "text": "üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    "next_step": "end"
                }
            }
        },
        "end": {
            "type": "end",
            "text": "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã."
        }
    }
}

# ===== –î–ï–ú–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï =====

async def demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    engine = SimpleScenarioEngine()
    engine.load_scenario("demo_test", DEMO_SCENARIO)
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = "demo_user"
    scenario_id = "demo_test"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
    
    # –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è
    result = await engine.process_event(user_id, Event("start", ""), scenario_id)
    print(f"1. {result.response}")
    print(f"   –ö–Ω–æ–ø–∫–∏: {[b['text'] for b in result.buttons]}")
    
    # –í—ã–±–æ—Ä LLM —Ç–µ—Å—Ç–∞
    result = await engine.process_event(user_id, Event("callback", "test_llm"), scenario_id)
    print(f"2. {result.response}")
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    result = await engine.process_event(user_id, Event("callback", "back"), scenario_id)
    print(f"3. {result.response}")
    print(f"   –ö–Ω–æ–ø–∫–∏: {[b['text'] for b in result.buttons]}")
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    result = await engine.process_event(user_id, Event("callback", "exit"), scenario_id)
    print(f"4. {result.response}")


# ===== –°–û–ó–î–ê–ù–ò–ï –î–í–ò–ñ–ö–ê –° –ü–õ–ê–ì–ò–ù–ê–ú–ò =====

async def create_engine() -> SimpleScenarioEngine:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç SimpleScenarioEngine —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏.
    
    –ó–∞–º–µ–Ω—è–µ—Ç simple_dependencies.get_simple_engine() –¥–ª—è —è–≤–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
    –ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û - –Ω–∏–∫–∞–∫–∏—Ö —Å–∏–Ω–≥–ª—Ç–æ–Ω–æ–≤!
    
    Returns:
        SimpleScenarioEngine: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏
    """
    from loguru import logger
    
    logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ SimpleScenarioEngine...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    engine = SimpleScenarioEngine()
    
    # === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–õ–ê–ì–ò–ù–û–í ===
    
    try:
        # 1. MongoDB Plugin - –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        logger.info("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB Plugin...")
        from app.plugins.mongo_plugin import MongoPlugin
        mongo_plugin = MongoPlugin()
        await mongo_plugin.initialize()
        engine.register_plugin(mongo_plugin)
        logger.info("‚úÖ MongoDB Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è MongoDB Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    try:
        # 2. Telegram Plugin - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
        logger.info("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SimpleTelegram Plugin...")
        from app.plugins.simple_telegram_plugin import SimpleTelegramPlugin
        telegram_plugin = SimpleTelegramPlugin()
        await telegram_plugin.initialize()
        engine.register_plugin(telegram_plugin)
        logger.info("‚úÖ SimpleTelegram Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è SimpleTelegram Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    try:
        # 3. LLM Plugin - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
        logger.info("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SimpleLLM Plugin...")
        from app.plugins.simple_llm_plugin import SimpleLLMPlugin
        llm_plugin = SimpleLLMPlugin()
        await llm_plugin.initialize()
        engine.register_plugin(llm_plugin)
        logger.info("‚úÖ SimpleLLM Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è SimpleLLM Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    try:
        # 4. RAG Plugin - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
        logger.info("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SimpleRAG Plugin...")
        from app.plugins.simple_rag_plugin import SimpleRAGPlugin
        rag_plugin = SimpleRAGPlugin()
        await rag_plugin.initialize()
        engine.register_plugin(rag_plugin)
        logger.info("‚úÖ SimpleRAG Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è SimpleRAG Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    try:
        # 5. Scheduler Plugin - –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
        logger.info("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SimpleScheduler Plugin...")
        from app.plugins.simple_scheduler_plugin import SimpleSchedulerPlugin
        scheduler_plugin = SimpleSchedulerPlugin()
        await scheduler_plugin.initialize()
        engine.register_plugin(scheduler_plugin)
        logger.info("‚úÖ SimpleScheduler Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è SimpleScheduler Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # === –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø ===
    
    logger.info("üéØ SimpleScenarioEngine –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    logger.info(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã: {engine.get_registered_plugins()}")
    logger.info(f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {len(engine.get_registered_handlers())}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
    health = await engine.healthcheck()
    if health:
        logger.info("‚úÖ –í—Å–µ –ø–ª–∞–≥–∏–Ω—ã –∑–¥–æ—Ä–æ–≤—ã")
    else:
        logger.info("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞–≥–∏–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    
    return engine


if __name__ == "__main__":
    asyncio.run(demo()) 