#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è Universal Agent Platform.
–ü—Ä–∏–Ω—Ü–∏–ø: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î.
"""

import asyncio
from typing import Dict, List, Any
from datetime import datetime
from motor.motor_asyncio import AsyncIOMotorClient, AsyncIOMotorDatabase
from loguru import logger

from app.config.database import DB_CONFIG


class DatabaseMigration:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π."""
    
    def __init__(self, version: str, description: str):
        self.version = version
        self.description = description
        self.applied_at: datetime = None
    
    async def up(self, db: AsyncIOMotorDatabase) -> bool:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é."""
        raise NotImplementedError
    
    async def down(self, db: AsyncIOMotorDatabase) -> bool:
        """–û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é."""
        raise NotImplementedError


class InitialMigration(DatabaseMigration):
    """–ù–∞—á–∞–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã."""
    
    def __init__(self):
        super().__init__("001", "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î")
    
    async def up(self, db: AsyncIOMotorDatabase) -> bool:
        """–°–æ–∑–¥–∞—ë—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –∏–Ω–¥–µ–∫—Å—ã."""
        try:
            logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π...")
            
            # –°–æ–∑–¥–∞—ë–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collections = ["scenarios", "users", "executions", "migrations", "channel_mappings"]
            for collection_name in collections:
                if collection_name not in await db.list_collection_names():
                    await db.create_collection(collection_name)
                    logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} —Å–æ–∑–¥–∞–Ω–∞")
            
            # –°–æ–∑–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã
            logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...")
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
            channel_mappings = db.channel_mappings
            await channel_mappings.create_index("channel_id", unique=True)
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ - —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è  
            scenarios = db.scenarios
            await scenarios.create_index("scenario_id", unique=True)
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
            users = db.users
            await users.create_index([("user_id", 1), ("channel_type", 1)], unique=True)
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ
            executions = db.executions
            await executions.create_index("channel_id")
            await executions.create_index("scenario_id")
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π
            migrations = db.migrations
            await migrations.create_index("version", unique=True)
            
            logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î —Å–æ–∑–¥–∞–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {e}")
            return False
    
    async def down(self, db: AsyncIOMotorDatabase) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É."""
        try:
            collections = ["scenarios", "users", "executions", "channel_mappings"]
            for collection_name in collections:
                await db.drop_collection(collection_name)
                logger.info(f"üóëÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} —É–¥–∞–ª–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {e}")
            return False


class MigrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π."""
    
    def __init__(self):
        self.migrations: List[DatabaseMigration] = [
            InitialMigration(),
        ]
        self.client: AsyncIOMotorClient = None
        self.db: AsyncIOMotorDatabase = None
    
    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ë–î."""
        try:
            connection_string = DB_CONFIG.get_connection_string()
            self.client = AsyncIOMotorClient(connection_string)
            self.db = self.client[DB_CONFIG.database_name]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await self.client.admin.command('ismaster')
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {DB_CONFIG.database_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç –ë–î."""
        if self.client:
            self.client.close()
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    
    async def get_applied_migrations(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π."""
        try:
            if "migrations" not in await self.db.list_collection_names():
                return []
            
            cursor = self.db.migrations.find({}, {"version": 1})
            applied = []
            async for doc in cursor:
                applied.append(doc["version"])
            
            return applied
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            return []
    
    async def apply_migration(self, migration: DatabaseMigration) -> bool:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é."""
        try:
            logger.info(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ {migration.version}: {migration.description}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            success = await migration.up(self.db)
            
            if success:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
                await self.db.migrations.insert_one({
                    "version": migration.version,
                    "description": migration.description,
                    "applied_at": datetime.utcnow()
                })
                
                logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {migration.version} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
                return True
            else:
                logger.error(f"‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è {migration.version} –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ {migration.version}: {e}")
            return False
    
    async def migrate(self) -> bool:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏."""
        try:
            if not await self.connect():
                return False
            
            applied_migrations = await self.get_applied_migrations()
            logger.info(f"üìã –ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {applied_migrations}")
            
            success_count = 0
            for migration in self.migrations:
                if migration.version not in applied_migrations:
                    if await self.apply_migration(migration):
                        success_count += 1
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é {migration.version}")
                        break
                else:
                    logger.info(f"‚è≠Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è {migration.version} —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
            
            logger.info(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {success_count} –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            return False
        finally:
            await self.disconnect()
    
    async def status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π."""
        try:
            if not await self.connect():
                return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î"}
            
            applied_migrations = await self.get_applied_migrations()
            
            status = {
                "database": DB_CONFIG.database_name,
                "total_migrations": len(self.migrations),
                "applied_migrations": len(applied_migrations),
                "pending_migrations": [],
                "applied_list": applied_migrations
            }
            
            for migration in self.migrations:
                if migration.version not in applied_migrations:
                    status["pending_migrations"].append({
                        "version": migration.version,
                        "description": migration.description
                    })
            
            return status
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            return {"error": str(e)}
        finally:
            await self.disconnect()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π
migration_manager = MigrationManager()


async def ensure_database_ready() -> bool:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ë–î –∫ —Ä–∞–±–æ—Ç–µ."""
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î...")
    return await migration_manager.migrate()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    asyncio.run(ensure_database_ready()) 