#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤
"""

import asyncio
import os
from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig

async def test_content_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤"""
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    test_files = {
        "good_hello.py": "print('Hello, World!')",
        "bad_hello.py": """<html>
<head><title>–û—Ç—á—ë—Ç –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞</title></head>
<body>
<div class="header">
    <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏</h1>
    <p>–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª hello.py —Å –∫–æ–¥–æ–º print('Hello, World!')</p>
</div>
</body>
</html>""",
        "fake_script.py": """
# –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
# –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ KittyCore 3.0 üê±
# TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É

def main():
    print("–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º")

if __name__ == "__main__":
    main()
""",
        "valid_html.html": """<!DOCTYPE html>
<html>
<head>
    <title>Test Page</title>
</head>
<body>
    <h1>Hello World</h1>
</body>
</html>""",
        "invalid_json.json": "{ invalid json content }",
        "valid_json.json": '{"message": "Hello, World!", "status": "success"}'
    }
    
    # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª—ã
    for filename, content in test_files.items():
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
    
    try:
        # –°–æ–∑–¥–∞—ë–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        config = UnifiedConfig(vault_path="./test_vault")
        orchestrator = UnifiedOrchestrator(config)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤...")
        
        task = "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello.py —Å –∫–æ–¥–æ–º print('Hello, World!')"
        expected_outcome = {
            'type': '–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–æ–º Python',
            'description': '–°–æ–∑–¥–∞–Ω–∏–µ Python —Ñ–∞–π–ª–∞',
            'validation_criteria': ['–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å print("Hello, World!")']
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for filename in test_files.keys():
            print(f"\nüìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: {filename}")
            
            validation_result = await orchestrator._validate_file_contents(
                created_files=[filename],
                task=task,
                expected_outcome=expected_outcome
            )
            
            print(f"   üìä –ë–æ–Ω—É—Å –∫ –æ—Ü–µ–Ω–∫–µ: {validation_result['score_bonus']:.2f}")
            print(f"   ‚úÖ –î–µ—Ç–∞–ª–∏: {validation_result['details']}")
            if validation_result['issues']:
                print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã: {validation_result['issues']}")
        
        print("\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
        
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        for filename in test_files.keys():
            if os.path.exists(filename):
                os.remove(filename)
        print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")

if __name__ == "__main__":
    asyncio.run(test_content_validation()) 