#!/usr/bin/env python3
"""
üß† SIMPLE LLM ROUTER PLUGIN
–ü–ª–∞–≥–∏–Ω —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á –¥–ª—è SimpleScenarioEngine

–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç LLM-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É KittyCore
"""

import asyncio
import aiohttp
import time
import os
from typing import Dict, Any, Optional, List
from loguru import logger
from app.core.base_plugin import BasePlugin

class SimpleLLMRouterPlugin(BasePlugin):
    """
    üß† –ü–ª–∞–≥–∏–Ω —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å LLM
    
    HANDLERS:
    - llm_route_task: –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –∫ –∞–≥–µ–Ω—Ç—É
    - llm_get_routing_stats: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    - llm_classify_request: –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    """
    
    def __init__(self):
        super().__init__()
        self.plugin_name = "simple_llm_router"
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ
        self.available_agents = {
            "nova": {
                "name": "üìä NovaAgent",
                "description": "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –æ—Ç—á–µ—Ç—ã",
                "keywords": ["–∞–Ω–∞–ª–∏–∑", "–¥–∞–Ω–Ω—ã–µ", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
                "scenario_id": "nova_analysis_scenario"
            },
            "sherlock": {
                "name": "üîç SherlockAgent", 
                "description": "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                "keywords": ["–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫", "–∏—Å—Å–ª–µ–¥—É–π"],
                "scenario_id": "sherlock_research_scenario"
            },
            "artemis": {
                "name": "üé® ArtemisAgent",
                "description": "–ö–æ–Ω—Ç–µ–Ω—Ç, –¥–∏–∑–∞–π–Ω, —Ç–µ–∫—Å—Ç—ã",
                "keywords": ["—Å–æ–∑–¥–∞–π", "–¥–∏–∑–∞–π–Ω", "–∫–æ–Ω—Ç–µ–Ω—Ç"],
                "scenario_id": "artemis_creative_scenario"
            },
            "ada": {
                "name": "üíª AdaAgent",
                "description": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–æ–¥",
                "keywords": ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "api"],
                "scenario_id": "ada_development_scenario"
            },
            "cipher": {
                "name": "üîí CipherAgent",
                "description": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "keywords": ["—Ç–µ—Å—Ç", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"],
                "scenario_id": "cipher_security_scenario"
            },
            "warren": {
                "name": "üí∞ WarrenAgent",
                "description": "–§–∏–Ω–∞–Ω—Å—ã, –±—é–¥–∂–µ—Ç",
                "keywords": ["–±—é–¥–∂–µ—Ç", "—Ñ–∏–Ω–∞–Ω—Å—ã"],
                "scenario_id": "warren_finance_scenario"
            },
            "viral": {
                "name": "üì¢ ViralAgent",
                "description": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥, —Ä–µ–∫–ª–∞–º–∞",
                "keywords": ["—Ä–µ–∫–ª–∞–º–∞", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥"],
                "scenario_id": "viral_marketing_scenario"
            }
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_routes": 0,
            "llm_routes": 0,
            "heuristic_routes": 0,
            "successful_routes": 0,
            "agent_usage": {agent: 0 for agent in self.available_agents.keys()}
        }
        
        logger.info(f"üß† {self.plugin_name}: –≥–æ—Ç–æ–≤ —Å {len(self.available_agents)} –∞–≥–µ–Ω—Ç–∞–º–∏")
    
    def register_handlers(self) -> Dict[str, callable]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        return {
            "llm_route_task": self.llm_route_task,
            "llm_get_routing_stats": self.llm_get_routing_stats,
            "llm_classify_request": self.llm_classify_request,
            "llm_execute_with_agent": self.llm_execute_with_agent
        }
    
    async def llm_route_task(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–º—É –∞–≥–µ–Ω—Ç—É
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã step:
        - task: —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        - priority: normal|high|critical
        - use_llm: true|false (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)
        """
        
        try:
            task = step["params"]["task"]
            priority = step["params"].get("priority", "normal")
            force_llm = step["params"].get("use_llm", False)
            
            logger.info(f"üß† –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏: '{task[:50]}...' (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority})")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
            use_llm = force_llm or self._should_use_llm(task, priority)
            
            if use_llm:
                routing_result = await self._route_with_llm(task)
                self.stats["llm_routes"] += 1
                logger.info(f"üß† LLM –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: {task[:30]}... ‚Üí {routing_result['agent']}")
            else:
                routing_result = self._route_with_heuristics(task)
                self.stats["heuristic_routes"] += 1
                logger.info(f"üîß –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: {task[:30]}... ‚Üí {routing_result['agent']}")
            
            self.stats["total_routes"] += 1
            self.stats["successful_routes"] += 1
            self.stats["agent_usage"][routing_result["agent"]] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
            context.update({
                "selected_agent": routing_result["agent"],
                "agent_scenario": self.available_agents[routing_result["agent"]]["scenario_id"],
                "routing_confidence": routing_result["confidence"],
                "routing_method": routing_result["method"],
                "routing_reasoning": routing_result["reasoning"],
                "original_task": task
            })
            
            return {"success": True, "context": context, "routing": routing_result}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            return {"success": False, "error": str(e), "context": context}
    
    async def llm_classify_request(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã step:
        - user_message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - chat_id: ID —á–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        
        try:
            user_message = step["params"]["user_message"]
            chat_id = step["params"].get("chat_id", "unknown")
            
            logger.info(f"üîç –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç {chat_id}: '{user_message[:50]}...'")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            request_type = await self._classify_request_type(user_message)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ - –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º
            if request_type["is_task"]:
                routing_result = await self._route_with_llm(user_message)
                
                context.update({
                    "request_type": "agent_task",
                    "selected_agent": routing_result["agent"],
                    "agent_scenario": self.available_agents[routing_result["agent"]]["scenario_id"],
                    "classification": request_type,
                    "routing": routing_result,
                    "original_message": user_message
                })
            else:
                # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ
                context.update({
                    "request_type": "regular_message",
                    "classification": request_type,
                    "original_message": user_message
                })
            
            return {"success": True, "context": context}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {"success": False, "error": str(e), "context": context}
    
    async def llm_execute_with_agent(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        """
        
        try:
            agent = context.get("selected_agent")
            agent_scenario = context.get("agent_scenario")
            original_task = context.get("original_task")
            
            if not agent or not agent_scenario:
                return {"success": False, "error": "–ê–≥–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω", "context": context}
            
            logger.info(f"ü§ñ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–º {agent}: {agent_scenario}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
            agent_context = {
                **context,
                "task": original_task,
                "agent_type": agent,
                "execution_start_time": time.time()
            }
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏–π –∞–≥–µ–Ω—Ç–∞
            context.update({
                "switch_to_scenario": agent_scenario,
                "agent_context": agent_context,
                "execution_status": "started"
            })
            
            return {"success": True, "context": context}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º: {e}")
            return {"success": False, "error": str(e), "context": context}
    
    async def llm_get_routing_stats(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"""
        
        total = self.stats["total_routes"]
        
        if total == 0:
            stats = {"message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"}
        else:
            stats = {
                "total_routes": total,
                "llm_usage_percent": round((self.stats["llm_routes"] / total) * 100, 1),
                "heuristic_usage_percent": round((self.stats["heuristic_routes"] / total) * 100, 1),
                "success_rate": round((self.stats["successful_routes"] / total) * 100, 1),
                "agent_usage": self.stats["agent_usage"],
                "most_used_agent": max(self.stats["agent_usage"], key=self.stats["agent_usage"].get)
            }
        
        context["routing_stats"] = stats
        return {"success": True, "context": context}
    
    def _should_use_llm(self, task: str, priority: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LLM"""
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—Å–µ–≥–¥–∞ —á–µ—Ä–µ–∑ LLM
        if priority == "critical":
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—á–µ–≤–∏–¥–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        task_lower = task.lower()
        
        for agent_id, agent_info in self.available_agents.items():
            keywords = agent_info["keywords"]
            if any(keyword in task_lower for keyword in keywords):
                return False  # –û—á–µ–≤–∏–¥–Ω–∞—è –∑–∞–¥–∞—á–∞ - —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
        
        # –ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–∞—è –∑–∞–¥–∞—á–∞ - LLM
        return True
    
    async def _route_with_llm(self, task: str) -> Dict[str, Any]:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ LLM"""
        
        start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
        settings = await self._get_fresh_settings()
        api_key = settings.get("openrouter_api_key") or os.getenv('OPENROUTER_API_KEY')
        
        if not api_key:
            raise Exception("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
        agents_list = "\n".join([
            f"{agent_id} - {info['description']}" 
            for agent_id, info in self.available_agents.items()
        ])
        
        prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á. –í—ã–±–µ—Ä–∏ –û–î–ù–û–ì–û –∞–≥–µ–Ω—Ç–∞:

{agents_list}

–ó–ê–î–ê–ß–ê: {task}

–û–¢–í–ï–¢: —Ç–æ–ª—å–∫–æ –∏–º—è –∞–≥–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: nova)"""
        
        async with aiohttp.ClientSession() as session:
            headers = {
                "Authorization": f"Bearer {api_key}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": "deepseek/deepseek-chat",
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": 15,
                "temperature": 0.1
            }
            
            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers, json=payload, timeout=12
            ) as response:
                
                response_time = round((time.time() - start_time) * 1000)
                
                if response.status == 200:
                    data = await response.json()
                    content = data["choices"][0]["message"]["content"]
                    agent = self._extract_agent_name(content)
                    
                    return {
                        "agent": agent,
                        "confidence": 0.91,
                        "method": "llm",
                        "reasoning": f"LLM: '{content.strip()}'",
                        "response_time_ms": response_time
                    }
                else:
                    raise Exception(f"HTTP {response.status}")
    
    def _route_with_heuristics(self, task: str) -> Dict[str, Any]:
        """–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è"""
        
        task_lower = task.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∞–≥–µ–Ω—Ç–æ–≤
        for agent_id, agent_info in self.available_agents.items():
            keywords = agent_info["keywords"]
            if any(keyword in task_lower for keyword in keywords):
                return {
                    "agent": agent_id,
                    "confidence": 0.78,
                    "method": "heuristic",
                    "reasoning": f"–≠–≤—Ä–∏—Å—Ç–∏–∫–∞: —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤",
                    "response_time_ms": 1
                }
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - sherlock
        return {
            "agent": "sherlock",
            "confidence": 0.6,
            "method": "heuristic",
            "reasoning": "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç",
            "response_time_ms": 1
        }
    
    async def _classify_request_type(self, message: str) -> Dict[str, Any]:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        
        message_lower = message.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–¥–∞—á–µ–π –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        task_indicators = [
            "—Å–æ–∑–¥–∞–π", "–Ω–∞–π–¥–∏", "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π", "–Ω–∞–ø–∏—à–∏",
            "—Ä–∞—Å—Å—á–∏—Ç–∞–π", "–∑–∞–ø—É—Å—Ç–∏", "–∏—Å—Å–ª–µ–¥—É–π", "–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π", "–∏–∑—É—á–∏"
        ]
        
        is_task = any(indicator in message_lower for indicator in task_indicators)
        
        return {
            "is_task": is_task,
            "confidence": 0.8 if is_task else 0.9,
            "indicators_found": [ind for ind in task_indicators if ind in message_lower]
        }
    
    def _extract_agent_name(self, response: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
        
        response_lower = response.lower()
        
        for agent_id in self.available_agents.keys():
            if agent_id in response_lower:
                return agent_id
        
        return "sherlock"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    async def _get_fresh_settings(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        return {
            "openrouter_api_key": os.getenv('OPENROUTER_API_KEY')
        } 