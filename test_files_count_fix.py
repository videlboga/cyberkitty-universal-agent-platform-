#!/usr/bin/env python3
import asyncio
import kittycore
import os

async def test_files_count():
    print('üîç –¢–µ—Å—Ç –ø–æ–¥—Å—á—ë—Ç–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
    
    orchestrator = kittycore.create_orchestrator()
    result = await orchestrator.solve_task('—Å–æ–∑–¥–∞—Ç—å python —Ñ–∞–π–ª hello.py —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º')
    
    print(f'üìä –°—Ç–∞—Ç—É—Å: {result.get("status", "unknown")}')
    print(f'üìÅ –§–∞–π–ª—ã –≤ created_files: {result.get("created_files", [])}')
    print(f'üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {len(result.get("created_files", []))}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    files = result.get('created_files', [])
    existing_files = 0
    
    print('\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:')
    for file_path in files:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            print(f'   ‚úÖ {file_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({size} –±–∞–π—Ç)')
            existing_files += 1
        else:
            print(f'   ‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    print(f'\nüìä –ò–¢–û–ì:')
    print(f'   üìÅ –ó–∞—è–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}')
    print(f'   ‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª–æ–≤: {existing_files}')
    print(f'   üéØ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {"‚úÖ –î–ê" if len(files) == existing_files else "‚ùå –ù–ï–¢"}')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –≤ outputs/ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å —Ñ–∞–π–ª—ã  
    outputs_files = []
    if os.path.exists('outputs'):
        outputs_files = [f for f in os.listdir('outputs') if f.endswith('.py')]
        print(f'   üìÅ Python —Ñ–∞–π–ª–æ–≤ –≤ outputs/: {len(outputs_files)}')
        for f in outputs_files[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
            print(f'      üìÑ {f}')

if __name__ == '__main__':
    asyncio.run(test_files_count()) 