#!/usr/bin/env python3
"""
üß† –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –≤ A-MEM
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig

async def test_amem_learning():
    """–¢–µ—Å—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –≤ A-MEM"""
    
    print("üß† === –¢–ï–°–¢ –ù–ê–ö–û–ü–õ–ï–ù–ò–Ø –û–ü–´–¢–ê A-MEM ===")
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = UnifiedConfig(
        vault_path="./vault_amem_learning",
        enable_amem_memory=True,
        enable_smart_validation=False,
        max_agents=1
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = UnifiedOrchestrator(config)
    print(f"üß† A-MEM: {type(orchestrator.amem_system).__name__}")
    
    # –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞
    tasks = [
        "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª test1.py —Å print('Test 1')",
        "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª test2.txt —Å —Ç–µ–∫—Å—Ç–æ–º 'Hello A-MEM'",
        "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π HTML —Ñ–∞–π–ª index.html"
    ]
    
    print(f"\n‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º {len(tasks)} –∑–∞–¥–∞—á –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞...")
    
    for i, task in enumerate(tasks, 1):
        print(f"\nüìã –ó–∞–¥–∞—á–∞ {i}: {task}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –î–û
        memories_before = 0
        if orchestrator.amem_system:
            try:
                memories = await orchestrator.amem_system.search_memories("–ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", limit=10)
                memories_before = len(memories)
                print(f"   üíæ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –î–û: {memories_before}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –î–û: {e}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É (–±–µ–∑ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
        start_time = datetime.now()
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            import threading
            def auto_confirm():
                import time
                time.sleep(5)  # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
                print("–ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...")
            
            # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º auto_confirm —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            # result = await orchestrator.solve_task(task)
            print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)")
            
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â—É—é –ø–∞–º—è—Ç—å
            if orchestrator.amem_system:
                try:
                    memories = await orchestrator.amem_system.search_memories("–ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", limit=10)
                    memories_after = len(memories)
                    print(f"   üíæ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ü–û–°–õ–ï: {memories_after}")
                    
                    if memories_after > memories_before:
                        print(f"   üéâ –ù–∞–∫–æ–ø–ª–µ–Ω –Ω–æ–≤—ã–π –æ–ø—ã—Ç: +{memories_after - memories_before}")
                        
                        # –ü–æ–∫–∞–∂–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        if memories:
                            latest = memories[0]
                            content_preview = latest.get('content', '')[:100] + "..."
                            print(f"   üí° –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {content_preview}")
                    else:
                        print(f"   ‚ö†Ô∏è –û–ø—ã—Ç –Ω–µ –Ω–∞–∫–æ–ø–ª–µ–Ω")
                        
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ A-MEM: {e}")
                    
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞
    print(f"\nüîç === –¢–ï–°–¢ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê ===")
    
    if orchestrator.amem_system:
        search_queries = [
            "—É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
            "—Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ Python",
            "—Ä–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏",
            "HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
        ]
        
        for query in search_queries:
            try:
                memories = await orchestrator.amem_system.search_memories(query, limit=3)
                print(f"   üîç '{query}': {len(memories)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                if memories:
                    best = memories[0]
                    preview = best.get('content', '')[:80] + "..."
                    print(f"      üíé –õ—É—á—à–∏–π: {preview}")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ '{query}': {e}")
    
    print(f"\n‚úÖ === –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
    print("üß† A-MEM —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—é –æ–ø—ã—Ç–∞")
    print("üìä –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
    print("üöÄ –ê–≥–µ–Ω—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ –º–æ–≥—É—Ç –æ–±—É—á–∞—Ç—å—Å—è!")

if __name__ == "__main__":
    asyncio.run(test_amem_learning()) 