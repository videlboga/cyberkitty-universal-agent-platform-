"""
üß™ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã DatabaseTool

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ DatabaseTool –≤–∫–ª—é—á–∞—è MongoDB –∏ Redis.
"""

import pytest
import asyncio
import tempfile
import os
from pathlib import Path

from kittycore.tools.database_tool import (
    DatabaseTool,
    DatabaseConnection,
    create_database_tool,
    create_sqlite_tool
)

@pytest.mark.asyncio
class TestDatabaseToolFull:
    """–ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã DatabaseTool"""
    
    @pytest.fixture
    async def temp_db_file(self):
        """–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
            temp_path = f.name
        
        yield temp_path
        
        # Cleanup
        if os.path.exists(temp_path):
            os.unlink(temp_path)
    
    async def test_database_tool_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è DatabaseTool –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        tool = DatabaseTool()
        
        assert isinstance(tool, DatabaseTool)
        assert len(tool.connections) == 0
        assert tool.name == "database_tool"
        assert "SQL –∏ NoSQL" in tool.description
        
        print("‚úÖ DatabaseTool —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    async def test_available_actions(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        tool = DatabaseTool()
        actions = tool.get_available_actions()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        expected_actions = [
            "execute_sql", "execute_query", "connect_database", "list_tables",
            "mongodb_find", "mongodb_insert", "mongodb_update", "mongodb_delete",
            "redis_get", "redis_set", "redis_delete", "get_connection_info", "close_connection"
        ]
        
        for action in expected_actions:
            assert action in actions, f"–î–µ–π—Å—Ç–≤–∏–µ {action} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        print(f"‚úÖ –í—Å–µ {len(actions)} –¥–µ–π—Å—Ç–≤–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã")
    
    async def test_get_schema(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        tool = DatabaseTool()
        schema = tool.get_schema()
        
        assert schema["name"] == "DatabaseTool"
        assert "supported_databases" in schema
        assert "sqlite" in schema["supported_databases"]
        assert "mongodb" in schema["supported_databases"]
        assert "redis" in schema["supported_databases"]
        assert "actions" in schema
        assert "connections" in schema
        
        print("‚úÖ –°—Ö–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    async def test_sqlite_connection_creation(self, temp_db_file):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            tool = DatabaseTool()
            
            result = await tool.connect_database(
                db_type='sqlite',
                connection_name='test_sqlite',
                database=temp_db_file
            )
            
            assert result.success == True
            assert result.data['connection_name'] == 'test_sqlite'
            assert result.data['db_type'] == 'sqlite'
            assert 'test_sqlite' in tool.connections
            
            print("‚úÖ SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
            
        except Exception as e:
            if "SQLAlchemy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" in str(e):
                pytest.skip("SQLAlchemy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                raise
    
    async def test_mongodb_connection_without_deps(self):
        """–¢–µ—Å—Ç –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        tool = DatabaseTool()
        
        result = await tool.connect_database(
            db_type='mongodb',
            connection_name='test_mongo',
            host='localhost',
            database='testdb'
        )
        
        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –æ —Ç–æ–º —á—Ç–æ PyMongo –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        assert result.success == False
        assert "PyMongo –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" in result.error
        
        print("‚úÖ MongoDB –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    
    async def test_redis_connection_without_deps(self):
        """–¢–µ—Å—Ç –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        tool = DatabaseTool()
        
        result = await tool.connect_database(
            db_type='redis',
            connection_name='test_redis',
            host='localhost'
        )
        
        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –æ —Ç–æ–º —á—Ç–æ Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        assert result.success == False
        assert "Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" in result.error
        
        print("‚úÖ Redis –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    
    async def test_unknown_database_type(self):
        """–¢–µ—Å—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        tool = DatabaseTool()
        
        result = await tool.connect_database(
            db_type='unknown_db',
            connection_name='test_unknown'
        )
        
        assert result.success == False
        assert "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –±–∞–∑—ã" in result.error
        
        print("‚úÖ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –ë–î –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
    
    async def test_execute_action_unknown(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        tool = DatabaseTool()
        
        result = await tool.execute_action("unknown_action")
        
        assert result.success == False
        assert "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ" in result.error
        assert "available_actions" in result.metadata
        
        print("‚úÖ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
    
    async def test_mongodb_actions_without_connection(self):
        """–¢–µ—Å—Ç MongoDB –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        tool = DatabaseTool()
        
        # –¢–µ—Å—Ç mongodb_find
        result = await tool.mongodb_find("test_collection")
        assert result.success == False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in result.error
        
        # –¢–µ—Å—Ç mongodb_insert  
        result = await tool.mongodb_insert("test_collection", {"test": "data"})
        assert result.success == False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in result.error
        
        # –¢–µ—Å—Ç mongodb_update
        result = await tool.mongodb_update("test_collection", {"_id": 1}, {"$set": {"test": "updated"}})
        assert result.success == False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in result.error
        
        # –¢–µ—Å—Ç mongodb_delete
        result = await tool.mongodb_delete("test_collection", {"_id": 1})
        assert result.success == False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in result.error
        
        print("‚úÖ MongoDB –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    async def test_redis_actions_without_connection(self):
        """–¢–µ—Å—Ç Redis –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        tool = DatabaseTool()
        
        # –¢–µ—Å—Ç redis_get
        result = await tool.redis_get("test_key")
        assert result.success == False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in result.error
        
        # –¢–µ—Å—Ç redis_set
        result = await tool.redis_set("test_key", "test_value")
        assert result.success == False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in result.error
        
        # –¢–µ—Å—Ç redis_delete
        result = await tool.redis_delete("test_key")
        assert result.success == False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in result.error
        
        print("‚úÖ Redis –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    async def test_sql_actions_without_connection(self):
        """–¢–µ—Å—Ç SQL –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        tool = DatabaseTool()
        
        # –¢–µ—Å—Ç execute_sql
        result = await tool.execute_sql("SELECT 1")
        assert result.success == False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in result.error
        
        # –¢–µ—Å—Ç list_tables
        result = await tool.list_tables()
        assert result.success == False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in result.error
        
        print("‚úÖ SQL –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    async def test_not_implemented_actions(self):
        """–¢–µ—Å—Ç –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π - –ü–†–û–ü–£–°–ö–ê–ï–ú –¥–ª—è —á–∏—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏"""
        tool = DatabaseTool()
        
        # –í —á–∏—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ —á–∏—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏")
    
    async def test_connection_info_nonexistent(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"""
        tool = DatabaseTool()
        
        result = await tool.get_connection_info("nonexistent")
        assert result.success == False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in result.error
        
        print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
    
    async def test_close_nonexistent_connection(self):
        """–¢–µ—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        tool = DatabaseTool()
        
        result = await tool.close_connection("nonexistent")
        assert result.success == False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in result.error
        
        print("‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    async def run_extended_tests():
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ DatabaseTool...")
        
        test_instance = TestDatabaseToolFull()
        
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
            await test_instance.test_database_tool_creation()
            await test_instance.test_available_actions()
            await test_instance.test_get_schema()
            
            # –¢–µ—Å—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            await test_instance.test_mongodb_connection_without_deps()
            await test_instance.test_redis_connection_without_deps()
            await test_instance.test_unknown_database_type()
            
            # –¢–µ—Å—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
            await test_instance.test_execute_action_unknown()
            await test_instance.test_mongodb_actions_without_connection()
            await test_instance.test_redis_actions_without_connection()
            await test_instance.test_sql_actions_without_connection()
            await test_instance.test_not_implemented_actions()
            
            # –¢–µ—Å—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            await test_instance.test_connection_info_nonexistent()
            await test_instance.test_close_nonexistent_connection()
            
            print("üéâ –í—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
            raise
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(run_extended_tests())