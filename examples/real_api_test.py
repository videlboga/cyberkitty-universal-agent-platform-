#!/usr/bin/env python3
"""
üåê –¢–µ—Å—Ç —Å–∞–º–æ—Ä–∞–∑–≤–∏–≤–∞—é—â–µ–≥–æ—Å—è –∞–≥–µ–Ω—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º API

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ OpenRouter —á–µ—Ä–µ–∑ VPN
–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
"""

import os
import sys
import time
import requests
sys.path.append('/app')

from kittycore import Agent
from kittycore.self_improvement import create_self_improving_agent

def check_vpn_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–π IP
        response = requests.get('https://httpbin.org/ip', timeout=10)
        ip_info = response.json()
        print(f"üåê –í–Ω–µ—à–Ω–∏–π IP: {ip_info['origin']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenRouter
        response = requests.get('https://openrouter.ai', timeout=10)
        if response.status_code == 200:
            print("‚úÖ OpenRouter –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_real_improvement():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è —Å API"""
    
    print("üß† –¢–µ—Å—Ç —Å–∞–º–æ—Ä–∞–∑–≤–∏–≤–∞—é—â–µ–≥–æ—Å—è –∞–≥–µ–Ω—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º API")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ VPN
    if not check_vpn_connection():
        print("‚ùå VPN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–∏")
        model = "mock"
    else:
        print("‚úÖ VPN –∞–∫—Ç–∏–≤–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API")
        model = "deepseek/deepseek-chat"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    api_key = os.getenv('OPENROUTER_API_KEY')
    if not api_key and model != "mock":
        print("‚ùå –ù–µ—Ç API –∫–ª—é—á–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–∏")
        model = "mock"
    else:
        print(f"üîë API –∫–ª—é—á: {'*' * (len(api_key) - 8) + api_key[-8:]}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è OpenRouter
        os.environ['OPENAI_API_KEY'] = api_key
        os.environ['OPENAI_BASE_URL'] = 'https://openrouter.ai/api/v1'
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    base_agent = Agent(
        prompt="""
        –¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
        1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        2. –ù–∞—Ö–æ–¥–∏—Ç—å –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Å–∞–π—Ç—ã
        3. –î–∞–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        4. –£–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        
        –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏.
        """,
        model=model
    )
    
    # –û–±—ë—Ä—Ç–∫–∞ –≤ —Å–∞–º–æ—Ä–∞–∑–≤–∏–≤–∞—é—â–µ–≥–æ—Å—è –∞–≥–µ–Ω—Ç–∞
    smart_agent = create_self_improving_agent("real_api_agent", base_agent)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    tasks = [
        {
            "task": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–µ–Ω–¥: –ø—Ä–æ–¥–∞–∂–∏ —è–Ω–≤–∞—Ä—è 100, —Ñ–µ–≤—Ä–∞–ª—è 120, –º–∞—Ä—Ç–∞ 95",
            "complexity": "simple",
            "expected_keywords": ["—Ç—Ä–µ–Ω–¥", "—Å–Ω–∏–∂–µ–Ω–∏–µ", "–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"]
        },
        {
            "task": "–ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é –≤ e-commerce?",
            "complexity": "medium", 
            "expected_keywords": ["ux", "—Ü–µ–Ω–∞", "–¥–æ—Å—Ç–∞–≤–∫–∞", "–æ—Ç–∑—ã–≤—ã"]
        },
        {
            "task": "–°–æ–∑–¥–∞–π SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å LTV > 1000 –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–æ–π –≤ 2024",
            "complexity": "medium",
            "expected_keywords": ["SELECT", "WHERE", "LTV", "2024"]
        },
        {
            "task": "–ö–∞–∫ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤?",
            "complexity": "hard",
            "expected_keywords": ["–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–ø—Ä–∏–∑–Ω–∞–∫–∏", "–º–æ–¥–µ–ª—å", "–≤–∞–ª–∏–¥–∞—Ü–∏—è"]
        },
        {
            "task": "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç: Facebook 30% CTR 2%, Google 50% CTR 3%, Email 20% CTR 8%",
            "complexity": "hard",
            "expected_keywords": ["email", "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "ROI"]
        }
    ]
    
    print(f"üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {len(tasks)} –∑–∞–¥–∞—á —Å –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é...")
    print()
    
    results = []
    
    for i, task_info in enumerate(tasks, 1):
        task = task_info["task"]
        complexity = task_info["complexity"]
        expected_keywords = task_info["expected_keywords"]
        
        print(f"üîÑ –ó–∞–¥–∞—á–∞ {i}/{len(tasks)} ({complexity}): {task[:50]}...")
        
        start_time = time.time()
        
        try:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —Å–∞–º–æ–æ—Ü–µ–Ω–∫–æ–π
            result = smart_agent.run_with_self_improvement(
                task,
                context={
                    'task_number': i,
                    'complexity': complexity,
                    'expected_keywords': expected_keywords
                }
            )
            
            execution_time = time.time() - start_time
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
            result_text = str(result).lower()
            keyword_score = sum(1 for kw in expected_keywords if kw.lower() in result_text) / len(expected_keywords)
            
            results.append({
                'task_number': i,
                'complexity': complexity,
                'execution_time': execution_time,
                'keyword_score': keyword_score,
                'result_length': len(str(result)),
                'result_preview': str(result)[:100] + "..."
            })
            
            print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {execution_time:.2f}—Å")
            print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {keyword_score:.1%} (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {str(result)[:150]}...")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            results.append({
                'task_number': i,
                'complexity': complexity,
                'execution_time': 0,
                'keyword_score': 0,
                'result_length': 0,
                'error': str(e)
            })
        
        print()
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("=" * 60)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    
    # –û—Ç—á—ë—Ç –∞–≥–µ–Ω—Ç–∞
    report = smart_agent.get_self_improvement_report()
    
    print(f"üÜî ID –∞–≥–µ–Ω—Ç–∞: {report['agent_id']}")
    print(f"üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {report['task_count']}")
    print(f"üõ†Ô∏è –°–æ–∑–¥–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {report['created_tools']}")
    print(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {report['optimizations_applied']}")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    successful_results = [r for r in results if 'error' not in r]
    
    if len(successful_results) >= 3:
        first_three = successful_results[:3]
        last_three = successful_results[-3:]
        
        avg_time_start = sum(r['execution_time'] for r in first_three) / len(first_three)
        avg_time_end = sum(r['execution_time'] for r in last_three) / len(last_three)
        
        avg_quality_start = sum(r['keyword_score'] for r in first_three) / len(first_three)
        avg_quality_end = sum(r['keyword_score'] for r in last_three) / len(last_three)
        
        time_improvement = (avg_time_start - avg_time_end) / avg_time_start if avg_time_start > 0 else 0
        quality_improvement = (avg_quality_end - avg_quality_start) / avg_quality_start if avg_quality_start > 0 else 0
        
        print("üìà –ü–†–û–ì–†–ï–°–° –û–ë–£–ß–ï–ù–ò–Ø:")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {time_improvement:.1%} {'—É–ª—É—á—à–µ–Ω–∏–µ' if time_improvement > 0 else '—É—Ö—É–¥—à–µ–Ω–∏–µ'}")
        print(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {quality_improvement:.1%} {'—É–ª—É—á—à–µ–Ω–∏–µ' if quality_improvement > 0 else '—É—Ö—É–¥—à–µ–Ω–∏–µ'}")
        print()
        
        if time_improvement > 0.1 or quality_improvement > 0.1:
            print("‚úÖ –ê–ì–ï–ù–¢ –ü–û–ö–ê–ó–ê–õ –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï!")
        elif time_improvement > 0 or quality_improvement > 0:
            print("üìà –ê–≥–µ–Ω—Ç –ø–æ–∫–∞–∑–∞–ª —É–º–µ—Ä–µ–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ")
        else:
            print("‚û°Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–∞")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    print("\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
    performance = report['performance_summary']
    
    for metric_name, data in performance.items():
        trend_emoji = {
            'improving': 'üìà',
            'stable': '‚û°Ô∏è',
            'declining': 'üìâ'
        }.get(data['trend'], '‚ùì')
        
        print(f"{trend_emoji} {metric_name}:")
        print(f"   –ù–∞—á–∞–ª—å–Ω–æ–µ: {data['baseline']:.3f}")
        print(f"   –¢–µ–∫—É—â–µ–µ: {data['current']:.3f}")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {data['improvement_rate']:.1%}")
        print()
    
    print("üöÄ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
    
    return results, report

if __name__ == "__main__":
    test_real_improvement() 