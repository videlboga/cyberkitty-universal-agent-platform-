"""
üóÑÔ∏è –ü–†–û–°–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –í OBSIDIAN VAULT
"""

import sys
from pathlib import Path
from datetime import datetime
from loguru import logger

def simple_obsidian_sink(message):
    """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è Obsidian vault"""
    
    try:
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –ª–æ–≥–æ–≤
        vault_path = Path("./obsidian_vault")
        logs_folder = vault_path / "system" / "logs"
        logs_folder.mkdir(parents=True, exist_ok=True)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞ –ø–æ –º–æ–¥—É–ª—é
        record = message.record
        module_name = record['name'].lower()
        
        if "improvement" in module_name or "validator" in module_name:
            log_file = logs_folder / "üîÑ Iterative Improvement Logs.md"
        elif "orchestrator" in module_name:
            log_file = logs_folder / "üß≠ Orchestrator Logs.md"
        elif "agent" in module_name:
            log_file = logs_folder / "ü§ñ Agents Logs.md"
        else:
            log_file = logs_folder / "‚öôÔ∏è System Logs.md"
        
        # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not log_file.exists():
            header = f"""---
title: {log_file.stem}
type: system_log
created: {datetime.now().isoformat()}
tags: [kittycore, logs]
---

# {log_file.stem}

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ –ª–æ–≥–∏ KittyCore 3.0

---

"""
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write(header)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
        timestamp = record['time'].strftime("%H:%M:%S.%f")[:-3]
        level = record['level'].name
        function = record['function']
        line = record['line']
        log_message = record['message']
        
        # –°–æ–∑–¥–∞—ë–º markdown –∑–∞–ø–∏—Å—å
        log_entry = f"""
## {timestamp} | {level}

**–ú–æ–¥—É–ª—å:** `{module_name}`  
**–§—É–Ω–∫—Ü–∏—è:** `{function}:{line}`  
**–°–æ–æ–±—â–µ–Ω–∏–µ:** {log_message}

---

"""
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(log_entry)
            
    except Exception as e:
        # Fallback –≤ –∫–æ–Ω—Å–æ–ª—å
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")

def setup_simple_obsidian_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Obsidian vault"""
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.remove()
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    logger.add(
        sys.stderr,
        level="INFO",
        format="<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
        colorize=True
    )
    
    # Obsidian markdown –ª–æ–≥–∏
    logger.add(
        simple_obsidian_sink,
        level="INFO",
        format="{time} | {level} | {name}:{function}:{line} | {message}"
    )
    
    logger.info("üóÑÔ∏è –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Obsidian vault –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
setup_simple_obsidian_logging() 