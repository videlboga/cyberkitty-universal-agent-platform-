"""
üîß –ü–†–û–°–¢–ê–Ø STATE MACHINE - –†–ê–ë–û–ß–ò–ô –ü–†–û–¢–û–¢–ò–ü
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
"""

from dataclasses import dataclass, field
from typing import Dict, Any, Optional, Union, List, Callable
from datetime import datetime
import json
from loguru import logger
import asyncio
from .base_plugin import BasePlugin
from .yaml_scenario_loader import yaml_loader
from app.core.template_resolver import template_resolver

# ===== –¢–ò–ü–´ –î–ê–ù–ù–´–• =====

@dataclass
class Event:
    """–°–æ–±—ã—Ç–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    type: str           # "callback", "text", "start"  
    data: Any           # callback_data, text, etc.
    telegram_data: Dict = field(default_factory=dict) # chat_id, message_id, etc.

@dataclass
class StepResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞"""
    response: Optional[str] = None      # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    next_step: Optional[str] = None     # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    update_context: Dict = field(default_factory=dict)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    buttons: List[Dict] = field(default_factory=list)   # –ö–Ω–æ–ø–∫–∏ –¥–ª—è Telegram

@dataclass 
class UserState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: str
    scenario_id: str
    current_step: str
    context: Dict[str, Any] = field(default_factory=dict)
    created_at: datetime = field(default_factory=datetime.now)

# ===== –ë–ê–ó–û–í–´–ï –ö–õ–ê–°–°–´ =====

class BaseStep:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —à–∞–≥–æ–≤"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        
    async def execute(self, event: Event, state: UserState) -> StepResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö"""
        raise NotImplementedError

    def resolve_template(self, template: str, context: Dict[str, Any]) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö {var}"""
        result = template
        for key, value in context.items():
            result = result.replace(f"{{{key}}}", str(value))
        return result

# ===== –ê–¢–û–ú–ê–†–ù–´–ï –®–ê–ì–ò =====

class MenuStep(BaseStep):
    """–®–∞–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    
    async def execute(self, event: Event, state: UserState) -> StepResult:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ callback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        if event.type != "callback":
            text = self.resolve_template(self.config["text"], state.context)
            buttons = []
            
            for choice_key, choice_config in self.config["choices"].items():
                buttons.append({
                    "text": choice_config.get("text", choice_key),
                    "callback_data": choice_key
                })
            
            return StepResult(
                response=text,
                buttons=buttons,
                next_step=state.current_step  # –û—Å—Ç–∞–µ–º—Å—è —Ç—É—Ç, –∂–¥–µ–º –≤—ã–±–æ—Ä
            )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        choice = event.data
        if choice not in self.config["choices"]:
            return StepResult(
                response="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                next_step=state.current_step
            )
        
        choice_config = self.config["choices"][choice]
        next_step = choice_config.get("next_step")
        
        return StepResult(
            response=None,  # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º
            next_step=next_step,
            update_context={"last_choice": choice, "last_choice_text": choice_config.get("text", choice)}
        )

class MessageStep(BaseStep):
    """–®–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    async def execute(self, event: Event, state: UserState) -> StepResult:
        text = self.resolve_template(self.config["text"], state.context)
        next_step = self.config.get("next_step")
        
        return StepResult(
            response=text,
            next_step=next_step
        )

class LLMStep(BaseStep):
    """–®–∞–≥ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM"""
    
    async def execute(self, event: Event, state: UserState) -> StepResult:
        # –°–∏–º—É–ª—è—Ü–∏—è LLM –∑–∞–ø—Ä–æ—Å–∞
        prompt = self.resolve_template(self.config.get("prompt", "–ü—Ä–∏–≤–µ—Ç!"), state.context)
        
        # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –≤—ã–∑–æ–≤ LLM API
        llm_response = f"ü§ñ LLM –æ—Ç–≤–µ—Ç –Ω–∞: '{prompt}'"
        
        return StepResult(
            response=llm_response,
            next_step=self.config.get("next_step"),
            update_context={"last_llm_response": llm_response}
        )

class EndStep(BaseStep):
    """–®–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    
    async def execute(self, event: Event, state: UserState) -> StepResult:
        text = self.resolve_template(
            self.config.get("text", "‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!"), 
            state.context
        )
        
        return StepResult(
            response=text,
            next_step=None  # None –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω–µ—Ü
        )

# ===== –ü–†–û–°–¢–û–ô ENGINE =====

class SimpleScenarioEngine:
    """
    –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –¥–≤–∏–∂–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
    1. –û–¥–∏–Ω –¥–≤–∏–∂–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    2. –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤
    3. –Ø–≤–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    4. –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    5. –õ–µ–≥–∫–∞—è –æ—Ç–ª–∞–¥–∫–∞
    """
    
    def __init__(self):
        self.step_handlers: Dict[str, Callable] = {}
        self.plugins: Dict[str, BasePlugin] = {}
        self.logger = logger.bind(component="SimpleScenarioEngine")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_core_handlers()
        
    def _register_core_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —à–∞–≥–æ–≤."""
        self.step_handlers.update({
            # === –ë–ê–ó–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
            "start": self._handle_start,
            "end": self._handle_end,
            "action": self._handle_action,
            "input_text": self._handle_input_text,
            "input_button": self._handle_input_button,
            "input": self._handle_input,
            "branch": self._handle_branch,
            "conditional_execute": self._handle_conditional_execute,
            "switch_scenario": self._handle_switch_scenario,
            "log_message": self._handle_log_message,
            
            # === TELEGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ===
            "channel_action": self._handle_channel_action,
            "extract_telegram_context": self._handle_extract_telegram_context,
            
            # === –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –£–¢–ò–õ–ò–¢–´ ===
            "validate_field": self._handle_validate_field,
            "increment": self._handle_increment,
            "save_to_object": self._handle_save_to_object,
        })
        self.logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏", handlers=list(self.step_handlers.keys()))
        
    def register_plugin(self, plugin: BasePlugin):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–≥–∏–Ω –∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
        
        Args:
            plugin: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–≥–∏–Ω–∞ –Ω–∞—Å–ª–µ–¥—É—é—â–µ–≥–æ BasePlugin
        """
        # –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–≤–∏–∂–æ–∫ –ø–ª–∞–≥–∏–Ω—É –ü–ï–†–ï–î —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
        plugin.set_engine(self)
        
        self.plugins[plugin.name] = plugin
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞–≥–∏–Ω–∞
        plugin_handlers = plugin.register_handlers()
        self.step_handlers.update(plugin_handlers)
        
        self.logger.info(
            f"–ü–ª–∞–≥–∏–Ω {plugin.name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", 
            plugin=plugin.name,
            new_handlers=list(plugin_handlers.keys())
        )
        
    async def healthcheck(self) -> Dict[str, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –¥–≤–∏–∂–∫–∞ –∏ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤.
        
        Returns:
            Dict[str, bool]: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –∏ –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞
        """
        health = {"engine": True}
        
        for plugin_name, plugin in self.plugins.items():
            try:
                health[plugin_name] = await plugin.healthcheck()
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ healthcheck –ø–ª–∞–≥–∏–Ω–∞ {plugin_name}: {e}")
                health[plugin_name] = False
                
        self.logger.info("Healthcheck –∑–∞–≤–µ—Ä—à–µ–Ω", health=health)
        return health
        
    async def execute_scenario(self, scenario: Union[str, Dict[str, Any]], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞.
        
        Args:
            scenario: –î–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏—è (–æ–±—ä–µ–∫—Ç) –∏–ª–∏ scenario_id (—Å—Ç—Ä–æ–∫–∞)
            context: –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω scenario_id –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ MongoDB
        if isinstance(scenario, str):
            scenario_id = scenario
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ MongoDB –ø–ª–∞–≥–∏–Ω
            get_scenario_step = {
                "id": "load_scenario",
                "type": "mongo_get_scenario",
                "params": {
                    "scenario_id": scenario_id,
                    "output_var": "loaded_scenario"
                }
            }
            
            temp_context = {}
            await self.execute_step(get_scenario_step, temp_context)
            
            if "loaded_scenario" not in temp_context or not temp_context["loaded_scenario"].get("success"):
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario_id}")
                
            scenario = temp_context["loaded_scenario"]["scenario"]
        
        scenario_id = scenario.get("scenario_id", "unknown")
        steps_data = scenario.get("steps", [])
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç, —Ç–∞–∫ –∏ –º–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤
        if isinstance(steps_data, dict):
            # –ï—Å–ª–∏ steps - –æ–±—ä–µ–∫—Ç, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
            steps = list(steps_data.values())
        else:
            # –ï—Å–ª–∏ steps - —É–∂–µ —Å–ø–∏—Å–æ–∫
            steps = steps_data
        
        self.logger.info(
            f"–ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}",
            scenario_id=scenario_id,
            steps_count=len(steps),
            initial_context=context
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        execution_context = {
            **context,
            "scenario_id": scenario_id,
            "execution_started": True
        }
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º current_step –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å!
        if "current_step" not in execution_context or execution_context["current_step"] is None:
            execution_context["current_step"] = None
        
        try:
            # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ò—â–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ
            if execution_context.get("current_step"):
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —à–∞–≥–∞
                target_step_id = execution_context["current_step"]
                current_step = None
                for step in steps:
                    if step.get("id") == target_step_id:
                        current_step = step
                        break
                        
                if not current_step:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —à–∞–≥ {target_step_id}, –Ω–∞—á–∏–Ω–∞—é —Å –ø–µ—Ä–≤–æ–≥–æ")
                    current_step = self._find_first_step(steps)
                else:
                    self.logger.info(f"üìç –ü—Ä–æ–¥–æ–ª–∂–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —à–∞–≥–∞: {target_step_id}")
            else:
                # –ò—â–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ (–æ–±—ã—á–Ω–æ type="start")
                current_step = self._find_first_step(steps)
            
            if not current_step:
                raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ {scenario_id}")
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            while current_step:
                execution_context["current_step"] = current_step.get("id")
                
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
                    step_result = await self.execute_step(current_step, execution_context)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    execution_context.update(step_result)
                    
                    # –ü–†–û–í–ï–†–Ø–ï–ú –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –°–¶–ï–ù–ê–†–ò–Ø
                    if execution_context.get("scenario_switched"):
                        new_scenario_id = execution_context.get("switched_to")
                        if new_scenario_id and new_scenario_id != scenario_id:
                            self.logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å —Å {scenario_id} –Ω–∞ {new_scenario_id}")
                            
                            try:
                                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
                                return await self.execute_scenario(new_scenario_id, execution_context)
                            except StopExecution as stop_e:
                                # –ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!
                                self.logger.info(f"‚è±Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥: {stop_e}")
                                execution_context["execution_stopped"] = True
                                execution_context["stop_reason"] = str(stop_e)
                                execution_context["waiting_for_input"] = True
                                return execution_context
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                    current_step = self._find_next_step(steps, current_step, execution_context)
                    
                except StopExecution as e:
                    # –ù–û–†–ú–ê–õ–¨–ù–û–ï –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ - –ù–ï –æ—à–∏–±–∫–∞!
                    self.logger.info(f"‚è±Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞: {e}")
                    execution_context["execution_stopped"] = True
                    execution_context["stop_reason"] = str(e)
                    execution_context["waiting_for_input"] = True
                    return execution_context
            
            self.logger.info(
                f"–°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
                scenario_id=scenario_id,
                final_context=execution_context
            )
            
            return execution_context
            
        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}: {e}",
                scenario_id=scenario_id,
                current_step=execution_context.get("current_step"),
                error=str(e)
            )
            raise
            
    async def execute_step(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —à–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è.
        
        Args:
            step: –î–∞–Ω–Ω—ã–µ —à–∞–≥–∞ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        step_id = step.get("id", "unknown")
        step_type = step.get("type", "unknown")
        
        self.logger.info(
            f"–í—ã–ø–æ–ª–Ω—è—é —à–∞–≥ {step_id}",
            step_id=step_id,
            step_type=step_type,
            step=step
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ —à–∞–≥–∞
        if step_type not in self.step_handlers:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —à–∞–≥–∞: {step_type}")
            
        # === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ü–û–î–°–¢–ê–ù–û–í–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í ===
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —à–∞–≥–∞ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        resolved_step = step.copy()
        if "params" in resolved_step:
            original_params = resolved_step["params"]
            
            # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            logger.info(f"üîç –ù–ê–ß–ò–ù–ê–Æ –ü–û–î–°–¢–ê–ù–û–í–ö–£ –¥–ª—è —à–∞–≥–∞ {step_id} (—Ç–∏–ø: {step_type})")
            logger.info(f"üîç original_params: {original_params}")
            logger.info(f"üîç template_resolver –æ–±—ä–µ–∫—Ç: {template_resolver}")
            logger.info(f"üîç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–ª—é—á–∏: {list(context.keys())}")
            
            # –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¥–ª—è contact –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            contact_value = context.get('contact')
            if contact_value:
                logger.info(f"üîç CONTACT –í –ö–û–ù–¢–ï–ö–°–¢–ï: {contact_value}")
            else:
                logger.info(f"üîç CONTACT –ù–ï –ù–ê–ô–î–ï–ù –í –ö–û–ù–¢–ï–ö–°–¢–ï!")
            
            try:
                resolved_step["params"] = template_resolver.resolve_deep(resolved_step["params"], context)
                logger.info(f"üîç resolve_deep –í–´–ü–û–õ–ù–ï–ù —É—Å–ø–µ—à–Ω–æ")
                logger.info(f"üîç resolved_params: {resolved_step['params']}")
            except Exception as e:
                logger.error(f"üö® –û–®–ò–ë–ö–ê –≤ resolve_deep: {e}")
                logger.error(f"üö® –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                import traceback
                logger.error(f"üö® Stack trace: {traceback.format_exc()}")
            
            # –û–¢–õ–ê–î–û–ß–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö  
            # –í–†–ï–ú–ï–ù–ù–û: –ª–æ–≥–∏—Ä—É–µ–º –í–°–ï —à–∞–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if original_params != resolved_step['params']:
                logger.info(f"üîç –û–¢–õ–ê–î–ö–ê –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —à–∞–≥–µ {step_id} (—Ç–∏–ø: {step_type}):")
                logger.info(f"   –î–æ:     {original_params}")
                logger.info(f"   –ü–æ—Å–ª–µ:  {resolved_step['params']}")
                logger.info(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: telegram_first_name={context.get('telegram_first_name')}, contact.phone_number={context.get('contact', {}).get('phone_number')}")
                logger.info(f"   –ü–û–õ–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ CONTACT: {context.get('contact')}")
                logger.info(f"   –í–°–ï –ö–õ–Æ–ß–ò –ö–û–ù–¢–ï–ö–°–¢–ê: {list(context.keys())}")
                logger.info(f"   üíæ –ï–°–¢–¨ –õ–ò contact –í –ö–û–†–ù–ï? {'contact' in context}")
                logger.info(f"   üíæ –¢–ò–ü context: {type(context)}")
                logger.info(f"   üíæ LEN context: {len(context)}")
                # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∂–¥—ã–π –∫–ª—é—á —Å–æ–¥–µ—Ä–∂–∞—â–∏–π contact
                contact_related_keys = [k for k in context.keys() if 'contact' in str(k).lower()]
                logger.info(f"   üíæ –ö–õ–Æ–ß–ò –° contact: {contact_related_keys}")
                logger.info(f"   –†–∞–≤–Ω—ã:  {original_params == resolved_step['params']}")
            else:
                logger.info(f"üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ù–ï –ò–ó–ú–ï–ù–ò–õ–ò–°–¨ –≤ —à–∞–≥–µ {step_id}")
            
        self.logger.debug(
            f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–≥–∞ {step_id} –ø–æ—Å–ª–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏",
            original_params=step.get("params", {}),
            resolved_params=resolved_step.get("params", {})
        )
            
        handler = self.step_handlers[step_type]
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            result = await handler(resolved_step, context)
            
            self.logger.info(
                f"–®–∞–≥ {step_id} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
                step_id=step_id,
                step_type=step_type
            )
            
            return result if result else context
            
        except StopExecution as e:
            # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ - –ù–ï –æ—à–∏–±–∫–∞!
            self.logger.info(
                f"‚è±Ô∏è –®–∞–≥ {step_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞: {e}",
                step_id=step_id,
                step_type=step_type
            )
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º StopExecution –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ execute_scenario
            raise
        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ {step_id}: {e}",
                step_id=step_id,
                step_type=step_type,
                error=str(e)
            )
            raise
            
    def _find_first_step(self, steps: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
        # –ò—â–µ–º —à–∞–≥ —Å —Ç–∏–ø–æ–º "start"
        for step in steps:
            if step.get("type") == "start":
                return step
                
        # –ï—Å–ª–∏ –Ω–µ—Ç start, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
        return steps[0] if steps else None
        
    def _find_next_step(self, steps: List[Dict[str, Any]], current_step: Dict[str, Any], context: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        
        Args:
            steps: –í—Å–µ —à–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è
            current_step: –¢–µ–∫—É—â–∏–π —à–∞–≥
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Optional[Dict[str, Any]]: –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∏–ª–∏ None –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ (–¥–ª—è —É—Å–ª–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤)
        next_step_id = context.get("next_step_override") or current_step.get("next_step_id") or current_step.get("next_step")
        
        # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if "next_step_override" in context:
            del context["next_step_override"]
        
        if not next_step_id:
            # –ù–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ - —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω
            return None
            
        # –ò—â–µ–º —à–∞–≥ –ø–æ ID
        for step in steps:
            if step.get("id") == next_step_id:
                return step
                
        self.logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —Å ID: {next_step_id}")
        return None
        
    # === –ë–ê–ó–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    async def _handle_start(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ 'start'."""
        self.logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —à–∞–≥ start", step_id=step.get("id"))
        return context
        
    async def _handle_end(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ 'end'.""" 
        self.logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —à–∞–≥ end", step_id=step.get("id"))
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–≤–æ–¥–∞ –≤ –∫–æ–Ω—Ü–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        context.pop("callback_data", None)
        context.pop("user_input", None)
        context.pop("waiting_for_input", None)
        context.pop("input_step_id", None)
        self.logger.info("üßπ –û—á–∏—Å—Ç–∏–ª –¥–∞–Ω–Ω—ã–µ –≤–≤–æ–¥–∞ –≤ –∫–æ–Ω—Ü–µ —Å—Ü–µ–Ω–∞—Ä–∏—è")
        
        context["execution_completed"] = True
        return context
        
    async def _handle_action(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ 'action'."""
        self.logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —à–∞–≥ action", step_id=step.get("id"))
        
        params = step.get("params", {})
        action = params.get("action")
        action_type = params.get("action_type")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
        if action_type == "update_context":
            updates = params.get("updates", {})
            for key, value in updates.items():
                # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∑–Ω–∞—á–µ–Ω–∏—è
                if isinstance(value, str):
                    resolved_value = self._resolve_template(value, context)
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                    if resolved_value.isdigit():
                        resolved_value = int(resolved_value)
                    context[key] = resolved_value
                else:
                    context[key] = value
            
            self.logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {updates}")
            return context
        
        if action:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞–≥–∏–Ω–∞
            self.logger.info(f"–í—ã–∑—ã–≤–∞—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è: {action}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            handler_context = context.copy()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —à–∞–≥–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            for key, value in params.items():
                if key != "action":  # action –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
                    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∑–Ω–∞—á–µ–Ω–∏—è
                    if isinstance(value, str):
                        resolved_value = self._resolve_template(value, context)
                        handler_context[key] = resolved_value
                    else:
                        handler_context[key] = value
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            if action in self.step_handlers:
                handler = self.step_handlers[action]
                try:
                    # –°–æ–∑–¥–∞–µ–º step –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π
                    action_step = {
                        "id": f"action_{action}",
                        "type": action,
                        "params": params
                    }
                    result = await handler(action_step, context)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    if isinstance(result, dict):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
                        context_key = params.get("context_key")
                        if context_key:
                            context[context_key] = result
                        else:
                            # –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
                            context.update(result)
                    
                    self.logger.info(f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ {action} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action}: {e}")
                    context["action_error"] = str(e)
                    context["action_success"] = False
            else:
                self.logger.error(f"‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{action}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                context["action_error"] = f"Handler for action '{action}' not found"
                context["action_success"] = False
        else:
            # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if params:
                context.update(params)
                self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {params}")
        
        return context
        
    async def _handle_input_text(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ 'input_text' - –æ–∂–∏–¥–∞–Ω–∏–µ –¢–ï–ö–°–¢–û–í–û–ì–û –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –æ—á–∏—â–∞–µ–º!
        """
        self.logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —à–∞–≥ input_text (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)", step_id=step.get("id"))
        
        params = step.get("params", {})
        variable = params.get("variable")  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–æ–¥–∞
        current_step_id = step.get("id")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–ï–ó –æ—á–∏—Å—Ç–∫–∏
        text_input = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º user_input (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if context.get("user_input") and not context["user_input"].startswith("/"):
            text_input = context["user_input"]
            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω user_input: {text_input}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º message_text (–µ—Å–ª–∏ –Ω–µ—Ç user_input)
        elif (context.get("message_text") and 
              not context["message_text"].startswith("/") and
              context["message_text"] != "/start"):
            text_input = context["message_text"]
            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω message_text: {text_input}")
        
        if text_input:
            # –ï–°–¢–¨ –¢–ï–ö–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            if variable:
                context[variable] = text_input
                self.logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª —Ç–µ–∫—Å—Ç –≤ {variable}: {text_input}")
            
            # –¢–µ–ø–µ—Ä—å –æ—á–∏—â–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.pop("user_input", None)
            context.pop("message_text", None)
            context["waiting_for_input"] = False
            context.pop("input_step_id", None)
            
            self.logger.info(f"‚úÖ input_text —à–∞–≥ {current_step_id} –∑–∞–≤–µ—Ä—à–µ–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: {text_input}")
            return context
        else:
            # –ù–ï–¢ –¢–ï–ö–°–¢–û–í–´–• –î–ê–ù–ù–´–• - –∂–¥—ë–º –≤–≤–æ–¥–∞
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –î–†–£–ì–û–ô —à–∞–≥
            current_input_step = context.get("input_step_id")
            if current_input_step and current_input_step != current_step_id:
                self.logger.info(f"üßπ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å —à–∞–≥–∞ {current_input_step} –Ω–∞ {current_step_id} - –æ—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ")
                context.pop("user_input", None)
                context.pop("callback_data", None)
                context.pop("message_text", None)
            
            self.logger.info(f"‚è±Ô∏è input_text –∂–¥—ë—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –Ω–∞ —à–∞–≥–µ {current_step_id}")
            
            context["waiting_for_input"] = True
            context["input_step_id"] = current_step_id
            
            raise StopExecution(f"–û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞ —à–∞–≥–µ {current_step_id}")
        
    async def _handle_input_button(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ 'input_button' - –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (callback_query).
        """
        self.logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —à–∞–≥ input_button (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏)", step_id=step.get("id"))
        
        params = step.get("params", {})
        variable = params.get("variable")  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–æ–¥–∞
        
        # üîç –û–¢–õ–ê–î–û–ß–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê
        self.logger.info(f"üîç –ü–û–õ–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ input_button: {context}")
        self.logger.info(f"üîç CALLBACK_DATA –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {context.get('callback_data')}")
        self.logger.info(f"üîç EVENT_TYPE –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {context.get('event_type')}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å callback_data –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞
        current_input_step = context.get("input_step_id")
        step_id = step.get("id")
        has_callback_data = context.get("callback_data")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π —à–∞–≥ –ò –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if current_input_step != step_id and not has_callback_data:
            self.logger.info(f"üßπ –ù–æ–≤—ã–π input_button —à–∞–≥ - –æ—á–∏—â–∞—é –¥–∞–Ω–Ω—ã–µ")
            context.pop("user_input", None)
            context.pop("callback_data", None)
            context.pop("message_text", None)
        
        # –ò—â–µ–º –¢–û–õ–¨–ö–û callback_data
        button_data = context.get("callback_data")
        
        if button_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            if variable:
                context[variable] = button_data
                self.logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª callback_data –≤ {variable}: {button_data}")
            
            # –û—á–∏—â–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.pop("callback_data", None)
            context["waiting_for_input"] = False
            context.pop("input_step_id", None)
            
            self.logger.info(f"‚úÖ input_button —à–∞–≥ {step_id} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–Ω–æ–ø–∫–æ–π: {button_data}")
            return context
        else:
            # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏ - –∂–¥—ë–º
            self.logger.info(f"‚è±Ô∏è input_button –∂–¥—ë—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —à–∞–≥–µ {step_id}")
            
            context["waiting_for_input"] = True
            context["input_step_id"] = step_id
            
            raise StopExecution(f"–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞ —à–∞–≥–µ {step_id}")
        
    async def _handle_input(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ 'input' - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –î–û –∏—Ö –æ—á–∏—Å—Ç–∫–∏!
        """
        self.logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —à–∞–≥ input", step_id=step.get("id"))
        
        params = step.get("params", {})
        waiting_for = params.get("waiting_for", "any")
        expected_values = params.get("expected_values", [])  # –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ callback
        variable = params.get("variable")  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–æ–¥–∞
        
        # üîç –û–¢–õ–ê–î–û–ß–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê
        self.logger.info(f"üîç –ü–û–õ–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢: {context}")
        self.logger.info(f"üîç WAITING_FOR: {waiting_for}")
        self.logger.info(f"üîç EXPECTED_VALUES: {expected_values}")
        self.logger.info(f"üîç CALLBACK_DATA –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {context.get('callback_data')}")
        self.logger.info(f"üîç EVENT_TYPE –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {context.get('event_type')}")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞
        has_callback = "callback_data" in context and context["callback_data"]
        has_message = "user_input" in context and context["user_input"]
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: /start –ù–ï —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –≤–≤–æ–¥–æ–º –¥–ª—è input —à–∞–≥–æ–≤
        has_text = ("message_text" in context and context["message_text"] and 
                   context["message_text"] != "/start" and 
                   not context["message_text"].startswith("/"))
        has_contact = "contact" in context and context["contact"]
        
        input_available = False
        input_value = None
        
        if waiting_for == "callback_query" and has_callback:
            callback_value = context["callback_data"]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º expected_values –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
            if expected_values and callback_value not in expected_values:
                self.logger.info(f"‚ö†Ô∏è Callback {callback_value} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö {expected_values}")
                # –ï—Å–ª–∏ callback –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
            else:
                input_available = True
                input_value = callback_value
                self.logger.info(f"‚úÖ Callback –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã: {input_value}")
        elif waiting_for == "contact" and has_contact:
            input_available = True
            input_value = context["contact"]
            self.logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {input_value}")
        elif waiting_for == "text" and (has_message or has_text):
            input_available = True
            input_value = context.get("user_input") or context.get("message_text")
            self.logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã: {input_value}")
        elif waiting_for == "message" and (has_message or has_text):
            input_available = True
            input_value = context.get("user_input") or context.get("message_text")
            self.logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã: {input_value}")
        elif waiting_for == "any" and (has_callback or has_message or has_text or has_contact):
            input_available = True
            input_value = context.get("callback_data") or context.get("user_input") or context.get("message_text") or context.get("contact")
            self.logger.info(f"‚úÖ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã: {input_value}")
        
        if input_available and input_value and (not isinstance(input_value, str) or not input_value.startswith("/")):
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∫–æ–º–∞–Ω–¥—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –≤–≤–æ–¥–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–æ–∫)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            if variable:
                context[variable] = input_value
                self.logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª –≤–≤–æ–¥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é {variable}: {input_value}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —É–¥–∞–ª—è–µ–º callback_data —Å—Ä–∞–∑—É - –æ–Ω –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è branch —à–∞–≥–æ–≤
            # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–æ–¥–∞
            context.pop("user_input", None)
            # –ù–ï —É–¥–∞–ª—è–µ–º callback_data! context.pop("callback_data", None) 
            
            # –ö–†–ò–¢–ò–ß–ù–û: –í–°–ï–ì–î–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º contact –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å!
            # –û–¢–õ–ê–î–û–ß–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            self.logger.info(f"üîç WAITING_FOR –ü–ê–†–ê–ú–ï–¢–†: {waiting_for}")
            self.logger.info(f"üîç INPUT_VALUE –¢–ò–ü: {type(input_value)}")
            self.logger.info(f"üîç INPUT_VALUE: {input_value}")
            
            if waiting_for == "contact" and isinstance(input_value, dict) and "contact" in context:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º contact –≤ –∫–æ—Ä–Ω–µ–≤–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ {contact.phone_number}
                contact_data = context["contact"]
                # –ù–ï —É–¥–∞–ª—è–µ–º! context.pop("contact", None)
                self.logger.info(f"üíæ –£–°–õ–û–í–ò–ï waiting_for=contact –í–´–ü–û–õ–ù–ï–ù–û - —Å–æ—Ö—Ä–∞–Ω—è—é contact: {contact_data}")
            elif isinstance(input_value, dict) and input_value.get("phone_number"):
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ input_value —Å–∞–º —è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ contact
                context["contact"] = input_value
                self.logger.info(f"üíæ –°–û–•–†–ê–ù–Ø–Æ input_value –∫–∞–∫ contact: {input_value}")
            
            if context.get("message_text") != "/start":
                context.pop("message_text", None)
            
            context["waiting_for_input"] = False
            context.pop("input_step_id", None)
            
            self.logger.info(f"‚úÖ Input —à–∞–≥ {step.get('id')} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –≤–≤–æ–¥–æ–º: {input_value}")
            self.logger.info(f"üîç callback_data —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤: {context.get('callback_data')}")
            if "contact" in context:
                self.logger.info(f"üîç contact —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {context.get('contact')}")
            else:
                self.logger.info(f"üö® contact –ù–ï –ù–ê–ô–î–ï–ù –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
            return context
        else:
            # –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π input —à–∞–≥
            current_input_step = context.get("input_step_id")
            if current_input_step != step.get("id"):
                # –≠—Ç–æ –Ω–æ–≤—ã–π input —à–∞–≥ - –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.logger.info(f"üßπ –û—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–≥–∞ {step.get('id')}")
                context.pop("user_input", None)
                # –ù–ï —É–¥–∞–ª—è–µ–º callback_data! context.pop("callback_data", None)
                context.pop("contact", None)
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: /start –ù–ï —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –≤–≤–æ–¥–æ–º –¥–ª—è input —à–∞–≥–æ–≤
                if context.get("message_text") != "/start":
                    context.pop("message_text", None)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            self.logger.info(f"‚è±Ô∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞ —à–∞–≥–µ {step.get('id')}")
            self.logger.info(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: callback={has_callback}, message={has_message}, text={has_text}, contact={has_contact}")
            
            context["waiting_for_input"] = True
            context["input_step_id"] = step.get("id")
            
            raise StopExecution(f"–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞ —à–∞–≥–µ {step.get('id')}")
        
    async def _handle_branch(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ª–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.
        
        Args:
            step: –î–∞–Ω–Ω—ã–µ —à–∞–≥–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        params = step.get("params", {})
        conditions = params.get("conditions", [])
        default_next_step_id = params.get("default_next_step")
        
        # üîç –û–¢–õ–ê–î–û–ß–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–°–ï–ì–û –ú–ê–°–°–ò–í–ê
        self.logger.info(f"üîç –í–ï–°–¨ –ú–ê–°–°–ò–í CONDITIONS: {conditions}")
        self.logger.info(f"üîç –ö–û–õ–ò–ß–ï–°–¢–í–û CONDITIONS: {len(conditions)}")
        self.logger.info(f"üîç DEFAULT_NEXT_STEP: {default_next_step_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ –ø–æ—Ä—è–¥–∫—É
        for condition_data in conditions:
            condition = condition_data.get("condition", "")
            next_step_id = condition_data.get("next_step")
            
            # üîç –û–¢–õ–ê–î–û–ß–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            self.logger.info(f"üîç –£–°–õ–û–í–ò–ï: {condition}")
            self.logger.info(f"üîç NEXT_STEP: {next_step_id}")
            self.logger.info(f"üîç RAW_CONDITION_DATA: {condition_data}")
            
            try:
                # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —É—Å–ª–æ–≤–∏—è
                if self._evaluate_branch_condition(condition, context):
                    context["next_step_override"] = next_step_id
                    self.logger.info(f"–£—Å–ª–æ–≤–∏–µ '{condition}' –∏—Å—Ç–∏–Ω–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥ –∫ {next_step_id}")
                    return context
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏—è '{condition}': {e}")
                continue
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º default
        if default_next_step_id:
            context["next_step_override"] = default_next_step_id
            self.logger.info(f"–í—Å–µ —É—Å–ª–æ–≤–∏—è –ª–æ–∂–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥ –∫ default: {default_next_step_id}")
        
        return context
    
    def _evaluate_branch_condition(self, condition: str, context: Dict[str, Any]) -> bool:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —É—Å–ª–æ–≤–∏–µ –¥–ª—è branch —à–∞–≥–∞.
        
        Args:
            condition: –£—Å–ª–æ–≤–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "callback_data == 'value'" –∏–ª–∏ "context.counter > 10")
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            bool: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏—è
        """
        if not condition:
            return False
        
        try:
            # –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.logger.info(f"üîç EVALUATE CONDITION: {condition}")
            self.logger.info(f"üîç CONTEXT KEYS: {list(context.keys())}")
            if "callback_data" in context:
                self.logger.info(f"üîç CALLBACK_DATA VALUE: {context['callback_data']}")
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            resolved_condition = condition
            
            # 1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º context.field –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è
            import re
            context_refs = re.findall(r'context\\.(\w+)', condition)
            for field in context_refs:
                if field in context:
                    value = context[field]
                    if isinstance(value, str):
                        resolved_condition = resolved_condition.replace(f'context.{field}', f"'{value}'")
                    else:
                        resolved_condition = resolved_condition.replace(f'context.{field}', str(value))
            
            # 2. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä callback_data, user_input)
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (–Ω–µ context.field)
            simple_vars = re.findall(r'\b([a-zA-Z_][a-zA-Z0-9_]*)\b', resolved_condition)
            self.logger.info(f"üîç SIMPLE VARS FOUND: {simple_vars}")
            
            for var in simple_vars:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞ Python
                if var in ['True', 'False', 'None', 'and', 'or', 'not', 'in', 'is']:
                    continue
                    
                # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                if var in context:
                    value = context[var]
                    self.logger.info(f"üîç REPLACING {var} WITH {repr(value)}")
                    if isinstance(value, str):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º repr –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–≤—ã—á–µ–∫
                        resolved_condition = re.sub(rf'\b{var}\b', repr(value), resolved_condition)
                    else:
                        resolved_condition = re.sub(rf'\b{var}\b', str(value), resolved_condition)
                else:
                    self.logger.warning(f"üîç VARIABLE {var} NOT FOUND IN CONTEXT")
            
            self.logger.info(f"üîç RESOLVED CONDITION: {resolved_condition}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å–ª–æ–≤–∏–µ –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            # –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –ª–∏—Ç–µ—Ä–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            result = eval(resolved_condition, {"__builtins__": {}}, {})
            self.logger.debug(f"–£—Å–ª–æ–≤–∏–µ '{condition}' -> '{resolved_condition}' -> {result}")
            self.logger.info(f"üîç CONDITION RESULT: {result}")
            return bool(result)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏—è '{condition}': {e}")
            return False
    
    async def _handle_switch_scenario(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
        
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π!
        """
        self.logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è", step_id=step.get("id"))
        
        resolved_scenario_id = None
        
        try:
            params = step.get("params", {})
            scenario_id = params.get("scenario_id")
            preserve_context = params.get("preserve_context", True)
            context_mapping = params.get("context_mapping", {})
            
            if not scenario_id:
                raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω scenario_id –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ scenario_id
            resolved_scenario_id = self._resolve_template(scenario_id, context)
            
            self.logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏–π: {resolved_scenario_id}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            if preserve_context:
                # –°–û–•–†–ê–ù–Ø–ï–ú –í–ï–°–¨ –ö–û–ù–¢–ï–ö–°–¢
                new_context = context.copy()
                
                # –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è
                new_context.pop("user_input", None)
                new_context.pop("callback_data", None)
                new_context.pop("waiting_for_input", None)
                new_context.pop("input_step_id", None)
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: /start –ù–ï —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –≤–≤–æ–¥–æ–º –¥–ª—è input —à–∞–≥–æ–≤
                if new_context.get("message_text") != "/start":
                    new_context.pop("message_text", None)
                
                self.logger.info("üßπ –û—á–∏—Å—Ç–∏–ª —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è")
            else:
                # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
                new_context = {}
                base_fields = ["user_id", "chat_id", "agent_id", "channel_id"]
                for field in base_fields:
                    if field in context:
                        new_context[field] = context[field]
            
            # –ï—Å–ª–∏ user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –µ—Å—Ç—å chat_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∫–∞–∫ user_id
            if "user_id" not in new_context or new_context.get("user_id") is None:
                if "chat_id" in new_context and new_context["chat_id"] is not None:
                    new_context["user_id"] = new_context["chat_id"]
                    
            # –ü—Ä–∏–º–µ–Ω—è–µ–º mapping
            for target_key, source_template in context_mapping.items():
                resolved_value = self._resolve_template(str(source_template), context)
                new_context[target_key] = resolved_value
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
            new_context.update({
                "switched_from_scenario": context.get("scenario_id"),
                "switch_reason": "engine_switch",
                "scenario_switched": True,
                "switched_to": resolved_scenario_id,
                "switch_successful": True,
            })
            
            # üî• –ö–†–ò–¢–ò–ß–ù–û: –†–ï–ê–õ–¨–ù–û –í–´–ü–û–õ–ù–Ø–ï–ú –ù–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô!
            self.logger.info(f"üöÄ –ó–ê–ü–£–°–ö–ê–Æ –ù–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô: {resolved_scenario_id}")
            final_context = await self.execute_scenario(resolved_scenario_id, new_context)
            
            self.logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {resolved_scenario_id} –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
            
            return final_context
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–∞ {resolved_scenario_id}: {e}")
            context.update({
                "scenario_switched": False,
                "switch_error": str(e),
                "switch_successful": False
            })
            return context
    
    def _resolve_template(self, template: str, context: Dict[str, Any]) -> str:
        """
        –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
        - {variable} - –ø—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        - {{variable}} - Django/Jinja2 —Å—Ç–∏–ª—å
        - {user.name} - –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        - {items[0]} - —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–æ–≤
        - {current_timestamp} - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        """
        return template_resolver.resolve(template, context)
        
    def _resolve_condition(self, condition: str, context: Dict[str, Any]) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —É—Å–ª–æ–≤–∏–∏."""
        if not condition:
            return "False"
            
        result = condition
        for key, value in context.items():
            if isinstance(value, str):
                result = result.replace(key, f"'{value}'")
            else:
                result = result.replace(key, str(value))
                
        return result
    
    async def _handle_log_message(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
        
        Args:
            step: –î–∞–Ω–Ω—ã–µ —à–∞–≥–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        params = step.get("params", {})
        message_template = params.get("message", "")
        level = params.get("level", "INFO").upper()
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
        resolved_message = self._resolve_template(message_template, context)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —É—Ä–æ–≤–Ω–µ–º
        if level == "DEBUG":
            self.logger.debug(resolved_message)
        elif level == "INFO":
            self.logger.info(resolved_message)
        elif level == "WARNING":
            self.logger.warning(resolved_message)
        elif level == "ERROR":
            self.logger.error(resolved_message)
        elif level == "CRITICAL":
            self.logger.critical(resolved_message)
        else:
            self.logger.info(f"({level}) {resolved_message}")
            
        return context
    
    def get_registered_handlers(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        return list(self.step_handlers.keys())
        
    def get_registered_plugins(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤."""
        return list(self.plugins.keys())
    
    async def call_handler(self, handler_name: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –∏–º–µ–Ω–∏.
        
        Args:
            handler_name: –ò–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        if handler_name not in self.step_handlers:
            raise ValueError(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ {handler_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        handler = self.step_handlers[handler_name]
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥ –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        fake_step = {
            "id": f"call_{handler_name}",
            "type": handler_name,
            "params": context.get("handler_params", {})
        }
        
        return await handler(fake_step, context)
    
    # === –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –•–ï–ù–î–õ–ï–†–´ –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
    
    async def _handle_extract_telegram_context(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram update."""
        try:
            telegram_update = context.get("telegram_update", {})
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            telegram_data = {
                "type": "unknown",
                "user_id": None,
                "chat_id": None,
                "username": None,
                "first_name": None,
                "last_name": None,
                "text": None,
                "callback_data": None
            }
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            if "message" in telegram_update:
                message = telegram_update["message"]
                telegram_data["type"] = "message"
                telegram_data["text"] = message.get("text", "")
                
                if "from" in message:
                    user = message["from"]
                    telegram_data["user_id"] = str(user.get("id", ""))
                    telegram_data["username"] = user.get("username", "")
                    telegram_data["first_name"] = user.get("first_name", "")
                    telegram_data["last_name"] = user.get("last_name", "")
                
                if "chat" in message:
                    telegram_data["chat_id"] = str(message["chat"].get("id", ""))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
            elif "callback_query" in telegram_update:
                callback = telegram_update["callback_query"]
                telegram_data["type"] = "callback_query"
                telegram_data["callback_data"] = callback.get("data", "")
                
                if "from" in callback:
                    user = callback["from"]
                    telegram_data["user_id"] = str(user.get("id", ""))
                    telegram_data["username"] = user.get("username", "")
                    telegram_data["first_name"] = user.get("first_name", "")
                    telegram_data["last_name"] = user.get("last_name", "")
                
                if "message" in callback and "chat" in callback["message"]:
                    telegram_data["chat_id"] = str(callback["message"]["chat"].get("id", ""))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_var = step.get("params", {}).get("output_var", "telegram_data")
            context[output_var] = telegram_data
            
            self.logger.info(f"‚úÖ Telegram –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω: {telegram_data['type']}")
            return context
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ extract_telegram_context: {e}")
            context["__step_error__"] = str(e)
            return context
    
    async def _handle_validate_field(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            params = step.get("params", {})
            field = params.get("field", "")
            value = params.get("value", "")
            validation = params.get("validation", "required")
            
            result = {"valid": True, "error": ""}
            
            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if validation == "required" and not value.strip():
                result = {"valid": False, "error": "–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"}
            
            elif validation == "phone":
                import re
                phone_pattern = r'^[\+]?[1-9][\d]{0,15}$'
                if not re.match(phone_pattern, value.replace(" ", "").replace("-", "")):
                    result = {"valid": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"}
            
            elif validation == "email":
                import re
                email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
                if not re.match(email_pattern, value):
                    result = {"valid": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"}
            
            elif validation == "optional":
                result = {"valid": True, "error": ""}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_var = params.get("output_var", "validation_result")
            context[output_var] = result
            
            self.logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è {field}: {result['valid']}")
            return context
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ validate_field: {e}")
            context["__step_error__"] = str(e)
            return context
    
    async def _handle_increment(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞ 1."""
        try:
            params = step.get("params", {})
            variable = params.get("variable", "")
            
            if variable in context:
                current_value = context[variable]
                if isinstance(current_value, (int, float)):
                    new_value = current_value + 1
                else:
                    new_value = 1
            else:
                new_value = 1
            
            context[variable] = new_value
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ output_var –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            output_var = params.get("output_var")
            if output_var:
                context[output_var] = new_value
            
            self.logger.info(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {variable} —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ {new_value}")
            return context
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ increment: {e}")
            context["__step_error__"] = str(e)
            return context
    
    async def _handle_save_to_object(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç."""
        try:
            params = step.get("params", {})
            object_name = params.get("object", "")
            key = params.get("key", "")
            value = params.get("value", "")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if object_name not in context:
                context[object_name] = {}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            context[object_name][key] = value
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ output_var –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            output_var = params.get("output_var")
            if output_var:
                context[output_var] = {"success": True}
            
            self.logger.info(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {object_name}.{key}")
            return context
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ save_to_object: {e}")
            context["__step_error__"] = str(e)
            return context

    async def _handle_channel_action(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞–Ω–∞–ª–∞–º–∏.
        
        –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ù–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞–µ—Ç ChannelManager!
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
        - send_message: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        - send_buttons: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏  
        - edit_message: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        –ü—Ä–∏–º–µ—Ä —à–∞–≥–∞:
        {
            "type": "channel_action",
            "params": {
                "action": "send_message",
                "chat_id": "{chat_id}",
                "text": "–ü—Ä–∏–≤–µ—Ç!",
                "parse_mode": "HTML"
            }
        }
        """
        try:
            params = step.get("params", {})
            action = params.get("action", "")
            
            if not action:
                raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ (action) –¥–ª—è channel_action")
            
            # –ü–æ–ª—É—á–∞–µ–º channel_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            channel_id = context.get("channel_id")
            if not channel_id:
                raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω channel_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
            
            # –ü–æ–ª—É—á–∞–µ–º ChannelManager –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            from app.simple_main import get_channel_manager
            channel_manager = get_channel_manager()
            
            if not channel_manager:
                raise ValueError("ChannelManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            resolved_params = {}
            for key, value in params.items():
                if key != "action":  # action –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º
                    if isinstance(value, str):
                        resolved_params[key] = self._resolve_template(value, context)
                    else:
                        resolved_params[key] = value
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ ChannelManager
            result = None
            
            if action == "send_message":
                chat_id = resolved_params.get("chat_id")
                text = resolved_params.get("text")
                if not chat_id or not text:
                    raise ValueError("–î–ª—è send_message —Ç—Ä–µ–±—É—é—Ç—Å—è chat_id –∏ text")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                kwargs = {k: v for k, v in resolved_params.items() 
                         if k not in ["chat_id", "text"]}
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥ - –ø–∞—É–∑—ã —Ç–µ–ø–µ—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ
                result = await channel_manager.send_message(channel_id, chat_id, text, **kwargs)
                
            elif action == "send_buttons":
                chat_id = resolved_params.get("chat_id")
                text = resolved_params.get("text")
                buttons = resolved_params.get("buttons")
                if not chat_id or not text or not buttons:
                    raise ValueError("–î–ª—è send_buttons —Ç—Ä–µ–±—É—é—Ç—Å—è chat_id, text –∏ buttons")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                kwargs = {k: v for k, v in resolved_params.items() 
                         if k not in ["chat_id", "text", "buttons"]}
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥ - –ø–∞—É–∑—ã —Ç–µ–ø–µ—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ
                result = await channel_manager.send_buttons(channel_id, chat_id, text, buttons, **kwargs)
                
            elif action == "edit_message":
                chat_id = resolved_params.get("chat_id")
                message_id = resolved_params.get("message_id")
                text = resolved_params.get("text")
                if not chat_id or not message_id or not text:
                    raise ValueError("–î–ª—è edit_message —Ç—Ä–µ–±—É—é—Ç—Å—è chat_id, message_id –∏ text")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                kwargs = {k: v for k, v in resolved_params.items() 
                         if k not in ["chat_id", "message_id", "text"]}
                
                result = await channel_manager.edit_message(channel_id, chat_id, int(message_id), text, **kwargs)
                
            elif action == "forward_message":
                from_chat_id = resolved_params.get("from_chat_id")
                to_chat_id = resolved_params.get("to_chat_id") or resolved_params.get("chat_id")
                message_id = resolved_params.get("message_id")
                if not from_chat_id or not to_chat_id or not message_id:
                    raise ValueError("–î–ª—è forward_message —Ç—Ä–µ–±—É—é—Ç—Å—è from_chat_id, to_chat_id –∏ message_id")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                kwargs = {k: v for k, v in resolved_params.items() 
                         if k not in ["from_chat_id", "to_chat_id", "chat_id", "message_id"]}
                
                result = await channel_manager.forward_message(channel_id, to_chat_id, from_chat_id, int(message_id), **kwargs)
                
            elif action == "copy_message":
                from_chat_id = resolved_params.get("from_chat_id")
                to_chat_id = resolved_params.get("to_chat_id") or resolved_params.get("chat_id")
                message_id = resolved_params.get("message_id")
                if not from_chat_id or not to_chat_id or not message_id:
                    raise ValueError("–î–ª—è copy_message —Ç—Ä–µ–±—É—é—Ç—Å—è from_chat_id, to_chat_id –∏ message_id")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                kwargs = {k: v for k, v in resolved_params.items() 
                         if k not in ["from_chat_id", "to_chat_id", "chat_id", "message_id"]}
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–∞—É–∑–æ–π –¥–ª—è –ª—É—á—à–µ–≥–æ UX (–æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤–∏–¥–µ–æ)
                delay_seconds = kwargs.pop("delay_seconds", 1.0)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –≤–∏–¥–µ–æ  
                result = await channel_manager.copy_message(channel_id, to_chat_id, from_chat_id, message_id, **kwargs)
                
            elif action == "send_document":
                chat_id = resolved_params.get("chat_id")
                document_path = resolved_params.get("document_path")
                if not chat_id or not document_path:
                    raise ValueError("–î–ª—è send_document —Ç—Ä–µ–±—É—é—Ç—Å—è chat_id –∏ document_path")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                kwargs = {k: v for k, v in resolved_params.items() 
                         if k not in ["chat_id", "document_path"]}
                
                result = await channel_manager.send_document(channel_id, chat_id, document_path, **kwargs)
                
            elif action == "edit_message":
                chat_id = resolved_params.get("chat_id")
                message_id = resolved_params.get("message_id")
                text = resolved_params.get("text")
                if not chat_id or not message_id or not text:
                    raise ValueError("–î–ª—è edit_message —Ç—Ä–µ–±—É—é—Ç—Å—è chat_id, message_id –∏ text")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                kwargs = {k: v for k, v in resolved_params.items() 
                         if k not in ["chat_id", "message_id", "text"]}
                
                result = await channel_manager.edit_message(channel_id, chat_id, message_id, text, **kwargs)
            
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context["channel_action_result"] = result
            context["channel_action_success"] = result.get("success", False)
            
            return context

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è channel_action: {e}")
            context["channel_action_result"] = {"success": False, "error": str(e)}
            context["channel_action_success"] = False
            return context

    async def _handle_conditional_execute(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –£—Å–ª–æ–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.
        
        Args:
            step: –î–∞–Ω–Ω—ã–µ —à–∞–≥–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
                - condition: –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                - true_action: –®–∞–≥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ
                - false_action: –®–∞–≥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –ª–æ–∂–Ω–æ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        """
        params = step.get("params", {})
        condition = params.get("condition", "")
        true_action = params.get("true_action")
        false_action = params.get("false_action")
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —É—Å–ª–æ–≤–∏–µ
        condition_result = self._evaluate_branch_condition(condition, context)
        self.logger.info(f"üîç –£—Å–ª–æ–≤–∏–µ '{condition}' = {condition_result}")
        
        # –í—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if condition_result and true_action:
            self.logger.info("‚úÖ –í—ã–ø–æ–ª–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è")
            selected_action = true_action
        elif not condition_result and false_action:
            self.logger.info("‚ùå –í—ã–ø–æ–ª–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ª–æ–∂–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è")
            selected_action = false_action
        else:
            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É—Å–ª–æ–≤–∏—è")
            return context
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        if isinstance(selected_action, dict):
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à–∞–≥
            return await self.execute_step(selected_action, context)
        elif isinstance(selected_action, str):
            # –ò—â–µ–º —à–∞–≥ –ø–æ ID
            scenario_data = context.get("_scenario_data", {})
            steps = scenario_data.get("steps", [])
            
            target_step = None
            for s in steps:
                if s.get("id") == selected_action:
                    target_step = s
                    break
                    
            if target_step:
                return await self.execute_step(target_step, context)
            else:
                self.logger.error(f"‚ùå –®–∞–≥ '{selected_action}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return context
        else:
            self.logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è: {selected_action}")
            return context


class StopExecution(Exception):
    """
    –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è 
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ —à–∞–≥–µ 'input').
    """
    pass

# ===== –î–ï–ú–û –°–¶–ï–ù–ê–†–ò–ô =====

DEMO_SCENARIO = {
    "scenario_id": "demo_test",
    "name": "–î–µ–º–æ-—Ç–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã",
    "steps": {
        "start": {
            "type": "menu",
            "text": "üéØ **–î–µ–º–æ –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:",
            "choices": {
                "test_message": {
                    "text": "üìù –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    "next_step": "show_message"
                },
                "test_llm": {
                    "text": "ü§ñ –¢–µ—Å—Ç LLM",
                    "next_step": "llm_request"
                },
                "test_context": {
                    "text": "üìä –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
                    "next_step": "context_demo"
                },
                "exit": {
                    "text": "üö™ –í—ã—Ö–æ–¥",
                    "next_step": "end"
                }
            }
        },
        "show_message": {
            "type": "message",
            "text": "‚úÖ –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n–í–∞—à –≤—ã–±–æ—Ä –±—ã–ª: {last_choice_text}",
            "next_step": "back_to_menu"
        },
        "llm_request": {
            "type": "llm",
            "prompt": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ—Å—Ç LLM. –°–∫–∞–∂–∏ —á—Ç–æ-—Ç–æ —É–º–Ω–æ–µ!",
            "next_step": "back_to_menu"
        },
        "context_demo": {
            "type": "message", 
            "text": "üìä **–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n\nUser ID: {user_id}\n–¢–µ–∫—É—â–∏–π —à–∞–≥: {current_step}\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä: {last_choice}",
            "next_step": "back_to_menu"
        },
        "back_to_menu": {
            "type": "menu",
            "text": "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            "choices": {
                "back": {
                    "text": "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                    "next_step": "start"
                },
                "exit": {
                    "text": "üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    "next_step": "end"
                }
            }
        },
        "end": {
            "type": "end",
            "text": "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã."
        }
    }
}

# ===== –î–ï–ú–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï =====

async def demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    engine = SimpleScenarioEngine()
    engine.load_scenario("demo_test", DEMO_SCENARIO)
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = "demo_user"
    scenario_id = "demo_test"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
    
    # –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è
    result = await engine.process_event(user_id, Event("start", ""), scenario_id)
    print(f"1. {result.response}")
    print(f"   –ö–Ω–æ–ø–∫–∏: {[b['text'] for b in result.buttons]}")
    
    # –í—ã–±–æ—Ä LLM —Ç–µ—Å—Ç–∞
    result = await engine.process_event(user_id, Event("callback", "test_llm"), scenario_id)
    print(f"2. {result.response}")
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    result = await engine.process_event(user_id, Event("callback", "back"), scenario_id)
    print(f"3. {result.response}")
    print(f"   –ö–Ω–æ–ø–∫–∏: {[b['text'] for b in result.buttons]}")
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    result = await engine.process_event(user_id, Event("callback", "exit"), scenario_id)
    print(f"4. {result.response}")


# ===== –°–û–ó–î–ê–ù–ò–ï –î–í–ò–ñ–ö–ê –° –ü–õ–ê–ì–ò–ù–ê–ú–ò =====

async def create_engine() -> SimpleScenarioEngine:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç SimpleScenarioEngine —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏.
    
    –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ö–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ —Å–æ–∑–¥–∞–µ—Ç –ù–û–í–´–ô –¥–≤–∏–∂–æ–∫!
    –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–∞–∂–¥–æ–º—É –∫–∞–Ω–∞–ª—É –∏–º–µ—Ç—å —Å–≤–æ–π –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫.
    
    Returns:
        SimpleScenarioEngine: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏
    """
    from loguru import logger
    
    logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ SimpleScenarioEngine...")
    
    # –°–æ–∑–¥–∞–µ–º –ù–û–í–´–ô –¥–≤–∏–∂–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
    engine = SimpleScenarioEngine()
    
    # === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–õ–ê–ì–ò–ù–û–í ===
    
    # === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–õ–ê–ì–ò–ù–û–í (–ë–ï–ó –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò) ===
    
    plugins_to_initialize = []
    
    try:
        # 1. MongoDB Plugin - –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è MongoDB Plugin...")
        from app.plugins.mongo_plugin import MongoPlugin
        mongo_plugin = MongoPlugin()
        engine.register_plugin(mongo_plugin)
        plugins_to_initialize.append(mongo_plugin)
        logger.info("‚úÖ MongoDB Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è MongoDB Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # TELEGRAM –ü–õ–ê–ì–ò–ù –£–î–ê–õ–ï–ù - –ù–ï –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò!
    # Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ API
    
    try:
        # 2. LLM Plugin - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
        logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SimpleLLM Plugin...")
        from app.plugins.simple_llm_plugin import SimpleLLMPlugin
        llm_plugin = SimpleLLMPlugin()
        engine.register_plugin(llm_plugin)
        plugins_to_initialize.append(llm_plugin)
        logger.info("‚úÖ SimpleLLM Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è SimpleLLM Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    try:
        # 3. RAG Plugin - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
        logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SimpleRAG Plugin...")
        from app.plugins.simple_rag_plugin import SimpleRAGPlugin
        rag_plugin = SimpleRAGPlugin()
        engine.register_plugin(rag_plugin)
        plugins_to_initialize.append(rag_plugin)
        logger.info("‚úÖ SimpleRAG Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è SimpleRAG Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    try:
        # 4. Scheduler Plugin - –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
        logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SimpleScheduler Plugin...")
        from app.plugins.simple_scheduler_plugin import SimpleSchedulerPlugin
        scheduler_plugin = SimpleSchedulerPlugin()
        engine.register_plugin(scheduler_plugin)
        plugins_to_initialize.append(scheduler_plugin)
        logger.info("‚úÖ SimpleScheduler Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è SimpleScheduler Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    try:
        # 5. HTTP Plugin - –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
        logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SimpleHTTP Plugin...")
        from app.plugins.simple_http_plugin import SimpleHTTPPlugin
        http_plugin = SimpleHTTPPlugin()
        engine.register_plugin(http_plugin)
        plugins_to_initialize.append(http_plugin)
        logger.info("‚úÖ SimpleHTTP Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è SimpleHTTP Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    try:
        # 6. AmoCRM Plugin - –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AmoCRM
        logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SimpleAmoCRM Plugin...")
        from app.plugins.simple_amocrm_plugin import SimpleAmoCRMPlugin
        amocrm_plugin = SimpleAmoCRMPlugin()
        engine.register_plugin(amocrm_plugin)
        plugins_to_initialize.append(amocrm_plugin)
        logger.info("‚úÖ SimpleAmoCRM Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è SimpleAmoCRM Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    try:
        # 7. AmoCRM Companies Plugin - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏
        logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SimpleAmoCRM Companies Plugin...")
        from app.plugins.simple_amocrm_companies import SimpleAmoCRMCompaniesPlugin
        amocrm_companies_plugin = SimpleAmoCRMCompaniesPlugin()
        engine.register_plugin(amocrm_companies_plugin)
        plugins_to_initialize.append(amocrm_companies_plugin)
        logger.info("‚úÖ SimpleAmoCRM Companies Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è SimpleAmoCRM Companies Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    try:
        # 8. AmoCRM Tasks Plugin - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ —Å–æ–±—ã—Ç–∏—è–º–∏
        logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SimpleAmoCRM Tasks Plugin...")
        from app.plugins.simple_amocrm_tasks import SimpleAmoCRMTasksPlugin
        amocrm_tasks_plugin = SimpleAmoCRMTasksPlugin()
        engine.register_plugin(amocrm_tasks_plugin)
        plugins_to_initialize.append(amocrm_tasks_plugin)
        logger.info("‚úÖ SimpleAmoCRM Tasks Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è SimpleAmoCRM Tasks Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    try:
        # 9. AmoCRM Advanced Plugin - –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SimpleAmoCRM Advanced Plugin...")
        from app.plugins.simple_amocrm_advanced import SimpleAmoCRMAdvancedPlugin
        amocrm_advanced_plugin = SimpleAmoCRMAdvancedPlugin()
        engine.register_plugin(amocrm_advanced_plugin)
        plugins_to_initialize.append(amocrm_advanced_plugin)
        logger.info("‚úÖ SimpleAmoCRM Advanced Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è SimpleAmoCRM Advanced Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    try:
        # 10. AmoCRM Admin Plugin - –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SimpleAmoCRM Admin Plugin...")
        from app.plugins.simple_amocrm_admin import SimpleAmoCRMAdminPlugin
        amocrm_admin_plugin = SimpleAmoCRMAdminPlugin()
        engine.register_plugin(amocrm_admin_plugin)
        plugins_to_initialize.append(amocrm_admin_plugin)
        logger.info("‚úÖ SimpleAmoCRM Admin Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è SimpleAmoCRM Admin Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    try:
        # 11. PDF Plugin - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SimplePDF Plugin...")
        from app.plugins.simple_pdf_plugin import SimplePDFPlugin
        pdf_plugin = SimplePDFPlugin()
        engine.register_plugin(pdf_plugin)
        plugins_to_initialize.append(pdf_plugin)
        logger.info("‚úÖ SimplePDF Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è SimplePDF Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    try:
        # 12. Routing Plugin - –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SimpleRouting Plugin...")
        from app.plugins.simple_routing_plugin import SimpleRoutingPlugin
        routing_plugin = SimpleRoutingPlugin()
        engine.register_plugin(routing_plugin)
        plugins_to_initialize.append(routing_plugin)
        logger.info("‚úÖ SimpleRouting Plugin –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è SimpleRouting Plugin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–õ–ê–ì–ò–ù–û–í (–ü–û–°–õ–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò) ===
    
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤...")
    
    for plugin in plugins_to_initialize:
        try:
            logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {plugin.name}...")
            await plugin.initialize()
            logger.info(f"‚úÖ {plugin.name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {plugin.name}: {e}")
    
    # === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø CHANNEL MANAGER ===
    
    logger.info("üîß –î–≤–∏–∂–æ–∫ –≥–æ—Ç–æ–≤ –ë–ï–ó –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–∞–Ω–∞–ª–∞–º (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)")
    
    # === –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø ===
    
    logger.info("üéØ SimpleScenarioEngine –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    logger.info(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã: {engine.get_registered_plugins()}")
    logger.info(f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {len(engine.get_registered_handlers())}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
    health = await engine.healthcheck()
    if health:
        logger.info("‚úÖ –í—Å–µ –ø–ª–∞–≥–∏–Ω—ã –∑–¥–æ—Ä–æ–≤—ã")
    else:
        logger.info("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞–≥–∏–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    
    return engine


if __name__ == "__main__":
    asyncio.run(demo()) 