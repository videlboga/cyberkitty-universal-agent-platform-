#!/usr/bin/env python3
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: NetworkTool

–ü–†–û–ë–õ–ï–ú–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ 'get_info' ‚Üí –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
"""

import asyncio

async def test_network_tool_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è NetworkTool"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: NetworkTool")
    print("=" * 50)
    
    from kittycore.tools.network_tool import NetworkTool
    tool = NetworkTool()
    
    # –¢–µ—Å—Ç 1: HTTP GET –∑–∞–ø—Ä–æ—Å
    print("\nüåê –¢–µ—Å—Ç 1: HTTP GET –∑–∞–ø—Ä–æ—Å")
    result1 = await tool.execute(
        action="get_request",
        url="https://httpbin.org/get"
    )
    print(f"‚úÖ GET –∑–∞–ø—Ä–æ—Å: success={result1.success}")
    if result1.data:
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {len(str(result1.data))} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìã –°—Ç–∞—Ç—É—Å: {result1.data.get('status_code')}")
    if result1.error:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result1.error}")
    
    # –¢–µ—Å—Ç 2: Ping —Ö–æ—Å—Ç–∞
    print("\nüèì –¢–µ—Å—Ç 2: Ping —Ö–æ—Å—Ç–∞")
    result2 = await tool.execute(
        action="ping_host",
        host="8.8.8.8",
        count=2
    )
    print(f"‚úÖ Ping: success={result2.success}")
    if result2.data:
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {len(str(result2.data))} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìã Ping —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result2.data}")
    if result2.error:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result2.error}")
    
    # –¢–µ—Å—Ç 3: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞
    print("\nüîç –¢–µ—Å—Ç 3: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞")
    result3 = await tool.execute(
        action="scan_port",
        host="8.8.8.8",
        port=53,
        timeout=3.0
    )
    print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: success={result3.success}")
    if result3.data:
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {len(str(result3.data))} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìã –ü–æ—Ä—Ç 53: {result3.data}")
    if result3.error:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result3.error}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —É—Å–ø–µ—Ö
    successful_tests = sum([result1.success, result2.success, result3.success])
    if successful_tests >= 2:
        print(f"\nüéâ NetworkTool –ò–°–ü–†–ê–í–õ–ï–ù!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {successful_tests}/3 —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
        return True
    else:
        print(f"\n‚ö†Ô∏è NetworkTool —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {successful_tests}/3 —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
        return False

if __name__ == "__main__":
    asyncio.run(test_network_tool_fix()) 