#!/usr/bin/env python3
"""
üîÑ –¢–µ—Å—Ç –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —É–ª—É—á—à–∞—Ç—å –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∏–¥–±–µ–∫
–≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import asyncio
import os
from pathlib import Path

from kittycore.core.obsidian_orchestrator import ObsidianOrchestrator


async def test_iterative_improvement():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤"""
    
    print("üîÑ –¢–ï–°–¢ –ò–¢–ï–†–ê–¢–ò–í–ù–û–ì–û –£–õ–£–ß–®–ï–ù–ò–Ø –ê–ì–ï–ù–¢–û–í")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    vault_path = "./test_vault_iterative"
    orchestrator = ObsidianOrchestrator(vault_path)
    
    # –ó–∞–¥–∞—á–∞ –∫–æ—Ç–æ—Ä–∞—è –æ–±—ã—á–Ω–æ —Å–æ–∑–¥–∞—ë—Ç –æ—Ç—á—ë—Ç –≤–º–µ—Å—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    task = "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª —Å —Ä–∞—Å—á—ë—Ç–æ–º –ø–ª–æ—â–∞–¥–∏ –∫–æ—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ A = œÄ * r¬≤"
    
    print(f"üìã –ó–∞–¥–∞—á–∞: {task}")
    print()
    
    try:
        # –†–µ—à–∞–µ–º –∑–∞–¥–∞—á—É
        result = await orchestrator.solve_task(task)
        
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
        print(f"üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(result.get('files_created', []))}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        files_created = result.get('files_created', [])
        for file_path in files_created:
            if os.path.exists(file_path):
                print(f"üìÑ –§–∞–π–ª: {file_path}")
                
                # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                print(f"üìù –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ï –æ—Ç—á—ë—Ç
                report_indicators = [
                    "–æ—Ç—á—ë—Ç", "–∞–Ω–∞–ª–∏–∑", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–≤—ã–≤–æ–¥—ã",
                    "–∑–∞–∫–ª—é—á–µ–Ω–∏–µ", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–æ–±–∑–æ—Ä"
                ]
                
                is_report = any(indicator in content.lower() for indicator in report_indicators)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                content_indicators = [
                    "œÄ", "3.14", "math", "–ø–ª–æ—â–∞–¥—å", "—Ñ–æ—Ä–º—É–ª–∞", "=", "*"
                ]
                
                has_real_content = any(indicator in content.lower() for indicator in content_indicators)
                
                if is_report:
                    print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç—á—ë—Ç –≤–º–µ—Å—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!")
                elif has_real_content:
                    print("‚úÖ –£–°–ü–ï–•: –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!")
                else:
                    print("‚ö†Ô∏è –ù–ï–û–ü–†–ï–î–ï–õ–Å–ù–ù–û: –°–ª–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                print(f"üìñ –ü—Ä–µ–≤—å—é: {content[:200]}...")
                print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö
        execution_result = result.get('execution_result', {})
        step_results = execution_result.get('step_results', {})
        
        improvements_found = False
        for step_id, step_result in step_results.items():
            if step_result.get('iteratively_improved', False):
                improvements_found = True
                attempts = step_result.get('improvement_attempts', 0)
                original_score = step_result.get('original_validation', {}).get('score', 0)
                final_validation = step_result.get('validation', {})
                final_score = final_validation.get('score', 0)
                
                print(f"üîÑ –ò–¢–ï–†–ê–¢–ò–í–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï (—à–∞–≥ {step_id}):")
                print(f"   üìà –ü–æ–ø—ã—Ç–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è: {attempts}")
                print(f"   üìä –û—Ü–µ–Ω–∫–∞: {original_score:.1f} ‚Üí {final_score:.1f}")
                print(f"   ‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ: {final_score - original_score:+.1f}")
                print()
        
        if not improvements_found:
            print("‚ÑπÔ∏è –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∏—Å—å (—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É —Ö–æ—Ä–æ—à–∏–π)")
        
        print("üéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ê:")
        if result.get('status') == 'completed' and files_created:
            print("‚úÖ –¢–µ—Å—Ç –ü–†–û–ô–î–ï–ù: –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–ª–∞ —Ñ–∞–π–ª—ã –∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –∑–∞–¥–∞—á—É")
        else:
            print("‚ùå –¢–µ—Å—Ç –ü–†–û–í–ê–õ–ï–ù: –°–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        import shutil
        if os.path.exists(vault_path):
            shutil.rmtree(vault_path)
            print(f"üßπ –û—á–∏—â–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π vault: {vault_path}")


if __name__ == "__main__":
    asyncio.run(test_iterative_improvement()) 