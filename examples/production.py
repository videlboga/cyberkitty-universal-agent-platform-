#!/usr/bin/env python3
"""
üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ - KittyCore 2.0 (1 —á–∞—Å)

–ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–¥–∞–∫—à–Ω-–≥–æ—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º,
–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
"""

import os
import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, Any, Optional
from dataclasses import dataclass
from pathlib import Path

from kittycore import Agent
from kittycore.tools import WebSearchTool, EmailTool
from kittycore.memory import PersistentMemory
from kittycore.config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('production_agent.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class ProductionConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    agent_name: str = "ProductionAssistant"
    max_concurrent_requests: int = 10
    request_timeout: int = 30
    memory_file: str = "production_memory.json"
    metrics_file: str = "agent_metrics.json"
    log_level: str = "INFO"
    backup_interval: int = 3600  # —Å–µ–∫—É–Ω–¥
    health_check_interval: int = 60  # —Å–µ–∫—É–Ω–¥

class ProductionAgent:
    """–ü—Ä–æ–¥–∞–∫—à–Ω-–≥–æ—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç —Å –ø–æ–ª–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    
    def __init__(self, config: ProductionConfig):
        self.config = config
        self.metrics = {
            "requests_total": 0,
            "requests_successful": 0,
            "requests_failed": 0,
            "uptime_start": datetime.now().isoformat(),
            "last_request": None,
            "error_log": []
        }
        
        # –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥–∞–∫—à–Ω –∞–≥–µ–Ω—Ç–∞
        self.agent = Agent(
            prompt="""
            –¢—ã –ø—Ä–æ–¥–∞–∫—à–Ω AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.
            
            –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:
            - –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ
            - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ gracefully
            - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
            
            –ü—Ä–∏–Ω—Ü–∏–ø—ã:
            - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ
            - –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            - –ë—É–¥—å –≤–µ–∂–ª–∏–≤ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–µ–Ω
            - –õ–æ–≥–∏—Ä—É–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """,
            tools=[
                WebSearchTool(max_results=5),
                EmailTool()
            ],
            memory=PersistentMemory(file_path=config.memory_file),
            name=config.agent_name
        )
        
        self.semaphore = asyncio.Semaphore(config.max_concurrent_requests)
        self._running = False
        self._tasks = set()
        
        logger.info(f"–ü—Ä–æ–¥–∞–∫—à–Ω –∞–≥–µ–Ω—Ç {config.agent_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def process_request(self, request_id: str, user_input: str, 
                            metadata: Optional[Dict] = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        async with self.semaphore:
            start_time = datetime.now()
            
            try:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {request_id}: {user_input[:100]}...")
                
                # –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
                self.metrics["requests_total"] += 1
                self.metrics["last_request"] = start_time.isoformat()
                
                # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –∑–∞–ø—Ä–æ—Å—É
                enhanced_input = f"""
                –ó–∞–ø—Ä–æ—Å ID: {request_id}
                –í—Ä–µ–º—è: {start_time.isoformat()}
                –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {json.dumps(metadata or {}, ensure_ascii=False)}
                
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å: {user_input}
                """
                
                # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                response = await asyncio.wait_for(
                    asyncio.create_task(self._run_agent(enhanced_input)),
                    timeout=self.config.request_timeout
                )
                
                # –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                processing_time = (datetime.now() - start_time).total_seconds()
                self.metrics["requests_successful"] += 1
                
                result = {
                    "success": True,
                    "request_id": request_id,
                    "response": response,
                    "processing_time": processing_time,
                    "timestamp": start_time.isoformat()
                }
                
                logger.info(f"–ó–∞–ø—Ä–æ—Å {request_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {processing_time:.2f}—Å")
                return result
                
            except asyncio.TimeoutError:
                self._handle_error(request_id, "Timeout", "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                return {
                    "success": False,
                    "request_id": request_id,
                    "error": "timeout",
                    "message": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                }
                
            except Exception as e:
                self._handle_error(request_id, type(e).__name__, str(e))
                return {
                    "success": False,
                    "request_id": request_id,
                    "error": "processing_error",
                    "message": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
                }
    
    async def _run_agent(self, input_text: str) -> str:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ"""
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, self.agent.run, input_text)
    
    def _handle_error(self, request_id: str, error_type: str, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        self.metrics["requests_failed"] += 1
        
        error_entry = {
            "request_id": request_id,
            "error_type": error_type,
            "error_message": error_message,
            "timestamp": datetime.now().isoformat()
        }
        
        self.metrics["error_log"].append(error_entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ –æ—à–∏–±–æ–∫
        if len(self.metrics["error_log"]) > 100:
            self.metrics["error_log"] = self.metrics["error_log"][-50:]
        
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ {request_id}: {error_type} - {error_message}")
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            test_start = datetime.now()
            test_response = await asyncio.wait_for(
                self._run_agent("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"),
                timeout=5.0
            )
            response_time = (datetime.now() - test_start).total_seconds()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
            memory_stats = self.agent.memory.get_stats() if hasattr(self.agent.memory, 'get_stats') else {}
            
            return {
                "status": "healthy",
                "response_time": response_time,
                "uptime": self._get_uptime(),
                "metrics": self.metrics.copy(),
                "memory_stats": memory_stats,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Health check failed: {e}")
            return {
                "status": "unhealthy",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
    
    def _get_uptime(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        start_time = datetime.fromisoformat(self.metrics["uptime_start"])
        return (datetime.now() - start_time).total_seconds()
    
    def save_metrics(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.config.metrics_file, 'w', encoding='utf-8') as f:
                json.dump(self.metrics, f, ensure_ascii=False, indent=2)
            logger.info(f"–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.config.metrics_file}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self._running = True
        
        async def monitor_loop():
            while self._running:
                try:
                    # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                    self.save_metrics()
                    
                    # Health check
                    health = await self.health_check()
                    if health["status"] != "healthy":
                        logger.warning(f"Health check warning: {health}")
                    
                    await asyncio.sleep(self.config.health_check_interval)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    await asyncio.sleep(10)
        
        task = asyncio.create_task(monitor_loop())
        self._tasks.add(task)
        task.add_done_callback(self._tasks.discard)
        
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """Graceful shutdown"""
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω –∞–≥–µ–Ω—Ç–∞...")
        self._running = False
        
        # –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        if self._tasks:
            await asyncio.gather(*self._tasks, return_exceptions=True)
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        self.save_metrics()
        logger.info("–ü—Ä–æ–¥–∞–∫—à–Ω –∞–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–∏—Å—Ç–µ–º—ã"""
    print("üè≠ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∞–≥–µ–Ω—Ç–∞...")
    
    # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = ProductionConfig(
        agent_name="CustomerSupportPro",
        max_concurrent_requests=5,
        request_timeout=15
    )
    
    # –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥–∞–∫—à–Ω –∞–≥–µ–Ω—Ç–∞
    prod_agent = ProductionAgent(config)
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    await prod_agent.start_monitoring()
    
    print("‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω –∞–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
    print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  'health' - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    print("  'metrics' - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏")
    print("  'load <N>' - –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç —Å N –∑–∞–ø—Ä–æ—Å–∞–º–∏")
    print("  '–≤—ã—Ö–æ–¥' - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
    print("-" * 50)
    
    try:
        while True:
            user_input = input("\nüë§ –ö–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å: ")
            
            if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'quit', 'exit']:
                break
            elif user_input.lower() == 'health':
                health = await prod_agent.health_check()
                print(f"üè• –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {json.dumps(health, ensure_ascii=False, indent=2)}")
            elif user_input.lower() == 'metrics':
                print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏: {json.dumps(prod_agent.metrics, ensure_ascii=False, indent=2)}")
            elif user_input.startswith('load '):
                try:
                    count = int(user_input.split()[1])
                    print(f"üî• –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å {count} –∑–∞–ø—Ä–æ—Å–∞–º–∏...")
                    
                    tasks = []
                    for i in range(count):
                        task = prod_agent.process_request(
                            f"load_test_{i}",
                            f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å ‚Ññ{i}",
                            {"test": True, "batch": "load_test"}
                        )
                        tasks.append(task)
                    
                    results = await asyncio.gather(*tasks)
                    successful = sum(1 for r in results if r["success"])
                    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {successful}/{count} —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
                    
                except ValueError:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: load <—á–∏—Å–ª–æ>")
            else:
                # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                request_id = f"req_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                result = await prod_agent.process_request(request_id, user_input)
                
                if result["success"]:
                    print(f"ü§ñ –û—Ç–≤–µ—Ç: {result['response']}")
                    print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['processing_time']:.2f}—Å")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result['message']}")
    
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    
    finally:
        await prod_agent.stop()
        print("üëã –ü—Ä–æ–¥–∞–∫—à–Ω –∞–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    print("üê± KittyCore 2.0 - –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã
    if not os.getenv('OPENROUTER_API_KEY'):
        print("‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENROUTER_API_KEY –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        os.environ['OPENROUTER_API_KEY'] = 'demo-key'
    
    asyncio.run(main()) 