#!/usr/bin/env python3
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: SmartFunctionTool

–ü–†–û–ë–õ–ï–ú–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ 'execute' ‚Üí –Ω—É–∂–Ω–æ 'execute_function'
"""

import asyncio

async def test_smart_function_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SmartFunctionTool"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: SmartFunctionTool")
    print("=" * 50)
    
    from kittycore.tools.smart_function_tool import SmartFunctionTool
    tool = SmartFunctionTool()
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    print("\nüìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    result1 = await tool.execute(
        action="create_function",
        code="def test_func(): return 'Hello from function!'",
        function_name="test_func"
    )
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ: success={result1.success}")
    if result1.data:
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {len(str(result1.data))} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –¢–µ—Å—Ç 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏  
    print("\nüöÄ –¢–µ—Å—Ç 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    result2 = await tool.execute(
        action="execute_function",
        function_name="test_func"
    )
    print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: success={result2.success}")
    if result2.data:
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {len(str(result2.data))} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {result2.data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —É—Å–ø–µ—Ö
    if result1.success and result2.success:
        print(f"\nüéâ SmartFunctionTool –ò–°–ü–†–ê–í–õ–ï–ù!")
        return True
    else:
        print(f"\n‚ùå SmartFunctionTool –≤—Å—ë –µ—â—ë –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False

if __name__ == "__main__":
    asyncio.run(test_smart_function_fix()) 