#!/usr/bin/env python3
"""
üß† –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û A-MEM - –ß–ê–°–¢–¨ 1
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ü–û–õ–ù–û–¶–ï–ù–ù–´–ô A-MEM —Å ChromaDB
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from kittycore.memory.amem_integration import AgenticMemorySystem

async def test_real_amem_initialization():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ A-MEM —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å ChromaDB"""
    print("üöÄ –¢–ï–°–¢ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –†–ï–ê–õ–¨–ù–û–ì–û A-MEM")
    
    # –°–æ–∑–¥–∞—ë–º A-MEM —Å–∏—Å—Ç–µ–º—É
    amem = AgenticMemorySystem()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ê–°–¢–û–Ø–©–ò–ô A-MEM, –∞ –Ω–µ fallback
    if hasattr(amem, 'chroma_client'):
        print("‚úÖ –£–°–ü–ï–•: ChromaDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        print(f"üìä –ö–æ–ª–ª–µ–∫—Ü–∏—è: {amem.collection.name}")
        print(f"ü§ñ Embedding –º–æ–¥–µ–ª—å: {amem.model_name}")
        return True
    else:
        print("‚ùå –ü–†–û–í–ê–õ: –í—Å—ë –µ—â—ë fallback —Ä–µ–∂–∏–º")
        return False

async def test_semantic_search_power():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫"""
    print("\nüîç –¢–ï–°–¢ 2: –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö")
    
    amem = AgenticMemorySystem()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞–º–∏
    memories = [
        "–°–æ–∑–¥–∞–ª —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞",
        "–†–µ–∞–ª–∏–∑–æ–≤–∞–ª –∞–ª–≥–æ—Ä–∏—Ç–º –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞", 
        "–ù–∞–ø–∏—Å–∞–ª –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ",
        "–°–¥–µ–ª–∞–ª –≤–µ–±-—Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏ –∏ –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º",
        "–ù–∞—Å—Ç—Ä–æ–∏–ª –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"
    ]
    
    print("üìù –î–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
    for i, memory in enumerate(memories):
        memory_id = await amem.add_note(
            content=memory,
            tags=["programming", f"task_{i}"],
            category="development",
            agent_id="test_agent"
        )
        print(f"  üíæ {memory_id}: {memory[:50]}...")
    
    # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
    print("\nüîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫:")
    
    # –ü–æ–∏—Å–∫ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º (–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –¥–∞–∂–µ –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –¥—Ä—É–≥–∏–µ)
    search_queries = [
        "–∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",  # –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, –ø–æ–∏—Å–∫
        "–≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",              # –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏  
        "—Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"             # –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ PostgreSQL
    ]
    
    total_found = 0
    for query in search_queries:
        results = await amem.search_agentic(query, k=3)
        print(f"\n  üìã –ó–∞–ø—Ä–æ—Å: '{query}'")
        print(f"     –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        total_found += len(results)
        
        for result in results:
            print(f"     üéØ {result['content'][:50]}...")
    
    if total_found > 0:
        print(f"\n‚úÖ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö –†–ê–ë–û–¢–ê–ï–¢! –ù–∞–π–¥–µ–Ω–æ {total_found} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
        return True
    else:
        print(f"\n‚ùå –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö –ù–ï –†–ê–ë–û–¢–ê–ï–¢! –ù–∞–π–¥–µ–Ω–æ 0 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return False

if __name__ == "__main__":
    async def main():
        print("üß† –¢–ï–°–¢–ò–†–£–ï–ú –†–ï–ê–õ–¨–ù–£–Æ –ú–û–©–¨ A-MEM!\n")
        
        test1_success = await test_real_amem_initialization()
        test2_success = await test_semantic_search_power()
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ß–ê–°–¢–ò 1:")
        print(f"   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è A-MEM: {'‚úÖ' if test1_success else '‚ùå'}")
        print(f"   –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: {'‚úÖ' if test2_success else '‚ùå'}")
        
        if test1_success and test2_success:
            print(f"\nüéâ A-MEM –†–ê–ë–û–¢–ê–ï–¢ –ù–ê –ü–û–õ–ù–£–Æ –ú–û–©–¨!")
        else:
            print(f"\nüòû –ß—Ç–æ-—Ç–æ –≤—Å—ë –µ—â—ë –Ω–µ —Ç–∞–∫...")
    
    asyncio.run(main()) 