#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–´–ô COMPREHENSIVE –¢–ï–°–¢ –í–°–ï–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0
–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ API, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç, –±–µ–∑ –º–æ–∫–æ–≤!
"""

import sys
import asyncio
import json
import time
from pathlib import Path
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.append(str(Path(__file__).parent / 'kittycore'))

class FinalComprehensiveTester:
    def __init__(self):
        self.results = []
        self.memory_records = []
        self.missing_keys = []
        
    async def test_all_tools(self):
        """–¢–µ—Å—Ç –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ API"""
        
        print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô COMPREHENSIVE –¢–ï–°–¢ –í–°–ï–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0")
        print("=" * 80)
        print("üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ API")
        print("üö´ –ë–µ–∑ –º–æ–∫–æ–≤, —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã")
        print()
        
        # 1. API Request Tool ‚úÖ
        await self._test_tool("api_request_tool", self._test_api_request)
        
        # 2. Super System Tool ‚úÖ  
        await self._test_tool("super_system_tool", self._test_super_system)
        
        # 3. Email Tool ‚úÖ
        await self._test_tool("email_tool", self._test_email)
        
        # 4. Computer Use Tool (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
        await self._test_tool("computer_use_tool", self._test_computer_use)
        
        # 5. Database Tool (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π async)
        await self._test_tool("database_tool", self._test_database)
        
        # 6. AI Integration Tool (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
        await self._test_tool("ai_integration_tool", self._test_ai_integration)
        
        # 7. Security Tool 
        await self._test_tool("security_tool", self._test_security)
        
        # 8. Smart Function Tool
        await self._test_tool("smart_function_tool", self._test_smart_function)
        
        # 9. Vector Search Tool
        await self._test_tool("vector_search_tool", self._test_vector_search)
        
        # 10. Image Generation Tool
        await self._test_tool("image_generation_tool", self._test_image_generation)
        
        # 11. Document Tool
        await self._test_tool("document_tool", self._test_document)
        
        # 12. Enhanced Web Scraping Tool
        await self._test_tool("enhanced_web_scraping_tool", self._test_web_scraping)
        
        # 13. Web Client Tool
        await self._test_tool("web_client_tool", self._test_web_client)
        
        # 14. Telegram Tool (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
        await self._test_tool("telegram_tool", self._test_telegram)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._print_results()
        self._save_results()
    
    async def _test_tool(self, tool_name: str, test_func):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(f"üîß –¢–µ—Å—Ç–∏—Ä—É—é {tool_name}...")
        
        start_time = time.time()
        try:
            result = await test_func()
            execution_time = time.time() - start_time
            
            if result.get("success", False):
                response_size = len(str(result.get("data", "")))
                notes = f"‚úÖ –í—Ä–µ–º—è: {execution_time:.1f}—Å, —Ä–∞–∑–º–µ—Ä: {response_size} –±–∞–π—Ç"
                success = True
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
                self.memory_records.append({
                    "tool": tool_name,
                    "working_action": result.get("action", "default"),
                    "correct_params": result.get("params", {}),
                    "notes": notes,
                    "success": True
                })
            else:
                notes = f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                success = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–π
                error_msg = result.get('error', '').lower()
                if any(word in error_msg for word in ['api', 'key', 'token', 'auth', 'install']):
                    key_req = self._extract_key_requirement(result.get('error', ''))
                    if key_req:
                        self.missing_keys.append({
                            "tool": tool_name,
                            "error": result.get('error', ''),
                            "likely_missing_key": key_req
                        })
                
        except Exception as e:
            execution_time = time.time() - start_time
            notes = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}"
            success = False
            
        self.results.append({
            "tool": tool_name,
            "success": success,
            "notes": notes,
            "execution_time": execution_time
        })
        
        print(f"   {notes}")
    
    def _extract_key_requirement(self, error_msg: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–∞"""
        error_lower = error_msg.lower()
        
        key_patterns = {
            "openrouter": "OPENROUTER_API_KEY",
            "replicate": "REPLICATE_API_TOKEN", 
            "telegram": "TELEGRAM_BOT_TOKEN + pip install pyrogram",
            "email": "EMAIL_PASSWORD –∏–ª–∏ SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            "database": "DATABASE_URL –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î",
            "pyrogram": "pip install pyrogram",
            "sqlalchemy": "pip install sqlalchemy",
            "redis": "pip install redis",
            "pymongo": "pip install pymongo"
        }
        
        for pattern, key_name in key_patterns.items():
            if pattern in error_lower:
                return key_name
                
        return None
    
    async def _test_api_request(self):
        """–¢–µ—Å—Ç ApiRequestTool"""
        from kittycore.tools import ApiRequestTool
        
        tool = ApiRequestTool()
        result = tool.execute(url="https://httpbin.org/get", method="GET")
        
        return {
            "success": result.success,
            "error": getattr(result, 'error', None),
            "data": getattr(result, 'data', {}),
            "action": "request",
            "params": {"url": "string", "method": "GET|POST|PUT|DELETE"}
        }
    
    async def _test_super_system(self):
        """–¢–µ—Å—Ç SuperSystemTool"""
        from kittycore.tools import SuperSystemTool
        
        tool = SuperSystemTool()
        result = tool.execute(action="get_system_info")
        
        return {
            "success": result.success,
            "error": getattr(result, 'error', None),
            "data": getattr(result, 'data', {}),
            "action": "get_system_info",
            "params": {"action": "get_system_info|get_processes|get_resource_usage"}
        }
    
    async def _test_email(self):
        """–¢–µ—Å—Ç EmailTool"""
        from kittycore.tools import EmailTool
        
        tool = EmailTool()
        result = tool.execute(
            to="test@example.com",
            subject="–¢–µ—Å—Ç KittyCore", 
            body="–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ"
        )
        
        return {
            "success": result.success,
            "error": getattr(result, 'error', None),
            "data": getattr(result, 'data', {}),
            "action": "send_email",
            "params": {"to": "string", "subject": "string", "body": "string"}
        }
    
    async def _test_computer_use(self):
        """–¢–µ—Å—Ç ComputerUseTool - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API"""
        from kittycore.tools import ComputerUseTool
        
        tool = ComputerUseTool()
        # ComputerUseTool.execute –ø—Ä–∏–Ω–∏–º–∞–µ—Ç Dict —Å params
        result = await tool.execute({"action": "screenshot"})
        
        return {
            "success": result.get("success", False),
            "error": result.get("error"),
            "data": result,
            "action": "screenshot",
            "params": {"action": "screenshot|click|type_text|key_press"}
        }
    
    async def _test_database(self):
        """–¢–µ—Å—Ç DatabaseTool - async execute"""
        from kittycore.tools import DatabaseTool
        
        tool = DatabaseTool()
        # DatabaseTool.execute - —ç—Ç–æ async —Ñ—É–Ω–∫—Ü–∏—è
        result = await tool.execute("SELECT 1 as test")
        
        return {
            "success": result.success,
            "error": getattr(result, 'error', None),
            "data": getattr(result, 'data', {}),
            "action": "execute_query",
            "params": {"query": "SQL string"}
        }
    
    async def _test_ai_integration(self):
        """–¢–µ—Å—Ç AIIntegrationTool - async execute"""
        from kittycore.tools import AIIntegrationTool
        
        tool = AIIntegrationTool()
        # AIIntegrationTool.execute - —ç—Ç–æ async —Ñ—É–Ω–∫—Ü–∏—è
        result = await tool.execute(action="list_models")
        
        return {
            "success": result.success,
            "error": getattr(result, 'error', None),
            "data": getattr(result, 'data', {}),
            "action": "list_models",
            "params": {"action": "list_models|list_providers|get_info"}
        }
    
    async def _test_security(self):
        """–¢–µ—Å—Ç SecurityTool - async execute"""
        from kittycore.tools import SecurityTool
        
        tool = SecurityTool()
        # SecurityTool.execute - —ç—Ç–æ async —Ñ—É–Ω–∫—Ü–∏—è
        result = await tool.execute(action="system_scan")
        
        return {
            "success": result.success,
            "error": getattr(result, 'error', None),
            "data": getattr(result, 'data', {}),
            "action": "system_scan",
            "params": {"action": "system_scan|check_ports|analyze_file"}
        }
    
    async def _test_smart_function(self):
        """–¢–µ—Å—Ç SmartFunctionTool - async execute"""
        from kittycore.tools import SmartFunctionTool
        
        tool = SmartFunctionTool()
        # SmartFunctionTool.execute - —ç—Ç–æ async —Ñ—É–Ω–∫—Ü–∏—è
        result = await tool.execute(action="get_info")
        
        return {
            "success": result.success,
            "error": getattr(result, 'error', None),
            "data": getattr(result, 'data', {}),
            "action": "get_info",
            "params": {"action": "get_info|execute_function|list_functions"}
        }
    
    async def _test_vector_search(self):
        """–¢–µ—Å—Ç VectorSearchTool"""
        from kittycore.tools import VectorSearchTool
        
        tool = VectorSearchTool()
        # VectorSearchTool.execute –ø—Ä–∏–Ω–∏–º–∞–µ—Ç query
        result = tool.execute("test query")
        
        return {
            "success": result.success,
            "error": getattr(result, 'error', None),
            "data": getattr(result, 'data', {}),
            "action": "search",
            "params": {"query": "string", "limit": "int"}
        }
    
    async def _test_image_generation(self):
        """–¢–µ—Å—Ç ImageGenerationTool - async execute"""
        from kittycore.tools import ImageGenerationTool
        
        tool = ImageGenerationTool()
        # ImageGenerationTool.execute - —ç—Ç–æ async —Ñ—É–Ω–∫—Ü–∏—è
        result = await tool.execute(action="get_info")
        
        return {
            "success": result.success,
            "error": getattr(result, 'error', None),
            "data": getattr(result, 'data', {}),
            "action": "get_info",
            "params": {"action": "get_info|generate_image|list_models"}
        }
    
    async def _test_document(self):
        """–¢–µ—Å—Ç DocumentTool"""
        from kittycore.tools import DocumentTool
        
        tool = DocumentTool()
        # DocumentTool.execute –ø—Ä–∏–Ω–∏–º–∞–µ—Ç command
        result = tool.execute(command="get_info")
        
        return {
            "success": result.success,
            "error": getattr(result, 'error', None),
            "data": getattr(result, 'data', {}),
            "action": "get_info",
            "params": {"command": "get_info|process_file|extract_text"}
        }
    
    async def _test_web_scraping(self):
        """–¢–µ—Å—Ç EnhancedWebScrapingTool - async execute"""
        from kittycore.tools import EnhancedWebScrapingTool
        
        tool = EnhancedWebScrapingTool()
        # EnhancedWebScrapingTool.execute - —ç—Ç–æ async —Ñ—É–Ω–∫—Ü–∏—è
        result = await tool.execute(url="https://httpbin.org/json", extract_text=True)
        
        return {
            "success": result.success,
            "error": getattr(result, 'error', None),
            "data": getattr(result, 'data', {}),
            "action": "scrape",
            "params": {"url": "string", "extract_text": "bool"}
        }
    
    async def _test_web_client(self):
        """–¢–µ—Å—Ç WebClient"""
        from kittycore.tools import WebClient
        
        tool = WebClient()
        # WebClient.execute –ø—Ä–∏–Ω–∏–º–∞–µ—Ç url –∏ method
        result = tool.execute(url="https://httpbin.org/user-agent", method="GET")
        
        return {
            "success": result.success,
            "error": getattr(result, 'error', None),
            "data": getattr(result, 'data', {}),
            "action": "request",
            "params": {"url": "string", "method": "GET|POST"}
        }
    
    async def _test_telegram(self):
        """–¢–µ—Å—Ç TelegramTool"""
        from kittycore.tools import TelegramTool
        
        try:
            tool = TelegramTool()
            result = tool.execute(
                chat_id="@test_channel",
                message="–¢–µ—Å—Ç KittyCore"
            )
            
            return {
                "success": result.success,
                "error": getattr(result, 'error', None),
                "data": getattr(result, 'data', {}),
                "action": "send_message",
                "params": {"chat_id": "string", "message": "string"}
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "data": {},
                "action": "send_message",
                "params": {"chat_id": "string", "message": "string"}
            }
    
    def _print_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û–ì–û COMPREHENSIVE –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        total_tests = len(self.results)
        successful_tests = len([r for r in self.results if r["success"]])
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"üéØ –û–±—â–∏–π —É—Å–ø–µ—Ö: {successful_tests}/{total_tests} = {success_rate:.1f}%")
        
        # –£—Å–ø–µ—à–Ω—ã–µ
        successful = [r for r in self.results if r["success"]]
        if successful:
            print(f"\n‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ({len(successful)}):")
            for result in successful:
                print(f"   üîß {result['tool']}: {result['notes']}")
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ
        failed = [r for r in self.results if not r["success"]]
        if failed:
            print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ({len(failed)}):")
            for result in failed:
                print(f"   üîß {result['tool']}: {result['notes']}")
        
        # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
        if self.missing_keys:
            print(f"\nüîë –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï API –ö–õ–Æ–ß–ò/–ó–ê–í–ò–°–ò–ú–û–°–¢–ò ({len(self.missing_keys)}):")
            for missing in self.missing_keys:
                print(f"   üîß {missing['tool']}: {missing['likely_missing_key']}")
    
    def _save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        Path("test_final_comprehensive").mkdir(exist_ok=True)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open("test_final_comprehensive/results.json", 'w', encoding='utf-8') as f:
            json.dump({
                "summary": {
                    "total_tests": len(self.results),
                    "successful_tests": len([r for r in self.results if r["success"]]),
                    "success_rate": (len([r for r in self.results if r["success"]]) / len(self.results) * 100) if self.results else 0
                },
                "results": self.results,
                "missing_keys": self.missing_keys
            }, f, ensure_ascii=False, indent=2)
        
        # –ó–∞–ø–∏—Å–∏ –¥–ª—è –ø–∞–º—è—Ç–∏
        with open("test_final_comprehensive/memory_records.json", 'w', encoding='utf-8') as f:
            json.dump(self.memory_records, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_final_comprehensive/")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FinalComprehensiveTester()
    await tester.test_all_tools()

if __name__ == "__main__":
    asyncio.run(main()) 