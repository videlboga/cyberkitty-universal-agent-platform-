"""
Simple AmoCRM Plugin - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è

–ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!
- –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –ø–æ–∏—Å–∫, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —Å–¥–µ–ª–æ–∫
- –ú–∏–Ω–∏–º—É–º –∫–æ–¥–∞ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import json
from datetime import datetime
from typing import Dict, Any, Optional
from loguru import logger
import httpx

from app.core.base_plugin import BasePlugin


class SimpleAmoCRMPlugin(BasePlugin):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–≥–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AmoCRM"""
    
    def __init__(self):
        super().__init__("simple_amocrm")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM (–±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î)
        self.base_url = None
        self.access_token = None
        self.headers = {}
        
        # –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π (–±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ë–î)
        self.fields_map = {}
        
        logger.info("SimpleAmoCRMPlugin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _do_initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
        await self._load_settings_from_db()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π –∏–∑ –ë–î
        await self._load_fields_from_db()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
        if self.access_token:
            self.headers = {
                'Authorization': f'Bearer {self.access_token}',
                'Content-Type': 'application/json'
            }
            logger.info("‚úÖ SimpleAmoCRMPlugin –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            logger.warning("‚ö†Ô∏è SimpleAmoCRMPlugin —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")
    
    async def _load_settings_from_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM –∏–∑ MongoDB"""
        try:
            if not self.engine or not hasattr(self.engine, 'plugins') or 'mongo' not in self.engine.plugins:
                logger.warning("MongoDB –ø–ª–∞–≥–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AmoCRM")
                return
                
            mongo_plugin = self.engine.plugins['mongo']
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ settings
            settings_result = await mongo_plugin._find_one("settings", {"plugin_name": "simple_amocrm"})
            
            # –û–¢–õ–ê–î–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê settings_result: {settings_result}")
            if settings_result and settings_result.get("success"):
                logger.info(f"üîç –û–¢–õ–ê–î–ö–ê document: {settings_result.get('document')}")
            
            if settings_result and settings_result.get("success") and settings_result.get("document"):
                settings = settings_result["document"]
                self.base_url = settings.get("base_url")
                self.access_token = settings.get("access_token")
                logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î: {self.base_url}")
            else:
                logger.info("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AmoCRM –∏–∑ –ë–î: {e}")
    
    async def _load_fields_from_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π AmoCRM –∏–∑ MongoDB"""
        try:
            if not self.engine or not hasattr(self.engine, 'plugins') or 'mongo' not in self.engine.plugins:
                logger.warning("MongoDB –ø–ª–∞–≥–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π AmoCRM")
                return
                
            mongo_plugin = self.engine.plugins['mongo']
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ settings (–£–ü–†–û–©–ï–ù–û!)
            fields_result = await mongo_plugin._find_one("settings", {"plugin": "simple_amocrm_fields"})
            
            if fields_result and fields_result.get("success") and fields_result.get("document"):
                self.fields_map = fields_result["document"].get("contact_fields", {})
                logger.info(f"‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π AmoCRM –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ settings: {len(self.fields_map)} –ø–æ–ª–µ–π")
            else:
                logger.info("‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π AmoCRM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ settings")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π AmoCRM –∏–∑ settings: {e}")

    def register_handlers(self) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —à–∞–≥–æ–≤"""
        return {
            # === –ö–û–ù–¢–ê–ö–¢–´ ===
            "amocrm_find_contact": self._handle_find_contact,
            "amocrm_create_contact": self._handle_create_contact,
            "amocrm_update_contact": self._handle_update_contact,
            
            # === –°–î–ï–õ–ö–ò ===
            "amocrm_find_lead": self._handle_find_lead,
            "amocrm_create_lead": self._handle_create_lead,
            
            # === –ó–ê–ú–ï–¢–ö–ò ===
            "amocrm_add_note": self._handle_add_note,
            
            # === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï ===
            "amocrm_search": self._handle_search,
            
            # === –ö–ê–†–¢–ê –ü–û–õ–ï–ô ===
            "amocrm_fetch_fields": self._handle_fetch_fields,
            "amocrm_save_fields": self._handle_save_fields,
            "amocrm_get_fields": self._handle_get_fields,
        }
    
    async def _ensure_fresh_settings(self):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î"""
        try:
            if not self.engine or not hasattr(self.engine, 'plugins') or 'mongo' not in self.engine.plugins:
                return
                
            mongo_plugin = self.engine.plugins['mongo']
            settings_result = await mongo_plugin._find_one("settings", {"plugin_name": "simple_amocrm"})
            
            if settings_result and settings_result.get("success") and settings_result.get("document"):
                settings = settings_result["document"]
                new_base_url = settings.get("base_url")
                new_access_token = settings.get("access_token")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                if new_base_url != self.base_url or new_access_token != self.access_token:
                    self.base_url = new_base_url
                    self.access_token = new_access_token
                    self.headers = {
                        'Authorization': f'Bearer {self.access_token}',
                        'Content-Type': 'application/json'
                    } if self.access_token else {}
                    logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {self.base_url}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AmoCRM: {e}")

    async def _make_request(self, method: str, endpoint: str, **kwargs) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ AmoCRM API"""
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
        await self._ensure_fresh_settings()
        
        if not self.base_url or not self.access_token:
            return {
                "success": False,
                "error": "AmoCRM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î)"
            }
        
        url = f"{self.base_url}{endpoint}"
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.request(
                    method=method,
                    url=url,
                    headers=self.headers,
                    timeout=30.0,
                    **kwargs
                )
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                try:
                    data = response.json()
                except:
                    data = response.text
                
                result = {
                    "success": response.status_code < 400,
                    "status_code": response.status_code,
                    "data": data
                }
                
                if response.status_code >= 400:
                    result["error"] = f"AmoCRM API –æ—à–∏–±–∫–∞ {response.status_code}"
                    logger.error(f"‚ùå AmoCRM –æ—à–∏–±–∫–∞ {response.status_code}: {url}")
                else:
                    logger.info(f"‚úÖ AmoCRM {method} —É—Å–ø–µ—à–Ω–æ: {url}")
                
                return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AmoCRM: {e}")
            return {
                "success": False,
                "error": str(e),
                "status_code": 0
            }
    
    def _resolve_value(self, value: Any, context: Dict[str, Any]) -> Any:
        """–ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if isinstance(value, str) and "{" in value and "}" in value:
            try:
                return value.format(**context)
            except (KeyError, ValueError) as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å '{value}': {e}")
                return value
        return value
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    async def _handle_find_contact(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ AmoCRM"""
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self._ensure_fresh_settings()
        
        params = step_data.get("params", {})
        
        try:
            query = self._resolve_value(params.get("query", ""), context)
            output_var = params.get("output_var", "contact")
            
            if not query:
                context[output_var] = {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω query –¥–ª—è –ø–æ–∏—Å–∫–∞"}
                return
            
            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            endpoint = f"/api/v4/contacts"
            result = await self._make_request("GET", endpoint, params={"query": query})
            
            if result["success"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ data —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
                data = result.get("data", {})
                if isinstance(data, dict):
                    contacts = data.get("_embedded", {}).get("contacts", [])
                    context[output_var] = {
                        "success": True,
                        "contact": contacts[0] if contacts else None,
                        "found": len(contacts) > 0,
                        "count": len(contacts)
                    }
                    logger.info(f"‚úÖ –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞: –Ω–∞–π–¥–µ–Ω–æ {len(contacts)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                else:
                    context[output_var] = {
                        "success": False,
                        "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ AmoCRM: {type(data).__name__}"
                    }
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ AmoCRM: {data}")
            else:
                context[output_var] = result
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            context["__step_error__"] = f"AmoCRM –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}"

    async def _handle_find_lead(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–ü–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏ –≤ AmoCRM"""
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self._ensure_fresh_settings()
        
        params = step_data.get("params", {})
        
        try:
            query = self._resolve_value(params.get("query", ""), context)
            output_var = params.get("output_var", "lead")
            
            if not query:
                context[output_var] = {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω query –¥–ª—è –ø–æ–∏—Å–∫–∞"}
                return
            
            # –ü–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏
            endpoint = f"/api/v4/leads"
            result = await self._make_request("GET", endpoint, params={"query": query})
            
            if result["success"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ data —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
                data = result.get("data", {})
                if isinstance(data, dict):
                    leads = data.get("_embedded", {}).get("leads", [])
                    context[output_var] = {
                        "success": True,
                        "lead": leads[0] if leads else None,
                        "found": len(leads) > 0,
                        "count": len(leads)
                    }
                    logger.info(f"‚úÖ –ü–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏: –Ω–∞–π–¥–µ–Ω–æ {len(leads)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                else:
                    context[output_var] = {
                        "success": False,
                        "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ AmoCRM: {type(data).__name__}"
                    }
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ AmoCRM: {data}")
            else:
                context[output_var] = result
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–∫–∏: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–∫–∏: {e}")
            context["__step_error__"] = f"AmoCRM –ø–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏: {str(e)}"

    async def _handle_search(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ AmoCRM"""
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self._ensure_fresh_settings()
        
        params = step_data.get("params", {})
        
        try:
            query = self._resolve_value(params.get("query", ""), context)
            entity_type = params.get("entity_type", "contacts")  # contacts, leads
            output_var = params.get("output_var", "search_results")
            
            if not query:
                context[output_var] = {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω query –¥–ª—è –ø–æ–∏—Å–∫–∞"}
                return
            
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
            endpoint = f"/api/v4/{entity_type}"
            result = await self._make_request("GET", endpoint, params={"query": query})
            
            if result["success"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ data —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
                data = result.get("data", {})
                if isinstance(data, dict):
                    items = data.get("_embedded", {}).get(entity_type, [])
                    context[output_var] = {
                        "success": True,
                        "items": items,
                        "count": len(items),
                        "entity_type": entity_type
                    }
                    logger.info(f"‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ {entity_type}: –Ω–∞–π–¥–µ–Ω–æ {len(items)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                else:
                    context[output_var] = {
                        "success": False,
                        "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ AmoCRM: {type(data).__name__}"
                    }
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ AmoCRM: {data}")
            else:
                context[output_var] = result
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            context["__step_error__"] = f"AmoCRM —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: {str(e)}"

    async def _handle_create_contact(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ AmoCRM"""
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self._ensure_fresh_settings()
        
        params = step_data.get("params", {})
        
        try:
            name = self._resolve_value(params.get("name", ""), context)
            first_name = self._resolve_value(params.get("first_name", ""), context)
            last_name = self._resolve_value(params.get("last_name", ""), context)
            phone = self._resolve_value(params.get("phone", ""), context)
            email = self._resolve_value(params.get("email", ""), context)
            output_var = params.get("output_var", "created_contact")
            
            # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            custom_fields_data = params.get("custom_fields", {})
            
            # –ï—Å–ª–∏ custom_fields –ø—Ä–∏—à–ª–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ (–∏–∑-–∑–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö), –ø–∞—Ä—Å–∏–º –∏—Ö
            if isinstance(custom_fields_data, str):
                try:
                    import json
                    custom_fields_data = json.loads(custom_fields_data)
                except:
                    # –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ–±—É–µ–º eval (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
                    try:
                        custom_fields_data = eval(custom_fields_data)
                    except:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å custom_fields: {custom_fields_data}")
                        custom_fields_data = {}
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
            if isinstance(custom_fields_data, dict):
                for key, value in custom_fields_data.items():
                    custom_fields_data[key] = self._resolve_value(value, context)
            else:
                custom_fields_data = {}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            contact_data = {}
            
            # –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
            if name:
                contact_data["name"] = name
            elif first_name or last_name:
                contact_data["name"] = f"{first_name} {last_name}".strip()
            else:
                context[output_var] = {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"}
                return
            
            if first_name:
                contact_data["first_name"] = first_name
            if last_name:
                contact_data["last_name"] = last_name
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
            custom_fields = []
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è (—Ç–µ–ª–µ—Ñ–æ–Ω –∏ email)
            if phone:
                custom_fields.append({
                    "field_code": "PHONE",
                    "values": [{"value": phone, "enum_code": "WORK"}]
                })
            if email:
                custom_fields.append({
                    "field_code": "EMAIL", 
                    "values": [{"value": email, "enum_code": "WORK"}]
                })
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π
            if custom_fields_data and self.fields_map:
                mapped_fields = self._prepare_custom_fields(custom_fields_data)
                custom_fields.extend(mapped_fields)
            
            if custom_fields:
                contact_data["custom_fields_values"] = custom_fields
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
            endpoint = "/api/v4/contacts"
            result = await self._make_request("POST", endpoint, json=[contact_data])
            
            if result["success"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ data —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
                data = result.get("data", {})
                if isinstance(data, dict):
                    contacts = data.get("_embedded", {}).get("contacts", [])
                    if contacts:
                        contact = contacts[0]
                        context[output_var] = {
                            "success": True,
                            "contact": contact,
                            "contact_id": contact["id"],
                            "used_fields_map": len(self.fields_map) > 0,
                            "custom_fields_count": len(custom_fields)
                        }
                        logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω: {contact['id']} (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {len(custom_fields)} –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π)")
                    else:
                        context[output_var] = {"success": False, "error": "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω"}
                else:
                    context[output_var] = {
                        "success": False,
                        "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ AmoCRM: {type(data).__name__}"
                    }
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ AmoCRM –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {data}")
            else:
                context[output_var] = result
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            context["__step_error__"] = f"AmoCRM —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}"

    async def _handle_create_lead(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ AmoCRM"""
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self._ensure_fresh_settings()
        
        params = step_data.get("params", {})
        
        try:
            name = self._resolve_value(params.get("name", ""), context)
            price = self._resolve_value(params.get("price", 0), context)
            contact_id = self._resolve_value(params.get("contact_id", ""), context)
            output_var = params.get("output_var", "created_lead")
            
            if not name:
                context[output_var] = {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏"}
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
            lead_data = {"name": name}
            
            if price:
                lead_data["price"] = int(price)
            
            # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É
            if contact_id:
                lead_data["_embedded"] = {
                    "contacts": [{"id": int(contact_id)}]
                }
            
            # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
            endpoint = "/api/v4/leads"
            result = await self._make_request("POST", endpoint, json=[lead_data])
            
            if result["success"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ data —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
                data = result.get("data", {})
                if isinstance(data, dict):
                    leads = data.get("_embedded", {}).get("leads", [])
                    if leads:
                        lead = leads[0]
                        context[output_var] = {
                            "success": True,
                            "lead": lead,
                            "lead_id": lead["id"]
                        }
                        logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {lead['id']}")
                    else:
                        context[output_var] = {"success": False, "error": "–°–¥–µ–ª–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"}
                else:
                    context[output_var] = {
                        "success": False,
                        "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ AmoCRM: {type(data).__name__}"
                    }
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ AmoCRM –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {data}")
            else:
                context[output_var] = result
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            context["__step_error__"] = f"AmoCRM —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏: {str(e)}"

    async def _handle_update_contact(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ AmoCRM"""
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self._ensure_fresh_settings()
        
        params = step_data.get("params", {})
        
        try:
            contact_id = self._resolve_value(params.get("contact_id", ""), context)
            output_var = params.get("output_var", "updated_contact")
            
            if not contact_id:
                context[output_var] = {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω contact_id"}
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            contact_data = {"id": int(contact_id)}
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            if "name" in params:
                contact_data["name"] = self._resolve_value(params["name"], context)
            
            # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
            custom_fields = params.get("custom_fields", {})
            used_fields_map = params.get("used_fields_map", False)
            
            if custom_fields:
                if used_fields_map and self.fields_map:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                    contact_data["custom_fields_values"] = self._prepare_custom_fields(custom_fields)
                else:
                    # –ü—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª–µ–π
                    contact_data["custom_fields_values"] = []
                    for field_id, value in custom_fields.items():
                        if isinstance(value, dict):
                            contact_data["custom_fields_values"].append(value)
                        else:
                            contact_data["custom_fields_values"].append({
                                "field_id": int(field_id),
                                "values": [{"value": str(value)}]
                            })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
            endpoint = f"/api/v4/contacts/{contact_id}"
            result = await self._make_request("PATCH", endpoint, json=contact_data)
            
            if result["success"]:
                contact = result["data"]
                context[output_var] = {
                    "success": True,
                    "contact": contact,
                    "contact_id": contact.get("id", contact_id),
                    "updated_fields": list(custom_fields.keys()) if custom_fields else []
                }
                logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {contact_id}")
            else:
                context[output_var] = result
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            context["__step_error__"] = f"AmoCRM –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}"

    async def _handle_add_note(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ AmoCRM"""
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self._ensure_fresh_settings()
        
        params = step_data.get("params", {})
        
        try:
            entity_type = params.get("entity_type", "leads")  # leads, contacts
            entity_id = self._resolve_value(params.get("entity_id", ""), context)
            note_text = self._resolve_value(params.get("note_text", ""), context)
            output_var = params.get("output_var", "note_result")
            
            if not entity_id or not note_text:
                context[output_var] = {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω—ã entity_id –∏–ª–∏ note_text"}
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
            note_data = {
                "entity_id": int(entity_id),
                "note_type": "common",
                "params": {
                    "text": note_text
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
            endpoint = f"/api/v4/{entity_type}/notes"
            result = await self._make_request("POST", endpoint, json=[note_data])
            
            if result["success"]:
                context[output_var] = {
                    "success": True,
                    "note_added": True,
                    "entity_id": entity_id,
                    "entity_type": entity_type
                }
                logger.info(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ {entity_type}:{entity_id}")
            else:
                context[output_var] = result
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: {e}")
            context["__step_error__"] = f"AmoCRM –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: {str(e)}"

    # === –•–ï–ù–î–õ–ï–†–´ –ö–ê–†–¢–´ –ü–û–õ–ï–ô ===

    async def _handle_fetch_fields(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π –∏–∑ AmoCRM API –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self._ensure_fresh_settings()
        
        params = step_data.get("params", {})
        
        try:
            entity_type = params.get("entity_type", "contacts")  # contacts, leads, companies
            output_var = params.get("output_var", "fields_fetched")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è –∏–∑ AmoCRM
            result = await self._fetch_fields_from_amocrm(entity_type)
            
            if result["success"]:
                fields_map = result["fields_map"]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                save_result = await self._save_fields_to_db(fields_map, entity_type)
                
                context[output_var] = {
                    "success": True,
                    "entity_type": entity_type,
                    "fields_count": len(fields_map),
                    "fields_map": fields_map,
                    "saved_to_db": save_result.get("success", False),
                    "message": f"–ü–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(fields_map)} –ø–æ–ª–µ–π –¥–ª—è {entity_type}"
                }
                
                logger.info(f"‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π {entity_type} –ø–æ–ª—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {len(fields_map)} –ø–æ–ª–µ–π")
            else:
                context[output_var] = result
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π: {e}")
            context["__step_error__"] = f"AmoCRM –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π: {str(e)}"

    async def _handle_save_fields(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π –≤ –ë–î"""
        params = step_data.get("params", {})
        
        try:
            fields_map = self._resolve_value(params.get("fields_map", {}), context)
            entity_type = params.get("entity_type", "contacts")
            output_var = params.get("output_var", "fields_saved")
            
            if not fields_map:
                context[output_var] = {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω–∞ fields_map"}
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π
            result = await self._save_fields_to_db(fields_map, entity_type)
            
            context[output_var] = result
            
            if result["success"]:
                logger.info(f"‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {len(fields_map)} –ø–æ–ª–µ–π –¥–ª—è {entity_type}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π: {e}")
            context["__step_error__"] = f"AmoCRM —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π: {str(e)}"

    async def _handle_get_fields(self, step_data: Dict[str, Any], context: Dict[str, Any]) -> None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π –∏–∑ –ë–î"""
        params = step_data.get("params", {})
        
        try:
            entity_type = params.get("entity_type", "contacts")
            output_var = params.get("output_var", "current_fields")
            
            if not self.engine or not hasattr(self.engine, 'plugins') or 'mongo' not in self.engine.plugins:
                context[output_var] = {"success": False, "error": "MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                return
                
            mongo_plugin = self.engine.plugins['mongo']
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π –∏–∑ settings (–£–ü–†–û–©–ï–ù–û!)
            fields_result = await mongo_plugin._find_one("settings", {"plugin": f"simple_amocrm_fields_{entity_type}"})
            
            if fields_result and fields_result.get("success") and fields_result.get("document"):
                fields_doc = fields_result["document"]
                context[output_var] = {
                    "success": True,
                    "entity_type": entity_type,
                    "fields_map": fields_doc.get("contact_fields", {}),  # –£–ü–†–û–©–ï–ù–û: contact_fields
                    "fields_count": len(fields_doc.get("contact_fields", {})),
                    "updated_at": fields_doc.get("updated_at"),
                    "message": f"–ù–∞–π–¥–µ–Ω–æ {len(fields_doc.get('contact_fields', {}))} –ø–æ–ª–µ–π –¥–ª—è {entity_type}"
                }
                logger.info(f"‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ settings: {len(fields_doc.get('contact_fields', {}))} –ø–æ–ª–µ–π –¥–ª—è {entity_type}")
            else:
                context[output_var] = {
                    "success": False,
                    "error": f"–ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π –¥–ª—è {entity_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ settings",
                    "entity_type": entity_type,
                    "fields_count": 0
                }
                logger.warning(f"‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π –¥–ª—è {entity_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ settings")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π: {e}")
            context["__step_error__"] = f"AmoCRM –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π: {str(e)}"

    def _prepare_custom_fields(self, data: Dict[str, Any]) -> list:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –¥–ª—è AmoCRM API –∏—Å–ø–æ–ª—å–∑—É—è –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π"""
        custom_fields = []
        
        for field_name, value in data.items():
            field = self.fields_map.get(field_name)
            if not field:
                logger.warning(f"–ü–æ–ª–µ '{field_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞—Ä—Ç–µ –ø–æ–ª–µ–π")
                continue
                
            field_type = field.get("type")
            field_id = field["id"]
            
            if field_type in ["multitext", "text"]:
                # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
                custom_fields.append({
                    "field_id": field_id,
                    "values": [{"value": str(value)}]
                })
                
            elif field_type == "numeric":
                # –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
                custom_fields.append({
                    "field_id": field_id,
                    "values": [{"value": value}]
                })
                
            elif field_type == "select":
                # –°–µ–ª–µ–∫—Ç (–æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä)
                enum_id = self._get_enum_id(field, value=value)
                if enum_id:
                    custom_fields.append({
                        "field_id": field_id,
                        "values": [{"enum_id": enum_id}]
                    })
                    
            elif field_type == "multiselect":
                # –ú—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç
                if isinstance(value, list):
                    enum_ids = [self._get_enum_id(field, value=v) for v in value]
                    custom_fields.append({
                        "field_id": field_id,
                        "values": [{"enum_id": eid} for eid in enum_ids if eid]
                    })
                    
            elif field_type == "multitext":
                # Email/Phone —Å —Ç–∏–ø–æ–º
                enum_id = self._get_enum_id(field, enum_code="WORK")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é WORK
                custom_fields.append({
                    "field_id": field_id,
                    "values": [{"value": str(value), "enum_id": enum_id}]
                })
                
            else:
                # Fallback –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
                custom_fields.append({
                    "field_id": field_id,
                    "values": [{"value": str(value)}]
                })
                
        return custom_fields

    def _get_enum_id(self, field: Dict[str, Any], value: str = None, enum_code: str = None) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç enum_id –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –∏–ª–∏ –∫–æ–¥—É"""
        enums = field.get("enums", [])
        if not enums:
            return None
            
        # –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É
        if enum_code:
            for enum in enums:
                if enum.get("enum_code") == enum_code:
                    return enum["id"]
        
        # –ü–æ–∏—Å–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
        if value:
            for enum in enums:
                if enum.get("value") == value:
                    return enum["id"]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        return enums[0]["id"] if enums else None

    async def healthcheck(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ AmoCRM –ø–ª–∞–≥–∏–Ω–∞"""
        try:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
            await self._ensure_fresh_settings()
            
            if not self.base_url or not self.access_token:
                logger.warning("‚ùå AmoCRM healthcheck: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            result = await self._make_request("GET", "/api/v4/account")
            
            if result["success"]:
                account_name = result["data"].get("name", "Unknown")
                logger.info(f"‚úÖ AmoCRM healthcheck: OK (–∞–∫–∫–∞—É–Ω—Ç: {account_name})")
                return True
            else:
                logger.error(f"‚ùå AmoCRM healthcheck: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {result.get('error')}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå AmoCRM healthcheck: –æ—à–∏–±–∫–∞ - {e}")
            return False

    async def _fetch_fields_from_amocrm(self, entity_type: str = "contacts") -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π –Ω–∞–ø—Ä—è–º—É—é –∏–∑ AmoCRM API"""
        try:
            endpoint = f"/api/v4/{entity_type}/custom_fields"
            result = await self._make_request("GET", endpoint)
            
            if result["success"]:
                custom_fields = result["data"].get("_embedded", {}).get("custom_fields", [])
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                fields_map = {}
                for field in custom_fields:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    field_code = field.get("code")
                    if not field_code:
                        # –°–æ–∑–¥–∞–µ–º –∫–æ–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—è
                        field_code = field["name"].upper().replace(" ", "_").replace(".", "_")
                        # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
                        field_code = "".join(c for c in field_code if c.isalnum() or c == "_")
                        if not field_code:
                            field_code = f"FIELD_{field['id']}"
                    
                    fields_map[field_code] = {
                        "id": field["id"],
                        "name": field["name"],
                        "type": field["type"],
                        "code": field.get("code"),
                        "enums": field.get("enums", [])
                    }
                
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(fields_map)} –ø–æ–ª–µ–π –∏–∑ AmoCRM –¥–ª—è {entity_type}")
                return {"success": True, "fields_map": fields_map, "entity_type": entity_type}
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–µ–π –∏–∑ AmoCRM: {result.get('error')}")
                return {"success": False, "error": result.get("error")}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–µ–π –∏–∑ AmoCRM: {e}")
            return {"success": False, "error": str(e)}

    async def _save_fields_to_db(self, fields_map: Dict[str, Any], entity_type: str = "contacts") -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π –≤ MongoDB"""
        try:
            if not self.engine or not hasattr(self.engine, 'plugins') or 'mongo' not in self.engine.plugins:
                return {"success": False, "error": "MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                
            mongo_plugin = self.engine.plugins['mongo']
            
            fields_doc = {
                "plugin": f"simple_amocrm_fields_{entity_type}",
                "plugin_name": "simple_amocrm",
                "entity_type": entity_type,
                "contact_fields": fields_map,  # –£–ü–†–û–©–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º contact_fields
                "updated_at": datetime.now().isoformat()
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≤ settings
            result = await mongo_plugin._update_one(
                "settings",  # –£–ü–†–û–©–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ settings 
                {"plugin": f"simple_amocrm_fields_{entity_type}"}, 
                {"$set": fields_doc},
                upsert=True
            )
            
            if result.get("success"):
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π –≤ –ø–ª–∞–≥–∏–Ω–µ –µ—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞
                if entity_type == "contacts":
                    self.fields_map = fields_map
                
                logger.info(f"‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π AmoCRM —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ settings: {len(fields_map)} –ø–æ–ª–µ–π –¥–ª—è {entity_type}")
                return {"success": True, "message": f"–ö–∞—Ä—Ç–∞ –ø–æ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ({len(fields_map)} –ø–æ–ª–µ–π –¥–ª—è {entity_type})"}
            else:
                error_msg = result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ–ª–µ–π AmoCRM –≤ settings: {error_msg}")
                return {"success": False, "error": error_msg}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø–æ–ª–µ–π AmoCRM –≤ settings: {e}")
            return {"success": False, "error": str(e)} 