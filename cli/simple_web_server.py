#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π KittyCore 3.0 Web Interface
–ë–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç OrchestratorAgent
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import uvicorn

# –ü—Ä–æ—Å—Ç–æ–π WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
class SimpleWebSocketManager:
    def __init__(self):
        self.active_connections: set = set()
    
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.add(websocket)
        await self.send_personal_message(websocket, {
            "type": "connection_established",
            "timestamp": datetime.now().isoformat(),
            "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ KittyCore 3.0 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        })
    
    async def disconnect(self, websocket: WebSocket):
        self.active_connections.discard(websocket)
    
    async def send_personal_message(self, websocket: WebSocket, message: dict):
        try:
            await websocket.send_text(json.dumps(message, ensure_ascii=False))
        except:
            await self.disconnect(websocket)
    
    async def broadcast(self, message: dict):
        disconnected = []
        for connection in self.active_connections:
            try:
                await connection.send_text(json.dumps(message, ensure_ascii=False))
            except:
                disconnected.append(connection)
        
        for connection in disconnected:
            await self.disconnect(connection)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class TaskRequest(BaseModel):
    prompt: str
    options: Optional[Dict] = {}

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="KittyCore 3.0 Simple Web Interface",
    description="–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≥–µ–Ω—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º",
    version="3.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
ws_manager = SimpleWebSocketManager()

@app.get("/", response_class=HTMLResponse)
async def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>KittyCore 3.0</title>
        <meta charset="utf-8">
        <style>
            body { 
                font-family: 'Consolas', 'Monaco', monospace;
                margin: 0; padding: 20px; background: #0a0a0a; color: #00ff41;
            }
            .container { max-width: 1000px; margin: 0 auto; }
            .header { 
                text-align: center; margin-bottom: 40px;
                border: 2px solid #00ff41; padding: 20px; border-radius: 10px;
            }
            .title {
                font-size: 3rem; margin: 0; text-shadow: 0 0 20px #00ff41;
            }
            .status { 
                background: #111; padding: 20px; border-radius: 8px; 
                margin-bottom: 20px;
            }
            .task-input { 
                width: 100%; min-height: 120px; background: #111; 
                color: #00ff41; border: 2px solid #333; padding: 15px;
                border-radius: 8px; font-family: monospace;
            }
            .button {
                background: #00ff41; color: #000; border: none; 
                padding: 15px 30px; border-radius: 8px; cursor: pointer;
                font-weight: bold; margin: 10px 5px;
            }
            .button:hover { background: #00cc33; }
            .log { 
                background: #111; padding: 20px; border-radius: 8px;
                max-height: 400px; overflow-y: auto; font-family: monospace;
                font-size: 12px; line-height: 1.6;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1 class="title">üê± KittyCore 3.0</h1>
                <p>–°–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–∞—è—Å—è –ê–≥–µ–Ω—Ç–Ω–∞—è –°–∏—Å—Ç–µ–º–∞ (Simple Mode)</p>
            </div>
            
            <div class="status">
                <h3>üîó –°—Ç–∞—Ç—É—Å: <span id="status">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</span></h3>
            </div>
            
            <div style="margin-bottom: 20px;">
                <h3>üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç–∞–º</h3>
                <textarea id="task-input" class="task-input" 
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏..."></textarea>
                <br><br>
                <button class="button" onclick="executeTask()">üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å</button>
                <button class="button" onclick="clearLog()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</button>
            </div>
            
            <div>
                <h3>üìã –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π</h3>
                <div class="log" id="log"></div>
            </div>
        </div>
        
        <script>
            let ws = null;
            const log = document.getElementById('log');
            const status = document.getElementById('status');
            
            function connectWebSocket() {
                const wsUrl = 'ws://localhost:8003/ws';
                ws = new WebSocket(wsUrl);
                
                ws.onopen = function() {
                    addLog('üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ KittyCore 3.0');
                    status.innerHTML = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
                };
                
                ws.onmessage = function(event) {
                    const data = JSON.parse(event.data);
                    addLog('üì® ' + JSON.stringify(data));
                };
                
                ws.onclose = function() {
                    addLog('üî¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                    status.innerHTML = '–û—Ç–∫–ª—é—á–µ–Ω–æ';
                    setTimeout(connectWebSocket, 3000);
                };
            }
            
            function addLog(message) {
                const timestamp = new Date().toLocaleTimeString();
                log.innerHTML += '[' + timestamp + '] ' + message + '<br>';
                log.scrollTop = log.scrollHeight;
            }
            
            function executeTask() {
                const input = document.getElementById('task-input');
                const task = input.value.trim();
                
                if (!task) return;
                
                if (ws && ws.readyState === WebSocket.OPEN) {
                    ws.send(JSON.stringify({
                        type: 'execute_task',
                        prompt: task,
                        task_id: 'task_' + Date.now()
                    }));
                    addLog('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ' + task);
                    input.value = '';
                }
            }
            
            function clearLog() {
                log.innerHTML = '';
            }
            
            connectWebSocket();
        </script>
    </body>
    </html>
    '''

@app.get("/api/status")
async def get_status():
    return {
        "status": "active",
        "timestamp": datetime.now().isoformat(),
        "version": "3.0.0-simple"
    }

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await ws_manager.connect(websocket)
    try:
        while True:
            data = await websocket.receive_text()
            message = json.loads(data)
            
            if message.get("type") == "execute_task":
                prompt = message.get('prompt', '')
                task_id = message.get('task_id', f'task_{int(datetime.now().timestamp() * 1000000)}')
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è
                await ws_manager.send_personal_message(websocket, {
                    "type": "task_received",
                    "task_id": task_id,
                    "prompt": prompt,
                    "timestamp": datetime.now().isoformat()
                })
                
                # –ó–ê–ü–£–°–ö–ê–ï–ú –†–ï–ê–õ–¨–ù–£–Æ –°–ò–°–¢–ï–ú–£ –ê–ì–ï–ù–¢–û–í
                try:
                    from kittycore.core.orchestrator import OrchestratorAgent
                    
                    orchestrator = OrchestratorAgent()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    await ws_manager.send_personal_message(websocket, {
                        "type": "task_processing",
                        "task_id": task_id,
                        "message": "ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤...",
                        "timestamp": datetime.now().isoformat()
                    })
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
                    result = await orchestrator.execute_task(prompt)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º)
                    if isinstance(result, str):
                        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å—Ç—Ä–æ–∫–∞, —Å—á–∏—Ç–∞–µ–º –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
                        success = True
                        result_data = {"message": result, "output": result}
                    elif isinstance(result, dict):
                        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å–ª–æ–≤–∞—Ä—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
                        success = result.get('success', True)
                        result_data = result
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                        success = True
                        result_data = {"message": str(result), "output": str(result)}
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    await ws_manager.send_personal_message(websocket, {
                        "type": "task_completed",
                        "task_id": task_id,
                        "result": result_data,
                        "success": success,
                        "timestamp": datetime.now().isoformat()
                    })
                    
                except Exception as e:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
                    await ws_manager.send_personal_message(websocket, {
                        "type": "task_error",
                        "task_id": task_id,
                        "error": str(e),
                        "timestamp": datetime.now().isoformat()
                    })
                
    except WebSocketDisconnect:
        await ws_manager.disconnect(websocket)

def main():
    print("üöÄ KittyCore 3.0 Simple Web –Ω–∞ http://localhost:8003")
    uvicorn.run(app, host="0.0.0.0", port=8003, log_level="info")

if __name__ == "__main__":
    main() 