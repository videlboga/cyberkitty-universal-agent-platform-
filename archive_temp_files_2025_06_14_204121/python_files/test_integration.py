#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ OrchestratorAgent

–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Å–≤—è–∑–∫–µ:
- ‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–æ–≤
- ‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞
- ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ 
- ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ OrchestratorAgent

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–º–µ—Å—Ç–µ! üöÄ
"""

import asyncio
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

async def test_orchestrator_integration():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OrchestratorAgent —Å –Ω–æ–≤—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é OrchestratorAgent...")
    
    try:
        from kittycore.core.orchestrator import OrchestratorAgent, OrchestratorConfig
        
        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–æ–≤—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        config = OrchestratorConfig(
            orchestrator_id="test_orchestrator",
            enable_metrics=True,
            enable_vector_memory=True, 
            enable_quality_control=True,
            enable_obsidian=False  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
        )
        
        # –°–æ–∑–¥–∞—ë–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        orchestrator = OrchestratorAgent(config)
        print("‚úÖ OrchestratorAgent —Å–æ–∑–¥–∞–Ω —Å –Ω–æ–≤—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        assert orchestrator.metrics_collector is not None, "MetricsCollector –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        assert orchestrator.vector_store is not None, "VectorStore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        assert orchestrator.quality_controller is not None, "QualityController –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        print("‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏
        test_task = "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª —Å —Ä–∞—Å—á—ë—Ç–æ–º –ø–ª–æ—â–∞–¥–∏ –∫–æ—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ A = œÄ * r¬≤"
        
        print(f"üéØ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É: {test_task}")
        result = await orchestrator.solve_task(test_task)
        
        print("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ OrchestratorAgent")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result is not None, "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω"
        assert "status" in result, "–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result['status']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–∞—á–µ—Å—Ç–≤–∞
        if "validation" in result:
            validation = result["validation"]
            print(f"üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞: {validation.get('verdict', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({validation.get('quality_score', 0):.2f})")
            
            if "quality_details" in validation:
                details = validation["quality_details"]
                print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ: {details['passed_checks']}/{details['total_checks']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = orchestrator.get_statistics()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {stats['tasks_processed']} –∑–∞–¥–∞—á, —Å–æ–∑–¥–∞–Ω–æ {stats['agents_created']} –∞–≥–µ–Ω—Ç–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OrchestratorAgent: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_metrics_in_action():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –º–µ—Ç—Ä–∏–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –¥–µ–π—Å—Ç–≤–∏–∏...")
    
    try:
        from kittycore.core.agent_metrics import get_metrics_collector
        
        collector = get_metrics_collector()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        initial_agent_count = len(collector.agent_metrics)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        # (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ solve_task)
        
        print(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤ –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö: {initial_agent_count}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∞–≥–µ–Ω—Ç–æ–≤
        top_agents = collector.get_top_agents(limit=3)
        print(f"‚úÖ –¢–æ–ø –∞–≥–µ–Ω—Ç–æ–≤: {len(top_agents)}")
        
        for agent in top_agents:
            print(f"  - {agent.agent_id}: –∫–∞—á–µ—Å—Ç–≤–æ {agent.average_quality:.2f}, –∑–∞–¥–∞—á {agent.total_tasks}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        return False

async def test_vector_search_integration():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫...")
    
    try:
        from kittycore.memory.vector_memory import get_vector_store
        
        store = get_vector_store()
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        test_docs_path = Path("test_knowledge")
        test_docs_path.mkdir(exist_ok=True)
        
        # –î–æ–∫—É–º–µ–Ω—Ç –æ –∫–æ—Ç–∞—Ö
        cat_doc = test_docs_path / "cats_guide.md"
        cat_doc.write_text("""
# –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∫–æ—Ç–∞–º

## –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∫–æ—Ç–æ–≤

–ü–ª–æ—â–∞–¥—å –∫–æ—Ç–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ A = œÄ * r¬≤, –≥–¥–µ r - —Ä–∞–¥–∏—É—Å –∫–æ—Ç–∞ –≤ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.

–°—Ä–µ–¥–Ω–∏–π –∫–æ—Ç –∏–º–µ–µ—Ç —Ä–∞–¥–∏—É—Å 0.3 –º–µ—Ç—Ä–∞, —á—Ç–æ –¥–∞—ë—Ç –ø–ª–æ—â–∞–¥—å ‚âà 0.28 –º¬≤.

## –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ—Ç–æ–≤

–ö–æ—Ç—ã –ª—é–±—è—Ç —Å–ø–∞—Ç—å, –µ—Å—Ç—å –∏ –º—É—Ä—á–∞—Ç—å. –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
""", encoding='utf-8')
        
        # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º
        indexed = await store.index_documents(test_docs_path)
        print(f"‚úÖ –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {indexed}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        if indexed > 0:
            results = await store.search("–∫–∞–∫ –∏–∑–º–µ—Ä–∏—Ç—å –ø–ª–æ—â–∞–¥—å –∫–æ—Ç–∞", limit=2)
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {len(results)}")
            
            if results:
                best = results[0]
                print(f"‚úÖ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{best.document.title}' (—Å—Ö–æ–¥—Å—Ç–≤–æ: {best.similarity_score:.3f})")
                print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: {best.relevance_context[:100]}...")
        
        # –û—á–∏—Å—Ç–∫–∞
        import shutil
        shutil.rmtree(test_docs_path, ignore_errors=True)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ KittyCore 3.0 —Å –Ω–æ–≤—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏\n")
    
    results = []
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OrchestratorAgent
    results.append(await test_orchestrator_integration())
    print()
    
    # –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –≤ –¥–µ–π—Å—Ç–≤–∏–∏
    results.append(await test_metrics_in_action())
    print()
    
    # –¢–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    results.append(await test_vector_search_integration())
    print()
    
    # –ò—Ç–æ–≥–∏
    passed = sum(results)
    total = len(results)
    
    print("=" * 60)
    print(f"üéØ –ò–¢–û–ì–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢! –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ KittyCore 3.0!")
        print("üí™ –ê–≥–µ–Ω—Ç—ã —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ–¥ —Å—Ç—Ä–æ–≥–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
    
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main()) 