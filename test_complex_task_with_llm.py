#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–õ–û–ñ–ù–´–• –ó–ê–î–ê–ß –° LLM - KittyCore 3.0
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UnifiedOrchestrator –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö —Å LLM
"""

import asyncio
import os
import time
from datetime import datetime
from pathlib import Path

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig
from kittycore.config.base_config import Config


def setup_llm_provider():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv("OPENROUTER_API_KEY")
    
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("\nüîß –î–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á:")
        print("1. –ò–¥–∏—Ç–µ –Ω–∞ https://openrouter.ai")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)")
        print("3. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ Keys")
        print("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   export OPENROUTER_API_KEY='sk-or-v1-–≤–∞—à-–∫–ª—é—á-–∑–¥–µ—Å—å'")
        print("\nüÜì –î–æ—Å—Ç—É–ø–Ω—ã –ë–ï–°–ü–õ–ê–¢–ù–´–ï –º–æ–¥–µ–ª–∏ –Ω–∞–≤—Å–µ–≥–¥–∞!")
        return False
    
    print(f"‚úÖ LLM API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:20]}...{api_key[-10:]}")
    return True


# –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
SIMPLE_TASKS = {
    "hello_world": {
        "difficulty": "‚≠ê",
        "category": "–ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞",
        "task": "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π Python —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç 'Hello, World!' –∏ —Å–æ—Ö—Ä–∞–Ω–∏ –µ–≥–æ –≤ —Ñ–∞–π–ª hello.py",
        "expected_outputs": ["python_script"],
        "time_limit": 60  # 1 –º–∏–Ω—É—Ç–∞
    },
    
    "simple_calculation": {
        "difficulty": "‚≠ê‚≠ê",
        "category": "–í—ã—á–∏—Å–ª–µ–Ω–∏—è",
        "task": "–°–æ–∑–¥–∞–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –∫—Ä—É–≥–∞. –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–∞–¥–∏—É—Å –∏ –≤—ã–≤–æ–¥–∏—Ç—å –ø–ª–æ—â–∞–¥—å. –°–æ—Ö—Ä–∞–Ω–∏ –≤ —Ñ–∞–π–ª circle_area.py",
        "expected_outputs": ["python_script"],
        "time_limit": 120  # 2 –º–∏–Ω—É—Ç—ã
    },
    
    "data_analysis_mini": {
        "difficulty": "‚≠ê‚≠ê‚≠ê",
        "category": "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
        "task": """
–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö:

1. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π CSV —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–∂ (50 –∑–∞–ø–∏—Å–µ–π)
2. –°–æ–∑–¥–∞–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö
3. –ù–∞–π–¥–∏ –æ–±—â—É—é —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂
4. –°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π –æ—Ç—á—ë—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ

–†–µ–∑—É–ª—å—Ç–∞—Ç: CSV —Ñ–∞–π–ª + Python —Å–∫—Ä–∏–ø—Ç + —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
        """,
        "expected_outputs": ["csv_data", "python_script", "text_report"],
        "time_limit": 300  # 5 –º–∏–Ω—É—Ç
    }
}


async def run_simple_task_test(task_name: str, orchestrator: UnifiedOrchestrator):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏"""
    
    if task_name not in SIMPLE_TASKS:
        print(f"‚ùå –ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return None
    
    task_config = SIMPLE_TASKS[task_name]
    
    print(f"\nüéØ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê: {task_name}")
    print(f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {task_config['difficulty']}")
    print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {task_config['category']}")
    print(f"‚è±Ô∏è –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏: {task_config['time_limit']} —Å–µ–∫—É–Ω–¥")
    print("=" * 60)
    
    start_time = time.time()
    
    try:
        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
        result = await orchestrator.solve_task(task_config['task'])
        
        execution_time = time.time() - start_time
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\n‚úÖ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê –∑–∞ {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìã –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
        print(f"üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {result.get('quality_score', 'N/A')}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –≤—ã—Ö–æ–¥–æ–≤
        created_files = result.get('created_files', [])
        print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(created_files)}):")
        for file_path in created_files:
            print(f"  - {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤
        print(f"\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
        for file_path in created_files:
            if Path(file_path).exists():
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        print(f"\n--- {file_path} ---")
                        print(content[:500] + ("..." if len(content) > 500 else ""))
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        
        # –û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        success_score = evaluate_task_success(task_config, result, execution_time)
        print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {success_score:.1f}/10.0")
        
        return {
            "task_name": task_name,
            "success_score": success_score,
            "execution_time": execution_time,
            "result": result
        }
        
    except Exception as e:
        execution_time = time.time() - start_time
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        return {
            "task_name": task_name,
            "success_score": 0.0,
            "execution_time": execution_time,
            "error": str(e)
        }


def evaluate_task_success(task_config, result, execution_time):
    """–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    
    score = 0.0
    max_score = 10.0
    
    # 1. –ë–∞–∑–æ–≤–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (4 –±–∞–ª–ª–∞)
    if result.get('status') == 'completed':
        score += 4.0
    elif result.get('status') == 'partial':
        score += 2.0
    
    # 2. –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (3 –±–∞–ª–ª–∞)
    quality_score = result.get('quality_score', 0)
    if quality_score:
        score += quality_score * 3.0
    
    # 3. –°–æ–±–ª—é–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (2 –±–∞–ª–ª–∞)
    time_limit = task_config['time_limit']
    if execution_time <= time_limit:
        score += 2.0
    elif execution_time <= time_limit * 1.5:
        score += 1.0
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (1 –±–∞–ª–ª)
    created_files = result.get('created_files', [])
    if created_files:
        score += 1.0
    
    return min(score, max_score)


async def run_test_suite():
    """–ó–∞–ø—É—Å–∫ –Ω–∞–±–æ—Ä–∞ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–°–¢–´–• –¢–ï–°–¢–û–í - KittyCore 3.0 —Å LLM")
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM
    if not setup_llm_provider():
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    vault_path = Path("test_vault_llm")
    vault_path.mkdir(exist_ok=True)
    
    config = UnifiedConfig(vault_path=str(vault_path))
    orchestrator = UnifiedOrchestrator(config)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    results = []
    
    for task_name in SIMPLE_TASKS.keys():
        result = await run_simple_task_test(task_name, orchestrator)
        if result:
            results.append(result)
        
        print("\n" + "="*60)
        await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("\nüèÜ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 60)
    
    total_score = 0
    successful_tasks = 0
    
    for result in results:
        task_name = result['task_name']
        score = result['success_score']
        time_taken = result['execution_time']
        
        status = "‚úÖ" if score >= 7.0 else "‚ö†Ô∏è" if score >= 4.0 else "‚ùå"
        print(f"{status} {task_name}: {score:.1f}/10.0 ({time_taken:.1f}s)")
        
        total_score += score
        if score >= 7.0:
            successful_tasks += 1
    
    avg_score = total_score / len(results) if results else 0
    success_rate = (successful_tasks / len(results) * 100) if results else 0
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_score:.1f}/10.0")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–¥–∞—á: {successful_tasks}/{len(results)} ({success_rate:.1f}%)")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    
    return results


if __name__ == "__main__":
    print("üéØ –ü–†–û–°–¢–´–ï –¢–ï–°–¢–´ –° LLM - KittyCore 3.0")
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –û–¥–Ω–∞ –∑–∞–¥–∞—á–∞ (–±—ã—Å—Ç—Ä–æ)")
    print("2. –í—Å–µ –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã")
    print("3. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
    
    if choice == "1":
        if not setup_llm_provider():
            exit(1)
            
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        for i, (task_name, config) in enumerate(SIMPLE_TASKS.items(), 1):
            print(f"{i}. {task_name} {config['difficulty']}")
        
        task_choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É (1-{len(SIMPLE_TASKS)}): ").strip()
        
        try:
            task_index = int(task_choice) - 1
            task_name = list(SIMPLE_TASKS.keys())[task_index]
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
            vault_path = Path("test_vault_llm")
            vault_path.mkdir(exist_ok=True)
            
            config = UnifiedConfig(vault_path=str(vault_path))
            orchestrator = UnifiedOrchestrator(config)
            
            # –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
            asyncio.run(run_simple_task_test(task_name, orchestrator))
            
        except (ValueError, IndexError):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∑–∞–¥–∞—á–∏!")
    
    elif choice == "2":
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤
        asyncio.run(run_test_suite())
    
    elif choice == "3":
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!") 