#!/usr/bin/env python3
"""
üîç –û–¢–õ–ê–î–ö–ê: enhanced_web_search_tool
–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ async –≤—ã–∑–æ–≤—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

–ü–†–û–ë–õ–ï–ú–´ –ò–ó –ü–ê–ú–Ø–¢–ò:
- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç async/await
- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–µ—Ç action, –µ—Å—Ç—å query/limit)
- –ù–µ—Ç max_results, –µ—Å—Ç—å limit

–ü–õ–ê–ù –û–¢–õ–ê–î–ö–ò:
1. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π async –≤—ã–∑–æ–≤
2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (query, limit)
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–µ–±-–¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import time
import json

# –ò–º–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
try:
    from kittycore.tools.enhanced_web_search_tool import EnhancedWebSearchTool
    IMPORT_OK = True
    print("‚úÖ –ò–º–ø–æ—Ä—Ç enhanced_web_search_tool —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ –û–®–ò–ë–ö–ê: {e}")
    IMPORT_OK = False

async def test_web_search_correct():
    """–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å async –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É—é enhanced_web_search —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
    start_time = time.time()
    
    tool = EnhancedWebSearchTool()
    
    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –≤—ã–∑–æ–≤: await + query + limit (–ù–ï action, –ù–ï max_results)
    result = await tool.execute(
        query="Python programming tutorial",
        limit=3
    )
    
    execution_time = time.time() - start_time
    
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data_size = len(str(result.data))
            print(f"üì¶ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {data_size} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if isinstance(result.data, dict):
                print(f"üîë –ö–ª—é—á–∏ –¥–∞–Ω–Ω—ã—Ö: {list(result.data.keys())}")
                if 'results' in result.data:
                    results_count = len(result.data['results'])
                    print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_count}")
                    
                    # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if results_count > 0:
                        first_result = result.data['results'][0]
                        print(f"üéØ –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
                        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {first_result.get('title', '–ù–ï–¢')[:50]}...")
                        print(f"   URL: {first_result.get('url', '–ù–ï–¢')[:50]}...")
                        print(f"   –§—Ä–∞–≥–º–µ–Ω—Ç: {first_result.get('snippet', '–ù–ï–¢')[:80]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {getattr(result, 'error', '–ù–ï–ò–ó–í–ï–°–¢–ù–û')}")
    
    return result

async def test_web_search_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüîç –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç enhanced_web_search...")
    
    tool = EnhancedWebSearchTool()
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ - —Ç–æ–ª—å–∫–æ query
    result = await tool.execute(query="test")
    
    print(f"üìä –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success:
            data_size = len(str(result.data)) if hasattr(result, 'data') else 0
            print(f"üì¶ –†–∞–∑–º–µ—Ä: {data_size} –±–∞–π—Ç")
    
    return result

async def test_web_search_sources():
    """–¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüîç –¢–µ—Å—Ç enhanced_web_search —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏...")
    
    tool = EnhancedWebSearchTool()
    
    # –¢–µ—Å—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    result = await tool.execute(
        query="KittyCore",
        limit=2,
        sources=["duckduckgo"]
    )
    
    print(f"üìä –¢–µ—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
    
    return result

def is_result_honest(result, test_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if not result:
        print(f"‚ùå {test_name}: –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return False
    
    if not hasattr(result, 'success'):
        print(f"‚ùå {test_name}: –ù–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ success")
        return False
    
    if not result.success:
        print(f"‚ùå {test_name}: success=False")
        if hasattr(result, 'error'):
            print(f"   –û—à–∏–±–∫–∞: {result.error}")
        return False
    
    if not hasattr(result, 'data') or not result.data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    data_str = str(result.data)
    data_size = len(data_str)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–µ–π–∫–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    fake_patterns = [
        "enhanced_web_search: —É—Å–ø–µ—à–Ω–æ",
        "–¥–µ–º–æ –ø–æ–∏—Å–∫",
        "–∑–∞–≥–ª—É—à–∫–∞ –ø–æ–∏—Å–∫–∞",
        "—Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
    ]
    
    for pattern in fake_patterns:
        if pattern.lower() in data_str.lower():
            print(f"‚ùå {test_name}: –ù–∞–π–¥–µ–Ω —Ñ–µ–π–∫–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–∑–Ω–∞–∫–∏
    web_indicators = [
        "url", "title", "snippet", "http", "results"
    ]
    
    has_web_data = any(indicator in data_str.lower() for indicator in web_indicators)
    
    if not has_web_data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤–µ–±-–¥–∞–Ω–Ω—ã—Ö")
        return False
    
    if data_size < 50:
        print(f"‚ùå {test_name}: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
        return False
    
    print(f"‚úÖ {test_name}: –ß–ï–°–¢–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("üîç –û–¢–õ–ê–î–ö–ê: enhanced_web_search_tool")
    print("=" * 50)
    
    if not IMPORT_OK:
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞")
        return
    
    results = {}
    
    # –¢–µ—Å—Ç 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    try:
        result1 = await test_web_search_correct()
        results["correct_params"] = is_result_honest(result1, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 1 –û–®–ò–ë–ö–ê: {e}")
        results["correct_params"] = False
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 2: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    try:
        result2 = await test_web_search_simple()
        results["simple_params"] = is_result_honest(result2, "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 2 –û–®–ò–ë–ö–ê: {e}")
        results["simple_params"] = False
    
    # –¢–µ—Å—Ç 3: –¢–µ—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 3: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
    try:
        result3 = await test_web_search_sources()
        results["sources_params"] = is_result_honest(result3, "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 3 –û–®–ò–ë–ö–ê: {e}")
        results["sources_params"] = False
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –û–¢–õ–ê–î–ö–ò:")
    
    total_tests = len(results)
    passed_tests = sum(1 for success in results.values() if success)
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    print("\n–î–µ—Ç–∞–ª–∏:")
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("web_search_fix_results.json", "w", encoding="utf-8") as f:
        json.dump({
            "tool": "enhanced_web_search_tool",
            "tests": results,
            "summary": {
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "success_rate": success_rate
            },
            "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ web_search_fix_results.json")
    
    # –í–µ—Ä–¥–∏–∫—Ç
    if success_rate >= 66:
        print("\nüéâ ENHANCED_WEB_SEARCH_TOOL –ò–°–ü–†–ê–í–õ–ï–ù!")
        print("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ async –≤—ã–∑–æ–≤–∞–º–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        return True
    elif success_rate >= 33:
        print("\n‚ö†Ô∏è ENHANCED_WEB_SEARCH_TOOL –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
        return False
    else:
        print("\n‚ùå ENHANCED_WEB_SEARCH_TOOL –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        return False

if __name__ == "__main__":
    asyncio.run(main()) 