"""
–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π Telegram –ø–ª–∞–≥–∏–Ω –¥–ª—è Universal Agent Platform.
–ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤ —Å–µ–±–µ:
1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥
3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Telegram —à–∞–≥–æ–≤
"""

import os
import asyncio
from datetime import datetime
from typing import Dict, Callable, Any, Optional, List
from telegram import Bot, Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, MessageHandler, CommandHandler, CallbackQueryHandler, filters
from app.core.base_plugin import BasePlugin
from loguru import logger


class SimpleTelegramPlugin(BasePlugin):
    """
    –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π Telegram –ø–ª–∞–≥–∏–Ω.
    
    –ü—Ä–∏–Ω—Ü–∏–ø—ã:
    1. –û–¥–∏–Ω –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ–≥–æ Telegram —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    2. –ü—Ä—è–º–∞—è —Ä–∞–±–æ—Ç–∞ —Å –¥–≤–∏–∂–∫–æ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ—ë–≤
    3. –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    4. –ú–∏–Ω–∏–º—É–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    """
    
    def __init__(self, bot_token: str = None, channel_id: str = None):
        super().__init__("simple_telegram")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.bot_token = bot_token or os.getenv("TELEGRAM_BOT_TOKEN")
        self.channel_id = channel_id or "telegram_bot"  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π channel_id
        self.bot: Optional[Bot] = None
        self.application: Optional[Application] = None
        self._polling_task: Optional[asyncio.Task] = None
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        self._command_scenarios = {
            "/start": "registration",
            "/help": "help", 
            "/menu": "main_menu"
        }
        
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self._default_scenario = "main_menu"
        
        # Callbacks (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        self.command_callback: Optional[Callable] = None
        self.message_callback: Optional[Callable] = None
        self.callback_query_callback: Optional[Callable] = None
        
    async def _do_initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞."""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
        await self._load_settings_from_db()
            
        if not self.bot_token:
            # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
            self.logger.warning("‚ö†Ô∏è Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ - —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            self.logger.info("üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: POST /admin/plugins/telegram/settings")
            self.bot = None
            self.application = None
            return
            
        try:
            # –°–æ–∑–¥–∞–µ–º Application –¥–ª—è polling
            self.application = Application.builder().token(self.bot_token).build()
            self.bot = self.application.bot
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            bot_info = await self.bot.get_me()
            self.logger.info(f"Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{bot_info.username}")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self._setup_handlers()
            
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –±–æ—Ç–∞: {e}, —Ä–∞–±–æ—Ç–∞—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
            self.bot = None
            self.application = None
            
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è polling."""
        if not self.application:
            self.logger.warning("Application –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
            return
            
        try:
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start)
            self.application.add_handler(
                CommandHandler(["start", "help"], self._handle_command)
            )
            self.logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.application.add_handler(
                MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message)
            )
            self.logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –æ—Ç –∫–Ω–æ–ø–æ–∫
            self.application.add_handler(
                CallbackQueryHandler(self._handle_callback_query)
            )
            self.logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            handlers_count = len(self.application.handlers[0]) if self.application.handlers else 0
            self.logger.info(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {handlers_count}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
            self._handlers_count = handlers_count
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            
        self.logger.info("Telegram handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def _load_settings_from_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∏–∑ MongoDB"""
        try:
            if not self.engine or not hasattr(self.engine, 'plugins') or 'mongo' not in self.engine.plugins:
                self.logger.warning("MongoDB –ø–ª–∞–≥–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram")
                return
                
            mongo_plugin = self.engine.plugins['mongo']
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
            settings_result = await mongo_plugin._find_one("plugin_settings", {"plugin_name": "telegram"})
            
            if settings_result and settings_result.get("success") and settings_result.get("document"):
                settings = settings_result["document"]
                self.bot_token = settings.get("bot_token")
                webhook_url = settings.get("webhook_url")
                webhook_secret = settings.get("webhook_secret")
                
                self.logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î")
            else:
                self.logger.info("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram –∏–∑ –ë–î: {e}")
    
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –ù–ê–°–¢–†–û–ô–ö–ò –ß–ï–†–ï–ó API ===
    
    async def save_settings_to_db(self, bot_token: str, webhook_url: str = None, webhook_secret: str = None) -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –≤ MongoDB (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API)"""
        try:
            if not self.engine or not hasattr(self.engine, 'plugins') or 'mongo' not in self.engine.plugins:
                return {"success": False, "error": "MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                
            mongo_plugin = self.engine.plugins['mongo']
            
            settings_doc = {
                "plugin_name": "telegram",
                "bot_token": bot_token,
                "webhook_url": webhook_url,
                "webhook_secret": webhook_secret,
                "updated_at": datetime.now().isoformat()
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è
            result = await mongo_plugin._update_one(
                "plugin_settings", 
                {"plugin_name": "telegram"}, 
                {"$set": settings_doc},
                upsert=True
            )
            
            if result.get("success"):
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–ª–∞–≥–∏–Ω–µ
                old_token = self.bot_token
                self.bot_token = bot_token
                
                # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                if old_token != bot_token:
                    if self.application:
                        await self.stop_polling()
                    await self._do_initialize()
                
                self.logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
                return {"success": True, "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"}
            else:
                error_msg = result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –≤ –ë–î: {error_msg}")
                return {"success": False, "error": error_msg}
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram –≤ –ë–î: {e}")
            return {"success": False, "error": str(e)}
    
    def get_current_settings(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞"""
        return {
            "bot_token": "***" if self.bot_token else None,
            "bot_token_set": bool(self.bot_token),
            "bot_initialized": bool(self.bot),
            "polling_active": bool(self._polling_task and not self._polling_task.done()),
            "configured": bool(self.bot_token)
        }
    
    async def update_bot_token(self, new_token: str, scenario_id: str = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ë–î –∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞."""
        try:
            if not hasattr(self, 'engine') or not self.engine:
                self.logger.error("–î–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
                return False
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
            step = {
                "id": "update_channel_config",
                "type": "mongo_create_channel_mapping",
                "params": {
                    "channel_id": self.channel_id,
                    "scenario_id": scenario_id or "default_scenario",
                    "channel_type": "telegram",
                    "channel_config": {
                        "bot_token": new_token,
                        "webhook_url": None,
                        "allowed_updates": ["message", "callback_query"]
                    },
                    "output_var": "update_result"
                }
            }
            
            context = {}
            result_context = await self.engine.execute_step(step, context)
            
            update_result = result_context.get("update_result", {})
            if update_result.get("success"):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ø–ª–∞–≥–∏–Ω–µ
                self.bot_token = new_token
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                if self.application:
                    await self.stop_polling()
                
                # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                await self._do_initialize()
                
                self.logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {self.channel_id}")
                return True
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –ë–î: {update_result}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π."""
        if not self.application:
            self.logger.warning("Polling –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
            return
            
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram polling...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª–ª–∏–Ω–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
            if self._polling_task and not self._polling_task.done():
                self.logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª–ª–∏–Ω–≥...")
                self._polling_task.cancel()
                try:
                    await self._polling_task
                except asyncio.CancelledError:
                    pass
                    
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ polling –≤ asyncio
            await self.application.initialize()
            await self.application.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            import asyncio
            polling_task = asyncio.create_task(
                self.application.updater.start_polling(
                    poll_interval=1.0,
                    timeout=10,
                    drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                    allowed_updates=["message", "callback_query"]
                )
            )
            
            self.logger.info("‚úÖ Telegram polling –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self._polling_task = polling_task
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
            if "Conflict" in str(e):
                self.logger.error("üö® –ö–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
                self.logger.error("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä API")
            
    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç polling."""
        if self.application:
            await self.application.stop()
            self.logger.info("Telegram polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
    def set_message_callback(self, callback: Callable):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self.message_callback = callback
        
    def set_command_callback(self, callback: Callable):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥."""
        self.command_callback = callback
        
    def set_callback_query_callback(self, callback: Callable):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query."""
        self.callback_query_callback = callback
    
    async def _handle_command(self, update: Update, context):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Å –ø—Ä—è–º—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
        try:
            command = update.message.text
            user = update.effective_user
            chat = update.effective_chat
            
            self.logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name} (ID: {user.id})")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            telegram_context = {
                "command": command,
                "user_id": str(user.id),
                "user_name": user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "user_username": user.username,
                "chat_id": str(chat.id),
                "chat_type": chat.type,
                "message_text": command,
                "is_command": True
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
            scenario_id = self._get_scenario_for_command(command)
            if scenario_id:
                await self._execute_scenario(scenario_id, telegram_context)
            
            # –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π callback –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            if self.command_callback:
                await self.command_callback(telegram_context)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            
    async def _handle_message(self, update: Update, context):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä—è–º—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
        try:
            message = update.message
            user = update.effective_user
            chat = update.effective_chat
            
            self.logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '{message.text}' –æ—Ç {user.first_name} (ID: {user.id})")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            telegram_context = {
                "user_id": str(user.id),
                "user_name": user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 
                "user_username": user.username,
                "chat_id": str(chat.id),
                "chat_type": chat.type,
                "message_text": message.text,
                "is_command": False
            }
            
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            await self._execute_scenario(self._default_scenario, telegram_context)
            
            # –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π callback –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            if self.message_callback:
                await self.message_callback(telegram_context)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
    async def _handle_callback_query(self, update: Update, context):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query —Å –ø—Ä—è–º—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
        try:
            query = update.callback_query
            user = update.effective_user
            chat = update.effective_chat
            
            self.logger.info(f"üîò –ü–æ–ª—É—á–µ–Ω callback '{query.data}' –æ—Ç {user.first_name} (ID: {user.id})")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
            await query.answer()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            telegram_context = {
                "user_id": str(user.id),
                "user_name": user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "user_username": user.username,
                "chat_id": str(chat.id),
                "chat_type": chat.type,
                "callback_data": query.data,
                "message_id": str(query.message.message_id) if query.message else None,
                "is_callback": True
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
            scenario_id = self._get_scenario_for_callback(query.data)
            if scenario_id:
                await self._execute_scenario(scenario_id, telegram_context)
            
            # –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π callback –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            if self.callback_query_callback:
                await self.callback_query_callback(telegram_context)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            
    def _get_scenario_for_command(self, command: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã."""
        scenario_id = self._command_scenarios.get(command)
        if scenario_id:
            self.logger.info(f"üéØ –ö–æ–º–∞–Ω–¥–∞ {command} -> —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario_id}")
            return scenario_id
        else:
            self.logger.info(f"üéØ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ {command} -> –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π {self._default_scenario}")
            return self._default_scenario
            
    def _get_scenario_for_callback(self, callback_data: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö."""
        # –§–æ—Ä–º–∞—Ç callback: scenario_id:action –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ scenario_id
        if ":" in callback_data:
            scenario_id = callback_data.split(":")[0]
        else:
            scenario_id = callback_data
        self.logger.info(f"üéØ Callback {callback_data} -> —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario_id}")
        return scenario_id
        
    async def _execute_scenario(self, scenario_id: str, telegram_context: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ API —Å channel_id."""
        try:
            self.logger.info(f"üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º channel_id –¥–ª—è Telegram –±–æ—Ç–∞
            channel_id = "telegram_bot"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_context = {
                **telegram_context,  # –í–µ—Å—å Telegram –∫–æ–Ω—Ç–µ–∫—Å—Ç
                "scenario_id": scenario_id,
                "execution_started_at": asyncio.get_event_loop().time()
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ –¥–≤–∏–∂–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º channel_id
            if hasattr(self, 'engine') and self.engine:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º API-–ø–æ–¥–æ–±–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å channel_id
                from app.api.simple import _load_scenario
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞
                scenario = await _load_scenario(channel_id, scenario_id)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
                result = await self.engine.execute_scenario(scenario, execution_context)
                self.logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.error(f"‚ùå –î–≤–∏–∂–æ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_id}: {e}")
            
    def register_handlers(self) -> Dict[str, Callable]:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram —à–∞–≥–æ–≤."""
        return {
            "telegram_send_message": self.handle_send_message,
            "telegram_edit_message": self.handle_edit_message,
            "telegram_send_buttons": self.handle_send_buttons,
            "telegram_update_token": self.handle_update_token,
            "telegram_load_token": self.handle_load_token,
            "telegram_start_polling": self.handle_start_polling,
        }
        
    async def healthcheck(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ Telegram –±–æ—Ç–∞."""
        try:
            if not self.bot:
                return False
                
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            await self.bot.get_me()
            return True
            
        except Exception as e:
            self.logger.error(f"Telegram healthcheck failed: {e}")
            return False
            
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –®–ê–ì–û–í ===
    
    async def handle_send_message(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
        
        –ü—Ä–∏–º–µ—Ä —à–∞–≥–∞:
        {
            "id": "send1",
            "type": "telegram_send_message",
            "params": {
                "chat_id": "{chat_id}",
                "text": "–ü—Ä–∏–≤–µ—Ç, {user_name}!",
                "parse_mode": "HTML",
                "reply_markup": {
                    "inline_keyboard": [
                        [{"text": "–ö–Ω–æ–ø–∫–∞", "callback_data": "action"}]
                    ]
                }
            }
        }
        """
        self.log_step_start(step)
        
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self.validate_required_params(step, ["chat_id", "text"])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            chat_id = self.get_param(step, "chat_id", required=True)
            text = self.get_param(step, "text", required=True)
            parse_mode = self.get_param(step, "parse_mode", default="HTML")
            reply_markup_data = self.get_param(step, "reply_markup", default=None)
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            resolved_chat_id = self.resolve_template(str(chat_id), context)
            resolved_text = self.resolve_template(text, context)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á—Ç–æ chat_id –Ω–µ None
            if resolved_chat_id == "None" or resolved_chat_id is None or resolved_chat_id == "{chat_id}":
                raise ValueError(f"chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(context.keys())}")
            
            # –°–æ–∑–¥–∞–µ–º reply_markup –µ—Å–ª–∏ –µ—Å—Ç—å
            reply_markup = None
            if reply_markup_data and "inline_keyboard" in reply_markup_data:
                keyboard = []
                for row in reply_markup_data["inline_keyboard"]:
                    keyboard_row = []
                    for button in row:
                        keyboard_row.append(InlineKeyboardButton(
                            text=button["text"],
                            callback_data=button["callback_data"]
                        ))
                    keyboard.append(keyboard_row)
                reply_markup = InlineKeyboardMarkup(keyboard)
            
            if self.bot is None:
                # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                self.logger.info(f"[–¢–ï–°–¢] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {resolved_chat_id}: {resolved_text}")
                if reply_markup_data:
                    self.logger.info(f"[–¢–ï–°–¢] –° –∫–Ω–æ–ø–∫–∞–º–∏: {reply_markup_data}")
                message_id = 12345  # –¢–µ—Å—Ç–æ–≤—ã–π message_id
            else:
                # –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = await self.bot.send_message(
                    chat_id=int(resolved_chat_id),
                    text=resolved_text,
                    parse_mode=parse_mode,
                    reply_markup=reply_markup
                )
                message_id = message.message_id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            result = self.update_context(context, {
                "message_id": message_id,
                "sent_text": resolved_text,
                "sent_to_chat": resolved_chat_id,
                "sent_with_buttons": reply_markup_data is not None
            }, prefix="telegram_")
            
            self.log_step_success(step, f"Message sent to {resolved_chat_id}")
            return result
            
        except Exception as e:
            self.log_step_error(step, e)
            raise
            
    async def handle_edit_message(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
        
        –ü—Ä–∏–º–µ—Ä —à–∞–≥–∞:
        {
            "id": "edit1",
            "type": "telegram_edit_message",
            "params": {
                "chat_id": "{chat_id}",
                "message_id": "{telegram_message_id}",
                "text": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
                "parse_mode": "HTML"
            }
        }
        """
        self.log_step_start(step)
        
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self.validate_required_params(step, ["chat_id", "message_id", "text"])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            chat_id = self.get_param(step, "chat_id", required=True)
            message_id = self.get_param(step, "message_id", required=True) 
            text = self.get_param(step, "text", required=True)
            parse_mode = self.get_param(step, "parse_mode", default="HTML")
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            resolved_chat_id = self.resolve_template(str(chat_id), context)
            resolved_message_id = self.resolve_template(str(message_id), context)
            resolved_text = self.resolve_template(text, context)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á—Ç–æ chat_id –Ω–µ None
            if resolved_chat_id == "None" or resolved_chat_id is None or resolved_chat_id == "{chat_id}":
                raise ValueError(f"chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(context.keys())}")
            
            if self.bot is None:
                # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Å–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.logger.info(f"[–¢–ï–°–¢] –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {resolved_message_id} –≤ —á–∞—Ç–µ {resolved_chat_id}: {resolved_text}")
            else:
                # –†–µ–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await self.bot.edit_message_text(
                    chat_id=int(resolved_chat_id),
                    message_id=int(resolved_message_id),
                    text=resolved_text,
                    parse_mode=parse_mode
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            result = self.update_context(context, {
                "edited_text": resolved_text,
                "edited_message_id": resolved_message_id
            }, prefix="telegram_")
            
            self.log_step_success(step, f"Message {resolved_message_id} edited in {resolved_chat_id}")
            return result
            
        except Exception as e:
            self.log_step_error(step, e)
            raise
            
    async def handle_send_buttons(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏.
        
        –ü—Ä–∏–º–µ—Ä —à–∞–≥–∞:
        {
            "id": "buttons1",
            "type": "telegram_send_buttons",
            "params": {
                "chat_id": "{chat_id}",
                "text": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                "buttons": [
                    [{"text": "–ö–Ω–æ–ø–∫–∞ 1", "callback_data": "action1"}],
                    [{"text": "–ö–Ω–æ–ø–∫–∞ 2", "callback_data": "action2"}]
                ]
            }
        }
        """
        self.log_step_start(step)
        
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self.validate_required_params(step, ["chat_id", "text", "buttons"])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            chat_id = self.get_param(step, "chat_id", required=True)
            text = self.get_param(step, "text", required=True)
            buttons = self.get_param(step, "buttons", required=True)
            parse_mode = self.get_param(step, "parse_mode", default="HTML")
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            resolved_chat_id = self.resolve_template(str(chat_id), context)
            resolved_text = self.resolve_template(text, context)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á—Ç–æ chat_id –Ω–µ None
            if resolved_chat_id == "None" or resolved_chat_id is None or resolved_chat_id == "{chat_id}":
                raise ValueError(f"chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(context.keys())}")
            
            if self.bot is None:
                # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                self.logger.info(f"[–¢–ï–°–¢] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —á–∞—Ç {resolved_chat_id}: {resolved_text}")
                self.logger.info(f"[–¢–ï–°–¢] –ö–Ω–æ–ø–∫–∏: {buttons}")
                message_id = 12346  # –¢–µ—Å—Ç–æ–≤—ã–π message_id
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = []
                for row in buttons:
                    keyboard_row = []
                    for button in row:
                        keyboard_row.append(InlineKeyboardButton(
                            text=button["text"],
                            callback_data=button["callback_data"]
                        ))
                    keyboard.append(keyboard_row)
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                message = await self.bot.send_message(
                    chat_id=int(resolved_chat_id),
                    text=resolved_text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
                message_id = message.message_id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            result = self.update_context(context, {
                "message_id": message_id,
                "sent_text": resolved_text,
                "sent_to_chat": resolved_chat_id,
                "sent_buttons": buttons
            }, prefix="telegram_")
            
            self.log_step_success(step, f"Message with buttons sent to {resolved_chat_id}")
            return result
            
        except Exception as e:
            self.log_step_error(step, e)
            raise
            
    def _create_inline_keyboard(self, buttons: List[List[Dict]], context: Dict[str, Any]) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        
        Args:
            buttons: –ú–∞—Å—Å–∏–≤ —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            
        Returns:
            InlineKeyboardMarkup: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        keyboard = []
        
        for row in buttons:
            keyboard_row = []
            for button in row:
                text = self.resolve_template(button.get("text", ""), context)
                callback_data = self.resolve_template(button.get("callback_data", ""), context)
                
                keyboard_row.append(
                    InlineKeyboardButton(text=text, callback_data=callback_data)
                )
            keyboard.append(keyboard_row)
            
        return InlineKeyboardMarkup(keyboard)
    
    async def handle_start_polling(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram polling –∫–∞–∫ —à–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è.
        
        –ü—Ä–∏–º–µ—Ä —à–∞–≥–∞:
        {
            "id": "start_polling",
            "type": "telegram_start_polling",
            "params": {
                "token": "{telegram_token}",
                "handlers": {
                    "/start": "atomic_01_user_check",
                    "message": "message_handler",
                    "callback_query": "callback_handler"
                },
                "channel_id": "{channel_id}"
            }
        }
        """
        self.log_step_start(step)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            token = self.get_param(step, "token", default=self.bot_token)
            handlers = self.get_param(step, "handlers", default={})
            channel_id = self.get_param(step, "channel_id", default=self.channel_id)
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            if token:
                resolved_token = self.resolve_template(str(token), context)
                if resolved_token != self.bot_token:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
                    self.bot_token = resolved_token
                    await self._do_initialize()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏–∏
            if handlers:
                self._command_scenarios.update(handlers)
                self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥: {self._command_scenarios}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            if not self._polling_task or self._polling_task.done():
                await self.start_polling()
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                handlers_count = 0
                if self.application and self.application.handlers:
                    handlers_count = len(self.application.handlers[0])  # –ì—Ä—É–ø–ø–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                elif hasattr(self, '_handlers_count'):
                    handlers_count = self._handlers_count  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                result = self.update_context(context, {
                    "polling_started": True,
                    "channel_id": channel_id,
                    "handlers_count": handlers_count,
                    "bot_token_set": bool(self.bot_token)
                }, prefix="telegram_")
                
                self.log_step_success(step, f"Polling started for channel {channel_id}")
                return result
            else:
                # Polling —É–∂–µ –∑–∞–ø—É—â–µ–Ω
                result = self.update_context(context, {
                    "polling_already_running": True,
                    "channel_id": channel_id
                }, prefix="telegram_")
                
                self.log_step_success(step, f"Polling already running for channel {channel_id}")
                return result
                
        except Exception as e:
            self.log_step_error(step, e)
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—à–∏–±–∫–æ–π
            result = self.update_context(context, {
                "polling_error": str(e),
                "polling_started": False
            }, prefix="telegram_")
            return result
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–û–ö–ï–ù–ê–ú–ò ===
    
    async def handle_update_token(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ë–î.
        
        –ü—Ä–∏–º–µ—Ä —à–∞–≥–∞:
        {
            "id": "update_token",
            "type": "telegram_update_token",
            "params": {
                "bot_token": "1234567890:ABCDEF...",
                "scenario_id": "main_scenario"
            }
        }
        """
        self.log_step_start(step)
        
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self.validate_required_params(step, ["bot_token"])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            bot_token = self.get_param(step, "bot_token", required=True)
            scenario_id = self.get_param(step, "scenario_id")
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            resolved_token = self.resolve_template(bot_token, context)
            resolved_scenario_id = self.resolve_template(scenario_id or "default_scenario", context)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
            success = await self.update_bot_token(resolved_token, resolved_scenario_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            result = self.update_context(context, {
                "token_updated": success,
                "new_token_set": success,
                "channel_id": self.channel_id
            }, prefix="telegram_")
            
            if success:
                self.log_step_success(step, f"Token updated for channel {self.channel_id}")
            else:
                self.log_step_error(step, "Failed to update token")
                
            return result
            
        except Exception as e:
            self.log_step_error(step, e)
            raise
    
    async def handle_load_token(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ë–î.
        
        –ü—Ä–∏–º–µ—Ä —à–∞–≥–∞:
        {
            "id": "load_token",
            "type": "telegram_load_token",
            "params": {
                "channel_id": "telegram_bot"
            }
        }
        """
        self.log_step_start(step)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            channel_id = self.get_param(step, "channel_id", default=self.channel_id)
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            resolved_channel_id = self.resolve_template(channel_id, context)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π channel_id
            old_channel_id = self.channel_id
            self.channel_id = resolved_channel_id
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
            await self._load_token_from_db()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            result = self.update_context(context, {
                "token_loaded": bool(self.bot_token),
                "channel_id": self.channel_id,
                "bot_token_available": bool(self.bot_token)
            }, prefix="telegram_")
            
            if self.bot_token:
                self.log_step_success(step, f"Token loaded for channel {self.channel_id}")
            else:
                self.log_step_error(step, f"No token found for channel {self.channel_id}")
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π channel_id –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
                self.channel_id = old_channel_id
                
            return result
            
        except Exception as e:
            self.log_step_error(step, e)
            raise


# === –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ===

async def example_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SimpleTelegramPlugin."""
    from app.core.simple_engine import SimpleScenarioEngine
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    engine = SimpleScenarioEngine()
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
    plugin = SimpleTelegramPlugin()
    await plugin.initialize()
    engine.register_plugin(plugin)
    
    # –ü—Ä–∏–º–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
    scenario = {
        "scenario_id": "telegram_demo",
        "steps": [
            {
                "id": "start",
                "type": "start",
                "next_step": "send_welcome"
            },
            {
                "id": "send_welcome",
                "type": "telegram_send_message",
                "params": {
                    "chat_id": "{chat_id}",
                    "text": "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!"
                },
                "next_step": "send_buttons"
            },
            {
                "id": "send_buttons",
                "type": "telegram_send_buttons",
                "params": {
                    "chat_id": "{chat_id}",
                    "text": "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                    "buttons": [
                        [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "stats"}],
                        [{"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "settings"}],
                        [{"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "help"}]
                    ]
                },
                "next_step": "end"
            },
            {
                "id": "end",
                "type": "end"
            }
        ]
    }
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç
    context = {
        "chat_id": "123456789",
        "user_name": "–ò–≤–∞–Ω"
    }
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    result = await engine.execute_scenario(scenario, context)
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç:", result)


if __name__ == "__main__":
    import asyncio
    asyncio.run(example_usage()) 