#!/usr/bin/env python3
"""
üî• –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ê–°–¢–†–û–ï–ö –¢–ï–†–ú–ò–ù–ê–õ–ê CURSOR
================================================================
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
- terminal.integrated.inheritEnv: false ‚Üí true  
- terminal.integrated.gpuAcceleration: "off" ‚Üí "auto"
"""

import sys
import time
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.append('.')

def test_basic_environment():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –¢–ï–°–¢ –ë–ê–ó–û–í–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("-" * 40)
    
    import os
    print(f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {sys.version.split()[0]}")
    print(f"‚úÖ Virtual env: {os.environ.get('VIRTUAL_ENV', '–ù–ï–¢')}")
    print(f"‚úÖ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {Path.cwd()}")
    print(f"‚úÖ PATH —Å–æ–¥–µ—Ä–∂–∏—Ç .venv: {'.venv' in os.environ.get('PATH', '')}")
    print()

def test_kittycore_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ KittyCore"""
    print("üì¶ –¢–ï–°–¢ –ò–ú–ü–û–†–¢–ê KITTYCORE")
    print("-" * 40)
    
    try:
        from kittycore.tools.media_tool import MediaTool
        from kittycore.tools.computer_use_tool import ComputerUseTool
        from kittycore.tools.network_tool import NetworkTool
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–µ–Ω")
        
        # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç MediaTool
        media = MediaTool()
        result = media.execute(action='list_formats')
        if hasattr(result, 'data') and result.data:
            formats_count = len(result.data.get('formats', []))
            print(f"‚úÖ MediaTool —Ä–∞–±–æ—Ç–∞–µ—Ç: {formats_count} —Ñ–æ—Ä–º–∞—Ç–æ–≤")
        else:
            print("‚ö†Ô∏è MediaTool: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
        print()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print()
        return False

async def test_async_tools():
    """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("‚ö° –¢–ï–°–¢ –ê–°–ò–ù–•–†–û–ù–ù–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    print("-" * 40)
    
    try:
        from kittycore.tools.network_tool import NetworkTool
        
        network = NetworkTool()
        start_time = time.time()
        
        # –ü—Ä–æ—Å—Ç–æ–π ping —Ç–µ—Å—Ç
        result = await network.execute(action='ping_host', host='8.8.8.8', count=1)
        elapsed = time.time() - start_time
        
        if hasattr(result, 'success') and result.success:
            print(f"‚úÖ NetworkTool ping: —É—Å–ø–µ—Ö –∑–∞ {elapsed:.2f}—Å")
        else:
            print(f"‚ö†Ô∏è NetworkTool ping: {result}")
            
        print()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ async —Ç–µ—Å—Ç–∞: {e}")
        print()
        return False

def test_gui_functionality():
    """–¢–µ—Å—Ç GUI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("üñ•Ô∏è –¢–ï–°–¢ GUI –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
    print("-" * 40)
    
    try:
        from kittycore.tools.computer_use_tool import ComputerUseTool
        
        computer = ComputerUseTool()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —ç–∫—Ä–∞–Ω–µ
        result = computer.execute(action='get_screen_info')
        if hasattr(result, 'success') and result.success:
            screen_info = result.data.get('screen_info', {})
            width = screen_info.get('width', 'unknown')
            height = screen_info.get('height', 'unknown')
            print(f"‚úÖ –≠–∫—Ä–∞–Ω: {width}x{height}")
        else:
            print(f"‚ö†Ô∏è –≠–∫—Ä–∞–Ω: {result}")
            
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏
        result = computer.execute(action='get_mouse_position')
        if hasattr(result, 'success') and result.success:
            pos = result.data
            print(f"‚úÖ –ú—ã—à—å: ({pos.get('x', '?')}, {pos.get('y', '?')})")
        else:
            print(f"‚ö†Ô∏è –ú—ã—à—å: {result}")
            
        print()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GUI —Ç–µ—Å—Ç–∞: {e}")
        print()
        return False

def test_file_operations():
    """–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("üìÅ –¢–ï–°–¢ –§–ê–ô–õ–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô")
    print("-" * 40)
    
    try:
        test_file = Path("/tmp/kittycore_terminal_test.txt")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        test_file.write_text("KittyCore 3.0 terminal test ‚úÖ")
        if test_file.exists():
            print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {test_file}")
            
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        content = test_file.read_text()
        if "KittyCore" in content:
            print(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        test_file.unlink()
        if not test_file.exists():
            print("‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω")
            
        print()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        print()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üî• –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–ï–†–ú–ò–ù–ê–õ–ê")
    print("=" * 60)
    print()
    
    start_time = time.time()
    results = []
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    results.append(("–ë–∞–∑–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ", test_basic_environment()))
    results.append(("–ò–º–ø–æ—Ä—Ç KittyCore", test_kittycore_import()))
    results.append(("Async –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", await test_async_tools()))
    results.append(("GUI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", test_gui_functionality()))
    results.append(("–§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", test_file_operations()))
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_time = time.time() - start_time
    successful = sum(1 for _, success in results if success)
    total = len(results)
    
    print("=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 60)
    
    for name, success in results:
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {name}")
    
    print()
    print(f"üéØ –£—Å–ø–µ—à–Ω–æ: {successful}/{total} ({successful/total*100:.1f}%)")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {total_time:.2f}—Å")
    
    if successful == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –¢–µ—Ä–º–∏–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    
    print()
    print("üí° –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ Cursor:")
    print("   ‚úÖ inheritEnv: false ‚Üí true")
    print("   ‚úÖ gpuAcceleration: off ‚Üí auto")
    print("   ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main()) 