#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ KittyCore 3.0

–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
- ‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
- ‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å  
- ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ
"""

import asyncio
import logging
from pathlib import Path
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

async def test_metrics_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –º–µ—Ç—Ä–∏–∫...")
    
    try:
        from kittycore.core.agent_metrics import MetricsCollector, TaskStatus, get_metrics_collector
        
        # –°–æ–∑–¥–∞—ë–º —Å–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫
        collector = get_metrics_collector()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task_metric = collector.start_task_tracking(
            task_id="test_task_001", 
            agent_id="test_agent", 
            task_description="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç—Ä–∏–∫"
        )
        
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞—á–∞—Ç–∞: {task_metric.task_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        collector.update_task_progress("test_task_001", TaskStatus.IN_PROGRESS)
        print("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
        collector.complete_task(
            task_id="test_task_001",
            quality_score=0.8,
            artifacts_created=2,
            errors=["–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞"],
            tools_used=["file_writer", "code_generator"],
            llm_calls=3
        )
        
        print("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞
        agent_metrics = collector.get_agent_performance("test_agent")
        if agent_metrics:
            print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞: –∫–∞—á–µ—Å—Ç–≤–æ {agent_metrics.average_quality:.2f}, –∑–∞–¥–∞—á {agent_metrics.total_tasks}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        return False

async def test_vector_memory():
    """–¢–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ø–∞–º—è—Ç—å...")
    
    try:
        from kittycore.memory.vector_memory import VectorMemoryStore
        
        # –°–æ–∑–¥–∞—ë–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        store = VectorMemoryStore("test_vector_storage")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        test_docs_path = Path("test_documents")
        test_docs_path.mkdir(exist_ok=True)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        test_file = test_docs_path / "test_doc.md"
        test_file.write_text("""
# –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
–°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–∞—Ö –∏ –∏—Ö –ø–ª–æ—â–∞–¥–∏.

## –§–æ—Ä–º—É–ª–∞ –ø–ª–æ—â–∞–¥–∏ –∫–æ—Ç–∞

–ü–ª–æ—â–∞–¥—å –∫–æ—Ç–∞ –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
A = œÄ * r¬≤

–ì–¥–µ r - —Ä–∞–¥–∏—É—Å –∫–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∫–æ—è.
""", encoding='utf-8')
        
        # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        indexed_count = await store.index_documents(test_docs_path)
        print(f"‚úÖ –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {indexed_count}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        if indexed_count > 0:
            results = await store.search("–ø–ª–æ—â–∞–¥—å –∫–æ—Ç–∞", limit=3)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            
            if results:
                best_result = results[0]
                print(f"‚úÖ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_result.document.title} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {best_result.similarity_score:.2f})")
        
        # –û—á–∏—Å—Ç–∫–∞
        import shutil
        shutil.rmtree(test_docs_path, ignore_errors=True)
        shutil.rmtree("test_vector_storage", ignore_errors=True)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏: {e}")
        return False

async def test_quality_controller():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞...")
    
    try:
        from kittycore.core.quality_controller import QualityController
        
        controller = QualityController()
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        test_artifacts_path = Path("test_artifacts")
        test_artifacts_path.mkdir(exist_ok=True)
        
        # –•–æ—Ä–æ—à–∏–π —Ñ–∞–π–ª
        good_file = test_artifacts_path / "good_result.txt"
        good_file.write_text("–≠—Ç–æ –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã. –§–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.", encoding='utf-8')
        
        # –ü–ª–æ—Ö–æ–π —Ñ–∞–π–ª —Å –ø–ª–∞–Ω–∞–º–∏
        bad_file = test_artifacts_path / "bad_result.txt"
        bad_file.write_text("–ü–ª–∞–Ω: –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ñ–∞–π–ª. TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ. –ü–ª–∞–Ω–∏—Ä—É—é —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É.", encoding='utf-8')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
        assessment = await controller.assess_quality(
            task_description="–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á—ë—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –∫–æ—Ç–∞",
            result={"status": "completed", "message": "–§–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"},
            artifacts_paths=[good_file, bad_file]
        )
        
        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {assessment.verdict} ({assessment.overall_score:.2f}/1.0)")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {assessment.passed_checks}/{assessment.total_checks}")
        
        if assessment.fatal_issues:
            print(f"‚ö†Ô∏è –§–∞—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {len(assessment.fatal_issues)}")
        
        # –û—á–∏—Å—Ç–∫–∞
        import shutil
        shutil.rmtree(test_artifacts_path, ignore_errors=True)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ KittyCore 3.0\n")
    
    results = []
    
    # –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫
    results.append(await test_metrics_system())
    print()
    
    # –¢–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏  
    results.append(await test_vector_memory())
    print()
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    results.append(await test_quality_controller())
    print()
    
    # –ò—Ç–æ–≥–∏
    passed = sum(results)
    total = len(results)
    
    print("=" * 50)
    print(f"üéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
    
    print("=" * 50)

if __name__ == "__main__":
    asyncio.run(main()) 