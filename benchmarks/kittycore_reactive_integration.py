#!/usr/bin/env python3
"""
üîÑ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ï–ê–ö–¢–ò–í–ù–û–ì–û –ë–ï–ù–ß–ú–ê–†–ö–ê –° KITTYCORE 3.0
–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≥–µ–Ω—Ç–∞–º–∏ KittyCore
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.append(str(Path(__file__).parent.parent))

from typing import List, Dict, Any
from reactive_benchmark_concept import VirtualTaster, TasteReaction, TasterFeedback
from adaptive_cooking_agent import AdaptiveCookingAgent

class KittyCoreReactiveAgent:
    """–ê–≥–µ–Ω—Ç KittyCore –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
    
    def __init__(self, agent_name: str):
        self.agent_name = agent_name
        self.attempt_count = 0
        self.memory = {
            "successful_recipes": [],
            "failed_recipes": [],
            "ingredient_scores": {},
            "technique_scores": {},
            "taster_preferences": {}
        }
    
    async def cook_dish(self, dish_request: str, tasters: List[VirtualTaster]) -> Dict[str, Any]:
        """–ì–æ—Ç–æ–≤–∏—Ç –±–ª—é–¥–æ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏–Ω—Ü–∏–ø—ã KittyCore"""
        
        self.attempt_count += 1
        
        print(f"ü§ñ {self.agent_name} (KittyCore) –≥–æ—Ç–æ–≤–∏—Ç: {dish_request}")
        
        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É (–∏–º–∏—Ç–∞—Ü–∏—è TaskAnalyzer)
        task_complexity = await self._analyze_task_complexity(dish_request)
        
        # 2. –°–æ–∑–¥–∞—ë–º —Ä–µ—Ü–µ–ø—Ç —Å —É—á—ë—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø–∞–º—è—Ç–∏
        recipe_data = await self._create_smart_recipe(dish_request, task_complexity)
        
        print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏: {task_complexity}")
        print(f"   –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {recipe_data['ingredients']}")
        print(f"   –¢–µ—Ö–Ω–∏–∫–∞: {recipe_data['technique']}")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –¥–µ–≥—É—Å—Ç–∞—Ç–æ—Ä–æ–≤
        feedbacks = []
        for taster in tasters:
            # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è –¥–µ–≥—É—Å—Ç–∞—Ç–æ—Ä–∞
            from reactive_benchmark_concept import Recipe
            recipe = Recipe(
                name=recipe_data['name'],
                ingredients=recipe_data['ingredients'],
                cooking_time=recipe_data['time'],
                temperature=recipe_data['temperature'],
                technique=recipe_data['technique']
            )
            
            feedback = taster.taste_dish(recipe)
            feedbacks.append(feedback)
            print(f"   {feedback.taster_id}: {feedback.reaction.value} ({feedback.score}/5) - {feedback.comment}")
        
        # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        avg_score = sum(f.score for f in feedbacks) / len(feedbacks)
        success = avg_score >= 4.0
        
        # 5. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–æ—Ö–æ–π, –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
        if avg_score < 3.5 and self.attempt_count <= 3:
            print(f"   üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π ({avg_score:.1f}/5.0), –ø—Ä–∏–º–µ–Ω—è—é —É–ª—É—á—à–µ–Ω–∏—è...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–¥–±–µ–∫ –∏ —É–ª—É—á—à–∞–µ–º —Ä–µ—Ü–µ–ø—Ç
            improved_recipe = await self._improve_recipe(recipe_data, feedbacks)
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
            improved_feedbacks = []
            for taster in tasters:
                improved_recipe_obj = Recipe(
                    name=improved_recipe['name'],
                    ingredients=improved_recipe['ingredients'],
                    cooking_time=improved_recipe['time'],
                    temperature=improved_recipe['temperature'],
                    technique=improved_recipe['technique']
                )
                
                feedback = taster.taste_dish(improved_recipe_obj)
                improved_feedbacks.append(feedback)
            
            improved_avg_score = sum(f.score for f in improved_feedbacks) / len(improved_feedbacks)
            
            if improved_avg_score > avg_score:
                print(f"   ‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! {avg_score:.1f} ‚Üí {improved_avg_score:.1f}")
                recipe_data = improved_recipe
                feedbacks = improved_feedbacks
                avg_score = improved_avg_score
                success = avg_score >= 4.0
            else:
                print(f"   ‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ: {improved_avg_score:.1f}")
        
        # 6. –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å (–∏–º–∏—Ç–∞—Ü–∏—è AgentLearningSystem)
        await self._update_memory(recipe_data, avg_score, success, feedbacks)
        
        print(f"   üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_score:.1f}/5.0 ({'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –ù–µ—É–¥–∞—á–∞'})")
        
        return {
            "attempt_id": f"kittycore_attempt_{self.attempt_count}",
            "recipe": recipe_data,
            "feedbacks": [
                {
                    "taster": f.taster_id,
                    "score": f.score,
                    "reaction": f.reaction.value,
                    "comment": f.comment
                }
                for f in feedbacks
            ],
            "avg_score": avg_score,
            "success": success
        }
    
    async def _analyze_task_complexity(self, dish_request: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        
        complex_dishes = ["—Å—É–ø", "—Å—Ç–µ–π–∫", "—Ä–∏–∑–æ—Ç—Ç–æ", "—Å—É—Ñ–ª–µ"]
        simple_dishes = ["—Å–∞–ª–∞—Ç", "–±—É—Ç–µ—Ä–±—Ä–æ–¥", "—Å–º—É–∑–∏"]
        
        dish_lower = dish_request.lower()
        
        if any(complex_dish in dish_lower for complex_dish in complex_dishes):
            return "–≤—ã—Å–æ–∫–∞—è"
        elif any(simple_dish in dish_lower for simple_dish in simple_dishes):
            return "–Ω–∏–∑–∫–∞—è"
        else:
            return "—Å—Ä–µ–¥–Ω—è—è"
    
    async def _create_smart_recipe(self, dish_request: str, complexity: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—ë—Ç —É–º–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç —Å —É—á—ë—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø–∞–º—è—Ç–∏"""
        
        # –ë–∞–∑–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
        base_recipes = {
            "–ø–∞—Å—Ç–∞": {
                "ingredients": {"–º–∞–∫–∞—Ä–æ–Ω—ã": 200, "—Ç–æ–º–∞—Ç—ã": 150, "—Å—ã—Ä": 50, "–æ–ª–∏–≤–∫–æ–≤–æ–µ_–º–∞—Å–ª–æ": 30},
                "technique": "–≤–∞—Ä–∫–∞",
                "time": 15,
                "temp": 100
            },
            "—Å—Ç–µ–π–∫": {
                "ingredients": {"–≥–æ–≤—è–¥–∏–Ω–∞": 300, "—Å–æ–ª—å": 5, "–ø–µ—Ä–µ—Ü": 3, "–º–∞—Å–ª–æ": 20},
                "technique": "–∂–∞—Ä–∫–∞",
                "time": 10,
                "temp": 200
            },
            "—Å–∞–ª–∞—Ç": {
                "ingredients": {"—Å–∞–ª–∞—Ç": 100, "–ø–æ–º–∏–¥–æ—Ä—ã": 80, "–æ–≥—É—Ä—Ü—ã": 60, "–æ–ª–∏–≤–∫–æ–≤–æ–µ_–º–∞—Å–ª–æ": 20},
                "technique": "—Å–º–µ—à–∏–≤–∞–Ω–∏–µ",
                "time": 5,
                "temp": 20
            },
            "—Å—É–ø": {
                "ingredients": {"–±—É–ª—å–æ–Ω": 500, "–æ–≤–æ—â–∏": 200, "–º—è—Å–æ": 150, "—Å–æ–ª—å": 8},
                "technique": "–≤–∞—Ä–∫–∞",
                "time": 30,
                "temp": 90
            }
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–ª—é–¥–∞
        dish_type = "–ø–∞—Å—Ç–∞"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for dish in base_recipes.keys():
            if dish in dish_request.lower():
                dish_type = dish
                break
        
        base = base_recipes[dish_type]
        ingredients = base["ingredients"].copy()
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if complexity == "–≤—ã—Å–æ–∫–∞—è":
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∂–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
            if dish_type == "—Å—Ç–µ–π–∫":
                ingredients["—Ç—Ä—é—Ñ–µ–ª–∏"] = 10
                ingredients["–≤–∏–Ω–æ"] = 50
            elif dish_type == "—Å—É–ø":
                ingredients["—Å–ø–µ—Ü–∏–∏"] = 15
                ingredients["–∑–µ–ª–µ–Ω—å"] = 30
        elif complexity == "–Ω–∏–∑–∫–∞—è":
            # –£–ø—Ä–æ—â–∞–µ–º —Ä–µ—Ü–µ–ø—Ç
            ingredients = {k: v for k, v in ingredients.items() if v > 50}  # —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
        if self.memory["ingredient_scores"]:
            for ingredient, amount in list(ingredients.items()):
                if ingredient in self.memory["ingredient_scores"]:
                    score = self.memory["ingredient_scores"][ingredient]
                    if score > 3.5:  # —Ö–æ—Ä–æ—à–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
                        ingredients[ingredient] = amount * 1.3
                    elif score < 2.5:  # –ø–ª–æ—Ö–æ–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
                        ingredients[ingredient] = amount * 0.7
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é —Ç–µ—Ö–Ω–∏–∫—É –∏–∑ –ø–∞–º—è—Ç–∏
        technique = base["technique"]
        if self.memory["technique_scores"]:
            best_technique = max(self.memory["technique_scores"].items(), key=lambda x: x[1])
            if best_technique[1] > 3.5:
                technique = best_technique[0]
        
        return {
            "name": f"{dish_request}_{self.attempt_count}",
            "ingredients": ingredients,
            "technique": technique,
            "time": base["time"],
            "temperature": base["temp"]
        }
    
    async def _improve_recipe(self, recipe_data: Dict, feedbacks: List[TasterFeedback]) -> Dict[str, Any]:
        """–£–ª—É—á—à–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        
        improved_recipe = recipe_data.copy()
        improved_recipe["name"] = f"{recipe_data['name']}_improved"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–¥–±–µ–∫
        avg_score = sum(f.score for f in feedbacks) / len(feedbacks)
        low_scores = [f for f in feedbacks if f.score <= 2]
        
        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –Ω–∏–∑–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫, –º–µ–Ω—è–µ–º —Ç–µ—Ö–Ω–∏–∫—É
        if len(low_scores) >= 2:
            technique_alternatives = {
                "–≤–∞—Ä–∫–∞": "—Ç—É—à–µ–Ω–∏–µ",
                "–∂–∞—Ä–∫–∞": "–∑–∞–ø–µ–∫–∞–Ω–∏–µ",
                "–∑–∞–ø–µ–∫–∞–Ω–∏–µ": "–≥—Ä–∏–ª—å",
                "—Ç—É—à–µ–Ω–∏–µ": "–≤–∞—Ä–∫–∞",
                "—Å–º–µ—à–∏–≤–∞–Ω–∏–µ": "—Å–º–µ—à–∏–≤–∞–Ω–∏–µ"  # –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–µ–º –∂–µ
            }
            
            current_technique = improved_recipe["technique"]
            if current_technique in technique_alternatives:
                improved_recipe["technique"] = technique_alternatives[current_technique]
                print(f"     üîÑ –ú–µ–Ω—è—é —Ç–µ—Ö–Ω–∏–∫—É: {current_technique} ‚Üí {improved_recipe['technique']}")
        
        # –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∏ –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º "—É–ª—É—á—à–∞—é—â–∏–µ" –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        if avg_score < 2.5:
            improvement_ingredients = {
                "—Å–ø–µ—Ü–∏–∏": 10,
                "–∑–µ–ª–µ–Ω—å": 20,
                "–ª–∏–º–æ–Ω": 15
            }
            
            for ingredient, amount in improvement_ingredients.items():
                if ingredient not in improved_recipe["ingredients"]:
                    improved_recipe["ingredients"][ingredient] = amount
                    print(f"     ‚ûï –î–æ–±–∞–≤–ª—è—é {ingredient}: {amount}")
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –¥–µ–≥—É—Å—Ç–∞—Ç–æ—Ä–æ–≤
        for feedback in feedbacks:
            if feedback.score <= 2:
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã—Ö –¥–µ–≥—É—Å—Ç–∞—Ç–æ—Ä–æ–≤
                for ingredient in list(improved_recipe["ingredients"].keys()):
                    if "–º—è—Å–æ" in ingredient.lower() and "–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω–∫–∞" in feedback.taster_id:
                        improved_recipe["ingredients"][ingredient] *= 0.5
                        print(f"     üìâ –£–º–µ–Ω—å—à–∞—é {ingredient} –¥–ª—è {feedback.taster_id}")
                    elif "—Å–∞—Ö–∞—Ä" in ingredient.lower() and "–≥—É—Ä–º–∞–Ω" in feedback.taster_id:
                        improved_recipe["ingredients"][ingredient] *= 0.8
                        print(f"     üìâ –£–º–µ–Ω—å—à–∞—é {ingredient} –¥–ª—è {feedback.taster_id}")
        
        return improved_recipe
    
    async def _update_memory(self, recipe_data: Dict, avg_score: float, success: bool, feedbacks: List):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–∞"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        if success:
            self.memory["successful_recipes"].append(recipe_data)
            self.memory["successful_recipes"] = self.memory["successful_recipes"][-5:]
        else:
            self.memory["failed_recipes"].append(recipe_data)
            self.memory["failed_recipes"] = self.memory["failed_recipes"][-5:]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        for ingredient in recipe_data["ingredients"]:
            if ingredient not in self.memory["ingredient_scores"]:
                self.memory["ingredient_scores"][ingredient] = avg_score
            else:
                current = self.memory["ingredient_scores"][ingredient]
                self.memory["ingredient_scores"][ingredient] = (current + avg_score) / 2
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏ —Ç–µ—Ö–Ω–∏–∫
        technique = recipe_data["technique"]
        if technique not in self.memory["technique_scores"]:
            self.memory["technique_scores"][technique] = avg_score
        else:
            current = self.memory["technique_scores"][technique]
            self.memory["technique_scores"][technique] = (current + avg_score) / 2
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–µ–≥—É—Å—Ç–∞—Ç–æ—Ä–æ–≤
        for feedback in feedbacks:
            taster_id = feedback.taster_id
            if taster_id not in self.memory["taster_preferences"]:
                self.memory["taster_preferences"][taster_id] = {}
            
            for ingredient in recipe_data["ingredients"]:
                if ingredient not in self.memory["taster_preferences"][taster_id]:
                    self.memory["taster_preferences"][taster_id][ingredient] = feedback.score
                else:
                    current = self.memory["taster_preferences"][taster_id][ingredient]
                    self.memory["taster_preferences"][taster_id][ingredient] = (current + feedback.score) / 2
    
    def get_learning_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è"""
        
        return {
            "total_attempts": self.attempt_count,
            "successful_recipes": len(self.memory["successful_recipes"]),
            "failed_recipes": len(self.memory["failed_recipes"]),
            "known_ingredients": len(self.memory["ingredient_scores"]),
            "known_techniques": len(self.memory["technique_scores"]),
            "known_tasters": len(self.memory.get("taster_preferences", {})),
            "best_ingredients": sorted(
                self.memory["ingredient_scores"].items(),
                key=lambda x: x[1],
                reverse=True
            )[:3],
            "best_techniques": sorted(
                self.memory["technique_scores"].items(),
                key=lambda x: x[1],
                reverse=True
            )[:3]
        }

async def run_kittycore_reactive_benchmark():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫ —Å –∞–≥–µ–Ω—Ç–æ–º KittyCore"""
    
    print("ü§ñ –†–ï–ê–ö–¢–ò–í–ù–´–ô –ë–ï–ù–ß–ú–ê–†–ö –° KITTYCORE 3.0")
    print("=" * 50)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞
    from reactive_benchmark_concept import SAMPLE_TASTERS
    from reactive_cooking_benchmark import ReactiveCookingBenchmark
    
    # –°–æ–∑–¥–∞—ë–º KittyCore –∞–≥–µ–Ω—Ç–∞
    kittycore_agent = KittyCoreReactiveAgent("KittyCore_Chef")
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –±–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è KittyCore
    class KittyCoreReactiveBenchmark(ReactiveCookingBenchmark):
        def __init__(self):
            super().__init__()
            # –£–ø—Ä–æ—â–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            self.test_scenarios = [
                "–ü—Ä–∏–≥–æ—Ç–æ–≤—å –ø–∞—Å—Ç—É",
                "–°–¥–µ–ª–∞–π —Å—Ç–µ–π–∫",
                "–ü—Ä–∏–≥–æ—Ç–æ–≤—å —Å–∞–ª–∞—Ç",
                "–ü—Ä–∏–≥–æ—Ç–æ–≤—å –ø–∞—Å—Ç—É"  # –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—É—á–µ–Ω–∏—è
            ]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫
    benchmark = KittyCoreReactiveBenchmark()
    results = await benchmark.run_benchmark(kittycore_agent)
    
    print(f"\nüéâ KITTYCORE –†–ï–ê–ö–¢–ò–í–ù–´–ô –ë–ï–ù–ß–ú–ê–†–ö –ó–ê–í–ï–†–®–Å–ù!")
    
    return results

if __name__ == "__main__":
    asyncio.run(run_kittycore_reactive_benchmark()) 