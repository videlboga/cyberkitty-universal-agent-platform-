#!/usr/bin/env python3
"""
üîÑ –†–ï–ê–ö–¢–ò–í–ù–´–ô –ö–£–õ–ò–ù–ê–†–ù–´–ô –ë–ï–ù–ß–ú–ê–†–ö
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import time
from typing import List, Dict, Any
from reactive_benchmark_concept import SAMPLE_TASTERS, VirtualTaster
from adaptive_cooking_agent import AdaptiveCookingAgent

class ReactiveCookingBenchmark:
    """–ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.tasters = SAMPLE_TASTERS
        self.test_scenarios = [
            "–ü—Ä–∏–≥–æ—Ç–æ–≤—å –ø–∞—Å—Ç—É",
            "–°–¥–µ–ª–∞–π —Å—Ç–µ–π–∫", 
            "–ü—Ä–∏–≥–æ—Ç–æ–≤—å —Å–∞–ª–∞—Ç",
            "–°–≤–∞—Ä–∏ —Å—É–ø",
            "–ü—Ä–∏–≥–æ—Ç–æ–≤—å –ø–∞—Å—Ç—É",  # –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—É—á–µ–Ω–∏—è
            "–°–¥–µ–ª–∞–π —Å—Ç–µ–π–∫"      # –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—É—á–µ–Ω–∏—è
        ]
    
    async def run_benchmark(self, agent: AdaptiveCookingAgent) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫"""
        
        print("üîÑ –ó–ê–ü–£–°–ö –†–ï–ê–ö–¢–ò–í–ù–û–ì–û –ö–£–õ–ò–ù–ê–†–ù–û–ì–û –ë–ï–ù–ß–ú–ê–†–ö–ê")
        print("=" * 60)
        
        results = {
            "agent_name": agent.agent_name,
            "total_scenarios": len(self.test_scenarios),
            "attempts": [],
            "learning_progression": [],
            "final_stats": {},
            "benchmark_time": 0
        }
        
        start_time = time.time()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        for i, scenario in enumerate(self.test_scenarios, 1):
            print(f"\nüéØ –°–¶–ï–ù–ê–†–ò–ô {i}/{len(self.test_scenarios)}: {scenario}")
            print("-" * 40)
            
            # –ì–æ—Ç–æ–≤–∏–º –±–ª—é–¥–æ
            attempt = await agent.cook_dish(scenario, self.tasters)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
            if hasattr(attempt, 'attempt_id'):  # –û–±—ã—á–Ω—ã–π –∞–≥–µ–Ω—Ç
                results["attempts"].append({
                    "scenario": scenario,
                    "attempt_id": attempt.attempt_id,
                    "avg_score": attempt.avg_score,
                    "success": attempt.success,
                    "feedbacks": [
                        {
                            "taster": f.taster_id,
                            "score": f.score,
                            "reaction": f.reaction.value,
                            "comment": f.comment
                        }
                        for f in attempt.feedbacks
                    ]
                })
            else:  # KittyCore –∞–≥–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
                results["attempts"].append({
                    "scenario": scenario,
                    "attempt_id": attempt["attempt_id"],
                    "avg_score": attempt["avg_score"],
                    "success": attempt["success"],
                    "feedbacks": attempt["feedbacks"]
                })
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
            stats = agent.get_learning_stats()
            avg_score = attempt["avg_score"] if isinstance(attempt, dict) else attempt.avg_score
            results["learning_progression"].append({
                "attempt_number": i,
                "total_attempts": stats["total_attempts"],
                "successful_recipes": stats["successful_recipes"],
                "known_ingredients": stats["known_ingredients"],
                "known_techniques": stats["known_techniques"],
                "avg_score": avg_score
            })
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            await asyncio.sleep(0.1)
        
        end_time = time.time()
        results["benchmark_time"] = end_time - start_time
        results["final_stats"] = agent.get_learning_stats()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await self._analyze_results(results)
        
        return results
    
    async def _analyze_results(self, results: Dict[str, Any]):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞"""
        
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ë–ï–ù–ß–ú–ê–†–ö–ê")
        print("=" * 50)
        
        attempts = results["attempts"]
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_attempts = len(attempts)
        successful_attempts = sum(1 for a in attempts if a["success"])
        avg_score = sum(a["avg_score"] for a in attempts) / total_attempts
        
        print(f"üéØ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total_attempts}")
        print(f"   - –£—Å–ø–µ—à–Ω—ã—Ö: {successful_attempts} ({successful_attempts/total_attempts*100:.1f}%)")
        print(f"   - –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_score:.2f}/5.0")
        print(f"   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {results['benchmark_time']:.2f}—Å")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
        progression = results["learning_progression"]
        if len(progression) >= 6:
            first_half_avg = sum(p["avg_score"] for p in progression[:3]) / 3
            second_half_avg = sum(p["avg_score"] for p in progression[3:]) / 3
        elif len(progression) >= 2:
            first_half_avg = progression[0]["avg_score"]
            second_half_avg = progression[-1]["avg_score"]
        else:
            first_half_avg = second_half_avg = progression[0]["avg_score"] if progression else 0
        improvement = second_half_avg - first_half_avg
        
        print(f"\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è:")
        print(f"   - –ü–µ—Ä–≤—ã–µ 3 –ø–æ–ø—ã—Ç–∫–∏: {first_half_avg:.2f}/5.0")
        print(f"   - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–æ–ø—ã—Ç–∫–∏: {second_half_avg:.2f}/5.0")
        print(f"   - –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:+.2f} ({'‚úÖ –û–±—É—á–∞–µ—Ç—Å—è' if improvement > 0 else '‚ùå –ù–µ –æ–±—É—á–∞–µ—Ç—Å—è'})")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–¥–∞—á
        pasta_attempts = [a for a in attempts if "–ø–∞—Å—Ç–∞" in a["scenario"].lower()]
        steak_attempts = [a for a in attempts if "—Å—Ç–µ–π–∫" in a["scenario"].lower()]
        
        if len(pasta_attempts) > 1:
            pasta_improvement = pasta_attempts[-1]["avg_score"] - pasta_attempts[0]["avg_score"]
            print(f"   - –£–ª—É—á—à–µ–Ω–∏–µ –ø–∞—Å—Ç—ã: {pasta_improvement:+.2f}")
        
        if len(steak_attempts) > 1:
            steak_improvement = steak_attempts[-1]["avg_score"] - steak_attempts[0]["avg_score"]
            print(f"   - –£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–µ–π–∫–∞: {steak_improvement:+.2f}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–∞
        final_stats = results["final_stats"]
        print(f"\nüß† –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è:")
        print(f"   - –ò–∑—É—á–µ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {final_stats['known_ingredients']}")
        print(f"   - –ò–∑—É—á–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫: {final_stats['known_techniques']}")
        print(f"   - –ò–∑—É—á–µ–Ω–Ω—ã—Ö –¥–µ–≥—É—Å—Ç–∞—Ç–æ—Ä–æ–≤: {final_stats['known_tasters']}")
        
        if final_stats["best_ingredients"]:
            print(f"   - –õ—É—á—à–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {final_stats['best_ingredients'][:2]}")
        
        if final_stats["best_techniques"]:
            print(f"   - –õ—É—á—à–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏: {final_stats['best_techniques'][:2]}")
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        reactivity_score = self._calculate_reactivity_score(results)
        print(f"\nüîÑ –û—Ü–µ–Ω–∫–∞ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {reactivity_score:.2f}/10.0")
        
        if reactivity_score >= 8.0:
            print("üéâ –û–¢–õ–ò–ß–ù–ê–Ø –†–ï–ê–ö–¢–ò–í–ù–û–°–¢–¨! –ê–≥–µ–Ω—Ç –±—ã—Å—Ç—Ä–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è!")
        elif reactivity_score >= 6.0:
            print("üëç –•–û–†–û–®–ê–Ø –†–ï–ê–ö–¢–ò–í–ù–û–°–¢–¨! –ê–≥–µ–Ω—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ!")
        elif reactivity_score >= 4.0:
            print("‚ö†Ô∏è –°–†–ï–î–ù–Ø–Ø –†–ï–ê–ö–¢–ò–í–ù–û–°–¢–¨! –ï—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏!")
        else:
            print("‚ùå –°–õ–ê–ë–ê–Ø –†–ï–ê–ö–¢–ò–í–ù–û–°–¢–¨! –ê–≥–µ–Ω—Ç –ø–ª–æ—Ö–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è!")
    
    def _calculate_reactivity_score(self, results: Dict[str, Any]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞"""
        
        progression = results["learning_progression"]
        
        # 1. –£–ª—É—á—à–µ–Ω–∏–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º (40% –≤–µ—Å–∞)
        if len(progression) >= 2:
            first_avg = progression[0]["avg_score"]
            second_avg = progression[-1]["avg_score"]
            improvement = max(0, second_avg - first_avg) * 2  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-2
        else:
            improvement = 0
        
        # 2. –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π (30% –≤–µ—Å–∞)
        final_stats = results["final_stats"]
        knowledge_score = min(2.0, (
            final_stats["known_ingredients"] * 0.1 +
            final_stats["known_techniques"] * 0.2 +
            final_stats["known_tasters"] * 0.1
        ))
        
        # 3. –£—Å–ø–µ—à–Ω–æ—Å—Ç—å (20% –≤–µ—Å–∞)
        success_rate = sum(1 for a in results["attempts"] if a["success"]) / len(results["attempts"])
        success_score = success_rate * 2
        
        # 4. –°–∫–æ—Ä–æ—Å—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ (10% –≤–µ—Å–∞)
        speed_score = min(2.0, 10 / results["benchmark_time"])  # –±—ã—Å—Ç—Ä–µ–µ = –ª—É—á—à–µ
        
        total_score = (
            improvement * 4.0 +      # 40%
            knowledge_score * 3.0 +  # 30%
            success_score * 2.0 +    # 20%
            speed_score * 1.0        # 10%
        )
        
        return min(10.0, total_score)

async def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
    
    print("üîÑ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–ê–ö–¢–ò–í–ù–û–ì–û –ö–£–õ–ò–ù–ê–†–ù–û–ì–û –ë–ï–ù–ß–ú–ê–†–ö–ê")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º –∞–≥–µ–Ω—Ç–∞
    agent = AdaptiveCookingAgent("–®–µ—Ñ_–ê–Ω–¥—Ä–µ–π")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫
    benchmark = ReactiveCookingBenchmark()
    results = await benchmark.run_benchmark(agent)
    
    print(f"\n‚úÖ –ë–ï–ù–ß–ú–ê–†–ö –ó–ê–í–ï–†–®–Å–ù!")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π results")

if __name__ == "__main__":
    asyncio.run(main()) 