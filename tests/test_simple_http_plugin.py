#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢–´ HTTP –ü–õ–ê–ì–ò–ù–ê
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SimpleHTTPPlugin –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤.
–ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!
"""

import pytest
import asyncio
from unittest.mock import AsyncMock, Mock, patch
from app.plugins.simple_http_plugin import SimpleHTTPPlugin


@pytest.fixture
def http_plugin():
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä HTTP –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return SimpleHTTPPlugin()


@pytest.mark.asyncio
async def test_plugin_initialization(http_plugin):
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞."""
    assert http_plugin.name == "simple_http"
    assert http_plugin.default_timeout == 30.0
    assert "User-Agent" in http_plugin.default_headers
    
    # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await http_plugin.initialize()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–ª–∞–≥–∏–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥)
    assert hasattr(http_plugin, 'name')


@pytest.mark.asyncio
async def test_register_handlers(http_plugin):
    """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    handlers = http_plugin.register_handlers()
    
    expected_handlers = [
        "http_get",
        "http_post", 
        "http_put",
        "http_delete",
        "http_request"
    ]
    
    for handler_name in expected_handlers:
        assert handler_name in handlers
        assert callable(handlers[handler_name])


@pytest.mark.asyncio
async def test_http_get_success(http_plugin):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ GET –∑–∞–ø—Ä–æ—Å–∞."""
    # –ú–æ–∫–∞–µ–º HTTP –æ—Ç–≤–µ—Ç
    mock_response = Mock()
    mock_response.status_code = 200
    mock_response.json.return_value = {"success": True, "data": "test"}
    mock_response.text = "test response"
    mock_response.headers = {"Content-Type": "application/json"}
    mock_response.url = "https://httpbin.org/get"
    mock_response.reason_phrase = "OK"
    
    with patch('httpx.AsyncClient') as mock_client:
        mock_client.return_value.__aenter__.return_value.request = AsyncMock(return_value=mock_response)
        
        step_data = {
            "id": "test_get",
            "type": "http_get",
            "params": {
                "url": "https://httpbin.org/get",
                "output_var": "get_result"
            }
        }
        context = {}
        
        result_context = await http_plugin._handle_http_get(step_data, context)
        
        assert "get_result" in result_context
        assert result_context["get_result"]["success"] is True
        assert result_context["get_result"]["status_code"] == 200
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ data —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = result_context["get_result"]["data"]
        assert isinstance(data, dict)
        assert data["success"] is True


@pytest.mark.asyncio
async def test_http_post_with_json(http_plugin):
    """–¢–µ—Å—Ç POST –∑–∞–ø—Ä–æ—Å–∞ —Å JSON –¥–∞–Ω–Ω—ã–º–∏."""
    mock_response = Mock()
    mock_response.status_code = 201
    mock_response.json.return_value = {"id": 123, "created": True}
    mock_response.text = "created response"
    mock_response.headers = {"Content-Type": "application/json"}
    mock_response.url = "https://httpbin.org/post"
    mock_response.reason_phrase = "Created"
    
    with patch('httpx.AsyncClient') as mock_client:
        mock_client.return_value.__aenter__.return_value.request = AsyncMock(return_value=mock_response)
        
        step_data = {
            "id": "test_post",
            "type": "http_post",
            "params": {
                "url": "https://httpbin.org/post",
                "json": {
                    "name": "Test User",
                    "email": "test@example.com"
                },
                "output_var": "post_result"
            }
        }
        context = {}
        
        result_context = await http_plugin._handle_http_post(step_data, context)
        
        assert "post_result" in result_context
        assert result_context["post_result"]["success"] is True
        assert result_context["post_result"]["status_code"] == 201


@pytest.mark.asyncio
async def test_http_request_universal(http_plugin):
    """–¢–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ HTTP –∑–∞–ø—Ä–æ—Å–∞."""
    mock_response = Mock()
    mock_response.status_code = 200
    mock_response.json.return_value = {"updated": True}
    mock_response.text = "updated response"
    mock_response.headers = {"Content-Type": "application/json"}
    mock_response.url = "https://httpbin.org/put"
    mock_response.reason_phrase = "OK"
    
    with patch('httpx.AsyncClient') as mock_client:
        mock_client.return_value.__aenter__.return_value.request = AsyncMock(return_value=mock_response)
        
        step_data = {
            "id": "test_universal",
            "type": "http_request",
            "params": {
                "method": "PUT",
                "url": "https://httpbin.org/put",
                "json": {"status": "updated"},
                "headers": {"Authorization": "Bearer token123"},
                "output_var": "universal_result"
            }
        }
        context = {}
        
        result_context = await http_plugin._handle_http_request(step_data, context)
        
        assert "universal_result" in result_context
        assert result_context["universal_result"]["success"] is True
        assert result_context["universal_result"]["status_code"] == 200


@pytest.mark.asyncio
async def test_http_error_handling(http_plugin):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP –æ—à–∏–±–æ–∫."""
    mock_response = Mock()
    mock_response.status_code = 404
    mock_response.text = "Not Found"
    mock_response.json.side_effect = Exception("Not JSON")  # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
    mock_response.headers = {"Content-Type": "text/plain"}
    mock_response.url = "https://httpbin.org/status/404"
    mock_response.reason_phrase = "Not Found"
    
    with patch('httpx.AsyncClient') as mock_client:
        mock_client.return_value.__aenter__.return_value.request = AsyncMock(return_value=mock_response)
        
        step_data = {
            "id": "test_error",
            "type": "http_get",
            "params": {
                "url": "https://httpbin.org/status/404",
                "output_var": "error_result"
            }
        }
        context = {}
        
        result_context = await http_plugin._handle_http_get(step_data, context)
        
        assert "error_result" in result_context
        assert result_context["error_result"]["success"] is False
        assert result_context["error_result"]["status_code"] == 404
        assert "error" in result_context["error_result"]


@pytest.mark.asyncio
async def test_context_variable_resolution(http_plugin):
    """–¢–µ—Å—Ç –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    mock_response = Mock()
    mock_response.status_code = 200
    mock_response.json.return_value = {"user_id": 123}
    mock_response.text = "user response"
    mock_response.headers = {"Content-Type": "application/json"}
    mock_response.url = "https://api.example.com/users/123"
    mock_response.reason_phrase = "OK"
    
    with patch('httpx.AsyncClient') as mock_client:
        mock_client.return_value.__aenter__.return_value.request = AsyncMock(return_value=mock_response)
        
        step_data = {
            "id": "test_variables",
            "type": "http_get",
            "params": {
                "url": "https://api.example.com/users/{user_id}",
                "output_var": "user_data"
            }
        }
        context = {"user_id": "123"}
        
        result_context = await http_plugin._handle_http_get(step_data, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±—ã–ª–∞ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞
        mock_client.return_value.__aenter__.return_value.request.assert_called_once()
        call_args = mock_client.return_value.__aenter__.return_value.request.call_args
        assert "https://api.example.com/users/123" in str(call_args)


@pytest.mark.asyncio
async def test_missing_url_error(http_plugin):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ URL."""
    step_data = {
        "id": "test_no_url",
        "type": "http_get",
        "params": {
            "output_var": "result"
        }
    }
    context = {}
    
    result_context = await http_plugin._handle_http_get(step_data, context)
    
    assert "result" in result_context
    assert result_context["result"]["success"] is False
    assert "URL –Ω–µ —É–∫–∞–∑–∞–Ω" in result_context["result"]["error"]


@pytest.mark.asyncio
async def test_network_error_handling(http_plugin):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫."""
    with patch('httpx.AsyncClient') as mock_client:
        mock_client.return_value.__aenter__.return_value.request = AsyncMock(
            side_effect=Exception("Network error")
        )
        
        step_data = {
            "id": "test_network_error",
            "type": "http_get",
            "params": {
                "url": "https://unreachable.example.com",
                "output_var": "network_result"
            }
        }
        context = {}
        
        result_context = await http_plugin._handle_http_get(step_data, context)
        
        assert "network_result" in result_context
        assert result_context["network_result"]["success"] is False
        assert "Network error" in result_context["network_result"]["error"]


@pytest.mark.asyncio
async def test_healthcheck_success(http_plugin):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ healthcheck."""
    mock_response = Mock()
    mock_response.status_code = 200
    mock_response.json.return_value = {}
    mock_response.text = "OK"
    mock_response.headers = {}
    mock_response.url = "https://httpbin.org/status/200"
    mock_response.reason_phrase = "OK"
    
    with patch('httpx.AsyncClient') as mock_client:
        mock_client.return_value.__aenter__.return_value.request = AsyncMock(return_value=mock_response)
        
        result = await http_plugin.healthcheck()
        assert result is True


@pytest.mark.asyncio
async def test_healthcheck_failure(http_plugin):
    """–¢–µ—Å—Ç –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ healthcheck."""
    with patch('httpx.AsyncClient') as mock_client:
        mock_client.return_value.__aenter__.return_value.request = AsyncMock(
            side_effect=Exception("Connection failed")
        )
        
        result = await http_plugin.healthcheck()
        assert result is False


if __name__ == "__main__":
    pytest.main([__file__, "-v"]) 