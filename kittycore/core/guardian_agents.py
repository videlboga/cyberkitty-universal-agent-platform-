#!/usr/bin/env python3
"""
üëÆ Guardian Agents - –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ö—Ä–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:
- Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
- –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö
- –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π

–ü—Ä–∏–Ω—Ü–∏–ø: "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –ª—É—á—à–µ —á–µ–º –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å" üõ°Ô∏è
"""

import asyncio
import time
import json
from typing import Dict, List, Any, Optional, Callable
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
from enum import Enum
import logging

logger = logging.getLogger(__name__)

class AlertLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    INFO = "info"
    WARNING = "warning"  
    ERROR = "error"
    CRITICAL = "critical"

class InterventionType(Enum):
    """–¢–∏–ø—ã –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤"""
    PAUSE_AGENT = "pause_agent"           # –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
    REDUCE_PRIORITY = "reduce_priority"   # –°–Ω–∏–∑–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    REDIRECT_TASK = "redirect_task"       # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
    EMERGENCY_STOP = "emergency_stop"     # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    PARAMETER_ADJUST = "parameter_adjust" # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

@dataclass
class QualityThreshold:
    """–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    metric_name: str
    min_value: float
    max_value: float
    time_window: int  # —Å–µ–∫—É–Ω–¥—ã
    violation_limit: int  # —Å–∫–æ–ª—å–∫–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Ä–∞–∑—Ä–µ—à–µ–Ω–æ

@dataclass
class GuardianAlert:
    """–ê–ª–µ—Ä—Ç –æ—Ç Guardian Agent"""
    alert_id: str
    guardian_id: str
    level: AlertLevel
    agent_id: str
    metric_name: str
    current_value: float
    threshold_value: float
    message: str
    context: Dict[str, Any]
    timestamp: datetime
    auto_handled: bool = False
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'alert_id': self.alert_id,
            'guardian_id': self.guardian_id,
            'level': self.level.value,
            'agent_id': self.agent_id,
            'metric_name': self.metric_name,
            'current_value': self.current_value,
            'threshold_value': self.threshold_value,
            'message': self.message,
            'context': self.context,
            'timestamp': self.timestamp.isoformat(),
            'auto_handled': self.auto_handled
        }

@dataclass
class InterventionAction:
    """–î–µ–π—Å—Ç–≤–∏–µ –ø–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤—É"""
    action_id: str
    intervention_type: InterventionType
    target_agent: str
    parameters: Dict[str, Any]
    reason: str
    timestamp: datetime
    success: bool = False
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'action_id': self.action_id,
            'intervention_type': self.intervention_type.value,
            'target_agent': self.target_agent,
            'parameters': self.parameters,
            'reason': self.reason,
            'timestamp': self.timestamp.isoformat(),
            'success': self.success
        }

class GuardianAgent:
    """–ê–≥–µ–Ω—Ç-–æ—Ö—Ä–∞–Ω–Ω–∏–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, guardian_id: str, monitored_agents: List[str] = None):
        self.guardian_id = guardian_id
        self.monitored_agents = monitored_agents or []
        self.quality_thresholds: Dict[str, QualityThreshold] = {}
        self.metric_history: Dict[str, List[Dict]] = {}
        self.alert_history: List[GuardianAlert] = []
        self.intervention_history: List[InterventionAction] = []
        self.is_active = True
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        self._setup_default_thresholds()
        
        logger.info(f"üëÆ Guardian Agent {guardian_id} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤: {self.monitored_agents}")
    
    def _setup_default_thresholds(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.quality_thresholds['execution_time'] = QualityThreshold(
            metric_name='execution_time',
            min_value=0.1,    # –º–∏–Ω–∏–º—É–º 0.1 —Å–µ–∫—É–Ω–¥—ã
            max_value=120.0,  # –º–∞–∫—Å–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã
            time_window=300,  # –æ–∫–Ω–æ 5 –º–∏–Ω—É—Ç
            violation_limit=3 # –º–∞–∫—Å–∏–º—É–º 3 –Ω–∞—Ä—É—à–µ–Ω–∏—è
        )
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
        self.quality_thresholds['quality_score'] = QualityThreshold(
            metric_name='quality_score',
            min_value=0.6,    # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞
            max_value=1.0,
            time_window=600,  # –æ–∫–Ω–æ 10 –º–∏–Ω—É—Ç
            violation_limit=2
        )
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        self.quality_thresholds['memory_usage'] = QualityThreshold(
            metric_name='memory_usage',
            min_value=0.0,
            max_value=0.8,    # –º–∞–∫—Å–∏–º—É–º 80% –ø–∞–º—è—Ç–∏
            time_window=180,  # –æ–∫–Ω–æ 3 –º–∏–Ω—É—Ç—ã
            violation_limit=5
        )
    
    async def monitor_agent_metric(self, agent_id: str, metric_name: str, value: float, context: Dict[str, Any] = None):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞"""
        
        if not self.is_active or agent_id not in self.monitored_agents:
            return
        
        timestamp = datetime.now()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫
        metric_key = f"{agent_id}:{metric_name}"
        if metric_key not in self.metric_history:
            self.metric_history[metric_key] = []
        
        self.metric_history[metric_key].append({
            'value': value,
            'timestamp': timestamp,
            'context': context or {}
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
        if len(self.metric_history[metric_key]) > 1000:
            self.metric_history[metric_key] = self.metric_history[metric_key][-1000:]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        await self._check_thresholds(agent_id, metric_name, value, context)
        
        logger.debug(f"üìä Guardian {self.guardian_id}: –º–µ—Ç—Ä–∏–∫–∞ {metric_name}={value:.3f} –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_id}")
    
    async def _check_thresholds(self, agent_id: str, metric_name: str, value: float, context: Dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        
        if metric_name not in self.quality_thresholds:
            return
        
        threshold = self.quality_thresholds[metric_name]
        violation = False
        violation_type = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è
        if value < threshold.min_value:
            violation = True
            violation_type = "below_minimum"
        elif value > threshold.max_value:
            violation = True
            violation_type = "above_maximum"
        
        if violation:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ
            violations_count = self._count_recent_violations(agent_id, metric_name, threshold.time_window)
            
            if violations_count >= threshold.violation_limit:
                # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
                await self._create_alert(agent_id, metric_name, value, threshold, violation_type, context)
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ
                if violations_count >= threshold.violation_limit * 2:
                    await self._auto_intervene(agent_id, metric_name, value, threshold, context)
    
    def _count_recent_violations(self, agent_id: str, metric_name: str, time_window: int) -> int:
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è"""
        
        metric_key = f"{agent_id}:{metric_name}"
        if metric_key not in self.metric_history:
            return 0
        
        threshold = self.quality_thresholds[metric_name]
        cutoff_time = datetime.now() - timedelta(seconds=time_window)
        
        violations = 0
        for record in self.metric_history[metric_key]:
            if record['timestamp'] > cutoff_time:
                value = record['value']
                if value < threshold.min_value or value > threshold.max_value:
                    violations += 1
        
        return violations
    
    async def _create_alert(self, agent_id: str, metric_name: str, value: float, 
                          threshold: QualityThreshold, violation_type: str, context: Dict[str, Any]):
        """–°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–ª–µ—Ä—Ç–∞
        if metric_name == 'quality_score' and value < 0.3:
            level = AlertLevel.CRITICAL
        elif metric_name == 'execution_time' and value > threshold.max_value * 2:
            level = AlertLevel.ERROR
        elif value < threshold.min_value * 0.5 or value > threshold.max_value * 1.5:
            level = AlertLevel.WARNING
        else:
            level = AlertLevel.INFO
        
        alert_id = f"alert_{int(time.time() * 1000000)}"
        
        alert = GuardianAlert(
            alert_id=alert_id,
            guardian_id=self.guardian_id,
            level=level,
            agent_id=agent_id,
            metric_name=metric_name,
            current_value=value,
            threshold_value=threshold.max_value if violation_type == "above_maximum" else threshold.min_value,
            message=f"–ê–≥–µ–Ω—Ç {agent_id}: {metric_name} = {value:.3f} ({violation_type})",
            context=context,
            timestamp=datetime.now()
        )
        
        self.alert_history.append(alert)
        
        logger.warning(f"üö® {level.value.upper()}: {alert.message}")
        
        return alert
    
    async def _auto_intervene(self, agent_id: str, metric_name: str, value: float, 
                            threshold: QualityThreshold, context: Dict[str, Any]):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"""
        
        action_id = f"intervention_{int(time.time() * 1000000)}"
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫–∏
        if metric_name == 'execution_time' and value > threshold.max_value * 3:
            # –°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            intervention = InterventionAction(
                action_id=action_id,
                intervention_type=InterventionType.PAUSE_AGENT,
                target_agent=agent_id,
                parameters={'duration': 300, 'reason': 'slow_execution'},
                reason=f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {value:.1f}—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 3 —Ä–∞–∑–∞",
                timestamp=datetime.now()
            )
            
        elif metric_name == 'quality_score' and value < 0.2:
            # –û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            intervention = InterventionAction(
                action_id=action_id,
                intervention_type=InterventionType.EMERGENCY_STOP,
                target_agent=agent_id,
                parameters={'immediate': True},
                reason=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {value:.2f}",
                timestamp=datetime.now()
            )
            
        elif metric_name == 'memory_usage' and value > 0.9:
            # –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ - —Å–Ω–∏–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            intervention = InterventionAction(
                action_id=action_id,
                intervention_type=InterventionType.REDUCE_PRIORITY,
                target_agent=agent_id,
                parameters={'new_priority': 'low', 'memory_limit': 0.7},
                reason=f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏: {value:.1%}",
                timestamp=datetime.now()
            )
            
        else:
            # –û–±—â–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            intervention = InterventionAction(
                action_id=action_id,
                intervention_type=InterventionType.PARAMETER_ADJUST,
                target_agent=agent_id,
                parameters={'metric': metric_name, 'adjustment': 'conservative'},
                reason=f"–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π {metric_name}",
                timestamp=datetime.now()
            )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ
        success = await self._execute_intervention(intervention)
        intervention.success = success
        
        self.intervention_history.append(intervention)
        
        if success:
            logger.warning(f"üõ°Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {intervention.intervention_type.value} –¥–ª—è {agent_id}")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ: {intervention.intervention_type.value} –¥–ª—è {agent_id}")
        
        return intervention
    
    async def _execute_intervention(self, intervention: InterventionAction) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"""
        
        try:
            if intervention.intervention_type == InterventionType.PAUSE_AGENT:
                # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≥–µ–Ω—Ç–∞
                logger.info(f"‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç–∞ {intervention.target_agent} –Ω–∞ {intervention.parameters.get('duration', 300)}—Å")
                return True
                
            elif intervention.intervention_type == InterventionType.EMERGENCY_STOP:
                # –õ–æ–≥–∏–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                logger.warning(f"üõë –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞ {intervention.target_agent}")
                return True
                
            elif intervention.intervention_type == InterventionType.REDUCE_PRIORITY:
                # –õ–æ–≥–∏–∫–∞ —Å–Ω–∏–∂–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                logger.info(f"üìâ –°–Ω–∏–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–≥–µ–Ω—Ç–∞ {intervention.target_agent}")
                return True
                
            elif intervention.intervention_type == InterventionType.PARAMETER_ADJUST:
                # –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                logger.info(f"‚öôÔ∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≥–µ–Ω—Ç–∞ {intervention.target_agent}")
                return True
                
            else:
                logger.error(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {intervention.intervention_type}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {e}")
            return False
    
    def get_monitoring_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–ª–µ—Ä—Ç–∞–º
        alert_stats = {}
        for level in AlertLevel:
            alert_stats[level.value] = len([a for a in self.alert_history if a.level == level])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º
        intervention_stats = {}
        for itype in InterventionType:
            intervention_stats[itype.value] = len([i for i in self.intervention_history if i.intervention_type == itype])
        
        # –ù–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
        cutoff = datetime.now() - timedelta(hours=24)
        recent_alerts = [a for a in self.alert_history if a.timestamp > cutoff]
        recent_interventions = [i for i in self.intervention_history if i.timestamp > cutoff]
        
        return {
            'guardian_id': self.guardian_id,
            'monitored_agents': self.monitored_agents,
            'is_active': self.is_active,
            'alert_stats': alert_stats,
            'intervention_stats': intervention_stats,
            'recent_alerts_count': len(recent_alerts),
            'recent_interventions_count': len(recent_interventions),
            'total_metrics_tracked': sum(len(history) for history in self.metric_history.values()),
            'last_activity': max([a.timestamp for a in self.alert_history], default=datetime.now()).isoformat()
        } 