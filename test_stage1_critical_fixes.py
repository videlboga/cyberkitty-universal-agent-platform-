#!/usr/bin/env python3
"""
üî• –≠–¢–ê–ü 1: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∏–º–ø–æ—Ä—Ç–æ–≤

–ü–õ–ê–ù –≠–¢–ê–ü–ê 1:
- code_execution_tool: –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç —Å code_execution_tools.py
- email_tool: –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç —Å communication_tools.py
- –û—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: +2 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤—ã—Ö (1-2 –¥–Ω—è)

–ü–†–ò–ù–¶–ò–ü–´:
‚úÖ –†–ï–ê–õ–¨–ù–´–ï –≤—ã–∑–æ–≤—ã API
‚ùå –ù–ï–¢ –º–æ–∫–æ–≤
‚úÖ –ß–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
‚úÖ –ó–∞–ø–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –ø–∞–º—è—Ç—å
"""

import time
import json
import traceback
from pathlib import Path

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´
try:
    from kittycore.tools.code_execution_tools import CodeExecutionTool
    IMPORT_CODE_OK = True
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ code_execution_tools: {e}")
    IMPORT_CODE_OK = False

try:
    from kittycore.tools.communication_tools import EmailTool
    IMPORT_EMAIL_OK = True
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ communication_tools: {e}")
    IMPORT_EMAIL_OK = False

class HonestTestResults:
    """–ß–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    def __init__(self):
        self.results = []
        self.memory_records = []
    
    def test_tool_honest(self, tool_name, test_func):
        """–ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        print(f"\nüîß –¢–µ—Å—Ç–∏—Ä—É—é {tool_name}...")
        start_time = time.time()
        
        try:
            result = test_func()
            execution_time = time.time() - start_time
            
            # –ß–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            is_honest = self.is_result_honest(result, tool_name)
            
            test_result = {
                "tool": tool_name,
                "success": is_honest,
                "size_bytes": len(str(result)) if result else 0,
                "execution_time": round(execution_time, 2),
                "honest": is_honest,
                "result_sample": str(result)[:100] if result else "NO_DATA"
            }
            
            self.results.append(test_result)
            
            if is_honest:
                print(f"‚úÖ {tool_name}: {test_result['size_bytes']} –±–∞–π—Ç –∑–∞ {execution_time:.2f}—Å")
                self.record_working_params(tool_name, test_func.__name__)
            else:
                print(f"‚ùå {tool_name}: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
            return test_result
            
        except Exception as e:
            execution_time = time.time() - start_time
            print(f"‚ùå {tool_name}: –û–®–ò–ë–ö–ê - {str(e)[:100]}")
            
            test_result = {
                "tool": tool_name,
                "success": False,
                "size_bytes": 0,
                "execution_time": round(execution_time, 2),
                "honest": False,
                "error": str(e)[:200]
            }
            
            self.results.append(test_result)
            return test_result
    
    def is_result_honest(self, result, tool_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if not result:
            return False
        
        result_str = str(result)
        
        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        fake_patterns = [
            f"{tool_name}: —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω",
            "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
            "—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏",
            "–ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            "–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞"
        ]
        
        for pattern in fake_patterns:
            if pattern.lower() in result_str.lower():
                return False
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
        return len(result_str) > 20
    
    def record_working_params(self, tool_name, action_name):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞–±–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø–∞–º—è—Ç—å"""
        memory_record = {
            "tool": tool_name,
            "working_action": action_name,
            "timestamp": time.time(),
            "status": "WORKING",
            "notes": f"Honest test passed for {tool_name}"
        }
        self.memory_records.append(memory_record)

def test_code_execution_tool():
    """–¢–µ—Å—Ç CodeExecutionTool —Å –†–ï–ê–õ–¨–ù–´–ú –∫–æ–¥–æ–º"""
    if not IMPORT_CODE_OK:
        return "IMPORT_ERROR"
    
    tool = CodeExecutionTool()
    
    # –†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞
    result = tool.execute(
        action="execute_python",
        code="result = 2 + 2\nprint(f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}')\nresult",
        timeout=10
    )
    
    return result

def test_email_tool():
    """–¢–µ—Å—Ç EmailTool —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    if not IMPORT_EMAIL_OK:
        return "IMPORT_ERROR"
    
    tool = EmailTool()
    
    # –†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    result = tool.execute(
        action="get_config",
        smtp_server="smtp.gmail.com",
        port=587
    )
    
    return result

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–∞–ø–∞ 1"""
    print("üî• –≠–¢–ê–ü 1: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 50)
    
    tester = HonestTestResults()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
    if IMPORT_CODE_OK:
        tester.test_tool_honest("code_execution_tool", test_code_execution_tool)
    else:
        print("‚ùå code_execution_tool: –ò–ú–ü–û–†–¢ –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù")
    
    if IMPORT_EMAIL_OK:
        tester.test_tool_honest("email_tool", test_email_tool)
    else:
        print("‚ùå email_tool: –ò–ú–ü–û–†–¢ –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–∞–ø–∞ 1
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–¢–ê–ü–ê 1:")
    
    total_tools = len(tester.results)
    honest_tools = sum(1 for r in tester.results if r["honest"])
    success_rate = (honest_tools / total_tools * 100) if total_tools > 0 else 0
    
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {total_tools}")
    print(f"–ß–µ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {honest_tools}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    print("\nüéØ –î–ï–¢–ê–õ–ò:")
    for result in tester.results:
        status = "‚úÖ –ß–ï–°–¢–ù–´–ô" if result["honest"] else "‚ùå –ü–†–û–ë–õ–ï–ú–ê"
        print(f"{result['tool']}: {status} ({result['size_bytes']} –±–∞–π—Ç)")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("stage1_results.json", "w", encoding="utf-8") as f:
        json.dump({
            "stage": 1,
            "description": "Critical import fixes",
            "results": tester.results,
            "memory_records": tester.memory_records,
            "summary": {
                "total_tools": total_tools,
                "honest_tools": honest_tools,
                "success_rate": success_rate,
                "imports_fixed": IMPORT_CODE_OK + IMPORT_EMAIL_OK
            }
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stage1_results.json")
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏
    current_honest = 3  # –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    new_honest = current_honest + honest_tools
    total_target = 18
    
    print(f"\nüöÄ –ü–†–û–ì–†–ï–°–° –ö –¶–ï–õ–ò:")
    print(f"–ë—ã–ª–æ —á–µ—Å—Ç–Ω—ã—Ö: {current_honest}/18 (16.7%)")
    print(f"–°—Ç–∞–ª–æ —á–µ—Å—Ç–Ω—ã—Ö: {new_honest}/18 ({new_honest/total_target*100:.1f}%)")
    print(f"–£–ª—É—á—à–µ–Ω–∏–µ: +{honest_tools} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    
    if success_rate >= 50:
        print("\nüéâ –≠–¢–ê–ü 1 –£–°–ü–ï–®–ï–ù! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≠–¢–ê–ü–£ 2...")
        return True
    else:
        print("\n‚ö†Ô∏è –≠–¢–ê–ü 1 –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
        return False

if __name__ == "__main__":
    main() 