#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç SmartValidator - –î–µ–º–æ —É–º–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
===========================================

–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ SmartValidator –æ—Ç–ª–∏—á–∞–µ—Ç:
- –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –≥–æ—Ç–æ–≤—ã–π HTML —Å–∞–π—Ç
- –ü–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ø–ª–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞
"""

import asyncio
import os
import tempfile
from agents.smart_validator import SmartValidator


async def test_smart_validator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º SmartValidator –Ω–∞ —Ö–æ—Ä–æ—à–∏—Ö –∏ –ø–ª–æ—Ö–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"""
    
    print("üß™ –¢–µ—Å—Ç SmartValidator")
    print("=" * 40)
    
    validator = SmartValidator()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    with tempfile.TemporaryDirectory() as temp_dir:
        
        # === –¢–ï–°–¢ 1: –ü–õ–û–•–û–ô –†–ï–ó–£–õ–¨–¢–ê–¢ (–ø–ª–∞–Ω –≤–º–µ—Å—Ç–æ —Å–∞–π—Ç–∞) ===
        print("\nüìù –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω —Å–∞–π—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ï –í–ê–õ–ò–î–ù–û)")
        print("-" * 50)
        
        plan_file = os.path.join(temp_dir, "site_plan.html")
        with open(plan_file, 'w', encoding='utf-8') as f:
            f.write("""
–ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞ —Å –∫–æ—Ç—è—Ç–∞–º–∏:

1. –°–æ–∑–¥–∞—Ç—å HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É
2. –î–æ–±–∞–≤–∏—Ç—å CSS —Å—Ç–∏–ª–∏
3. –ù–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—Ç—è—Ç
4. –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç

–ü—Ä–∏–º–µ—Ä HTML:
<html>
<head><title>–ö–æ—Ç—è—Ç–∞</title></head>
<body>
  <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>
  <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –∫–æ—Ç—è—Ç–∞</p>
</body>
</html>

–≠—Ç–æ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞.
""")
        
        result1 = {
            "success": True,
            "message": "–°–∞–π—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
            "created_files": [plan_file]
        }
        
        validation1 = await validator.validate_result(
            original_task="–°–æ–∑–¥–∞–π —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏",
            result=result1,
            created_files=[plan_file]
        )
        
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {validation1.verdict}")
        print(f"üìä –û—Ü–µ–Ω–∫–∞: {validation1.score:.1f}/1.0")
        print(f"üí∞ –ü–æ–ª—å–∑–∞: {validation1.user_benefit}")
        if validation1.issues:
            print("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã:")
            for issue in validation1.issues:
                print(f"   ‚Ä¢ {issue}")
        
        # === –¢–ï–°–¢ 2: –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ (—Ä–∞–±–æ—á–∏–π HTML) ===
        print("\nüåê –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω —Ä–∞–±–æ—á–∏–π HTML —Å–∞–π—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í–ê–õ–ò–î–ù–û)")
        print("-" * 50)
        
        site_file = os.path.join(temp_dir, "kittens_site.html")
        with open(site_file, 'w', encoding='utf-8') as f:
            f.write("""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üê± –°–∞–π—Ç —Å –ö–æ—Ç—è—Ç–∞–º–∏</title>
    <style>
        body { font-family: Arial, sans-serif; background: #f0f8ff; margin: 0; padding: 20px; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }
        h1 { color: #ff6b9d; text-align: center; }
        .kitten { margin: 20px 0; padding: 15px; background: #ffe4e1; border-radius: 8px; }
        .kitten h3 { color: #8b4513; }
        .placeholder-img { width: 200px; height: 150px; background: #ddd; border-radius: 5px; 
                          display: inline-block; text-align: center; line-height: 150px; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üê± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏!</h1>
        
        <div class="kitten">
            <h3>üêæ –†—ã–∂–∏–π –∫–æ—Ç–µ–Ω–æ–∫ –ú—É—Ä–∑–∏–∫</h3>
            <div class="placeholder-img">[–§–æ—Ç–æ —Ä—ã–∂–µ–≥–æ –∫–æ—Ç–µ–Ω–∫–∞]</div>
            <p>–ú—É—Ä–∑–∏–∫ –æ—á–µ–Ω—å –∏–≥—Ä–∏–≤—ã–π –∏ –ª—é–±–∏—Ç –∏–≥—Ä–∞—Ç—å —Å –º—è—á–∏–∫–æ–º!</p>
        </div>
        
        <div class="kitten">
            <h3>üêæ –°–µ—Ä–∞—è –∫–æ—à–µ—á–∫–∞ –ú—É—Å—è</h3>
            <div class="placeholder-img">[–§–æ—Ç–æ —Å–µ—Ä–æ–π –∫–æ—à–µ—á–∫–∏]</div>
            <p>–ú—É—Å—è —Å–ø–æ–∫–æ–π–Ω–∞—è –∏ –ª–∞—Å–∫–æ–≤–∞—è, –ª—é–±–∏—Ç —Å–ø–∞—Ç—å –Ω–∞ —Å–æ–ª–Ω—ã—à–∫–µ.</p>
        </div>
        
        <div class="kitten">
            <h3>üêæ –ß–µ—Ä–Ω–æ-–±–µ–ª—ã–π –∫–æ—Ç–µ–Ω–æ–∫ –ë–∞—Ä—Å–∏–∫</h3>
            <div class="placeholder-img">[–§–æ—Ç–æ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–≥–æ –∫–æ—Ç–µ–Ω–∫–∞]</div>
            <p>–ë–∞—Ä—Å–∏–∫ –æ—á–µ–Ω—å –ª—é–±–æ–ø—ã—Ç–Ω—ã–π –∏ –≤–µ–∑–¥–µ —Å—É–µ—Ç —Å–≤–æ–π –Ω–æ—Å–∏–∫!</p>
        </div>
        
        <footer style="text-align: center; margin-top: 30px; color: #666;">
            <p>üê± –≠—Ç–æ—Ç —Å–∞–π—Ç —Å–æ–∑–¥–∞–Ω —Å –ª—é–±–æ–≤—å—é –∫ –∫–æ—Ç—è—Ç–∞–º! üê±</p>
        </footer>
    </div>
</body>
</html>""")
        
        result2 = {
            "success": True,
            "message": "–°–∞–π—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
            "created_files": [site_file]
        }
        
        validation2 = await validator.validate_result(
            original_task="–°–æ–∑–¥–∞–π —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏",
            result=result2,
            created_files=[site_file]
        )
        
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {validation2.verdict}")
        print(f"üìä –û—Ü–µ–Ω–∫–∞: {validation2.score:.1f}/1.0")
        print(f"üí∞ –ü–æ–ª—å–∑–∞: {validation2.user_benefit}")
        if validation2.recommendations:
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in validation2.recommendations:
                print(f"   ‚Ä¢ {rec}")
        
        # === –¢–ï–°–¢ 3: –†–ê–°–ß–ï–¢ –ë–ï–ó –§–û–†–ú–£–õ (–ø–ª–æ—Ö–æ) ===
        print("\nüßÆ –¢–ï–°–¢ 3: –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ —Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ï –í–ê–õ–ò–î–ù–û)")
        print("-" * 50)
        
        description_file = os.path.join(temp_dir, "density_description.txt")
        with open(description_file, 'w', encoding='utf-8') as f:
            f.write("""
–ö–∞–∫ –ø–æ—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —á–µ—Ä–Ω–æ–π –¥—ã—Ä—ã:

–ü–ª–æ—Ç–Ω–æ—Å—Ç—å - —ç—Ç–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–∞—Å—Å—ã –∫ –æ–±—ä—ë–º—É.
–î–ª—è —á–µ—Ä–Ω–æ–π –¥—ã—Ä—ã –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å:
1. –ú–∞—Å—Å—É —á–µ—Ä–Ω–æ–π –¥—ã—Ä—ã (M)
2. –†–∞–¥–∏—É—Å –®–≤–∞—Ä—Ü—à–∏–ª—å–¥–∞ (rs = 2GM/c¬≤)
3. –û–±—ä—ë–º —Å—Ñ–µ—Ä—ã (V = 4/3 * œÄ * r¬≥)

–§–æ—Ä–º—É–ª–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏: œÅ = M/V

–ì–¥–µ:
- G - –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è
- c - —Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞
- M - –º–∞—Å—Å–∞ —á–µ—Ä–Ω–æ–π –¥—ã—Ä—ã

–≠—Ç–æ –æ–±—â–∏–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ª—é–±–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
""")
        
        result3 = {
            "success": True,
            "message": "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞",
            "created_files": [description_file]
        }
        
        validation3 = await validator.validate_result(
            original_task="–ø–æ—Å—á–∏—Ç–∞–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —á—ë—Ä–Ω–æ–π –¥—ã—Ä—ã",
            result=result3,
            created_files=[description_file]
        )
        
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {validation3.verdict}")
        print(f"üìä –û—Ü–µ–Ω–∫–∞: {validation3.score:.1f}/1.0")
        print(f"üí∞ –ü–æ–ª—å–∑–∞: {validation3.user_benefit}")
        
        # === –¢–ï–°–¢ 4: –†–ï–ê–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ (—Ö–æ—Ä–æ—à–æ) ===
        print("\nüßÆ –¢–ï–°–¢ 4: –†–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í–ê–õ–ò–î–ù–û)")
        print("-" * 50)
        
        calc_file = os.path.join(temp_dir, "density_calculation.txt")
        with open(calc_file, 'w', encoding='utf-8') as f:
            f.write("""
–†–ê–°–ß–ï–¢ –ü–õ–û–¢–ù–û–°–¢–ò –ß–ï–†–ù–û–ô –î–´–†–´

–î–∞–Ω–æ:
- –ú–∞—Å—Å–∞ —á–µ—Ä–Ω–æ–π –¥—ã—Ä—ã: M = 10 –º–∞—Å—Å –°–æ–ª–Ω—Ü–∞ = 10 √ó 1.989 √ó 10¬≥‚Å∞ –∫–≥ = 1.989 √ó 10¬≥¬π –∫–≥
- –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è: G = 6.674 √ó 10‚Åª¬π¬π –º¬≥/(–∫–≥¬∑—Å¬≤)
- –°–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞: c = 2.998 √ó 10‚Å∏ –º/—Å

–®–∞–≥ 1: –†–∞–¥–∏—É—Å –®–≤–∞—Ä—Ü—à–∏–ª—å–¥–∞
rs = 2GM/c¬≤ = 2 √ó 6.674√ó10‚Åª¬π¬π √ó 1.989√ó10¬≥¬π / (2.998√ó10‚Å∏)¬≤
rs = 2.654√ó10¬≤¬π / 8.988√ó10¬π‚Å∂ = 29,534 –º ‚âà 29.5 –∫–º

–®–∞–≥ 2: –û–±—ä—ë–º —á–µ—Ä–Ω–æ–π –¥—ã—Ä—ã
V = (4/3)œÄr¬≥ = (4/3) √ó œÄ √ó (29,534)¬≥
V = 4.189 √ó (2.573√ó10¬π¬≥) = 1.077√ó10¬π‚Å¥ –º¬≥

–®–∞–≥ 3: –ü–ª–æ—Ç–Ω–æ—Å—Ç—å
œÅ = M/V = 1.989√ó10¬≥¬π / 1.077√ó10¬π‚Å¥
œÅ = 1.847√ó10¬π‚Å∑ –∫–≥/–º¬≥

–ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —á–µ—Ä–Ω–æ–π –¥—ã—Ä—ã –º–∞—Å—Å–æ–π 10 —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –º–∞—Å—Å = 1.85 √ó 10¬π‚Å∑ –∫–≥/–º¬≥

–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:
- –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–¥—ã: 1000 –∫–≥/–º¬≥
- –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —è–¥—Ä–∞ –∞—Ç–æ–º–∞: ~10¬π‚Å∑ –∫–≥/–º¬≥
- –î–∞–Ω–Ω–∞—è —á–µ—Ä–Ω–∞—è –¥—ã—Ä–∞ –∏–º–µ–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Å—Ä–∞–≤–Ω–∏–º—É—é —Å —è–¥–µ—Ä–Ω–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é
""")
        
        result4 = {
            "success": True,
            "message": "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞",
            "created_files": [calc_file]
        }
        
        validation4 = await validator.validate_result(
            original_task="–ø–æ—Å—á–∏—Ç–∞–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —á—ë—Ä–Ω–æ–π –¥—ã—Ä—ã",
            result=result4,
            created_files=[calc_file]
        )
        
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {validation4.verdict}")
        print(f"üìä –û—Ü–µ–Ω–∫–∞: {validation4.score:.1f}/1.0")
        print(f"üí∞ –ü–æ–ª—å–∑–∞: {validation4.user_benefit}")
        
        # === –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
        print("\nüìä –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 40)
        tests = [
            ("–ü–ª–∞–Ω —Å–∞–π—Ç–∞ (–ø–ª–æ—Ö–æ)", validation1),
            ("–†–∞–±–æ—á–∏–π HTML (—Ö–æ—Ä–æ—à–æ)", validation2),
            ("–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ (–ø–ª–æ—Ö–æ)", validation3),
            ("–†–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç (—Ö–æ—Ä–æ—à–æ)", validation4)
        ]
        
        for name, validation in tests:
            status = "‚úÖ –í–ê–õ–ò–î–ù–û" if validation.is_valid else "‚ùå –ù–ï –í–ê–õ–ò–î–ù–û"
            print(f"{status} | {validation.score:.1f}/1.0 | {name}")
        
        print(f"\nüéØ SmartValidator –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∏–ª —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –ø–ª–æ—Ö–∏—Ö!")


if __name__ == "__main__":
    asyncio.run(test_smart_validator())