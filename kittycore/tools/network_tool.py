"""
NetworkTool - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è KittyCore 3.0

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É —Å —Å–µ—Ç—å—é:
- HTTP/HTTPS –∑–∞–ø—Ä–æ—Å—ã (GET, POST, PUT, DELETE, PATCH)
- –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JavaScript
- API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
- –†–∞–±–æ—Ç–∞ —Å WebSocket
- DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö–æ—Å—Ç–æ–≤
"""

import asyncio
import json
import socket
import ssl
import time
import urllib.parse
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
from typing import Dict, Any, List, Optional, Union

import aiohttp
import dns.resolver
from loguru import logger

from kittycore.tools.base_tool import Tool, ToolResult


@dataclass
class HttpResponse:
    """HTTP –æ—Ç–≤–µ—Ç"""
    status_code: int
    headers: Dict[str, str]
    content: str
    content_type: str
    response_time: float
    size_bytes: int
    encoding: str
    url: str
    redirected_from: Optional[str] = None


@dataclass
class NetworkConnection:
    """–°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
    local_address: str
    local_port: int
    remote_address: str
    remote_port: int
    status: str
    protocol: str
    process_name: Optional[str] = None
    process_pid: Optional[int] = None


@dataclass
class DnsRecord:
    """DNS –∑–∞–ø–∏—Å—å"""
    name: str
    record_type: str
    value: str
    ttl: int
    priority: Optional[int] = None


@dataclass
class HostCheck:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö–æ—Å—Ç–∞"""
    host: str
    port: int
    is_reachable: bool
    response_time: float
    error: Optional[str] = None


class NetworkTool(Tool):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
    
    def __init__(self):
        super().__init__(
            name="network_tool", 
            description="–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—å—é - HTTP –∑–∞–ø—Ä–æ—Å—ã, API, –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ HTTP –∫–ª–∏–µ–Ω—Ç–∞
        self._session = None
        self._default_timeout = 30.0
        self._default_headers = {
            'User-Agent': 'KittyCore-NetworkTool/3.0'
        }
        
        # –ö–µ—à DNS
        self._dns_cache = {}
        self._dns_cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        
        logger.info("üåê NetworkTool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_available_actions(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        return [
            "http_request",
            "get_request", 
            "post_request",
            "put_request",
            "delete_request",
            "patch_request",
            "download_file",
            "check_website",
            "ping_host",
            "resolve_dns",
            "get_dns_records",
            "scan_port",
            "scan_ports_range",
            "get_network_connections",
            "trace_route",
            "get_whois_info",
            "test_api_endpoint",
            "scrape_webpage"
        ]
    
    async def _ensure_session(self):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self._session is None or self._session.closed:
            timeout = aiohttp.ClientTimeout(total=self._default_timeout)
            self._session = aiohttp.ClientSession(
                timeout=timeout,
                headers=self._default_headers,
                connector=aiohttp.TCPConnector(limit=100, limit_per_host=10)
            )
    
    async def _close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self._session and not self._session.closed:
            await self._session.close()
    
    async def http_request(self, 
                          url: str,
                          method: str = "GET",
                          headers: Optional[Dict[str, str]] = None,
                          data: Optional[Union[str, Dict]] = None,
                          params: Optional[Dict[str, str]] = None,
                          timeout: float = None,
                          follow_redirects: bool = True,
                          verify_ssl: bool = True) -> ToolResult:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å"""
        try:
            await self._ensure_session()
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            request_headers = self._default_headers.copy()
            if headers:
                request_headers.update(headers)
            
            request_timeout = timeout or self._default_timeout
            ssl_context = ssl.create_default_context() if verify_ssl else False
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            request_data = None
            if data:
                if isinstance(data, dict):
                    if request_headers.get('Content-Type', '').startswith('application/json'):
                        request_data = json.dumps(data)
                    else:
                        request_data = data
                else:
                    request_data = data
            
            start_time = time.time()
            
            async with self._session.request(
                method=method.upper(),
                url=url,
                headers=request_headers,
                data=request_data,
                params=params,
                timeout=aiohttp.ClientTimeout(total=request_timeout),
                allow_redirects=follow_redirects,
                ssl=ssl_context
            ) as response:
                
                content = await response.text()
                response_time = time.time() - start_time
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
                redirected_from = None
                if response.history:
                    redirected_from = str(response.history[0].url)
                
                http_response = HttpResponse(
                    status_code=response.status,
                    headers=dict(response.headers),
                    content=content,
                    content_type=response.content_type or 'unknown',
                    response_time=response_time,
                    size_bytes=len(content.encode('utf-8')),
                    encoding=response.charset or 'utf-8',
                    url=str(response.url),
                    redirected_from=redirected_from
                )
                
                return ToolResult(
                    success=True,
                    data=asdict(http_response)
                )
                
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"HTTP –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω: {str(e)}"
            )
    
    # –£–ø—Ä–æ—â—ë–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã HTTP
    async def get_request(self, url: str, **kwargs) -> ToolResult:
        """GET –∑–∞–ø—Ä–æ—Å"""
        return await self.http_request(url, method="GET", **kwargs)
    
    async def post_request(self, url: str, data: Optional[Union[str, Dict]] = None, **kwargs) -> ToolResult:
        """POST –∑–∞–ø—Ä–æ—Å"""
        return await self.http_request(url, method="POST", data=data, **kwargs)
    
    async def put_request(self, url: str, data: Optional[Union[str, Dict]] = None, **kwargs) -> ToolResult:
        """PUT –∑–∞–ø—Ä–æ—Å"""
        return await self.http_request(url, method="PUT", data=data, **kwargs)
    
    async def delete_request(self, url: str, **kwargs) -> ToolResult:
        """DELETE –∑–∞–ø—Ä–æ—Å"""
        return await self.http_request(url, method="DELETE", **kwargs)
    
    async def patch_request(self, url: str, data: Optional[Union[str, Dict]] = None, **kwargs) -> ToolResult:
        """PATCH –∑–∞–ø—Ä–æ—Å"""
        return await self.http_request(url, method="PATCH", data=data, **kwargs)
    
    # DNS —Ñ—É–Ω–∫—Ü–∏–∏
    async def resolve_dns(self, hostname: str, record_type: str = "A") -> ToolResult:
        """–†–µ–∑–æ–ª–≤–∏–Ω–≥ DNS –∑–∞–ø–∏—Å–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            cache_key = f"{hostname}:{record_type}"
            if cache_key in self._dns_cache:
                cached_time, cached_result = self._dns_cache[cache_key]
                if time.time() - cached_time < self._dns_cache_ttl:
                    return cached_result
            
            resolver = dns.resolver.Resolver()
            resolver.timeout = 5
            resolver.lifetime = 10
            
            answers = resolver.resolve(hostname, record_type)
            
            records = []
            for answer in answers:
                record = DnsRecord(
                    name=hostname,
                    record_type=record_type,
                    value=str(answer),
                    ttl=answers.rrset.ttl if hasattr(answers, 'rrset') else 300
                )
                
                # –î–ª—è MX –∑–∞–ø–∏—Å–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                if record_type == "MX" and hasattr(answer, 'preference'):
                    record.priority = answer.preference
                    
                records.append(asdict(record))
            
            result = ToolResult(
                success=True,
                data={
                    "hostname": hostname,
                    "record_type": record_type,
                    "records": records,
                    "count": len(records),
                    "resolver_used": str(resolver.nameservers)
                }
            )
            
            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._dns_cache[cache_key] = (time.time(), result)
            
            return result
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ –Ω–µ—É–¥–∞—á–µ–Ω: {str(e)}"
            )
    
    async def get_dns_records(self, hostname: str) -> ToolResult:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö DNS –∑–∞–ø–∏—Å–µ–π"""
        try:
            record_types = ["A", "AAAA", "MX", "CNAME", "TXT", "NS"]
            all_records = {}
            
            for record_type in record_types:
                try:
                    result = await self.resolve_dns(hostname, record_type)
                    if result.success:
                        all_records[record_type] = result.data["records"]
                    else:
                        all_records[record_type] = []
                except:
                    all_records[record_type] = []
            
            return ToolResult(
                success=True,
                data={
                    "hostname": hostname,
                    "records": all_records,
                    "total_types": len([k for k, v in all_records.items() if v])
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–ü–æ–ª—É—á–µ–Ω–∏–µ DNS –∑–∞–ø–∏—Å–µ–π –Ω–µ—É–¥–∞—á–Ω–æ: {str(e)}"
            )
    
    # –°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    async def ping_host(self, host: str, count: int = 4, timeout: float = 5.0) -> ToolResult:
        """Ping —Ö–æ—Å—Ç–∞"""
        try:
            import subprocess
            import platform
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É ping –¥–ª—è OS
            if platform.system().lower() == "windows":
                cmd = ["ping", "-n", str(count), host]
            else:
                cmd = ["ping", "-c", str(count), "-W", str(int(timeout)), host]
            
            start_time = time.time()
            result = subprocess.run(
                cmd, 
                capture_output=True, 
                text=True, 
                timeout=timeout * count + 5
            )
            total_time = time.time() - start_time
            
            success = result.returncode == 0
            
            # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            output_lines = result.stdout.split('\n')
            stats = {
                "packets_sent": count,
                "packets_received": 0,
                "packet_loss": 100.0,
                "min_time": None,
                "max_time": None,
                "avg_time": None
            }
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            for line in output_lines:
                if "received" in line.lower() and "transmitted" in line.lower():
                    # Linux/Mac —Ñ–æ—Ä–º–∞—Ç
                    parts = line.split()
                    if len(parts) >= 4:
                        try:
                            stats["packets_received"] = int(parts[3])
                            stats["packet_loss"] = (count - stats["packets_received"]) / count * 100
                        except:
                            pass
                elif "time=" in line.lower():
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
                    try:
                        time_part = line.split("time=")[1].split()[0]
                        time_ms = float(time_part.replace("ms", ""))
                        if stats["min_time"] is None or time_ms < stats["min_time"]:
                            stats["min_time"] = time_ms
                        if stats["max_time"] is None or time_ms > stats["max_time"]:
                            stats["max_time"] = time_ms
                    except:
                        pass
            
            return ToolResult(
                success=success,
                data={
                    "host": host,
                    "ping_successful": success,
                    "total_time": total_time,
                    "statistics": stats,
                    "output": result.stdout[:500],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                    "error_output": result.stderr[:200] if result.stderr else None
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"Ping –Ω–µ—É–¥–∞—á–µ–Ω: {str(e)}"
            )
    
    async def scan_port(self, host: str, port: int, timeout: float = 3.0) -> ToolResult:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞"""
        try:
            start_time = time.time()
            
            # –°–æ–∑–¥–∞—ë–º socket –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(timeout)
            
            try:
                result = sock.connect_ex((host, port))
                is_open = result == 0
                response_time = time.time() - start_time
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ä–≤–∏—Å
                service_name = None
                try:
                    service_name = socket.getservbyport(port)
                except:
                    pass
                
                check = HostCheck(
                    host=host,
                    port=port,
                    is_reachable=is_open,
                    response_time=response_time,
                    error=None if is_open else f"Connection refused or timeout"
                )
                
                return ToolResult(
                    success=True,
                    data={
                        **asdict(check),
                        "service_name": service_name,
                        "status": "open" if is_open else "closed"
                    }
                )
                
            finally:
                sock.close()
                
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞ –Ω–µ—É–¥–∞—á–Ω–æ: {str(e)}"
            )
    
    async def scan_ports_range(self, host: str, start_port: int = 1, end_port: int = 1000, timeout: float = 1.0) -> ToolResult:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ—Ä—Ç–æ–≤"""
        try:
            open_ports = []
            closed_ports = []
            total_scanned = 0
            
            start_time = time.time()
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            max_ports = min(end_port - start_port + 1, 200)  # –ú–∞–∫—Å–∏–º—É–º 200 –ø–æ—Ä—Ç–æ–≤
            actual_end = min(end_port, start_port + max_ports - 1)
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scan_tasks = []
            for port in range(start_port, actual_end + 1):
                task = self.scan_port(host, port, timeout)
                scan_tasks.append(task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞—Ç—á–∞–º–∏ –ø–æ 50 –ø–æ—Ä—Ç–æ–≤
            batch_size = 50
            for i in range(0, len(scan_tasks), batch_size):
                batch = scan_tasks[i:i + batch_size]
                results = await asyncio.gather(*batch, return_exceptions=True)
                
                for result in results:
                    if isinstance(result, Exception):
                        continue
                    
                    if result.success and result.data["is_reachable"]:
                        open_ports.append({
                            "port": result.data["port"],
                            "service_name": result.data.get("service_name"),
                            "response_time": result.data["response_time"]
                        })
                    else:
                        closed_ports.append(result.data["port"])
                    
                    total_scanned += 1
            
            total_time = time.time() - start_time
            
            return ToolResult(
                success=True,
                data={
                    "host": host,
                    "port_range": f"{start_port}-{actual_end}",
                    "total_scanned": total_scanned,
                    "open_ports": open_ports,
                    "open_count": len(open_ports),
                    "closed_count": len(closed_ports),
                    "scan_time": total_time,
                    "ports_per_second": total_scanned / total_time if total_time > 0 else 0
                }
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                error=f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ—Ä—Ç–æ–≤ –Ω–µ—É–¥–∞—á–Ω–æ: {str(e)}"
            )
    
    # –†–µ–∞–ª–∏–∑—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async def execute(self, action: str, **kwargs) -> ToolResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        if action == "http_request":
            return await self.http_request(**kwargs)
        elif action == "get_request":
            return await self.get_request(**kwargs)
        elif action == "post_request":
            return await self.post_request(**kwargs)
        elif action == "put_request":
            return await self.put_request(**kwargs)
        elif action == "delete_request":
            return await self.delete_request(**kwargs)
        elif action == "patch_request":
            return await self.patch_request(**kwargs)
        elif action == "resolve_dns":
            return await self.resolve_dns(**kwargs)
        elif action == "get_dns_records":
            return await self.get_dns_records(**kwargs)
        elif action == "ping_host":
            return await self.ping_host(**kwargs)
        elif action == "scan_port":
            return await self.scan_port(**kwargs)
        elif action == "scan_ports_range":
            return await self.scan_ports_range(**kwargs)
        else:
            return ToolResult(
                success=False,
                error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
            )
    
    def get_schema(self) -> Dict[str, Any]:
        return {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "enum": self.get_available_actions(),
                    "description": "–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                },
                "url": {
                    "type": "string",
                    "description": "URL –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"
                },
                "method": {
                    "type": "string",
                    "enum": ["GET", "POST", "PUT", "DELETE", "PATCH"],
                    "description": "HTTP –º–µ—Ç–æ–¥"
                },
                "hostname": {
                    "type": "string",
                    "description": "–ò–º—è —Ö–æ—Å—Ç–∞ –¥–ª—è DNS –æ–ø–µ—Ä–∞—Ü–∏–π"
                },
                "host": {
                    "type": "string",
                    "description": "IP –∞–¥—Ä–µ—Å –∏–ª–∏ –∏–º—è —Ö–æ—Å—Ç–∞"
                },
                "port": {
                    "type": "integer",
                    "description": "–ù–æ–º–µ—Ä –ø–æ—Ä—Ç–∞"
                },
                "start_port": {
                    "type": "integer",
                    "description": "–ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
                },
                "end_port": {
                    "type": "integer",
                    "description": "–ö–æ–Ω–µ—á–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
                },
                "record_type": {
                    "type": "string",
                    "enum": ["A", "AAAA", "MX", "CNAME", "TXT", "NS", "PTR"],
                    "description": "–¢–∏–ø DNS –∑–∞–ø–∏—Å–∏"
                },
                "timeout": {
                    "type": "number",
                    "description": "–¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
                },
                "count": {
                    "type": "integer",
                    "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ping –ø–∞–∫–µ—Ç–æ–≤"
                }
            },
            "required": ["action"]
        } 