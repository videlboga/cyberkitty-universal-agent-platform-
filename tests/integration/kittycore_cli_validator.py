#!/usr/bin/env python3
"""
üê± KittyCore 3.0 - CLI —Å ValidatorKitty

–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å ‚Üí —Å–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
2. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Üí –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ  
3. –ê–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç ‚Üí —Å–æ–∑–¥–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
4. –í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
"""

import asyncio
import sys
import kittycore
from core.validator_kitty import ValidatorKitty, ResultExpectation, ValidationResult
# from core.memory_management import MemoryManager

def format_files_created(result):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    execution = result.get('execution', {})
    files = execution.get('files_created', [])
    
    if files:
        files_count = len(files)
        files_text = "\n".join([f"   üìÑ {file}" for file in files])
        return f"\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´ ({files_count}):\n{files_text}"
    return "\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:\n   (—Ñ–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å)"

def format_execution_results(result):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    execution = result.get('execution', {})
    step_results = execution.get('step_results', {})
    
    if not step_results:
        return "   (–¥–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)"
    
    formatted = []
    for step_id, step_result in step_results.items():
        status_icon = "‚úÖ" if step_result.get('status') == 'completed' else "‚ùå"
        agent = step_result.get('agent', 'unknown')
        result_text = step_result.get('result', 'No result')
        formatted.append(f"   {status_icon} {agent}: {result_text}")
    
    return "\n".join(formatted)

async def get_user_approval(expectation: ResultExpectation) -> tuple[bool, str]:
    """
    –§–ê–ó–ê 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    validator = ValidatorKitty()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    expectation_text = validator.format_expectation_for_user(expectation)
    print(expectation_text)
    
    while True:
        try:
            response = input("‚û§ –¢–≤–æ–π –æ—Ç–≤–µ—Ç: ").strip().lower()
            
            if response in ['–¥–∞', 'yes', 'y', '–¥', '+', '1']:
                return True, ""
            elif response in ['–Ω–µ—Ç', 'no', 'n', '–Ω', '-', '0']:
                return False, ""
            elif response.startswith('—É—Ç–æ—á–Ω–∏') or '—É—Ç–æ—á–Ω–µ–Ω–∏—è' in response:
                clarification = input("üìù –ö–∞–∫–∏–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω—É–∂–Ω—ã? ")
                return False, clarification
            else:
                print("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å: '–¥–∞', '–Ω–µ—Ç' –∏–ª–∏ '—É—Ç–æ—á–Ω–∏'")
                
        except KeyboardInterrupt:
            return False, ""

async def process_request_with_validator(user_input: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å ValidatorKitty workflow
    """
    print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: {user_input}")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    validator = ValidatorKitty()
    
    # –§–ê–ó–ê 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print("\nüéØ –§–ê–ó–ê 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞")
    print("ValidatorKitty –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è...")
    
    expectation = await validator.analyze_request(user_input)
    
    # –§–ê–ó–ê 2: –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\nüë§ –§–ê–ó–ê 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏–π")
    approved, clarification = await get_user_approval(expectation)
    
    if not approved:
        if clarification:
            print(f"\nüìù –ü–æ–ª—É—á–µ–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è: {clarification}")
            print("üîÑ –ü–µ—Ä–µ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏...")
            # –ú–æ–∂–Ω–æ –∑–¥–µ—Å—å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å expectation –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ç–æ—á–Ω–µ–Ω–∏–π
            user_input = f"{user_input}. –£—Ç–æ—á–Ω–µ–Ω–∏—è: {clarification}"
        else:
            print("‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return
    
    expectation.user_approved = True
    print("‚úÖ –û–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã! –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤...")
    
    # –§–ê–ó–ê 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
    print("\nü§ñ –§–ê–ó–ê 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏")
    print("–ê–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π...")
    
    orchestrator = kittycore.create_orchestrator()
    result = await orchestrator.solve_task(user_input)
    
    if result['status'] == 'completed':
        print(f"‚úÖ –ê–≥–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É –∑–∞ {result['duration']:.2f}—Å")
        
        # –§–ê–ó–ê 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print("\nüîç –§–ê–ó–ê 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        print("ValidatorKitty –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º...")
        
        execution = result.get('execution', {})
        created_files = execution.get('files_created', [])
        step_results = execution.get('step_results', {})
        
        validation_result = await validator.validate_results(
            expectation, created_files, step_results
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validation_text = validator.format_validation_result(validation_result)
        print(validation_text)
        
        # –§–ê–ó–ê 5: –†–µ—à–µ–Ω–∏–µ –æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏
        if validation_result.retry_needed:
            print("\nüîÑ –§–ê–ó–ê 5: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
            
            retry_decision = input("ü§î –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
            
            if retry_decision in ['–¥–∞', 'yes', 'y', '–¥']:
                print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É...")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
                print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
            else:
                print("‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –µ—Å—Ç—å")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        print(f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result['complexity_analysis']['complexity']}")
        print(f"üë• –ö–æ–º–∞–Ω–¥–∞: {result['team']['team_size']} –∞–≥–µ–Ω—Ç–æ–≤")
        
        print(f"\nüìã –ü–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è:")
        for i, subtask in enumerate(result['subtasks'], 1):
            print(f"   {i}. {subtask['description']}")
        
        print(f"\nüìà Workflow:")
        print(result['workflow_graph']['mermaid'])
        
        print(format_files_created(result))
        
        print(f"\nüîß –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
        print(format_execution_results(result))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
        memory_stats = result.get('collective_memory_stats', {})
        if memory_stats:
            print(f"\nüß† –ö–û–õ–õ–ï–ö–¢–ò–í–ù–ê–Ø –ü–ê–ú–Ø–¢–¨:")
            print(f"   üìù –ó–∞–ø–∏—Å–µ–π: {memory_stats.get('total_entries', 0)}")
            print(f"   üë• –ê–≥–µ–Ω—Ç–æ–≤: {memory_stats.get('agents', 0)}")
        
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

async def main():
    print("üê± KittyCore 3.0 - CLI —Å ValidatorKitty")
    print("=" * 45)
    print("üéØ –£–º–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print("   1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å ‚Üí —Å–æ–∑–¥–∞—é –æ–±—Ä–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    print("   2. –ü–æ–∫–∞–∑—ã–≤–∞—é —Ç–µ–±–µ ‚Üí –ø–æ–ª—É—á–∞—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ") 
    print("   3. –ê–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç ‚Üí —Å–æ–∑–¥–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    print("   4. –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—á–µ—Å—Ç–≤–æ ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ")
    print("\n–í–≤–µ–¥–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
    
    while True:
        try:
            user_input = input("üí¨ –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å: ").strip()
            
            if user_input.lower() in ['exit', '–≤—ã—Ö–æ–¥', 'quit']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not user_input:
                continue
                
            await process_request_with_validator(user_input)
            print("\n" + "="*50)
            
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 