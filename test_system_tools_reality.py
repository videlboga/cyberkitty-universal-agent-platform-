#!/usr/bin/env python3
"""
üöÄ –†–ï–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–ù–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í - –ß–ê–°–¢–¨ 2

–†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
‚ùå –ù–ï–¢ –ú–û–ö–û–í - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚ùå –ù–ï–¢ f"{tool}: —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω"
‚ùå –ù–ï–¢ len(text) > 20 –≤–∞–ª–∏–¥–∞—Ü–∏–∏
‚úÖ –†–ï–ê–õ–¨–ù–´–ï —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø —Ä–∞–±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π
"""

import asyncio
import time
import tempfile
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass

@dataclass
class RealTestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    tool_name: str
    success: bool
    execution_time: float
    real_output: Optional[str] = None
    error_message: Optional[str] = None
    files_created: int = 0
    system_operations: int = 0

class SystemToolsRealityTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.temp_dir = Path(tempfile.mkdtemp(prefix="kittycore_system_reality_"))
        self.results: List[RealTestResult] = []
        
    async def test_super_system_tool(self) -> RealTestResult:
        """–†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        print("üöÄ –¢–µ—Å—Ç–∏—Ä—É—é super_system_tool...")
        start_time = time.time()
        
        try:
            from kittycore.tools import DEFAULT_TOOLS
            tool = DEFAULT_TOOLS.get_tool("super_system_tool")
            
            if not tool:
                return RealTestResult("super_system_tool", False, 0, error_message="Tool not found")
            
            # –†–ï–ê–õ–¨–ù–ê–Ø –æ–ø–µ—Ä–∞—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            test_file = self.temp_dir / "system_test.txt"
            test_content = "KittyCore 3.0 System Reality Test"
            
            result = tool.execute(
                action="safe_file_write",
                path=str(test_file),
                content=test_content
            )
            execution_time = time.time() - start_time
            
            # –°–¢–†–û–ì–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è - —Ñ–∞–π–ª —Ä–µ–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω?
            success = False
            files_created = 0
            real_output = "No file created"
            
            if result and hasattr(result, 'success') and result.success:
                if test_file.exists():
                    actual_content = test_file.read_text().strip()
                    if actual_content == test_content:
                        success = True
                        files_created = 1
                        real_output = f"File created: {actual_content}"
                    else:
                        real_output = f"File content mismatch: {actual_content}"
                else:
                    real_output = "File not found on filesystem"
            
            return RealTestResult(
                "super_system_tool", 
                success, 
                execution_time,
                real_output=real_output,
                files_created=files_created,
                system_operations=1
            )
            
        except Exception as e:
            return RealTestResult("super_system_tool", False, time.time() - start_time, error_message=str(e)[:100])

    async def test_code_execution(self) -> RealTestResult:
        """–†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞"""
        print("üíª –¢–µ—Å—Ç–∏—Ä—É—é code_execution...")
        start_time = time.time()
        
        try:
            from kittycore.tools import DEFAULT_TOOLS
            tool = DEFAULT_TOOLS.get_tool("code_execution")
            
            if not tool:
                return RealTestResult("code_execution", False, 0, error_message="Tool not found")
            
            # –†–ï–ê–õ–¨–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π
            test_code = """
import math
result = math.sqrt(16) + math.pi
print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result:.2f}")
print("–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
"""
            
            result = tool.execute(
                action="execute_python",
                code=test_code
            )
            execution_time = time.time() - start_time
            
            # –°–¢–†–û–ì–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            success = False
            real_output = "No output"
            
            if result and hasattr(result, 'success') and result.success:
                if hasattr(result, 'data') and result.data:
                    output_str = str(result.data)
                    real_output = output_str[:100]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –†–ï–ê–õ–¨–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                    success = (
                        "–†–µ–∑—É–ª—å—Ç–∞—Ç: 7.14" in output_str and  # sqrt(16) + pi ‚âà 7.14
                        "–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!" in output_str and
                        not ("—É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω" in output_str.lower())
                    )
            
            return RealTestResult(
                "code_execution", 
                success, 
                execution_time,
                real_output=real_output,
                system_operations=1
            )
            
        except Exception as e:
            return RealTestResult("code_execution", False, time.time() - start_time, error_message=str(e)[:100])

    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ" + "="*60)
        print("üöÄ KITTYCORE 3.0 - –†–ï–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")  
        print("üöÄ" + "="*60)
        print("‚ùå –ù–ï–¢ –ú–û–ö–û–í | ‚úÖ –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò")
        print()
        
        # –¢–µ—Å—Ç 1: SuperSystemTool
        result1 = await self.test_super_system_tool()
        self.results.append(result1)
        
        status1 = "‚úÖ" if result1.success else "‚ùå"
        print(f"1/2 super_system_tool    {status1} {result1.execution_time:.1f}—Å")
        
        if result1.error_message:
            print(f"    ‚ö†Ô∏è {result1.error_message}")
        elif result1.success:
            print(f"    üìÅ {result1.files_created} —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ")
        else:
            print(f"    ‚ùå {result1.real_output}")
        
        # –¢–µ—Å—Ç 2: CodeExecution
        result2 = await self.test_code_execution()
        self.results.append(result2)
        
        status2 = "‚úÖ" if result2.success else "‚ùå"
        print(f"2/2 code_execution       {status2} {result2.execution_time:.1f}—Å")
        
        if result2.error_message:
            print(f"    ‚ö†Ô∏è {result2.error_message}")
        elif result2.success:
            print(f"    üíª –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"    ‚ùå {result2.real_output}")
            
        # –ò—Ç–æ–≥–∏
        successful = sum(1 for r in self.results if r.success)
        success_rate = successful / len(self.results)
        
        print(f"\nüöÄ" + "="*60)
        print(f"üöÄ –ò–¢–û–ì–ò –°–ò–°–¢–ï–ú–ù–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
        print(f"üöÄ" + "="*60)
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}/{len(self.results)} ({success_rate:.1%})")
        print(f"   üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {sum(r.files_created for r in self.results)}")
        print(f"   üîß –û–ø–µ—Ä–∞—Ü–∏–π: {sum(r.system_operations for r in self.results)}")
        
        if success_rate >= 0.8:
            print(f"\nüèÜ –°–ò–°–¢–ï–ú–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´: –û–¢–õ–ò–ß–ù–ê–Ø –†–ï–ê–õ–¨–ù–û–°–¢–¨!")
        elif success_rate >= 0.6:
            print(f"\nüëç –°–ò–°–¢–ï–ú–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´: –•–û–†–û–®–ê–Ø –†–ï–ê–õ–¨–ù–û–°–¢–¨")
        else:
            print(f"\n‚ö†Ô∏è –°–ò–°–¢–ï–ú–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´: –ù–£–ñ–ù–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")

async def main():
    tester = SystemToolsRealityTester()
    
    try:
        await tester.run_tests()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        import shutil
        try:
            shutil.rmtree(tester.temp_dir)
        except:
            pass

if __name__ == "__main__":
    asyncio.run(main()) 