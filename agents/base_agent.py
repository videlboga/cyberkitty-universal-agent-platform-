"""
–ë–∞–∑–æ–≤—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è KittyCore 3.0
–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, Any, List, Optional

from .intellectual_agent import IntellectualAgent
# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç LLMProvider
from kittycore.llm import get_llm_provider, LLMProvider

logger = logging.getLogger(__name__)


class Agent:
    """
    –ë–∞–∑–æ–≤—ã–π –∞–≥–µ–Ω—Ç KittyCore 3.0
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç IntellectualAgent –¥–ª—è LLM-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
    """
    
    def __init__(self, agent_id: str, name: str = None):
        self.agent_id = agent_id
        self.name = name or f"Agent_{agent_id}"
        self.intellectual_agent = IntellectualAgent()
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω {self.name}")
    
    async def execute(self, task: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª—å–∑—É—è IntellectualAgent
        """
        try:
            logger.info(f"ü§ñ {self} –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É: {task}")
            
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ IntellectualAgent
            result = await self.intellectual_agent.execute_task(task, context or {})
            
            logger.info(f"‚úÖ –®–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {task}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ {self.name}: {e}")
            return {
                "success": False,
                "error": str(e),
                "task": task
            }
    
    def __str__(self):
        return f"Agent({self.name})"
    
    def __repr__(self):
        return f"Agent(id={self.agent_id}, name={self.name})" 