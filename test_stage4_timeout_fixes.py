#!/usr/bin/env python3
"""
‚è∞ –≠–¢–ê–ü 4: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ô–ú–ê–£–¢–û–í
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤

–ü–õ–ê–ù –≠–¢–ê–ü–ê 4:
- ai_integration_tool: –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Ç–∞–π–º–∞—É—Ç–æ–≤ (16+ –º–∏–Ω—É—Ç ‚Üí 30-60—Å)
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏/–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
- –û—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: +1 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤—ã–π (1 –¥–µ–Ω—å)

–ü–†–ò–ù–¶–ò–ü–´:
‚úÖ –†–ï–ê–õ–¨–ù–´–ï AI API –∑–∞–ø—Ä–æ—Å—ã
‚ùå –ù–ï–¢ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ç–∞–π–º–∞—É—Ç–æ–≤
‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –ª—ë–≥–∫–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
‚úÖ Fallback —Ä–µ–∂–∏–º—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
"""

import time
import json
import asyncio
import traceback
from pathlib import Path

# –ò–ú–ü–û–†–¢ AI –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê
try:
    from kittycore.tools.ai_integration_tool import AIIntegrationTool
    IMPORT_AI_OK = True
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ ai_integration_tool: {e}")
    IMPORT_AI_OK = False

class TimeoutHonestTester:
    """–ß–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏"""
    
    def __init__(self):
        self.results = []
        self.memory_records = []
        self.timeout_tests = []
    
    def test_tool_timeout_honest(self, tool_name, test_func, expected_max_time=60):
        """–ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ç–∞–π–º–∞—É—Ç–∞"""
        print(f"\n‚è∞ –¢–µ—Å—Ç–∏—Ä—É—é —Ç–∞–π–º–∞—É—Ç {tool_name} (–º–∞–∫—Å {expected_max_time}—Å)...")
        start_time = time.time()
        
        try:
            result = test_func()
            execution_time = time.time() - start_time
            
            # –ß–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
            is_honest = self.is_timeout_result_honest(result, tool_name, execution_time, expected_max_time)
            
            test_result = {
                "tool": tool_name,
                "success": is_honest,
                "size_bytes": len(str(result)) if result else 0,
                "execution_time": round(execution_time, 2),
                "expected_max_time": expected_max_time,
                "timeout_ok": execution_time <= expected_max_time,
                "honest": is_honest,
                "result_sample": str(result)[:200] if result else "NO_DATA"
            }
            
            self.results.append(test_result)
            
            if is_honest:
                time_status = "‚ö° –ë–´–°–¢–†–û" if execution_time <= expected_max_time else "üêå –ú–ï–î–õ–ï–ù–ù–û"
                print(f"‚úÖ {tool_name}: {test_result['size_bytes']} –±–∞–π—Ç –∑–∞ {execution_time:.2f}—Å {time_status}")
                self.record_working_timeout_params(tool_name, test_func.__name__, execution_time)
            else:
                print(f"‚ùå {tool_name}: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤—Ä–µ–º—è: {execution_time:.2f}—Å)")
            
            return test_result
            
        except Exception as e:
            execution_time = time.time() - start_time
            error_msg = str(e)[:200]
            print(f"‚ùå {tool_name}: –¢–ê–ô–ú–ê–£–¢ –û–®–ò–ë–ö–ê - {error_msg} (–≤—Ä–µ–º—è: {execution_time:.2f}—Å)")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞–π–º–∞—É—Ç-–æ—à–∏–±–æ–∫
            timeout_diagnostic = self.diagnose_timeout_error(e, tool_name, execution_time)
            
            test_result = {
                "tool": tool_name,
                "success": False,
                "size_bytes": 0,
                "execution_time": round(execution_time, 2),
                "expected_max_time": expected_max_time,
                "timeout_ok": execution_time <= expected_max_time,
                "honest": False,
                "error": error_msg,
                "timeout_diagnostic": timeout_diagnostic
            }
            
            self.results.append(test_result)
            return test_result
    
    def diagnose_timeout_error(self, error, tool_name, execution_time):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞–π–º–∞—É—Ç-–æ—à–∏–±–æ–∫"""
        error_str = str(error).lower()
        
        if "timeout" in error_str:
            return f"TIMEOUT_ERROR: {tool_name} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ ({execution_time:.1f}—Å)"
        elif "connection" in error_str:
            return f"CONNECTION_ERROR: –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API"
        elif "api" in error_str or "key" in error_str:
            return f"API_ERROR: –ü—Ä–æ–±–ª–µ–º—ã —Å API –∫–ª—é—á–æ–º –∏–ª–∏ –ª–∏–º–∏—Ç–∞–º–∏"
        elif "rate" in error_str or "limit" in error_str:
            return f"RATE_LIMIT: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API"
        else:
            return f"UNKNOWN_TIMEOUT: {error_str}"
    
    def is_timeout_result_honest(self, result, tool_name, execution_time, expected_max_time):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if not result:
            return False
        
        result_str = str(result)
        
        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        fake_patterns = [
            f"{tool_name}: AI –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω",
            "–¥–µ–º–æ —Ä–µ–∂–∏–º AI",
            "–º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –∑–∞–≥–ª—É—à–∫–∞",
            "–æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ",
            "AI —ç–º—É–ª—è—Ç–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        ]
        
        for pattern in fake_patterns:
            if pattern.lower() in result_str.lower():
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ AI –ø—Ä–∏–∑–Ω–∞–∫–∏
        ai_indicators = [
            "model", "provider", "response", "completion",
            "gpt", "claude", "llama", "openai", "anthropic"
        ]
        
        has_ai_data = any(indicator in result_str.lower() for indicator in ai_indicators)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä + AI –ø—Ä–∏–∑–Ω–∞–∫–∏ + —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è
        size_ok = len(result_str) > 30
        time_ok = execution_time <= (expected_max_time + 10)  # –î–∞—ë–º 10—Å –±—É—Ñ–µ—Ä
        
        return size_ok and has_ai_data and time_ok
    
    def record_working_timeout_params(self, tool_name, action_name, execution_time):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞–±–æ—á–∏–µ —Ç–∞–π–º–∞—É—Ç-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø–∞–º—è—Ç—å"""
        memory_record = {
            "tool": tool_name,
            "working_action": action_name,
            "timestamp": time.time(),
            "execution_time": execution_time,
            "status": "TIMEOUT_WORKING",
            "timeout_pattern": f"success in {execution_time:.1f}s",
            "notes": f"Timeout test passed for {tool_name} in reasonable time"
        }
        self.memory_records.append(memory_record)

def test_ai_integration_fast():
    """–¢–µ—Å—Ç AIIntegrationTool —Å –±—ã—Å—Ç—Ä–æ–π –º–æ–¥–µ–ª—å—é"""
    if not IMPORT_AI_OK:
        return "IMPORT_ERROR"
    
    tool = AIIntegrationTool()
    
    # –†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç —Å –±—ã—Å—Ç—Ä–æ–π –ª—ë–≥–∫–æ–π –º–æ–¥–µ–ª—å—é
    result = tool.execute(
        action="complete",
        prompt="Say 'Hello World' in one word only",
        provider="groq",  # –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        model="llama-3.1-8b-instant",  # –õ—ë–≥–∫–∞—è –º–æ–¥–µ–ª—å
        max_tokens=5,  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
        temperature=0.1  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    )
    
    return result

def test_ai_integration_models():
    """–¢–µ—Å—Ç AIIntegrationTool –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π"""
    if not IMPORT_AI_OK:
        return "IMPORT_ERROR"
    
    tool = AIIntegrationTool()
    
    # –†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ–∑ LLM –≤—ã–∑–æ–≤–∞
    result = tool.execute(
        action="list_models",
        provider="openrouter"  # –ò–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    )
    
    return result

def test_ai_integration_providers():
    """–¢–µ—Å—Ç AIIntegrationTool –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    if not IMPORT_AI_OK:
        return "IMPORT_ERROR"
    
    tool = AIIntegrationTool()
    
    # –†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö
    result = tool.execute(
        action="list_providers"
    )
    
    return result

def test_ai_integration_config():
    """–¢–µ—Å—Ç AIIntegrationTool –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    if not IMPORT_AI_OK:
        return "IMPORT_ERROR"
    
    tool = AIIntegrationTool()
    
    # –†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    result = tool.execute(
        action="get_config"
    )
    
    return result

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–∞–ø–∞ 4"""
    print("‚è∞ –≠–¢–ê–ü 4: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ô–ú–ê–£–¢–û–í")
    print("=" * 50)
    
    tester = TimeoutHonestTester()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
    if IMPORT_AI_OK:
        # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (–¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞ —Å–µ–∫—É–Ω–¥—ã)
        tester.test_tool_timeout_honest("ai_providers", test_ai_integration_providers, 5)
        tester.test_tool_timeout_honest("ai_config", test_ai_integration_config, 5)
        tester.test_tool_timeout_honest("ai_models", test_ai_integration_models, 10)
        
        # –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç (—Ä–µ–∞–ª—å–Ω—ã–π LLM –∑–∞–ø—Ä–æ—Å)
        tester.test_tool_timeout_honest("ai_fast_llm", test_ai_integration_fast, 30)
    else:
        print("‚ùå ai_integration_tool: –ò–ú–ü–û–†–¢ –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–∞–ø–∞ 4
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–¢–ê–ü–ê 4:")
    
    total_tests = len(tester.results)
    honest_tests = sum(1 for r in tester.results if r["honest"])
    timeout_ok_tests = sum(1 for r in tester.results if r["timeout_ok"])
    success_rate = (honest_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ —Ç–∞–π–º–∞—É—Ç-—Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ß–µ—Å—Ç–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {honest_tests}")
    print(f"–£–∫–ª–æ–∂–∏–ª–∏—Å—å –≤ –≤—Ä–µ–º—è: {timeout_ok_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    print("\nüéØ –î–ï–¢–ê–õ–ò:")
    for result in tester.results:
        status = "‚úÖ –ß–ï–°–¢–ù–´–ô" if result["honest"] else "‚ùå –ü–†–û–ë–õ–ï–ú–ê"
        time_status = "‚ö°" if result["timeout_ok"] else "üêå"
        expected = result["expected_max_time"]
        actual = result["execution_time"]
        print(f"{result['tool']}: {status} {time_status} ({actual:.1f}—Å –∏–∑ {expected}—Å, {result['size_bytes']} –±–∞–π—Ç)")
        
        if "timeout_diagnostic" in result:
            print(f"   üîç –¢–∞–π–º–∞—É—Ç-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {result['timeout_diagnostic']}")
        elif result["honest"]:
            print(f"   ‚è∞ –û–±—Ä–∞–∑–µ—Ü: {result['result_sample'][:100]}...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("stage4_results.json", "w", encoding="utf-8") as f:
        json.dump({
            "stage": 4,
            "description": "Timeout fixes for AI tools",
            "results": tester.results,
            "memory_records": tester.memory_records,
            "summary": {
                "total_tests": total_tests,
                "honest_tests": honest_tests,
                "timeout_ok_tests": timeout_ok_tests,
                "success_rate": success_rate,
                "ai_tools_tested": 1
            }
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stage4_results.json")
    
    # –ü–æ–¥—Å—á—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    unique_ai_tools = set()
    for result in tester.results:
        if result["honest"] and result["timeout_ok"]:
            if "ai_" in result["tool"]:
                unique_ai_tools.add("ai_integration_tool")
    
    new_honest_tools = len(unique_ai_tools)
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏
    current_honest = 8  # –∏–∑ —ç—Ç–∞–ø–æ–≤ 1-2
    total_honest = current_honest + new_honest_tools
    total_target = 18
    
    print(f"\nüöÄ –ü–†–û–ì–†–ï–°–° –ö –¶–ï–õ–ò:")
    print(f"–ë—ã–ª–æ —á–µ—Å—Ç–Ω—ã—Ö: {current_honest}/18 (44.4%)")
    print(f"–°—Ç–∞–ª–æ —á–µ—Å—Ç–Ω—ã—Ö: {total_honest}/18 ({total_honest/total_target*100:.1f}%)")
    print(f"–£–ª—É—á—à–µ–Ω–∏–µ: +{new_honest_tools} AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    print(f"\n‚è∞ –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ò:")
    fast_tests = [r for r in tester.results if r["execution_time"] <= 10]
    slow_tests = [r for r in tester.results if r["execution_time"] > 10]
    
    if fast_tests:
        avg_fast = sum(r["execution_time"] for r in fast_tests) / len(fast_tests)
        print(f"‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã ({len(fast_tests)}): —Å—Ä–µ–¥–Ω–µ–µ {avg_fast:.1f}—Å")
    
    if slow_tests:
        avg_slow = sum(r["execution_time"] for r in slow_tests) / len(slow_tests)
        print(f"üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã ({len(slow_tests)}): —Å—Ä–µ–¥–Ω–µ–µ {avg_slow:.1f}—Å")
    
    if success_rate >= 50 and timeout_ok_tests >= (total_tests * 0.75):
        print("\nüéâ –≠–¢–ê–ü 4 –£–°–ü–ï–®–ï–ù! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≠–¢–ê–ü–£ 5...")
        return True
    else:
        print("\n‚ö†Ô∏è –≠–¢–ê–ü 4 –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
        return False

if __name__ == "__main__":
    main() 