#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è Universal Agent Platform.
–ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!

–§—É–Ω–∫—Ü–∏–∏:
- –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
- –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ Redis/MongoDB)
"""

import asyncio
import os
from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta
from dataclasses import dataclass, field
from loguru import logger

from app.core.base_plugin import BasePlugin


@dataclass
class ScheduledTask:
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞"""
    id: str
    user_id: str
    chat_id: str
    scenario_id: str
    context: Dict[str, Any]
    execute_at: datetime
    created_at: datetime = field(default_factory=datetime.utcnow)
    executed: bool = False
    result: Optional[Dict[str, Any]] = None


class SimpleSchedulerPlugin(BasePlugin):
    """
    –ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á.
    
    –ü—Ä–∏–Ω—Ü–∏–ø: –ü–†–û–°–¢–û–¢–ê –ü–†–ï–í–´–®–ï –í–°–ï–ì–û!
    - –•—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –¥–µ–º–æ)
    - –ü—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
    - –ú–∏–Ω–∏–º—É–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    """
    
    def __init__(self):
        super().__init__(name="simple_scheduler")
        self.tasks: Dict[str, ScheduledTask] = {}
        self.running = False
        self.check_interval = 10  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        self._scheduler_task: Optional[asyncio.Task] = None
        
    async def _do_initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        logger.info("üïê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SimpleScheduler Plugin...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á
        await self.start_scheduler()
        
        logger.info("‚úÖ SimpleScheduler Plugin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        if self.running:
            return
            
        self.running = True
        self._scheduler_task = asyncio.create_task(self._scheduler_loop())
        logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        
    async def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        self.running = False
        if self._scheduler_task:
            self._scheduler_task.cancel()
            try:
                await self._scheduler_task
            except asyncio.CancelledError:
                pass
        logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        
        while self.running:
            try:
                await self._check_and_execute_tasks()
                await asyncio.sleep(self.check_interval)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                await asyncio.sleep(self.check_interval)
                
        logger.info("üîÑ –¶–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω")
        
    async def _check_and_execute_tasks(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏."""
        now = datetime.utcnow()
        ready_tasks = []
        
        # –ù–∞—Ö–æ–¥–∏–º –≥–æ—Ç–æ–≤—ã–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á–∏
        for task_id, task in self.tasks.items():
            if not task.executed and task.execute_at <= now:
                ready_tasks.append(task)
                
        if ready_tasks:
            logger.info(f"‚è∞ –ù–∞–π–¥–µ–Ω–æ {len(ready_tasks)} –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á")
            
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏
        for task in ready_tasks:
            await self._execute_task(task)
            
    async def _execute_task(self, task: ScheduledTask):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É."""
        try:
            logger.info(f"üéØ –í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞—á—É {task.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {task.user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–≤–∏–∂–æ–∫ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            from app.core.simple_engine import create_engine
            engine = await create_engine()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
            execution_context = {
                **task.context,
                "user_id": task.user_id,
                "chat_id": task.chat_id,
                "scheduled_task_id": task.id,
                "scheduled_execution": True
            }
            
            result = await engine.execute_scenario(task.scenario_id, execution_context)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            task.executed = True
            task.result = result
            
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task.id}: {e}")
            task.executed = True
            task.result = {"success": False, "error": str(e)}
            
    def register_handlers(self) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        return {
            "scheduler_create_task": self.create_task,
            "scheduler_list_tasks": self.list_tasks,
            "scheduler_get_task": self.get_task,
            "scheduler_cancel_task": self.cancel_task,
            "scheduler_get_stats": self.get_stats,
        }
        
    async def healthcheck(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        return self.running and self._scheduler_task is not None and not self._scheduler_task.done()
        
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    async def create_task(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã step:
        - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - chat_id: ID —á–∞—Ç–∞
        - scenario_id: ID —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        - delay_minutes: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)
        - task_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏
        - output_var: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            user_id = self.get_param(step, "user_id", required=True)
            chat_id = self.get_param(step, "chat_id", required=True)
            scenario_id = self.get_param(step, "scenario_id", required=True)
            delay_minutes = self.get_param(step, "delay_minutes", default=2)
            task_context = self.get_param(step, "task_context", default={})
            output_var = self.get_param(step, "output_var")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–¥–∞—á–∏
            task_id = f"task_{user_id}_{datetime.utcnow().timestamp()}"
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execute_at = datetime.utcnow() + timedelta(minutes=delay_minutes)
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
            task = ScheduledTask(
                id=task_id,
                user_id=user_id,
                chat_id=chat_id,
                scenario_id=scenario_id,
                context=task_context,
                execute_at=execute_at
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
            self.tasks[task_id] = task
            
            logger.info(f"üìÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id}: —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} —á–µ—Ä–µ–∑ {delay_minutes} –º–∏–Ω")
            
            result = {
                "success": True,
                "task_id": task_id,
                "execute_at": execute_at.isoformat(),
                "delay_minutes": delay_minutes,
                "scenario_id": scenario_id
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if output_var:
                context[output_var] = result
                
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            if self.get_param(step, "output_var"):
                context[self.get_param(step, "output_var")] = {"success": False, "error": str(e)}
            return context
            
    async def list_tasks(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            user_id = self.get_param(step, "user_id")
            output_var = self.get_param(step, "output_var")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏
            user_tasks = []
            for task in self.tasks.values():
                if not user_id or task.user_id == user_id:
                    user_tasks.append({
                        "id": task.id,
                        "user_id": task.user_id,
                        "scenario_id": task.scenario_id,
                        "execute_at": task.execute_at.isoformat(),
                        "executed": task.executed,
                        "created_at": task.created_at.isoformat()
                    })
                    
            result = {
                "success": True,
                "tasks": user_tasks,
                "count": len(user_tasks)
            }
            
            if output_var:
                context[output_var] = result
                
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
            if self.get_param(step, "output_var"):
                context[self.get_param(step, "output_var")] = {"success": False, "error": str(e)}
            return context
            
    async def get_task(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ."""
        try:
            task_id = self.get_param(step, "task_id", required=True)
            output_var = self.get_param(step, "output_var")
            
            if task_id not in self.tasks:
                result = {"success": False, "error": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            else:
                task = self.tasks[task_id]
                result = {
                    "success": True,
                    "task": {
                        "id": task.id,
                        "user_id": task.user_id,
                        "chat_id": task.chat_id,
                        "scenario_id": task.scenario_id,
                        "execute_at": task.execute_at.isoformat(),
                        "executed": task.executed,
                        "created_at": task.created_at.isoformat(),
                        "result": task.result
                    }
                }
                
            if output_var:
                context[output_var] = result
                
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            if self.get_param(step, "output_var"):
                context[self.get_param(step, "output_var")] = {"success": False, "error": str(e)}
            return context
            
    async def cancel_task(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É."""
        try:
            task_id = self.get_param(step, "task_id", required=True)
            output_var = self.get_param(step, "output_var")
            
            if task_id not in self.tasks:
                result = {"success": False, "error": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            else:
                task = self.tasks[task_id]
                if task.executed:
                    result = {"success": False, "error": "–ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"}
                else:
                    del self.tasks[task_id]
                    result = {"success": True, "message": "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"}
                    logger.info(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    
            if output_var:
                context[output_var] = result
                
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏: {e}")
            if self.get_param(step, "output_var"):
                context[self.get_param(step, "output_var")] = {"success": False, "error": str(e)}
            return context
            
    async def get_stats(self, step: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        try:
            output_var = self.get_param(step, "output_var")
            
            total_tasks = len(self.tasks)
            executed_tasks = sum(1 for task in self.tasks.values() if task.executed)
            pending_tasks = total_tasks - executed_tasks
            
            result = {
                "success": True,
                "stats": {
                    "total_tasks": total_tasks,
                    "executed_tasks": executed_tasks,
                    "pending_tasks": pending_tasks,
                    "scheduler_running": self.running,
                    "check_interval": self.check_interval
                }
            }
            
            if output_var:
                context[output_var] = result
                
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            if self.get_param(step, "output_var"):
                context[self.get_param(step, "output_var")] = {"success": False, "error": str(e)}
            return context 