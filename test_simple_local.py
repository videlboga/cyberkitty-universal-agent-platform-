#!/usr/bin/env python3
"""üè† –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –õ–û–ö–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–ò - DialoGPT-medium"""

import time
import torch

print("üè† –¢–ï–°–¢ –õ–û–ö–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–ò")
print("="*40)

def test_dialogpt():
    """ü§ñ –¢–µ—Å—Ç DialoGPT"""
    try:
        from transformers import AutoTokenizer, AutoModelForCausalLM
        
        model_name = "microsoft/DialoGPT-medium"
        print(f"üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ {model_name}...")
        
        start_time = time.time()
        tokenizer = AutoTokenizer.from_pretrained(model_name)
        if tokenizer.pad_token is None:
            tokenizer.pad_token = tokenizer.eos_token
            
        model = AutoModelForCausalLM.from_pretrained(
            model_name,
            torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32
        )
        
        device = "cuda" if torch.cuda.is_available() else "cpu"
        model = model.to(device)
        init_time = time.time() - start_time
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞ {init_time:.1f}—Å –Ω–∞ {device}")
        
        if device == "cuda":
            allocated = torch.cuda.memory_allocated() / 1024**3
            print(f"üíæ VRAM: {allocated:.1f}GB")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        questions = ["–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞?", "–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π?"]
        
        for q in questions:
            print(f"\nüß™ –¢–µ—Å—Ç: '{q}'")
            
            inputs = tokenizer.encode(q + tokenizer.eos_token, return_tensors='pt').to(device)
            
            start_time = time.time()
            with torch.no_grad():
                outputs = model.generate(
                    inputs,
                    max_length=inputs.shape[1] + 8,
                    temperature=0.1,
                    do_sample=True,
                    pad_token_id=tokenizer.eos_token_id
                )
            
            response = tokenizer.decode(outputs[0], skip_special_tokens=True)
            response = response[len(q):].strip()
            gen_time = time.time() - start_time
            
            print(f"‚ö° {gen_time:.2f}—Å: '{response}'")
        
        print(f"\n‚úÖ –ú–û–î–ï–õ–¨ –†–ê–ë–û–¢–ê–ï–¢!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False

if __name__ == "__main__":
    success = test_dialogpt()
    if success:
        print("\nüéØ –ì–û–¢–û–í –ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò!")
    else:
        print("\n‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã") 