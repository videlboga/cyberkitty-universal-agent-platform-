#!/usr/bin/env python3
"""
üõ°Ô∏è –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ß–ï–°–¢–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –ß–ê–°–¢–¨ 2  
üîß –†–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ KittyCore 3.0 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–µ—Å—Ç–Ω–æ—Å—Ç–∏

–ü–†–ò–ù–¶–ò–ü–´:
- üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é wrap_test_with_honesty_check
- üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã  
- üìä –ü–æ–ª—É—á–∞–µ–º —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- üö´ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ–º –ø–æ–¥–¥–µ–ª–∫–∏

–¶–ï–õ–¨: –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–∞–ª—å–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º!
"""

import asyncio
import json
import time
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.insert(0, str(Path(__file__).parent / 'kittycore'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ 
from test_honest_integration_part1 import HonestToolsTester

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
from kittycore.tools.enhanced_web_search_tool import EnhancedWebSearchTool
from kittycore.tools.media_tool import MediaTool
from kittycore.tools.network_tool import NetworkTool
from kittycore.tools.api_request_tool import ApiRequestTool
from kittycore.tools.super_system_tool import SuperSystemTool

class RealHonestToolsTester(HonestToolsTester):
    """
    üõ°Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —á–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–µ—Ä–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    """
    
    def __init__(self, honesty_threshold: float = 0.7):
        super().__init__(honesty_threshold)
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    
    async def test_enhanced_web_search_honestly(self):
        """üåê –ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
        def run_web_search():
            tool = EnhancedWebSearchTool()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –Ω–∞—à–∏—Ö —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            return asyncio.run(tool.execute(
                query="KittyCore AI system github", 
                limit=3
            ))
        
        result = self.wrap_test_with_honesty_check(
            "enhanced_web_search", "search", run_web_search
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ
        if result['honest_success']:
            self.record_successful_params(
                "enhanced_web_search", "search",
                {"query": "string", "limit": "number"},
                f"–ß–µ—Å—Ç–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: {result['data_size']} –±–∞–π—Ç –∑–∞ {result['execution_time']:.1f}—Å"
            )
        
        return result
    
    def test_media_tool_honestly(self):
        """üé® –ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        def run_media_tool():
            tool = MediaTool()
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            return tool.execute(action="get_info")
        
        result = self.wrap_test_with_honesty_check(
            "media_tool", "get_info", run_media_tool
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ
        if result['honest_success']:
            self.record_successful_params(
                "media_tool", "get_info",
                {"action": "get_info"},
                f"–ß–µ—Å—Ç–Ω—ã–π –º–µ–¥–∏–∞-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: –ª–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ API –∫–ª—é—á–µ–π"
            )
        
        return result
    
    async def test_network_tool_honestly(self):
        """üåê –ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        def run_network_tool():
            tool = NetworkTool()
            # –†–µ–∞–ª—å–Ω—ã–π ping —Ç–µ—Å—Ç
            return asyncio.run(tool.execute(
                action="ping_host",
                host="8.8.8.8",  # Google DNS
                count=1
            ))
        
        result = self.wrap_test_with_honesty_check(
            "network_tool", "ping_host", run_network_tool
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ
        if result['honest_success']:
            self.record_successful_params(
                "network_tool", "ping_host",
                {"action": "ping_host", "host": "string", "count": "number"},
                f"–ß–µ—Å—Ç–Ω—ã–π ping: —Ä–µ–∞–ª—å–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
            )
        
        return result
    
    async def test_api_request_honestly(self):
        """üåê –ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        def run_api_request():
            tool = ApiRequestTool()
            # –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É API
            return asyncio.run(tool.execute(
                action="get",
                url="https://httpbin.org/get",
                params={"test": "kittycore"}
            ))
        
        result = self.wrap_test_with_honesty_check(
            "api_request_tool", "get", run_api_request
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ
        if result['honest_success']:
            self.record_successful_params(
                "api_request_tool", "get",
                {"action": "get", "url": "string", "params": "dict"},
                f"–ß–µ—Å—Ç–Ω—ã–π API –∑–∞–ø—Ä–æ—Å: —Ä–µ–∞–ª—å–Ω—ã–π HTTP –≤—ã–∑–æ–≤"
            )
        
        return result
    
    def test_super_system_tool_honestly(self):
        """üíª –ß–µ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        def run_system_tool():
            tool = SuperSystemTool()
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            return tool.execute(
                action="run_command",
                command="echo 'KittyCore Honest Test'",
                safe_mode=True
            )
        
        result = self.wrap_test_with_honesty_check(
            "super_system_tool", "run_command", run_system_tool
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ
        if result['honest_success']:
            self.record_successful_params(
                "super_system_tool", "run_command",
                {"action": "run_command", "command": "string", "safe_mode": "boolean"},
                f"–ß–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: —Ä–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
            )
        
        return result
    
    async def run_honest_comprehensive_test(self):
        """üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —á–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üõ°Ô∏è –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ß–ï–°–¢–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        print("üéØ –¶–µ–ª—å: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–µ—Å—Ç–Ω–æ—Å—Ç–∏")
        print()
        
        results = []
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        print("üìã –ß–ï–°–¢–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í:")
        print("-" * 50)
        
        # 1. Web Search
        result1 = await self.test_enhanced_web_search_honestly()
        results.append(result1)
        
        # 2. Media Tool  
        result2 = self.test_media_tool_honestly()
        results.append(result2)
        
        # 3. Network Tool
        result3 = await self.test_network_tool_honestly()
        results.append(result3)
        
        # 4. API Request
        result4 = await self.test_api_request_honestly()
        results.append(result4)
        
        # 5. System Tool
        result5 = self.test_super_system_tool_honestly()
        results.append(result5)
        
        return results
    
    def generate_detailed_analysis(self):
        """üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.test_results:
            return "üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        
        analysis = [
            "üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ß–ï–°–¢–ù–û–°–¢–ò –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í",
            "=" * 60,
            ""
        ]
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
        for tool_name in sorted(set(r['tool_name'] for r in self.test_results)):
            tool_results = [r for r in self.test_results if r['tool_name'] == tool_name]
            
            if not tool_results:
                continue
                
            result = tool_results[0]  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            
            analysis.append(f"üîß {tool_name}:")
            analysis.append(f"   üìä –ß–µ—Å—Ç–Ω–æ—Å—Ç—å: {result['honesty_score']:.2f}/1.00")
            analysis.append(f"   üéØ –°—Ç–∞—Ç—É—Å: {result['honesty_status']}")
            analysis.append(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {result['execution_time']:.1f}—Å")
            analysis.append(f"   üì¶ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {result['data_size']} –±–∞–π—Ç")
            
            if result['fake_indicators']:
                analysis.append(f"   üö® –ü—Ä–æ–±–ª–µ–º—ã:")
                for indicator in result['fake_indicators'][:3]:
                    severity_emoji = {
                        "critical": "üî¥", "high": "üü†", "medium": "üü°", "low": "üîµ"
                    }.get(indicator['severity'], "‚ö™")
                    analysis.append(f"      {severity_emoji} {indicator['description']}")
            else:
                analysis.append(f"   ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            analysis.append("")
        
        # –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã
        honest_tools = len(self.honest_tools)
        total_tools = len(set(r['tool_name'] for r in self.test_results))
        honesty_percentage = honest_tools / total_tools * 100 if total_tools > 0 else 0
        
        analysis.extend([
            "üìà –û–ë–©–ò–ï –í–´–í–û–î–´:",
            f"   üèÜ –ß–µ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {honest_tools}/{total_tools} ({honesty_percentage:.1f}%)",
            f"   üö´ –ù–µ—á–µ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(self.dishonest_tools)}",
            f"   ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(self.suspicious_tools)}",
            ""
        ])
        
        if honesty_percentage >= 80:
            analysis.append("üéâ –û–¢–õ–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ KittyCore 3.0 –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —á–µ—Å—Ç–Ω–∞—è!")
        elif honesty_percentage >= 60:
            analysis.append("üëç –•–û–†–û–®–û: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Å—Ç–Ω–æ")
        elif honesty_percentage >= 40:
            analysis.append("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª–æ–≤–∏–Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        else:
            analysis.append("üö® –ö–†–ò–¢–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö!")
        
        analysis.append("")
        analysis.append("üéØ –ü–†–ò–ù–¶–ò–ü –ß–ï–°–¢–ù–û–°–¢–ò: –õ—É—á—à–µ –∑–Ω–∞—Ç—å –ø—Ä–∞–≤–¥—É –æ 60% —á–µ—Å—Ç–Ω–æ—Å—Ç–∏,")
        analysis.append("   —á–µ–º –æ–±–º–∞–Ω—ã–≤–∞—Ç—å—Å—è —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º–∏ 94% —É—Å–ø–µ—Ö–∞!")
        
        return "\n".join(analysis)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á–µ—Å—Ç–Ω–æ–≥–æ comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üõ°Ô∏è –ß–ï–°–¢–ù–û–ï COMPREHENSIVE –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï KITTYCORE 3.0")
    print("=" * 60)
    print("üöÄ –†–µ–≤–æ–ª—é—Ü–∏—è: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–¥–µ–ª–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!")
    print()
    
    # –°–æ–∑–¥–∞—ë–º —á–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä
    tester = RealHonestToolsTester(honesty_threshold=0.7)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    start_time = time.time()
    results = await tester.run_honest_comprehensive_test()
    total_time = time.time() - start_time
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã
    print("\n" + "="*60)
    print(tester.generate_honesty_summary())
    
    print("\n" + "="*60)
    print(tester.generate_detailed_analysis())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = int(time.time())
    results_file = f"honest_comprehensive_results_{timestamp}.json"
    tester.save_honesty_results(results_file)
    
    print(f"\nüíæ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.1f}—Å")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    honest_count = len(tester.honest_tools)
    total_count = len(set(r['tool_name'] for r in tester.test_results))
    print(f"üéØ –ò–¢–û–ì: {honest_count}/{total_count} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Å—Ç–Ω–æ—Å—Ç–∏!")

if __name__ == "__main__":
    asyncio.run(main()) 