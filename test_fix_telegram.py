#!/usr/bin/env python3
"""
üì± –û–¢–õ–ê–î–ö–ê: telegram_tool
–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

–û–°–û–ë–ï–ù–ù–û–°–¢–ò:
- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –°–ò–ù–•–†–û–ù–ù–´–ô (–ù–ï async)
- –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥—É–ª—è pyrogram (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: operation (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π), chat_id, text
- Fallback —Ä–µ–∂–∏–º –µ—Å–ª–∏ pyrogram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

–ü–õ–ê–ù –û–¢–õ–ê–î–ö–ò:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å pyrogram
2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
3. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (operation, –Ω–µ action)
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ fallback —Ä–µ–∂–∏–º–∞
"""

import time
import json

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å pyrogram
try:
    import pyrogram
    PYROGRAM_AVAILABLE = True
    print("‚úÖ Pyrogram –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    PYROGRAM_AVAILABLE = False
    print("‚ö†Ô∏è Pyrogram –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω - –æ–∂–∏–¥–∞–µ–º fallback —Ä–µ–∂–∏–º")

# –ò–º–ø–æ—Ä—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
try:
    from kittycore.tools.communication_tools import TelegramTool
    IMPORT_OK = True
    print("‚úÖ –ò–º–ø–æ—Ä—Ç telegram_tool —É—Å–ø–µ—à–µ–Ω")
except ImportError as e:
    print(f"‚ùå –ò–ú–ü–û–†–¢ –û–®–ò–ë–ö–ê: {e}")
    IMPORT_OK = False

def test_telegram_health_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüì± –¢–µ—Å—Ç–∏—Ä—É—é telegram_tool —Å health check...")
    start_time = time.time()
    
    tool = TelegramTool()
    
    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –≤—ã–∑–æ–≤: –æ–±—ã—á–Ω—ã–π execute (–ù–ï await) + operation (–ù–ï action)
    result = tool.execute(operation="validate_token")
    
    execution_time = time.time() - start_time
    
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            print(f"üì¶ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(str(data))} –±–∞–π—Ç")
            print(f"üîë –ö–ª—é—á–∏ –¥–∞–Ω–Ω—ã—Ö: {list(data.keys()) if isinstance(data, dict) else '–ù–ï DICT'}")
        else:
            error = getattr(result, 'error', '–ù–ï–ò–ó–í–ï–°–¢–ù–û')
            print(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–π –æ—à–∏–±–∫–æ–π pyrogram
            if "pyrogram" in error.lower():
                print("‚ÑπÔ∏è –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ - pyrogram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    return result

def test_telegram_send_message():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüì± –¢–µ—Å—Ç–∏—Ä—É—é telegram_tool —Å send_message...")
    
    tool = TelegramTool()
    
    # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç)
    result = tool.execute(
        operation="send_message",
        chat_id="@test_channel",
        text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç KittyCore"
    )
    
    print(f"üìä Send message —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            print(f"üì¶ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(str(data))} –±–∞–π—Ç")
        else:
            error = getattr(result, 'error', '–ù–ï–ò–ó–í–ï–°–¢–ù–û')
            print(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            if "pyrogram" in error.lower():
                print("‚ÑπÔ∏è –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ - pyrogram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    return result

def test_telegram_get_me():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüì± –¢–µ—Å—Ç–∏—Ä—É—é telegram_tool —Å get_me...")
    
    tool = TelegramTool()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    result = tool.execute(operation="get_me")
    
    print(f"üìä Get me —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
    if hasattr(result, 'success'):
        print(f"‚úÖ Success: {result.success}")
        if result.success and hasattr(result, 'data'):
            data = result.data
            print(f"üì¶ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(str(data))} –±–∞–π—Ç")
        else:
            error = getattr(result, 'error', '–ù–ï–ò–ó–í–ï–°–¢–ù–û')
            print(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            if "pyrogram" in error.lower():
                print("‚ÑπÔ∏è –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ - pyrogram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    return result

def test_telegram_schema():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    if not IMPORT_OK:
        return "IMPORT_ERROR"
    
    print("\nüì± –¢–µ—Å—Ç–∏—Ä—É—é telegram_tool schema...")
    
    tool = TelegramTool()
    
    try:
        schema = tool.get_schema()
        
        print(f"üìä Schema —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(schema)}")
        if isinstance(schema, dict):
            print(f"üì¶ –†–∞–∑–º–µ—Ä —Å—Ö–µ–º—ã: {len(str(schema))} –±–∞–π—Ç")
            print(f"üîë –ö–ª—é—á–∏ —Å—Ö–µ–º—ã: {list(schema.keys())}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
            if 'properties' in schema:
                properties = schema['properties']
                if 'operation' in properties:
                    operations = properties['operation'].get('enum', [])
                    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {operations[:5]}...")  # –ü–µ—Ä–≤—ã–µ 5
                    print(f"üìä –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(operations)}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ ToolResult –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        class SchemaResult:
            def __init__(self, data):
                self.success = True
                self.data = data
        
        return SchemaResult(schema)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã: {e}")
        
        class SchemaResult:
            def __init__(self, error):
                self.success = False
                self.error = error
        
        return SchemaResult(str(e))

def is_result_honest(result, test_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    if not result:
        print(f"‚ùå {test_name}: –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return False
    
    if not hasattr(result, 'success'):
        print(f"‚ùå {test_name}: –ù–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ success")
        return False
    
    # –î–ª—è telegram_tool –≤ fallback —Ä–µ–∂–∏–º–µ –æ—à–∏–±–∫–∏ pyrogram —Å—á–∏—Ç–∞—é—Ç—Å—è —á–µ—Å—Ç–Ω—ã–º–∏
    if not result.success:
        if hasattr(result, 'error'):
            error = result.error
            print(f"‚ÑπÔ∏è {test_name}: success=False —Å –æ—à–∏–±–∫–æ–π: {error}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Å—Ç–Ω—É—é –æ—à–∏–±–∫—É pyrogram
            pyrogram_indicators = [
                "pyrogram", "–º–æ—â–Ω—ã–π telegram –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", 
                "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pyrogram", "required_dependencies"
            ]
            
            is_pyrogram_error = any(indicator in error.lower() for indicator in pyrogram_indicators)
            
            if is_pyrogram_error:
                print(f"‚úÖ {test_name}: –ß–ï–°–¢–ù–ê–Ø –æ—à–∏–±–∫–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç pyrogram)")
                return True
            else:
                print(f"‚ùå {test_name}: –ù–µ—á–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                return False
        else:
            print(f"‚ùå {test_name}: success=False –±–µ–∑ –æ—à–∏–±–∫–∏")
            return False
    
    if not hasattr(result, 'data') or not result.data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    data = result.data
    data_str = str(data)
    data_size = len(data_str)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–µ–π–∫–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    fake_patterns = [
        "telegram: —É—Å–ø–µ—à–Ω–æ",
        "–¥–µ–º–æ —Ç–µ–ª–µ–≥—Ä–∞–º",
        "–∑–∞–≥–ª—É—à–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º",
        "—Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º"
    ]
    
    for pattern in fake_patterns:
        if pattern.lower() in data_str.lower():
            print(f"‚ùå {test_name}: –ù–∞–π–¥–µ–Ω —Ñ–µ–π–∫–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ Telegram
    telegram_indicators = [
        "operation", "telegram", "chat_id", "message", "bot", "enum", "properties"
    ]
    
    has_telegram_data = any(indicator in data_str.lower() for indicator in telegram_indicators)
    
    if not has_telegram_data:
        print(f"‚ùå {test_name}: –ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram")
        return False
    
    if data_size < 20:
        print(f"‚ùå {test_name}: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
        return False
    
    print(f"‚úÖ {test_name}: –ß–ï–°–¢–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({data_size} –±–∞–π—Ç)")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("üì± –û–¢–õ–ê–î–ö–ê: telegram_tool")
    print("=" * 50)
    
    if not IMPORT_OK:
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞")
        return
    
    print(f"üîç Pyrogram –¥–æ—Å—Ç—É–ø–µ–Ω: {PYROGRAM_AVAILABLE}")
    if not PYROGRAM_AVAILABLE:
        print("‚ö†Ô∏è –í fallback —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–µ–º —á–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ pyrogram")
    
    results = {}
    
    # –¢–µ—Å—Ç 1: Health check
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 1: Health check")
    try:
        result1 = test_telegram_health_check()
        results["health_check"] = is_result_honest(result1, "Health check")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 1 –û–®–ò–ë–ö–ê: {e}")
        results["health_check"] = False
    
    # –¢–µ—Å—Ç 2: Send message
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 2: Send message")
    try:
        result2 = test_telegram_send_message()
        results["send_message"] = is_result_honest(result2, "Send message")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 2 –û–®–ò–ë–ö–ê: {e}")
        results["send_message"] = False
    
    # –¢–µ—Å—Ç 3: Get me
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 3: Get me")
    try:
        result3 = test_telegram_get_me()
        results["get_me"] = is_result_honest(result3, "Get me")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 3 –û–®–ò–ë–ö–ê: {e}")
        results["get_me"] = False
    
    # –¢–µ—Å—Ç 4: Schema
    print("\n" + "=" * 30)
    print("–¢–ï–°–¢ 4: Schema")
    try:
        result4 = test_telegram_schema()
        results["schema"] = is_result_honest(result4, "Schema")
    except Exception as e:
        print(f"‚ùå –¢–ï–°–¢ 4 –û–®–ò–ë–ö–ê: {e}")
        results["schema"] = False
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –û–¢–õ–ê–î–ö–ò:")
    
    total_tests = len(results)
    passed_tests = sum(1 for success in results.values() if success)
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    print("\n–î–µ—Ç–∞–ª–∏:")
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("telegram_fix_results.json", "w", encoding="utf-8") as f:
        json.dump({
            "tool": "telegram_tool",
            "pyrogram_available": PYROGRAM_AVAILABLE,
            "tests": results,
            "summary": {
                "total_tests": total_tests,
                "passed_tests": passed_tests,
                "success_rate": success_rate
            },
            "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ telegram_fix_results.json")
    
    # –í–µ—Ä–¥–∏–∫—Ç
    if success_rate >= 75:
        print("\nüéâ TELEGRAM_TOOL –ò–°–ü–†–ê–í–õ–ï–ù!")
        print("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ operation")
        if not PYROGRAM_AVAILABLE:
            print("‚ÑπÔ∏è –í fallback —Ä–µ–∂–∏–º–µ - –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyrogram")
        return True
    elif success_rate >= 50:
        print("\n‚ö†Ô∏è TELEGRAM_TOOL –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
        return False
    else:
        print("\n‚ùå TELEGRAM_TOOL –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        return False

if __name__ == "__main__":
    main() 