#!/usr/bin/env python3
"""
üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ENHANCED ORCHESTRATOR
–ü—Ä–æ–≤–µ—Ä—è–µ–º:
1. system_tools —Ä–∞–±–æ—Ç–∞–µ—Ç
2. –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
3. –†–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–µ–∫
4. LLM-based ContentFixer
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ kittycore
sys.path.insert(0, str(Path(__file__).parent))

from kittycore.core.enhanced_content_system import EnhancedOrchestratorAgent
from kittycore.core.orchestrator import OrchestratorConfig

async def test_enhanced_fixes():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    print("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ENHANCED ORCHESTRATOR")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞—ë–º Enhanced Orchestrator
    config = OrchestratorConfig(
        orchestrator_id="test_fixes_orchestrator",
        max_agents=3,
        timeout=60
    )
    
    orchestrator = EnhancedOrchestratorAgent(config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    test_tasks = [
        "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª hello_world.py —Å –∫–æ–¥–æ–º print('Hello, World!')",
        "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª —Å —Ä–∞—Å—á—ë—Ç–æ–º –ø–ª–æ—â–∞–¥–∏ –∫–æ—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ A = œÄ * r¬≤",
        "–°–æ–∑–¥–∞–π JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"
    ]
    
    print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_tasks)} –∑–∞–¥–∞—á")
    print()
    
    for i, task in enumerate(test_tasks, 1):
        print(f"üéØ –ó–ê–î–ê–ß–ê {i}: {task}")
        print("-" * 60)
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            result = await orchestrator.solve_task(task)
            
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
            print(f"üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {result.get('files_processed', 0)}")
            print(f"üîß –£–ª—É—á—à–µ–Ω–∏–π: {result.get('improvements_made', 0)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            enhanced_files = result.get('enhanced_files', [])
            for filepath in enhanced_files:
                if os.path.exists(filepath):
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                    print(f"üìÑ {filepath}: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    preview = content[:100].replace('\n', ' ')
                    print(f"   –ü—Ä–µ–≤—å—é: {preview}...")
                else:
                    print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
            
            print()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
    print("üîç –ü–†–û–í–ï–†–ö–ê –î–ï–¢–ê–õ–¨–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø")
    print("-" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–±–æ—Ç–∞—é—Ç
    if hasattr(orchestrator, 'process_logger'):
        process_log = orchestrator.process_logger.process_log
        print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {len(process_log)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        for entry in process_log[-3:]:
            print(f"   {entry.get('type', 'unknown')}: {entry.get('timestamp', 'no-time')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata_dir = "outputs/metadata"
    if os.path.exists(metadata_dir):
        metadata_files = os.listdir(metadata_dir)
        print(f"üìä –§–∞–π–ª–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {len(metadata_files)}")
        for filename in metadata_files[:3]:
            print(f"   {filename}")
    
    print()
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù")

if __name__ == "__main__":
    asyncio.run(test_enhanced_fixes()) 