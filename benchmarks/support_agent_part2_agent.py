#!/usr/bin/env python3
"""
üéß –ë–ï–ù–ß–ú–ê–†–ö –ê–ì–ï–ù–¢–ê –ü–û–î–î–ï–†–ñ–ö–ò - –ß–ê–°–¢–¨ 2: –ê–ì–ï–ù–¢
–ë–∞–∑–æ–≤—ã–π –∞–≥–µ–Ω—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
"""

import time
import random
from typing import List, Dict, Any, Optional
from support_agent_part1_knowledge import *

class SupportAgent:
    """–ê–≥–µ–Ω—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    
    def __init__(self, name: str = "–ê–≥–µ–Ω—Ç –ö–∏–±–µ—Ä–ö–æ—Ç"):
        self.name = name
        self.knowledge_base = KnowledgeBase()
        self.customer_db = CustomerDatabase()
        self.active_tickets = {}
        self.performance_stats = {
            "tickets_handled": 0,
            "avg_resolution_time": 0,
            "customer_satisfaction": 0,
            "escalation_rate": 0
        }
    
    def handle_ticket(self, ticket: SupportTicket) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        print(f"\nüéß {self.name} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç #{ticket.id}")
        print(f"–ö–ª–∏–µ–Ω—Ç: {ticket.customer.name}")
        print(f"–ü—Ä–æ–±–ª–µ–º–∞: {ticket.problem_description}")
        
        # –ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏—è –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        solutions = self.knowledge_base.search(ticket.problem_description)
        
        if not solutions:
            return self._escalate_ticket(ticket, "–†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ
        best_solution = solutions[0]
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ: {best_solution.title}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        success = self._execute_solution(ticket, best_solution)
        
        if success:
            return self._resolve_ticket(ticket, best_solution)
        else:
            return self._escalate_ticket(ticket, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ")
    
    def _execute_solution(self, ticket: SupportTicket, solution: KnowledgeBaseEntry) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"""
        print(f"üîß –í—ã–ø–æ–ª–Ω—è—é –¥–µ–π—Å—Ç–≤–∏—è:")
        
        for i, step in enumerate(solution.solution_steps, 1):
            print(f"  {i}. {step}")
            time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ä–µ—à–µ–Ω–∏—è
        success_chance = solution.success_rate
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–ª–∏–µ–Ω—Ç–∞ (–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã —Å–ª–æ–∂–Ω–µ–µ)
        if ticket.customer.satisfaction_score < 3.0:
            success_chance *= 0.7  # –°–Ω–∏–∂–∞–µ–º —à–∞–Ω—Å—ã –¥–ª—è –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        
        return random.random() < success_chance
    
    def _resolve_ticket(self, ticket: SupportTicket, solution: KnowledgeBaseEntry) -> Dict[str, Any]:
        """–£—Å–ø–µ—à–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞"""
        ticket.status = TicketStatus.RESOLVED
        ticket.resolution_time = time.time() - ticket.created_at
        
        # –û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—à–µ–Ω–∏—è)
        if ticket.resolution_time < 300:  # –ë—ã—Å—Ç—Ä–æ (< 5 –º–∏–Ω)
            satisfaction = random.uniform(4.5, 5.0)
        elif ticket.resolution_time < 900:  # –ù–æ—Ä–º–∞–ª—å–Ω–æ (< 15 –º–∏–Ω)
            satisfaction = random.uniform(3.5, 4.5)
        else:  # –î–æ–ª–≥–æ
            satisfaction = random.uniform(2.0, 3.5)
        
        ticket.customer_satisfaction = satisfaction
        
        print(f"‚úÖ –¢–∏–∫–µ—Ç —Ä–µ—à—ë–Ω –∑–∞ {ticket.resolution_time:.0f} —Å–µ–∫")
        print(f"üòä –û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {satisfaction:.1f}/5.0")
        
        return {
            "status": "resolved",
            "resolution_time": ticket.resolution_time,
            "customer_satisfaction": satisfaction,
            "solution_used": solution.title
        }
    
    def _escalate_ticket(self, ticket: SupportTicket, reason: str) -> Dict[str, Any]:
        """–≠—Å–∫–∞–ª–∞—Ü–∏—è —Ç–∏–∫–µ—Ç–∞"""
        ticket.status = TicketStatus.ESCALATED
        
        print(f"‚ö†Ô∏è –¢–∏–∫–µ—Ç —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω: {reason}")
        
        return {
            "status": "escalated",
            "reason": reason,
            "escalation_time": time.time() - ticket.created_at
        }

# –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞
if __name__ == "__main__":
    print("üéß –¢–ï–°–¢ –ê–ì–ï–ù–¢–ê –ü–û–î–î–ï–†–ñ–ö–ò")
    print("=" * 40)
    
    agent = SupportAgent()
    customers = agent.customer_db
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–∏–∫–µ—Ç—ã
    test_problems = [
        "–£ –º–µ–Ω—è –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –ø–æ–º–æ–≥–∏—Ç–µ!",
        "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å –æ—Ç wifi, –∫–∞–∫ –ø–æ–º–µ–Ω—è—Ç—å?"
    ]
    
    for i, problem in enumerate(test_problems, 1):
        customer = list(customers.customers.values())[i-1]
        
        ticket = SupportTicket(
            id=f"T{i:03d}",
            customer=customer,
            problem_description=problem,
            priority=TicketPriority.MEDIUM,
            status=TicketStatus.NEW,
            created_at=time.time(),
            agent_actions=[]
        )
        
        result = agent.handle_ticket(ticket)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        print("-" * 40)
    
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
