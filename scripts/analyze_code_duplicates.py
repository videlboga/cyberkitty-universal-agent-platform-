#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤ KittyCore 3.0
–ò—â–µ—Ç –¥—É–±–ª–∏ –∫–ª–∞—Å—Å–æ–≤, —Ñ—É–Ω–∫—Ü–∏–π –∏ –ª–æ–≥–∏–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–æ–¥–∞
"""
import os
import ast
import hashlib
from pathlib import Path
from collections import defaultdict, Counter
from typing import Dict, List, Set, Tuple, Any
import difflib

class CodeDuplicateAnalyzer:
    def __init__(self):
        self.project_root = Path(".")
        self.duplicates = defaultdict(list)
        self.class_signatures = defaultdict(list)
        self.function_signatures = defaultdict(list)
        self.code_blocks = defaultdict(list)
        self.import_patterns = defaultdict(list)
        
    def analyze_duplicates(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üîç –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê KITTYCORE 3.0")
        print("=" * 60)
        
        # 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
        python_files = self._collect_python_files()
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(python_files)} Python —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for file_path in python_files:
            self._analyze_file(file_path)
            
        # 3. –ò—â–µ–º –¥—É–±–ª–∏
        self._find_class_duplicates()
        self._find_function_duplicates()
        self._find_code_block_duplicates()
        self._find_import_duplicates()
        
        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        self._generate_report()
        
    def _collect_python_files(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ Python —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        python_files = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        dirs_to_analyze = [
            "kittycore", "utils", "cli", "demos", "scripts", 
            "data", "agents", "tools"
        ]
        
        for dir_name in dirs_to_analyze:
            dir_path = Path(dir_name)
            if dir_path.exists():
                python_files.extend(dir_path.rglob("*.py"))
                
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è
        python_files.extend(self.project_root.glob("*.py"))
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
        filtered_files = []
        for file_path in python_files:
            if not any(skip in str(file_path) for skip in [
                "__pycache__", ".venv", "venv", ".git", 
                "test_", "_test", "archive_"
            ]):
                filtered_files.append(file_path)
                
        return filtered_files
        
    def _analyze_file(self, file_path: Path):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ü–∞—Ä—Å–∏–º AST
            tree = ast.parse(content)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
            self._extract_imports(tree, file_path)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef):
                    self._extract_class_signature(node, file_path)
                elif isinstance(node, ast.FunctionDef):
                    self._extract_function_signature(node, file_path)
                    
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
            self._extract_code_blocks(content, file_path)
            
        except Exception as e:
            print(f"    ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ {file_path}: {e}")
            
    def _extract_imports(self, tree: ast.AST, file_path: Path):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–º–ø–æ—Ä—Ç–æ–≤"""
        imports = []
        for node in ast.walk(tree):
            if isinstance(node, ast.Import):
                for alias in node.names:
                    imports.append(f"import {alias.name}")
            elif isinstance(node, ast.ImportFrom):
                module = node.module or ""
                for alias in node.names:
                    imports.append(f"from {module} import {alias.name}")
                    
        if imports:
            import_signature = "|".join(sorted(imports))
            self.import_patterns[import_signature].append(str(file_path))
            
    def _extract_class_signature(self, node: ast.ClassDef, file_path: Path):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—É –∫–ª–∞—Å—Å–∞"""
        # –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
        bases = [self._get_node_name(base) for base in node.bases]
        
        # –ú–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞
        methods = []
        for item in node.body:
            if isinstance(item, ast.FunctionDef):
                args = [arg.arg for arg in item.args.args]
                methods.append(f"{item.name}({','.join(args)})")
                
        # –ê—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞
        attributes = []
        for item in node.body:
            if isinstance(item, ast.Assign):
                for target in item.targets:
                    if isinstance(target, ast.Name):
                        attributes.append(target.id)
                        
        signature = {
            'name': node.name,
            'bases': bases,
            'methods': sorted(methods),
            'attributes': sorted(attributes),
            'method_count': len(methods),
            'file': str(file_path)
        }
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–µ–π
        key = f"{node.name}|{len(methods)}|{len(attributes)}"
        self.class_signatures[key].append(signature)
        
    def _extract_function_signature(self, node: ast.FunctionDef, file_path: Path):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏"""
        # –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        args = [arg.arg for arg in node.args.args]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏)
        returns = self._get_node_name(node.returns) if node.returns else None
        
        # –í—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –≤–Ω—É—Ç—Ä–∏
        function_calls = []
        for item in ast.walk(node):
            if isinstance(item, ast.Call):
                func_name = self._get_node_name(item.func)
                if func_name:
                    function_calls.append(func_name)
                    
        signature = {
            'name': node.name,
            'args': args,
            'arg_count': len(args),
            'returns': returns,
            'calls': sorted(set(function_calls)),
            'call_count': len(set(function_calls)),
            'file': str(file_path)
        }
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–µ–π
        key = f"{node.name}|{len(args)}"
        self.function_signatures[key].append(signature)
        
    def _extract_code_blocks(self, content: str, file_path: Path):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–ª–æ–∫–∏ –∫–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–µ–π"""
        lines = content.split('\n')
        
        # –ò—â–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ (—Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã)
        current_block = []
        block_type = None
        indent_level = 0
        
        for line in lines:
            stripped = line.strip()
            if not stripped or stripped.startswith('#'):
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞
            if stripped.startswith(('def ', 'class ', 'async def ')):
                if current_block and len(current_block) > 3:
                    block_hash = hashlib.md5('\n'.join(current_block).encode()).hexdigest()
                    self.code_blocks[block_hash].append({
                        'file': str(file_path),
                        'type': block_type,
                        'lines': len(current_block),
                        'content': '\n'.join(current_block[:5])  # –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                    })
                    
                current_block = [stripped]
                block_type = 'function' if 'def ' in stripped else 'class'
                indent_level = len(line) - len(line.lstrip())
            else:
                if current_block:
                    current_block.append(stripped)
                    
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
        if current_block and len(current_block) > 3:
            block_hash = hashlib.md5('\n'.join(current_block).encode()).hexdigest()
            self.code_blocks[block_hash].append({
                'file': str(file_path),
                'type': block_type,
                'lines': len(current_block),
                'content': '\n'.join(current_block[:5])
            })
            
    def _get_node_name(self, node):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è —É–∑–ª–∞ AST"""
        if isinstance(node, ast.Name):
            return node.id
        elif isinstance(node, ast.Attribute):
            return f"{self._get_node_name(node.value)}.{node.attr}"
        elif isinstance(node, ast.Constant):
            return str(node.value)
        return None
        
    def _find_class_duplicates(self):
        """–ò—â–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–ª–∞—Å—Å—ã"""
        print("\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤...")
        
        class_duplicates = 0
        for key, signatures in self.class_signatures.items():
            if len(signatures) > 1:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
                similar_classes = self._find_similar_classes(signatures)
                if len(similar_classes) > 1:
                    class_duplicates += 1
                    print(f"\n  üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–ª–∞—Å—Å—ã '{signatures[0]['name']}':")
                    for sig in similar_classes:
                        print(f"    ‚Ä¢ {sig['file']} ({sig['method_count']} –º–µ—Ç–æ–¥–æ–≤)")
                        
        if class_duplicates == 0:
            print("    ‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–ª–∞—Å—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"    ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {class_duplicates} –≥—Ä—É–ø–ø –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–ª–∞—Å—Å–æ–≤")
            
    def _find_function_duplicates(self):
        """–ò—â–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ—É–Ω–∫—Ü–∏–∏"""
        print("\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π...")
        
        function_duplicates = 0
        for key, signatures in self.function_signatures.items():
            if len(signatures) > 1:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏
                similar_functions = self._find_similar_functions(signatures)
                if len(similar_functions) > 1:
                    function_duplicates += 1
                    print(f"\n  üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ '{signatures[0]['name']}':")
                    for sig in similar_functions:
                        calls_info = f", –≤—ã–∑—ã–≤–∞–µ—Ç {sig['call_count']} —Ñ—É–Ω–∫—Ü–∏–π" if sig['call_count'] > 0 else ""
                        print(f"    ‚Ä¢ {sig['file']} ({sig['arg_count']} –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤{calls_info})")
                        
        if function_duplicates == 0:
            print("    ‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"    ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {function_duplicates} –≥—Ä—É–ø–ø –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ—É–Ω–∫—Ü–∏–π")
            
    def _find_code_block_duplicates(self):
        """–ò—â–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –±–ª–æ–∫–∏ –∫–æ–¥–∞"""
        print("\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞...")
        
        block_duplicates = 0
        for block_hash, blocks in self.code_blocks.items():
            if len(blocks) > 1:
                block_duplicates += 1
                print(f"\n  üîÑ –ò–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ ({blocks[0]['lines']} —Å—Ç—Ä–æ–∫):")
                for block in blocks:
                    print(f"    ‚Ä¢ {block['file']} ({block['type']})")
                    
        if block_duplicates == 0:
            print("    ‚úÖ –ò–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"    ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {block_duplicates} –≥—Ä—É–ø–ø –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤")
            
    def _find_import_duplicates(self):
        """–ò—â–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–º–ø–æ—Ä—Ç–æ–≤"""
        print("\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–º–ø–æ—Ä—Ç–æ–≤...")
        
        import_duplicates = 0
        for import_sig, files in self.import_patterns.items():
            if len(files) > 1:
                import_count = len(import_sig.split('|'))
                if import_count > 3:  # –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                    import_duplicates += 1
                    print(f"\n  üîÑ –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã ({import_count} –∏–º–ø–æ—Ä—Ç–æ–≤):")
                    for file_path in files:
                        print(f"    ‚Ä¢ {file_path}")
                        
        if import_duplicates == 0:
            print("    ‚úÖ –ó–Ω–∞—á–∏–º—ã—Ö –¥—É–±–ª–µ–π –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"    ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {import_duplicates} –≥—Ä—É–ø–ø –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤")
            
    def _find_similar_classes(self, signatures: List[Dict]) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Ö–æ–∂–∏–µ –∫–ª–∞—Å—Å—ã"""
        similar = []
        for sig in signatures:
            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ backup
            if not any(skip in sig['file'] for skip in ['test_', 'backup_', 'archive_']):
                similar.append(sig)
        return similar
        
    def _find_similar_functions(self, signatures: List[Dict]) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Ö–æ–∂–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        similar = []
        for sig in signatures:
            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã, backup –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if (not any(skip in sig['file'] for skip in ['test_', 'backup_', 'archive_']) and
                sig['name'] not in ['__init__', '__str__', '__repr__', 'main']):
                similar.append(sig)
        return similar
        
    def _generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç"""
        print("\n" + "="*70)
        print("üìä –û–¢–ß–Å–¢ –û –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ò –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê")
        print("="*70)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_classes = sum(len(sigs) for sigs in self.class_signatures.values())
        total_functions = sum(len(sigs) for sigs in self.function_signatures.values())
        total_blocks = sum(len(blocks) for blocks in self.code_blocks.values())
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  ‚Ä¢ –ö–ª–∞—Å—Å–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {total_classes}")
        print(f"  ‚Ä¢ –§—É–Ω–∫—Ü–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {total_functions}")
        print(f"  ‚Ä¢ –ë–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {total_blocks}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        duplicate_classes = sum(1 for sigs in self.class_signatures.values() 
                              if len(self._find_similar_classes(sigs)) > 1)
        duplicate_functions = sum(1 for sigs in self.function_signatures.values() 
                                if len(self._find_similar_functions(sigs)) > 1)
        duplicate_blocks = sum(1 for blocks in self.code_blocks.values() if len(blocks) > 1)
        
        if duplicate_classes == 0 and duplicate_functions == 0 and duplicate_blocks == 0:
            print("  üèÜ –û–¢–õ–ò–ß–ù–û! –ó–Ω–∞—á–∏–º–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            print("  ‚úÖ –ö–æ–¥ —Ö–æ—Ä–æ—à–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—É–±–ª–µ–π")
        else:
            if duplicate_classes > 0:
                print(f"  üîÑ –û–±—ä–µ–¥–∏–Ω–∏—Ç—å {duplicate_classes} –≥—Ä—É–ø–ø –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–ª–∞—Å—Å–æ–≤")
            if duplicate_functions > 0:
                print(f"  üîÑ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å {duplicate_functions} –≥—Ä—É–ø–ø –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ—É–Ω–∫—Ü–∏–π")
            if duplicate_blocks > 0:
                print(f"  üîÑ –í—ã–Ω–µ—Å—Ç–∏ {duplicate_blocks} –æ–±—â–∏—Ö –±–ª–æ–∫–æ–≤ –≤ —É—Ç–∏–ª–∏—Ç—ã")
                
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = CodeDuplicateAnalyzer()
    analyzer.analyze_duplicates()

if __name__ == "__main__":
    main() 