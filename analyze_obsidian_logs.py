#!/usr/bin/env python3
"""
üìä –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∏–∑ Obsidian vault
"""

import re
from pathlib import Path
from typing import List, Dict, Tuple

def analyze_obsidian_logs():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∏–∑ Obsidian vault"""
    
    print("üìä –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í –ò–ó OBSIDIAN VAULT")
    print("=" * 50)
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –≤ Obsidian vault
    vault_path = Path("./obsidian_vault")
    logs_folder = vault_path / "system" / "logs"
    
    if not logs_folder.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {logs_folder}")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è:")
        print("python test_iterative_improvement.py")
        return
    
    log_files = [
        "üîÑ Iterative Improvement Logs.md",
        "üß≠ Orchestrator Logs.md", 
        "ü§ñ Agents Logs.md",
        "‚öôÔ∏è System Logs.md",
        "‚ùå Error Logs.md"
    ]
    
    found_logs = []
    for log_file in log_files:
        log_path = logs_folder / log_file
        if log_path.exists():
            found_logs.append(log_path)
            size = log_path.stat().st_size
            print(f"‚úÖ {log_file} - {size} –±–∞–π—Ç")
        else:
            print(f"‚ùå {log_file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not found_logs:
        print("\n‚ùå –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Obsidian vault")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ª–æ–≥
    all_scores = []
    all_improvements = []
    improvement_details = []
    
    for log_file in found_logs:
        print(f"\nüîç –ê–ù–ê–õ–ò–ó {log_file.name}:")
        print("-" * 40)
        
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò—â–µ–º –æ—Ü–µ–Ω–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ markdown –ª–æ–≥–∞—Ö
            validation_pattern = r"–í–∞–ª–∏–¥–∞—Ü–∏—è:.*?–æ—Ü–µ–Ω–∫–∞: ([\d.]+)/1\.0"
            validations = re.findall(validation_pattern, content)
            
            # –ò—â–µ–º –ø–æ–ø—ã—Ç–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è
            improvement_pattern = r"–ü–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è #(\d+).*?–æ—Ü–µ–Ω–∫–∞: ([\d.]+)"
            improvements = re.findall(improvement_pattern, content)
            
            # –ò—â–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            result_pattern = r"(–£–ª—É—á—à–µ–Ω–∏–µ|–£—Ö—É–¥—à–µ–Ω–∏–µ): ([\d.]+) \(([+-][\d.]+)\)"
            results = re.findall(result_pattern, content)
            
            # –ò—â–µ–º –¥–µ—Ç–∞–ª–∏ —Ñ–∏–¥–±–µ–∫–∞
            feedback_pattern = r"üß† LLM —Ñ–∏–¥–±–µ–∫: (\d+) —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, (\d+) –ø—Ä–∏–º–µ—Ä–æ–≤"
            feedback_details = re.findall(feedback_pattern, content)
            
            # –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            files_pattern = r"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ([^\n]+)"
            created_files = re.findall(files_pattern, content)
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏–π: {len(validations)}")
            print(f"üîÑ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è: {len(improvements)}")
            print(f"üìà –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            print(f"üß† –ù–∞–π–¥–µ–Ω–æ —Ñ–∏–¥–±–µ–∫–∞: {len(feedback_details)}")
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(created_files)}")
            
            if validations:
                scores = [float(v) for v in validations]
                all_scores.extend(scores)
                print(f"üìä –û—Ü–µ–Ω–∫–∏: {scores}")
                print(f"üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {sum(scores)/len(scores):.2f}")
            
            if results:
                for result_type, final_score, change in results:
                    change_val = float(change)
                    all_improvements.append(change_val)
                    icon = "üìà" if change_val > 0 else "üìâ"
                    print(f"{icon} {result_type}: {final_score} ({change})")
                    
                    improvement_details.append({
                        "type": result_type,
                        "final_score": float(final_score),
                        "change": change_val,
                        "file": log_file.name
                    })
            
            if feedback_details:
                for recommendations, examples in feedback_details:
                    print(f"üß† –§–∏–¥–±–µ–∫: {recommendations} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, {examples} –ø—Ä–∏–º–µ—Ä–æ–≤")
            
            if created_files:
                print(f"üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                for file in created_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"   - {file}")
                if len(created_files) > 5:
                    print(f"   ... –∏ –µ—â—ë {len(created_files) - 5}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {log_file}: {e}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if all_scores or all_improvements:
        print(f"\nüéØ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("-" * 30)
        
        if all_scores:
            print(f"üìä –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {len(all_scores)}")
            print(f"üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {sum(all_scores)/len(all_scores):.2f}")
            print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min(all_scores):.2f}")
            print(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max(all_scores):.2f}")
        
        if all_improvements:
            positive = [x for x in all_improvements if x > 0]
            negative = [x for x in all_improvements if x < 0]
            
            print(f"üìà –£–ª—É—á—à–µ–Ω–∏–π: {len(positive)}")
            print(f"üìâ –£—Ö—É–¥—à–µ–Ω–∏–π: {len(negative)}")
            
            if positive:
                print(f"üìà –°—Ä–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: +{sum(positive)/len(positive):.2f}")
            if negative:
                print(f"üìâ –°—Ä–µ–¥–Ω–µ–µ —É—Ö—É–¥—à–µ–Ω–∏–µ: {sum(negative)/len(negative):.2f}")
            
            total_change = sum(all_improvements)
            print(f"üéØ –û–±—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç: {total_change:+.2f}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–∏–π
    if improvement_details:
        print(f"\nüìà –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –£–õ–£–ß–®–ï–ù–ò–ô:")
        print("-" * 35)
        
        for i, detail in enumerate(improvement_details, 1):
            icon = "üìà" if detail["change"] > 0 else "üìâ"
            print(f"{i}. {icon} {detail['type']}: {detail['final_score']:.2f} ({detail['change']:+.2f})")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {detail['file']}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 20)
    
    if all_scores:
        avg_score = sum(all_scores) / len(all_scores)
        if avg_score < 0.5:
            print("‚ö†Ô∏è –ù–∏–∑–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ - –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤")
        elif avg_score < 0.7:
            print("üîÑ –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª")
        else:
            print("‚úÖ –í—ã—Å–æ–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ")
    
    if all_improvements:
        positive_rate = len([x for x in all_improvements if x > 0]) / len(all_improvements)
        if positive_rate > 0.6:
            print("‚úÖ –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")
        else:
            print("‚ö†Ô∏è –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
    
    print(f"\nüóÑÔ∏è –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Obsidian vault: {logs_folder}")
    print("üìñ –û—Ç–∫—Ä–æ–π—Ç–µ Obsidian –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤")

if __name__ == "__main__":
    analyze_obsidian_logs() 