#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–õ–û–ñ–ù–´–• –ó–ê–î–ê–ß - KittyCore 3.0
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UnifiedOrchestrator –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
"""

import asyncio
import time
from datetime import datetime
from pathlib import Path

from kittycore.core.unified_orchestrator import UnifiedOrchestrator, UnifiedConfig


# –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
COMPLEX_TASKS = {
    "data_analysis_simple": {
        "difficulty": "‚≠ê‚≠ê‚≠ê",
        "category": "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
        "task": """
–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞:

1. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ (1000 –∑–∞–ø–∏—Å–µ–π)
2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–µ–Ω–¥—ã –ø—Ä–æ–¥–∞–∂ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤
3. –ù–∞–π–¥–∏ —Ç–æ–ø-10 —Å–∞–º—ã—Ö –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
4. –°–æ–∑–¥–∞–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–∏–Ω–∞–º–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
5. –ü–æ–¥–≥–æ—Ç–æ–≤—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç —Å –≤—ã–≤–æ–¥–∞–º–∏

–†–µ–∑—É–ª—å—Ç–∞—Ç: Python —Å–∫—Ä–∏–ø—Ç + CSV —Ñ–∞–π–ª + –≥—Ä–∞—Ñ–∏–∫–∏ + –æ—Ç—á—ë—Ç –≤ markdown
        """,
        "expected_outputs": ["python_script", "csv_data", "visualizations", "markdown_report"],
        "time_limit": 300  # 5 –º–∏–Ω—É—Ç
    },
    
    "research_synthesis": {
        "difficulty": "‚≠ê‚≠ê‚≠ê‚≠ê",
        "category": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ —Å–∏–Ω—Ç–µ–∑",
        "task": """
–ü—Ä–æ–≤–µ–¥–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞:

1. –ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –≤ LLM (–ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ)
2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã 2024-2025 –≥–æ–¥–∞
3. –°—Ä–∞–≤–Ω–∏ –ø–æ–¥—Ö–æ–¥—ã —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π (OpenAI, Google, Anthropic)
4. –û—Ü–µ–Ω–∏ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏
5. –°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–π —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –≥–æ–¥–∞

–†–µ–∑—É–ª—å—Ç–∞—Ç: –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç—á—ë—Ç + –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è + —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """,
        "expected_outputs": ["research_report", "presentation", "sources_list"],
        "time_limit": 600  # 10 –º–∏–Ω—É—Ç
    },
    
    "code_generation": {
        "difficulty": "‚≠ê‚≠ê‚≠ê‚≠ê",
        "category": "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º",
        "task": """
–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ (TODO app):

1. –°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É (frontend + backend + database)
2. –°–æ–∑–¥–∞–π REST API —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ (CRUD)
3. –†–µ–∞–ª–∏–∑—É–π –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
4. –î–æ–±–∞–≤—å –±–∞–∑–æ–≤—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
5. –ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç—ã –¥–ª—è API
6. –°–æ–∑–¥–∞–π Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è

–†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–æ–ª–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ + —Ç–µ—Å—Ç—ã + Docker + –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        """,
        "expected_outputs": ["web_application", "api_tests", "docker_config", "documentation"],
        "time_limit": 900  # 15 –º–∏–Ω—É—Ç
    }
}


async def run_complex_task_test(task_name: str, orchestrator: UnifiedOrchestrator):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    
    if task_name not in COMPLEX_TASKS:
        print(f"‚ùå –ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return None
    
    task_config = COMPLEX_TASKS[task_name]
    
    print(f"\nüéØ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê: {task_name}")
    print(f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {task_config['difficulty']}")
    print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {task_config['category']}")
    print(f"‚è±Ô∏è –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏: {task_config['time_limit']} —Å–µ–∫—É–Ω–¥")
    print("=" * 60)
    
    start_time = time.time()
    
    try:
        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
        result = await orchestrator.solve_task(task_config['task'])
        
        execution_time = time.time() - start_time
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\n‚úÖ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê –∑–∞ {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìã –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
        print(f"üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {result.get('quality_score', 'N/A')}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –≤—ã—Ö–æ–¥–æ–≤
        created_files = result.get('created_files', [])
        print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(created_files)}):")
        for file_path in created_files:
            print(f"  - {file_path}")
        
        # –û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        success_score = evaluate_task_success(task_config, result, execution_time)
        print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {success_score:.1f}/10.0")
        
        return {
            "task_name": task_name,
            "success_score": success_score,
            "execution_time": execution_time,
            "result": result
        }
        
    except Exception as e:
        execution_time = time.time() - start_time
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        return {
            "task_name": task_name,
            "success_score": 0.0,
            "execution_time": execution_time,
            "error": str(e)
        }


def evaluate_task_success(task_config, result, execution_time):
    """–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    
    score = 0.0
    max_score = 10.0
    
    # 1. –ë–∞–∑–æ–≤–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (3 –±–∞–ª–ª–∞)
    if result.get('status') == 'completed':
        score += 3.0
    elif result.get('status') == 'partial':
        score += 1.5
    
    # 2. –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (3 –±–∞–ª–ª–∞)
    quality_score = result.get('quality_score', 0)
    if quality_score:
        score += quality_score * 3.0
    
    # 3. –°–æ–±–ª—é–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (2 –±–∞–ª–ª–∞)
    time_limit = task_config['time_limit']
    if execution_time <= time_limit:
        score += 2.0
    elif execution_time <= time_limit * 1.5:
        score += 1.0
    
    # 4. –ü–æ–ª–Ω–æ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (2 –±–∞–ª–ª–∞)
    expected_outputs = task_config.get('expected_outputs', [])
    created_files = result.get('created_files', [])
    
    if expected_outputs:
        completion_ratio = min(len(created_files) / len(expected_outputs), 1.0)
        score += completion_ratio * 2.0
    
    return min(score, max_score)


async def run_benchmark_suite():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    
    print("üöÄ –ó–ê–ü–£–°–ö BENCHMARK SUITE - KittyCore 3.0")
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    vault_path = Path("test_vault")
    vault_path.mkdir(exist_ok=True)
    
    config = UnifiedConfig(vault_path=str(vault_path))
    orchestrator = UnifiedOrchestrator(config)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    results = []
    
    for task_name in COMPLEX_TASKS.keys():
        result = await run_complex_task_test(task_name, orchestrator)
        if result:
            results.append(result)
        
        print("\n" + "="*60)
        await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("\nüèÜ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ BENCHMARK")
    print("=" * 60)
    
    total_score = 0
    successful_tasks = 0
    
    for result in results:
        task_name = result['task_name']
        score = result['success_score']
        time_taken = result['execution_time']
        
        status = "‚úÖ" if score >= 7.0 else "‚ö†Ô∏è" if score >= 4.0 else "‚ùå"
        print(f"{status} {task_name}: {score:.1f}/10.0 ({time_taken:.1f}s)")
        
        total_score += score
        if score >= 7.0:
            successful_tasks += 1
    
    avg_score = total_score / len(results) if results else 0
    success_rate = (successful_tasks / len(results) * 100) if results else 0
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_score:.1f}/10.0")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–¥–∞—á: {successful_tasks}/{len(results)} ({success_rate:.1f}%)")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    save_benchmark_results(results, avg_score, success_rate)
    
    return results


def save_benchmark_results(results, avg_score, success_rate):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    results_file = f"benchmark_results_{timestamp}.md"
    
    with open(results_file, 'w', encoding='utf-8') as f:
        f.write(f"# üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Benchmark - KittyCore 3.0\n\n")
        f.write(f"**–î–∞—Ç–∞**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"**–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞**: {avg_score:.1f}/10.0\n")
        f.write(f"**–£—Å–ø–µ—à–Ω–æ—Å—Ç—å**: {success_rate:.1f}%\n\n")
        
        f.write("## –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n")
        
        for result in results:
            task_name = result['task_name']
            score = result['success_score']
            time_taken = result['execution_time']
            
            f.write(f"### {task_name}\n")
            f.write(f"- **–û—Ü–µ–Ω–∫–∞**: {score:.1f}/10.0\n")
            f.write(f"- **–í—Ä–µ–º—è**: {time_taken:.1f} —Å–µ–∫—É–Ω–¥\n")
            
            if 'error' in result:
                f.write(f"- **–û—à–∏–±–∫–∞**: {result['error']}\n")
            
            f.write("\n")
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")


if __name__ == "__main__":
    print("üéØ COMPLEX TASKS BENCHMARK - KittyCore 3.0")
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –û–¥–Ω–∞ –∑–∞–¥–∞—á–∞ (–±—ã—Å—Ç—Ä–æ)")
    print("2. –ü–æ–ª–Ω—ã–π benchmark (–¥–æ–ª–≥–æ)")
    print("3. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
    
    if choice == "1":
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        for i, (task_name, config) in enumerate(COMPLEX_TASKS.items(), 1):
            print(f"{i}. {task_name} {config['difficulty']}")
        
        task_choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É (1-{len(COMPLEX_TASKS)}): ").strip()
        
        try:
            task_index = int(task_choice) - 1
            task_name = list(COMPLEX_TASKS.keys())[task_index]
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
            vault_path = Path("test_vault")
            vault_path.mkdir(exist_ok=True)
            
            config = UnifiedConfig(vault_path=str(vault_path))
            orchestrator = UnifiedOrchestrator(config)
            
            # –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
            asyncio.run(run_complex_task_test(task_name, orchestrator))
            
        except (ValueError, IndexError):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∑–∞–¥–∞—á–∏!")
    
    elif choice == "2":
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ benchmark
        asyncio.run(run_benchmark_suite())
    
    elif choice == "3":
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!") 