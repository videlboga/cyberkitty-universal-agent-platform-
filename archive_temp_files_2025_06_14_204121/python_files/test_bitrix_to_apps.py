#!/usr/bin/env python3
"""
–¢–µ—Å—Ç: –û—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –ë–∏—Ç—Ä–∏–∫—Å24 –∫ –†–ê–ë–û–ß–ò–ú –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø–ú
–¶–µ–ª—å: —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º UX
"""

import asyncio
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'kittycore'))

from kittycore.core.obsidian_orchestrator import solve_with_obsidian_orchestrator

async def test_bitrix_to_working_apps():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ë–∏—Ç—Ä–∏–∫—Å24"""
    
    print("üöÄ –¢–ï–°–¢: –û—Ç –∞–Ω–∞–ª–∏–∑–∞ –ë–∏—Ç—Ä–∏–∫—Å24 –∫ –†–ê–ë–û–ß–ò–ú –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø–ú")
    print("=" * 70)
    
    # –ó–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    tasks = [
        {
            "name": "CRM Dashboard",
            "task": "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ CRM –¥–∞—à–±–æ—Ä–¥ —Å HTML/CSS/JS –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º AmoCRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.",
            "expected_files": ["crm_dashboard.html", "crm_styles.css", "crm_script.js"]
        },
        {
            "name": "1C Connector UI",
            "task": "–°–æ–∑–¥–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è 1C –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ —Å —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π. HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω, –≥–æ—Ç–æ–≤–∞—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
            "expected_files": ["1c_connector.html", "connector_config.js"]
        },
        {
            "name": "Telegram Bot Rich Interface",
            "task": "–°–æ–∑–¥–∞—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º —Å rich-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º. –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫, –∫–Ω–æ–ø–æ–∫, –º–µ–¥–∏–∞. –ì–æ—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
            "expected_files": ["telegram_bot_admin.html", "bot_interface.js", "rich_content.css"]
        }
    ]
    
    results = []
    
    for i, task_info in enumerate(tasks, 1):
        print(f"\nüéØ –ó–ê–î–ê–ß–ê {i}/3: {task_info['name']}")
        print("-" * 50)
        print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {task_info['task'][:100]}...")
        
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            result = await solve_with_obsidian_orchestrator(task_info['task'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get("status") != "completed":
                error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                print(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
                results.append({
                    "task": task_info['name'],
                    "success": False,
                    "error": error_msg,
                    "files_created": [],
                    "validation_results": []
                })
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            validation_results = []
            execution_results = result.get("execution", {})
            step_results = execution_results.get("step_results", {})
            
            for step_id, step_result in step_results.items():
                if "validation" in step_result:
                    validation = step_result["validation"]
                    validation_results.append({
                        "step": step_id,
                        "is_valid": validation.get("is_valid", False),
                        "score": validation.get("score", 0.0),
                        "verdict": validation.get("verdict", "–ù–µ—Ç –≤–µ—Ä–¥–∏–∫—Ç–∞"),
                        "expected_result": validation.get("expected_result", ""),
                        "issues": validation.get("issues", [])
                    })
                    
                    print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–≥–∞ {step_id}:")
                    print(f"  üìä –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {'‚úÖ' if validation.get('is_valid') else '‚ùå'}")
                    print(f"  üéØ –û—Ü–µ–Ω–∫–∞: {validation.get('score', 0):.1f}/1.0")
                    print(f"  üí¨ –í–µ—Ä–¥–∏–∫—Ç: {validation.get('verdict', '–ù–µ—Ç –≤–µ—Ä–¥–∏–∫—Ç–∞')}")
                    if validation.get("expected_result"):
                        print(f"  üé® –û–∂–∏–¥–∞–ª—Å—è: {validation.get('expected_result')[:100]}...")
                    if validation.get("issues"):
                        print(f"  ‚ùå –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(validation.get('issues', []))}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            all_created_files = result.get("obsidian_results", {}).get("created_files", [])
            
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            recent_files = []
            for ext in ['.html', '.js', '.css']:
                files = [f for f in os.listdir('.') if f.endswith(ext) and os.path.getmtime(f) > (asyncio.get_event_loop().time() - 300)]
                recent_files.extend(files)
            
            created_files = []
            missing_files = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
            for expected_file in task_info['expected_files']:
                if os.path.exists(expected_file):
                    size = os.path.getsize(expected_file)
                    created_files.append(f"{expected_file} ({size} –±–∞–π—Ç)")
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {expected_file} ({size} –±–∞–π—Ç)")
                else:
                    missing_files.append(expected_file)
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {expected_file}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for file in recent_files:
                if file not in [f.split(' ')[0] for f in created_files]:
                    size = os.path.getsize(file)
                    created_files.append(f"{file} ({size} –±–∞–π—Ç)")
                    print(f"üìÑ –ù–∞–π–¥–µ–Ω: {file} ({size} –±–∞–π—Ç)")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            valid_results = [v for v in validation_results if v["is_valid"]]
            success = len(valid_results) > 0 or len(created_files) > 0
            
            results.append({
                "task": task_info['name'],
                "success": success,
                "files_created": created_files,
                "missing_files": missing_files,
                "validation_results": validation_results,
                "valid_steps": len(valid_results),
                "total_steps": len(validation_results),
                "result": result
            })
            
            if success:
                print(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_info['name']}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print(f"‚ùå –ó–∞–¥–∞—á–∞ '{task_info['name']}' –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ - –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤")
                
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            results.append({
                "task": task_info['name'],
                "success": False,
                "error": str(e),
                "files_created": []
            })
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 70)
    
    successful_tasks = [r for r in results if r['success']]
    total_files = sum(len(r['files_created']) for r in results)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–¥–∞—á: {len(successful_tasks)}/3")
    print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {total_files}")
    print(f"üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {len(successful_tasks)/3*100:.1f}%")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
    for result in results:
        print(f"\nüìã {result['task']}:")
        if result['success']:
            print(f"  ‚úÖ –°—Ç–∞—Ç—É—Å: –£–°–ü–ï–•")
            print(f"  üìÅ –§–∞–π–ª—ã: {', '.join(result['files_created'])}")
        else:
            print(f"  ‚ùå –°—Ç–∞—Ç—É—Å: –ü–†–û–í–ê–õ")
            if 'error' in result:
                print(f"  üí• –û—à–∏–±–∫–∞: {result['error'][:100]}...")
            if result.get('missing_files'):
                print(f"  üìÑ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(result['missing_files'])}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await test_created_applications()
    
    return len(successful_tasks) >= 2  # –£—Å–ø–µ—Ö –µ—Å–ª–∏ 2+ –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω—ã

async def test_created_applications():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å"""
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ù–´–• –ü–†–ò–õ–û–ñ–ï–ù–ò–ô:")
    print("-" * 50)
    
    # –ò—â–µ–º –≤—Å–µ HTML —Ñ–∞–π–ª—ã
    html_files = [f for f in os.listdir('.') if f.endswith('.html')]
    
    if not html_files:
        print("‚ùå HTML –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    for html_file in html_files:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {html_file}")
        
        try:
            with open(html_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            checks = {
                "HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞": "<!DOCTYPE html>" in content and "<html" in content,
                "CSS —Å—Ç–∏–ª–∏": "<style>" in content or ".css" in content,
                "JavaScript": "<script>" in content or ".js" in content,
                "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": "onclick" in content or "addEventListener" in content or "function" in content,
                "–§–æ—Ä–º–∞/UI": "<form>" in content or "<button>" in content or "<input>" in content,
                "–ö–æ–Ω—Ç–µ–Ω—Ç": len(content) > 1000  # –ú–∏–Ω–∏–º—É–º 1KB –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            }
            
            passed_checks = sum(checks.values())
            total_checks = len(checks)
            
            print(f"  üìä –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ: {passed_checks}/{total_checks}")
            
            for check_name, passed in checks.items():
                status = "‚úÖ" if passed else "‚ùå"
                print(f"    {status} {check_name}")
            
            if passed_checks >= 4:
                print(f"  üéâ {html_file} - –†–ê–ë–û–ß–ï–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï!")
            elif passed_checks >= 2:
                print(f"  ‚ö†Ô∏è {html_file} - —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—á–µ–µ")
            else:
                print(f"  ‚ùå {html_file} - –Ω–µ —Ä–∞–±–æ—á–µ–µ")
                
        except Exception as e:
            print(f"  üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê: –ë–ò–¢–†–ò–ö–°24 ‚Üí –†–ê–ë–û–ß–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
    print("=" * 70)
    
    success = asyncio.run(test_bitrix_to_working_apps())
    
    if success:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –†–∞–±–æ—á–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã!")
        print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ HTML —Ñ–∞–π–ª—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    else:
        print("\nüí• –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù! –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
        
    print("\nüîó –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:")
    print("   chromium *.html  # –û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ HTML —Ñ–∞–π–ª—ã")
    print("   python -m http.server 8000  # –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä") 