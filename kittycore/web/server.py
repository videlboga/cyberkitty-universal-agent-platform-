"""
KittyCore 3.0 Web Server

FastAPI-based –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è real-time 
–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–≥–µ–Ω—Ç–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.
"""

import asyncio
import json
import logging
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, FileResponse
from pydantic import BaseModel
import uvicorn

from .websocket_manager import WebSocketManager, websocket_manager

logger = logging.getLogger(__name__)


class TaskRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    prompt: str
    options: Optional[Dict] = {}


class SystemStatus(BaseModel):
    """–ú–æ–¥–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    status: str
    timestamp: str
    active_connections: int
    rooms: Dict[str, int]
    version: str = "3.0.0"


def create_app() -> FastAPI:
    """–°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    app = FastAPI(
        title="KittyCore 3.0 Web Interface",
        description="–£–±–µ—Ä—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≥–µ–Ω—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º",
        version="3.0.0",
        docs_url="/api/docs",
        redoc_url="/api/redoc"
    )
    
    # CORS middleware –¥–ª—è dev –æ–∫—Ä—É–∂–µ–Ω–∏—è
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # –í production —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø–æ–∑–∂–µ)
    static_dir = Path(__file__).parent / "static"
    if static_dir.exists():
        app.mount("/static", StaticFiles(directory=str(static_dir)), name="static")
    
    @app.get("/", response_class=HTMLResponse)
    async def index():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        return '''
        <!DOCTYPE html>
        <html>
        <head>
            <title>KittyCore 3.0</title>
            <meta charset="utf-8">
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    margin: 0; padding: 20px; background: #0a0a0a; color: #00ff41;
                }
                .container { max-width: 800px; margin: 0 auto; }
                .header { text-align: center; margin-bottom: 40px; }
                .status { background: #111; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                .input-area { margin-bottom: 20px; }
                textarea { 
                    width: 100%; min-height: 100px; background: #111; 
                    color: #00ff41; border: 1px solid #333; padding: 10px;
                    border-radius: 4px; font-family: monospace;
                }
                button {
                    background: #00ff41; color: #000; border: none; 
                    padding: 10px 20px; border-radius: 4px; cursor: pointer;
                    font-weight: bold;
                }
                button:hover { background: #00cc33; }
                .log { 
                    background: #111; padding: 20px; border-radius: 8px;
                    max-height: 400px; overflow-y: auto; font-family: monospace;
                    font-size: 12px; line-height: 1.4;
                }
                .log-entry { margin-bottom: 5px; }
                .log-timestamp { color: #666; }
                .log-info { color: #00ff41; }
                .log-warning { color: #ffaa00; }
                .log-error { color: #ff4444; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üê± KittyCore 3.0</h1>
                    <p>–°–∞–º–æ—Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É—é—â–∞—è—Å—è –ê–≥–µ–Ω—Ç–Ω–∞—è –°–∏—Å—Ç–µ–º–∞</p>
                </div>
                
                <div class="status" id="status">
                    <h3>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
                    <div id="connection-status">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</div>
                </div>
                
                <div class="input-area">
                    <h3>–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤</h3>
                    <textarea id="task-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏..."></textarea>
                    <br><br>
                    <button onclick="executeTask()">üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å</button>
                </div>
                
                <div class="log" id="log">
                    <div class="log-entry">
                        <span class="log-timestamp">[SYSTEM]</span>
                        <span class="log-info">–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KittyCore...</span>
                    </div>
                </div>
            </div>
            
            <script>
                let ws = null;
                const log = document.getElementById('log');
                const status = document.getElementById('connection-status');
                
                function connectWebSocket() {
                    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                    const wsUrl = protocol + '//' + window.location.host + '/ws';
                    
                    ws = new WebSocket(wsUrl);
                    
                    ws.onopen = function() {
                        addLog('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ KittyCore 3.0', 'info');
                        status.innerHTML = 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
                    };
                    
                    ws.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        handleMessage(data);
                    };
                    
                    ws.onclose = function() {
                        addLog('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ', 'warning');
                        status.innerHTML = 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ';
                        setTimeout(connectWebSocket, 3000);
                    };
                    
                    ws.onerror = function(error) {
                        addLog('–û—à–∏–±–∫–∞ WebSocket: ' + error, 'error');
                    };
                }
                
                function handleMessage(data) {
                    switch(data.type) {
                        case 'connection_established':
                            addLog('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (ID: ' + data.connection_id + ')', 'info');
                            break;
                        case 'system_notification':
                            addLog(data.message, data.level);
                            break;
                        case 'task_started':
                            addLog('–ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞: ' + data.task_id, 'info');
                            break;
                        case 'agent_spawned':
                            addLog('–°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç: ' + data.agent_type, 'info');
                            break;
                        case 'task_completed':
                            addLog('–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ' + data.result, 'info');
                            break;
                        default:
                            addLog('–ü–æ–ª—É—á–µ–Ω–æ: ' + JSON.stringify(data), 'info');
                    }
                }
                
                function addLog(message, level = 'info') {
                    const timestamp = new Date().toLocaleTimeString();
                    const entry = document.createElement('div');
                    entry.className = 'log-entry';
                    entry.innerHTML = 
                        '<span class="log-timestamp">[' + timestamp + ']</span> ' +
                        '<span class="log-' + level + '">' + message + '</span>';
                    log.appendChild(entry);
                    log.scrollTop = log.scrollHeight;
                }
                
                function executeTask() {
                    const input = document.getElementById('task-input');
                    const task = input.value.trim();
                    
                    if (!task) {
                        addLog('–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', 'warning');
                        return;
                    }
                    
                    if (ws && ws.readyState === WebSocket.OPEN) {
                        ws.send(JSON.stringify({
                            type: 'execute_task',
                            prompt: task,
                            timestamp: new Date().toISOString()
                        }));
                        addLog('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: ' + task, 'info');
                        input.value = '';
                    } else {
                        addLog('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω', 'error');
                    }
                }
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                connectWebSocket();
                
                // Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                document.getElementById('task-input').addEventListener('keydown', function(event) {
                    if (event.ctrlKey && event.key === 'Enter') {
                        executeTask();
                    }
                });
            </script>
        </body>
        </html>
        '''
    
    @app.get("/api/status")
    async def get_status() -> SystemStatus:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        return SystemStatus(
            status="active",
            timestamp=datetime.now().isoformat(),
            active_connections=websocket_manager.get_connection_count(),
            rooms=websocket_manager.get_rooms_info()
        )
    
    @app.post("/api/task")
    async def execute_task(task: TaskRequest):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ REST API"""
        try:
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
            await websocket_manager.send_system_notification(
                f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —á–µ—Ä–µ–∑ API: {task.prompt}",
                "info"
            )
            
            # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OrchestratorAgent
            return {"status": "received", "task_id": f"task_{datetime.now().timestamp()}"}
            
        except Exception as e:
            logger.error(f"Error executing task: {e}")
            raise HTTPException(status_code=500, detail=str(e))
    
    @app.websocket("/ws")
    async def websocket_endpoint(websocket: WebSocket):
        """WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è real-time –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"""
        connected = await websocket_manager.connect(websocket, "main")
        
        if not connected:
            return
        
        try:
            while True:
                # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                data = await websocket.receive_text()
                message = json.loads(data)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                await handle_websocket_message(websocket, message)
                
        except WebSocketDisconnect:
            await websocket_manager.disconnect(websocket)
        except Exception as e:
            logger.error(f"WebSocket error: {e}")
            await websocket_manager.disconnect(websocket)


async def handle_websocket_message(websocket: WebSocket, message: Dict):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebSocket –∫–ª–∏–µ–Ω—Ç–∞"""
    message_type = message.get("type")
    
    if message_type == "execute_task":
        prompt = message.get("prompt", "")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        await websocket_manager.broadcast({
            "type": "task_started",
            "prompt": prompt,
            "task_id": f"task_{datetime.now().timestamp()}",
            "timestamp": datetime.now().isoformat()
        })
        
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OrchestratorAgent
        # –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await asyncio.sleep(1)
        
        await websocket_manager.send_personal_message(websocket, {
            "type": "task_completed",
            "result": f"–ó–∞–¥–∞—á–∞ '{prompt}' –ø—Ä–∏–Ω—è—Ç–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é (–¥–µ–º–æ —Ä–µ–∂–∏–º)",
            "timestamp": datetime.now().isoformat()
        })
        
    elif message_type == "ping":
        await websocket_manager.send_personal_message(websocket, {
            "type": "pong",
            "timestamp": datetime.now().isoformat()
        })


class WebServer:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ KittyCore"""
    
    def __init__(self, host: str = "0.0.0.0", port: int = 8000):
        self.host = host
        self.port = port
        self.app = create_app()
    
    def run(self, **kwargs):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"""
        logger.info(f"–ó–∞–ø—É—Å–∫ KittyCore 3.0 Web Server –Ω–∞ {self.host}:{self.port}")
        
        uvicorn.run(
            self.app,
            host=self.host,
            port=self.port,
            log_level="info",
            **kwargs
        )
    
    async def start_async(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        config = uvicorn.Config(
            self.app,
            host=self.host,
            port=self.port,
            log_level="info"
        )
        server = uvicorn.Server(config)
        await server.serve()


if __name__ == "__main__":
    server = WebServer()
    server.run() 