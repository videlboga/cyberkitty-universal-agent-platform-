#!/usr/bin/env python3
"""
‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç SmartValidator –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
"""

import asyncio
from agents.smart_validator import SmartValidator


async def test_real_file():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–æ–π"""
    
    print("‚ö° –¢–ï–°–¢ SmartValidator –ù–ê –†–ï–ê–õ–¨–ù–û–ú –§–ê–ô–õ–ï")
    print("=" * 50)
    print("–§–∞–π–ª: real_test_validator.py (—Å–æ–∑–¥–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π)")
    print("–ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞: –ù–ï–ò–ó–í–ï–°–¢–ù–ê (–ø—É—Å—Ç—å —É–≥–∞–¥–∞–µ—Ç!)")
    print()
    
    validator = SmartValidator()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
    result = await validator.validate_result(
        original_task="",  # –ü—É—Å—Ç–∞—è - –∑–∞—Å—Ç–∞–≤–ª—è–µ–º —É–≥–∞–¥—ã–≤–∞—Ç—å!
        result={"success": True, "message": "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"},
        created_files=["real_test_validator.py"]
    )
    
    print("üîÆ –†–ï–ó–£–õ–¨–¢–ê–¢ –£–ú–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò:")
    print(f"üìä –û—Ü–µ–Ω–∫–∞: {result.score:.1f}/1.0")
    print(f"üéØ –í–µ—Ä–¥–∏–∫—Ç: {result.verdict}")
    print(f"üí∞ –ü–æ–ª—å–∑–∞: {result.user_benefit}")
    
    if result.issues:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã:")
        for issue in result.issues:
            print(f"   ‚Ä¢ {issue}")
    
    if result.recommendations:
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in result.recommendations:
            print(f"   ‚Ä¢ {rec}")
    
    status = "‚úÖ –í–ê–õ–ò–î–ù–û" if result.is_valid else "‚ùå –ù–ï –í–ê–õ–ò–î–ù–û"
    print(f"\nüéØ –ò–¢–û–ì: {status}")
    print("\nüöÄ SmartValidator —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∑–Ω–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏!")


if __name__ == "__main__":
    asyncio.run(test_real_file()) 