#!/usr/bin/env python3
"""
üìã –ü–û–õ–ù–ê–Ø –ò–ù–í–ï–ù–¢–ê–†–ò–ó–ê–¶–ò–Ø: –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã KittyCore 3.0

–¶–ï–õ–¨: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã, –∞ –∫–∞–∫–∏–µ –Ω–µ—Ç
–†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import importlib
import traceback

def discover_all_tools():
    """–û–±–Ω–∞—Ä—É–∂–∏—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ"""
    
    print("üìã –ü–û–õ–ù–ê–Ø –ò–ù–í–ï–ù–¢–ê–†–ò–ó–ê–¶–ò–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í KITTYCORE 3.0")
    print("=" * 80)
    
    # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    tested_tools = {
        # ‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ï (—Ä—É—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã)
        "EnhancedWebSearchTool": "‚úÖ –†–ê–ë–û–¢–ê–ï–¢ (–ø–æ–∏—Å–∫ URLs)",
        "EnhancedWebScrapingTool": "‚úÖ –†–ê–ë–û–¢–ê–ï–¢ (—Å–∫—Ä–∞–ø–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞)",
        "SecurityTool": "‚úÖ –†–ê–ë–û–¢–ê–ï–¢ (–∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–æ–ª–µ–π)",
        "VectorSearchTool": "‚úÖ –†–ê–ë–û–¢–ê–ï–¢ (ChromaDB)",
        "ApiRequestTool": "‚úÖ –†–ê–ë–û–¢–ê–ï–¢ (HTTP –∑–∞–ø—Ä–æ—Å—ã)",
        
        # ‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–Æ–©–ò–ï
        "DatabaseTool": "‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û (async –ø—Ä–æ–±–ª–µ–º–∞)",
        "EmailTool": "‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û (–Ω—É–∂–µ–Ω SMTP)",
        "NetworkTool": "‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û (–Ω—É–∂–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)",
        
        # ‚úÖ –†–ê–ù–ï–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ù–´–ï
        "SuperSystemTool": "‚úÖ –†–ê–ë–û–¢–ê–ï–¢ (—Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)",
        "DocumentTool": "‚úÖ –†–ê–ë–û–¢–ê–ï–¢ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)",
        "ComputerUseTool": "‚úÖ –ß–ê–°–¢–ò–ß–ù–û (–±–µ–∑ GUI)",
        "AIIntegrationTool": "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢ (–Ω—É–∂–µ–Ω API –∫–ª—é—á)",
        "DataAnalysisTool": "‚úÖ –†–ê–ë–û–¢–ê–ï–¢ (–∞–Ω–∞–ª–∏–∑ CSV)",
        "MediaTool": "‚úÖ –†–ê–ë–û–¢–ê–ï–¢ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞)",
        "CodeExecutionTool": "‚úÖ –ß–ê–°–¢–ò–ß–ù–û (50% —É—Å–ø–µ—Ö)",
        "WebClientTool": "‚úÖ –†–ê–ë–û–¢–ê–ï–¢ (–≤–µ–±-–∫–ª–∏–µ–Ω—Ç)",
        "SmartFunctionTool": "‚úÖ –†–ê–ë–û–¢–ê–ï–¢ (—É–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)",
        
        # ‚ùå –ù–ï –†–ê–ë–û–¢–ê–Æ–©–ò–ï (–∏–∑ —Ä–∞–Ω–Ω–∏—Ö —Ç–µ—Å—Ç–æ–≤)
        "TelegramTool": "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢ (–Ω—É–∂–µ–Ω pyrogram)"
    }
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    tool_files = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        ("enhanced_web_search_tool.py", ["EnhancedWebSearchTool"]),
        ("enhanced_web_scraping_tool.py", ["EnhancedWebScrapingTool"]),
        ("security_tool.py", ["SecurityTool"]),
        ("vector_search_tool.py", ["VectorSearchTool"]),
        ("api_request_tool.py", ["ApiRequestTool"]),
        ("database_tool.py", ["DatabaseTool"]),
        ("network_tool.py", ["NetworkTool"]),
        ("super_system_tool.py", ["SuperSystemTool"]),
        ("ai_integration_tool.py", ["AIIntegrationTool"]),
        ("data_analysis_tool.py", ["DataAnalysisTool"]),
        ("media_tool.py", ["MediaTool"]),
        ("computer_use_tool.py", ["ComputerUseTool"]),
        ("smart_function_tool.py", ["SmartFunctionTool"]),
        ("web_client_tool.py", ["WebClientTool"]),
        ("code_execution_tools.py", ["CodeExecutionTool"]),
        ("communication_tools.py", ["EmailTool", "TelegramTool"]),
        
        # –í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –µ—â—ë –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        ("document_tool_unified.py", ["DocumentTool"]),
        ("image_generation_tool.py", ["ImageGenerationTool"]),
        ("obsidian_tools.py", ["ObsidianTool"]),
        ("smart_code_generator.py", ["SmartCodeGenerator"]),
        ("web_tools.py", ["WebTool"]),
        ("real_tools.py", ["RealTool"]),
    ]
    
    discovered_tools = {}
    untested_tools = []
    
    print("üîç –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í:")
    print("-" * 50)
    
    for filename, expected_tools in tool_files:
        file_path = f"kittycore.tools.{filename[:-3]}"  # —É–±–∏—Ä–∞–µ–º .py
        
        try:
            module = importlib.import_module(file_path)
            
            for tool_name in expected_tools:
                if hasattr(module, tool_name):
                    tool_class = getattr(module, tool_name)
                    
                    if tool_name in tested_tools:
                        status = tested_tools[tool_name]
                        discovered_tools[tool_name] = status
                        print(f"  üì¶ {tool_name}: {status}")
                    else:
                        discovered_tools[tool_name] = "‚ùì –ù–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù"
                        untested_tools.append((tool_name, file_path, tool_class))
                        print(f"  üì¶ {tool_name}: ‚ùì –ù–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù")
                else:
                    print(f"  ‚ùå {tool_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {filename}")
                    
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {filename}: {str(e)[:50]}...")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 80)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    print("=" * 80)
    
    total = len(discovered_tools)
    working = len([s for s in discovered_tools.values() if "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" in s])
    partial = len([s for s in discovered_tools.values() if "‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û" in s])
    broken = len([s for s in discovered_tools.values() if "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢" in s])
    untested = len([s for s in discovered_tools.values() if "‚ùì –ù–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù" in s])
    
    print(f"üì¶ –í–°–ï–ì–û –û–ë–ù–ê–†–£–ñ–ï–ù–û: {total} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    print(f"‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–ê–ï–¢: {working} ({working/total*100:.1f}%)")
    print(f"‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢: {partial} ({partial/total*100:.1f}%)")
    print(f"‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢: {broken} ({broken/total*100:.1f}%)")
    print(f"‚ùì –ù–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–û: {untested} ({untested/total*100:.1f}%)")
    
    tested_count = working + partial + broken
    print(f"\nüéØ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–û: {tested_count}/{total} = {tested_count/total*100:.1f}%")
    
    # –°–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    if untested_tools:
        print("\n" + "=" * 80)
        print("‚ùì –ù–ï–ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ (–¢–†–ï–ë–£–Æ–¢ –ü–†–û–í–ï–†–ö–ò)")
        print("=" * 80)
        
        for i, (tool_name, file_path, tool_class) in enumerate(untested_tools, 1):
            print(f"{i:2d}. {tool_name}")
            print(f"    üìÅ –§–∞–π–ª: {file_path}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            purpose = ""
            if "image" in tool_name.lower():
                purpose = "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
            elif "obsidian" in tool_name.lower():
                purpose = "üìù –†–∞–±–æ—Ç–∞ —Å Obsidian"
            elif "code" in tool_name.lower():
                purpose = "üíª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞"
            elif "web" in tool_name.lower():
                purpose = "üåê –í–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
            elif "real" in tool_name.lower():
                purpose = "üîß –†–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
            else:
                purpose = "‚ùì –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ—è—Å–Ω–æ"
            
            print(f"    üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {purpose}")
            print()
    
    return discovered_tools, untested_tools

if __name__ == "__main__":
    discovered, untested = discover_all_tools()
    
    if untested:
        print("üöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("  1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –Ω–µ–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        print("  2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        print("  3. –î–æ–≤–µ—Å—Ç–∏ –æ–±—â—É—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–æ 90%+")
        print("=" * 80)
    else:
        print("üéâ –í–°–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´!") 