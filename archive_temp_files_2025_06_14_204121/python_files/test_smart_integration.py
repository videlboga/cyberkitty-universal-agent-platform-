#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SmartValidator –≤ ObsidianOrchestrator
"""

import asyncio
from kittycore.core.obsidian_orchestrator import solve_with_obsidian_orchestrator

async def test_smart_integration():
    print("üß™ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò SmartValidator")
    print("=" * 50)
    
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    task = "–°–æ–∑–¥–∞–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞"
    
    try:
        result = await solve_with_obsidian_orchestrator(task)
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result['status']}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result['duration']:.1f}—Å")
        print(f"ü§ñ –ê–≥–µ–Ω—Ç–æ–≤: {result['agents_created']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        validation_found = False
        for step_id, step_result in result['execution']['step_results'].items():
            if 'validation' in step_result:
                validation = step_result['validation']
                print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–≥–∞ {step_id}: {validation.get('verdict', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                if 'score' in validation:
                    print(f"üìä –û—Ü–µ–Ω–∫–∞: {validation['score']:.1f}/1.0")
                validation_found = True
        
        if validation_found:
            print("üéØ SmartValidator –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print("‚ùå SmartValidator –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_smart_integration()) 