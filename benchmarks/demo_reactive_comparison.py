#!/usr/bin/env python3
"""
üèÜ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–†–ê–í–ù–ï–ù–ò–Ø –ê–ì–ï–ù–¢–û–í
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–º –±–µ–Ω—á–º–∞—Ä–∫–µ
"""

import asyncio
import time
from typing import Dict, List, Any
from reactive_cooking_benchmark import ReactiveCookingBenchmark
from adaptive_cooking_agent import AdaptiveCookingAgent
from kittycore_reactive_integration import KittyCoreReactiveAgent

class AgentComparison:
    """–°–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.benchmark = ReactiveCookingBenchmark()
        # –£–ø—Ä–æ—â–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        self.benchmark.test_scenarios = [
            "–ü—Ä–∏–≥–æ—Ç–æ–≤—å –ø–∞—Å—Ç—É",
            "–°–¥–µ–ª–∞–π —Å—Ç–µ–π–∫", 
            "–ü—Ä–∏–≥–æ—Ç–æ–≤—å –ø–∞—Å—Ç—É"  # –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—É—á–µ–Ω–∏—è
        ]
    
    async def compare_agents(self) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤"""
        
        print("üèÜ –°–†–ê–í–ù–ï–ù–ò–ï –ê–ì–ï–ù–¢–û–í –í –†–ï–ê–ö–¢–ò–í–ù–û–ú –ë–ï–ù–ß–ú–ê–†–ö–ï")
        print("=" * 60)
        
        agents = [
            AdaptiveCookingAgent("–ü—Ä–æ—Å—Ç–æ–π_–ê–≥–µ–Ω—Ç"),
            KittyCoreReactiveAgent("KittyCore_–ê–≥–µ–Ω—Ç")
        ]
        
        results = {}
        
        for i, agent in enumerate(agents, 1):
            print(f"\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ì–ï–ù–¢–ê {i}/{len(agents)}: {agent.agent_name}")
            print("-" * 50)
            
            start_time = time.time()
            agent_results = await self.benchmark.run_benchmark(agent)
            end_time = time.time()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            agent_results["execution_time"] = end_time - start_time
            agent_results["agent_type"] = type(agent).__name__
            
            results[agent.agent_name] = agent_results
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        await self._analyze_comparison(results)
        
        return results
    
    async def _analyze_comparison(self, results: Dict[str, Any]):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤"""
        
        print(f"\nüìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–ì–ï–ù–¢–û–í")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        agents = list(results.keys())
        
        print(f"{'–ú–µ—Ç—Ä–∏–∫–∞':<25} {'–ü—Ä–æ—Å—Ç–æ–π_–ê–≥–µ–Ω—Ç':<15} {'KittyCore_–ê–≥–µ–Ω—Ç':<15} {'–ü–æ–±–µ–¥–∏—Ç–µ–ª—å':<15}")
        print("-" * 70)
        
        metrics = [
            ("–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫", "total_scenarios"),
            ("–£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫", lambda r: sum(1 for a in r["attempts"] if a["success"])),
            ("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞", lambda r: sum(1 for a in r["attempts"] if a["success"]) / len(r["attempts"]) * 100),
            ("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", lambda r: sum(a["avg_score"] for a in r["attempts"]) / len(r["attempts"])),
            ("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "benchmark_time"),
            ("–ò–∑—É—á–µ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤", lambda r: r["final_stats"]["known_ingredients"]),
            ("–ò–∑—É—á–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫", lambda r: r["final_stats"]["known_techniques"]),
            ("–û—Ü–µ–Ω–∫–∞ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", lambda r: self._calculate_reactivity_score(r))
        ]
        
        winners = {}
        
        for metric_name, metric_key in metrics:
            values = []
            
            for agent_name in agents:
                if callable(metric_key):
                    value = metric_key(results[agent_name])
                else:
                    value = results[agent_name][metric_key]
                values.append(value)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–±–æ–ª—å—à–µ = –ª—É—á—à–µ, –∫—Ä–æ–º–µ –≤—Ä–µ–º–µ–Ω–∏)
            if metric_name == "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è":
                winner_idx = values.index(min(values))  # –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ = –ª—É—á—à–µ
            else:
                winner_idx = values.index(max(values))  # –±–æ–ª—å—à–µ = –ª—É—á—à–µ
            
            winner = agents[winner_idx]
            winners[metric_name] = winner
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            formatted_values = []
            for value in values:
                if isinstance(value, float):
                    if metric_name == "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞":
                        formatted_values.append(f"{value:.1f}%")
                    elif metric_name == "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è":
                        formatted_values.append(f"{value:.2f}—Å")
                    else:
                        formatted_values.append(f"{value:.2f}")
                else:
                    formatted_values.append(str(value))
            
            print(f"{metric_name:<25} {formatted_values[0]:<15} {formatted_values[1]:<15} {winner:<15}")
        
        # –û–±—â–∏–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
        winner_counts = {}
        for winner in winners.values():
            winner_counts[winner] = winner_counts.get(winner, 0) + 1
        
        overall_winner = max(winner_counts.items(), key=lambda x: x[1])
        
        print("\nüèÜ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   –û–±—â–∏–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: {overall_winner[0]} ({overall_winner[1]}/{len(metrics)} –º–µ—Ç—Ä–∏–∫)")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
        
        for agent_name in agents:
            agent_results = results[agent_name]
            attempts = agent_results["attempts"]
            
            print(f"\n   {agent_name}:")
            print(f"   - –¢–∏–ø: {agent_results['agent_type']}")
            print(f"   - –ü—Ä–æ–≥—Ä–µ—Å—Å: {attempts[0]['avg_score']:.1f} ‚Üí {attempts[-1]['avg_score']:.1f}")
            
            improvement = attempts[-1]['avg_score'] - attempts[0]['avg_score']
            print(f"   - –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:+.1f} ({'‚úÖ' if improvement > 0 else '‚ùå'})")
            
            # –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
            strengths = []
            for metric, winner in winners.items():
                if winner == agent_name:
                    strengths.append(metric)
            
            if strengths:
                print(f"   - –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {', '.join(strengths[:3])}")
    
    def _calculate_reactivity_score(self, results: Dict[str, Any]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∫–æ–ø–∏—è –∏–∑ ReactiveCookingBenchmark)"""
        
        progression = results["learning_progression"]
        
        # 1. –£–ª—É—á—à–µ–Ω–∏–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º (40% –≤–µ—Å–∞)
        first_half = progression[:len(progression)//2] if len(progression) > 2 else progression[:1]
        second_half = progression[len(progression)//2:] if len(progression) > 2 else progression[1:]
        
        if not second_half:
            return 5.0  # —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        
        first_avg = sum(p["avg_score"] for p in first_half) / len(first_half)
        second_avg = sum(p["avg_score"] for p in second_half) / len(second_half)
        improvement = max(0, second_avg - first_avg) * 2  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-2
        
        # 2. –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π (30% –≤–µ—Å–∞)
        final_stats = results["final_stats"]
        knowledge_score = min(2.0, (
            final_stats["known_ingredients"] * 0.1 +
            final_stats["known_techniques"] * 0.2 +
            final_stats["known_tasters"] * 0.1
        ))
        
        # 3. –£—Å–ø–µ—à–Ω–æ—Å—Ç—å (20% –≤–µ—Å–∞)
        success_rate = sum(1 for a in results["attempts"] if a["success"]) / len(results["attempts"])
        success_score = success_rate * 2
        
        # 4. –°–∫–æ—Ä–æ—Å—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ (10% –≤–µ—Å–∞)
        speed_score = min(2.0, 10 / results["benchmark_time"])  # –±—ã—Å—Ç—Ä–µ–µ = –ª—É—á—à–µ
        
        total_score = (
            improvement * 4.0 +      # 40%
            knowledge_score * 3.0 +  # 30%
            success_score * 2.0 +    # 20%
            speed_score * 1.0        # 10%
        )
        
        return min(10.0, total_score)

async def main():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–ê–ö–¢–ò–í–ù–û–ì–û –ë–ï–ù–ß–ú–ê–†–ö–ê")
    print("–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤...")
    
    comparison = AgentComparison()
    results = await comparison.compare_agents()
    
    print(f"\n‚úÖ –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ KittyCore –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    print(f"üîÑ –†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫ –≥–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª—é–±—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤!")

if __name__ == "__main__":
    asyncio.run(main()) 