#!/usr/bin/env python3
"""
üîß COMPREHENSIVE –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï KITTYCORE 3.0 - –ß–ê–°–¢–¨ 1: –ë–ê–ó–û–í–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´
"""

import json
import time
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ KittyCore
sys.path.insert(0, str(Path(__file__).parent / 'kittycore'))

class ComprehensivePart1Tester:
    """üîß –¢–µ—Å—Ç–µ—Ä –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ KittyCore 3.0"""
    
    def __init__(self):
        self.results = []
        self.honest_tools = set()
        self.dishonest_tools = set()
        print("üéØ Comprehensive Part 1 —Ç–µ—Å—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def test_media_tool(self):
        """üé® –¢–µ—Å—Ç MediaTool"""
        print("   üé® –¢–µ—Å—Ç–∏—Ä—É—é MediaTool...")
        start_time = time.time()
        
        try:
            from kittycore.tools.media_tool import MediaTool
            tool = MediaTool()
            result = tool.execute(action="get_info")
            
            execution_time = time.time() - start_time
            
            # –ß–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if hasattr(result, 'data') and result.data and len(str(result.data)) > 50:
                self.honest_tools.add("media_tool")
                honesty = "‚úÖ –ß–ï–°–¢–ù–û"
                size = len(str(result.data))
            else:
                self.dishonest_tools.add("media_tool")
                honesty = "‚ùå –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û"
                size = 0
            
            test_result = {
                'tool_name': 'media_tool',
                'action': 'get_info',
                'success': True,
                'execution_time': execution_time,
                'data_size': size,
                'honesty': honesty
            }
            
            print(f"      ‚è±Ô∏è –í—Ä–µ–º—è: {execution_time:.2f}—Å")
            print(f"      üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {size} –±–∞–π—Ç")
            print(f"      {honesty}")
            
            self.results.append(test_result)
            return test_result
            
        except Exception as e:
            execution_time = time.time() - start_time
            error_msg = str(e)[:100]
            print(f"      üí• –û–®–ò–ë–ö–ê: {error_msg}")
            
            test_result = {
                'tool_name': 'media_tool',
                'action': 'get_info',
                'success': False,
                'execution_time': execution_time,
                'error': error_msg,
                'honesty': "‚ùå –û–®–ò–ë–ö–ê"
            }
            
            self.dishonest_tools.add("media_tool")
            self.results.append(test_result)
            return test_result
    
    def test_system_tool(self):
        """üíª –¢–µ—Å—Ç SuperSystemTool"""
        print("   üíª –¢–µ—Å—Ç–∏—Ä—É—é SuperSystemTool...")
        start_time = time.time()
        
        try:
            from kittycore.tools.super_system_tool import SuperSystemTool
            tool = SuperSystemTool()
            result = tool.execute(action="run_command", command="echo 'test'")
            
            execution_time = time.time() - start_time
            
            # –ß–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
            if hasattr(result, 'data') and 'test' in str(result.data):
                self.honest_tools.add("super_system_tool")
                honesty = "‚úÖ –ß–ï–°–¢–ù–û"
                size = len(str(result.data))
            else:
                self.dishonest_tools.add("super_system_tool")
                honesty = "‚ùå –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û"
                size = 0
            
            test_result = {
                'tool_name': 'super_system_tool',
                'action': 'run_command',
                'success': True,
                'execution_time': execution_time,
                'data_size': size,
                'honesty': honesty
            }
            
            print(f"      ‚è±Ô∏è –í—Ä–µ–º—è: {execution_time:.2f}—Å")
            print(f"      üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {size} –±–∞–π—Ç")
            print(f"      {honesty}")
            
            self.results.append(test_result)
            return test_result
            
        except Exception as e:
            execution_time = time.time() - start_time
            error_msg = str(e)[:100]
            print(f"      üí• –û–®–ò–ë–ö–ê: {error_msg}")
            
            test_result = {
                'tool_name': 'super_system_tool',
                'action': 'run_command',
                'success': False,
                'execution_time': execution_time,
                'error': error_msg,
                'honesty': "‚ùå –û–®–ò–ë–ö–ê"
            }
            
            self.dishonest_tools.add("super_system_tool")
            self.results.append(test_result)
            return test_result
    
    def test_network_tool(self):
        """üåê –¢–µ—Å—Ç NetworkTool"""
        print("   üåê –¢–µ—Å—Ç–∏—Ä—É—é NetworkTool...")
        start_time = time.time()
        
        try:
            from kittycore.tools.network_tool import NetworkTool
            tool = NetworkTool()
            result = tool.execute(action="get_info")
            
            execution_time = time.time() - start_time
            
            # –ß–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if hasattr(result, 'data') and result.data and len(str(result.data)) > 100:
                self.honest_tools.add("network_tool")
                honesty = "‚úÖ –ß–ï–°–¢–ù–û"
                size = len(str(result.data))
            else:
                self.dishonest_tools.add("network_tool")
                honesty = "‚ùå –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û"
                size = 0
            
            test_result = {
                'tool_name': 'network_tool',
                'action': 'get_info',
                'success': True,
                'execution_time': execution_time,
                'data_size': size,
                'honesty': honesty
            }
            
            print(f"      ‚è±Ô∏è –í—Ä–µ–º—è: {execution_time:.2f}—Å")
            print(f"      üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {size} –±–∞–π—Ç")
            print(f"      {honesty}")
            
            self.results.append(test_result)
            return test_result
            
        except Exception as e:
            execution_time = time.time() - start_time
            error_msg = str(e)[:100]
            print(f"      üí• –û–®–ò–ë–ö–ê: {error_msg}")
            
            test_result = {
                'tool_name': 'network_tool',
                'action': 'get_info',
                'success': False,
                'execution_time': execution_time,
                'error': error_msg,
                'honesty': "‚ùå –û–®–ò–ë–ö–ê"
            }
            
            self.dishonest_tools.add("network_tool")
            self.results.append(test_result)
            return test_result
    
    def test_all_basic_tools(self):
        """üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        print("üìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í (–ß–ê–°–¢–¨ 1):")
        print("-" * 60)
        
        tools_to_test = [
            ("MediaTool", self.test_media_tool),
            ("SuperSystemTool", self.test_system_tool),
            ("NetworkTool", self.test_network_tool),
        ]
        
        for i, (tool_name, test_func) in enumerate(tools_to_test, 1):
            print(f"üîß {i}/{len(tools_to_test)}: {tool_name}")
            test_func()
            print()
    
    def generate_summary(self):
        """üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
        total_tools = len(self.results)
        successful_tools = len([r for r in self.results if r['success']])
        honest_count = len(self.honest_tools)
        
        summary = f"""
üìä –ò–¢–û–ì–ò COMPREHENSIVE –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –ß–ê–°–¢–¨ 1:
{'='*60}
üîß –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {total_tools}
‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ: {successful_tools}
üõ°Ô∏è –ß–µ—Å—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç: {honest_count}
‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ: {len(self.dishonest_tools)}

üõ°Ô∏è –ß–ï–°–¢–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´: {', '.join(self.honest_tools) if self.honest_tools else '–ù–ï–¢'}
‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´: {', '.join(self.dishonest_tools) if self.dishonest_tools else '–ù–ï–¢'}

üìà –ü–†–û–¶–ï–ù–¢ –ß–ï–°–¢–ù–û–°–¢–ò: {(honest_count/total_tools*100):.1f}%
"""
        return summary

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–∏ 1"""
    print("üîß COMPREHENSIVE –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï KITTYCORE 3.0 - –ß–ê–°–¢–¨ 1")
    print("=" * 60)
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã!")
    print()
    
    tester = ComprehensivePart1Tester()
    
    start_time = time.time()
    tester.test_all_basic_tools()
    total_time = time.time() - start_time
    
    print(tester.generate_summary())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = int(time.time())
    results_file = f"comprehensive_part1_results_{timestamp}.json"
    
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump({
            'timestamp': timestamp,
            'total_time': total_time,
            'results': tester.results,
            'honest_tools': list(tester.honest_tools),
            'dishonest_tools': list(tester.dishonest_tools)
        }, f, indent=2, ensure_ascii=False)
    
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.1f}—Å")

if __name__ == "__main__":
    main() 