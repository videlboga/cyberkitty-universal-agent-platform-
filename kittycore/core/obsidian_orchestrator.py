"""
üß≠ ObsidianOrchestrator - –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å ObsidianDB

–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ObsidianDB –∫–∞–∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:
- –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Obsidian vault
- –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–º–µ—Ç–∫–∏
- –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∑–∞–º–µ—Ç–∫–∞–º–∏
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –æ–±—â—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π

–†–ï–®–ê–ï–¢ –ü–†–û–ë–õ–ï–ú–´:
‚úÖ –†–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
‚úÖ –ü–æ—Ç–µ—Ä—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
‚úÖ –ò–ª–ª—é–∑–∏—è —Ä–∞–±–æ—Ç—ã –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚úÖ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ LLM –ø—Ä–æ–º–ø—Ç—ã
"""

import asyncio
import json
from datetime import datetime
from typing import Dict, Any, List, Optional
from pathlib import Path

from loguru import logger

# –ò–º–ø–æ—Ä—Ç—ã ObsidianDB
from .obsidian_db import (
    ObsidianDB, ObsidianNote, AgentWorkspace, TaskManager,
    get_obsidian_db, create_agent_workspace, create_task_manager
)

# –ò–º–ø–æ—Ä—Ç—ã –±–∞–∑–æ–≤–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
from .orchestrator import (
    TaskAnalyzer, TaskDecomposer, ComplexityEvaluator, 
    SkillsetMatcher, AgentSpawner, TeamComposer, WorkflowPlanner
)

# –ò–º–ø–æ—Ä—Ç SmartValidator –∏ IterativeImprovement
from kittycore.agents.smart_validator import SmartValidator
from .iterative_improvement import IterativeImprovement

class ObsidianTaskAnalyzer(TaskAnalyzer):
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–¥–∞—á —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ ObsidianDB"""
    
    def __init__(self, vault_path: str = "./obsidian_vault"):
        super().__init__()
        self.db = get_obsidian_db(vault_path)
        
    def analyze_task_complexity(self, task: str, task_id: str = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ ObsidianDB"""
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É: {task[:50]}...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        analysis = super().analyze_task_complexity(task)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ ObsidianDB
        if task_id:
            analysis_note = ObsidianNote(
                title=f"–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ {task_id}",
                content=f"""## –ó–∞–¥–∞—á–∞
{task}

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞

**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {analysis['complexity']}
**–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤:** {analysis['estimated_agents']}
**–¢—Ä–µ–±—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:** {analysis['requires_planning']}
**–¢—Ä–µ–±—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏:** {analysis['requires_coordination']}
**–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –≤—Ä–µ–º—è:** {analysis['estimated_time']} –º–∏–Ω—É—Ç

## –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
{analysis['reasoning']}

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {analysis['word_count']}
- –ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: LLM + —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
- Timestamp: {datetime.now().isoformat()}
""",
                tags=["task-analysis", "system", task_id] if task_id else ["task-analysis", "system"],
                metadata={
                    "task_id": task_id,
                    "complexity": analysis['complexity'],
                    "estimated_agents": analysis['estimated_agents'],
                    "analysis_method": "LLM+heuristic",
                    "folder": "system"
                },
                folder="system"
            )
            
            self.db.save_note(analysis_note)
            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ ObsidianDB")
        
        return analysis

class ObsidianTaskDecomposer(TaskDecomposer):
    """–î–µ–∫–æ–º–ø–æ–∑–µ—Ä –∑–∞–¥–∞—á —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ ObsidianDB"""
    
    def __init__(self, vault_path: str = "./obsidian_vault"):
        super().__init__()
        self.db = get_obsidian_db(vault_path)
        
    def decompose_task(self, task: str, complexity: str, task_id: str = None) -> List[Dict[str, Any]]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ ObsidianDB"""
        logger.info(f"üîÑ –î–µ–∫–æ–º–ø–æ–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {complexity}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é
        subtasks = super().decompose_task(task, complexity)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é –≤ ObsidianDB
        if task_id:
            subtasks_content = "\n".join([
                f"### –ü–æ–¥–∑–∞–¥–∞—á–∞ {st['id']}: {st['description']}\n"
                f"- **–¢–∏–ø:** {st['type']}\n"
                f"- **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {st.get('priority', 'normal')}\n"
                f"- **–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:** {st.get('dependencies', [])}\n"
                for st in subtasks
            ])
            
            decomposition_note = ObsidianNote(
                title=f"–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∑–∞–¥–∞—á–∏ {task_id}",
                content=f"""## –ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞
{task}

## –ü–æ–¥–∑–∞–¥–∞—á–∏ ({len(subtasks)} —à—Ç.)

{subtasks_content}

## –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {complexity}
- **–ú–µ—Ç–æ–¥ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏:** LLM + —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
- **–°–æ–∑–¥–∞–Ω–æ:** {datetime.now().isoformat()}

## –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
[[–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ {task_id}]]
""",
                tags=["task-decomposition", "planning", task_id] if task_id else ["task-decomposition", "planning"],
                metadata={
                    "task_id": task_id,
                    "subtasks_count": len(subtasks),
                    "complexity": complexity,
                    "decomposition_method": "LLM+structural",
                    "folder": "system"
                },
                folder="system"
            )
            
            self.db.save_note(decomposition_note)
            
            # –°–æ–∑–¥–∞—ë–º —Å–≤—è–∑—å —Å –∞–Ω–∞–ª–∏–∑–æ–º
            self.db.create_link(
                f"–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è-–∑–∞–¥–∞—á–∏-{task_id}.md",
                f"–ê–Ω–∞–ª–∏–∑-–∑–∞–¥–∞—á–∏-{task_id}.md",
                "–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏"
            )
            
            logger.info(f"üîÑ –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ObsidianDB: {len(subtasks)} –ø–æ–¥–∑–∞–¥–∞—á")
        
        return subtasks

class ObsidianAgentSpawner(AgentSpawner):
    """–°–æ–∑–¥–∞—Ç–µ–ª—å –∞–≥–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π ObsidianDB"""
    
    def __init__(self, vault_path: str = "./obsidian_vault"):
        super().__init__()
        self.db = get_obsidian_db(vault_path)
        self.workspaces = {}  # –ö—ç—à —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∞–≥–µ–Ω—Ç–æ–≤
        
    def spawn_agent_for_task(self, subtask: Dict, skills: List[str], task_id: str = None) -> Any:
        """–°–æ–∑–¥–∞—ë—Ç –∞–≥–µ–Ω—Ç–∞ –∏ –µ–≥–æ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤ ObsidianDB"""
        
        # –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        agent = super().spawn_agent_for_task(subtask, skills)
        agent_id = f"agent_{subtask['id']}"
        
        # –°–æ–∑–¥–∞—ë–º —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤ ObsidianDB
        workspace = create_agent_workspace(agent_id, self.db.vault_path)
        self.workspaces[agent_id] = workspace
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
        agent_info_note = ObsidianNote(
            title=f"–ê–≥–µ–Ω—Ç {agent_id}",
            content=f"""## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≥–µ–Ω—Ç–µ

**ID –∞–≥–µ–Ω—Ç–∞:** {agent_id}
**–†–æ–ª—å:** {getattr(agent, 'role', 'worker')}
**–¢–∏–ø:** {type(agent).__name__}

## –ù–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞
{subtask['description']}

## –¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏
{', '.join(skills)}

## –°—Ç–∞—Ç—É—Å
- **–°–æ–∑–¥–∞–Ω:** {datetime.now().isoformat()}
- **–ó–∞–¥–∞—á–∞:** {task_id or 'unknown'}
- **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–µ–Ω

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã
*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*

## –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
""",
            tags=["agent", "active", agent_id, task_id] if task_id else ["agent", "active", agent_id],
            metadata={
                "agent_id": agent_id,
                "task_id": task_id,
                "subtask_id": subtask['id'],
                "agent_type": type(agent).__name__,
                "skills": skills,
                "created": datetime.now().isoformat(),
                "status": "active",
                "folder": "agents"
            },
            folder="agents"
        )
        
        self.db.save_note(agent_info_note)
        
        # –°–æ–∑–¥–∞—ë–º —Å–≤—è–∑–∏ —Å –∑–∞–¥–∞—á–µ–π
        if task_id:
            self.db.create_link(
                f"–ê–≥–µ–Ω—Ç-{agent_id}.md",
                f"–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è-–∑–∞–¥–∞—á–∏-{task_id}.md",
                f"–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∑–∞–¥–∞—á–∏ {task_id}"
            )
        
        logger.info(f"ü§ñ –ê–≥–µ–Ω—Ç {agent_id} —Å–æ–∑–¥–∞–Ω —Å ObsidianDB workspace")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–≥–µ–Ω—Ç–∞ –Ω–∞ ObsidianAware
        from kittycore.tools.obsidian_tools import create_obsidian_tools
        obsidian_tools = create_obsidian_tools(self.db, agent_id)
        
        # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º ObsidianAware –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –∞–≥–µ–Ω—Ç–∞
        if hasattr(agent, 'tools'):
            # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ ObsidianAware
            agent.tools.update(obsidian_tools)
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            agent.tools = obsidian_tools
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        agent.agent_id = agent_id
        agent.workspace = workspace
        agent.task_id = task_id
        agent.obsidian_db = self.db
        
        return agent
    
    def get_agent_workspace(self, agent_id: str) -> Optional[AgentWorkspace]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–∞"""
        return self.workspaces.get(agent_id)

class ObsidianExecutionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π ObsidianDB"""
    
    def __init__(self, vault_path: str = "./obsidian_vault", smart_validator=None):
        self.db = get_obsidian_db(vault_path)
        self.smart_validator = smart_validator
        self.iterative_improver = IterativeImprovement() if smart_validator else None
        
    async def execute_workflow_with_obsidian(self, workflow: Dict, team: Dict, task_id: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç workflow —Å –ø–æ–ª–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ ObsidianDB"""
        execution_id = f"exec_{task_id}_{int(datetime.now().timestamp())}"
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–º–µ—Ç–∫—É –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        execution_note = ObsidianNote(
            title=f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id}",
            content=f"""## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏

**ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {execution_id}
**–ó–∞–¥–∞—á–∞:** {task_id}
**–ù–∞—á–∞—Ç–æ:** {datetime.now().isoformat()}

## Workflow
- **ID workflow:** {workflow.get('workflow_id', 'unknown')}
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤:** {len(workflow.get('steps', []))}

## –ö–æ–º–∞–Ω–¥–∞ –∞–≥–µ–Ω—Ç–æ–≤ ({len(team.get('agents', {}))})
{chr(10).join([f"- **{agent_id}:** {type(agent).__name__}" for agent_id, agent in team.get('agents', {}).items()])}

## –•–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
*–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏*

""",
            tags=["execution", "active", task_id],
            metadata={
                "execution_id": execution_id,
                "task_id": task_id,
                "workflow_id": workflow.get('workflow_id'),
                "team_size": len(team.get('agents', {})),
                "status": "running",
                "folder": "system"
            },
            folder="system"
        )
        
        self.db.save_note(execution_note)
        
        results = {
            "execution_id": execution_id,
            "task_id": task_id,
            "workflow_id": workflow["workflow_id"],
            "start_time": datetime.now().isoformat(),
            "steps_completed": 0,
            "step_results": {},
            "status": "running",
            "files_created": [],
            "agent_outputs": {}
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥
        for step in workflow["steps"]:
            logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —à–∞–≥: {step['description']}")
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –æ —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                await self._update_execution_progress(execution_id, step, "running")
                
                # –ù–∞—Ö–æ–¥–∏–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
                agent_id = step["assigned_agent"]
                
                if agent_id in team["agents"]:
                    agent = team["agents"][agent_id]
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ ObsidianDB
                    context = await self._get_execution_context(task_id, agent_id)
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥ —á–µ—Ä–µ–∑ ObsidianIntellectualAgent
                    step_result = await self._execute_step_with_obsidian(
                        agent, step, context, task_id
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≥–µ–Ω—Ç–∞
                    if hasattr(agent, 'workspace') and agent.workspace:
                        agent.workspace.save_result(
                            task_id=task_id,
                            content=step_result.get("output", ""),
                            result_type=step.get("type", "result")
                        )
                    
                    results["step_results"][step["step_id"]] = step_result
                    results["agent_outputs"][agent_id] = step_result.get("output", "")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                    await self._update_execution_progress(execution_id, step, "completed", step_result)
                    
                else:
                    step_result = {
                        "result": "‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        "status": "failed",
                        "timestamp": datetime.now().isoformat()
                    }
                    results["step_results"][step["step_id"]] = step_result
                    await self._update_execution_progress(execution_id, step, "failed", step_result)
                
                results["steps_completed"] += 1
                logger.info(f"‚úÖ –®–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {step['description']}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ {step['step_id']}: {e}")
                
                error_result = {
                    "result": f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    "status": "failed",
                    "error": str(e),
                    "timestamp": datetime.now().isoformat()
                }
                
                results["step_results"][step["step_id"]] = error_result
                await self._update_execution_progress(execution_id, step, "failed", error_result)
                results["steps_completed"] += 1
        
        results["status"] = "completed"
        results["end_time"] = datetime.now().isoformat()
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
        await self._finalize_execution_note(execution_id, results)
        
        return results
    
    async def _get_execution_context(self, task_id: str, agent_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ ObsidianDB"""
        context = {
            "task_id": task_id,
            "agent_id": agent_id,
            "previous_results": [],
            "related_notes": [],
            "coordination_messages": []
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞—á–µ–π
        related_notes = self.db.search_notes(metadata_filter={"task_id": task_id})
        
        for note_info in related_notes:
            if note_info["metadata"].get("agent_id") != agent_id:
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
                if note_info["metadata"].get("result_type"):
                    note = self.db.get_note(note_info["path"])
                    if note:
                        context["previous_results"].append({
                            "agent": note_info["metadata"].get("agent_id"),
                            "type": note_info["metadata"].get("result_type"),
                            "content": note.content[:300] + "..." if len(note.content) > 300 else note.content,
                            "timestamp": note_info["updated"]
                        })
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if note_info["metadata"].get("message_type") == "coordination":
                if note_info["metadata"].get("to_agent") == agent_id:
                    note = self.db.get_note(note_info["path"])
                    if note:
                        context["coordination_messages"].append({
                            "from": note_info["metadata"].get("from_agent"),
                            "content": note.content,
                            "timestamp": note_info["updated"]
                        })
        
        return context
    
    async def _execute_step_with_obsidian(self, agent: Any, step: Dict, context: Dict, task_id: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —à–∞–≥ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ ObsidianDB"""
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from ..agents.intellectual_agent import IntellectualAgent
        
        # –°–æ–∑–¥–∞—ë–º IntellectualAgent —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        subtask = {
            "description": step["description"],
            "type": step.get("type", "general"),
            "context": context
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∞–≥–µ–Ω—Ç–∞
        agent_role = getattr(agent, 'role', getattr(agent, 'agent_id', 'worker'))
        
        # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
        working_agent = IntellectualAgent(agent_role, subtask)
        execution_result = await working_agent.execute_task()
        
                # –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ê —á–µ—Ä–µ–∑ SmartValidator
        if self.smart_validator:
            try:
                validation = await self.smart_validator.validate_result(
                    original_task=step["description"],
                    result=execution_result,
                    created_files=execution_result.get("files_created", [])
                )
                
                logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: {validation.verdict} (–æ—Ü–µ–Ω–∫–∞: {validation.score:.1f}/1.0)")
                
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
                if not validation.is_valid:
                    logger.warning(f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {validation.user_benefit}")
                    logger.warning(f"üîß –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(validation.issues)}")
                    
                    # –ò–¢–ï–†–ê–¢–ò–í–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï –ê–ì–ï–ù–¢–ê
                    if self.iterative_improver and validation.score < 0.6:  # –£–ª—É—á—à–∞–µ–º –µ—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ < 0.6
                        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...")
                        
                        try:
                            improved_result, improvement_attempts = await self.iterative_improver.improve_agent_iteratively(
                                agent=working_agent,
                                task=step["description"],
                                initial_result=execution_result,
                                initial_validation=validation,
                                smart_validator=self.smart_validator
                            )
                            
                            # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–º
                            execution_result.update(improved_result)
                            execution_result["iteratively_improved"] = True
                            execution_result["improvement_attempts"] = len(improvement_attempts)
                            execution_result["original_validation"] = {
                                "score": validation.score,
                                "issues": validation.issues
                            }
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ª—É—á—à–µ–Ω–∏—è
                            final_score = improved_result.get("validation", {}).get("score", validation.score)
                            improvement = final_score - validation.score
                            
                            if improvement > 0:
                                logger.info(f"üìà –ê–≥–µ–Ω—Ç —É–ª—É—á—à–µ–Ω: {validation.score:.1f} ‚Üí {final_score:.1f} (+{improvement:.1f})")
                            else:
                                logger.warning(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ —É–ª—É—á—à–∏–ª—Å—è: {validation.score:.1f} ‚Üí {final_score:.1f}")
                            
                        except Exception as improve_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è: {improve_error}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    execution_result["validation"] = {
                        "is_valid": False,
                        "score": validation.score,
                        "issues": validation.issues,
                        "recommendations": validation.recommendations,
                        "verdict": validation.verdict
                    }
                    
                    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ –∏ –Ω–µ —É–ª—É—á—à–µ–Ω–∞
                    if not execution_result.get("iteratively_improved", False):
                        execution_result["status"] = "validation_failed"
                    
                else:
                    logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {validation.user_benefit}")
                    execution_result["validation"] = {
                        "is_valid": True,
                        "score": validation.score,
                        "verdict": validation.verdict
                    }
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
                execution_result["validation"] = {
                    "is_valid": False,
                    "error": str(e),
                    "verdict": "‚ùå –û–®–ò–ë–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò"
                }
        else:
            logger.warning("‚ö†Ô∏è SmartValidator –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω - –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        
        return {
            "result": execution_result.get("output", ""),
            "status": execution_result.get("status", "completed"),
            "timestamp": datetime.now().isoformat(),
            "agent": agent_role,
            "files_created": execution_result.get("files_created", []),
            "validation": execution_result.get("validation", {})
        }
    
    async def _update_execution_progress(self, execution_id: str, step: Dict, status: str, result: Dict = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∑–∞–º–µ—Ç–∫–µ"""
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–º–µ—Ç–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_notes = self.db.search_notes(metadata_filter={"execution_id": execution_id})
        
        for note_info in execution_notes:
            note = self.db.get_note(note_info["path"])
            if note:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–≥–µ
                step_info = f"""
### –®–∞–≥ {step['step_id']}: {step['description']} ({status})
- **–ê–≥–µ–Ω—Ç:** {step.get('assigned_agent', 'unknown')}
- **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}
- **–°—Ç–∞—Ç—É—Å:** {status}
"""
                if result:
                    step_info += f"- **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result.get('result', '')[:100]}...\n"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                if "## –•–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" in note.content:
                    note.content = note.content.replace(
                        "*–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏*",
                        step_info.strip()
                    )
                    if step_info not in note.content:
                        note.content += step_info
                
                self.db.save_note(note, Path(note_info["path"]).name)
                break
    
    async def _finalize_execution_note(self, execution_id: str, results: Dict):
        """–§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–º–µ—Ç–∫—É –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"""
        execution_notes = self.db.search_notes(metadata_filter={"execution_id": execution_id})
        
        for note_info in execution_notes:
            note = self.db.get_note(note_info["path"])
            if note:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                summary = f"""

## –ò—Ç–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {datetime.now().isoformat()}
- **–®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:** {results['steps_completed']}
- **–°—Ç–∞—Ç—É—Å:** {results['status']}
- **–ê–≥–µ–Ω—Ç–æ–≤ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ:** {len(results.get('agent_outputs', {}))}

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
{chr(10).join([f"- **{agent_id}:** {output[:100]}..." for agent_id, output in results.get('agent_outputs', {}).items()])}
"""
                
                note.content += summary
                note.metadata["status"] = results["status"]
                note.metadata["completed_at"] = datetime.now().isoformat()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏
                note.tags = [tag for tag in note.tags if tag != "active"]
                note.tags.append("completed" if results["status"] == "completed" else "failed")
                
                self.db.save_note(note, Path(note_info["path"]).name)
                break 

class ObsidianOrchestrator:
    """
    üß≠ –ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π ObsidianDB
    
    –†–µ—à–∞–µ—Ç –í–°–ï –ø—Ä–æ–±–ª–µ–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
    ‚úÖ –ê–≥–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ ObsidianDB
    ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–º–µ—Ç–∫–∏
    ‚úÖ –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    ‚úÖ –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏ –≥—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π
    ‚úÖ –†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–º–µ—Å—Ç–æ –æ—Ç—á—ë—Ç–æ–≤
    """
    
    def __init__(self, vault_path: str = "./obsidian_vault"):
        self.vault_path = vault_path
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ObsidianDB
        self.db = get_obsidian_db(vault_path)
        self.task_manager = create_task_manager(vault_path)
        
        # SmartValidator –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.smart_validator = SmartValidator()
        
        # –°–æ–∑–¥–∞—ë–º Obsidian-–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.task_analyzer = ObsidianTaskAnalyzer(vault_path)
        self.task_decomposer = ObsidianTaskDecomposer(vault_path)
        self.agent_spawner = ObsidianAgentSpawner(vault_path)
        self.execution_manager = ObsidianExecutionManager(vault_path, self.smart_validator)
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.complexity_evaluator = ComplexityEvaluator()
        self.skillset_matcher = SkillsetMatcher()
        self.team_composer = TeamComposer()
        self.workflow_planner = WorkflowPlanner()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.tasks_processed = 0
        self.agents_created = 0
        
        logger.info(f"üß≠ ObsidianOrchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å vault: {vault_path}")
    
    async def solve_task(self, task: str, user_id: str = None) -> Dict[str, Any]:
        """
        üéØ –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ - —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ ObsidianDB
        
        –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
        1. –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –≤ TaskManager
        2. –ê–Ω–∞–ª–∏–∑ –∏ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ ObsidianDB
        3. –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏
        4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–º–µ—Ç–∫–∏
        5. –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ ObsidianDB
        """
        logger.info(f"üéØ ObsidianOrchestrator —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É: {task[:50]}...")
        start_time = datetime.now()
        
        try:
            # –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ ObsidianDB
            task_id = self.task_manager.create_task(task, user_id)
            logger.info(f"üìã –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
            
            # –≠–¢–ê–ü 2: –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ ObsidianDB)
            complexity_analysis = self.task_analyzer.analyze_task_complexity(task, task_id)
            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑: {complexity_analysis['complexity']} ({complexity_analysis['estimated_agents']} –∞–≥–µ–Ω—Ç–æ–≤)")
            
            # –≠–¢–ê–ü 3: –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ ObsidianDB)
            subtasks = self.task_decomposer.decompose_task(task, complexity_analysis["complexity"], task_id)
            logger.info(f"üîÑ –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è: {len(subtasks)} –ø–æ–¥–∑–∞–¥–∞—á")
            
            # –≠–¢–ê–ü 4: –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏
            resources = self.complexity_evaluator.evaluate_resources(subtasks)
            skills = self.skillset_matcher.match_skills(subtasks)
            
            agents = {}
            for subtask in subtasks:
                required_skills = skills[subtask["id"]]
                agent = self.agent_spawner.spawn_agent_for_task(subtask, required_skills, task_id)
                agent_id = f"agent_{subtask['id']}"
                agents[agent_id] = agent
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ –∫ –∑–∞–¥–∞—á–µ –≤ TaskManager
                self.task_manager.add_agent_to_task(task_id, agent_id, getattr(agent, 'role', 'worker'))
            
            self.agents_created += len(agents)
            logger.info(f"ü§ñ –°–æ–∑–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(agents)}")
            
            # –≠–¢–ê–ü 5: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            team = self.team_composer.compose_team(agents)
            workflow = self.workflow_planner.plan_workflow(subtasks, team)
            logger.info(f"üë• –ö–æ–º–∞–Ω–¥–∞: {team['team_size']} –∞–≥–µ–Ω—Ç–æ–≤, workflow: {len(workflow['steps'])} —à–∞–≥–æ–≤")
            
            # –≠–¢–ê–ü 6: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ObsidianDB
            execution_result = await self.execution_manager.execute_workflow_with_obsidian(workflow, team, task_id)
            logger.info(f"‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {execution_result['status']}")
            
            # –≠–¢–ê–ü 7: –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ ObsidianDB
            final_result = await self._aggregate_results_from_obsidian(task_id, execution_result)
            
            # –≠–¢–ê–ü 8: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
            self.task_manager.update_task_status(
                task_id=task_id,
                status="completed",
                details=f"–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –°–æ–∑–¥–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(final_result.get('agent_outputs', {}))}"
            )
            
            # –≠–¢–ê–ü 9: –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            self.tasks_processed += 1
            
            result = {
                "task": task,
                "task_id": task_id,
                "status": "completed",
                "duration": duration,
                "vault_path": str(self.vault_path),
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ ObsidianDB
                "obsidian_results": final_result,
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                "complexity_analysis": complexity_analysis,
                "subtasks": subtasks,
                "team": team,
                "workflow": workflow,
                "execution": execution_result,
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                "agents_created": len(agents),
                "steps_completed": execution_result.get("steps_completed", 0),
                "vault_notes_created": len(list(Path(self.vault_path).rglob("*.md"))),
                
                "completed_at": end_time.isoformat()
            }
            
            logger.info(f"üéâ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤: {self.vault_path}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
            if 'task_id' in locals():
                self.task_manager.update_task_status(
                    task_id=task_id,
                    status="failed",
                    details=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
                )
            
            raise e
    
    async def _aggregate_results_from_obsidian(self, task_id: str, execution_result: Dict) -> Dict[str, Any]:
        """–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∑–∞–º–µ—Ç–æ–∫ ObsidianDB"""
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞—á–µ–π
        task_notes = self.db.search_notes(metadata_filter={"task_id": task_id})
        
        aggregated = {
            "task_id": task_id,
            "agent_results": [],
            "coordination_messages": [],
            "execution_trace": [],
            "final_outputs": {},
            "created_files": []
        }
        
        for note_info in task_notes:
            folder = note_info["metadata"].get("folder", "")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
            if folder == "agents" and note_info["metadata"].get("result_type"):
                note = self.db.get_note(note_info["path"])
                if note:
                    aggregated["agent_results"].append({
                        "agent_id": note_info["metadata"].get("agent_id"),
                        "result_type": note_info["metadata"].get("result_type"),
                        "content": note.content,
                        "timestamp": note_info["updated"],
                        "file_path": note_info["path"]
                    })
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            elif folder == "coordination":
                note = self.db.get_note(note_info["path"])
                if note:
                    aggregated["coordination_messages"].append({
                        "from_agent": note_info["metadata"].get("from_agent"),
                        "to_agent": note_info["metadata"].get("to_agent"),
                        "content": note.content,
                        "timestamp": note_info["updated"]
                    })
            
            # –¢—Ä–µ–π—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            elif folder == "system" and "execution" in note_info["metadata"].get("execution_id", ""):
                note = self.db.get_note(note_info["path"])
                if note:
                    aggregated["execution_trace"].append({
                        "execution_id": note_info["metadata"].get("execution_id"),
                        "content": note.content,
                        "status": note_info["metadata"].get("status"),
                        "timestamp": note_info["updated"]
                    })
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ö–æ–¥—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
        for agent_result in aggregated["agent_results"]:
            agent_id = agent_result["agent_id"]
            if agent_id not in aggregated["final_outputs"]:
                aggregated["final_outputs"][agent_id] = []
            
            aggregated["final_outputs"][agent_id].append({
                "type": agent_result["result_type"],
                "content": agent_result["content"],
                "timestamp": agent_result["timestamp"]
            })
        
        # –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        for step_result in execution_result.get("step_results", {}).values():
            if "files_created" in step_result:
                aggregated["created_files"].extend(step_result["files_created"])
        
        return aggregated
    
    def get_task_summary(self, task_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞–¥–∞—á–∏ –∏–∑ ObsidianDB"""
        return self.task_manager.get_task_summary(task_id)
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        vault_stats = {
            "total_notes": len(list(Path(self.vault_path).rglob("*.md"))),
            "tasks_notes": len(list(Path(self.vault_path).glob("tasks/*.md"))),
            "agents_notes": len(list(Path(self.vault_path).glob("agents/**/*.md"))),
            "coordination_notes": len(list(Path(self.vault_path).glob("coordination/*.md"))),
            "system_notes": len(list(Path(self.vault_path).glob("system/*.md")))
        }
        
        return {
            "tasks_processed": self.tasks_processed,
            "agents_created": self.agents_created,
            "vault_path": str(self.vault_path),
            "vault_statistics": vault_stats
        }

def create_obsidian_orchestrator(vault_path: str = "./obsidian_vault") -> ObsidianOrchestrator:
    """–°–æ–∑–¥–∞—ë—Ç ObsidianOrchestrator"""
    return ObsidianOrchestrator(vault_path)

async def solve_with_obsidian_orchestrator(task: str, vault_path: str = "./obsidian_vault", **kwargs) -> Dict[str, Any]:
    """–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ ObsidianOrchestrator"""
    orchestrator = create_obsidian_orchestrator(vault_path)
    return await orchestrator.solve_task(task, kwargs.get('user_id')) 