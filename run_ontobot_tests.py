#!/usr/bin/env python3
"""
üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–¢–ï–°–¢–û–í ONTOBOT
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–ó–∞–ø—É—Å–∫–∞–µ—Ç:
1. Telegram Mock Server (–ø–æ—Ä—Ç 8081)
2. OntoBot Test Runner
3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã
"""

import asyncio
import subprocess
import time
import signal
import sys
from pathlib import Path
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add(
    "logs/test_launcher.log",
    rotation="10 MB",
    retention="7 days",
    compression="gz",
    format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | LAUNCHER | {message}",
    level="INFO"
)

class OntoTestLauncher:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ OntoBot."""
    
    def __init__(self):
        self.mock_server_process = None
        self.running = True
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        logger.info("üöÄ OntoBot Test Launcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.running = False
        self._cleanup()
        sys.exit(0)
    
    def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        if self.mock_server_process:
            logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Mock Server...")
            self.mock_server_process.terminate()
            try:
                self.mock_server_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                logger.warning("‚ö†Ô∏è Mock Server –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º")
                self.mock_server_process.kill()
    
    async def start_mock_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram Mock Server."""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram Mock Server...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–∫ —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            self.mock_server_process = subprocess.Popen([
                sys.executable, "tests/telegram_mock_server.py"
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            await asyncio.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            if self.mock_server_process.poll() is None:
                logger.info("‚úÖ Telegram Mock Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8082")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Mock Server")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Mock Server: {e}")
            return False
    
    async def check_kittycore_api(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å KittyCore API."""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ KittyCore API...")
        
        try:
            import aiohttp
            
            async with aiohttp.ClientSession() as session:
                async with session.get("http://localhost:8085/health") as response:
                    if response.status == 200:
                        logger.info("‚úÖ KittyCore API –¥–æ—Å—Ç—É–ø–µ–Ω")
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è KittyCore API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                        return False
                        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è KittyCore API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ KittyCore –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8085")
            return False
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã OntoBot."""
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ OntoBot...")
        
        try:
            from tests.ontobot_test_runner import OntoTestRunner
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç —Ä–∞–Ω–Ω–µ—Ä
            runner = OntoTestRunner()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
            summary = await runner.run_all_tests()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            runner.save_report()
            
            return summary
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
            return None
    
    async def run_full_test_cycle(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OntoBot")
        
        try:
            # 1. –ó–∞–ø—É—Å–∫–∞–µ–º Mock Server
            if not await self.start_mock_server():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Mock Server, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã")
                return
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º KittyCore API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            await self.check_kittycore_api()
            
            # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            summary = await self.run_tests()
            
            if summary:
                # 4. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self._print_summary(summary)
                
                # 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
                if summary['failed'] > 0:
                    logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
                    return 1
                else:
                    logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
                    return 0
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã")
                return 1
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return 1
        
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            self._cleanup()
    
    def _print_summary(self, summary):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∞—Ö."""
        
        print("\n" + "="*60)
        print("üß™ –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò ONTOBOT")
        print("="*60)
        print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_tests']}")
        print(f"‚úÖ –ü—Ä–æ—à–ª–∏: {summary['passed']}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {summary['failed']}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate']:.1f}%")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary['total_duration']:.2f}—Å")
        print("="*60)
        
        if summary['failed'] > 0:
            print("\n‚ùå –ü–†–û–í–ê–õ–ò–í–®–ò–ï–°–Ø –¢–ï–°–¢–´:")
            for result in summary['results']:
                if not result['success']:
                    error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    print(f"  ‚Ä¢ {result['test_name']}: {error}")
        
        if summary['passed'] > 0:
            print("\n‚úÖ –£–°–ü–ï–®–ù–´–ï –¢–ï–°–¢–´:")
            for result in summary['results']:
                if result['success']:
                    duration = result.get('duration', 0)
                    print(f"  ‚Ä¢ {result['test_name']}: {duration:.2f}—Å")
        
        print("\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ logs/")
        print("="*60)

# === –ü–†–û–°–¢–´–ï –ö–û–ú–ê–ù–î–´ ===

async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç - —Ç–æ–ª—å–∫–æ Mock Server."""
    logger.info("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Mock Server")
    
    launcher = OntoTestLauncher()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ Mock Server
        if await launcher.start_mock_server():
            logger.info("‚úÖ Mock Server —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.get("http://localhost:8082/") as response:
                    result = await response.json()
                    print(f"üìä Mock Server —Å—Ç–∞—Ç—É—Å: {result}")
            
            await asyncio.sleep(2)
        
    finally:
        launcher._cleanup()

async def full_test():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–æ –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏."""
    launcher = OntoTestLauncher()
    exit_code = await launcher.run_full_test_cycle()
    sys.exit(exit_code)

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "quick":
            await quick_test()
        elif command == "full":
            await full_test()
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: quick –∏–ª–∏ full")
            sys.exit(1)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
        await full_test()

if __name__ == "__main__":
    print("üöÄ OntoBot Test Launcher")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  python run_ontobot_tests.py quick  - –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Mock Server")
    print("  python run_ontobot_tests.py full   - –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    print()
    
    asyncio.run(main()) 