#!/usr/bin/env python3
"""
üß™ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ –±–µ–∑ CLI
"""

import asyncio
import kittycore

def quality_check(result, user_input):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    issues = []
    warnings = []
    
    duration = result.get('duration', 0)
    execution = result.get('execution', {})
    files_created = execution.get('files_created', [])
    step_results = execution.get('step_results', {})
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if duration < 0.5:
        issues.append(f"‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û –ë–´–°–¢–†–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï: {duration:.2f}—Å")
        issues.append("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –º–æ–∫–∏, –∫—ç—à, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ LLM")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–∏—è
    creation_keywords = ['—Å–æ–∑–¥–∞–π', '—Å–æ–∑–¥–∞—Ç—å', '—Å–¥–µ–ª–∞–π', '—Å–¥–µ–ª–∞—Ç—å', '–Ω–∞–ø–∏—à–∏', '–Ω–∞–ø–∏—Å–∞—Ç—å', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '—Ñ–∞–π–ª', '—Å–∞–π—Ç', 'html', '–≤–µ–±']
    if any(keyword in user_input.lower() for keyword in creation_keywords):
        if not files_created:
            issues.append("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ó–ê–î–ê–ß–ê –°–û–ó–î–ê–ù–ò–Ø –ë–ï–ó –§–ê–ô–õ–û–í")
            issues.append(f"   –ó–∞–ø—Ä–æ—Å '{user_input}' —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –Ω–æ –∞–≥–µ–Ω—Ç –∏—Ö –Ω–µ —Å–æ–∑–¥–∞–ª!")
            issues.append("   –í–æ–∑–º–æ–∂–Ω–æ –∞–≥–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if step_results:
        all_results = " ".join([str(step_result.get('result', '')) for step_result in step_results.values()])
        if "httpbin.org" in all_results:
            if any(word in user_input.lower() for word in ['—Å–∞–π—Ç', '–≤–µ–±', 'html']):
                issues.append("üö® –ù–ï–ê–î–ï–ö–í–ê–¢–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –õ–ï–í–´–ï –î–ï–ô–°–¢–í–ò–Ø")
                issues.append(f"   –ó–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞, –∞ –∞–≥–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç httpbin.org!")
                issues.append("   –ê–≥–µ–Ω—Ç –¥–µ–ª–∞–µ—Ç –ù–ï –¢–û —á—Ç–æ –ø—Ä–æ—Å–∏–ª–∏")
    
    return issues, warnings

async def test_quality_detection():
    """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞"""
    print("üß™ –¢–ï–°–¢ –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú –ö–ê–ß–ï–°–¢–í–ê")
    print("=" * 45)
    
    orchestrator = kittycore.create_orchestrator()
    
    # –¢–µ—Å—Ç: –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞ (–æ–∂–∏–¥–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã)
    print("\nüåê –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞")
    print("-" * 30)
    
    user_input = "–°–¥–µ–ª–∞–π —Å–∞–π—Ç —Å –∫–æ—Ç—è—Ç–∞–º–∏"
    result = await orchestrator.solve_task(user_input)
    
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result['duration']:.2f}—Å")
    
    files = result.get('execution', {}).get('files_created', [])
    print(f"üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(files)}")
    
    step_results = result.get('execution', {}).get('step_results', {})
    print(f"üîß –î–µ–π—Å—Ç–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(step_results)}")
    
    if step_results:
        for step_id, step_result in step_results.items():
            action_result = step_result.get('result', '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
            print(f"   ‚Ä¢ {step_id}: {action_result}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    issues, warnings = quality_check(result, user_input)
    
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê:")
    if issues:
        print("üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
        for issue in issues:
            print(f"   {issue}")
    elif warnings:
        print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        for warning in warnings:
            print(f"   {warning}")
    else:
        print("‚úÖ –ü–†–û–ë–õ–ï–ú –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –†–ê–ë–û–¢–ê–ï–¢
    if issues:
        print(f"\nüéâ –°–ò–°–¢–ï–ú–ê –ö–ê–ß–ï–°–¢–í–ê –†–ê–ë–û–¢–ê–ï–¢!")
        print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ {len(issues)} –ø—Ä–æ–±–ª–µ–º")
        print(f"   üîß –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏")
        
        print(f"\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        print(f"   1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ HTML/CSS —Ñ–∞–π–ª–æ–≤")
        print(f"   2. –ó–∞–º–µ–Ω–∏—Ç—å –ª–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (httpbin.org) –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞")
        print(f"   3. –£–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
        print(f"   4. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    else:
        print(f"\n‚ùå –°–ò–°–¢–ï–ú–ê –ö–ê–ß–ï–°–¢–í–ê –ù–ï –°–†–ê–ë–û–¢–ê–õ–ê!")
        print(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    asyncio.run(test_quality_detection()) 